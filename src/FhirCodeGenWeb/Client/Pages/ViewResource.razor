@page "/view/resource"

@using FhirCodeGenWeb.Client.Components
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>View Resource</PageTitle>
@if (string.IsNullOrEmpty(additionalHeaderText))
{
    <h3>FHIR Resource Viewer</h3>
}
else
{
    <h3>FHIR Resource : @additionalHeaderText</h3>
}

@if (resource != null)
{
    <FhirComplexTable ObjectToDisplay=@resource />
}


@code {
    private string additionalHeaderText = "";

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "packageName")]
    public string PackageName { get; set; } = "";

    /// <summary>Gets or sets the package version.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "version")]
    public string Version { get; set; } = "";

    /// <summary>Gets or sets the identifier.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string Id { get; set; } = "";

    /// <summary>The resource.</summary>
    private FhirComplex? resource = null;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;

        if (string.IsNullOrEmpty(PackageName))
        {
            return;
        }

        await PerformUpdate();
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/view/resource"))
        {
            // manually flag state has changed in case we are in a callback / async context
            await InvokeAsync(() => StateHasChanged());

            // reload our package info
            await PerformUpdate();
        }
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private async Task PerformUpdate()
    {
        if (string.IsNullOrEmpty(PackageName))
        {
            Console.WriteLine("Missing required package name!");
            return;
        }

        if (string.IsNullOrEmpty(Version))
        {
            Console.WriteLine("Missing required version");
            return;
        }

        if (string.IsNullOrEmpty(Id))
        {
            Console.WriteLine("Missing required Id");
            return;
        }

        FhirComplex? requestedComplex = await Http.GetFromJsonAsync<FhirComplex>(
            $"api/package/{PackageName}/{Version}/artifact/resource/{Id}");

        if (requestedComplex == null)
        {
            return;
        }

        resource = requestedComplex;
        additionalHeaderText = resource.ExplicitName ?? resource.Id;
    }
}
