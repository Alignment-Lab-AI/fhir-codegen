@page "/"
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@using FhirCodeGenWeb.Client.Services;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IClientPackageService PackageService
@implements IDisposable

<PageTitle>FHIR Cache</PageTitle>
<h3>Local FHIR Cache</h3>

@if (!loaded)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
    <div class="input-group">
        <span class="input-group-text" id="basic-addon1">Package Directive</span>
        <input
            type="text"
            placeholder="Package Directive"
            aria-label="Package Directive"
            aria-describedby="basic-addon1"
            @bind="directiveToLoad"
            />
        <button class="btn btn-outline-secondary" type="button" @onclick="@(() => ButtonLoadPackageClicked(directiveToLoad))">Add</button>
    </div>
    </p>
    <table class="table table-striped">
        <thead>
            <tr>
                <th></th>
                <th>Cache Directive</th>
                <th>FHIR Version</th>
                <th>Title</th>
                <th>Dependencies</th>
            </tr>
        </thead>
        <tbody>
            @foreach (PackageCacheRecord record in PackageService.PackageRecords.Values)
            {
                <tr>
                    @switch (record.PackageState)
                    {
                        case PackageLoadStateEnum.Loaded:

                            <td><button type="button" @onclick="() => NavToBrowsePackage(record.CacheDirective)">Browse</button></td>
                            break;

                        case PackageLoadStateEnum.Parsed:
                            <td>✔️</td>
                            break;

                        case PackageLoadStateEnum.Queued:
                        case PackageLoadStateEnum.InProgress:
                            <td><div class="spinner-border"></div></td>
                            break;

                        default:
                            <td><button type="button" @onclick="() => ButtonLoadPackageClicked(record.CacheDirective)">Load</button></td>
                            break;
                    }
                    <td>@record.CacheDirective</td>
                    <td>@string.Join(',', record.Details.FhirVersions)</td>
                    <td>@record.Details.Title</td>
                    <td>@DependenciesForPackage(record)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool loaded = false;
    private string directiveToLoad = string.Empty;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override async Task OnInitializedAsync()
    {
        PackageService.OnChanged += PackageServiceChanged;
        await PackageService.UpdatePackagesAndStatusAsync();
        loaded = true;
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        PackageService.OnChanged -= PackageServiceChanged;
    }


    /// <summary>Handles the package service changed event.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information to send to registered event handlers.</param>
    private void PackageServiceChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Navigation to browse package.</summary>
    /// <param name="directive">The directive.</param>
    private void NavToBrowsePackage(string directive)
    {
        string[] components = directive.Split('#');

        if (components.Length > 1)
        {
            NavigationManager.NavigateTo($"/browsePackage?packageName={components[0]}&version={components[1]}");
            return;
        }

        NavigationManager.NavigateTo($"/browsePackage?packageName={components[0]}");
    }

    /// <summary>Button load package clicked.</summary>
    /// <param name="directive">The directive.</param>
    void ButtonLoadPackageClicked(string directive)
    {
        Task.Run(() => PackageService.LoadPackageAsync(directive));
    }

    /// <summary>Dependencies for package.</summary>
    /// <param name="record">The record.</param>
    /// <returns>A string.</returns>
    string DependenciesForPackage(PackageCacheRecord record)
    {
        if (record.Details?.Dependencies?.Any() != true)
        {
            return string.Empty;
        }

        return string.Join(", ", record.Details.Dependencies.Select((KeyValuePair<string, string> kvp) => $"{kvp.Key}#{kvp.Value}"));
    }
}
