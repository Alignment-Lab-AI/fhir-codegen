// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// A system or person who shares or receives an instance within the scenario.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ExampleScenarioActor>))]
  public class ExampleScenarioActor : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An explanation of who/what the actor is and its role in the scenario.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// A unique string within the scenario that is used to reference the actor.
    /// </summary>
    public string Key { get; set; }
    /// <summary>
    /// Extension container element for Key
    /// </summary>
    public Element _Key { get; set; }
    /// <summary>
    /// The human-readable name for the actor used when rendering the scenario.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// The category of actor - person or system.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Key))
      {
        writer.WriteString("key", (string)Key!);
      }

      if (_Key != null)
      {
        writer.WritePropertyName("_key");
        _Key.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "key":
          Key = reader.GetString();
          break;

        case "_key":
          _Key = new fhirCsR5.Models.Element();
          _Key.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ExampleScenario.actor.type field
  /// </summary>
  public static class ExampleScenarioActorTypeCodes {
    public const string PERSON = "person";
    public const string SYSTEM = "system";
    public static HashSet<string> Values = new HashSet<string>() {
      "person",
      "system",
    };
  }
  /// <summary>
  /// Not used if an instance doesn't change
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ExampleScenarioInstanceVersion>))]
  public class ExampleScenarioInstanceVersion : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// If not conveying FHIR data or not using the same version of FHIR as this ExampleScenario instance, the reference must be to a Binary.
    /// </summary>
    public Reference Content { get; set; }
    /// <summary>
    /// An explanation of what this specific version of the instance contains and represents.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// A unique string within the instance that is used to reference the version of the instance.
    /// </summary>
    public string Key { get; set; }
    /// <summary>
    /// Extension container element for Key
    /// </summary>
    public Element _Key { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Key))
      {
        writer.WriteString("key", (string)Key!);
      }

      if (_Key != null)
      {
        writer.WritePropertyName("_key");
        _Key.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Content != null)
      {
        writer.WritePropertyName("content");
        Content.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "content":
          Content = new fhirCsR5.Models.Reference();
          Content.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "key":
          Key = reader.GetString();
          break;

        case "_key":
          _Key = new fhirCsR5.Models.Element();
          _Key.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// References to other instances that can be found within this instance (e.g. the observations contained in a bundle).
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ExampleScenarioInstanceContainedInstance>))]
  public class ExampleScenarioInstanceContainedInstance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A reference to the key of an instance found within this one.
    /// </summary>
    public string InstanceReference { get; set; }
    /// <summary>
    /// Extension container element for InstanceReference
    /// </summary>
    public Element _InstanceReference { get; set; }
    /// <summary>
    /// Required if the referenced instance has versions
    /// </summary>
    public string VersionReference { get; set; }
    /// <summary>
    /// Extension container element for VersionReference
    /// </summary>
    public Element _VersionReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(InstanceReference))
      {
        writer.WriteString("instanceReference", (string)InstanceReference!);
      }

      if (_InstanceReference != null)
      {
        writer.WritePropertyName("_instanceReference");
        _InstanceReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(VersionReference))
      {
        writer.WriteString("versionReference", (string)VersionReference!);
      }

      if (_VersionReference != null)
      {
        writer.WritePropertyName("_versionReference");
        _VersionReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "instanceReference":
          InstanceReference = reader.GetString();
          break;

        case "_instanceReference":
          _InstanceReference = new fhirCsR5.Models.Element();
          _InstanceReference.DeserializeJson(ref reader, options);
          break;

        case "versionReference":
          VersionReference = reader.GetString();
          break;

        case "_versionReference":
          _VersionReference = new fhirCsR5.Models.Element();
          _VersionReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A single data collection that is shared as part of the scenario.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ExampleScenarioInstance>))]
  public class ExampleScenarioInstance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// References to other instances that can be found within this instance (e.g. the observations contained in a bundle).
    /// </summary>
    public List<ExampleScenarioInstanceContainedInstance> ContainedInstance { get; set; }
    /// <summary>
    /// If not conveying FHIR data or not using the same version of FHIR as this ExampleScenario instance, the reference must be to a Binary.
    /// </summary>
    public Reference Content { get; set; }
    /// <summary>
    /// An explanation of what the instance contains and what it's for.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// A unique string within the scenario that is used to reference the instance.
    /// </summary>
    public string Key { get; set; }
    /// <summary>
    /// Extension container element for Key
    /// </summary>
    public Element _Key { get; set; }
    /// <summary>
    /// Refers to a profile, template or other ruleset the instance adheres to.
    /// </summary>
    public string StructureProfileCanonical { get; set; }
    /// <summary>
    /// Extension container element for StructureProfileCanonical
    /// </summary>
    public Element _StructureProfileCanonical { get; set; }
    /// <summary>
    /// Refers to a profile, template or other ruleset the instance adheres to.
    /// </summary>
    public string StructureProfileUri { get; set; }
    /// <summary>
    /// Extension container element for StructureProfileUri
    /// </summary>
    public Element _StructureProfileUri { get; set; }
    /// <summary>
    /// A code indicating the kind of data structure (FHIR resource or some other standard) this is an instance of.
    /// </summary>
    public Coding StructureType { get; set; }
    /// <summary>
    /// Conveys the version of the data structure instantiated.  I.e. what release of FHIR, X12, OpenEHR, etc. is instance compliant with.
    /// </summary>
    public string StructureVersion { get; set; }
    /// <summary>
    /// Extension container element for StructureVersion
    /// </summary>
    public Element _StructureVersion { get; set; }
    /// <summary>
    /// A short descriptive label the instance to be used in tables or diagrams.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Not used if an instance doesn't change
    /// </summary>
    public List<ExampleScenarioInstanceVersion> Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Key))
      {
        writer.WriteString("key", (string)Key!);
      }

      if (_Key != null)
      {
        writer.WritePropertyName("_key");
        _Key.SerializeJson(writer, options);
      }

      if (StructureType != null)
      {
        writer.WritePropertyName("structureType");
        StructureType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StructureVersion))
      {
        writer.WriteString("structureVersion", (string)StructureVersion!);
      }

      if (_StructureVersion != null)
      {
        writer.WritePropertyName("_structureVersion");
        _StructureVersion.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StructureProfileCanonical))
      {
        writer.WriteString("structureProfileCanonical", (string)StructureProfileCanonical!);
      }

      if (_StructureProfileCanonical != null)
      {
        writer.WritePropertyName("_structureProfileCanonical");
        _StructureProfileCanonical.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StructureProfileUri))
      {
        writer.WriteString("structureProfileUri", (string)StructureProfileUri!);
      }

      if (_StructureProfileUri != null)
      {
        writer.WritePropertyName("_structureProfileUri");
        _StructureProfileUri.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Content != null)
      {
        writer.WritePropertyName("content");
        Content.SerializeJson(writer, options);
      }

      if ((Version != null) && (Version.Count != 0))
      {
        writer.WritePropertyName("version");
        writer.WriteStartArray();

        foreach (ExampleScenarioInstanceVersion valVersion in Version)
        {
          valVersion.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ContainedInstance != null) && (ContainedInstance.Count != 0))
      {
        writer.WritePropertyName("containedInstance");
        writer.WriteStartArray();

        foreach (ExampleScenarioInstanceContainedInstance valContainedInstance in ContainedInstance)
        {
          valContainedInstance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "containedInstance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ContainedInstance = new List<ExampleScenarioInstanceContainedInstance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ExampleScenarioInstanceContainedInstance objContainedInstance = new fhirCsR5.Models.ExampleScenarioInstanceContainedInstance();
            objContainedInstance.DeserializeJson(ref reader, options);
            ContainedInstance.Add(objContainedInstance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ContainedInstance.Count == 0)
          {
            ContainedInstance = null;
          }

          break;

        case "content":
          Content = new fhirCsR5.Models.Reference();
          Content.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "key":
          Key = reader.GetString();
          break;

        case "_key":
          _Key = new fhirCsR5.Models.Element();
          _Key.DeserializeJson(ref reader, options);
          break;

        case "structureProfileCanonical":
          StructureProfileCanonical = reader.GetString();
          break;

        case "_structureProfileCanonical":
          _StructureProfileCanonical = new fhirCsR5.Models.Element();
          _StructureProfileCanonical.DeserializeJson(ref reader, options);
          break;

        case "structureProfileUri":
          StructureProfileUri = reader.GetString();
          break;

        case "_structureProfileUri":
          _StructureProfileUri = new fhirCsR5.Models.Element();
          _StructureProfileUri.DeserializeJson(ref reader, options);
          break;

        case "structureType":
          StructureType = new fhirCsR5.Models.Coding();
          StructureType.DeserializeJson(ref reader, options);
          break;

        case "structureVersion":
          StructureVersion = reader.GetString();
          break;

        case "_structureVersion":
          _StructureVersion = new fhirCsR5.Models.Element();
          _StructureVersion.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Version = new List<ExampleScenarioInstanceVersion>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ExampleScenarioInstanceVersion objVersion = new fhirCsR5.Models.ExampleScenarioInstanceVersion();
            objVersion.DeserializeJson(ref reader, options);
            Version.Add(objVersion);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Version.Count == 0)
          {
            Version = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The step represents a single operation invoked on receiver by sender.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ExampleScenarioProcessStepOperation>))]
  public class ExampleScenarioProcessStepOperation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This should contain information not already present in the process step.  It's more of a description of what the operation in general does - if not already evident from the operation.type
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// This must either be the 'key' of one of the actors defined in this scenario or the special keyword 'OTHER' if the initiator is not one of the actors defined for the scenario.  (Multiple references to 'OTHER' don't necessarily indicate the same actor.)
    /// </summary>
    public string Initiator { get; set; }
    /// <summary>
    /// Extension container element for Initiator
    /// </summary>
    public Element _Initiator { get; set; }
    /// <summary>
    /// De-activation of an actor means they have no further role until such time as they are the recipient of an operation.
    /// </summary>
    public bool? InitiatorActive { get; set; }
    /// <summary>
    /// Extension container element for InitiatorActive
    /// </summary>
    public Element _InitiatorActive { get; set; }
    /// <summary>
    /// This must either be the 'key' of one of the actors defined in this scenario or the special keyword 'OTHER' if the receiver is not one of the actors defined for the scenario.  (Multiple references to 'OTHER' don't necessarily indicate the same actor.)  In some cases, receiver could be same as sender if representing a local operation
    /// </summary>
    public string Receiver { get; set; }
    /// <summary>
    /// Extension container element for Receiver
    /// </summary>
    public Element _Receiver { get; set; }
    /// <summary>
    /// De-activation of an actor means they have no further role until such time as they are the recipient of an operation.
    /// </summary>
    public bool? ReceiverActive { get; set; }
    /// <summary>
    /// Extension container element for ReceiverActive
    /// </summary>
    public Element _ReceiverActive { get; set; }
    /// <summary>
    /// A reference to the instance that is transmitted from requester to receiver as part of the invocation of the operation.
    /// </summary>
    public ExampleScenarioInstanceContainedInstance Request { get; set; }
    /// <summary>
    /// A reference to the instance that is transmitted from receiver to requester as part of the operation's synchronous response (if any).
    /// </summary>
    public ExampleScenarioInstanceContainedInstance Response { get; set; }
    /// <summary>
    /// A short descriptive label the step to be used in tables or diagrams.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// The standardized type of action (FHIR or otherwise).
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Initiator))
      {
        writer.WriteString("initiator", (string)Initiator!);
      }

      if (_Initiator != null)
      {
        writer.WritePropertyName("_initiator");
        _Initiator.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Receiver))
      {
        writer.WriteString("receiver", (string)Receiver!);
      }

      if (_Receiver != null)
      {
        writer.WritePropertyName("_receiver");
        _Receiver.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (InitiatorActive != null)
      {
        writer.WriteBoolean("initiatorActive", (bool)InitiatorActive!);
      }

      if (_InitiatorActive != null)
      {
        writer.WritePropertyName("_initiatorActive");
        _InitiatorActive.SerializeJson(writer, options);
      }

      if (ReceiverActive != null)
      {
        writer.WriteBoolean("receiverActive", (bool)ReceiverActive!);
      }

      if (_ReceiverActive != null)
      {
        writer.WritePropertyName("_receiverActive");
        _ReceiverActive.SerializeJson(writer, options);
      }

      if (Request != null)
      {
        writer.WritePropertyName("request");
        Request.SerializeJson(writer, options);
      }

      if (Response != null)
      {
        writer.WritePropertyName("response");
        Response.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "initiator":
          Initiator = reader.GetString();
          break;

        case "_initiator":
          _Initiator = new fhirCsR5.Models.Element();
          _Initiator.DeserializeJson(ref reader, options);
          break;

        case "initiatorActive":
          InitiatorActive = reader.GetBoolean();
          break;

        case "_initiatorActive":
          _InitiatorActive = new fhirCsR5.Models.Element();
          _InitiatorActive.DeserializeJson(ref reader, options);
          break;

        case "receiver":
          Receiver = reader.GetString();
          break;

        case "_receiver":
          _Receiver = new fhirCsR5.Models.Element();
          _Receiver.DeserializeJson(ref reader, options);
          break;

        case "receiverActive":
          ReceiverActive = reader.GetBoolean();
          break;

        case "_receiverActive":
          _ReceiverActive = new fhirCsR5.Models.Element();
          _ReceiverActive.DeserializeJson(ref reader, options);
          break;

        case "request":
          Request = new fhirCsR5.Models.ExampleScenarioInstanceContainedInstance();
          Request.DeserializeJson(ref reader, options);
          break;

        case "response":
          Response = new fhirCsR5.Models.ExampleScenarioInstanceContainedInstance();
          Response.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indicates an alternative step that can be taken instead of the sub-process, scenario or operation.  E.g. to represent non-happy-path/exceptional/atypical circumstances.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ExampleScenarioProcessStepAlternative>))]
  public class ExampleScenarioProcessStepAlternative : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Indicates the operation, sub-process or scenario that happens if the alternative option is selected.
    /// </summary>
    public List<ExampleScenarioProcessStep> Step { get; set; }
    /// <summary>
    /// The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Step != null) && (Step.Count != 0))
      {
        writer.WritePropertyName("step");
        writer.WriteStartArray();

        foreach (ExampleScenarioProcessStep valStep in Step)
        {
          valStep.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "step":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Step = new List<ExampleScenarioProcessStep>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ExampleScenarioProcessStep objStep = new fhirCsR5.Models.ExampleScenarioProcessStep();
            objStep.DeserializeJson(ref reader, options);
            Step.Add(objStep);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Step.Count == 0)
          {
            Step = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A significant action that occurs as part of the process.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ExampleScenarioProcessStep>))]
  public class ExampleScenarioProcessStep : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates an alternative step that can be taken instead of the sub-process, scenario or operation.  E.g. to represent non-happy-path/exceptional/atypical circumstances.
    /// </summary>
    public List<ExampleScenarioProcessStepAlternative> Alternative { get; set; }
    /// <summary>
    /// If step numbers are simultaneous, they will be the same.  Numbers don't have to be numeric.  E.g. '2c)' is a valid step number
    /// </summary>
    public string Number { get; set; }
    /// <summary>
    /// Extension container element for Number
    /// </summary>
    public Element _Number { get; set; }
    /// <summary>
    /// The step represents a single operation invoked on receiver by sender.
    /// </summary>
    public ExampleScenarioProcessStepOperation Operation { get; set; }
    /// <summary>
    /// If true, indicates that, following this step, there is a pause in the flow and the subsequent step will occur at some later time (triggered by some event).
    /// </summary>
    public bool? Pause { get; set; }
    /// <summary>
    /// Extension container element for Pause
    /// </summary>
    public Element _Pause { get; set; }
    /// <summary>
    /// Indicates that the step is a complex sub-process with its own steps.
    /// </summary>
    public ExampleScenarioProcess Process { get; set; }
    /// <summary>
    /// Indicates that the step is defined by a seaparate scenario instance.
    /// </summary>
    public string Workflow { get; set; }
    /// <summary>
    /// Extension container element for Workflow
    /// </summary>
    public Element _Workflow { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Number))
      {
        writer.WriteString("number", (string)Number!);
      }

      if (_Number != null)
      {
        writer.WritePropertyName("_number");
        _Number.SerializeJson(writer, options);
      }

      if (Process != null)
      {
        writer.WritePropertyName("process");
        Process.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Workflow))
      {
        writer.WriteString("workflow", (string)Workflow!);
      }

      if (_Workflow != null)
      {
        writer.WritePropertyName("_workflow");
        _Workflow.SerializeJson(writer, options);
      }

      if (Operation != null)
      {
        writer.WritePropertyName("operation");
        Operation.SerializeJson(writer, options);
      }

      if ((Alternative != null) && (Alternative.Count != 0))
      {
        writer.WritePropertyName("alternative");
        writer.WriteStartArray();

        foreach (ExampleScenarioProcessStepAlternative valAlternative in Alternative)
        {
          valAlternative.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Pause != null)
      {
        writer.WriteBoolean("pause", (bool)Pause!);
      }

      if (_Pause != null)
      {
        writer.WritePropertyName("_pause");
        _Pause.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "alternative":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Alternative = new List<ExampleScenarioProcessStepAlternative>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ExampleScenarioProcessStepAlternative objAlternative = new fhirCsR5.Models.ExampleScenarioProcessStepAlternative();
            objAlternative.DeserializeJson(ref reader, options);
            Alternative.Add(objAlternative);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Alternative.Count == 0)
          {
            Alternative = null;
          }

          break;

        case "number":
          Number = reader.GetString();
          break;

        case "_number":
          _Number = new fhirCsR5.Models.Element();
          _Number.DeserializeJson(ref reader, options);
          break;

        case "operation":
          Operation = new fhirCsR5.Models.ExampleScenarioProcessStepOperation();
          Operation.DeserializeJson(ref reader, options);
          break;

        case "pause":
          Pause = reader.GetBoolean();
          break;

        case "_pause":
          _Pause = new fhirCsR5.Models.Element();
          _Pause.DeserializeJson(ref reader, options);
          break;

        case "process":
          Process = new fhirCsR5.Models.ExampleScenarioProcess();
          Process.DeserializeJson(ref reader, options);
          break;

        case "workflow":
          Workflow = reader.GetString();
          break;

        case "_workflow":
          _Workflow = new fhirCsR5.Models.Element();
          _Workflow.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Some scenarios might describe only one process.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ExampleScenarioProcess>))]
  public class ExampleScenarioProcess : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An explanation of what the process represents and what it does.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Alternate steps might not result in all post conditions holding
    /// </summary>
    public string PostConditions { get; set; }
    /// <summary>
    /// Extension container element for PostConditions
    /// </summary>
    public Element _PostConditions { get; set; }
    /// <summary>
    /// Description of the initial state of the actors, environment and data before the process starts.
    /// </summary>
    public string PreConditions { get; set; }
    /// <summary>
    /// Extension container element for PreConditions
    /// </summary>
    public Element _PreConditions { get; set; }
    /// <summary>
    /// A significant action that occurs as part of the process.
    /// </summary>
    public List<ExampleScenarioProcessStep> Step { get; set; }
    /// <summary>
    /// A short descriptive label the process to be used in tables or diagrams.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PreConditions))
      {
        writer.WriteString("preConditions", (string)PreConditions!);
      }

      if (_PreConditions != null)
      {
        writer.WritePropertyName("_preConditions");
        _PreConditions.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PostConditions))
      {
        writer.WriteString("postConditions", (string)PostConditions!);
      }

      if (_PostConditions != null)
      {
        writer.WritePropertyName("_postConditions");
        _PostConditions.SerializeJson(writer, options);
      }

      if ((Step != null) && (Step.Count != 0))
      {
        writer.WritePropertyName("step");
        writer.WriteStartArray();

        foreach (ExampleScenarioProcessStep valStep in Step)
        {
          valStep.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "postConditions":
          PostConditions = reader.GetString();
          break;

        case "_postConditions":
          _PostConditions = new fhirCsR5.Models.Element();
          _PostConditions.DeserializeJson(ref reader, options);
          break;

        case "preConditions":
          PreConditions = reader.GetString();
          break;

        case "_preConditions":
          _PreConditions = new fhirCsR5.Models.Element();
          _PreConditions.DeserializeJson(ref reader, options);
          break;

        case "step":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Step = new List<ExampleScenarioProcessStep>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ExampleScenarioProcessStep objStep = new fhirCsR5.Models.ExampleScenarioProcessStep();
            objStep.DeserializeJson(ref reader, options);
            Step.Add(objStep);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Step.Count == 0)
          {
            Step = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Example of workflow instance.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ExampleScenario>))]
  public class ExampleScenario : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ExampleScenario";
    /// <summary>
    /// A system or person who shares or receives an instance within the scenario.
    /// </summary>
    public List<ExampleScenarioActor> Actor { get; set; }
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// ...
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
    /// </summary>
    public string CopyrightLabel { get; set; }
    /// <summary>
    /// Extension container element for CopyrightLabel
    /// </summary>
    public Element _CopyrightLabel { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the example scenario. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// This description can be used to capture details such as comments about misuse. It is not a rendering of the ExampleScenario as conveyed in the 'text' field of the resource itself.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Allows filtering of example scenarios that are appropriate for use versus not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Extension container element for Experimental
    /// </summary>
    public Element _Experimental { get; set; }
    /// <summary>
    /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this example scenario outside of FHIR, where it is not possible to use the logical URI.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// A single data collection that is shared as part of the scenario.
    /// </summary>
    public List<ExampleScenarioInstance> Instance { get; set; }
    /// <summary>
    /// It may be possible for the example scenario to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// Not needed as code will never be generated from one of these
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Some scenarios might describe only one process.
    /// </summary>
    public List<ExampleScenarioProcess> Process { get; set; }
    /// <summary>
    /// Usually an organization but may be an individual. The publisher (or steward) of the example scenario is the organization or individual primarily responsible for the maintenance and upkeep of the example scenario. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the example scenario. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the example scenario. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this example scenario.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// Allows filtering of example scenarios that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
    /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
    /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different example scenario instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the example scenario with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
    /// </summary>
    public string VersionAlgorithmString { get; set; }
    /// <summary>
    /// Extension container element for VersionAlgorithmString
    /// </summary>
    public Element _VersionAlgorithmString { get; set; }
    /// <summary>
    /// If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
    /// </summary>
    public Coding VersionAlgorithmCoding { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(VersionAlgorithmString))
      {
        writer.WriteString("versionAlgorithmString", (string)VersionAlgorithmString!);
      }

      if (_VersionAlgorithmString != null)
      {
        writer.WritePropertyName("_versionAlgorithmString");
        _VersionAlgorithmString.SerializeJson(writer, options);
      }

      if (VersionAlgorithmCoding != null)
      {
        writer.WritePropertyName("versionAlgorithmCoding");
        VersionAlgorithmCoding.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (_Experimental != null)
      {
        writer.WritePropertyName("_experimental");
        _Experimental.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CopyrightLabel))
      {
        writer.WriteString("copyrightLabel", (string)CopyrightLabel!);
      }

      if (_CopyrightLabel != null)
      {
        writer.WritePropertyName("_copyrightLabel");
        _CopyrightLabel.SerializeJson(writer, options);
      }

      if ((Actor != null) && (Actor.Count != 0))
      {
        writer.WritePropertyName("actor");
        writer.WriteStartArray();

        foreach (ExampleScenarioActor valActor in Actor)
        {
          valActor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Instance != null) && (Instance.Count != 0))
      {
        writer.WritePropertyName("instance");
        writer.WriteStartArray();

        foreach (ExampleScenarioInstance valInstance in Instance)
        {
          valInstance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Process != null) && (Process.Count != 0))
      {
        writer.WritePropertyName("process");
        writer.WriteStartArray();

        foreach (ExampleScenarioProcess valProcess in Process)
        {
          valProcess.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Actor = new List<ExampleScenarioActor>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ExampleScenarioActor objActor = new fhirCsR5.Models.ExampleScenarioActor();
            objActor.DeserializeJson(ref reader, options);
            Actor.Add(objActor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Actor.Count == 0)
          {
            Actor = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ContactDetail objContact = new fhirCsR5.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR5.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "copyrightLabel":
          CopyrightLabel = reader.GetString();
          break;

        case "_copyrightLabel":
          _CopyrightLabel = new fhirCsR5.Models.Element();
          _CopyrightLabel.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR5.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "_experimental":
          _Experimental = new fhirCsR5.Models.Element();
          _Experimental.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "instance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Instance = new List<ExampleScenarioInstance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ExampleScenarioInstance objInstance = new fhirCsR5.Models.ExampleScenarioInstance();
            objInstance.DeserializeJson(ref reader, options);
            Instance.Add(objInstance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Instance.Count == 0)
          {
            Instance = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objJurisdiction = new fhirCsR5.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "process":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Process = new List<ExampleScenarioProcess>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ExampleScenarioProcess objProcess = new fhirCsR5.Models.ExampleScenarioProcess();
            objProcess.DeserializeJson(ref reader, options);
            Process.Add(objProcess);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Process.Count == 0)
          {
            Process = null;
          }

          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR5.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR5.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR5.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.UsageContext objUseContext = new fhirCsR5.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR5.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        case "versionAlgorithmString":
          VersionAlgorithmString = reader.GetString();
          break;

        case "_versionAlgorithmString":
          _VersionAlgorithmString = new fhirCsR5.Models.Element();
          _VersionAlgorithmString.DeserializeJson(ref reader, options);
          break;

        case "versionAlgorithmCoding":
          VersionAlgorithmCoding = new fhirCsR5.Models.Coding();
          VersionAlgorithmCoding.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ExampleScenario.status field
  /// </summary>
  public static class ExampleScenarioStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
      "unknown",
    };
  }
}
