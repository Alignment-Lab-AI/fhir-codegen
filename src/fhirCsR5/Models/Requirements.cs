// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// A statement of requirements.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<RequirementsStatement>))]
  public class RequirementsStatement : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The conformance code is extracted from the requirement to make indexing and display easier. The requirement needs to express the conformance verbs directly in the markdown content. It's not unusual to mix verbs in a single sentence (e.g. System SHALL do X and SHOULD do Y)
    /// </summary>
    public List<string> Conformance { get; set; }
    /// <summary>
    /// Extension container element for Conformance
    /// </summary>
    public List<Element> _Conformance { get; set; }
    /// <summary>
    /// This can be just a key, if there is only one matching statement in the requirements statements referenced in Requirements.derivedFrom. if there is more than one, it should be in the format ```url#key```
    /// </summary>
    public string DerivedFrom { get; set; }
    /// <summary>
    /// Extension container element for DerivedFrom
    /// </summary>
    public Element _DerivedFrom { get; set; }
    /// <summary>
    /// Refer directly to the statement by {url}#{key}
    /// </summary>
    public string Key { get; set; }
    /// <summary>
    /// Extension container element for Key
    /// </summary>
    public Element _Key { get; set; }
    /// <summary>
    /// The key is intended for computers, while this is intended for humans. In its absence, the key should be convenient for a human to say (e.g. not a UUID)
    /// </summary>
    public string Label { get; set; }
    /// <summary>
    /// Extension container element for Label
    /// </summary>
    public Element _Label { get; set; }
    /// <summary>
    /// A reference to another artifact that created this requirement. This could be a Profile, etc, or external regulation, or business requirements expressed elsewhere.
    /// </summary>
    public List<string> Reference { get; set; }
    /// <summary>
    /// Extension container element for Reference
    /// </summary>
    public List<Element> _Reference { get; set; }
    /// <summary>
    /// The actual requirement for human consumption.
    /// </summary>
    public string Requirement { get; set; }
    /// <summary>
    /// Extension container element for Requirement
    /// </summary>
    public Element _Requirement { get; set; }
    /// <summary>
    /// This is for use when the requirement is met be an pre-existing artifact e.g. a rule that's met by the base FHIR spec, or a national implementation guide.
    /// </summary>
    public List<string> SatisfiedBy { get; set; }
    /// <summary>
    /// Extension container element for SatisfiedBy
    /// </summary>
    public List<Element> _SatisfiedBy { get; set; }
    /// <summary>
    /// Who asked for this statement to be a requirement. By default, it's assumed that the publisher knows who it is if it matters.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Key))
      {
        writer.WriteString("key", (string)Key!);
      }

      if (_Key != null)
      {
        writer.WritePropertyName("_key");
        _Key.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Label))
      {
        writer.WriteString("label", (string)Label!);
      }

      if (_Label != null)
      {
        writer.WritePropertyName("_label");
        _Label.SerializeJson(writer, options);
      }

      if ((Conformance != null) && (Conformance.Count != 0))
      {
        writer.WritePropertyName("conformance");
        writer.WriteStartArray();

        foreach (string valConformance in Conformance)
        {
          writer.WriteStringValue(valConformance);
        }

        writer.WriteEndArray();
      }

      if ((_Conformance != null) && (_Conformance.Count != 0))
      {
        writer.WritePropertyName("_conformance");
        writer.WriteStartArray();

        foreach (Element val_Conformance in _Conformance)
        {
          val_Conformance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Requirement))
      {
        writer.WriteString("requirement", (string)Requirement!);
      }

      if (_Requirement != null)
      {
        writer.WritePropertyName("_requirement");
        _Requirement.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DerivedFrom))
      {
        writer.WriteString("derivedFrom", (string)DerivedFrom!);
      }

      if (_DerivedFrom != null)
      {
        writer.WritePropertyName("_derivedFrom");
        _DerivedFrom.SerializeJson(writer, options);
      }

      if ((SatisfiedBy != null) && (SatisfiedBy.Count != 0))
      {
        writer.WritePropertyName("satisfiedBy");
        writer.WriteStartArray();

        foreach (string valSatisfiedBy in SatisfiedBy)
        {
          writer.WriteStringValue(valSatisfiedBy);
        }

        writer.WriteEndArray();
      }

      if ((_SatisfiedBy != null) && (_SatisfiedBy.Count != 0))
      {
        writer.WritePropertyName("_satisfiedBy");
        writer.WriteStartArray();

        foreach (Element val_SatisfiedBy in _SatisfiedBy)
        {
          val_SatisfiedBy.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Reference != null) && (Reference.Count != 0))
      {
        writer.WritePropertyName("reference");
        writer.WriteStartArray();

        foreach (string valReference in Reference)
        {
          writer.WriteStringValue(valReference);
        }

        writer.WriteEndArray();
      }

      if ((_Reference != null) && (_Reference.Count != 0))
      {
        writer.WritePropertyName("_reference");
        writer.WriteStartArray();

        foreach (Element val_Reference in _Reference)
        {
          val_Reference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "conformance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Conformance = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Conformance.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Conformance.Count == 0)
          {
            Conformance = null;
          }

          break;

        case "_conformance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Conformance = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Conformance = new fhirCsR5.Models.Element();
            obj_Conformance.DeserializeJson(ref reader, options);
            _Conformance.Add(obj_Conformance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Conformance.Count == 0)
          {
            _Conformance = null;
          }

          break;

        case "derivedFrom":
          DerivedFrom = reader.GetString();
          break;

        case "_derivedFrom":
          _DerivedFrom = new fhirCsR5.Models.Element();
          _DerivedFrom.DeserializeJson(ref reader, options);
          break;

        case "key":
          Key = reader.GetString();
          break;

        case "_key":
          _Key = new fhirCsR5.Models.Element();
          _Key.DeserializeJson(ref reader, options);
          break;

        case "label":
          Label = reader.GetString();
          break;

        case "_label":
          _Label = new fhirCsR5.Models.Element();
          _Label.DeserializeJson(ref reader, options);
          break;

        case "reference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reference = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Reference.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reference.Count == 0)
          {
            Reference = null;
          }

          break;

        case "_reference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Reference = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Reference = new fhirCsR5.Models.Element();
            obj_Reference.DeserializeJson(ref reader, options);
            _Reference.Add(obj_Reference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Reference.Count == 0)
          {
            _Reference = null;
          }

          break;

        case "requirement":
          Requirement = reader.GetString();
          break;

        case "_requirement":
          _Requirement = new fhirCsR5.Models.Element();
          _Requirement.DeserializeJson(ref reader, options);
          break;

        case "satisfiedBy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SatisfiedBy = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SatisfiedBy.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SatisfiedBy.Count == 0)
          {
            SatisfiedBy = null;
          }

          break;

        case "_satisfiedBy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _SatisfiedBy = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_SatisfiedBy = new fhirCsR5.Models.Element();
            obj_SatisfiedBy.DeserializeJson(ref reader, options);
            _SatisfiedBy.Add(obj_SatisfiedBy);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_SatisfiedBy.Count == 0)
          {
            _SatisfiedBy = null;
          }

          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objSource = new fhirCsR5.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Requirements.statement.conformance field
  /// </summary>
  public static class RequirementsStatementConformanceCodes {
    public const string SHALL = "SHALL";
    public const string SHOULD = "SHOULD";
    public const string MAY = "MAY";
    public const string SHOULD_NOT = "SHOULD-NOT";
    public static HashSet<string> Values = new HashSet<string>() {
      "SHALL",
      "SHOULD",
      "MAY",
      "SHOULD-NOT",
    };
  }
  /// <summary>
  /// A set of requirements - a list of features or behaviors of designed systems that are necessary to achieve organizational or regulatory goals.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<Requirements>))]
  public class Requirements : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Requirements";
    /// <summary>
    /// If more than one actor is specified, then it's up to the statements to describe in narrative if they don't apply to all actors.
    /// </summary>
    public List<string> Actor { get; set; }
    /// <summary>
    /// Extension container element for Actor
    /// </summary>
    public List<Element> _Actor { get; set; }
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// ...
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
    /// </summary>
    public string CopyrightLabel { get; set; }
    /// <summary>
    /// Extension container element for CopyrightLabel
    /// </summary>
    public Element _CopyrightLabel { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the Requirements. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Existing statements (by key) may be narrowed or clarified, and additional statements added.
    /// </summary>
    public List<string> DerivedFrom { get; set; }
    /// <summary>
    /// Extension container element for DerivedFrom
    /// </summary>
    public List<Element> _DerivedFrom { get; set; }
    /// <summary>
    /// This description can be used for a general description of the actor, and which covers why it was defined.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Allows filtering of Requirements that are appropriate for use versus not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Extension container element for Experimental
    /// </summary>
    public Element _Experimental { get; set; }
    /// <summary>
    /// A formal identifier that is used to identify this Requirements when it is represented in other formats, or referenced in a specification, model, design or an instance.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// It may be possible for the Requirements to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Usually an organization but may be an individual. The publisher (or steward) of the Requirements is the organization or individual primarily responsible for the maintenance and upkeep of the Requirements. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the Requirements. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the Requirements. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this Requirements.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// A statement of requirements.
    /// </summary>
    public List<RequirementsStatement> Statement { get; set; }
    /// <summary>
    /// Allows filtering of Requirements that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
    /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
    /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different Requirements instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the Requirements with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (_Experimental != null)
      {
        writer.WritePropertyName("_experimental");
        _Experimental.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CopyrightLabel))
      {
        writer.WriteString("copyrightLabel", (string)CopyrightLabel!);
      }

      if (_CopyrightLabel != null)
      {
        writer.WritePropertyName("_copyrightLabel");
        _CopyrightLabel.SerializeJson(writer, options);
      }

      if ((DerivedFrom != null) && (DerivedFrom.Count != 0))
      {
        writer.WritePropertyName("derivedFrom");
        writer.WriteStartArray();

        foreach (string valDerivedFrom in DerivedFrom)
        {
          writer.WriteStringValue(valDerivedFrom);
        }

        writer.WriteEndArray();
      }

      if ((_DerivedFrom != null) && (_DerivedFrom.Count != 0))
      {
        writer.WritePropertyName("_derivedFrom");
        writer.WriteStartArray();

        foreach (Element val_DerivedFrom in _DerivedFrom)
        {
          val_DerivedFrom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Actor != null) && (Actor.Count != 0))
      {
        writer.WritePropertyName("actor");
        writer.WriteStartArray();

        foreach (string valActor in Actor)
        {
          writer.WriteStringValue(valActor);
        }

        writer.WriteEndArray();
      }

      if ((_Actor != null) && (_Actor.Count != 0))
      {
        writer.WritePropertyName("_actor");
        writer.WriteStartArray();

        foreach (Element val_Actor in _Actor)
        {
          val_Actor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Statement != null) && (Statement.Count != 0))
      {
        writer.WritePropertyName("statement");
        writer.WriteStartArray();

        foreach (RequirementsStatement valStatement in Statement)
        {
          valStatement.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Actor = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Actor.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Actor.Count == 0)
          {
            Actor = null;
          }

          break;

        case "_actor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Actor = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Actor = new fhirCsR5.Models.Element();
            obj_Actor.DeserializeJson(ref reader, options);
            _Actor.Add(obj_Actor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Actor.Count == 0)
          {
            _Actor = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ContactDetail objContact = new fhirCsR5.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR5.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "copyrightLabel":
          CopyrightLabel = reader.GetString();
          break;

        case "_copyrightLabel":
          _CopyrightLabel = new fhirCsR5.Models.Element();
          _CopyrightLabel.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR5.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "derivedFrom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DerivedFrom = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            DerivedFrom.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DerivedFrom.Count == 0)
          {
            DerivedFrom = null;
          }

          break;

        case "_derivedFrom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _DerivedFrom = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_DerivedFrom = new fhirCsR5.Models.Element();
            obj_DerivedFrom.DeserializeJson(ref reader, options);
            _DerivedFrom.Add(obj_DerivedFrom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_DerivedFrom.Count == 0)
          {
            _DerivedFrom = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "_experimental":
          _Experimental = new fhirCsR5.Models.Element();
          _Experimental.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objJurisdiction = new fhirCsR5.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR5.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR5.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "statement":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Statement = new List<RequirementsStatement>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RequirementsStatement objStatement = new fhirCsR5.Models.RequirementsStatement();
            objStatement.DeserializeJson(ref reader, options);
            Statement.Add(objStatement);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Statement.Count == 0)
          {
            Statement = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR5.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.UsageContext objUseContext = new fhirCsR5.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR5.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Requirements.status field
  /// </summary>
  public static class RequirementsStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
      "unknown",
    };
  }
}
