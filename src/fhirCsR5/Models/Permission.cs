// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// The asserted justification for using the data.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PermissionJustification>))]
  public class PermissionJustification : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This would be a codeableconcept, or a coding, which can be constrained to , for example, the 6 grounds for processing in GDPR.
    /// </summary>
    public List<CodeableConcept> Basis { get; set; }
    /// <summary>
    /// While any resource may be used, DocumentReference, Consent, PlanDefinition, and Contract would be most frequent
    /// </summary>
    public List<Reference> Evidence { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Basis != null) && (Basis.Count != 0))
      {
        writer.WritePropertyName("basis");
        writer.WriteStartArray();

        foreach (CodeableConcept valBasis in Basis)
        {
          valBasis.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Evidence != null) && (Evidence.Count != 0))
      {
        writer.WritePropertyName("evidence");
        writer.WriteStartArray();

        foreach (Reference valEvidence in Evidence)
        {
          valEvidence.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "basis":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Basis = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objBasis = new fhirCsR5.Models.CodeableConcept();
            objBasis.DeserializeJson(ref reader, options);
            Basis.Add(objBasis);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Basis.Count == 0)
          {
            Basis = null;
          }

          break;

        case "evidence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Evidence = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objEvidence = new fhirCsR5.Models.Reference();
            objEvidence.DeserializeJson(ref reader, options);
            Evidence.Add(objEvidence);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Evidence.Count == 0)
          {
            Evidence = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Explicit FHIR Resource references.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PermissionRuleDataResource>))]
  public class PermissionRuleDataResource : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// How the resource reference is interpreted when testing consent restrictions.
    /// </summary>
    public string Meaning { get; set; }
    /// <summary>
    /// Extension container element for Meaning
    /// </summary>
    public Element _Meaning { get; set; }
    /// <summary>
    /// A reference to a specific resource that defines which resources are covered by this consent.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Meaning))
      {
        writer.WriteString("meaning", (string)Meaning!);
      }

      if (_Meaning != null)
      {
        writer.WritePropertyName("_meaning");
        _Meaning.SerializeJson(writer, options);
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "meaning":
          Meaning = reader.GetString();
          break;

        case "_meaning":
          _Meaning = new fhirCsR5.Models.Element();
          _Meaning.DeserializeJson(ref reader, options);
          break;

        case "reference":
          Reference = new fhirCsR5.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Permission.rule.data.resource.meaning field
  /// </summary>
  public static class PermissionRuleDataResourceMeaningCodes {
    public const string INSTANCE = "instance";
    public const string RELATED = "related";
    public const string DEPENDENTS = "dependents";
    public const string AUTHOREDBY = "authoredby";
    public static HashSet<string> Values = new HashSet<string>() {
      "instance",
      "related",
      "dependents",
      "authoredby",
    };
  }
  /// <summary>
  /// A description or definition of which activities are allowed to be done on the data.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PermissionRuleData>))]
  public class PermissionRuleData : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Used when other data selection elements are insufficient.
    /// </summary>
    public Expression Expression { get; set; }
    /// <summary>
    /// This has a different sense to the .validity.
    /// </summary>
    public List<Period> Period { get; set; }
    /// <summary>
    /// Explicit FHIR Resource references.
    /// </summary>
    public List<PermissionRuleDataResource> Resource { get; set; }
    /// <summary>
    /// Note the ConfidentialityCode vocabulary indicates the highest value, thus a security label of "R" then it applies to all resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high water mark. For other kinds of security labels, subsumption logic applies. When the purpose of use tag is on the data, access request purpose of use shall not conflict.
    /// </summary>
    public List<Coding> Security { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Resource != null) && (Resource.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();

        foreach (PermissionRuleDataResource valResource in Resource)
        {
          valResource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Security != null) && (Security.Count != 0))
      {
        writer.WritePropertyName("security");
        writer.WriteStartArray();

        foreach (Coding valSecurity in Security)
        {
          valSecurity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Period != null) && (Period.Count != 0))
      {
        writer.WritePropertyName("period");
        writer.WriteStartArray();

        foreach (Period valPeriod in Period)
        {
          valPeriod.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Expression != null)
      {
        writer.WritePropertyName("expression");
        Expression.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "expression":
          Expression = new fhirCsR5.Models.Expression();
          Expression.DeserializeJson(ref reader, options);
          break;

        case "period":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Period = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Period objPeriod = new fhirCsR5.Models.Period();
            objPeriod.DeserializeJson(ref reader, options);
            Period.Add(objPeriod);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Period.Count == 0)
          {
            Period = null;
          }

          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Resource = new List<PermissionRuleDataResource>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PermissionRuleDataResource objResource = new fhirCsR5.Models.PermissionRuleDataResource();
            objResource.DeserializeJson(ref reader, options);
            Resource.Add(objResource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Resource.Count == 0)
          {
            Resource = null;
          }

          break;

        case "security":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Security = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Coding objSecurity = new fhirCsR5.Models.Coding();
            objSecurity.DeserializeJson(ref reader, options);
            Security.Add(objSecurity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Security.Count == 0)
          {
            Security = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A description or definition of which activities are allowed to be done on the data.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PermissionRuleActivity>))]
  public class PermissionRuleActivity : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Note that this is the direct action (not the grounds for the action covered in the purpose element). At present, the only action in the understood and tested scope of this resource is 'read'.
    /// </summary>
    public List<CodeableConcept> Action { get; set; }
    /// <summary>
    /// The actor(s) authorized for the defined activity.
    /// </summary>
    public List<Reference> Actor { get; set; }
    /// <summary>
    /// The purpose for which the permission is given.
    /// </summary>
    public List<CodeableConcept> Purpose { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Actor != null) && (Actor.Count != 0))
      {
        writer.WritePropertyName("actor");
        writer.WriteStartArray();

        foreach (Reference valActor in Actor)
        {
          valActor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (CodeableConcept valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Purpose != null) && (Purpose.Count != 0))
      {
        writer.WritePropertyName("purpose");
        writer.WriteStartArray();

        foreach (CodeableConcept valPurpose in Purpose)
        {
          valPurpose.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objAction = new fhirCsR5.Models.CodeableConcept();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "actor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Actor = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objActor = new fhirCsR5.Models.Reference();
            objActor.DeserializeJson(ref reader, options);
            Actor.Add(objActor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Actor.Count == 0)
          {
            Actor = null;
          }

          break;

        case "purpose":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Purpose = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objPurpose = new fhirCsR5.Models.CodeableConcept();
            objPurpose.DeserializeJson(ref reader, options);
            Purpose.Add(objPurpose);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Purpose.Count == 0)
          {
            Purpose = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A set of rules.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PermissionRule>))]
  public class PermissionRule : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A description or definition of which activities are allowed to be done on the data.
    /// </summary>
    public List<PermissionRuleActivity> Activity { get; set; }
    /// <summary>
    /// A description or definition of which activities are allowed to be done on the data.
    /// </summary>
    public List<PermissionRuleData> Data { get; set; }
    /// <summary>
    /// What limits apply to the use of the data.
    /// </summary>
    public List<CodeableConcept> Limit { get; set; }
    /// <summary>
    /// deny | permit.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if ((Data != null) && (Data.Count != 0))
      {
        writer.WritePropertyName("data");
        writer.WriteStartArray();

        foreach (PermissionRuleData valData in Data)
        {
          valData.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Activity != null) && (Activity.Count != 0))
      {
        writer.WritePropertyName("activity");
        writer.WriteStartArray();

        foreach (PermissionRuleActivity valActivity in Activity)
        {
          valActivity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Limit != null) && (Limit.Count != 0))
      {
        writer.WritePropertyName("limit");
        writer.WriteStartArray();

        foreach (CodeableConcept valLimit in Limit)
        {
          valLimit.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "activity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Activity = new List<PermissionRuleActivity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PermissionRuleActivity objActivity = new fhirCsR5.Models.PermissionRuleActivity();
            objActivity.DeserializeJson(ref reader, options);
            Activity.Add(objActivity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Activity.Count == 0)
          {
            Activity = null;
          }

          break;

        case "data":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Data = new List<PermissionRuleData>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PermissionRuleData objData = new fhirCsR5.Models.PermissionRuleData();
            objData.DeserializeJson(ref reader, options);
            Data.Add(objData);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Data.Count == 0)
          {
            Data = null;
          }

          break;

        case "limit":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Limit = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objLimit = new fhirCsR5.Models.CodeableConcept();
            objLimit.DeserializeJson(ref reader, options);
            Limit.Add(objLimit);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Limit.Count == 0)
          {
            Limit = null;
          }

          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Permission.rule.type field
  /// </summary>
  public static class PermissionRuleTypeCodes {
    public const string DENY = "deny";
    public const string PERMIT = "permit";
    public static HashSet<string> Values = new HashSet<string>() {
      "deny",
      "permit",
    };
  }
  /// <summary>
  /// Permission resource holds access rules for a given data and context.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<Permission>))]
  public class Permission : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Permission";
    /// <summary>
    /// The person or entity that asserts the permission.
    /// </summary>
    public Reference Asserter { get; set; }
    /// <summary>
    /// see [XACML Combining Rules](http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-cos01-en.html#_Toc325047267)
    /// </summary>
    public string Combining { get; set; }
    /// <summary>
    /// Extension container element for Combining
    /// </summary>
    public Element _Combining { get; set; }
    /// <summary>
    /// The date that permission was asserted.
    /// </summary>
    public List<string> Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public List<Element> _Date { get; set; }
    /// <summary>
    /// The asserted justification for using the data.
    /// </summary>
    public PermissionJustification Justification { get; set; }
    /// <summary>
    /// A set of rules.
    /// </summary>
    public List<PermissionRule> Rule { get; set; }
    /// <summary>
    /// Status.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The period in which the permission is active.
    /// </summary>
    public Period Validity { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Asserter != null)
      {
        writer.WritePropertyName("asserter");
        Asserter.SerializeJson(writer, options);
      }

      if ((Date != null) && (Date.Count != 0))
      {
        writer.WritePropertyName("date");
        writer.WriteStartArray();

        foreach (string valDate in Date)
        {
          writer.WriteStringValue(valDate);
        }

        writer.WriteEndArray();
      }

      if ((_Date != null) && (_Date.Count != 0))
      {
        writer.WritePropertyName("_date");
        writer.WriteStartArray();

        foreach (Element val_Date in _Date)
        {
          val_Date.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Validity != null)
      {
        writer.WritePropertyName("validity");
        Validity.SerializeJson(writer, options);
      }

      if (Justification != null)
      {
        writer.WritePropertyName("justification");
        Justification.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Combining))
      {
        writer.WriteString("combining", (string)Combining!);
      }

      if (_Combining != null)
      {
        writer.WritePropertyName("_combining");
        _Combining.SerializeJson(writer, options);
      }

      if ((Rule != null) && (Rule.Count != 0))
      {
        writer.WritePropertyName("rule");
        writer.WriteStartArray();

        foreach (PermissionRule valRule in Rule)
        {
          valRule.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "asserter":
          Asserter = new fhirCsR5.Models.Reference();
          Asserter.DeserializeJson(ref reader, options);
          break;

        case "combining":
          Combining = reader.GetString();
          break;

        case "_combining":
          _Combining = new fhirCsR5.Models.Element();
          _Combining.DeserializeJson(ref reader, options);
          break;

        case "date":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Date = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Date.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Date.Count == 0)
          {
            Date = null;
          }

          break;

        case "_date":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Date = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Date = new fhirCsR5.Models.Element();
            obj_Date.DeserializeJson(ref reader, options);
            _Date.Add(obj_Date);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Date.Count == 0)
          {
            _Date = null;
          }

          break;

        case "justification":
          Justification = new fhirCsR5.Models.PermissionJustification();
          Justification.DeserializeJson(ref reader, options);
          break;

        case "rule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Rule = new List<PermissionRule>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PermissionRule objRule = new fhirCsR5.Models.PermissionRule();
            objRule.DeserializeJson(ref reader, options);
            Rule.Add(objRule);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Rule.Count == 0)
          {
            Rule = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "validity":
          Validity = new fhirCsR5.Models.Period();
          Validity.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Permission.combining field
  /// </summary>
  public static class PermissionCombiningCodes {
    public const string DENY_OVERRIDES = "deny-overrides";
    public const string PERMIT_OVERRIDES = "permit-overrides";
    public const string ORDERED_DENY_OVERRIDES = "ordered-deny-overrides";
    public const string ORDERED_PERMIT_OVERRIDES = "ordered-permit-overrides";
    public const string DENY_UNLESS_PERMIT = "deny-unless-permit";
    public const string PERMIT_UNLESS_DENY = "permit-unless-deny";
    public static HashSet<string> Values = new HashSet<string>() {
      "deny-overrides",
      "permit-overrides",
      "ordered-deny-overrides",
      "ordered-permit-overrides",
      "deny-unless-permit",
      "permit-unless-deny",
    };
  }
  /// <summary>
  /// Code Values for the Permission.status field
  /// </summary>
  public static class PermissionStatusCodes {
    public const string ACTIVE = "active";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string DRAFT = "draft";
    public const string REJECTED = "rejected";
    public static HashSet<string> Values = new HashSet<string>() {
      "active",
      "entered-in-error",
      "draft",
      "rejected",
    };
  }
}
