// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// List of participants involved in the appointment.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AppointmentParticipant>))]
  public class AppointmentParticipant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Where a CareTeam is provided, this does not imply that the entire team is included, just a single member from the group with the appropriate role. Where multiple members are required, please include the CareTeam the required number of times.
    /// </summary>
    public Reference Actor { get; set; }
    /// <summary>
    /// Participation period of the actor.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// For the use-case where two doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present include the patient in the subject field, but do not include them as a participant - this was formerly done prior to R5 with required='information-only'.
    /// </summary>
    public bool? Required { get; set; }
    /// <summary>
    /// Extension container element for Required
    /// </summary>
    public Element _Required { get; set; }
    /// <summary>
    /// Participation status of the actor.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The role of the participant can be used to declare what the actor will be doing in the scope of this appointment.
    /// If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
    /// This value SHALL be the same when creating an AppointmentResponse so that they can be matched, and subsequently update the Appointment.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (Actor != null)
      {
        writer.WritePropertyName("actor");
        Actor.SerializeJson(writer, options);
      }

      if (Required != null)
      {
        writer.WriteBoolean("required", (bool)Required!);
      }

      if (_Required != null)
      {
        writer.WritePropertyName("_required");
        _Required.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actor":
          Actor = new fhirCsR5.Models.Reference();
          Actor.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR5.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "required":
          Required = reader.GetBoolean();
          break;

        case "_required":
          _Required = new fhirCsR5.Models.Element();
          _Required.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objType = new fhirCsR5.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Appointment.participant.status field
  /// </summary>
  public static class AppointmentParticipantStatusCodes {
    public const string ACCEPTED = "accepted";
    public const string DECLINED = "declined";
    public const string TENTATIVE = "tentative";
    public const string NEEDS_ACTION = "needs-action";
    public static HashSet<string> Values = new HashSet<string>() {
      "accepted",
      "declined",
      "tentative",
      "needs-action",
    };
  }
  /// <summary>
  /// Information about weekly recurring appointments.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AppointmentRecurrenceTemplateWeeklyTemplate>))]
  public class AppointmentRecurrenceTemplateWeeklyTemplate : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates that recurring appointments should occur on Fridays.
    /// </summary>
    public bool? Friday { get; set; }
    /// <summary>
    /// Extension container element for Friday
    /// </summary>
    public Element _Friday { get; set; }
    /// <summary>
    /// Indicates that recurring appointments should occur on Mondays.
    /// </summary>
    public bool? Monday { get; set; }
    /// <summary>
    /// Extension container element for Monday
    /// </summary>
    public Element _Monday { get; set; }
    /// <summary>
    /// Indicates that recurring appointments should occur on Saturdays.
    /// </summary>
    public bool? Saturday { get; set; }
    /// <summary>
    /// Extension container element for Saturday
    /// </summary>
    public Element _Saturday { get; set; }
    /// <summary>
    /// Indicates that recurring appointments should occur on Sundays.
    /// </summary>
    public bool? Sunday { get; set; }
    /// <summary>
    /// Extension container element for Sunday
    /// </summary>
    public Element _Sunday { get; set; }
    /// <summary>
    /// Indicates that recurring appointments should occur on Thursdays.
    /// </summary>
    public bool? Thursday { get; set; }
    /// <summary>
    /// Extension container element for Thursday
    /// </summary>
    public Element _Thursday { get; set; }
    /// <summary>
    /// Indicates that recurring appointments should occur on Tuesdays.
    /// </summary>
    public bool? Tuesday { get; set; }
    /// <summary>
    /// Extension container element for Tuesday
    /// </summary>
    public Element _Tuesday { get; set; }
    /// <summary>
    /// Indicates that recurring appointments should occur on Wednesdays.
    /// </summary>
    public bool? Wednesday { get; set; }
    /// <summary>
    /// Extension container element for Wednesday
    /// </summary>
    public Element _Wednesday { get; set; }
    /// <summary>
    /// The interval defines if the recurrence is every nth week. The default is every week, so it is expected that this value will be 2 or more.
    /// e.g. For recurring every second week this interval would be 2, or every third week the interval would be 3.
    /// </summary>
    public uint? WeekInterval { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Monday != null)
      {
        writer.WriteBoolean("monday", (bool)Monday!);
      }

      if (_Monday != null)
      {
        writer.WritePropertyName("_monday");
        _Monday.SerializeJson(writer, options);
      }

      if (Tuesday != null)
      {
        writer.WriteBoolean("tuesday", (bool)Tuesday!);
      }

      if (_Tuesday != null)
      {
        writer.WritePropertyName("_tuesday");
        _Tuesday.SerializeJson(writer, options);
      }

      if (Wednesday != null)
      {
        writer.WriteBoolean("wednesday", (bool)Wednesday!);
      }

      if (_Wednesday != null)
      {
        writer.WritePropertyName("_wednesday");
        _Wednesday.SerializeJson(writer, options);
      }

      if (Thursday != null)
      {
        writer.WriteBoolean("thursday", (bool)Thursday!);
      }

      if (_Thursday != null)
      {
        writer.WritePropertyName("_thursday");
        _Thursday.SerializeJson(writer, options);
      }

      if (Friday != null)
      {
        writer.WriteBoolean("friday", (bool)Friday!);
      }

      if (_Friday != null)
      {
        writer.WritePropertyName("_friday");
        _Friday.SerializeJson(writer, options);
      }

      if (Saturday != null)
      {
        writer.WriteBoolean("saturday", (bool)Saturday!);
      }

      if (_Saturday != null)
      {
        writer.WritePropertyName("_saturday");
        _Saturday.SerializeJson(writer, options);
      }

      if (Sunday != null)
      {
        writer.WriteBoolean("sunday", (bool)Sunday!);
      }

      if (_Sunday != null)
      {
        writer.WritePropertyName("_sunday");
        _Sunday.SerializeJson(writer, options);
      }

      if (WeekInterval != null)
      {
        writer.WriteNumber("weekInterval", (uint)WeekInterval!);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "friday":
          Friday = reader.GetBoolean();
          break;

        case "_friday":
          _Friday = new fhirCsR5.Models.Element();
          _Friday.DeserializeJson(ref reader, options);
          break;

        case "monday":
          Monday = reader.GetBoolean();
          break;

        case "_monday":
          _Monday = new fhirCsR5.Models.Element();
          _Monday.DeserializeJson(ref reader, options);
          break;

        case "saturday":
          Saturday = reader.GetBoolean();
          break;

        case "_saturday":
          _Saturday = new fhirCsR5.Models.Element();
          _Saturday.DeserializeJson(ref reader, options);
          break;

        case "sunday":
          Sunday = reader.GetBoolean();
          break;

        case "_sunday":
          _Sunday = new fhirCsR5.Models.Element();
          _Sunday.DeserializeJson(ref reader, options);
          break;

        case "thursday":
          Thursday = reader.GetBoolean();
          break;

        case "_thursday":
          _Thursday = new fhirCsR5.Models.Element();
          _Thursday.DeserializeJson(ref reader, options);
          break;

        case "tuesday":
          Tuesday = reader.GetBoolean();
          break;

        case "_tuesday":
          _Tuesday = new fhirCsR5.Models.Element();
          _Tuesday.DeserializeJson(ref reader, options);
          break;

        case "wednesday":
          Wednesday = reader.GetBoolean();
          break;

        case "_wednesday":
          _Wednesday = new fhirCsR5.Models.Element();
          _Wednesday.DeserializeJson(ref reader, options);
          break;

        case "weekInterval":
          WeekInterval = reader.GetUInt32();
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about monthly recurring appointments.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AppointmentRecurrenceTemplateMonthlyTemplate>))]
  public class AppointmentRecurrenceTemplateMonthlyTemplate : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates that appointments in the series of recurring appointments should occur on a specific day of the month.
    /// </summary>
    public uint? DayOfMonth { get; set; }
    /// <summary>
    /// This property is intended to be used with Appointment.recurrenceTemplate.monthly.nthWeek.
    /// </summary>
    public Coding DayOfWeek { get; set; }
    /// <summary>
    /// Indicates that recurring appointments should occur every nth month.
    /// </summary>
    public uint MonthInterval { get; set; }
    /// <summary>
    /// Indicates which week within a month the appointments in the series of recurring appointments should occur on.
    /// </summary>
    public Coding NthWeekOfMonth { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (DayOfMonth != null)
      {
        writer.WriteNumber("dayOfMonth", (uint)DayOfMonth!);
      }

      if (NthWeekOfMonth != null)
      {
        writer.WritePropertyName("nthWeekOfMonth");
        NthWeekOfMonth.SerializeJson(writer, options);
      }

      if (DayOfWeek != null)
      {
        writer.WritePropertyName("dayOfWeek");
        DayOfWeek.SerializeJson(writer, options);
      }

      writer.WriteNumber("monthInterval", MonthInterval);

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dayOfMonth":
          DayOfMonth = reader.GetUInt32();
          break;

        case "dayOfWeek":
          DayOfWeek = new fhirCsR5.Models.Coding();
          DayOfWeek.DeserializeJson(ref reader, options);
          break;

        case "monthInterval":
          MonthInterval = reader.GetUInt32();
          break;

        case "nthWeekOfMonth":
          NthWeekOfMonth = new fhirCsR5.Models.Coding();
          NthWeekOfMonth.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about yearly recurring appointments.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AppointmentRecurrenceTemplateYearlyTemplate>))]
  public class AppointmentRecurrenceTemplateYearlyTemplate : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Appointment recurs every nth year.
    /// </summary>
    public uint YearInterval { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("yearInterval", YearInterval);

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "yearInterval":
          YearInterval = reader.GetUInt32();
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The details of the recurrence pattern or template that is used to generate recurring appointments.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<AppointmentRecurrenceTemplate>))]
  public class AppointmentRecurrenceTemplate : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// excludingDate is an alternative to excludingRecurrenceId.  You may say either that 12/25/XXXX should be excluded using excludingDate, or you may indicate the recurrenceId of the appointment that would fall on the excluded date in the excludingRecurrenceId property.
    /// </summary>
    public List<string> ExcludingDate { get; set; }
    /// <summary>
    /// Extension container element for ExcludingDate
    /// </summary>
    public List<Element> _ExcludingDate { get; set; }
    /// <summary>
    /// excludingRecurrenceId is an alternative to excludingDate.  You may say either that 12/25/XXXX should be excluded using excludingDate, or you may indicate the recurrenceId of the appointment that would fall on the excluded date in the excludingRecurrenceId property.
    /// </summary>
    public List<uint> ExcludingRecurrenceId { get; set; }
    /// <summary>
    /// Recurring appointments will not occur after this date.
    /// </summary>
    public string LastOccurrenceDate { get; set; }
    /// <summary>
    /// Extension container element for LastOccurrenceDate
    /// </summary>
    public Element _LastOccurrenceDate { get; set; }
    /// <summary>
    /// Information about monthly recurring appointments.
    /// </summary>
    public AppointmentRecurrenceTemplateMonthlyTemplate MonthlyTemplate { get; set; }
    /// <summary>
    /// How many appointments are planned in the recurrence.
    /// </summary>
    public uint? OccurrenceCount { get; set; }
    /// <summary>
    /// The list of specific dates that will have appointments generated.
    /// </summary>
    public List<string> OccurrenceDate { get; set; }
    /// <summary>
    /// Extension container element for OccurrenceDate
    /// </summary>
    public List<Element> _OccurrenceDate { get; set; }
    /// <summary>
    /// How often the appointment series should recur.
    /// </summary>
    public CodeableConcept RecurrenceType { get; set; }
    /// <summary>
    /// The timezone of the recurring appointment occurrences.
    /// </summary>
    public CodeableConcept Timezone { get; set; }
    /// <summary>
    /// Information about weekly recurring appointments.
    /// </summary>
    public AppointmentRecurrenceTemplateWeeklyTemplate WeeklyTemplate { get; set; }
    /// <summary>
    /// Information about yearly recurring appointments.
    /// </summary>
    public AppointmentRecurrenceTemplateYearlyTemplate YearlyTemplate { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Timezone != null)
      {
        writer.WritePropertyName("timezone");
        Timezone.SerializeJson(writer, options);
      }

      if (RecurrenceType != null)
      {
        writer.WritePropertyName("recurrenceType");
        RecurrenceType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastOccurrenceDate))
      {
        writer.WriteString("lastOccurrenceDate", (string)LastOccurrenceDate!);
      }

      if (_LastOccurrenceDate != null)
      {
        writer.WritePropertyName("_lastOccurrenceDate");
        _LastOccurrenceDate.SerializeJson(writer, options);
      }

      if (OccurrenceCount != null)
      {
        writer.WriteNumber("occurrenceCount", (uint)OccurrenceCount!);
      }

      if ((OccurrenceDate != null) && (OccurrenceDate.Count != 0))
      {
        writer.WritePropertyName("occurrenceDate");
        writer.WriteStartArray();

        foreach (string valOccurrenceDate in OccurrenceDate)
        {
          writer.WriteStringValue(valOccurrenceDate);
        }

        writer.WriteEndArray();
      }

      if ((_OccurrenceDate != null) && (_OccurrenceDate.Count != 0))
      {
        writer.WritePropertyName("_occurrenceDate");
        writer.WriteStartArray();

        foreach (Element val_OccurrenceDate in _OccurrenceDate)
        {
          val_OccurrenceDate.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (WeeklyTemplate != null)
      {
        writer.WritePropertyName("weeklyTemplate");
        WeeklyTemplate.SerializeJson(writer, options);
      }

      if (MonthlyTemplate != null)
      {
        writer.WritePropertyName("monthlyTemplate");
        MonthlyTemplate.SerializeJson(writer, options);
      }

      if (YearlyTemplate != null)
      {
        writer.WritePropertyName("yearlyTemplate");
        YearlyTemplate.SerializeJson(writer, options);
      }

      if ((ExcludingDate != null) && (ExcludingDate.Count != 0))
      {
        writer.WritePropertyName("excludingDate");
        writer.WriteStartArray();

        foreach (string valExcludingDate in ExcludingDate)
        {
          writer.WriteStringValue(valExcludingDate);
        }

        writer.WriteEndArray();
      }

      if ((_ExcludingDate != null) && (_ExcludingDate.Count != 0))
      {
        writer.WritePropertyName("_excludingDate");
        writer.WriteStartArray();

        foreach (Element val_ExcludingDate in _ExcludingDate)
        {
          val_ExcludingDate.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ExcludingRecurrenceId != null) && (ExcludingRecurrenceId.Count != 0))
      {
        writer.WritePropertyName("excludingRecurrenceId");
        writer.WriteStartArray();

        foreach (uint valExcludingRecurrenceId in ExcludingRecurrenceId)
        {
          writer.WriteNumberValue(valExcludingRecurrenceId);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "excludingDate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ExcludingDate = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ExcludingDate.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ExcludingDate.Count == 0)
          {
            ExcludingDate = null;
          }

          break;

        case "_excludingDate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _ExcludingDate = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_ExcludingDate = new fhirCsR5.Models.Element();
            obj_ExcludingDate.DeserializeJson(ref reader, options);
            _ExcludingDate.Add(obj_ExcludingDate);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_ExcludingDate.Count == 0)
          {
            _ExcludingDate = null;
          }

          break;

        case "excludingRecurrenceId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ExcludingRecurrenceId = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ExcludingRecurrenceId.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ExcludingRecurrenceId.Count == 0)
          {
            ExcludingRecurrenceId = null;
          }

          break;

        case "lastOccurrenceDate":
          LastOccurrenceDate = reader.GetString();
          break;

        case "_lastOccurrenceDate":
          _LastOccurrenceDate = new fhirCsR5.Models.Element();
          _LastOccurrenceDate.DeserializeJson(ref reader, options);
          break;

        case "monthlyTemplate":
          MonthlyTemplate = new fhirCsR5.Models.AppointmentRecurrenceTemplateMonthlyTemplate();
          MonthlyTemplate.DeserializeJson(ref reader, options);
          break;

        case "occurrenceCount":
          OccurrenceCount = reader.GetUInt32();
          break;

        case "occurrenceDate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          OccurrenceDate = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            OccurrenceDate.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (OccurrenceDate.Count == 0)
          {
            OccurrenceDate = null;
          }

          break;

        case "_occurrenceDate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _OccurrenceDate = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_OccurrenceDate = new fhirCsR5.Models.Element();
            obj_OccurrenceDate.DeserializeJson(ref reader, options);
            _OccurrenceDate.Add(obj_OccurrenceDate);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_OccurrenceDate.Count == 0)
          {
            _OccurrenceDate = null;
          }

          break;

        case "recurrenceType":
          RecurrenceType = new fhirCsR5.Models.CodeableConcept();
          RecurrenceType.DeserializeJson(ref reader, options);
          break;

        case "timezone":
          Timezone = new fhirCsR5.Models.CodeableConcept();
          Timezone.DeserializeJson(ref reader, options);
          break;

        case "weeklyTemplate":
          WeeklyTemplate = new fhirCsR5.Models.AppointmentRecurrenceTemplateWeeklyTemplate();
          WeeklyTemplate.DeserializeJson(ref reader, options);
          break;

        case "yearlyTemplate":
          YearlyTemplate = new fhirCsR5.Models.AppointmentRecurrenceTemplateYearlyTemplate();
          YearlyTemplate.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<Appointment>))]
  public class Appointment : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Appointment";
    /// <summary>
    /// The specified account(s) could be those identified during pre-registration workflows in preparation for an upcoming Encounter.
    /// </summary>
    public List<Reference> Account { get; set; }
    /// <summary>
    /// The style of appointment or patient that has been booked in the slot (not service type).
    /// </summary>
    public CodeableConcept AppointmentType { get; set; }
    /// <summary>
    /// The request this appointment is allocated to assess (e.g. incoming referral or procedure request).
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// The coded reason for the appointment being cancelled. This is often used in reporting/billing/futher processing to determine if further actions are required, or specific fees apply.
    /// </summary>
    public CodeableConcept CancellationReason { get; set; }
    /// <summary>
    /// Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
    /// </summary>
    public List<CodeableConcept> Class { get; set; }
    /// <summary>
    /// This property is required for many use cases where the age of an appointment is considered in processing workflows for scheduling and billing of appointments.
    /// </summary>
    public string Created { get; set; }
    /// <summary>
    /// Extension container element for Created
    /// </summary>
    public Element _Created { get; set; }
    /// <summary>
    /// The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Date/Time that the appointment is to conclude.
    /// </summary>
    public string End { get; set; }
    /// <summary>
    /// Extension container element for End
    /// </summary>
    public Element _End { get; set; }
    /// <summary>
    /// This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Number of minutes that the appointment is to take. This can be less than the duration between the start and end times.  For example, where the actual time of appointment is only an estimate or if a 30 minute appointment is being requested, but any time would work.  Also, if there is, for example, a planned 15 minute break in the middle of a long appointment, the duration may be 15 minutes less than the difference between the start and end.
    /// </summary>
    public uint? MinutesDuration { get; set; }
    /// <summary>
    /// Additional text to aid in facilitating the appointment. For instance, a note might be, "patient should proceed immediately to infusion room upon arrival"
    /// Where this is a planned appointment and the start/end dates are not set then this field can be used to provide additional guidance on the details of the appointment request, including any restrictions on when to book it.
    /// Typically only the concept.text will be used, however occasionally a reference to some generic documentation (or specific) and also supports coded instructions if/when they are required.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// For example, if a patient has physical therapy appointments every Tuesday and Thursday, but due to a national holiday, an single occurrence was rescheduled to a different day, while the rest of the recurring series remained on Tuesday / Thursday.
    /// </summary>
    public bool? OccurrenceChanged { get; set; }
    /// <summary>
    /// Extension container element for OccurrenceChanged
    /// </summary>
    public Element _OccurrenceChanged { get; set; }
    /// <summary>
    /// This property is intended for use when representing a recurring set of related appointments.
    /// For example, a patient undergoing physical therapy may have a recurring appointment every Tuesday and Thursday.  Each occurrence of the set will refer to the originating appointment, which contains the recurring template information.  For representing appointment series, see the guidance on recurring vs. series appointments.
    /// </summary>
    public Reference OriginatingAppointment { get; set; }
    /// <summary>
    /// List of participants involved in the appointment.
    /// </summary>
    public List<AppointmentParticipant> Participant { get; set; }
    /// <summary>
    /// While Appointment.note contains information for internal use, Appointment.patientInstructions is used to capture patient facing information about the Appointment (e.g. please bring your referral or fast from 8pm night before).
    /// </summary>
    public List<CodeableReference> PatientInstruction { get; set; }
    /// <summary>
    /// This property is intended for use when representing a series of related appointments.  For example, in a nuclear medicine procedure, where there is an appointment for the injection of the isotopes, and then a subsequent appointment for the scan, the scan appointment would refer to the injection appointment via Appointment.previousAppointment.  For representing recurring appointments, see the guidance on recurring vs. series appointments.
    /// </summary>
    public Reference PreviousAppointment { get; set; }
    /// <summary>
    /// Seeking implementer feedback on this property and how interoperable it is.
    /// Using an extension to record a CodeableConcept for named values may be tested at a future connectathon.
    /// </summary>
    public CodeableConcept Priority { get; set; }
    /// <summary>
    /// The reason that this appointment is being scheduled. This is more clinical than administrative. This can be coded, or as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
    /// </summary>
    public List<CodeableReference> Reason { get; set; }
    /// <summary>
    /// The sequence number that identifies a specific appointment in a recurring pattern.
    /// </summary>
    public uint? RecurrenceId { get; set; }
    /// <summary>
    /// The details of the recurrence pattern or template that is used to generate recurring appointments.
    /// </summary>
    public List<AppointmentRecurrenceTemplate> RecurrenceTemplate { get; set; }
    /// <summary>
    /// Appointment replaced by this Appointment in cases where there is a cancellation, the details of the cancellation can be found in the cancellationReason property (on the referenced resource).
    /// </summary>
    public List<Reference> Replaces { get; set; }
    /// <summary>
    /// This does not introduce a capacity for recurring appointments.
    /// </summary>
    public List<Period> RequestedPeriod { get; set; }
    /// <summary>
    /// A broad categorization of the service that is to be performed during this appointment.
    /// </summary>
    public List<CodeableConcept> ServiceCategory { get; set; }
    /// <summary>
    /// For a provider to provider appointment the code "FOLLOWUP" may be appropriate, as this is expected to be discussing some patient that was seen in the past.
    /// </summary>
    public List<CodeableReference> ServiceType { get; set; }
    /// <summary>
    /// The slots from the participants' schedules that will be filled by the appointment.
    /// </summary>
    public List<Reference> Slot { get; set; }
    /// <summary>
    /// The specialty of a practitioner that would be required to perform the service requested in this appointment.
    /// </summary>
    public List<CodeableConcept> Specialty { get; set; }
    /// <summary>
    /// Date/Time that the appointment is to take place.
    /// </summary>
    public string Start { get; set; }
    /// <summary>
    /// Extension container element for Start
    /// </summary>
    public Element _Start { get; set; }
    /// <summary>
    /// If the Appointment's status is "cancelled" then all participants are expected to have their calendars released for the appointment period, and as such any Slots that were marked as BUSY can be re-set to FREE.
    /// This element is labeled as a modifier because the status contains the code entered-in-error that mark the Appointment as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The patient or group associated with the appointment, if they are to be present (usually) then they should also be included in the participant backbone element.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Additional information to support the appointment provided when making the appointment.
    /// </summary>
    public List<Reference> SupportingInformation { get; set; }
    /// <summary>
    /// There are two types of virtual meetings that often exist:
    /// * a persistent, virtual meeting room that can only be used for a single purpose at a time, 
    /// * and a dynamic virtual meeting room that is generated on demand for a specific purpose.
    /// Implementers may consider using Location.virtualService for persistent meeting rooms.
    /// If each participant would have a different meeting link, an extension using the VirtualServiceContactDetail  can be applied to the Appointment.participant BackboneElement.
    /// </summary>
    public List<VirtualServiceDetail> VirtualService { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (CancellationReason != null)
      {
        writer.WritePropertyName("cancellationReason");
        CancellationReason.SerializeJson(writer, options);
      }

      if ((Class != null) && (Class.Count != 0))
      {
        writer.WritePropertyName("class");
        writer.WriteStartArray();

        foreach (CodeableConcept valClass in Class)
        {
          valClass.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ServiceCategory != null) && (ServiceCategory.Count != 0))
      {
        writer.WritePropertyName("serviceCategory");
        writer.WriteStartArray();

        foreach (CodeableConcept valServiceCategory in ServiceCategory)
        {
          valServiceCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ServiceType != null) && (ServiceType.Count != 0))
      {
        writer.WritePropertyName("serviceType");
        writer.WriteStartArray();

        foreach (CodeableReference valServiceType in ServiceType)
        {
          valServiceType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Specialty != null) && (Specialty.Count != 0))
      {
        writer.WritePropertyName("specialty");
        writer.WriteStartArray();

        foreach (CodeableConcept valSpecialty in Specialty)
        {
          valSpecialty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (AppointmentType != null)
      {
        writer.WritePropertyName("appointmentType");
        AppointmentType.SerializeJson(writer, options);
      }

      if ((Reason != null) && (Reason.Count != 0))
      {
        writer.WritePropertyName("reason");
        writer.WriteStartArray();

        foreach (CodeableReference valReason in Reason)
        {
          valReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Priority != null)
      {
        writer.WritePropertyName("priority");
        Priority.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Replaces != null) && (Replaces.Count != 0))
      {
        writer.WritePropertyName("replaces");
        writer.WriteStartArray();

        foreach (Reference valReplaces in Replaces)
        {
          valReplaces.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((VirtualService != null) && (VirtualService.Count != 0))
      {
        writer.WritePropertyName("virtualService");
        writer.WriteStartArray();

        foreach (VirtualServiceDetail valVirtualService in VirtualService)
        {
          valVirtualService.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SupportingInformation != null) && (SupportingInformation.Count != 0))
      {
        writer.WritePropertyName("supportingInformation");
        writer.WriteStartArray();

        foreach (Reference valSupportingInformation in SupportingInformation)
        {
          valSupportingInformation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (PreviousAppointment != null)
      {
        writer.WritePropertyName("previousAppointment");
        PreviousAppointment.SerializeJson(writer, options);
      }

      if (OriginatingAppointment != null)
      {
        writer.WritePropertyName("originatingAppointment");
        OriginatingAppointment.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Start))
      {
        writer.WriteString("start", (string)Start!);
      }

      if (_Start != null)
      {
        writer.WritePropertyName("_start");
        _Start.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(End))
      {
        writer.WriteString("end", (string)End!);
      }

      if (_End != null)
      {
        writer.WritePropertyName("_end");
        _End.SerializeJson(writer, options);
      }

      if (MinutesDuration != null)
      {
        writer.WriteNumber("minutesDuration", (uint)MinutesDuration!);
      }

      if ((Slot != null) && (Slot.Count != 0))
      {
        writer.WritePropertyName("slot");
        writer.WriteStartArray();

        foreach (Reference valSlot in Slot)
        {
          valSlot.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Account != null) && (Account.Count != 0))
      {
        writer.WritePropertyName("account");
        writer.WriteStartArray();

        foreach (Reference valAccount in Account)
        {
          valAccount.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Created))
      {
        writer.WriteString("created", (string)Created!);
      }

      if (_Created != null)
      {
        writer.WritePropertyName("_created");
        _Created.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PatientInstruction != null) && (PatientInstruction.Count != 0))
      {
        writer.WritePropertyName("patientInstruction");
        writer.WriteStartArray();

        foreach (CodeableReference valPatientInstruction in PatientInstruction)
        {
          valPatientInstruction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if ((Participant != null) && (Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();

        foreach (AppointmentParticipant valParticipant in Participant)
        {
          valParticipant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RequestedPeriod != null) && (RequestedPeriod.Count != 0))
      {
        writer.WritePropertyName("requestedPeriod");
        writer.WriteStartArray();

        foreach (Period valRequestedPeriod in RequestedPeriod)
        {
          valRequestedPeriod.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (RecurrenceId != null)
      {
        writer.WriteNumber("recurrenceId", (uint)RecurrenceId!);
      }

      if (OccurrenceChanged != null)
      {
        writer.WriteBoolean("occurrenceChanged", (bool)OccurrenceChanged!);
      }

      if (_OccurrenceChanged != null)
      {
        writer.WritePropertyName("_occurrenceChanged");
        _OccurrenceChanged.SerializeJson(writer, options);
      }

      if ((RecurrenceTemplate != null) && (RecurrenceTemplate.Count != 0))
      {
        writer.WritePropertyName("recurrenceTemplate");
        writer.WriteStartArray();

        foreach (AppointmentRecurrenceTemplate valRecurrenceTemplate in RecurrenceTemplate)
        {
          valRecurrenceTemplate.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "account":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Account = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objAccount = new fhirCsR5.Models.Reference();
            objAccount.DeserializeJson(ref reader, options);
            Account.Add(objAccount);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Account.Count == 0)
          {
            Account = null;
          }

          break;

        case "appointmentType":
          AppointmentType = new fhirCsR5.Models.CodeableConcept();
          AppointmentType.DeserializeJson(ref reader, options);
          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objBasedOn = new fhirCsR5.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "cancellationReason":
          CancellationReason = new fhirCsR5.Models.CodeableConcept();
          CancellationReason.DeserializeJson(ref reader, options);
          break;

        case "class":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Class = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objClass = new fhirCsR5.Models.CodeableConcept();
            objClass.DeserializeJson(ref reader, options);
            Class.Add(objClass);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Class.Count == 0)
          {
            Class = null;
          }

          break;

        case "created":
          Created = reader.GetString();
          break;

        case "_created":
          _Created = new fhirCsR5.Models.Element();
          _Created.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "end":
          End = reader.GetString();
          break;

        case "_end":
          _End = new fhirCsR5.Models.Element();
          _End.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "minutesDuration":
          MinutesDuration = reader.GetUInt32();
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Annotation objNote = new fhirCsR5.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "occurrenceChanged":
          OccurrenceChanged = reader.GetBoolean();
          break;

        case "_occurrenceChanged":
          _OccurrenceChanged = new fhirCsR5.Models.Element();
          _OccurrenceChanged.DeserializeJson(ref reader, options);
          break;

        case "originatingAppointment":
          OriginatingAppointment = new fhirCsR5.Models.Reference();
          OriginatingAppointment.DeserializeJson(ref reader, options);
          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Participant = new List<AppointmentParticipant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AppointmentParticipant objParticipant = new fhirCsR5.Models.AppointmentParticipant();
            objParticipant.DeserializeJson(ref reader, options);
            Participant.Add(objParticipant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Participant.Count == 0)
          {
            Participant = null;
          }

          break;

        case "patientInstruction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PatientInstruction = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objPatientInstruction = new fhirCsR5.Models.CodeableReference();
            objPatientInstruction.DeserializeJson(ref reader, options);
            PatientInstruction.Add(objPatientInstruction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PatientInstruction.Count == 0)
          {
            PatientInstruction = null;
          }

          break;

        case "previousAppointment":
          PreviousAppointment = new fhirCsR5.Models.Reference();
          PreviousAppointment.DeserializeJson(ref reader, options);
          break;

        case "priority":
          Priority = new fhirCsR5.Models.CodeableConcept();
          Priority.DeserializeJson(ref reader, options);
          break;

        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reason = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objReason = new fhirCsR5.Models.CodeableReference();
            objReason.DeserializeJson(ref reader, options);
            Reason.Add(objReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reason.Count == 0)
          {
            Reason = null;
          }

          break;

        case "recurrenceId":
          RecurrenceId = reader.GetUInt32();
          break;

        case "recurrenceTemplate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RecurrenceTemplate = new List<AppointmentRecurrenceTemplate>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.AppointmentRecurrenceTemplate objRecurrenceTemplate = new fhirCsR5.Models.AppointmentRecurrenceTemplate();
            objRecurrenceTemplate.DeserializeJson(ref reader, options);
            RecurrenceTemplate.Add(objRecurrenceTemplate);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RecurrenceTemplate.Count == 0)
          {
            RecurrenceTemplate = null;
          }

          break;

        case "replaces":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Replaces = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objReplaces = new fhirCsR5.Models.Reference();
            objReplaces.DeserializeJson(ref reader, options);
            Replaces.Add(objReplaces);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Replaces.Count == 0)
          {
            Replaces = null;
          }

          break;

        case "requestedPeriod":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RequestedPeriod = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Period objRequestedPeriod = new fhirCsR5.Models.Period();
            objRequestedPeriod.DeserializeJson(ref reader, options);
            RequestedPeriod.Add(objRequestedPeriod);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RequestedPeriod.Count == 0)
          {
            RequestedPeriod = null;
          }

          break;

        case "serviceCategory":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ServiceCategory = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objServiceCategory = new fhirCsR5.Models.CodeableConcept();
            objServiceCategory.DeserializeJson(ref reader, options);
            ServiceCategory.Add(objServiceCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ServiceCategory.Count == 0)
          {
            ServiceCategory = null;
          }

          break;

        case "serviceType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ServiceType = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objServiceType = new fhirCsR5.Models.CodeableReference();
            objServiceType.DeserializeJson(ref reader, options);
            ServiceType.Add(objServiceType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ServiceType.Count == 0)
          {
            ServiceType = null;
          }

          break;

        case "slot":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Slot = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objSlot = new fhirCsR5.Models.Reference();
            objSlot.DeserializeJson(ref reader, options);
            Slot.Add(objSlot);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Slot.Count == 0)
          {
            Slot = null;
          }

          break;

        case "specialty":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Specialty = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objSpecialty = new fhirCsR5.Models.CodeableConcept();
            objSpecialty.DeserializeJson(ref reader, options);
            Specialty.Add(objSpecialty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Specialty.Count == 0)
          {
            Specialty = null;
          }

          break;

        case "start":
          Start = reader.GetString();
          break;

        case "_start":
          _Start = new fhirCsR5.Models.Element();
          _Start.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR5.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "supportingInformation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportingInformation = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objSupportingInformation = new fhirCsR5.Models.Reference();
            objSupportingInformation.DeserializeJson(ref reader, options);
            SupportingInformation.Add(objSupportingInformation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportingInformation.Count == 0)
          {
            SupportingInformation = null;
          }

          break;

        case "virtualService":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          VirtualService = new List<VirtualServiceDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.VirtualServiceDetail objVirtualService = new fhirCsR5.Models.VirtualServiceDetail();
            objVirtualService.DeserializeJson(ref reader, options);
            VirtualService.Add(objVirtualService);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (VirtualService.Count == 0)
          {
            VirtualService = null;
          }

          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Appointment.status field
  /// </summary>
  public static class AppointmentStatusCodes {
    public const string PROPOSED = "proposed";
    public const string PENDING = "pending";
    public const string BOOKED = "booked";
    public const string ARRIVED = "arrived";
    public const string FULFILLED = "fulfilled";
    public const string CANCELLED = "cancelled";
    public const string NOSHOW = "noshow";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string CHECKED_IN = "checked-in";
    public const string WAITLIST = "waitlist";
    public static HashSet<string> Values = new HashSet<string>() {
      "proposed",
      "pending",
      "booked",
      "arrived",
      "fulfilled",
      "cancelled",
      "noshow",
      "entered-in-error",
      "checked-in",
      "waitlist",
    };
  }
}
