// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Schedule information for an oral diet.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<NutritionOrderOralDietSchedule>))]
  public class NutritionOrderOralDietSchedule : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates whether the product is only taken when needed within a specific dosing schedule.
    /// </summary>
    public bool? AsNeeded { get; set; }
    /// <summary>
    /// Extension container element for AsNeeded
    /// </summary>
    public Element _AsNeeded { get; set; }
    /// <summary>
    /// Indicates whether the product is only taken based on a precondition for taking the product.
    /// </summary>
    public CodeableConcept AsNeededFor { get; set; }
    /// <summary>
    /// The time period and frequency at which the diet should be given.  The diet should be given for the combination of all schedules if more than one schedule is present.
    /// </summary>
    public List<Timing> Timing { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Timing != null) && (Timing.Count != 0))
      {
        writer.WritePropertyName("timing");
        writer.WriteStartArray();

        foreach (Timing valTiming in Timing)
        {
          valTiming.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (AsNeeded != null)
      {
        writer.WriteBoolean("asNeeded", (bool)AsNeeded!);
      }

      if (_AsNeeded != null)
      {
        writer.WritePropertyName("_asNeeded");
        _AsNeeded.SerializeJson(writer, options);
      }

      if (AsNeededFor != null)
      {
        writer.WritePropertyName("asNeededFor");
        AsNeededFor.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "asNeeded":
          AsNeeded = reader.GetBoolean();
          break;

        case "_asNeeded":
          _AsNeeded = new fhirCsR5.Models.Element();
          _AsNeeded.DeserializeJson(ref reader, options);
          break;

        case "asNeededFor":
          AsNeededFor = new fhirCsR5.Models.CodeableConcept();
          AsNeededFor.DeserializeJson(ref reader, options);
          break;

        case "timing":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Timing = new List<Timing>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Timing objTiming = new fhirCsR5.Models.Timing();
            objTiming.DeserializeJson(ref reader, options);
            Timing.Add(objTiming);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Timing.Count == 0)
          {
            Timing = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<NutritionOrderOralDietNutrient>))]
  public class NutritionOrderOralDietNutrient : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The quantity of the specified nutrient to include in diet.
    /// </summary>
    public Quantity Amount { get; set; }
    /// <summary>
    /// The nutrient that is being modified such as carbohydrate or sodium.
    /// </summary>
    public CodeableConcept Modifier { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Modifier != null)
      {
        writer.WritePropertyName("modifier");
        Modifier.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new fhirCsR5.Models.Quantity();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          Modifier = new fhirCsR5.Models.CodeableConcept();
          Modifier.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<NutritionOrderOralDietTexture>))]
  public class NutritionOrderOralDietTexture : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Coupled with the `texture.modifier`; could be (All Foods).
    /// </summary>
    public CodeableConcept FoodType { get; set; }
    /// <summary>
    /// Coupled with the foodType (Meat).
    /// </summary>
    public CodeableConcept Modifier { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Modifier != null)
      {
        writer.WritePropertyName("modifier");
        Modifier.SerializeJson(writer, options);
      }

      if (FoodType != null)
      {
        writer.WritePropertyName("foodType");
        FoodType.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "foodType":
          FoodType = new fhirCsR5.Models.CodeableConcept();
          FoodType.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          Modifier = new fhirCsR5.Models.CodeableConcept();
          Modifier.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Diet given orally in contrast to enteral (tube) feeding.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<NutritionOrderOralDiet>))]
  public class NutritionOrderOralDiet : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.
    /// </summary>
    public List<CodeableConcept> FluidConsistencyType { get; set; }
    /// <summary>
    /// Free text dosage instructions can be used for cases where the instructions are too complex to code.
    /// </summary>
    public string Instruction { get; set; }
    /// <summary>
    /// Extension container element for Instruction
    /// </summary>
    public Element _Instruction { get; set; }
    /// <summary>
    /// Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
    /// </summary>
    public List<NutritionOrderOralDietNutrient> Nutrient { get; set; }
    /// <summary>
    /// Schedule information for an oral diet.
    /// </summary>
    public NutritionOrderOralDietSchedule Schedule { get; set; }
    /// <summary>
    /// Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
    /// </summary>
    public List<NutritionOrderOralDietTexture> Texture { get; set; }
    /// <summary>
    /// The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Schedule != null)
      {
        writer.WritePropertyName("schedule");
        Schedule.SerializeJson(writer, options);
      }

      if ((Nutrient != null) && (Nutrient.Count != 0))
      {
        writer.WritePropertyName("nutrient");
        writer.WriteStartArray();

        foreach (NutritionOrderOralDietNutrient valNutrient in Nutrient)
        {
          valNutrient.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Texture != null) && (Texture.Count != 0))
      {
        writer.WritePropertyName("texture");
        writer.WriteStartArray();

        foreach (NutritionOrderOralDietTexture valTexture in Texture)
        {
          valTexture.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((FluidConsistencyType != null) && (FluidConsistencyType.Count != 0))
      {
        writer.WritePropertyName("fluidConsistencyType");
        writer.WriteStartArray();

        foreach (CodeableConcept valFluidConsistencyType in FluidConsistencyType)
        {
          valFluidConsistencyType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Instruction))
      {
        writer.WriteString("instruction", (string)Instruction!);
      }

      if (_Instruction != null)
      {
        writer.WritePropertyName("_instruction");
        _Instruction.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "fluidConsistencyType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          FluidConsistencyType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objFluidConsistencyType = new fhirCsR5.Models.CodeableConcept();
            objFluidConsistencyType.DeserializeJson(ref reader, options);
            FluidConsistencyType.Add(objFluidConsistencyType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (FluidConsistencyType.Count == 0)
          {
            FluidConsistencyType = null;
          }

          break;

        case "instruction":
          Instruction = reader.GetString();
          break;

        case "_instruction":
          _Instruction = new fhirCsR5.Models.Element();
          _Instruction.DeserializeJson(ref reader, options);
          break;

        case "nutrient":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Nutrient = new List<NutritionOrderOralDietNutrient>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.NutritionOrderOralDietNutrient objNutrient = new fhirCsR5.Models.NutritionOrderOralDietNutrient();
            objNutrient.DeserializeJson(ref reader, options);
            Nutrient.Add(objNutrient);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Nutrient.Count == 0)
          {
            Nutrient = null;
          }

          break;

        case "schedule":
          Schedule = new fhirCsR5.Models.NutritionOrderOralDietSchedule();
          Schedule.DeserializeJson(ref reader, options);
          break;

        case "texture":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Texture = new List<NutritionOrderOralDietTexture>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.NutritionOrderOralDietTexture objTexture = new fhirCsR5.Models.NutritionOrderOralDietTexture();
            objTexture.DeserializeJson(ref reader, options);
            Texture.Add(objTexture);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Texture.Count == 0)
          {
            Texture = null;
          }

          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objType = new fhirCsR5.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Schedule information for a supplement.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<NutritionOrderSupplementSchedule>))]
  public class NutritionOrderSupplementSchedule : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates whether the supplement is only taken when needed within a specific dosing schedule.
    /// </summary>
    public bool? AsNeeded { get; set; }
    /// <summary>
    /// Extension container element for AsNeeded
    /// </summary>
    public Element _AsNeeded { get; set; }
    /// <summary>
    /// Indicates whether the supplement is only taken based on a precondition for taking the supplement.
    /// </summary>
    public CodeableConcept AsNeededFor { get; set; }
    /// <summary>
    /// The time period and frequency at which the supplement should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present.
    /// </summary>
    public List<Timing> Timing { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Timing != null) && (Timing.Count != 0))
      {
        writer.WritePropertyName("timing");
        writer.WriteStartArray();

        foreach (Timing valTiming in Timing)
        {
          valTiming.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (AsNeeded != null)
      {
        writer.WriteBoolean("asNeeded", (bool)AsNeeded!);
      }

      if (_AsNeeded != null)
      {
        writer.WritePropertyName("_asNeeded");
        _AsNeeded.SerializeJson(writer, options);
      }

      if (AsNeededFor != null)
      {
        writer.WritePropertyName("asNeededFor");
        AsNeededFor.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "asNeeded":
          AsNeeded = reader.GetBoolean();
          break;

        case "_asNeeded":
          _AsNeeded = new fhirCsR5.Models.Element();
          _AsNeeded.DeserializeJson(ref reader, options);
          break;

        case "asNeededFor":
          AsNeededFor = new fhirCsR5.Models.CodeableConcept();
          AsNeededFor.DeserializeJson(ref reader, options);
          break;

        case "timing":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Timing = new List<Timing>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Timing objTiming = new fhirCsR5.Models.Timing();
            objTiming.DeserializeJson(ref reader, options);
            Timing.Add(objTiming);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Timing.Count == 0)
          {
            Timing = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Oral nutritional products given in order to add further nutritional value to the patient's diet.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<NutritionOrderSupplement>))]
  public class NutritionOrderSupplement : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Free text dosage instructions can be used for cases where the instructions are too complex to code.
    /// </summary>
    public string Instruction { get; set; }
    /// <summary>
    /// Extension container element for Instruction
    /// </summary>
    public Element _Instruction { get; set; }
    /// <summary>
    /// The product or brand name of the nutritional supplement such as "Acme Protein Shake".
    /// </summary>
    public string ProductName { get; set; }
    /// <summary>
    /// Extension container element for ProductName
    /// </summary>
    public Element _ProductName { get; set; }
    /// <summary>
    /// The amount of the nutritional supplement to be given.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Schedule information for a supplement.
    /// </summary>
    public NutritionOrderSupplementSchedule Schedule { get; set; }
    /// <summary>
    /// The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
    /// </summary>
    public CodeableReference Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ProductName))
      {
        writer.WriteString("productName", (string)ProductName!);
      }

      if (_ProductName != null)
      {
        writer.WritePropertyName("_productName");
        _ProductName.SerializeJson(writer, options);
      }

      if (Schedule != null)
      {
        writer.WritePropertyName("schedule");
        Schedule.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Instruction))
      {
        writer.WriteString("instruction", (string)Instruction!);
      }

      if (_Instruction != null)
      {
        writer.WritePropertyName("_instruction");
        _Instruction.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "instruction":
          Instruction = reader.GetString();
          break;

        case "_instruction":
          _Instruction = new fhirCsR5.Models.Element();
          _Instruction.DeserializeJson(ref reader, options);
          break;

        case "productName":
          ProductName = reader.GetString();
          break;

        case "_productName":
          _ProductName = new fhirCsR5.Models.Element();
          _ProductName.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR5.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "schedule":
          Schedule = new fhirCsR5.Models.NutritionOrderSupplementSchedule();
          Schedule.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableReference();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indicates modular components to be provided in addition or mixed with the base formula.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<NutritionOrderEnteralFormulaAdditive>))]
  public class NutritionOrderEnteralFormulaAdditive : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The product or brand name of the type of modular component to be added to the formula.
    /// </summary>
    public string ProductName { get; set; }
    /// <summary>
    /// Extension container element for ProductName
    /// </summary>
    public Element _ProductName { get; set; }
    /// <summary>
    /// The amount of additive to be given in addition or to be mixed in with the base formula.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
    /// </summary>
    public CodeableReference Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ProductName))
      {
        writer.WriteString("productName", (string)ProductName!);
      }

      if (_ProductName != null)
      {
        writer.WritePropertyName("_productName");
        _ProductName.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "productName":
          ProductName = reader.GetString();
          break;

        case "_productName":
          _ProductName = new fhirCsR5.Models.Element();
          _ProductName.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR5.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableReference();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Schedule information for an enteral formula.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<NutritionOrderEnteralFormulaAdministrationSchedule>))]
  public class NutritionOrderEnteralFormulaAdministrationSchedule : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates whether the enteral formula is only taken when needed within a specific dosing schedule.
    /// </summary>
    public bool? AsNeeded { get; set; }
    /// <summary>
    /// Extension container element for AsNeeded
    /// </summary>
    public Element _AsNeeded { get; set; }
    /// <summary>
    /// Indicates whether the enteral formula is only taken based on a precondition for taking the enteral formula.
    /// </summary>
    public CodeableConcept AsNeededFor { get; set; }
    /// <summary>
    /// The time period and frequency at which the enteral formula should be given.  The enteral formula should be given for the combination of all schedules if more than one schedule is present.
    /// </summary>
    public List<Timing> Timing { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Timing != null) && (Timing.Count != 0))
      {
        writer.WritePropertyName("timing");
        writer.WriteStartArray();

        foreach (Timing valTiming in Timing)
        {
          valTiming.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (AsNeeded != null)
      {
        writer.WriteBoolean("asNeeded", (bool)AsNeeded!);
      }

      if (_AsNeeded != null)
      {
        writer.WritePropertyName("_asNeeded");
        _AsNeeded.SerializeJson(writer, options);
      }

      if (AsNeededFor != null)
      {
        writer.WritePropertyName("asNeededFor");
        AsNeededFor.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "asNeeded":
          AsNeeded = reader.GetBoolean();
          break;

        case "_asNeeded":
          _AsNeeded = new fhirCsR5.Models.Element();
          _AsNeeded.DeserializeJson(ref reader, options);
          break;

        case "asNeededFor":
          AsNeededFor = new fhirCsR5.Models.CodeableConcept();
          AsNeededFor.DeserializeJson(ref reader, options);
          break;

        case "timing":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Timing = new List<Timing>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Timing objTiming = new fhirCsR5.Models.Timing();
            objTiming.DeserializeJson(ref reader, options);
            Timing.Add(objTiming);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Timing.Count == 0)
          {
            Timing = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<NutritionOrderEnteralFormulaAdministration>))]
  public class NutritionOrderEnteralFormulaAdministration : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The volume of formula to provide to the patient per the specified administration schedule.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Ratio is used when the quantity value in the denominator is not "1", otherwise use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus the Quantity datatype for "50 mL/hr".
    /// </summary>
    public Quantity RateQuantity { get; set; }
    /// <summary>
    /// Ratio is used when the quantity value in the denominator is not "1", otherwise use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus the Quantity datatype for "50 mL/hr".
    /// </summary>
    public Ratio RateRatio { get; set; }
    /// <summary>
    /// Schedule information for an enteral formula.
    /// </summary>
    public NutritionOrderEnteralFormulaAdministrationSchedule Schedule { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Schedule != null)
      {
        writer.WritePropertyName("schedule");
        Schedule.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (RateQuantity != null)
      {
        writer.WritePropertyName("rateQuantity");
        RateQuantity.SerializeJson(writer, options);
      }

      if (RateRatio != null)
      {
        writer.WritePropertyName("rateRatio");
        RateRatio.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "quantity":
          Quantity = new fhirCsR5.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "rateQuantity":
          RateQuantity = new fhirCsR5.Models.Quantity();
          RateQuantity.DeserializeJson(ref reader, options);
          break;

        case "rateRatio":
          RateRatio = new fhirCsR5.Models.Ratio();
          RateRatio.DeserializeJson(ref reader, options);
          break;

        case "schedule":
          Schedule = new fhirCsR5.Models.NutritionOrderEnteralFormulaAdministrationSchedule();
          Schedule.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<NutritionOrderEnteralFormula>))]
  public class NutritionOrderEnteralFormula : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates modular components to be provided in addition or mixed with the base formula.
    /// </summary>
    public List<NutritionOrderEnteralFormulaAdditive> Additive { get; set; }
    /// <summary>
    /// See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
    /// </summary>
    public List<NutritionOrderEnteralFormulaAdministration> Administration { get; set; }
    /// <summary>
    /// Free text dosage instructions can be used for cases where the instructions are too complex to code.
    /// </summary>
    public string AdministrationInstruction { get; set; }
    /// <summary>
    /// Extension container element for AdministrationInstruction
    /// </summary>
    public Element _AdministrationInstruction { get; set; }
    /// <summary>
    /// The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula".
    /// </summary>
    public string BaseFormulaProductName { get; set; }
    /// <summary>
    /// Extension container element for BaseFormulaProductName
    /// </summary>
    public Element _BaseFormulaProductName { get; set; }
    /// <summary>
    /// The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.
    /// </summary>
    public CodeableReference BaseFormulaType { get; set; }
    /// <summary>
    /// The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL.
    /// </summary>
    public Quantity CaloricDensity { get; set; }
    /// <summary>
    /// The intended type of device that is to be used for the administration of the enteral formula.
    /// </summary>
    public List<CodeableReference> DeliveryDevice { get; set; }
    /// <summary>
    /// The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
    /// </summary>
    public Quantity MaxVolumeToDeliver { get; set; }
    /// <summary>
    /// The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
    /// </summary>
    public CodeableConcept RouteOfAdministration { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (BaseFormulaType != null)
      {
        writer.WritePropertyName("baseFormulaType");
        BaseFormulaType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(BaseFormulaProductName))
      {
        writer.WriteString("baseFormulaProductName", (string)BaseFormulaProductName!);
      }

      if (_BaseFormulaProductName != null)
      {
        writer.WritePropertyName("_baseFormulaProductName");
        _BaseFormulaProductName.SerializeJson(writer, options);
      }

      if ((DeliveryDevice != null) && (DeliveryDevice.Count != 0))
      {
        writer.WritePropertyName("deliveryDevice");
        writer.WriteStartArray();

        foreach (CodeableReference valDeliveryDevice in DeliveryDevice)
        {
          valDeliveryDevice.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Additive != null) && (Additive.Count != 0))
      {
        writer.WritePropertyName("additive");
        writer.WriteStartArray();

        foreach (NutritionOrderEnteralFormulaAdditive valAdditive in Additive)
        {
          valAdditive.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (CaloricDensity != null)
      {
        writer.WritePropertyName("caloricDensity");
        CaloricDensity.SerializeJson(writer, options);
      }

      if (RouteOfAdministration != null)
      {
        writer.WritePropertyName("routeOfAdministration");
        RouteOfAdministration.SerializeJson(writer, options);
      }

      if ((Administration != null) && (Administration.Count != 0))
      {
        writer.WritePropertyName("administration");
        writer.WriteStartArray();

        foreach (NutritionOrderEnteralFormulaAdministration valAdministration in Administration)
        {
          valAdministration.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (MaxVolumeToDeliver != null)
      {
        writer.WritePropertyName("maxVolumeToDeliver");
        MaxVolumeToDeliver.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AdministrationInstruction))
      {
        writer.WriteString("administrationInstruction", (string)AdministrationInstruction!);
      }

      if (_AdministrationInstruction != null)
      {
        writer.WritePropertyName("_administrationInstruction");
        _AdministrationInstruction.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "additive":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Additive = new List<NutritionOrderEnteralFormulaAdditive>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.NutritionOrderEnteralFormulaAdditive objAdditive = new fhirCsR5.Models.NutritionOrderEnteralFormulaAdditive();
            objAdditive.DeserializeJson(ref reader, options);
            Additive.Add(objAdditive);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Additive.Count == 0)
          {
            Additive = null;
          }

          break;

        case "administration":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Administration = new List<NutritionOrderEnteralFormulaAdministration>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.NutritionOrderEnteralFormulaAdministration objAdministration = new fhirCsR5.Models.NutritionOrderEnteralFormulaAdministration();
            objAdministration.DeserializeJson(ref reader, options);
            Administration.Add(objAdministration);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Administration.Count == 0)
          {
            Administration = null;
          }

          break;

        case "administrationInstruction":
          AdministrationInstruction = reader.GetString();
          break;

        case "_administrationInstruction":
          _AdministrationInstruction = new fhirCsR5.Models.Element();
          _AdministrationInstruction.DeserializeJson(ref reader, options);
          break;

        case "baseFormulaProductName":
          BaseFormulaProductName = reader.GetString();
          break;

        case "_baseFormulaProductName":
          _BaseFormulaProductName = new fhirCsR5.Models.Element();
          _BaseFormulaProductName.DeserializeJson(ref reader, options);
          break;

        case "baseFormulaType":
          BaseFormulaType = new fhirCsR5.Models.CodeableReference();
          BaseFormulaType.DeserializeJson(ref reader, options);
          break;

        case "caloricDensity":
          CaloricDensity = new fhirCsR5.Models.Quantity();
          CaloricDensity.DeserializeJson(ref reader, options);
          break;

        case "deliveryDevice":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DeliveryDevice = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objDeliveryDevice = new fhirCsR5.Models.CodeableReference();
            objDeliveryDevice.DeserializeJson(ref reader, options);
            DeliveryDevice.Add(objDeliveryDevice);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DeliveryDevice.Count == 0)
          {
            DeliveryDevice = null;
          }

          break;

        case "maxVolumeToDeliver":
          MaxVolumeToDeliver = new fhirCsR5.Models.Quantity();
          MaxVolumeToDeliver.DeserializeJson(ref reader, options);
          break;

        case "routeOfAdministration":
          RouteOfAdministration = new fhirCsR5.Models.CodeableConcept();
          RouteOfAdministration.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<NutritionOrder>))]
  public class NutritionOrder : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "NutritionOrder";
    /// <summary>
    /// Information on a patient's food allergies and intolerances to inform healthcare personnel about the type of foods that the patient shouldn't receive or consume.
    /// </summary>
    public List<Reference> AllergyIntolerance { get; set; }
    /// <summary>
    /// A plan or request that is fulfilled in whole or in part by this nutrition order.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// The date and time that this nutrition order was requested.
    /// </summary>
    public string DateTime { get; set; }
    /// <summary>
    /// Extension container element for DateTime
    /// </summary>
    public Element _DateTime { get; set; }
    /// <summary>
    /// An encounter that provides additional information about the healthcare context in which this request is made.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
    /// </summary>
    public NutritionOrderEnteralFormula EnteralFormula { get; set; }
    /// <summary>
    /// Information on a patient's food allergies, intolerances and preferences to inform healthcare personnel about the type  of foods that the patient shouldn't receive or consume.
    /// </summary>
    public List<CodeableConcept> ExcludeFoodModifier { get; set; }
    /// <summary>
    /// Information on a patient's food preferences that inform healthcare personnel about the food that the patient should receive or consume.
    /// </summary>
    public List<CodeableConcept> FoodPreferenceModifier { get; set; }
    /// <summary>
    /// The Identifier.type element can be to indicate filler vs. placer if needed.  This is explained in further detail [here](servicerequest.html#notes).
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The URL pointing to a protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
    /// </summary>
    public List<string> Instantiates { get; set; }
    /// <summary>
    /// Extension container element for Instantiates
    /// </summary>
    public List<Element> _Instantiates { get; set; }
    /// <summary>
    /// Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
    /// </summary>
    public List<string> InstantiatesCanonical { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesCanonical
    /// </summary>
    public List<Element> _InstantiatesCanonical { get; set; }
    /// <summary>
    /// This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
    /// </summary>
    public List<string> InstantiatesUri { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesUri
    /// </summary>
    public List<Element> _InstantiatesUri { get; set; }
    /// <summary>
    /// When resources map to this element, they are free to define as many codes as necessary to cover their space and will map to "proposal, plan or order".  Can have multiple codes that map to one of these.  E.g. "original order", "encoded order", "reflex order" would all map to "order".  Expectation is that the set of codes is mutually exclusive or a strict all-encompassing hierarchy.
    /// </summary>
    public string Intent { get; set; }
    /// <summary>
    /// Extension container element for Intent
    /// </summary>
    public Element _Intent { get; set; }
    /// <summary>
    /// This element SHALL NOT be used to supply free text instructions for the diet which are represented in the `.oralDiet.instruction`, `supplement.instruction`, or `enteralFormula.administrationInstruction` elements.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Diet given orally in contrast to enteral (tube) feeding.
    /// </summary>
    public NutritionOrderOralDiet OralDiet { get; set; }
    /// <summary>
    /// The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
    /// </summary>
    public Reference Orderer { get; set; }
    /// <summary>
    /// This modifier is used to convey whether a food item is allowed to be brought in by the patient and/or family.  If set to true, indicates that the receiving system does not need to supply the food item.
    /// </summary>
    public bool? OutsideFoodAllowed { get; set; }
    /// <summary>
    /// Extension container element for OutsideFoodAllowed
    /// </summary>
    public Element _OutsideFoodAllowed { get; set; }
    /// <summary>
    /// The specified desired performer of the nutrition order.
    /// </summary>
    public List<CodeableReference> Performer { get; set; }
    /// <summary>
    /// Indicates how quickly the Nutrition Order should be addressed with respect to other        requests.
    /// </summary>
    public string Priority { get; set; }
    /// <summary>
    /// Extension container element for Priority
    /// </summary>
    public Element _Priority { get; set; }
    /// <summary>
    /// Typically the system placing the order sets the status to "requested". Thereafter, the order is maintained by the receiver that updates the status as the request is handled.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The person or set of individuals who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Oral nutritional products given in order to add further nutritional value to the patient's diet.
    /// </summary>
    public List<NutritionOrderSupplement> Supplement { get; set; }
    /// <summary>
    /// Information to support fulfilling (i.e. dispensing or administering) of the nutrition,        for example, patient height and weight).
    /// </summary>
    public List<Reference> SupportingInformation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((InstantiatesCanonical != null) && (InstantiatesCanonical.Count != 0))
      {
        writer.WritePropertyName("instantiatesCanonical");
        writer.WriteStartArray();

        foreach (string valInstantiatesCanonical in InstantiatesCanonical)
        {
          writer.WriteStringValue(valInstantiatesCanonical);
        }

        writer.WriteEndArray();
      }

      if ((_InstantiatesCanonical != null) && (_InstantiatesCanonical.Count != 0))
      {
        writer.WritePropertyName("_instantiatesCanonical");
        writer.WriteStartArray();

        foreach (Element val_InstantiatesCanonical in _InstantiatesCanonical)
        {
          val_InstantiatesCanonical.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((InstantiatesUri != null) && (InstantiatesUri.Count != 0))
      {
        writer.WritePropertyName("instantiatesUri");
        writer.WriteStartArray();

        foreach (string valInstantiatesUri in InstantiatesUri)
        {
          writer.WriteStringValue(valInstantiatesUri);
        }

        writer.WriteEndArray();
      }

      if ((_InstantiatesUri != null) && (_InstantiatesUri.Count != 0))
      {
        writer.WritePropertyName("_instantiatesUri");
        writer.WriteStartArray();

        foreach (Element val_InstantiatesUri in _InstantiatesUri)
        {
          val_InstantiatesUri.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Instantiates != null) && (Instantiates.Count != 0))
      {
        writer.WritePropertyName("instantiates");
        writer.WriteStartArray();

        foreach (string valInstantiates in Instantiates)
        {
          writer.WriteStringValue(valInstantiates);
        }

        writer.WriteEndArray();
      }

      if ((_Instantiates != null) && (_Instantiates.Count != 0))
      {
        writer.WritePropertyName("_instantiates");
        writer.WriteStartArray();

        foreach (Element val_Instantiates in _Instantiates)
        {
          val_Instantiates.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Intent))
      {
        writer.WriteString("intent", (string)Intent!);
      }

      if (_Intent != null)
      {
        writer.WritePropertyName("_intent");
        _Intent.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Priority))
      {
        writer.WriteString("priority", (string)Priority!);
      }

      if (_Priority != null)
      {
        writer.WritePropertyName("_priority");
        _Priority.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if ((SupportingInformation != null) && (SupportingInformation.Count != 0))
      {
        writer.WritePropertyName("supportingInformation");
        writer.WriteStartArray();

        foreach (Reference valSupportingInformation in SupportingInformation)
        {
          valSupportingInformation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(DateTime))
      {
        writer.WriteString("dateTime", (string)DateTime!);
      }

      if (_DateTime != null)
      {
        writer.WritePropertyName("_dateTime");
        _DateTime.SerializeJson(writer, options);
      }

      if (Orderer != null)
      {
        writer.WritePropertyName("orderer");
        Orderer.SerializeJson(writer, options);
      }

      if ((Performer != null) && (Performer.Count != 0))
      {
        writer.WritePropertyName("performer");
        writer.WriteStartArray();

        foreach (CodeableReference valPerformer in Performer)
        {
          valPerformer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AllergyIntolerance != null) && (AllergyIntolerance.Count != 0))
      {
        writer.WritePropertyName("allergyIntolerance");
        writer.WriteStartArray();

        foreach (Reference valAllergyIntolerance in AllergyIntolerance)
        {
          valAllergyIntolerance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((FoodPreferenceModifier != null) && (FoodPreferenceModifier.Count != 0))
      {
        writer.WritePropertyName("foodPreferenceModifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valFoodPreferenceModifier in FoodPreferenceModifier)
        {
          valFoodPreferenceModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ExcludeFoodModifier != null) && (ExcludeFoodModifier.Count != 0))
      {
        writer.WritePropertyName("excludeFoodModifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valExcludeFoodModifier in ExcludeFoodModifier)
        {
          valExcludeFoodModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (OutsideFoodAllowed != null)
      {
        writer.WriteBoolean("outsideFoodAllowed", (bool)OutsideFoodAllowed!);
      }

      if (_OutsideFoodAllowed != null)
      {
        writer.WritePropertyName("_outsideFoodAllowed");
        _OutsideFoodAllowed.SerializeJson(writer, options);
      }

      if (OralDiet != null)
      {
        writer.WritePropertyName("oralDiet");
        OralDiet.SerializeJson(writer, options);
      }

      if ((Supplement != null) && (Supplement.Count != 0))
      {
        writer.WritePropertyName("supplement");
        writer.WriteStartArray();

        foreach (NutritionOrderSupplement valSupplement in Supplement)
        {
          valSupplement.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (EnteralFormula != null)
      {
        writer.WritePropertyName("enteralFormula");
        EnteralFormula.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allergyIntolerance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AllergyIntolerance = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objAllergyIntolerance = new fhirCsR5.Models.Reference();
            objAllergyIntolerance.DeserializeJson(ref reader, options);
            AllergyIntolerance.Add(objAllergyIntolerance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AllergyIntolerance.Count == 0)
          {
            AllergyIntolerance = null;
          }

          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objBasedOn = new fhirCsR5.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "dateTime":
          DateTime = reader.GetString();
          break;

        case "_dateTime":
          _DateTime = new fhirCsR5.Models.Element();
          _DateTime.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new fhirCsR5.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "enteralFormula":
          EnteralFormula = new fhirCsR5.Models.NutritionOrderEnteralFormula();
          EnteralFormula.DeserializeJson(ref reader, options);
          break;

        case "excludeFoodModifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ExcludeFoodModifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objExcludeFoodModifier = new fhirCsR5.Models.CodeableConcept();
            objExcludeFoodModifier.DeserializeJson(ref reader, options);
            ExcludeFoodModifier.Add(objExcludeFoodModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ExcludeFoodModifier.Count == 0)
          {
            ExcludeFoodModifier = null;
          }

          break;

        case "foodPreferenceModifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          FoodPreferenceModifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objFoodPreferenceModifier = new fhirCsR5.Models.CodeableConcept();
            objFoodPreferenceModifier.DeserializeJson(ref reader, options);
            FoodPreferenceModifier.Add(objFoodPreferenceModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (FoodPreferenceModifier.Count == 0)
          {
            FoodPreferenceModifier = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "instantiates":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Instantiates = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Instantiates.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Instantiates.Count == 0)
          {
            Instantiates = null;
          }

          break;

        case "_instantiates":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Instantiates = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Instantiates = new fhirCsR5.Models.Element();
            obj_Instantiates.DeserializeJson(ref reader, options);
            _Instantiates.Add(obj_Instantiates);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Instantiates.Count == 0)
          {
            _Instantiates = null;
          }

          break;

        case "instantiatesCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InstantiatesCanonical = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            InstantiatesCanonical.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InstantiatesCanonical.Count == 0)
          {
            InstantiatesCanonical = null;
          }

          break;

        case "_instantiatesCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _InstantiatesCanonical = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_InstantiatesCanonical = new fhirCsR5.Models.Element();
            obj_InstantiatesCanonical.DeserializeJson(ref reader, options);
            _InstantiatesCanonical.Add(obj_InstantiatesCanonical);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_InstantiatesCanonical.Count == 0)
          {
            _InstantiatesCanonical = null;
          }

          break;

        case "instantiatesUri":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InstantiatesUri = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            InstantiatesUri.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InstantiatesUri.Count == 0)
          {
            InstantiatesUri = null;
          }

          break;

        case "_instantiatesUri":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _InstantiatesUri = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_InstantiatesUri = new fhirCsR5.Models.Element();
            obj_InstantiatesUri.DeserializeJson(ref reader, options);
            _InstantiatesUri.Add(obj_InstantiatesUri);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_InstantiatesUri.Count == 0)
          {
            _InstantiatesUri = null;
          }

          break;

        case "intent":
          Intent = reader.GetString();
          break;

        case "_intent":
          _Intent = new fhirCsR5.Models.Element();
          _Intent.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Annotation objNote = new fhirCsR5.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "oralDiet":
          OralDiet = new fhirCsR5.Models.NutritionOrderOralDiet();
          OralDiet.DeserializeJson(ref reader, options);
          break;

        case "orderer":
          Orderer = new fhirCsR5.Models.Reference();
          Orderer.DeserializeJson(ref reader, options);
          break;

        case "outsideFoodAllowed":
          OutsideFoodAllowed = reader.GetBoolean();
          break;

        case "_outsideFoodAllowed":
          _OutsideFoodAllowed = new fhirCsR5.Models.Element();
          _OutsideFoodAllowed.DeserializeJson(ref reader, options);
          break;

        case "performer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Performer = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objPerformer = new fhirCsR5.Models.CodeableReference();
            objPerformer.DeserializeJson(ref reader, options);
            Performer.Add(objPerformer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Performer.Count == 0)
          {
            Performer = null;
          }

          break;

        case "priority":
          Priority = reader.GetString();
          break;

        case "_priority":
          _Priority = new fhirCsR5.Models.Element();
          _Priority.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR5.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "supplement":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Supplement = new List<NutritionOrderSupplement>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.NutritionOrderSupplement objSupplement = new fhirCsR5.Models.NutritionOrderSupplement();
            objSupplement.DeserializeJson(ref reader, options);
            Supplement.Add(objSupplement);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Supplement.Count == 0)
          {
            Supplement = null;
          }

          break;

        case "supportingInformation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportingInformation = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objSupportingInformation = new fhirCsR5.Models.Reference();
            objSupportingInformation.DeserializeJson(ref reader, options);
            SupportingInformation.Add(objSupportingInformation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportingInformation.Count == 0)
          {
            SupportingInformation = null;
          }

          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the NutritionOrder.intent field
  /// </summary>
  public static class NutritionOrderIntentCodes {
    public const string PROPOSAL = "proposal";
    public const string PLAN = "plan";
    public const string DIRECTIVE = "directive";
    public const string ORDER = "order";
    public const string ORIGINAL_ORDER = "original-order";
    public const string REFLEX_ORDER = "reflex-order";
    public const string FILLER_ORDER = "filler-order";
    public const string INSTANCE_ORDER = "instance-order";
    public const string OPTION = "option";
    public static HashSet<string> Values = new HashSet<string>() {
      "proposal",
      "plan",
      "directive",
      "order",
      "original-order",
      "reflex-order",
      "filler-order",
      "instance-order",
      "option",
    };
  }
  /// <summary>
  /// Code Values for the NutritionOrder.priority field
  /// </summary>
  public static class NutritionOrderPriorityCodes {
    public const string ROUTINE = "routine";
    public const string URGENT = "urgent";
    public const string ASAP = "asap";
    public const string STAT = "stat";
    public static HashSet<string> Values = new HashSet<string>() {
      "routine",
      "urgent",
      "asap",
      "stat",
    };
  }
  /// <summary>
  /// Code Values for the NutritionOrder.status field
  /// </summary>
  public static class NutritionOrderStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string ON_HOLD = "on-hold";
    public const string REVOKED = "revoked";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "on-hold",
      "revoked",
      "completed",
      "entered-in-error",
      "unknown",
    };
  }
}
