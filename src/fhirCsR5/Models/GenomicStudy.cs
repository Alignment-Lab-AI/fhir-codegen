// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Inputs for the analysis event.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<GenomicStudyAnalysisInput>))]
  public class GenomicStudyAnalysisInput : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// File containing input data.
    /// </summary>
    public Reference File { get; set; }
    /// <summary>
    /// The analysis event or other GenomicStudy that generated this input file.
    /// </summary>
    public Identifier GeneratedByIdentifier { get; set; }
    /// <summary>
    /// The analysis event or other GenomicStudy that generated this input file.
    /// </summary>
    public Reference GeneratedByReference { get; set; }
    /// <summary>
    /// Type of input data, e.g., BAM, CRAM, or FASTA.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (File != null)
      {
        writer.WritePropertyName("file");
        File.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (GeneratedByIdentifier != null)
      {
        writer.WritePropertyName("generatedByIdentifier");
        GeneratedByIdentifier.SerializeJson(writer, options);
      }

      if (GeneratedByReference != null)
      {
        writer.WritePropertyName("generatedByReference");
        GeneratedByReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "file":
          File = new fhirCsR5.Models.Reference();
          File.DeserializeJson(ref reader, options);
          break;

        case "generatedByIdentifier":
          GeneratedByIdentifier = new fhirCsR5.Models.Identifier();
          GeneratedByIdentifier.DeserializeJson(ref reader, options);
          break;

        case "generatedByReference":
          GeneratedByReference = new fhirCsR5.Models.Reference();
          GeneratedByReference.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Outputs for the analysis event.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<GenomicStudyAnalysisOutput>))]
  public class GenomicStudyAnalysisOutput : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// File containing output data.
    /// </summary>
    public Reference File { get; set; }
    /// <summary>
    /// Type of output data, e.g., VCF, MAF, or BAM.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (File != null)
      {
        writer.WritePropertyName("file");
        File.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "file":
          File = new fhirCsR5.Models.Reference();
          File.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Performer for the analysis event.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<GenomicStudyAnalysisPerformer>))]
  public class GenomicStudyAnalysisPerformer : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The organization, healthcare professional, or others who participated in performing this analysis.
    /// </summary>
    public Reference Actor { get; set; }
    /// <summary>
    /// Role of the actor for this analysis.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Actor != null)
      {
        writer.WritePropertyName("actor");
        Actor.SerializeJson(writer, options);
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actor":
          Actor = new fhirCsR5.Models.Reference();
          Actor.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = new fhirCsR5.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Devices used for the analysis (e.g., instruments, software), with settings and parameters.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<GenomicStudyAnalysisDevice>))]
  public class GenomicStudyAnalysisDevice : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Device used for the analysis.
    /// </summary>
    public Reference Device { get; set; }
    /// <summary>
    /// Specific function for the device used for the analysis.
    /// </summary>
    public CodeableConcept Function { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Device != null)
      {
        writer.WritePropertyName("device");
        Device.SerializeJson(writer, options);
      }

      if (Function != null)
      {
        writer.WritePropertyName("function");
        Function.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "device":
          Device = new fhirCsR5.Models.Reference();
          Device.DeserializeJson(ref reader, options);
          break;

        case "function":
          Function = new fhirCsR5.Models.CodeableConcept();
          Function.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The details about a specific analysis that was performed in this GenomicStudy.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<GenomicStudyAnalysis>))]
  public class GenomicStudyAnalysis : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Type of the genomic changes studied in the analysis, e.g., DNA, RNA, or amino acid change.
    /// </summary>
    public List<CodeableConcept> ChangeType { get; set; }
    /// <summary>
    /// The date of the analysis event.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Devices used for the analysis (e.g., instruments, software), with settings and parameters.
    /// </summary>
    public List<GenomicStudyAnalysisDevice> Device { get; set; }
    /// <summary>
    /// The reference genome build that is used in this analysis.
    /// </summary>
    public CodeableConcept GenomeBuild { get; set; }
    /// <summary>
    /// Identifiers for the analysis event.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Inputs for the analysis event.
    /// </summary>
    public List<GenomicStudyAnalysisInput> Input { get; set; }
    /// <summary>
    /// The defined protocol that describes the analysis.
    /// </summary>
    public string InstantiatesCanonical { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesCanonical
    /// </summary>
    public Element _InstantiatesCanonical { get; set; }
    /// <summary>
    /// The URL pointing to an externally maintained protocol that describes the analysis.
    /// </summary>
    public string InstantiatesUri { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesUri
    /// </summary>
    public Element _InstantiatesUri { get; set; }
    /// <summary>
    /// Type of the methods used in the analysis, e.g., Fluorescence in situ hybridization (FISH), Karyotyping, or Microsatellite instability testing (MSI).
    /// </summary>
    public List<CodeableConcept> MethodType { get; set; }
    /// <summary>
    /// Any notes capture with the analysis event.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Outputs for the analysis event.
    /// </summary>
    public List<GenomicStudyAnalysisOutput> Output { get; set; }
    /// <summary>
    /// Performer for the analysis event.
    /// </summary>
    public List<GenomicStudyAnalysisPerformer> Performer { get; set; }
    /// <summary>
    /// The protocol that was performed for the analysis event.
    /// </summary>
    public Reference ProtocolPerformed { get; set; }
    /// <summary>
    /// Genomic regions actually called in the analysis event (BED file).
    /// </summary>
    public List<Reference> RegionsCalled { get; set; }
    /// <summary>
    /// The genomic regions to be studied in the analysis (BED file).
    /// </summary>
    public List<Reference> RegionsStudied { get; set; }
    /// <summary>
    /// The specimen used in the analysis event.
    /// </summary>
    public List<Reference> Specimen { get; set; }
    /// <summary>
    /// The subject of the analysis event.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Name of the analysis event (human friendly).
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((MethodType != null) && (MethodType.Count != 0))
      {
        writer.WritePropertyName("methodType");
        writer.WriteStartArray();

        foreach (CodeableConcept valMethodType in MethodType)
        {
          valMethodType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ChangeType != null) && (ChangeType.Count != 0))
      {
        writer.WritePropertyName("changeType");
        writer.WriteStartArray();

        foreach (CodeableConcept valChangeType in ChangeType)
        {
          valChangeType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (GenomeBuild != null)
      {
        writer.WritePropertyName("genomeBuild");
        GenomeBuild.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(InstantiatesCanonical))
      {
        writer.WriteString("instantiatesCanonical", (string)InstantiatesCanonical!);
      }

      if (_InstantiatesCanonical != null)
      {
        writer.WritePropertyName("_instantiatesCanonical");
        _InstantiatesCanonical.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(InstantiatesUri))
      {
        writer.WriteString("instantiatesUri", (string)InstantiatesUri!);
      }

      if (_InstantiatesUri != null)
      {
        writer.WritePropertyName("_instantiatesUri");
        _InstantiatesUri.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if ((Specimen != null) && (Specimen.Count != 0))
      {
        writer.WritePropertyName("specimen");
        writer.WriteStartArray();

        foreach (Reference valSpecimen in Specimen)
        {
          valSpecimen.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ProtocolPerformed != null)
      {
        writer.WritePropertyName("protocolPerformed");
        ProtocolPerformed.SerializeJson(writer, options);
      }

      if ((RegionsStudied != null) && (RegionsStudied.Count != 0))
      {
        writer.WritePropertyName("regionsStudied");
        writer.WriteStartArray();

        foreach (Reference valRegionsStudied in RegionsStudied)
        {
          valRegionsStudied.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RegionsCalled != null) && (RegionsCalled.Count != 0))
      {
        writer.WritePropertyName("regionsCalled");
        writer.WriteStartArray();

        foreach (Reference valRegionsCalled in RegionsCalled)
        {
          valRegionsCalled.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Input != null) && (Input.Count != 0))
      {
        writer.WritePropertyName("input");
        writer.WriteStartArray();

        foreach (GenomicStudyAnalysisInput valInput in Input)
        {
          valInput.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Output != null) && (Output.Count != 0))
      {
        writer.WritePropertyName("output");
        writer.WriteStartArray();

        foreach (GenomicStudyAnalysisOutput valOutput in Output)
        {
          valOutput.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Performer != null) && (Performer.Count != 0))
      {
        writer.WritePropertyName("performer");
        writer.WriteStartArray();

        foreach (GenomicStudyAnalysisPerformer valPerformer in Performer)
        {
          valPerformer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Device != null) && (Device.Count != 0))
      {
        writer.WritePropertyName("device");
        writer.WriteStartArray();

        foreach (GenomicStudyAnalysisDevice valDevice in Device)
        {
          valDevice.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "changeType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ChangeType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objChangeType = new fhirCsR5.Models.CodeableConcept();
            objChangeType.DeserializeJson(ref reader, options);
            ChangeType.Add(objChangeType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ChangeType.Count == 0)
          {
            ChangeType = null;
          }

          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR5.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "device":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Device = new List<GenomicStudyAnalysisDevice>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.GenomicStudyAnalysisDevice objDevice = new fhirCsR5.Models.GenomicStudyAnalysisDevice();
            objDevice.DeserializeJson(ref reader, options);
            Device.Add(objDevice);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Device.Count == 0)
          {
            Device = null;
          }

          break;

        case "genomeBuild":
          GenomeBuild = new fhirCsR5.Models.CodeableConcept();
          GenomeBuild.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "input":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Input = new List<GenomicStudyAnalysisInput>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.GenomicStudyAnalysisInput objInput = new fhirCsR5.Models.GenomicStudyAnalysisInput();
            objInput.DeserializeJson(ref reader, options);
            Input.Add(objInput);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Input.Count == 0)
          {
            Input = null;
          }

          break;

        case "instantiatesCanonical":
          InstantiatesCanonical = reader.GetString();
          break;

        case "_instantiatesCanonical":
          _InstantiatesCanonical = new fhirCsR5.Models.Element();
          _InstantiatesCanonical.DeserializeJson(ref reader, options);
          break;

        case "instantiatesUri":
          InstantiatesUri = reader.GetString();
          break;

        case "_instantiatesUri":
          _InstantiatesUri = new fhirCsR5.Models.Element();
          _InstantiatesUri.DeserializeJson(ref reader, options);
          break;

        case "methodType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MethodType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objMethodType = new fhirCsR5.Models.CodeableConcept();
            objMethodType.DeserializeJson(ref reader, options);
            MethodType.Add(objMethodType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MethodType.Count == 0)
          {
            MethodType = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Annotation objNote = new fhirCsR5.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "output":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Output = new List<GenomicStudyAnalysisOutput>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.GenomicStudyAnalysisOutput objOutput = new fhirCsR5.Models.GenomicStudyAnalysisOutput();
            objOutput.DeserializeJson(ref reader, options);
            Output.Add(objOutput);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Output.Count == 0)
          {
            Output = null;
          }

          break;

        case "performer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Performer = new List<GenomicStudyAnalysisPerformer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.GenomicStudyAnalysisPerformer objPerformer = new fhirCsR5.Models.GenomicStudyAnalysisPerformer();
            objPerformer.DeserializeJson(ref reader, options);
            Performer.Add(objPerformer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Performer.Count == 0)
          {
            Performer = null;
          }

          break;

        case "protocolPerformed":
          ProtocolPerformed = new fhirCsR5.Models.Reference();
          ProtocolPerformed.DeserializeJson(ref reader, options);
          break;

        case "regionsCalled":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RegionsCalled = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objRegionsCalled = new fhirCsR5.Models.Reference();
            objRegionsCalled.DeserializeJson(ref reader, options);
            RegionsCalled.Add(objRegionsCalled);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RegionsCalled.Count == 0)
          {
            RegionsCalled = null;
          }

          break;

        case "regionsStudied":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RegionsStudied = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objRegionsStudied = new fhirCsR5.Models.Reference();
            objRegionsStudied.DeserializeJson(ref reader, options);
            RegionsStudied.Add(objRegionsStudied);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RegionsStudied.Count == 0)
          {
            RegionsStudied = null;
          }

          break;

        case "specimen":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Specimen = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objSpecimen = new fhirCsR5.Models.Reference();
            objSpecimen.DeserializeJson(ref reader, options);
            Specimen.Add(objSpecimen);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Specimen.Count == 0)
          {
            Specimen = null;
          }

          break;

        case "subject":
          Subject = new fhirCsR5.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A Genomic Study is a set of analysis performed to analyze and generate genomic data.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<GenomicStudy>))]
  public class GenomicStudy : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "GenomicStudy";
    /// <summary>
    /// The details about a specific analysis that was performed in this GenomicStudy.
    /// </summary>
    public List<GenomicStudyAnalysis> Analysis { get; set; }
    /// <summary>
    /// Event resources that the genomic study is based on.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// Description of the genomic study.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The healthcare event with which this genomics study is associated.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// Identifiers for this genomic study.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The defined protocol that describes the study.
    /// </summary>
    public string InstantiatesCanonical { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesCanonical
    /// </summary>
    public Element _InstantiatesCanonical { get; set; }
    /// <summary>
    /// The URL pointing to an externally maintained protocol that describes the study.
    /// </summary>
    public string InstantiatesUri { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesUri
    /// </summary>
    public Element _InstantiatesUri { get; set; }
    /// <summary>
    /// Healthcare professionals who interpreted the genomic study.
    /// </summary>
    public List<Reference> Interpreter { get; set; }
    /// <summary>
    /// Comments related to the genomic study.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Why the genomic study was performed.
    /// </summary>
    public List<CodeableReference> Reason { get; set; }
    /// <summary>
    /// Healthcare professional who requested or referred the genomic study.
    /// </summary>
    public Reference Referrer { get; set; }
    /// <summary>
    /// When the genomic study was started.
    /// </summary>
    public string StartDate { get; set; }
    /// <summary>
    /// Extension container element for StartDate
    /// </summary>
    public Element _StartDate { get; set; }
    /// <summary>
    /// The status of the genomic study.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// The primary subject of the genomic study.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// The type of the study, e.g., Familial variant segregation, Functional variation detection, or Gene expression profiling.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StartDate))
      {
        writer.WriteString("startDate", (string)StartDate!);
      }

      if (_StartDate != null)
      {
        writer.WritePropertyName("_startDate");
        _StartDate.SerializeJson(writer, options);
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Referrer != null)
      {
        writer.WritePropertyName("referrer");
        Referrer.SerializeJson(writer, options);
      }

      if ((Interpreter != null) && (Interpreter.Count != 0))
      {
        writer.WritePropertyName("interpreter");
        writer.WriteStartArray();

        foreach (Reference valInterpreter in Interpreter)
        {
          valInterpreter.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Reason != null) && (Reason.Count != 0))
      {
        writer.WritePropertyName("reason");
        writer.WriteStartArray();

        foreach (CodeableReference valReason in Reason)
        {
          valReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(InstantiatesCanonical))
      {
        writer.WriteString("instantiatesCanonical", (string)InstantiatesCanonical!);
      }

      if (_InstantiatesCanonical != null)
      {
        writer.WritePropertyName("_instantiatesCanonical");
        _InstantiatesCanonical.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(InstantiatesUri))
      {
        writer.WriteString("instantiatesUri", (string)InstantiatesUri!);
      }

      if (_InstantiatesUri != null)
      {
        writer.WritePropertyName("_instantiatesUri");
        _InstantiatesUri.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Analysis != null) && (Analysis.Count != 0))
      {
        writer.WritePropertyName("analysis");
        writer.WriteStartArray();

        foreach (GenomicStudyAnalysis valAnalysis in Analysis)
        {
          valAnalysis.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "analysis":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Analysis = new List<GenomicStudyAnalysis>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.GenomicStudyAnalysis objAnalysis = new fhirCsR5.Models.GenomicStudyAnalysis();
            objAnalysis.DeserializeJson(ref reader, options);
            Analysis.Add(objAnalysis);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Analysis.Count == 0)
          {
            Analysis = null;
          }

          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objBasedOn = new fhirCsR5.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new fhirCsR5.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "instantiatesCanonical":
          InstantiatesCanonical = reader.GetString();
          break;

        case "_instantiatesCanonical":
          _InstantiatesCanonical = new fhirCsR5.Models.Element();
          _InstantiatesCanonical.DeserializeJson(ref reader, options);
          break;

        case "instantiatesUri":
          InstantiatesUri = reader.GetString();
          break;

        case "_instantiatesUri":
          _InstantiatesUri = new fhirCsR5.Models.Element();
          _InstantiatesUri.DeserializeJson(ref reader, options);
          break;

        case "interpreter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Interpreter = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objInterpreter = new fhirCsR5.Models.Reference();
            objInterpreter.DeserializeJson(ref reader, options);
            Interpreter.Add(objInterpreter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Interpreter.Count == 0)
          {
            Interpreter = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Annotation objNote = new fhirCsR5.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reason = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objReason = new fhirCsR5.Models.CodeableReference();
            objReason.DeserializeJson(ref reader, options);
            Reason.Add(objReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reason.Count == 0)
          {
            Reason = null;
          }

          break;

        case "referrer":
          Referrer = new fhirCsR5.Models.Reference();
          Referrer.DeserializeJson(ref reader, options);
          break;

        case "startDate":
          StartDate = reader.GetString();
          break;

        case "_startDate":
          _StartDate = new fhirCsR5.Models.Element();
          _StartDate.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = new fhirCsR5.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR5.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objType = new fhirCsR5.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
