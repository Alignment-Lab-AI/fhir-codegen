// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// The legal status of supply of the packaged item as classified by the regulator.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PackagedProductDefinitionLegalStatusOfSupply>))]
  public class PackagedProductDefinitionLegalStatusOfSupply : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The actual status of supply. Conveys in what situation this package type may be supplied for use.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The place where the legal status of supply applies. When not specified, this indicates it is unknown in this context.
    /// </summary>
    public CodeableConcept Jurisdiction { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Jurisdiction != null)
      {
        writer.WritePropertyName("jurisdiction");
        Jurisdiction.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR5.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          Jurisdiction = new fhirCsR5.Models.CodeableConcept();
          Jurisdiction.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// General characteristics of this item.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PackagedProductDefinitionPackagingProperty>))]
  public class PackagedProductDefinitionPackagingProperty : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A code expressing the type of characteristic.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public string ValueDate { get; set; }
    /// <summary>
    /// Extension container element for ValueDate
    /// </summary>
    public Element _ValueDate { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// Extension container element for ValueBoolean
    /// </summary>
    public Element _ValueBoolean { get; set; }
    /// <summary>
    /// A value for the characteristic.
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (ValueCodeableConcept != null)
      {
        writer.WritePropertyName("valueCodeableConcept");
        ValueCodeableConcept.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueDate))
      {
        writer.WriteString("valueDate", (string)ValueDate!);
      }

      if (_ValueDate != null)
      {
        writer.WritePropertyName("_valueDate");
        _ValueDate.SerializeJson(writer, options);
      }

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (_ValueBoolean != null)
      {
        writer.WritePropertyName("_valueBoolean");
        _ValueBoolean.SerializeJson(writer, options);
      }

      if (ValueAttachment != null)
      {
        writer.WritePropertyName("valueAttachment");
        ValueAttachment.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR5.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueDate":
          ValueDate = reader.GetString();
          break;

        case "_valueDate":
          _ValueDate = new fhirCsR5.Models.Element();
          _ValueDate.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "_valueBoolean":
          _ValueBoolean = new fhirCsR5.Models.Element();
          _ValueBoolean.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          ValueAttachment = new fhirCsR5.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The item(s) within the packaging.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PackagedProductDefinitionPackagingContainedItem>))]
  public class PackagedProductDefinitionPackagingContainedItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The number of this type of item within this packaging.
    /// </summary>
    public Quantity Amount { get; set; }
    /// <summary>
    /// The actual item(s) of medication, as manufactured, or a device (typically, but not necessarily, a co-packaged one), or other medically related item (such as food, biologicals, raw materials, medical fluids, gases etc.), as contained in the package. This also allows another whole packaged product to be included, which is solely for the case where a package of other entire packages is wanted - such as a wholesale or distribution pack (for layers within one package, use PackagedProductDefinition.packaging.packaging).
    /// </summary>
    public CodeableReference Item { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Item != null)
      {
        writer.WritePropertyName("item");
        Item.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new fhirCsR5.Models.Quantity();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "item":
          Item = new fhirCsR5.Models.CodeableReference();
          Item.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap (which is not a device or a medication manufactured item).
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PackagedProductDefinitionPackaging>))]
  public class PackagedProductDefinitionPackaging : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A possible alternate material for this part of the packaging, that is allowed to be used instead of the usual material (e.g. different types of plastic for a blister sleeve).
    /// </summary>
    public List<CodeableConcept> AlternateMaterial { get; set; }
    /// <summary>
    /// The item(s) within the packaging.
    /// </summary>
    public List<PackagedProductDefinitionPackagingContainedItem> ContainedItem { get; set; }
    /// <summary>
    /// A business identifier that is specific to this particular part of the packaging, often assigned by the manufacturer. Including possibly Data Carrier Identifier (a GS1 barcode).
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Manufacturer of this packaging item. When there are multiple values each one is a potential manufacturer of this packaging item.
    /// </summary>
    public List<Reference> Manufacturer { get; set; }
    /// <summary>
    /// Material type of the package item.
    /// </summary>
    public List<CodeableConcept> Material { get; set; }
    /// <summary>
    /// Allows containers (and parts of containers) parwithin containers, still a single packaged product.  See also PackagedProductDefinition.packaging.containedItem.item(PackagedProductDefinition).
    /// </summary>
    public List<PackagedProductDefinitionPackaging> Packaging { get; set; }
    /// <summary>
    /// General characteristics of this item.
    /// </summary>
    public List<PackagedProductDefinitionPackagingProperty> Property { get; set; }
    /// <summary>
    /// The quantity of packaging items contained at this layer of the package. This does not relate to the number of contained items but relates solely to the number of packaging items. When looking at the outermost layer it is always 1. If there are two boxes within, at the next layer it would be 2.
    /// </summary>
    public int? Quantity { get; set; }
    /// <summary>
    /// Extension container element for Quantity
    /// </summary>
    public Element _Quantity { get; set; }
    /// <summary>
    /// Shelf Life and storage information.
    /// </summary>
    public List<ProductShelfLife> ShelfLifeStorage { get; set; }
    /// <summary>
    /// The physical type of the container of the items.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WriteNumber("quantity", (int)Quantity!);
      }

      if (_Quantity != null)
      {
        writer.WritePropertyName("_quantity");
        _Quantity.SerializeJson(writer, options);
      }

      if ((Material != null) && (Material.Count != 0))
      {
        writer.WritePropertyName("material");
        writer.WriteStartArray();

        foreach (CodeableConcept valMaterial in Material)
        {
          valMaterial.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AlternateMaterial != null) && (AlternateMaterial.Count != 0))
      {
        writer.WritePropertyName("alternateMaterial");
        writer.WriteStartArray();

        foreach (CodeableConcept valAlternateMaterial in AlternateMaterial)
        {
          valAlternateMaterial.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ShelfLifeStorage != null) && (ShelfLifeStorage.Count != 0))
      {
        writer.WritePropertyName("shelfLifeStorage");
        writer.WriteStartArray();

        foreach (ProductShelfLife valShelfLifeStorage in ShelfLifeStorage)
        {
          valShelfLifeStorage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Manufacturer != null) && (Manufacturer.Count != 0))
      {
        writer.WritePropertyName("manufacturer");
        writer.WriteStartArray();

        foreach (Reference valManufacturer in Manufacturer)
        {
          valManufacturer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Property != null) && (Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();

        foreach (PackagedProductDefinitionPackagingProperty valProperty in Property)
        {
          valProperty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ContainedItem != null) && (ContainedItem.Count != 0))
      {
        writer.WritePropertyName("containedItem");
        writer.WriteStartArray();

        foreach (PackagedProductDefinitionPackagingContainedItem valContainedItem in ContainedItem)
        {
          valContainedItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Packaging != null) && (Packaging.Count != 0))
      {
        writer.WritePropertyName("packaging");
        writer.WriteStartArray();

        foreach (PackagedProductDefinitionPackaging valPackaging in Packaging)
        {
          valPackaging.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "alternateMaterial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AlternateMaterial = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objAlternateMaterial = new fhirCsR5.Models.CodeableConcept();
            objAlternateMaterial.DeserializeJson(ref reader, options);
            AlternateMaterial.Add(objAlternateMaterial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AlternateMaterial.Count == 0)
          {
            AlternateMaterial = null;
          }

          break;

        case "containedItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ContainedItem = new List<PackagedProductDefinitionPackagingContainedItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PackagedProductDefinitionPackagingContainedItem objContainedItem = new fhirCsR5.Models.PackagedProductDefinitionPackagingContainedItem();
            objContainedItem.DeserializeJson(ref reader, options);
            ContainedItem.Add(objContainedItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ContainedItem.Count == 0)
          {
            ContainedItem = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "manufacturer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Manufacturer = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objManufacturer = new fhirCsR5.Models.Reference();
            objManufacturer.DeserializeJson(ref reader, options);
            Manufacturer.Add(objManufacturer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Manufacturer.Count == 0)
          {
            Manufacturer = null;
          }

          break;

        case "material":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Material = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objMaterial = new fhirCsR5.Models.CodeableConcept();
            objMaterial.DeserializeJson(ref reader, options);
            Material.Add(objMaterial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Material.Count == 0)
          {
            Material = null;
          }

          break;

        case "packaging":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Packaging = new List<PackagedProductDefinitionPackaging>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PackagedProductDefinitionPackaging objPackaging = new fhirCsR5.Models.PackagedProductDefinitionPackaging();
            objPackaging.DeserializeJson(ref reader, options);
            Packaging.Add(objPackaging);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Packaging.Count == 0)
          {
            Packaging = null;
          }

          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Property = new List<PackagedProductDefinitionPackagingProperty>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PackagedProductDefinitionPackagingProperty objProperty = new fhirCsR5.Models.PackagedProductDefinitionPackagingProperty();
            objProperty.DeserializeJson(ref reader, options);
            Property.Add(objProperty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Property.Count == 0)
          {
            Property = null;
          }

          break;

        case "quantity":
          Quantity = reader.GetInt32();
          break;

        case "_quantity":
          _Quantity = new fhirCsR5.Models.Element();
          _Quantity.DeserializeJson(ref reader, options);
          break;

        case "shelfLifeStorage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ShelfLifeStorage = new List<ProductShelfLife>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ProductShelfLife objShelfLifeStorage = new fhirCsR5.Models.ProductShelfLife();
            objShelfLifeStorage.DeserializeJson(ref reader, options);
            ShelfLifeStorage.Add(objShelfLifeStorage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ShelfLifeStorage.Count == 0)
          {
            ShelfLifeStorage = null;
          }

          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A medically related item or items, in a container or package.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<PackagedProductDefinition>))]
  public class PackagedProductDefinition : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "PackagedProductDefinition";
    /// <summary>
    /// Additional information or supporting documentation about the packaged product.
    /// </summary>
    public List<Reference> AttachedDocument { get; set; }
    /// <summary>
    /// Allows the key features to be recorded, such as "hospital pack", "nurse prescribable", "calendar pack".
    /// </summary>
    public List<CodeableConcept> Characteristic { get; set; }
    /// <summary>
    /// A total of the complete count of contained items of a particular type/form, independent of sub-packaging or organization. This can be considered as the pack size. This attribute differs from containedItem.amount in that it can give a single aggregated count of all tablet types in a pack, even when these are different manufactured items. For example a pill pack of 21 tablets plus 7 sugar tablets, can be denoted here as '28 tablets'. This attribute is repeatable so that the different item types in one pack type can be counted (e.g. a count of vials and count of syringes). Each repeat must have different units, so that it is clear what the different sets of counted items are, and it is not intended to allow different counts of similar items (e.g. not '2 tubes and 3 tubes'). Repeats are not to be used to represent different pack sizes (e.g. 20 pack vs. 50 pack) - which would be different instances of this resource.
    /// </summary>
    public List<Quantity> ContainedItemQuantity { get; set; }
    /// <summary>
    /// Identifies if the package contains different items, such as when a drug product is supplied with another item e.g. a diluent or adjuvant.
    /// </summary>
    public bool? CopackagedIndicator { get; set; }
    /// <summary>
    /// Extension container element for CopackagedIndicator
    /// </summary>
    public Element _CopackagedIndicator { get; set; }
    /// <summary>
    /// Textual description. Note that this is not the name of the package or product.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// A unique identifier for this package as whole - not the the content of the package. Unique instance identifiers assigned to a package by manufacturers, regulators, drug catalogue custodians or other organizations.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The legal status of supply of the packaged item as classified by the regulator.
    /// </summary>
    public List<PackagedProductDefinitionLegalStatusOfSupply> LegalStatusOfSupply { get; set; }
    /// <summary>
    /// Manufacturer of this package type. When there are multiple it means these are all possible manufacturers.
    /// </summary>
    public List<Reference> Manufacturer { get; set; }
    /// <summary>
    /// Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated.
    /// </summary>
    public List<MarketingStatus> MarketingStatus { get; set; }
    /// <summary>
    /// A name for this package. Typically what it would be listed as in a drug formulary or catalogue, inventory etc.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The product this package model relates to, not the contents of the package (for which see package.containedItem).
    /// </summary>
    public List<Reference> PackageFor { get; set; }
    /// <summary>
    /// A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap (which is not a device or a medication manufactured item).
    /// </summary>
    public PackagedProductDefinitionPackaging Packaging { get; set; }
    /// <summary>
    /// The status within the lifecycle of this item. A high level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization or marketing status.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// The date at which the given status became applicable.
    /// </summary>
    public string StatusDate { get; set; }
    /// <summary>
    /// Extension container element for StatusDate
    /// </summary>
    public Element _StatusDate { get; set; }
    /// <summary>
    /// A high level category e.g. medicinal product, raw material, shipping/transport container, etc.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((PackageFor != null) && (PackageFor.Count != 0))
      {
        writer.WritePropertyName("packageFor");
        writer.WriteStartArray();

        foreach (Reference valPackageFor in PackageFor)
        {
          valPackageFor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StatusDate))
      {
        writer.WriteString("statusDate", (string)StatusDate!);
      }

      if (_StatusDate != null)
      {
        writer.WritePropertyName("_statusDate");
        _StatusDate.SerializeJson(writer, options);
      }

      if ((ContainedItemQuantity != null) && (ContainedItemQuantity.Count != 0))
      {
        writer.WritePropertyName("containedItemQuantity");
        writer.WriteStartArray();

        foreach (Quantity valContainedItemQuantity in ContainedItemQuantity)
        {
          valContainedItemQuantity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((LegalStatusOfSupply != null) && (LegalStatusOfSupply.Count != 0))
      {
        writer.WritePropertyName("legalStatusOfSupply");
        writer.WriteStartArray();

        foreach (PackagedProductDefinitionLegalStatusOfSupply valLegalStatusOfSupply in LegalStatusOfSupply)
        {
          valLegalStatusOfSupply.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((MarketingStatus != null) && (MarketingStatus.Count != 0))
      {
        writer.WritePropertyName("marketingStatus");
        writer.WriteStartArray();

        foreach (MarketingStatus valMarketingStatus in MarketingStatus)
        {
          valMarketingStatus.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Characteristic != null) && (Characteristic.Count != 0))
      {
        writer.WritePropertyName("characteristic");
        writer.WriteStartArray();

        foreach (CodeableConcept valCharacteristic in Characteristic)
        {
          valCharacteristic.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (CopackagedIndicator != null)
      {
        writer.WriteBoolean("copackagedIndicator", (bool)CopackagedIndicator!);
      }

      if (_CopackagedIndicator != null)
      {
        writer.WritePropertyName("_copackagedIndicator");
        _CopackagedIndicator.SerializeJson(writer, options);
      }

      if ((Manufacturer != null) && (Manufacturer.Count != 0))
      {
        writer.WritePropertyName("manufacturer");
        writer.WriteStartArray();

        foreach (Reference valManufacturer in Manufacturer)
        {
          valManufacturer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AttachedDocument != null) && (AttachedDocument.Count != 0))
      {
        writer.WritePropertyName("attachedDocument");
        writer.WriteStartArray();

        foreach (Reference valAttachedDocument in AttachedDocument)
        {
          valAttachedDocument.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Packaging != null)
      {
        writer.WritePropertyName("packaging");
        Packaging.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "attachedDocument":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AttachedDocument = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objAttachedDocument = new fhirCsR5.Models.Reference();
            objAttachedDocument.DeserializeJson(ref reader, options);
            AttachedDocument.Add(objAttachedDocument);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AttachedDocument.Count == 0)
          {
            AttachedDocument = null;
          }

          break;

        case "characteristic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Characteristic = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objCharacteristic = new fhirCsR5.Models.CodeableConcept();
            objCharacteristic.DeserializeJson(ref reader, options);
            Characteristic.Add(objCharacteristic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Characteristic.Count == 0)
          {
            Characteristic = null;
          }

          break;

        case "containedItemQuantity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ContainedItemQuantity = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Quantity objContainedItemQuantity = new fhirCsR5.Models.Quantity();
            objContainedItemQuantity.DeserializeJson(ref reader, options);
            ContainedItemQuantity.Add(objContainedItemQuantity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ContainedItemQuantity.Count == 0)
          {
            ContainedItemQuantity = null;
          }

          break;

        case "copackagedIndicator":
          CopackagedIndicator = reader.GetBoolean();
          break;

        case "_copackagedIndicator":
          _CopackagedIndicator = new fhirCsR5.Models.Element();
          _CopackagedIndicator.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "legalStatusOfSupply":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          LegalStatusOfSupply = new List<PackagedProductDefinitionLegalStatusOfSupply>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.PackagedProductDefinitionLegalStatusOfSupply objLegalStatusOfSupply = new fhirCsR5.Models.PackagedProductDefinitionLegalStatusOfSupply();
            objLegalStatusOfSupply.DeserializeJson(ref reader, options);
            LegalStatusOfSupply.Add(objLegalStatusOfSupply);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (LegalStatusOfSupply.Count == 0)
          {
            LegalStatusOfSupply = null;
          }

          break;

        case "manufacturer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Manufacturer = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objManufacturer = new fhirCsR5.Models.Reference();
            objManufacturer.DeserializeJson(ref reader, options);
            Manufacturer.Add(objManufacturer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Manufacturer.Count == 0)
          {
            Manufacturer = null;
          }

          break;

        case "marketingStatus":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MarketingStatus = new List<MarketingStatus>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MarketingStatus objMarketingStatus = new fhirCsR5.Models.MarketingStatus();
            objMarketingStatus.DeserializeJson(ref reader, options);
            MarketingStatus.Add(objMarketingStatus);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MarketingStatus.Count == 0)
          {
            MarketingStatus = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "packageFor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PackageFor = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objPackageFor = new fhirCsR5.Models.Reference();
            objPackageFor.DeserializeJson(ref reader, options);
            PackageFor.Add(objPackageFor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PackageFor.Count == 0)
          {
            PackageFor = null;
          }

          break;

        case "packaging":
          Packaging = new fhirCsR5.Models.PackagedProductDefinitionPackaging();
          Packaging.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = new fhirCsR5.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "statusDate":
          StatusDate = reader.GetString();
          break;

        case "_statusDate":
          _StatusDate = new fhirCsR5.Models.Element();
          _StatusDate.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
