// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<RequestOrchestrationActionCondition>))]
  public class RequestOrchestrationActionCondition : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
    /// </summary>
    public Expression Expression { get; set; }
    /// <summary>
    /// Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe enter/exit criteria for an action.
    /// </summary>
    public string Kind { get; set; }
    /// <summary>
    /// Extension container element for Kind
    /// </summary>
    public Element _Kind { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Kind))
      {
        writer.WriteString("kind", (string)Kind!);
      }

      if (_Kind != null)
      {
        writer.WritePropertyName("_kind");
        _Kind.SerializeJson(writer, options);
      }

      if (Expression != null)
      {
        writer.WritePropertyName("expression");
        Expression.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "expression":
          Expression = new fhirCsR5.Models.Expression();
          Expression.DeserializeJson(ref reader, options);
          break;

        case "kind":
          Kind = reader.GetString();
          break;

        case "_kind":
          _Kind = new fhirCsR5.Models.Element();
          _Kind.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the RequestOrchestration.action.condition.kind field
  /// </summary>
  public static class RequestOrchestrationActionConditionKindCodes {
    public const string APPLICABILITY = "applicability";
    public const string START = "start";
    public const string STOP = "stop";
    public static HashSet<string> Values = new HashSet<string>() {
      "applicability",
      "start",
      "stop",
    };
  }
  /// <summary>
  /// Defines input data requirements for the action.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<RequestOrchestrationActionInput>))]
  public class RequestOrchestrationActionInput : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The relatedData element allows indicating that an input to a parent action is an input to specific child actions. It also allows the output of one action to be identified as the input to a different action
    /// </summary>
    public string RelatedData { get; set; }
    /// <summary>
    /// Extension container element for RelatedData
    /// </summary>
    public Element _RelatedData { get; set; }
    /// <summary>
    /// Defines the data that is to be provided as input to the action.
    /// </summary>
    public DataRequirement Requirement { get; set; }
    /// <summary>
    /// A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (Requirement != null)
      {
        writer.WritePropertyName("requirement");
        Requirement.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RelatedData))
      {
        writer.WriteString("relatedData", (string)RelatedData!);
      }

      if (_RelatedData != null)
      {
        writer.WritePropertyName("_relatedData");
        _RelatedData.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "relatedData":
          RelatedData = reader.GetString();
          break;

        case "_relatedData":
          _RelatedData = new fhirCsR5.Models.Element();
          _RelatedData.DeserializeJson(ref reader, options);
          break;

        case "requirement":
          Requirement = new fhirCsR5.Models.DataRequirement();
          Requirement.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Defines the outputs of the action, if any.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<RequestOrchestrationActionOutput>))]
  public class RequestOrchestrationActionOutput : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The relatedData element allows indicating that the output of child action is also the output of a parent action. It also allows the input of one action to be identified as the output of a different action
    /// </summary>
    public string RelatedData { get; set; }
    /// <summary>
    /// Extension container element for RelatedData
    /// </summary>
    public Element _RelatedData { get; set; }
    /// <summary>
    /// Defines the data that results as output from the action.
    /// </summary>
    public DataRequirement Requirement { get; set; }
    /// <summary>
    /// A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (Requirement != null)
      {
        writer.WritePropertyName("requirement");
        Requirement.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RelatedData))
      {
        writer.WriteString("relatedData", (string)RelatedData!);
      }

      if (_RelatedData != null)
      {
        writer.WritePropertyName("_relatedData");
        _RelatedData.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "relatedData":
          RelatedData = reader.GetString();
          break;

        case "_relatedData":
          _RelatedData = new fhirCsR5.Models.Element();
          _RelatedData.DeserializeJson(ref reader, options);
          break;

        case "requirement":
          Requirement = new fhirCsR5.Models.DataRequirement();
          Requirement.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A relationship to another action such as "before" or "30-60 minutes after start of".
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<RequestOrchestrationActionRelatedAction>))]
  public class RequestOrchestrationActionRelatedAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
    /// </summary>
    public Duration OffsetDuration { get; set; }
    /// <summary>
    /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
    /// </summary>
    public Range OffsetRange { get; set; }
    /// <summary>
    /// The relationship of this action to the related action.
    /// </summary>
    public string Relationship { get; set; }
    /// <summary>
    /// Extension container element for Relationship
    /// </summary>
    public Element _Relationship { get; set; }
    /// <summary>
    /// The element id of the target related action.
    /// </summary>
    public string TargetId { get; set; }
    /// <summary>
    /// Extension container element for TargetId
    /// </summary>
    public Element _TargetId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(TargetId))
      {
        writer.WriteString("targetId", (string)TargetId!);
      }

      if (_TargetId != null)
      {
        writer.WritePropertyName("_targetId");
        _TargetId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Relationship))
      {
        writer.WriteString("relationship", (string)Relationship!);
      }

      if (_Relationship != null)
      {
        writer.WritePropertyName("_relationship");
        _Relationship.SerializeJson(writer, options);
      }

      if (OffsetDuration != null)
      {
        writer.WritePropertyName("offsetDuration");
        OffsetDuration.SerializeJson(writer, options);
      }

      if (OffsetRange != null)
      {
        writer.WritePropertyName("offsetRange");
        OffsetRange.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "offsetDuration":
          OffsetDuration = new fhirCsR5.Models.Duration();
          OffsetDuration.DeserializeJson(ref reader, options);
          break;

        case "offsetRange":
          OffsetRange = new fhirCsR5.Models.Range();
          OffsetRange.DeserializeJson(ref reader, options);
          break;

        case "relationship":
          Relationship = reader.GetString();
          break;

        case "_relationship":
          _Relationship = new fhirCsR5.Models.Element();
          _Relationship.DeserializeJson(ref reader, options);
          break;

        case "targetId":
          TargetId = reader.GetString();
          break;

        case "_targetId":
          _TargetId = new fhirCsR5.Models.Element();
          _TargetId.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the RequestOrchestration.action.relatedAction.relationship field
  /// </summary>
  public static class RequestOrchestrationActionRelatedActionRelationshipCodes {
    public const string BEFORE_START = "before-start";
    public const string BEFORE = "before";
    public const string BEFORE_END = "before-end";
    public const string CONCURRENT_WITH_START = "concurrent-with-start";
    public const string CONCURRENT = "concurrent";
    public const string CONCURRENT_WITH_END = "concurrent-with-end";
    public const string AFTER_START = "after-start";
    public const string AFTER = "after";
    public const string AFTER_END = "after-end";
    public static HashSet<string> Values = new HashSet<string>() {
      "before-start",
      "before",
      "before-end",
      "concurrent-with-start",
      "concurrent",
      "concurrent-with-end",
      "after-start",
      "after",
      "after-end",
    };
  }
  /// <summary>
  /// Because request orchestrations represent potential options for performing activities, some specific participants may still be unknown, so this element allows for both definitional participants (in the same way they are specified in ActivityDefinition and PlanDefinition resources) as well as identifying specific participants when they are known.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<RequestOrchestrationActionParticipant>))]
  public class RequestOrchestrationActionParticipant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A reference to the actual participant.
    /// </summary>
    public string ActorCanonical { get; set; }
    /// <summary>
    /// Extension container element for ActorCanonical
    /// </summary>
    public Element _ActorCanonical { get; set; }
    /// <summary>
    /// A reference to the actual participant.
    /// </summary>
    public Reference ActorReference { get; set; }
    /// <summary>
    /// Indicates how the actor will be involved in the action - author, reviewer, witness, etc.
    /// </summary>
    public CodeableConcept Function { get; set; }
    /// <summary>
    /// The role the participant should play in performing the described action.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// The type of participant in the action.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// The type of participant in the action.
    /// </summary>
    public string TypeCanonical { get; set; }
    /// <summary>
    /// Extension container element for TypeCanonical
    /// </summary>
    public Element _TypeCanonical { get; set; }
    /// <summary>
    /// When this element is a reference, it SHOULD be a reference to a definitional resource (for example, a location type, rather than a specific location).
    /// </summary>
    public Reference TypeReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TypeCanonical))
      {
        writer.WriteString("typeCanonical", (string)TypeCanonical!);
      }

      if (_TypeCanonical != null)
      {
        writer.WritePropertyName("_typeCanonical");
        _TypeCanonical.SerializeJson(writer, options);
      }

      if (TypeReference != null)
      {
        writer.WritePropertyName("typeReference");
        TypeReference.SerializeJson(writer, options);
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Function != null)
      {
        writer.WritePropertyName("function");
        Function.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ActorCanonical))
      {
        writer.WriteString("actorCanonical", (string)ActorCanonical!);
      }

      if (_ActorCanonical != null)
      {
        writer.WritePropertyName("_actorCanonical");
        _ActorCanonical.SerializeJson(writer, options);
      }

      if (ActorReference != null)
      {
        writer.WritePropertyName("actorReference");
        ActorReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actorCanonical":
          ActorCanonical = reader.GetString();
          break;

        case "_actorCanonical":
          _ActorCanonical = new fhirCsR5.Models.Element();
          _ActorCanonical.DeserializeJson(ref reader, options);
          break;

        case "actorReference":
          ActorReference = new fhirCsR5.Models.Reference();
          ActorReference.DeserializeJson(ref reader, options);
          break;

        case "function":
          Function = new fhirCsR5.Models.CodeableConcept();
          Function.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = new fhirCsR5.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "typeCanonical":
          TypeCanonical = reader.GetString();
          break;

        case "_typeCanonical":
          _TypeCanonical = new fhirCsR5.Models.Element();
          _TypeCanonical.DeserializeJson(ref reader, options);
          break;

        case "typeReference":
          TypeReference = new fhirCsR5.Models.Reference();
          TypeReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the RequestOrchestration.action.participant.type field
  /// </summary>
  public static class RequestOrchestrationActionParticipantTypeCodes {
    public const string CARETEAM = "careteam";
    public const string DEVICE = "device";
    public const string GROUP = "group";
    public const string HEALTHCARESERVICE = "healthcareservice";
    public const string LOCATION = "location";
    public const string ORGANIZATION = "organization";
    public const string PATIENT = "patient";
    public const string PRACTITIONER = "practitioner";
    public const string PRACTITIONERROLE = "practitionerrole";
    public const string RELATEDPERSON = "relatedperson";
    public static HashSet<string> Values = new HashSet<string>() {
      "careteam",
      "device",
      "group",
      "healthcareservice",
      "location",
      "organization",
      "patient",
      "practitioner",
      "practitionerrole",
      "relatedperson",
    };
  }
  /// <summary>
  /// Dynamic values are applied in the order in which they are defined in the RequestOrchestration resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<RequestOrchestrationActionDynamicValue>))]
  public class RequestOrchestrationActionDynamicValue : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
    /// </summary>
    public Expression Expression { get; set; }
    /// <summary>
    /// To specify the path to the current action being realized, the %action environment variable is available in this path. For example, to specify the description element of the target action, the path would be %action.description. The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
    /// </summary>
    public string Path { get; set; }
    /// <summary>
    /// Extension container element for Path
    /// </summary>
    public Element _Path { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Path))
      {
        writer.WriteString("path", (string)Path!);
      }

      if (_Path != null)
      {
        writer.WritePropertyName("_path");
        _Path.SerializeJson(writer, options);
      }

      if (Expression != null)
      {
        writer.WritePropertyName("expression");
        Expression.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "expression":
          Expression = new fhirCsR5.Models.Expression();
          Expression.DeserializeJson(ref reader, options);
          break;

        case "path":
          Path = reader.GetString();
          break;

        case "_path":
          _Path = new fhirCsR5.Models.Element();
          _Path.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The actions, if any, produced by the evaluation of the artifact.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<RequestOrchestrationAction>))]
  public class RequestOrchestrationAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Sub actions.
    /// </summary>
    public List<RequestOrchestrationAction> Action { get; set; }
    /// <summary>
    /// Defines whether the action can be selected multiple times.
    /// </summary>
    public string CardinalityBehavior { get; set; }
    /// <summary>
    /// Extension container element for CardinalityBehavior
    /// </summary>
    public Element _CardinalityBehavior { get; set; }
    /// <summary>
    /// A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template.
    /// </summary>
    public List<CodeableConcept> Code { get; set; }
    /// <summary>
    /// When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
    /// </summary>
    public List<RequestOrchestrationActionCondition> Condition { get; set; }
    /// <summary>
    /// Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.
    /// </summary>
    public string DefinitionCanonical { get; set; }
    /// <summary>
    /// Extension container element for DefinitionCanonical
    /// </summary>
    public Element _DefinitionCanonical { get; set; }
    /// <summary>
    /// Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.
    /// </summary>
    public string DefinitionUri { get; set; }
    /// <summary>
    /// Extension container element for DefinitionUri
    /// </summary>
    public Element _DefinitionUri { get; set; }
    /// <summary>
    /// A short description of the action used to provide a summary to display to the user.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
    /// </summary>
    public List<RelatedArtifact> Documentation { get; set; }
    /// <summary>
    /// Dynamic values are applied in the order in which they are defined in the RequestOrchestration resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
    /// </summary>
    public List<RequestOrchestrationActionDynamicValue> DynamicValue { get; set; }
    /// <summary>
    /// Goals that are intended to be achieved by following the requests in this action.
    /// </summary>
    public List<Reference> Goal { get; set; }
    /// <summary>
    /// Defines the grouping behavior for the action and its children.
    /// </summary>
    public string GroupingBehavior { get; set; }
    /// <summary>
    /// Extension container element for GroupingBehavior
    /// </summary>
    public Element _GroupingBehavior { get; set; }
    /// <summary>
    /// Defines input data requirements for the action.
    /// </summary>
    public List<RequestOrchestrationActionInput> Input { get; set; }
    /// <summary>
    /// The linkId of the action from the PlanDefinition that corresponds to this action in the RequestOrchestration resource.
    /// </summary>
    public string LinkId { get; set; }
    /// <summary>
    /// Extension container element for LinkId
    /// </summary>
    public Element _LinkId { get; set; }
    /// <summary>
    /// May reference a specific clinical location or may just identify a type of location.
    /// </summary>
    public CodeableReference Location { get; set; }
    /// <summary>
    /// Defines the outputs of the action, if any.
    /// </summary>
    public List<RequestOrchestrationActionOutput> Output { get; set; }
    /// <summary>
    /// Because request orchestrations represent potential options for performing activities, some specific participants may still be unknown, so this element allows for both definitional participants (in the same way they are specified in ActivityDefinition and PlanDefinition resources) as well as identifying specific participants when they are known.
    /// </summary>
    public List<RequestOrchestrationActionParticipant> Participant { get; set; }
    /// <summary>
    /// Defines whether the action should usually be preselected.
    /// </summary>
    public string PrecheckBehavior { get; set; }
    /// <summary>
    /// Extension container element for PrecheckBehavior
    /// </summary>
    public Element _PrecheckBehavior { get; set; }
    /// <summary>
    /// A user-visible prefix for the action. For example a section or item numbering such as 1. or A.
    /// </summary>
    public string Prefix { get; set; }
    /// <summary>
    /// Extension container element for Prefix
    /// </summary>
    public Element _Prefix { get; set; }
    /// <summary>
    /// Indicates how quickly the action should be addressed with respect to other actions.
    /// </summary>
    public string Priority { get; set; }
    /// <summary>
    /// Extension container element for Priority
    /// </summary>
    public Element _Priority { get; set; }
    /// <summary>
    /// A relationship to another action such as "before" or "30-60 minutes after start of".
    /// </summary>
    public List<RequestOrchestrationActionRelatedAction> RelatedAction { get; set; }
    /// <summary>
    /// Defines expectations around whether an action is required.
    /// </summary>
    public string RequiredBehavior { get; set; }
    /// <summary>
    /// Extension container element for RequiredBehavior
    /// </summary>
    public Element _RequiredBehavior { get; set; }
    /// <summary>
    /// The target resource SHALL be a [Request](request.html) resource with a Request.intent set to "option".
    /// </summary>
    public Reference Resource { get; set; }
    /// <summary>
    /// Defines the selection behavior for the action and its children.
    /// </summary>
    public string SelectionBehavior { get; set; }
    /// <summary>
    /// Extension container element for SelectionBehavior
    /// </summary>
    public Element _SelectionBehavior { get; set; }
    /// <summary>
    /// A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
    /// </summary>
    public string TextEquivalent { get; set; }
    /// <summary>
    /// Extension container element for TextEquivalent
    /// </summary>
    public Element _TextEquivalent { get; set; }
    /// <summary>
    /// The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
    /// </summary>
    public string TimingDateTime { get; set; }
    /// <summary>
    /// Extension container element for TimingDateTime
    /// </summary>
    public Element _TimingDateTime { get; set; }
    /// <summary>
    /// The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
    /// </summary>
    public Age TimingAge { get; set; }
    /// <summary>
    /// The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
    /// </summary>
    public Period TimingPeriod { get; set; }
    /// <summary>
    /// The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
    /// </summary>
    public Duration TimingDuration { get; set; }
    /// <summary>
    /// The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
    /// </summary>
    public Range TimingRange { get; set; }
    /// <summary>
    /// The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
    /// </summary>
    public Timing TimingTiming { get; set; }
    /// <summary>
    /// The title of the action displayed to a user.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Note that when a referenced ActivityDefinition also defines a transform, the transform specified here generally takes precedence. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
    /// </summary>
    public string Transform { get; set; }
    /// <summary>
    /// Extension container element for Transform
    /// </summary>
    public Element _Transform { get; set; }
    /// <summary>
    /// The type of action to perform (create, update, remove).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(LinkId))
      {
        writer.WriteString("linkId", (string)LinkId!);
      }

      if (_LinkId != null)
      {
        writer.WritePropertyName("_linkId");
        _LinkId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Prefix))
      {
        writer.WriteString("prefix", (string)Prefix!);
      }

      if (_Prefix != null)
      {
        writer.WritePropertyName("_prefix");
        _Prefix.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TextEquivalent))
      {
        writer.WriteString("textEquivalent", (string)TextEquivalent!);
      }

      if (_TextEquivalent != null)
      {
        writer.WritePropertyName("_textEquivalent");
        _TextEquivalent.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Priority))
      {
        writer.WriteString("priority", (string)Priority!);
      }

      if (_Priority != null)
      {
        writer.WritePropertyName("_priority");
        _Priority.SerializeJson(writer, options);
      }

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (CodeableConcept valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Documentation != null) && (Documentation.Count != 0))
      {
        writer.WritePropertyName("documentation");
        writer.WriteStartArray();

        foreach (RelatedArtifact valDocumentation in Documentation)
        {
          valDocumentation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Goal != null) && (Goal.Count != 0))
      {
        writer.WritePropertyName("goal");
        writer.WriteStartArray();

        foreach (Reference valGoal in Goal)
        {
          valGoal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Condition != null) && (Condition.Count != 0))
      {
        writer.WritePropertyName("condition");
        writer.WriteStartArray();

        foreach (RequestOrchestrationActionCondition valCondition in Condition)
        {
          valCondition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Input != null) && (Input.Count != 0))
      {
        writer.WritePropertyName("input");
        writer.WriteStartArray();

        foreach (RequestOrchestrationActionInput valInput in Input)
        {
          valInput.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Output != null) && (Output.Count != 0))
      {
        writer.WritePropertyName("output");
        writer.WriteStartArray();

        foreach (RequestOrchestrationActionOutput valOutput in Output)
        {
          valOutput.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelatedAction != null) && (RelatedAction.Count != 0))
      {
        writer.WritePropertyName("relatedAction");
        writer.WriteStartArray();

        foreach (RequestOrchestrationActionRelatedAction valRelatedAction in RelatedAction)
        {
          valRelatedAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(TimingDateTime))
      {
        writer.WriteString("timingDateTime", (string)TimingDateTime!);
      }

      if (_TimingDateTime != null)
      {
        writer.WritePropertyName("_timingDateTime");
        _TimingDateTime.SerializeJson(writer, options);
      }

      if (TimingAge != null)
      {
        writer.WritePropertyName("timingAge");
        TimingAge.SerializeJson(writer, options);
      }

      if (TimingPeriod != null)
      {
        writer.WritePropertyName("timingPeriod");
        TimingPeriod.SerializeJson(writer, options);
      }

      if (TimingDuration != null)
      {
        writer.WritePropertyName("timingDuration");
        TimingDuration.SerializeJson(writer, options);
      }

      if (TimingRange != null)
      {
        writer.WritePropertyName("timingRange");
        TimingRange.SerializeJson(writer, options);
      }

      if (TimingTiming != null)
      {
        writer.WritePropertyName("timingTiming");
        TimingTiming.SerializeJson(writer, options);
      }

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if ((Participant != null) && (Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();

        foreach (RequestOrchestrationActionParticipant valParticipant in Participant)
        {
          valParticipant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(GroupingBehavior))
      {
        writer.WriteString("groupingBehavior", (string)GroupingBehavior!);
      }

      if (_GroupingBehavior != null)
      {
        writer.WritePropertyName("_groupingBehavior");
        _GroupingBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SelectionBehavior))
      {
        writer.WriteString("selectionBehavior", (string)SelectionBehavior!);
      }

      if (_SelectionBehavior != null)
      {
        writer.WritePropertyName("_selectionBehavior");
        _SelectionBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RequiredBehavior))
      {
        writer.WriteString("requiredBehavior", (string)RequiredBehavior!);
      }

      if (_RequiredBehavior != null)
      {
        writer.WritePropertyName("_requiredBehavior");
        _RequiredBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PrecheckBehavior))
      {
        writer.WriteString("precheckBehavior", (string)PrecheckBehavior!);
      }

      if (_PrecheckBehavior != null)
      {
        writer.WritePropertyName("_precheckBehavior");
        _PrecheckBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CardinalityBehavior))
      {
        writer.WriteString("cardinalityBehavior", (string)CardinalityBehavior!);
      }

      if (_CardinalityBehavior != null)
      {
        writer.WritePropertyName("_cardinalityBehavior");
        _CardinalityBehavior.SerializeJson(writer, options);
      }

      if (Resource != null)
      {
        writer.WritePropertyName("resource");
        Resource.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DefinitionCanonical))
      {
        writer.WriteString("definitionCanonical", (string)DefinitionCanonical!);
      }

      if (_DefinitionCanonical != null)
      {
        writer.WritePropertyName("_definitionCanonical");
        _DefinitionCanonical.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DefinitionUri))
      {
        writer.WriteString("definitionUri", (string)DefinitionUri!);
      }

      if (_DefinitionUri != null)
      {
        writer.WritePropertyName("_definitionUri");
        _DefinitionUri.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Transform))
      {
        writer.WriteString("transform", (string)Transform!);
      }

      if (_Transform != null)
      {
        writer.WritePropertyName("_transform");
        _Transform.SerializeJson(writer, options);
      }

      if ((DynamicValue != null) && (DynamicValue.Count != 0))
      {
        writer.WritePropertyName("dynamicValue");
        writer.WriteStartArray();

        foreach (RequestOrchestrationActionDynamicValue valDynamicValue in DynamicValue)
        {
          valDynamicValue.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (RequestOrchestrationAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<RequestOrchestrationAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RequestOrchestrationAction objAction = new fhirCsR5.Models.RequestOrchestrationAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "cardinalityBehavior":
          CardinalityBehavior = reader.GetString();
          break;

        case "_cardinalityBehavior":
          _CardinalityBehavior = new fhirCsR5.Models.Element();
          _CardinalityBehavior.DeserializeJson(ref reader, options);
          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objCode = new fhirCsR5.Models.CodeableConcept();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "condition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Condition = new List<RequestOrchestrationActionCondition>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RequestOrchestrationActionCondition objCondition = new fhirCsR5.Models.RequestOrchestrationActionCondition();
            objCondition.DeserializeJson(ref reader, options);
            Condition.Add(objCondition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Condition.Count == 0)
          {
            Condition = null;
          }

          break;

        case "definitionCanonical":
          DefinitionCanonical = reader.GetString();
          break;

        case "_definitionCanonical":
          _DefinitionCanonical = new fhirCsR5.Models.Element();
          _DefinitionCanonical.DeserializeJson(ref reader, options);
          break;

        case "definitionUri":
          DefinitionUri = reader.GetString();
          break;

        case "_definitionUri":
          _DefinitionUri = new fhirCsR5.Models.Element();
          _DefinitionUri.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Documentation = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RelatedArtifact objDocumentation = new fhirCsR5.Models.RelatedArtifact();
            objDocumentation.DeserializeJson(ref reader, options);
            Documentation.Add(objDocumentation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Documentation.Count == 0)
          {
            Documentation = null;
          }

          break;

        case "dynamicValue":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DynamicValue = new List<RequestOrchestrationActionDynamicValue>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RequestOrchestrationActionDynamicValue objDynamicValue = new fhirCsR5.Models.RequestOrchestrationActionDynamicValue();
            objDynamicValue.DeserializeJson(ref reader, options);
            DynamicValue.Add(objDynamicValue);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DynamicValue.Count == 0)
          {
            DynamicValue = null;
          }

          break;

        case "goal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Goal = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objGoal = new fhirCsR5.Models.Reference();
            objGoal.DeserializeJson(ref reader, options);
            Goal.Add(objGoal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Goal.Count == 0)
          {
            Goal = null;
          }

          break;

        case "groupingBehavior":
          GroupingBehavior = reader.GetString();
          break;

        case "_groupingBehavior":
          _GroupingBehavior = new fhirCsR5.Models.Element();
          _GroupingBehavior.DeserializeJson(ref reader, options);
          break;

        case "input":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Input = new List<RequestOrchestrationActionInput>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RequestOrchestrationActionInput objInput = new fhirCsR5.Models.RequestOrchestrationActionInput();
            objInput.DeserializeJson(ref reader, options);
            Input.Add(objInput);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Input.Count == 0)
          {
            Input = null;
          }

          break;

        case "linkId":
          LinkId = reader.GetString();
          break;

        case "_linkId":
          _LinkId = new fhirCsR5.Models.Element();
          _LinkId.DeserializeJson(ref reader, options);
          break;

        case "location":
          Location = new fhirCsR5.Models.CodeableReference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "output":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Output = new List<RequestOrchestrationActionOutput>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RequestOrchestrationActionOutput objOutput = new fhirCsR5.Models.RequestOrchestrationActionOutput();
            objOutput.DeserializeJson(ref reader, options);
            Output.Add(objOutput);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Output.Count == 0)
          {
            Output = null;
          }

          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Participant = new List<RequestOrchestrationActionParticipant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RequestOrchestrationActionParticipant objParticipant = new fhirCsR5.Models.RequestOrchestrationActionParticipant();
            objParticipant.DeserializeJson(ref reader, options);
            Participant.Add(objParticipant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Participant.Count == 0)
          {
            Participant = null;
          }

          break;

        case "precheckBehavior":
          PrecheckBehavior = reader.GetString();
          break;

        case "_precheckBehavior":
          _PrecheckBehavior = new fhirCsR5.Models.Element();
          _PrecheckBehavior.DeserializeJson(ref reader, options);
          break;

        case "prefix":
          Prefix = reader.GetString();
          break;

        case "_prefix":
          _Prefix = new fhirCsR5.Models.Element();
          _Prefix.DeserializeJson(ref reader, options);
          break;

        case "priority":
          Priority = reader.GetString();
          break;

        case "_priority":
          _Priority = new fhirCsR5.Models.Element();
          _Priority.DeserializeJson(ref reader, options);
          break;

        case "relatedAction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedAction = new List<RequestOrchestrationActionRelatedAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RequestOrchestrationActionRelatedAction objRelatedAction = new fhirCsR5.Models.RequestOrchestrationActionRelatedAction();
            objRelatedAction.DeserializeJson(ref reader, options);
            RelatedAction.Add(objRelatedAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedAction.Count == 0)
          {
            RelatedAction = null;
          }

          break;

        case "requiredBehavior":
          RequiredBehavior = reader.GetString();
          break;

        case "_requiredBehavior":
          _RequiredBehavior = new fhirCsR5.Models.Element();
          _RequiredBehavior.DeserializeJson(ref reader, options);
          break;

        case "resource":
          Resource = new fhirCsR5.Models.Reference();
          Resource.DeserializeJson(ref reader, options);
          break;

        case "selectionBehavior":
          SelectionBehavior = reader.GetString();
          break;

        case "_selectionBehavior":
          _SelectionBehavior = new fhirCsR5.Models.Element();
          _SelectionBehavior.DeserializeJson(ref reader, options);
          break;

        case "textEquivalent":
          TextEquivalent = reader.GetString();
          break;

        case "_textEquivalent":
          _TextEquivalent = new fhirCsR5.Models.Element();
          _TextEquivalent.DeserializeJson(ref reader, options);
          break;

        case "timingDateTime":
          TimingDateTime = reader.GetString();
          break;

        case "_timingDateTime":
          _TimingDateTime = new fhirCsR5.Models.Element();
          _TimingDateTime.DeserializeJson(ref reader, options);
          break;

        case "timingAge":
          TimingAge = new fhirCsR5.Models.Age();
          TimingAge.DeserializeJson(ref reader, options);
          break;

        case "timingPeriod":
          TimingPeriod = new fhirCsR5.Models.Period();
          TimingPeriod.DeserializeJson(ref reader, options);
          break;

        case "timingDuration":
          TimingDuration = new fhirCsR5.Models.Duration();
          TimingDuration.DeserializeJson(ref reader, options);
          break;

        case "timingRange":
          TimingRange = new fhirCsR5.Models.Range();
          TimingRange.DeserializeJson(ref reader, options);
          break;

        case "timingTiming":
          TimingTiming = new fhirCsR5.Models.Timing();
          TimingTiming.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "transform":
          Transform = reader.GetString();
          break;

        case "_transform":
          _Transform = new fhirCsR5.Models.Element();
          _Transform.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the RequestOrchestration.action.cardinalityBehavior field
  /// </summary>
  public static class RequestOrchestrationActionCardinalityBehaviorCodes {
    public const string SINGLE = "single";
    public const string MULTIPLE = "multiple";
    public static HashSet<string> Values = new HashSet<string>() {
      "single",
      "multiple",
    };
  }
  /// <summary>
  /// Code Values for the RequestOrchestration.action.groupingBehavior field
  /// </summary>
  public static class RequestOrchestrationActionGroupingBehaviorCodes {
    public const string VISUAL_GROUP = "visual-group";
    public const string LOGICAL_GROUP = "logical-group";
    public const string SENTENCE_GROUP = "sentence-group";
    public static HashSet<string> Values = new HashSet<string>() {
      "visual-group",
      "logical-group",
      "sentence-group",
    };
  }
  /// <summary>
  /// Code Values for the RequestOrchestration.action.precheckBehavior field
  /// </summary>
  public static class RequestOrchestrationActionPrecheckBehaviorCodes {
    public const string YES = "yes";
    public const string NO = "no";
    public static HashSet<string> Values = new HashSet<string>() {
      "yes",
      "no",
    };
  }
  /// <summary>
  /// Code Values for the RequestOrchestration.action.priority field
  /// </summary>
  public static class RequestOrchestrationActionPriorityCodes {
    public const string ROUTINE = "routine";
    public const string URGENT = "urgent";
    public const string ASAP = "asap";
    public const string STAT = "stat";
    public static HashSet<string> Values = new HashSet<string>() {
      "routine",
      "urgent",
      "asap",
      "stat",
    };
  }
  /// <summary>
  /// Code Values for the RequestOrchestration.action.requiredBehavior field
  /// </summary>
  public static class RequestOrchestrationActionRequiredBehaviorCodes {
    public const string MUST = "must";
    public const string COULD = "could";
    public const string MUST_UNLESS_DOCUMENTED = "must-unless-documented";
    public static HashSet<string> Values = new HashSet<string>() {
      "must",
      "could",
      "must-unless-documented",
    };
  }
  /// <summary>
  /// Code Values for the RequestOrchestration.action.selectionBehavior field
  /// </summary>
  public static class RequestOrchestrationActionSelectionBehaviorCodes {
    public const string ANY = "any";
    public const string ALL = "all";
    public const string ALL_OR_NONE = "all-or-none";
    public const string EXACTLY_ONE = "exactly-one";
    public const string AT_MOST_ONE = "at-most-one";
    public const string ONE_OR_MORE = "one-or-more";
    public static HashSet<string> Values = new HashSet<string>() {
      "any",
      "all",
      "all-or-none",
      "exactly-one",
      "at-most-one",
      "one-or-more",
    };
  }
  /// <summary>
  /// A set of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<RequestOrchestration>))]
  public class RequestOrchestration : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "RequestOrchestration";
    /// <summary>
    /// The actions, if any, produced by the evaluation of the artifact.
    /// </summary>
    public List<RequestOrchestrationAction> Action { get; set; }
    /// <summary>
    /// Provides a reference to the author of the request orchestration.
    /// </summary>
    public Reference Author { get; set; }
    /// <summary>
    /// Indicates when the request orchestration was created.
    /// </summary>
    public string AuthoredOn { get; set; }
    /// <summary>
    /// Extension container element for AuthoredOn
    /// </summary>
    public Element _AuthoredOn { get; set; }
    /// <summary>
    /// A plan, proposal or order that is fulfilled in whole or in part by this request.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// This element can be used to provide a code that captures the meaning of the request orchestration as a whole, as opposed to the code of the action element, which captures the meaning of the individual actions within the request orchestration.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Describes the context of the request orchestration, if any.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// Goals that are intended to be achieved by following the requests in this RequestOrchestration.
    /// </summary>
    public List<Reference> Goal { get; set; }
    /// <summary>
    /// Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition.  Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
    /// </summary>
    public Identifier GroupIdentifier { get; set; }
    /// <summary>
    /// Allows a service to provide a unique, business identifier for the request.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// A canonical URL referencing a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
    /// </summary>
    public List<string> InstantiatesCanonical { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesCanonical
    /// </summary>
    public List<Element> _InstantiatesCanonical { get; set; }
    /// <summary>
    /// A URL referencing an externally defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
    /// </summary>
    public List<string> InstantiatesUri { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesUri
    /// </summary>
    public List<Element> _InstantiatesUri { get; set; }
    /// <summary>
    /// Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain.
    /// </summary>
    public string Intent { get; set; }
    /// <summary>
    /// Extension container element for Intent
    /// </summary>
    public Element _Intent { get; set; }
    /// <summary>
    /// Provides a mechanism to communicate additional information about the response.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Indicates how quickly the request should be addressed with respect to other requests.
    /// </summary>
    public string Priority { get; set; }
    /// <summary>
    /// Extension container element for Priority
    /// </summary>
    public Element _Priority { get; set; }
    /// <summary>
    /// Describes the reason for the request orchestration in coded or textual form.
    /// </summary>
    public List<CodeableReference> Reason { get; set; }
    /// <summary>
    /// The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
    /// </summary>
    public List<Reference> Replaces { get; set; }
    /// <summary>
    /// The current state of the request. For request orchestrations, the status reflects the status of all the requests in the orchestration.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The subject for which the request orchestration was created.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((InstantiatesCanonical != null) && (InstantiatesCanonical.Count != 0))
      {
        writer.WritePropertyName("instantiatesCanonical");
        writer.WriteStartArray();

        foreach (string valInstantiatesCanonical in InstantiatesCanonical)
        {
          writer.WriteStringValue(valInstantiatesCanonical);
        }

        writer.WriteEndArray();
      }

      if ((_InstantiatesCanonical != null) && (_InstantiatesCanonical.Count != 0))
      {
        writer.WritePropertyName("_instantiatesCanonical");
        writer.WriteStartArray();

        foreach (Element val_InstantiatesCanonical in _InstantiatesCanonical)
        {
          val_InstantiatesCanonical.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((InstantiatesUri != null) && (InstantiatesUri.Count != 0))
      {
        writer.WritePropertyName("instantiatesUri");
        writer.WriteStartArray();

        foreach (string valInstantiatesUri in InstantiatesUri)
        {
          writer.WriteStringValue(valInstantiatesUri);
        }

        writer.WriteEndArray();
      }

      if ((_InstantiatesUri != null) && (_InstantiatesUri.Count != 0))
      {
        writer.WritePropertyName("_instantiatesUri");
        writer.WriteStartArray();

        foreach (Element val_InstantiatesUri in _InstantiatesUri)
        {
          val_InstantiatesUri.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Replaces != null) && (Replaces.Count != 0))
      {
        writer.WritePropertyName("replaces");
        writer.WriteStartArray();

        foreach (Reference valReplaces in Replaces)
        {
          valReplaces.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (GroupIdentifier != null)
      {
        writer.WritePropertyName("groupIdentifier");
        GroupIdentifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Intent))
      {
        writer.WriteString("intent", (string)Intent!);
      }

      if (_Intent != null)
      {
        writer.WritePropertyName("_intent");
        _Intent.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Priority))
      {
        writer.WriteString("priority", (string)Priority!);
      }

      if (_Priority != null)
      {
        writer.WritePropertyName("_priority");
        _Priority.SerializeJson(writer, options);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AuthoredOn))
      {
        writer.WriteString("authoredOn", (string)AuthoredOn!);
      }

      if (_AuthoredOn != null)
      {
        writer.WritePropertyName("_authoredOn");
        _AuthoredOn.SerializeJson(writer, options);
      }

      if (Author != null)
      {
        writer.WritePropertyName("author");
        Author.SerializeJson(writer, options);
      }

      if ((Reason != null) && (Reason.Count != 0))
      {
        writer.WritePropertyName("reason");
        writer.WriteStartArray();

        foreach (CodeableReference valReason in Reason)
        {
          valReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Goal != null) && (Goal.Count != 0))
      {
        writer.WritePropertyName("goal");
        writer.WriteStartArray();

        foreach (Reference valGoal in Goal)
        {
          valGoal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (RequestOrchestrationAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<RequestOrchestrationAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RequestOrchestrationAction objAction = new fhirCsR5.Models.RequestOrchestrationAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "author":
          Author = new fhirCsR5.Models.Reference();
          Author.DeserializeJson(ref reader, options);
          break;

        case "authoredOn":
          AuthoredOn = reader.GetString();
          break;

        case "_authoredOn":
          _AuthoredOn = new fhirCsR5.Models.Element();
          _AuthoredOn.DeserializeJson(ref reader, options);
          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objBasedOn = new fhirCsR5.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "code":
          Code = new fhirCsR5.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new fhirCsR5.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "goal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Goal = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objGoal = new fhirCsR5.Models.Reference();
            objGoal.DeserializeJson(ref reader, options);
            Goal.Add(objGoal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Goal.Count == 0)
          {
            Goal = null;
          }

          break;

        case "groupIdentifier":
          GroupIdentifier = new fhirCsR5.Models.Identifier();
          GroupIdentifier.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "instantiatesCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InstantiatesCanonical = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            InstantiatesCanonical.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InstantiatesCanonical.Count == 0)
          {
            InstantiatesCanonical = null;
          }

          break;

        case "_instantiatesCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _InstantiatesCanonical = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_InstantiatesCanonical = new fhirCsR5.Models.Element();
            obj_InstantiatesCanonical.DeserializeJson(ref reader, options);
            _InstantiatesCanonical.Add(obj_InstantiatesCanonical);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_InstantiatesCanonical.Count == 0)
          {
            _InstantiatesCanonical = null;
          }

          break;

        case "instantiatesUri":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InstantiatesUri = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            InstantiatesUri.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InstantiatesUri.Count == 0)
          {
            InstantiatesUri = null;
          }

          break;

        case "_instantiatesUri":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _InstantiatesUri = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_InstantiatesUri = new fhirCsR5.Models.Element();
            obj_InstantiatesUri.DeserializeJson(ref reader, options);
            _InstantiatesUri.Add(obj_InstantiatesUri);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_InstantiatesUri.Count == 0)
          {
            _InstantiatesUri = null;
          }

          break;

        case "intent":
          Intent = reader.GetString();
          break;

        case "_intent":
          _Intent = new fhirCsR5.Models.Element();
          _Intent.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Annotation objNote = new fhirCsR5.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "priority":
          Priority = reader.GetString();
          break;

        case "_priority":
          _Priority = new fhirCsR5.Models.Element();
          _Priority.DeserializeJson(ref reader, options);
          break;

        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reason = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objReason = new fhirCsR5.Models.CodeableReference();
            objReason.DeserializeJson(ref reader, options);
            Reason.Add(objReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reason.Count == 0)
          {
            Reason = null;
          }

          break;

        case "replaces":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Replaces = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objReplaces = new fhirCsR5.Models.Reference();
            objReplaces.DeserializeJson(ref reader, options);
            Replaces.Add(objReplaces);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Replaces.Count == 0)
          {
            Replaces = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR5.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the RequestOrchestration.intent field
  /// </summary>
  public static class RequestOrchestrationIntentCodes {
    public const string PROPOSAL = "proposal";
    public const string PLAN = "plan";
    public const string DIRECTIVE = "directive";
    public const string ORDER = "order";
    public const string ORIGINAL_ORDER = "original-order";
    public const string REFLEX_ORDER = "reflex-order";
    public const string FILLER_ORDER = "filler-order";
    public const string INSTANCE_ORDER = "instance-order";
    public const string OPTION = "option";
    public static HashSet<string> Values = new HashSet<string>() {
      "proposal",
      "plan",
      "directive",
      "order",
      "original-order",
      "reflex-order",
      "filler-order",
      "instance-order",
      "option",
    };
  }
  /// <summary>
  /// Code Values for the RequestOrchestration.priority field
  /// </summary>
  public static class RequestOrchestrationPriorityCodes {
    public const string ROUTINE = "routine";
    public const string URGENT = "urgent";
    public const string ASAP = "asap";
    public const string STAT = "stat";
    public static HashSet<string> Values = new HashSet<string>() {
      "routine",
      "urgent",
      "asap",
      "stat",
    };
  }
  /// <summary>
  /// Code Values for the RequestOrchestration.status field
  /// </summary>
  public static class RequestOrchestrationStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string ON_HOLD = "on-hold";
    public const string REVOKED = "revoked";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "on-hold",
      "revoked",
      "completed",
      "entered-in-error",
      "unknown",
    };
  }
}
