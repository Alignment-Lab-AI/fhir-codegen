// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// A sequence that is used as a starting sequence to describe variants that are present in a sequence analyzed.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MolecularSequenceRelativeStartingSequence>))]
  public class MolecularSequenceRelativeStartingSequence : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
    /// </summary>
    public CodeableConcept Chromosome { get; set; }
    /// <summary>
    /// The genome assembly used for starting sequence, e.g. GRCh38.
    /// </summary>
    public CodeableConcept GenomeAssembly { get; set; }
    /// <summary>
    /// A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the "sense" strand, and the opposite complementary strand is the "antisense" strand.
    /// </summary>
    public string Orientation { get; set; }
    /// <summary>
    /// Extension container element for Orientation
    /// </summary>
    public Element _Orientation { get; set; }
    /// <summary>
    /// A starting sequence may be represented in one of three ways:
    ///   1.  CodeableConcept, using NCBI, LRG or other appropriate code systems
    ///   1.  a simple string of IUPAC codes
    ///   1.  a reference to another MolecularSequence resource.
    /// </summary>
    public CodeableConcept SequenceCodeableConcept { get; set; }
    /// <summary>
    /// A starting sequence may be represented in one of three ways:
    ///   1.  CodeableConcept, using NCBI, LRG or other appropriate code systems
    ///   1.  a simple string of IUPAC codes
    ///   1.  a reference to another MolecularSequence resource.
    /// </summary>
    public string SequenceString { get; set; }
    /// <summary>
    /// Extension container element for SequenceString
    /// </summary>
    public Element _SequenceString { get; set; }
    /// <summary>
    /// A starting sequence may be represented in one of three ways:
    ///   1.  CodeableConcept, using NCBI, LRG or other appropriate code systems
    ///   1.  a simple string of IUPAC codes
    ///   1.  a reference to another MolecularSequence resource.
    /// </summary>
    public Reference SequenceReference { get; set; }
    /// <summary>
    /// An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long arm.
    /// </summary>
    public string Strand { get; set; }
    /// <summary>
    /// Extension container element for Strand
    /// </summary>
    public Element _Strand { get; set; }
    /// <summary>
    /// End position of the window on the starting sequence. This value should honor the rules of the  coordinateSystem.
    /// </summary>
    public int? WindowEnd { get; set; }
    /// <summary>
    /// Extension container element for WindowEnd
    /// </summary>
    public Element _WindowEnd { get; set; }
    /// <summary>
    /// Start position of the window on the starting sequence. This value should honor the rules of the coordinateSystem.
    /// </summary>
    public int? WindowStart { get; set; }
    /// <summary>
    /// Extension container element for WindowStart
    /// </summary>
    public Element _WindowStart { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (GenomeAssembly != null)
      {
        writer.WritePropertyName("genomeAssembly");
        GenomeAssembly.SerializeJson(writer, options);
      }

      if (Chromosome != null)
      {
        writer.WritePropertyName("chromosome");
        Chromosome.SerializeJson(writer, options);
      }

      if (SequenceCodeableConcept != null)
      {
        writer.WritePropertyName("sequenceCodeableConcept");
        SequenceCodeableConcept.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SequenceString))
      {
        writer.WriteString("sequenceString", (string)SequenceString!);
      }

      if (_SequenceString != null)
      {
        writer.WritePropertyName("_sequenceString");
        _SequenceString.SerializeJson(writer, options);
      }

      if (SequenceReference != null)
      {
        writer.WritePropertyName("sequenceReference");
        SequenceReference.SerializeJson(writer, options);
      }

      if (WindowStart != null)
      {
        writer.WriteNumber("windowStart", (int)WindowStart!);
      }

      if (_WindowStart != null)
      {
        writer.WritePropertyName("_windowStart");
        _WindowStart.SerializeJson(writer, options);
      }

      if (WindowEnd != null)
      {
        writer.WriteNumber("windowEnd", (int)WindowEnd!);
      }

      if (_WindowEnd != null)
      {
        writer.WritePropertyName("_windowEnd");
        _WindowEnd.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Orientation))
      {
        writer.WriteString("orientation", (string)Orientation!);
      }

      if (_Orientation != null)
      {
        writer.WritePropertyName("_orientation");
        _Orientation.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Strand))
      {
        writer.WriteString("strand", (string)Strand!);
      }

      if (_Strand != null)
      {
        writer.WritePropertyName("_strand");
        _Strand.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "chromosome":
          Chromosome = new fhirCsR5.Models.CodeableConcept();
          Chromosome.DeserializeJson(ref reader, options);
          break;

        case "genomeAssembly":
          GenomeAssembly = new fhirCsR5.Models.CodeableConcept();
          GenomeAssembly.DeserializeJson(ref reader, options);
          break;

        case "orientation":
          Orientation = reader.GetString();
          break;

        case "_orientation":
          _Orientation = new fhirCsR5.Models.Element();
          _Orientation.DeserializeJson(ref reader, options);
          break;

        case "sequenceCodeableConcept":
          SequenceCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          SequenceCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "sequenceString":
          SequenceString = reader.GetString();
          break;

        case "_sequenceString":
          _SequenceString = new fhirCsR5.Models.Element();
          _SequenceString.DeserializeJson(ref reader, options);
          break;

        case "sequenceReference":
          SequenceReference = new fhirCsR5.Models.Reference();
          SequenceReference.DeserializeJson(ref reader, options);
          break;

        case "strand":
          Strand = reader.GetString();
          break;

        case "_strand":
          _Strand = new fhirCsR5.Models.Element();
          _Strand.DeserializeJson(ref reader, options);
          break;

        case "windowEnd":
          WindowEnd = reader.GetInt32();
          break;

        case "_windowEnd":
          _WindowEnd = new fhirCsR5.Models.Element();
          _WindowEnd.DeserializeJson(ref reader, options);
          break;

        case "windowStart":
          WindowStart = reader.GetInt32();
          break;

        case "_windowStart":
          _WindowStart = new fhirCsR5.Models.Element();
          _WindowStart.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MolecularSequence.relative.startingSequence.orientation field
  /// </summary>
  public static class MolecularSequenceRelativeStartingSequenceOrientationCodes {
    public const string SENSE = "sense";
    public const string ANTISENSE = "antisense";
    public static HashSet<string> Values = new HashSet<string>() {
      "sense",
      "antisense",
    };
  }
  /// <summary>
  /// Code Values for the MolecularSequence.relative.startingSequence.strand field
  /// </summary>
  public static class MolecularSequenceRelativeStartingSequenceStrandCodes {
    public const string WATSON = "watson";
    public const string CRICK = "crick";
    public static HashSet<string> Values = new HashSet<string>() {
      "watson",
      "crick",
    };
  }
  /// <summary>
  /// Changes in sequence from the starting sequence.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MolecularSequenceRelativeEdit>))]
  public class MolecularSequenceRelativeEdit : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// End position of the edit on the starting sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
    /// </summary>
    public int? End { get; set; }
    /// <summary>
    /// Extension container element for End
    /// </summary>
    public Element _End { get; set; }
    /// <summary>
    /// Allele in the starting sequence. Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the starting sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
    /// </summary>
    public string ReplacedSequence { get; set; }
    /// <summary>
    /// Extension container element for ReplacedSequence
    /// </summary>
    public Element _ReplacedSequence { get; set; }
    /// <summary>
    /// Allele that was observed. Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed sequence. When the sequence type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
    /// </summary>
    public string ReplacementSequence { get; set; }
    /// <summary>
    /// Extension container element for ReplacementSequence
    /// </summary>
    public Element _ReplacementSequence { get; set; }
    /// <summary>
    /// Start position of the edit on the starting sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
    /// </summary>
    public int? Start { get; set; }
    /// <summary>
    /// Extension container element for Start
    /// </summary>
    public Element _Start { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Start != null)
      {
        writer.WriteNumber("start", (int)Start!);
      }

      if (_Start != null)
      {
        writer.WritePropertyName("_start");
        _Start.SerializeJson(writer, options);
      }

      if (End != null)
      {
        writer.WriteNumber("end", (int)End!);
      }

      if (_End != null)
      {
        writer.WritePropertyName("_end");
        _End.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ReplacementSequence))
      {
        writer.WriteString("replacementSequence", (string)ReplacementSequence!);
      }

      if (_ReplacementSequence != null)
      {
        writer.WritePropertyName("_replacementSequence");
        _ReplacementSequence.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ReplacedSequence))
      {
        writer.WriteString("replacedSequence", (string)ReplacedSequence!);
      }

      if (_ReplacedSequence != null)
      {
        writer.WritePropertyName("_replacedSequence");
        _ReplacedSequence.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "end":
          End = reader.GetInt32();
          break;

        case "_end":
          _End = new fhirCsR5.Models.Element();
          _End.DeserializeJson(ref reader, options);
          break;

        case "replacedSequence":
          ReplacedSequence = reader.GetString();
          break;

        case "_replacedSequence":
          _ReplacedSequence = new fhirCsR5.Models.Element();
          _ReplacedSequence.DeserializeJson(ref reader, options);
          break;

        case "replacementSequence":
          ReplacementSequence = reader.GetString();
          break;

        case "_replacementSequence":
          _ReplacementSequence = new fhirCsR5.Models.Element();
          _ReplacementSequence.DeserializeJson(ref reader, options);
          break;

        case "start":
          Start = reader.GetInt32();
          break;

        case "_start":
          _Start = new fhirCsR5.Models.Element();
          _Start.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A sequence defined relative to another sequence.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MolecularSequenceRelative>))]
  public class MolecularSequenceRelative : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// These are different ways of identifying nucleotides or amino acids within a sequence. Different databases and file types may use different systems. For detail definitions, see https://loinc.org/92822-6/ for more detail.
    /// </summary>
    public CodeableConcept CoordinateSystem { get; set; }
    /// <summary>
    /// Changes in sequence from the starting sequence.
    /// </summary>
    public List<MolecularSequenceRelativeEdit> Edit { get; set; }
    /// <summary>
    /// Indicates the order in which the sequence should be considered when putting multiple 'relative' elements together.
    /// </summary>
    public int? OrdinalPosition { get; set; }
    /// <summary>
    /// Extension container element for OrdinalPosition
    /// </summary>
    public Element _OrdinalPosition { get; set; }
    /// <summary>
    /// Indicates the nucleotide range in the composed sequence when multiple 'relative' elements are used together.
    /// </summary>
    public Range SequenceRange { get; set; }
    /// <summary>
    /// A sequence that is used as a starting sequence to describe variants that are present in a sequence analyzed.
    /// </summary>
    public MolecularSequenceRelativeStartingSequence StartingSequence { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (CoordinateSystem != null)
      {
        writer.WritePropertyName("coordinateSystem");
        CoordinateSystem.SerializeJson(writer, options);
      }

      if (OrdinalPosition != null)
      {
        writer.WriteNumber("ordinalPosition", (int)OrdinalPosition!);
      }

      if (_OrdinalPosition != null)
      {
        writer.WritePropertyName("_ordinalPosition");
        _OrdinalPosition.SerializeJson(writer, options);
      }

      if (SequenceRange != null)
      {
        writer.WritePropertyName("sequenceRange");
        SequenceRange.SerializeJson(writer, options);
      }

      if (StartingSequence != null)
      {
        writer.WritePropertyName("startingSequence");
        StartingSequence.SerializeJson(writer, options);
      }

      if ((Edit != null) && (Edit.Count != 0))
      {
        writer.WritePropertyName("edit");
        writer.WriteStartArray();

        foreach (MolecularSequenceRelativeEdit valEdit in Edit)
        {
          valEdit.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "coordinateSystem":
          CoordinateSystem = new fhirCsR5.Models.CodeableConcept();
          CoordinateSystem.DeserializeJson(ref reader, options);
          break;

        case "edit":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Edit = new List<MolecularSequenceRelativeEdit>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MolecularSequenceRelativeEdit objEdit = new fhirCsR5.Models.MolecularSequenceRelativeEdit();
            objEdit.DeserializeJson(ref reader, options);
            Edit.Add(objEdit);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Edit.Count == 0)
          {
            Edit = null;
          }

          break;

        case "ordinalPosition":
          OrdinalPosition = reader.GetInt32();
          break;

        case "_ordinalPosition":
          _OrdinalPosition = new fhirCsR5.Models.Element();
          _OrdinalPosition.DeserializeJson(ref reader, options);
          break;

        case "sequenceRange":
          SequenceRange = new fhirCsR5.Models.Range();
          SequenceRange.DeserializeJson(ref reader, options);
          break;

        case "startingSequence":
          StartingSequence = new fhirCsR5.Models.MolecularSequenceRelativeStartingSequence();
          StartingSequence.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Representation of a molecular sequence.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<MolecularSequence>))]
  public class MolecularSequence : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "MolecularSequence";
    /// <summary>
    /// The method for sequencing, for example, chip information.
    /// </summary>
    public Reference Device { get; set; }
    /// <summary>
    /// Sequence that was observed as file content. Can be an actual file contents, or referenced by a URL to an external system.
    /// </summary>
    public List<Attachment> Formatted { get; set; }
    /// <summary>
    /// A unique identifier for this particular sequence instance.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Sequence that was observed.
    /// </summary>
    public string Literal { get; set; }
    /// <summary>
    /// Extension container element for Literal
    /// </summary>
    public Element _Literal { get; set; }
    /// <summary>
    /// The organization or lab that should be responsible for this result.
    /// </summary>
    public Reference Performer { get; set; }
    /// <summary>
    /// A sequence defined relative to another sequence.
    /// </summary>
    public List<MolecularSequenceRelative> Relative { get; set; }
    /// <summary>
    /// Specimen used for sequencing.
    /// </summary>
    public Reference Specimen { get; set; }
    /// <summary>
    /// Indicates the subject this sequence is associated too.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Amino Acid Sequence/ DNA Sequence / RNA Sequence.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (Specimen != null)
      {
        writer.WritePropertyName("specimen");
        Specimen.SerializeJson(writer, options);
      }

      if (Device != null)
      {
        writer.WritePropertyName("device");
        Device.SerializeJson(writer, options);
      }

      if (Performer != null)
      {
        writer.WritePropertyName("performer");
        Performer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Literal))
      {
        writer.WriteString("literal", (string)Literal!);
      }

      if (_Literal != null)
      {
        writer.WritePropertyName("_literal");
        _Literal.SerializeJson(writer, options);
      }

      if ((Formatted != null) && (Formatted.Count != 0))
      {
        writer.WritePropertyName("formatted");
        writer.WriteStartArray();

        foreach (Attachment valFormatted in Formatted)
        {
          valFormatted.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Relative != null) && (Relative.Count != 0))
      {
        writer.WritePropertyName("relative");
        writer.WriteStartArray();

        foreach (MolecularSequenceRelative valRelative in Relative)
        {
          valRelative.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "device":
          Device = new fhirCsR5.Models.Reference();
          Device.DeserializeJson(ref reader, options);
          break;

        case "formatted":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Formatted = new List<Attachment>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Attachment objFormatted = new fhirCsR5.Models.Attachment();
            objFormatted.DeserializeJson(ref reader, options);
            Formatted.Add(objFormatted);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Formatted.Count == 0)
          {
            Formatted = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "literal":
          Literal = reader.GetString();
          break;

        case "_literal":
          _Literal = new fhirCsR5.Models.Element();
          _Literal.DeserializeJson(ref reader, options);
          break;

        case "performer":
          Performer = new fhirCsR5.Models.Reference();
          Performer.DeserializeJson(ref reader, options);
          break;

        case "relative":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Relative = new List<MolecularSequenceRelative>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.MolecularSequenceRelative objRelative = new fhirCsR5.Models.MolecularSequenceRelative();
            objRelative.DeserializeJson(ref reader, options);
            Relative.Add(objRelative);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Relative.Count == 0)
          {
            Relative = null;
          }

          break;

        case "specimen":
          Specimen = new fhirCsR5.Models.Reference();
          Specimen.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR5.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MolecularSequence.type field
  /// </summary>
  public static class MolecularSequenceTypeCodes {
    public const string AA = "aa";
    public const string DNA = "dna";
    public const string RNA = "rna";
    public static HashSet<string> Values = new HashSet<string>() {
      "aa",
      "dna",
      "rna",
    };
  }
}
