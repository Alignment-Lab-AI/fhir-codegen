// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// How this product was collected.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<BiologicallyDerivedProductCollection>))]
  public class BiologicallyDerivedProductCollection : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Time of product collection.
    /// </summary>
    public string CollectedDateTime { get; set; }
    /// <summary>
    /// Extension container element for CollectedDateTime
    /// </summary>
    public Element _CollectedDateTime { get; set; }
    /// <summary>
    /// Time of product collection.
    /// </summary>
    public Period CollectedPeriod { get; set; }
    /// <summary>
    /// Healthcare professional who is performing the collection.
    /// </summary>
    public Reference Collector { get; set; }
    /// <summary>
    /// The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.
    /// </summary>
    public Reference Source { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Collector != null)
      {
        writer.WritePropertyName("collector");
        Collector.SerializeJson(writer, options);
      }

      if (Source != null)
      {
        writer.WritePropertyName("source");
        Source.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CollectedDateTime))
      {
        writer.WriteString("collectedDateTime", (string)CollectedDateTime!);
      }

      if (_CollectedDateTime != null)
      {
        writer.WritePropertyName("_collectedDateTime");
        _CollectedDateTime.SerializeJson(writer, options);
      }

      if (CollectedPeriod != null)
      {
        writer.WritePropertyName("collectedPeriod");
        CollectedPeriod.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "collectedDateTime":
          CollectedDateTime = reader.GetString();
          break;

        case "_collectedDateTime":
          _CollectedDateTime = new fhirCsR5.Models.Element();
          _CollectedDateTime.DeserializeJson(ref reader, options);
          break;

        case "collectedPeriod":
          CollectedPeriod = new fhirCsR5.Models.Period();
          CollectedPeriod.DeserializeJson(ref reader, options);
          break;

        case "collector":
          Collector = new fhirCsR5.Models.Reference();
          Collector.DeserializeJson(ref reader, options);
          break;

        case "source":
          Source = new fhirCsR5.Models.Reference();
          Source.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Property can be used to provide information on a wide range of additional information specific to a particular biologicallyDerivedProduct.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<BiologicallyDerivedProductProperty>))]
  public class BiologicallyDerivedProductProperty : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The element is identified by name and system URI in the type. Some types may have multiple occurrences.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// Extension container element for ValueBoolean
    /// </summary>
    public Element _ValueBoolean { get; set; }
    /// <summary>
    /// The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
    /// </summary>
    public int? ValueInteger { get; set; }
    /// <summary>
    /// Extension container element for ValueInteger
    /// </summary>
    public Element _ValueInteger { get; set; }
    /// <summary>
    /// The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
    /// </summary>
    public Period ValuePeriod { get; set; }
    /// <summary>
    /// The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
    /// </summary>
    public Range ValueRange { get; set; }
    /// <summary>
    /// The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
    /// </summary>
    public Ratio ValueRatio { get; set; }
    /// <summary>
    /// The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (_ValueBoolean != null)
      {
        writer.WritePropertyName("_valueBoolean");
        _ValueBoolean.SerializeJson(writer, options);
      }

      if (ValueInteger != null)
      {
        writer.WriteNumber("valueInteger", (int)ValueInteger!);
      }

      if (_ValueInteger != null)
      {
        writer.WritePropertyName("_valueInteger");
        _ValueInteger.SerializeJson(writer, options);
      }

      if (ValueCodeableConcept != null)
      {
        writer.WritePropertyName("valueCodeableConcept");
        ValueCodeableConcept.SerializeJson(writer, options);
      }

      if (ValuePeriod != null)
      {
        writer.WritePropertyName("valuePeriod");
        ValuePeriod.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueRange != null)
      {
        writer.WritePropertyName("valueRange");
        ValueRange.SerializeJson(writer, options);
      }

      if (ValueRatio != null)
      {
        writer.WritePropertyName("valueRatio");
        ValueRatio.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (ValueAttachment != null)
      {
        writer.WritePropertyName("valueAttachment");
        ValueAttachment.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR5.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "_valueBoolean":
          _ValueBoolean = new fhirCsR5.Models.Element();
          _ValueBoolean.DeserializeJson(ref reader, options);
          break;

        case "valueInteger":
          ValueInteger = reader.GetInt32();
          break;

        case "_valueInteger":
          _ValueInteger = new fhirCsR5.Models.Element();
          _ValueInteger.DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valuePeriod":
          ValuePeriod = new fhirCsR5.Models.Period();
          ValuePeriod.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR5.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueRange":
          ValueRange = new fhirCsR5.Models.Range();
          ValueRange.DeserializeJson(ref reader, options);
          break;

        case "valueRatio":
          ValueRatio = new fhirCsR5.Models.Ratio();
          ValueRatio.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR5.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          ValueAttachment = new fhirCsR5.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This resource reflects an instance of a biologically derived product. A material substance originating from a biological entity intended to be transplanted or infused
  /// into another (possibly the same) biological entity.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<BiologicallyDerivedProduct>))]
  public class BiologicallyDerivedProduct : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "BiologicallyDerivedProduct";
    /// <summary>
    /// Necessary to support mandatory requirements for traceability from donor/source to recipient and vice versa, while also satisfying donor anonymity requirements. The element is defined consistently across BiologicallyDerivedProduct, NutritionProduct, and Device.  The identifier references an event that links to a single biological entity such as a blood donor, or to multiple biological entities (e.g. when the product is an embryo or a pooled platelet product).  A single biologicalSourceEvent identifier may appear on multiple products of many types derived from a single donation event or source extraction.  As an example, a single donation event may provide 2 kidneys and a liver for organ transplantation, 2 corneas for eye surgery, heart valves and arterial tissue for cardiovascular surgery, multiple skin grafts, tendons, multiple shaped bone grafts and a large number of bone putty/paste products; and each of them may be assigned to the same biological source event identifier.
    /// </summary>
    public Identifier BiologicalSourceEvent { get; set; }
    /// <summary>
    /// How this product was collected.
    /// </summary>
    public BiologicallyDerivedProductCollection Collection { get; set; }
    /// <summary>
    /// A unique identifier for an aliquot of a product.  Used to distinguish individual aliquots of a product carrying the same biologicalSource and productCode identifiers.
    /// </summary>
    public string Division { get; set; }
    /// <summary>
    /// Extension container element for Division
    /// </summary>
    public Element _Division { get; set; }
    /// <summary>
    /// Date, and where relevant time, of expiration.
    /// </summary>
    public string ExpirationDate { get; set; }
    /// <summary>
    /// Extension container element for ExpirationDate
    /// </summary>
    public Element _ExpirationDate { get; set; }
    /// <summary>
    /// This identifier should uniquely identify the product instance in the business domain.  Ideally it should be a globally unique identifier under the control of an ISO/IEC 15459 Issuing Agency.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// For products that have multiple collections. For example Peripheral Blood Stem Cells may be collected over several days from a single donor and the donation split into in multiple containers which must be linked to the parent donation.
    /// </summary>
    public List<Reference> Parent { get; set; }
    /// <summary>
    /// Processing facilities responsible for the labeling and distribution of this biologically derived product.
    /// </summary>
    public List<Reference> ProcessingFacility { get; set; }
    /// <summary>
    /// Broad category of this product.
    /// </summary>
    public Coding ProductCategory { get; set; }
    /// <summary>
    /// A codified value that systematically supports characterization and classification of medical products of human origin inclusive of processing conditions such as additives, volumes and handling conditions.
    /// </summary>
    public CodeableConcept ProductCode { get; set; }
    /// <summary>
    /// Whether the product is currently available.
    /// </summary>
    public Coding ProductStatus { get; set; }
    /// <summary>
    /// Property can be used to provide information on a wide range of additional information specific to a particular biologicallyDerivedProduct.
    /// </summary>
    public List<BiologicallyDerivedProductProperty> Property { get; set; }
    /// <summary>
    /// Request to obtain and/or infuse this biologically derived product.
    /// </summary>
    public List<Reference> Request { get; set; }
    /// <summary>
    /// May be extracted from information held in the Product Description Code.
    /// </summary>
    public Range StorageTempRequirements { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (ProductCategory != null)
      {
        writer.WritePropertyName("productCategory");
        ProductCategory.SerializeJson(writer, options);
      }

      if (ProductCode != null)
      {
        writer.WritePropertyName("productCode");
        ProductCode.SerializeJson(writer, options);
      }

      if ((Parent != null) && (Parent.Count != 0))
      {
        writer.WritePropertyName("parent");
        writer.WriteStartArray();

        foreach (Reference valParent in Parent)
        {
          valParent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Request != null) && (Request.Count != 0))
      {
        writer.WritePropertyName("request");
        writer.WriteStartArray();

        foreach (Reference valRequest in Request)
        {
          valRequest.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (BiologicalSourceEvent != null)
      {
        writer.WritePropertyName("biologicalSourceEvent");
        BiologicalSourceEvent.SerializeJson(writer, options);
      }

      if ((ProcessingFacility != null) && (ProcessingFacility.Count != 0))
      {
        writer.WritePropertyName("processingFacility");
        writer.WriteStartArray();

        foreach (Reference valProcessingFacility in ProcessingFacility)
        {
          valProcessingFacility.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Division))
      {
        writer.WriteString("division", (string)Division!);
      }

      if (_Division != null)
      {
        writer.WritePropertyName("_division");
        _Division.SerializeJson(writer, options);
      }

      if (ProductStatus != null)
      {
        writer.WritePropertyName("productStatus");
        ProductStatus.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ExpirationDate))
      {
        writer.WriteString("expirationDate", (string)ExpirationDate!);
      }

      if (_ExpirationDate != null)
      {
        writer.WritePropertyName("_expirationDate");
        _ExpirationDate.SerializeJson(writer, options);
      }

      if (Collection != null)
      {
        writer.WritePropertyName("collection");
        Collection.SerializeJson(writer, options);
      }

      if (StorageTempRequirements != null)
      {
        writer.WritePropertyName("storageTempRequirements");
        StorageTempRequirements.SerializeJson(writer, options);
      }

      if ((Property != null) && (Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();

        foreach (BiologicallyDerivedProductProperty valProperty in Property)
        {
          valProperty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "biologicalSourceEvent":
          BiologicalSourceEvent = new fhirCsR5.Models.Identifier();
          BiologicalSourceEvent.DeserializeJson(ref reader, options);
          break;

        case "collection":
          Collection = new fhirCsR5.Models.BiologicallyDerivedProductCollection();
          Collection.DeserializeJson(ref reader, options);
          break;

        case "division":
          Division = reader.GetString();
          break;

        case "_division":
          _Division = new fhirCsR5.Models.Element();
          _Division.DeserializeJson(ref reader, options);
          break;

        case "expirationDate":
          ExpirationDate = reader.GetString();
          break;

        case "_expirationDate":
          _ExpirationDate = new fhirCsR5.Models.Element();
          _ExpirationDate.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "parent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Parent = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objParent = new fhirCsR5.Models.Reference();
            objParent.DeserializeJson(ref reader, options);
            Parent.Add(objParent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Parent.Count == 0)
          {
            Parent = null;
          }

          break;

        case "processingFacility":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProcessingFacility = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objProcessingFacility = new fhirCsR5.Models.Reference();
            objProcessingFacility.DeserializeJson(ref reader, options);
            ProcessingFacility.Add(objProcessingFacility);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProcessingFacility.Count == 0)
          {
            ProcessingFacility = null;
          }

          break;

        case "productCategory":
          ProductCategory = new fhirCsR5.Models.Coding();
          ProductCategory.DeserializeJson(ref reader, options);
          break;

        case "productCode":
          ProductCode = new fhirCsR5.Models.CodeableConcept();
          ProductCode.DeserializeJson(ref reader, options);
          break;

        case "productStatus":
          ProductStatus = new fhirCsR5.Models.Coding();
          ProductStatus.DeserializeJson(ref reader, options);
          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Property = new List<BiologicallyDerivedProductProperty>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.BiologicallyDerivedProductProperty objProperty = new fhirCsR5.Models.BiologicallyDerivedProductProperty();
            objProperty.DeserializeJson(ref reader, options);
            Property.Add(objProperty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Property.Count == 0)
          {
            Property = null;
          }

          break;

        case "request":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Request = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objRequest = new fhirCsR5.Models.Reference();
            objRequest.DeserializeJson(ref reader, options);
            Request.Add(objRequest);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Request.Count == 0)
          {
            Request = null;
          }

          break;

        case "storageTempRequirements":
          StorageTempRequirements = new fhirCsR5.Models.Range();
          StorageTempRequirements.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
