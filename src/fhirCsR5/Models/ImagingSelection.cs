// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Selector of the instances – human or machine.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ImagingSelectionPerformer>))]
  public class ImagingSelectionPerformer : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Author – human or machine.
    /// </summary>
    public Reference Actor { get; set; }
    /// <summary>
    /// Distinguishes the type of involvement of the performer.
    /// </summary>
    public CodeableConcept Function { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Function != null)
      {
        writer.WritePropertyName("function");
        Function.SerializeJson(writer, options);
      }

      if (Actor != null)
      {
        writer.WritePropertyName("actor");
        Actor.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actor":
          Actor = new fhirCsR5.Models.Reference();
          Actor.DeserializeJson(ref reader, options);
          break;

        case "function":
          Function = new fhirCsR5.Models.CodeableConcept();
          Function.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Each imaging selection instance or frame list might includes an image region, specified by a region type and a set of 2D coordinates.
  ///        If the parent imagingSelection.instance contains a subset element of type frame, the image region applies to all frames in the subset list.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ImagingSelectionInstanceImageRegion>))]
  public class ImagingSelectionInstanceImageRegion : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// For a description of how 2D coordinates are encoded, see [DICOM PS3.3 C.18.6](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.18.6.html).
    /// </summary>
    public List<decimal> Coordinate { get; set; }
    /// <summary>
    /// Extension container element for Coordinate
    /// </summary>
    public List<Element> _Coordinate { get; set; }
    /// <summary>
    /// See [DICOM PS3.3 C.10.5.1.2](https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.10.5.html#sect_C.10.5.1.2).
    /// </summary>
    public string RegionType { get; set; }
    /// <summary>
    /// Extension container element for RegionType
    /// </summary>
    public Element _RegionType { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(RegionType))
      {
        writer.WriteString("regionType", (string)RegionType!);
      }

      if (_RegionType != null)
      {
        writer.WritePropertyName("_regionType");
        _RegionType.SerializeJson(writer, options);
      }

      if ((Coordinate != null) && (Coordinate.Count != 0))
      {
        writer.WritePropertyName("coordinate");
        writer.WriteStartArray();

        foreach (decimal valCoordinate in Coordinate)
        {
          writer.WriteNumberValue(valCoordinate);
        }

        writer.WriteEndArray();
      }

      if ((_Coordinate != null) && (_Coordinate.Count != 0))
      {
        writer.WritePropertyName("_coordinate");
        writer.WriteStartArray();

        foreach (Element val_Coordinate in _Coordinate)
        {
          val_Coordinate.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "coordinate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Coordinate = new List<decimal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Coordinate.Add(reader.GetDecimal());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Coordinate.Count == 0)
          {
            Coordinate = null;
          }

          break;

        case "_coordinate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Coordinate = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Coordinate = new fhirCsR5.Models.Element();
            obj_Coordinate.DeserializeJson(ref reader, options);
            _Coordinate.Add(obj_Coordinate);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Coordinate.Count == 0)
          {
            _Coordinate = null;
          }

          break;

        case "regionType":
          RegionType = reader.GetString();
          break;

        case "_regionType":
          _RegionType = new fhirCsR5.Models.Element();
          _RegionType.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ImagingSelection.instance.imageRegion.regionType field
  /// </summary>
  public static class ImagingSelectionInstanceImageRegionRegionTypeCodes {
    public const string POINT = "point";
    public const string POLYLINE = "polyline";
    public const string INTERPOLATED = "interpolated";
    public const string CIRCLE = "circle";
    public const string ELLIPSE = "ellipse";
    public static HashSet<string> Values = new HashSet<string>() {
      "point",
      "polyline",
      "interpolated",
      "circle",
      "ellipse",
    };
  }
  /// <summary>
  /// Each imaging selection includes one or more selected DICOM SOP instances.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ImagingSelectionInstance>))]
  public class ImagingSelectionInstance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Each imaging selection instance or frame list might includes an image region, specified by a region type and a set of 2D coordinates.
    ///        If the parent imagingSelection.instance contains a subset element of type frame, the image region applies to all frames in the subset list.
    /// </summary>
    public List<ImagingSelectionInstanceImageRegion> ImageRegion { get; set; }
    /// <summary>
    /// See [DICOM PS3.3 C.7.6.1](https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.6.html#sect_C.7.6.1).
    ///        Note: A multiframe instance has a single instance number with each frame identified by a frame number.
    /// </summary>
    public uint? Number { get; set; }
    /// <summary>
    /// See [DICOM PS3.3 C.12.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.12.html).
    /// </summary>
    public Coding SopClass { get; set; }
    /// <summary>
    /// Selected subset of the SOP Instance. The content and format of the subset item is determined by the SOP Class of the selected instance.
    ///        May be one of:
    ///        - A list of frame numbers selected from a multiframe SOP Instance.
    ///        - A list of Content Item Observation UID values selected from a DICOM SR or other structured document SOP Instance.
    ///        - A list of segment numbers selected from a segmentation SOP Instance.
    ///        - A list of Region of Interest (ROI) numbers selected from a radiotherapy structure set SOP Instance.
    /// </summary>
    public List<string> Subset { get; set; }
    /// <summary>
    /// Extension container element for Subset
    /// </summary>
    public List<Element> _Subset { get; set; }
    /// <summary>
    /// See [DICOM PS3.3 C.12.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.12.html).
    /// </summary>
    public string Uid { get; set; }
    /// <summary>
    /// Extension container element for Uid
    /// </summary>
    public Element _Uid { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Uid))
      {
        writer.WriteString("uid", (string)Uid!);
      }

      if (_Uid != null)
      {
        writer.WritePropertyName("_uid");
        _Uid.SerializeJson(writer, options);
      }

      if (Number != null)
      {
        writer.WriteNumber("number", (uint)Number!);
      }

      if (SopClass != null)
      {
        writer.WritePropertyName("sopClass");
        SopClass.SerializeJson(writer, options);
      }

      if ((Subset != null) && (Subset.Count != 0))
      {
        writer.WritePropertyName("subset");
        writer.WriteStartArray();

        foreach (string valSubset in Subset)
        {
          writer.WriteStringValue(valSubset);
        }

        writer.WriteEndArray();
      }

      if ((_Subset != null) && (_Subset.Count != 0))
      {
        writer.WritePropertyName("_subset");
        writer.WriteStartArray();

        foreach (Element val_Subset in _Subset)
        {
          val_Subset.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ImageRegion != null) && (ImageRegion.Count != 0))
      {
        writer.WritePropertyName("imageRegion");
        writer.WriteStartArray();

        foreach (ImagingSelectionInstanceImageRegion valImageRegion in ImageRegion)
        {
          valImageRegion.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "imageRegion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ImageRegion = new List<ImagingSelectionInstanceImageRegion>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ImagingSelectionInstanceImageRegion objImageRegion = new fhirCsR5.Models.ImagingSelectionInstanceImageRegion();
            objImageRegion.DeserializeJson(ref reader, options);
            ImageRegion.Add(objImageRegion);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ImageRegion.Count == 0)
          {
            ImageRegion = null;
          }

          break;

        case "number":
          Number = reader.GetUInt32();
          break;

        case "sopClass":
          SopClass = new fhirCsR5.Models.Coding();
          SopClass.DeserializeJson(ref reader, options);
          break;

        case "subset":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Subset = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Subset.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Subset.Count == 0)
          {
            Subset = null;
          }

          break;

        case "_subset":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Subset = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Subset = new fhirCsR5.Models.Element();
            obj_Subset.DeserializeJson(ref reader, options);
            _Subset.Add(obj_Subset);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Subset.Count == 0)
          {
            _Subset = null;
          }

          break;

        case "uid":
          Uid = reader.GetString();
          break;

        case "_uid":
          _Uid = new fhirCsR5.Models.Element();
          _Uid.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Each imaging selection might includes a 3D image region, specified by a region type and a set of 3D coordinates.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ImagingSelectionImageRegion>))]
  public class ImagingSelectionImageRegion : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// For a description of how 3D coordinates are encoded, see [DICOM PS3.3 C.18.9](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.18.9.html).
    /// </summary>
    public List<decimal> Coordinate { get; set; }
    /// <summary>
    /// Extension container element for Coordinate
    /// </summary>
    public List<Element> _Coordinate { get; set; }
    /// <summary>
    /// See [DICOM PS3.3 C.18.9.1.2](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.18.9.html#sect_C.18.9.1.2).
    /// </summary>
    public string RegionType { get; set; }
    /// <summary>
    /// Extension container element for RegionType
    /// </summary>
    public Element _RegionType { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(RegionType))
      {
        writer.WriteString("regionType", (string)RegionType!);
      }

      if (_RegionType != null)
      {
        writer.WritePropertyName("_regionType");
        _RegionType.SerializeJson(writer, options);
      }

      if ((Coordinate != null) && (Coordinate.Count != 0))
      {
        writer.WritePropertyName("coordinate");
        writer.WriteStartArray();

        foreach (decimal valCoordinate in Coordinate)
        {
          writer.WriteNumberValue(valCoordinate);
        }

        writer.WriteEndArray();
      }

      if ((_Coordinate != null) && (_Coordinate.Count != 0))
      {
        writer.WritePropertyName("_coordinate");
        writer.WriteStartArray();

        foreach (Element val_Coordinate in _Coordinate)
        {
          val_Coordinate.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "coordinate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Coordinate = new List<decimal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Coordinate.Add(reader.GetDecimal());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Coordinate.Count == 0)
          {
            Coordinate = null;
          }

          break;

        case "_coordinate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Coordinate = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_Coordinate = new fhirCsR5.Models.Element();
            obj_Coordinate.DeserializeJson(ref reader, options);
            _Coordinate.Add(obj_Coordinate);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Coordinate.Count == 0)
          {
            _Coordinate = null;
          }

          break;

        case "regionType":
          RegionType = reader.GetString();
          break;

        case "_regionType":
          _RegionType = new fhirCsR5.Models.Element();
          _RegionType.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ImagingSelection.imageRegion.regionType field
  /// </summary>
  public static class ImagingSelectionImageRegionRegionTypeCodes {
    public const string POINT = "point";
    public const string MULTIPOINT = "multipoint";
    public const string POLYLINE = "polyline";
    public const string POLYGON = "polygon";
    public const string ELLIPSE = "ellipse";
    public const string ELLIPSOID = "ellipsoid";
    public static HashSet<string> Values = new HashSet<string>() {
      "point",
      "multipoint",
      "polyline",
      "polygon",
      "ellipse",
      "ellipsoid",
    };
  }
  /// <summary>
  /// A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ImagingSelection>))]
  public class ImagingSelection : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ImagingSelection";
    /// <summary>
    /// A list of the diagnostic requests that resulted in this imaging selection being performed.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings.
    /// </summary>
    public CodeableReference BodySite { get; set; }
    /// <summary>
    /// Classifies the imaging selection.
    /// </summary>
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// *All* code-value and, if present, component.code-component.value pairs need to be taken into account to correctly understand the meaning of the observation.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The imaging study from which the imaging selection is made.
    /// </summary>
    public List<Reference> DerivedFrom { get; set; }
    /// <summary>
    /// Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG) formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach.
    /// </summary>
    public List<Reference> Endpoint { get; set; }
    /// <summary>
    /// An imaging selection may reference a DICOM resource that itself references other DICOM resources.
    ///        e.g. a presentation state references a set of source images or frames.
    /// </summary>
    public List<Reference> Focus { get; set; }
    /// <summary>
    /// See [DICOM PS3.3 C.7.4.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.4.html).
    /// </summary>
    public string FrameOfReferenceUid { get; set; }
    /// <summary>
    /// Extension container element for FrameOfReferenceUid
    /// </summary>
    public Element _FrameOfReferenceUid { get; set; }
    /// <summary>
    /// This is a business identifier, not a resource identifier -- see discussion under [Business Identifiers](resource.html#identifiers). 
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Each imaging selection might includes a 3D image region, specified by a region type and a set of 3D coordinates.
    /// </summary>
    public List<ImagingSelectionImageRegion> ImageRegion { get; set; }
    /// <summary>
    /// Each imaging selection includes one or more selected DICOM SOP instances.
    /// </summary>
    public List<ImagingSelectionInstance> Instance { get; set; }
    /// <summary>
    /// The date and time this imaging selection was created.
    /// </summary>
    public string Issued { get; set; }
    /// <summary>
    /// Extension container element for Issued
    /// </summary>
    public Element _Issued { get; set; }
    /// <summary>
    /// Selector of the instances – human or machine.
    /// </summary>
    public List<ImagingSelectionPerformer> Performer { get; set; }
    /// <summary>
    /// See [DICOM PS3.3 C.7.3](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.3.html).
    /// </summary>
    public uint? SeriesNumber { get; set; }
    /// <summary>
    /// See [DICOM PS3.3 C.7.3](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.3.html).
    /// </summary>
    public string SeriesUid { get; set; }
    /// <summary>
    /// Extension container element for SeriesUid
    /// </summary>
    public Element _SeriesUid { get; set; }
    /// <summary>
    /// Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// See [DICOM PS3.3 C.7.2](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.2.html).
    /// </summary>
    public string StudyUid { get; set; }
    /// <summary>
    /// Extension container element for StudyUid
    /// </summary>
    public Element _StudyUid { get; set; }
    /// <summary>
    /// The patient, or group of patients, location, device, organization, procedure or practitioner this imaging selection is about and into whose or what record the imaging selection is placed.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issued))
      {
        writer.WriteString("issued", (string)Issued!);
      }

      if (_Issued != null)
      {
        writer.WritePropertyName("_issued");
        _Issued.SerializeJson(writer, options);
      }

      if ((Performer != null) && (Performer.Count != 0))
      {
        writer.WritePropertyName("performer");
        writer.WriteStartArray();

        foreach (ImagingSelectionPerformer valPerformer in Performer)
        {
          valPerformer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Category != null) && (Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();

        foreach (CodeableConcept valCategory in Category)
        {
          valCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StudyUid))
      {
        writer.WriteString("studyUid", (string)StudyUid!);
      }

      if (_StudyUid != null)
      {
        writer.WritePropertyName("_studyUid");
        _StudyUid.SerializeJson(writer, options);
      }

      if ((DerivedFrom != null) && (DerivedFrom.Count != 0))
      {
        writer.WritePropertyName("derivedFrom");
        writer.WriteStartArray();

        foreach (Reference valDerivedFrom in DerivedFrom)
        {
          valDerivedFrom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Endpoint != null) && (Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();

        foreach (Reference valEndpoint in Endpoint)
        {
          valEndpoint.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(SeriesUid))
      {
        writer.WriteString("seriesUid", (string)SeriesUid!);
      }

      if (_SeriesUid != null)
      {
        writer.WritePropertyName("_seriesUid");
        _SeriesUid.SerializeJson(writer, options);
      }

      if (SeriesNumber != null)
      {
        writer.WriteNumber("seriesNumber", (uint)SeriesNumber!);
      }

      if (!string.IsNullOrEmpty(FrameOfReferenceUid))
      {
        writer.WriteString("frameOfReferenceUid", (string)FrameOfReferenceUid!);
      }

      if (_FrameOfReferenceUid != null)
      {
        writer.WritePropertyName("_frameOfReferenceUid");
        _FrameOfReferenceUid.SerializeJson(writer, options);
      }

      if (BodySite != null)
      {
        writer.WritePropertyName("bodySite");
        BodySite.SerializeJson(writer, options);
      }

      if ((Focus != null) && (Focus.Count != 0))
      {
        writer.WritePropertyName("focus");
        writer.WriteStartArray();

        foreach (Reference valFocus in Focus)
        {
          valFocus.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Instance != null) && (Instance.Count != 0))
      {
        writer.WritePropertyName("instance");
        writer.WriteStartArray();

        foreach (ImagingSelectionInstance valInstance in Instance)
        {
          valInstance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ImageRegion != null) && (ImageRegion.Count != 0))
      {
        writer.WritePropertyName("imageRegion");
        writer.WriteStartArray();

        foreach (ImagingSelectionImageRegion valImageRegion in ImageRegion)
        {
          valImageRegion.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objBasedOn = new fhirCsR5.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "bodySite":
          BodySite = new fhirCsR5.Models.CodeableReference();
          BodySite.DeserializeJson(ref reader, options);
          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objCategory = new fhirCsR5.Models.CodeableConcept();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "code":
          Code = new fhirCsR5.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "derivedFrom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DerivedFrom = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objDerivedFrom = new fhirCsR5.Models.Reference();
            objDerivedFrom.DeserializeJson(ref reader, options);
            DerivedFrom.Add(objDerivedFrom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DerivedFrom.Count == 0)
          {
            DerivedFrom = null;
          }

          break;

        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Endpoint = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objEndpoint = new fhirCsR5.Models.Reference();
            objEndpoint.DeserializeJson(ref reader, options);
            Endpoint.Add(objEndpoint);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Endpoint.Count == 0)
          {
            Endpoint = null;
          }

          break;

        case "focus":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Focus = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objFocus = new fhirCsR5.Models.Reference();
            objFocus.DeserializeJson(ref reader, options);
            Focus.Add(objFocus);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Focus.Count == 0)
          {
            Focus = null;
          }

          break;

        case "frameOfReferenceUid":
          FrameOfReferenceUid = reader.GetString();
          break;

        case "_frameOfReferenceUid":
          _FrameOfReferenceUid = new fhirCsR5.Models.Element();
          _FrameOfReferenceUid.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "imageRegion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ImageRegion = new List<ImagingSelectionImageRegion>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ImagingSelectionImageRegion objImageRegion = new fhirCsR5.Models.ImagingSelectionImageRegion();
            objImageRegion.DeserializeJson(ref reader, options);
            ImageRegion.Add(objImageRegion);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ImageRegion.Count == 0)
          {
            ImageRegion = null;
          }

          break;

        case "instance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Instance = new List<ImagingSelectionInstance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ImagingSelectionInstance objInstance = new fhirCsR5.Models.ImagingSelectionInstance();
            objInstance.DeserializeJson(ref reader, options);
            Instance.Add(objInstance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Instance.Count == 0)
          {
            Instance = null;
          }

          break;

        case "issued":
          Issued = reader.GetString();
          break;

        case "_issued":
          _Issued = new fhirCsR5.Models.Element();
          _Issued.DeserializeJson(ref reader, options);
          break;

        case "performer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Performer = new List<ImagingSelectionPerformer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ImagingSelectionPerformer objPerformer = new fhirCsR5.Models.ImagingSelectionPerformer();
            objPerformer.DeserializeJson(ref reader, options);
            Performer.Add(objPerformer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Performer.Count == 0)
          {
            Performer = null;
          }

          break;

        case "seriesNumber":
          SeriesNumber = reader.GetUInt32();
          break;

        case "seriesUid":
          SeriesUid = reader.GetString();
          break;

        case "_seriesUid":
          _SeriesUid = new fhirCsR5.Models.Element();
          _SeriesUid.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "studyUid":
          StudyUid = reader.GetString();
          break;

        case "_studyUid":
          _StudyUid = new fhirCsR5.Models.Element();
          _StudyUid.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR5.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ImagingSelection.status field
  /// </summary>
  public static class ImagingSelectionStatusCodes {
    public const string AVAILABLE = "available";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "available",
      "entered-in-error",
      "unknown",
    };
  }
}
