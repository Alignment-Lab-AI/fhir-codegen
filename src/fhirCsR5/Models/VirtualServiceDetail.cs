// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Virtual Service Contact Details.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<VirtualServiceDetail>))]
  public class VirtualServiceDetail : DataType,  IFhirJsonSerializable {
    /// <summary>
    /// This web address can be used to provide additional details on the call, such as alternative/regional call in numbers, or other associated services.
    /// </summary>
    public List<string> AdditionalInfo { get; set; }
    /// <summary>
    /// Extension container element for AdditionalInfo
    /// </summary>
    public List<Element> _AdditionalInfo { get; set; }
    /// <summary>
    /// What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type).
    /// </summary>
    public string AddressUrl { get; set; }
    /// <summary>
    /// Extension container element for AddressUrl
    /// </summary>
    public Element _AddressUrl { get; set; }
    /// <summary>
    /// What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type).
    /// </summary>
    public string AddressString { get; set; }
    /// <summary>
    /// Extension container element for AddressString
    /// </summary>
    public Element _AddressString { get; set; }
    /// <summary>
    /// What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type).
    /// </summary>
    public ContactPoint AddressContactPoint { get; set; }
    /// <summary>
    /// What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type).
    /// </summary>
    public ExtendedContactDetail AddressExtendedContactDetail { get; set; }
    /// <summary>
    /// As this type defines what the virtual service is, it then defines what address and additional information might be relevant.
    /// Some profiles could be used for specific types to define what the other values could/should be.
    /// </summary>
    public Coding ChannelType { get; set; }
    /// <summary>
    /// Some services have only a limitted number of participants permitted to connect at a time, this is typically used in "shared" virtual services that you might find on location resources.
    /// Typically on-demand services might not have these restrictions.
    /// </summary>
    public uint? MaxParticipants { get; set; }
    /// <summary>
    /// Some services require a session key to be able to access the service once connected.
    /// This could be in cases where a shared number is used, and a session key is added to put into a private line, or to identify the participant in a call.
    /// </summary>
    public string SessionKey { get; set; }
    /// <summary>
    /// Extension container element for SessionKey
    /// </summary>
    public Element _SessionKey { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.DataType)this).SerializeJson(writer, options, false);

      if (ChannelType != null)
      {
        writer.WritePropertyName("channelType");
        ChannelType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AddressUrl))
      {
        writer.WriteString("addressUrl", (string)AddressUrl!);
      }

      if (_AddressUrl != null)
      {
        writer.WritePropertyName("_addressUrl");
        _AddressUrl.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AddressString))
      {
        writer.WriteString("addressString", (string)AddressString!);
      }

      if (_AddressString != null)
      {
        writer.WritePropertyName("_addressString");
        _AddressString.SerializeJson(writer, options);
      }

      if (AddressContactPoint != null)
      {
        writer.WritePropertyName("addressContactPoint");
        AddressContactPoint.SerializeJson(writer, options);
      }

      if (AddressExtendedContactDetail != null)
      {
        writer.WritePropertyName("addressExtendedContactDetail");
        AddressExtendedContactDetail.SerializeJson(writer, options);
      }

      if ((AdditionalInfo != null) && (AdditionalInfo.Count != 0))
      {
        writer.WritePropertyName("additionalInfo");
        writer.WriteStartArray();

        foreach (string valAdditionalInfo in AdditionalInfo)
        {
          writer.WriteStringValue(valAdditionalInfo);
        }

        writer.WriteEndArray();
      }

      if ((_AdditionalInfo != null) && (_AdditionalInfo.Count != 0))
      {
        writer.WritePropertyName("_additionalInfo");
        writer.WriteStartArray();

        foreach (Element val_AdditionalInfo in _AdditionalInfo)
        {
          val_AdditionalInfo.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (MaxParticipants != null)
      {
        writer.WriteNumber("maxParticipants", (uint)MaxParticipants!);
      }

      if (!string.IsNullOrEmpty(SessionKey))
      {
        writer.WriteString("sessionKey", (string)SessionKey!);
      }

      if (_SessionKey != null)
      {
        writer.WritePropertyName("_sessionKey");
        _SessionKey.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "additionalInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AdditionalInfo = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            AdditionalInfo.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AdditionalInfo.Count == 0)
          {
            AdditionalInfo = null;
          }

          break;

        case "_additionalInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _AdditionalInfo = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Element obj_AdditionalInfo = new fhirCsR5.Models.Element();
            obj_AdditionalInfo.DeserializeJson(ref reader, options);
            _AdditionalInfo.Add(obj_AdditionalInfo);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_AdditionalInfo.Count == 0)
          {
            _AdditionalInfo = null;
          }

          break;

        case "addressUrl":
          AddressUrl = reader.GetString();
          break;

        case "_addressUrl":
          _AddressUrl = new fhirCsR5.Models.Element();
          _AddressUrl.DeserializeJson(ref reader, options);
          break;

        case "addressString":
          AddressString = reader.GetString();
          break;

        case "_addressString":
          _AddressString = new fhirCsR5.Models.Element();
          _AddressString.DeserializeJson(ref reader, options);
          break;

        case "addressContactPoint":
          AddressContactPoint = new fhirCsR5.Models.ContactPoint();
          AddressContactPoint.DeserializeJson(ref reader, options);
          break;

        case "addressExtendedContactDetail":
          AddressExtendedContactDetail = new fhirCsR5.Models.ExtendedContactDetail();
          AddressExtendedContactDetail.DeserializeJson(ref reader, options);
          break;

        case "channelType":
          ChannelType = new fhirCsR5.Models.Coding();
          ChannelType.DeserializeJson(ref reader, options);
          break;

        case "maxParticipants":
          MaxParticipants = reader.GetUInt32();
          break;

        case "sessionKey":
          SessionKey = reader.GetString();
          break;

        case "_sessionKey":
          _SessionKey = new fhirCsR5.Models.Element();
          _SessionKey.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DataType)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
