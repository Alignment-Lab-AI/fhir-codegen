// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// Additional names for the study.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ResearchStudyLabel>))]
  public class ResearchStudyLabel : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Kind of name.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The name.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR5.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ResearchStudyFocus>))]
  public class ResearchStudyFocus : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A factor corresponds to an independent variable manipulated by the experimentalist with the intention to affect biological systems in a way that can be measured by an assay.
    /// </summary>
    public string Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// Indicates whether the focus is a medication, a device, a procedure, a specific factor or some other intervention or characteristic.
    /// </summary>
    public List<CodeableConcept> FocusType { get; set; }
    /// <summary>
    /// Identification of product under study.  This may be any combination of code and/or name.
    /// </summary>
    public CodeableConcept ProductCode { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ProductCode != null)
      {
        writer.WritePropertyName("productCode");
        ProductCode.SerializeJson(writer, options);
      }

      if ((FocusType != null) && (FocusType.Count != 0))
      {
        writer.WritePropertyName("focusType");
        writer.WriteStartArray();

        foreach (CodeableConcept valFocusType in FocusType)
        {
          valFocusType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Factor))
      {
        writer.WriteString("factor", (string)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "factor":
          Factor = reader.GetString();
          break;

        case "_factor":
          _Factor = new fhirCsR5.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "focusType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          FocusType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objFocusType = new fhirCsR5.Models.CodeableConcept();
            objFocusType.DeserializeJson(ref reader, options);
            FocusType.Add(objFocusType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (FocusType.Count == 0)
          {
            FocusType = null;
          }

          break;

        case "productCode":
          ProductCode = new fhirCsR5.Models.CodeableConcept();
          ProductCode.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// For a Sponsor or a PrincipalInvestigator use the dedicated attributes provided.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ResearchStudyAssociatedParty>))]
  public class ResearchStudyAssociatedParty : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A categorization other than role for the associated party.
    /// </summary>
    public List<CodeableConcept> Classifier { get; set; }
    /// <summary>
    /// Name of associated party.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Suggestions of a better attribute name are appreciated
    /// </summary>
    public Reference Party { get; set; }
    /// <summary>
    /// The cardinality is 0..* due to the fact that an associated party may be intermittently active in a given role over multiple time periods.
    /// </summary>
    public List<Period> Period { get; set; }
    /// <summary>
    /// Type of association.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if ((Period != null) && (Period.Count != 0))
      {
        writer.WritePropertyName("period");
        writer.WriteStartArray();

        foreach (Period valPeriod in Period)
        {
          valPeriod.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Classifier != null) && (Classifier.Count != 0))
      {
        writer.WritePropertyName("classifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valClassifier in Classifier)
        {
          valClassifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Party != null)
      {
        writer.WritePropertyName("party");
        Party.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "classifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Classifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objClassifier = new fhirCsR5.Models.CodeableConcept();
            objClassifier.DeserializeJson(ref reader, options);
            Classifier.Add(objClassifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Classifier.Count == 0)
          {
            Classifier = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "party":
          Party = new fhirCsR5.Models.Reference();
          Party.DeserializeJson(ref reader, options);
          break;

        case "period":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Period = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Period objPeriod = new fhirCsR5.Models.Period();
            objPeriod.DeserializeJson(ref reader, options);
            Period.Add(objPeriod);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Period.Count == 0)
          {
            Period = null;
          }

          break;

        case "role":
          Role = new fhirCsR5.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Status of study with time for that status.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ResearchStudyProgressStatus>))]
  public class ResearchStudyProgressStatus : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An indication of whether or not the date is a known date when the state changed or will change. A value of true indicates a known date. A value of false indicates an estimated date.
    /// </summary>
    public bool? Actual { get; set; }
    /// <summary>
    /// Extension container element for Actual
    /// </summary>
    public Element _Actual { get; set; }
    /// <summary>
    /// Date range.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// Label for status or state (e.g. recruitment status).
    /// </summary>
    public CodeableConcept State { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (State != null)
      {
        writer.WritePropertyName("state");
        State.SerializeJson(writer, options);
      }

      if (Actual != null)
      {
        writer.WriteBoolean("actual", (bool)Actual!);
      }

      if (_Actual != null)
      {
        writer.WritePropertyName("_actual");
        _Actual.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actual":
          Actual = reader.GetBoolean();
          break;

        case "_actual":
          _Actual = new fhirCsR5.Models.Element();
          _Actual.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR5.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "state":
          State = new fhirCsR5.Models.CodeableConcept();
          State.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Target or actual group of participants enrolled in study.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ResearchStudyRecruitment>))]
  public class ResearchStudyRecruitment : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Group of participants who were enrolled in study.
    /// </summary>
    public Reference ActualGroup { get; set; }
    /// <summary>
    /// Actual total number of participants enrolled in study.
    /// </summary>
    public uint? ActualNumber { get; set; }
    /// <summary>
    /// Inclusion and exclusion criteria.
    /// </summary>
    public Reference Eligibility { get; set; }
    /// <summary>
    /// Estimated total number of participants to be enrolled.
    /// </summary>
    public uint? TargetNumber { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (TargetNumber != null)
      {
        writer.WriteNumber("targetNumber", (uint)TargetNumber!);
      }

      if (ActualNumber != null)
      {
        writer.WriteNumber("actualNumber", (uint)ActualNumber!);
      }

      if (Eligibility != null)
      {
        writer.WritePropertyName("eligibility");
        Eligibility.SerializeJson(writer, options);
      }

      if (ActualGroup != null)
      {
        writer.WritePropertyName("actualGroup");
        ActualGroup.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actualGroup":
          ActualGroup = new fhirCsR5.Models.Reference();
          ActualGroup.DeserializeJson(ref reader, options);
          break;

        case "actualNumber":
          ActualNumber = reader.GetUInt32();
          break;

        case "eligibility":
          Eligibility = new fhirCsR5.Models.Reference();
          Eligibility.DeserializeJson(ref reader, options);
          break;

        case "targetNumber":
          TargetNumber = reader.GetUInt32();
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// In many clinical trials this is refered to as the ARM of the study, but such a term is not used in other sorts of trials even when there is a comparison between two or more groups.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ResearchStudyComparisonGroup>))]
  public class ResearchStudyComparisonGroup : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A succinct description of the path through the study that would be followed by a subject adhering to this comparisonGroup.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Allows the comparisonGroup for the study and the comparisonGroup for the subject to be linked easily.
    /// </summary>
    public string IdentifierUri { get; set; }
    /// <summary>
    /// Extension container element for IdentifierUri
    /// </summary>
    public Element _IdentifierUri { get; set; }
    /// <summary>
    /// Allows the comparisonGroup for the study and the comparisonGroup for the subject to be linked easily.
    /// </summary>
    public Identifier IdentifierIdentifier { get; set; }
    /// <summary>
    /// Interventions or exposures in this comparisonGroup or cohort.
    /// </summary>
    public List<Reference> IntendedExposure { get; set; }
    /// <summary>
    /// Unique, human-readable label for this comparisonGroup of the study.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Group of participants who were enrolled in study comparisonGroup.
    /// </summary>
    public Reference ObservedGroup { get; set; }
    /// <summary>
    /// Categorization of study comparisonGroup, e.g. experimental, active comparator, placebo comparater.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(IdentifierUri))
      {
        writer.WriteString("identifierUri", (string)IdentifierUri!);
      }

      if (_IdentifierUri != null)
      {
        writer.WritePropertyName("_identifierUri");
        _IdentifierUri.SerializeJson(writer, options);
      }

      if (IdentifierIdentifier != null)
      {
        writer.WritePropertyName("identifierIdentifier");
        IdentifierIdentifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((IntendedExposure != null) && (IntendedExposure.Count != 0))
      {
        writer.WritePropertyName("intendedExposure");
        writer.WriteStartArray();

        foreach (Reference valIntendedExposure in IntendedExposure)
        {
          valIntendedExposure.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ObservedGroup != null)
      {
        writer.WritePropertyName("observedGroup");
        ObservedGroup.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "identifierUri":
          IdentifierUri = reader.GetString();
          break;

        case "_identifierUri":
          _IdentifierUri = new fhirCsR5.Models.Element();
          _IdentifierUri.DeserializeJson(ref reader, options);
          break;

        case "identifierIdentifier":
          IdentifierIdentifier = new fhirCsR5.Models.Identifier();
          IdentifierIdentifier.DeserializeJson(ref reader, options);
          break;

        case "intendedExposure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          IntendedExposure = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objIntendedExposure = new fhirCsR5.Models.Reference();
            objIntendedExposure.DeserializeJson(ref reader, options);
            IntendedExposure.Add(objIntendedExposure);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (IntendedExposure.Count == 0)
          {
            IntendedExposure = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "observedGroup":
          ObservedGroup = new fhirCsR5.Models.Reference();
          ObservedGroup.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ResearchStudyObjective>))]
  public class ResearchStudyObjective : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Free text description of the objective of the study.  This is what the study is trying to achieve rather than how it is going to achieve it (see ResearchStudy.description).
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Unique, human-readable label for this objective of the study.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The kind of study objective.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An outcome or planned variable to measure during the study.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ResearchStudyOutcomeMeasure>))]
  public class ResearchStudyOutcomeMeasure : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Description of the outcome.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Label for the outcome.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Structured outcome definition.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// The parameter or characteristic being assessed as one of the values by which the study is assessed.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "reference":
          Reference = new fhirCsR5.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objType = new fhirCsR5.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A general storage or archive location for the study.  This may contain an assortment of content which is not specified in advance.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ResearchStudyWebLocation>))]
  public class ResearchStudyWebLocation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Describes the nature of the location being specified.
    /// </summary>
    public CodeableConcept Classifier { get; set; }
    /// <summary>
    /// The location address.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Classifier != null)
      {
        writer.WritePropertyName("classifier");
        Classifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "classifier":
          Classifier = new fhirCsR5.Models.CodeableConcept();
          Classifier.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR5.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<ResearchStudy>))]
  public class ResearchStudy : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ResearchStudy";
    /// <summary>
    /// For a Sponsor or a PrincipalInvestigator use the dedicated attributes provided.
    /// </summary>
    public List<ResearchStudyAssociatedParty> AssociatedParty { get; set; }
    /// <summary>
    /// Additional grouping mechanism or categorization of a research study. Example: FDA regulated device, FDA regulated drug, MPG Paragraph 23b (a German legal requirement), IRB-exempt, etc. Implementation Note: do not use the classifier element to support existing semantics that are already supported thru explicit elements in the resource.
    /// </summary>
    public List<CodeableConcept> Classifier { get; set; }
    /// <summary>
    /// In many clinical trials this is refered to as the ARM of the study, but such a term is not used in other sorts of trials even when there is a comparison between two or more groups.
    /// </summary>
    public List<ResearchStudyComparisonGroup> ComparisonGroup { get; set; }
    /// <summary>
    /// The condition that is the focus of the study.  For example, In a study to examine risk factors for Lupus, might have as an inclusion criterion "healthy volunteer", but the target condition code would be a Lupus SNOMED code.
    /// </summary>
    public List<CodeableConcept> Condition { get; set; }
    /// <summary>
    /// The date (and optionally time) when the ResearchStudy Resource was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the ResearchStudy Resource changes.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// A detailed and human-readable narrative of the study. E.g., study abstract.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// A brief text for explaining the study.
    /// </summary>
    public string DescriptionSummary { get; set; }
    /// <summary>
    /// Extension container element for DescriptionSummary
    /// </summary>
    public Element _DescriptionSummary { get; set; }
    /// <summary>
    /// The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.
    /// </summary>
    public List<ResearchStudyFocus> Focus { get; set; }
    /// <summary>
    /// Identifiers assigned to this research study by the sponsor or other systems.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Key terms to aid in searching for or filtering the study.
    /// </summary>
    public List<CodeableConcept> Keyword { get; set; }
    /// <summary>
    /// Additional names for the study.
    /// </summary>
    public List<ResearchStudyLabel> Label { get; set; }
    /// <summary>
    /// Name for this study (computer friendly).
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Comments made about the study by the performer, subject or other participants.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
    /// </summary>
    public List<ResearchStudyObjective> Objective { get; set; }
    /// <summary>
    /// An outcome or planned variable to measure during the study.
    /// </summary>
    public List<ResearchStudyOutcomeMeasure> OutcomeMeasure { get; set; }
    /// <summary>
    /// A larger research study of which this particular study is a component or step.
    /// </summary>
    public List<Reference> PartOf { get; set; }
    /// <summary>
    /// Identifies the start date and the expected (or actual, depending on status) end date for the study.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// The stage in the progression of a therapy from initial experimental use in humans in clinical trials to post-market evaluation.
    /// </summary>
    public CodeableConcept Phase { get; set; }
    /// <summary>
    /// The type of study based upon the intent of the study activities. A classification of the intent of the study.
    /// </summary>
    public CodeableConcept PrimaryPurposeType { get; set; }
    /// <summary>
    /// Status of study with time for that status.
    /// </summary>
    public List<ResearchStudyProgressStatus> ProgressStatus { get; set; }
    /// <summary>
    /// The set of steps expected to be performed as part of the execution of the study.
    /// </summary>
    public List<Reference> Protocol { get; set; }
    /// <summary>
    /// Target or actual group of participants enrolled in study.
    /// </summary>
    public ResearchStudyRecruitment Recruitment { get; set; }
    /// <summary>
    /// A country, state or other area where the study is taking place rather than its precise geographic location or address.
    /// </summary>
    public List<CodeableConcept> Region { get; set; }
    /// <summary>
    /// Citations, references and other related documents.
    /// </summary>
    public List<RelatedArtifact> RelatedArtifact { get; set; }
    /// <summary>
    /// Link to one or more sets of results generated by the study.  Could also link to a research registry holding the results such as ClinicalTrials.gov.
    /// </summary>
    public List<Reference> Result { get; set; }
    /// <summary>
    /// A facility in which study activities are conducted.
    /// </summary>
    public List<Reference> Site { get; set; }
    /// <summary>
    /// The publication state of the resource (not of the study).
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc.
    /// </summary>
    public List<CodeableConcept> StudyDesign { get; set; }
    /// <summary>
    /// The human readable name of the research study.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Canonical identifier for this study resource, represented as a globally unique URI.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// The business version for the study record.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// A general storage or archive location for the study.  This may contain an assortment of content which is not specified in advance.
    /// </summary>
    public List<ResearchStudyWebLocation> WebLocation { get; set; }
    /// <summary>
    /// A description and/or code explaining the premature termination of the study.
    /// </summary>
    public CodeableConcept WhyStopped { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if ((Label != null) && (Label.Count != 0))
      {
        writer.WritePropertyName("label");
        writer.WriteStartArray();

        foreach (ResearchStudyLabel valLabel in Label)
        {
          valLabel.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Protocol != null) && (Protocol.Count != 0))
      {
        writer.WritePropertyName("protocol");
        writer.WriteStartArray();

        foreach (Reference valProtocol in Protocol)
        {
          valProtocol.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PartOf != null) && (PartOf.Count != 0))
      {
        writer.WritePropertyName("partOf");
        writer.WriteStartArray();

        foreach (Reference valPartOf in PartOf)
        {
          valPartOf.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelatedArtifact != null) && (RelatedArtifact.Count != 0))
      {
        writer.WritePropertyName("relatedArtifact");
        writer.WriteStartArray();

        foreach (RelatedArtifact valRelatedArtifact in RelatedArtifact)
        {
          valRelatedArtifact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (PrimaryPurposeType != null)
      {
        writer.WritePropertyName("primaryPurposeType");
        PrimaryPurposeType.SerializeJson(writer, options);
      }

      if (Phase != null)
      {
        writer.WritePropertyName("phase");
        Phase.SerializeJson(writer, options);
      }

      if ((StudyDesign != null) && (StudyDesign.Count != 0))
      {
        writer.WritePropertyName("studyDesign");
        writer.WriteStartArray();

        foreach (CodeableConcept valStudyDesign in StudyDesign)
        {
          valStudyDesign.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Focus != null) && (Focus.Count != 0))
      {
        writer.WritePropertyName("focus");
        writer.WriteStartArray();

        foreach (ResearchStudyFocus valFocus in Focus)
        {
          valFocus.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Condition != null) && (Condition.Count != 0))
      {
        writer.WritePropertyName("condition");
        writer.WriteStartArray();

        foreach (CodeableConcept valCondition in Condition)
        {
          valCondition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Keyword != null) && (Keyword.Count != 0))
      {
        writer.WritePropertyName("keyword");
        writer.WriteStartArray();

        foreach (CodeableConcept valKeyword in Keyword)
        {
          valKeyword.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Region != null) && (Region.Count != 0))
      {
        writer.WritePropertyName("region");
        writer.WriteStartArray();

        foreach (CodeableConcept valRegion in Region)
        {
          valRegion.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(DescriptionSummary))
      {
        writer.WriteString("descriptionSummary", (string)DescriptionSummary!);
      }

      if (_DescriptionSummary != null)
      {
        writer.WritePropertyName("_descriptionSummary");
        _DescriptionSummary.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if ((Site != null) && (Site.Count != 0))
      {
        writer.WritePropertyName("site");
        writer.WriteStartArray();

        foreach (Reference valSite in Site)
        {
          valSite.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Classifier != null) && (Classifier.Count != 0))
      {
        writer.WritePropertyName("classifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valClassifier in Classifier)
        {
          valClassifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AssociatedParty != null) && (AssociatedParty.Count != 0))
      {
        writer.WritePropertyName("associatedParty");
        writer.WriteStartArray();

        foreach (ResearchStudyAssociatedParty valAssociatedParty in AssociatedParty)
        {
          valAssociatedParty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ProgressStatus != null) && (ProgressStatus.Count != 0))
      {
        writer.WritePropertyName("progressStatus");
        writer.WriteStartArray();

        foreach (ResearchStudyProgressStatus valProgressStatus in ProgressStatus)
        {
          valProgressStatus.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (WhyStopped != null)
      {
        writer.WritePropertyName("whyStopped");
        WhyStopped.SerializeJson(writer, options);
      }

      if (Recruitment != null)
      {
        writer.WritePropertyName("recruitment");
        Recruitment.SerializeJson(writer, options);
      }

      if ((ComparisonGroup != null) && (ComparisonGroup.Count != 0))
      {
        writer.WritePropertyName("comparisonGroup");
        writer.WriteStartArray();

        foreach (ResearchStudyComparisonGroup valComparisonGroup in ComparisonGroup)
        {
          valComparisonGroup.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Objective != null) && (Objective.Count != 0))
      {
        writer.WritePropertyName("objective");
        writer.WriteStartArray();

        foreach (ResearchStudyObjective valObjective in Objective)
        {
          valObjective.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((OutcomeMeasure != null) && (OutcomeMeasure.Count != 0))
      {
        writer.WritePropertyName("outcomeMeasure");
        writer.WriteStartArray();

        foreach (ResearchStudyOutcomeMeasure valOutcomeMeasure in OutcomeMeasure)
        {
          valOutcomeMeasure.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Result != null) && (Result.Count != 0))
      {
        writer.WritePropertyName("result");
        writer.WriteStartArray();

        foreach (Reference valResult in Result)
        {
          valResult.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((WebLocation != null) && (WebLocation.Count != 0))
      {
        writer.WritePropertyName("webLocation");
        writer.WriteStartArray();

        foreach (ResearchStudyWebLocation valWebLocation in WebLocation)
        {
          valWebLocation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "associatedParty":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AssociatedParty = new List<ResearchStudyAssociatedParty>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ResearchStudyAssociatedParty objAssociatedParty = new fhirCsR5.Models.ResearchStudyAssociatedParty();
            objAssociatedParty.DeserializeJson(ref reader, options);
            AssociatedParty.Add(objAssociatedParty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AssociatedParty.Count == 0)
          {
            AssociatedParty = null;
          }

          break;

        case "classifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Classifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objClassifier = new fhirCsR5.Models.CodeableConcept();
            objClassifier.DeserializeJson(ref reader, options);
            Classifier.Add(objClassifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Classifier.Count == 0)
          {
            Classifier = null;
          }

          break;

        case "comparisonGroup":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ComparisonGroup = new List<ResearchStudyComparisonGroup>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ResearchStudyComparisonGroup objComparisonGroup = new fhirCsR5.Models.ResearchStudyComparisonGroup();
            objComparisonGroup.DeserializeJson(ref reader, options);
            ComparisonGroup.Add(objComparisonGroup);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ComparisonGroup.Count == 0)
          {
            ComparisonGroup = null;
          }

          break;

        case "condition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Condition = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objCondition = new fhirCsR5.Models.CodeableConcept();
            objCondition.DeserializeJson(ref reader, options);
            Condition.Add(objCondition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Condition.Count == 0)
          {
            Condition = null;
          }

          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR5.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR5.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "descriptionSummary":
          DescriptionSummary = reader.GetString();
          break;

        case "_descriptionSummary":
          _DescriptionSummary = new fhirCsR5.Models.Element();
          _DescriptionSummary.DeserializeJson(ref reader, options);
          break;

        case "focus":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Focus = new List<ResearchStudyFocus>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ResearchStudyFocus objFocus = new fhirCsR5.Models.ResearchStudyFocus();
            objFocus.DeserializeJson(ref reader, options);
            Focus.Add(objFocus);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Focus.Count == 0)
          {
            Focus = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "keyword":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Keyword = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objKeyword = new fhirCsR5.Models.CodeableConcept();
            objKeyword.DeserializeJson(ref reader, options);
            Keyword.Add(objKeyword);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Keyword.Count == 0)
          {
            Keyword = null;
          }

          break;

        case "label":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Label = new List<ResearchStudyLabel>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ResearchStudyLabel objLabel = new fhirCsR5.Models.ResearchStudyLabel();
            objLabel.DeserializeJson(ref reader, options);
            Label.Add(objLabel);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Label.Count == 0)
          {
            Label = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Annotation objNote = new fhirCsR5.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "objective":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Objective = new List<ResearchStudyObjective>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ResearchStudyObjective objObjective = new fhirCsR5.Models.ResearchStudyObjective();
            objObjective.DeserializeJson(ref reader, options);
            Objective.Add(objObjective);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Objective.Count == 0)
          {
            Objective = null;
          }

          break;

        case "outcomeMeasure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          OutcomeMeasure = new List<ResearchStudyOutcomeMeasure>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ResearchStudyOutcomeMeasure objOutcomeMeasure = new fhirCsR5.Models.ResearchStudyOutcomeMeasure();
            objOutcomeMeasure.DeserializeJson(ref reader, options);
            OutcomeMeasure.Add(objOutcomeMeasure);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (OutcomeMeasure.Count == 0)
          {
            OutcomeMeasure = null;
          }

          break;

        case "partOf":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PartOf = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objPartOf = new fhirCsR5.Models.Reference();
            objPartOf.DeserializeJson(ref reader, options);
            PartOf.Add(objPartOf);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PartOf.Count == 0)
          {
            PartOf = null;
          }

          break;

        case "period":
          Period = new fhirCsR5.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "phase":
          Phase = new fhirCsR5.Models.CodeableConcept();
          Phase.DeserializeJson(ref reader, options);
          break;

        case "primaryPurposeType":
          PrimaryPurposeType = new fhirCsR5.Models.CodeableConcept();
          PrimaryPurposeType.DeserializeJson(ref reader, options);
          break;

        case "progressStatus":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProgressStatus = new List<ResearchStudyProgressStatus>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ResearchStudyProgressStatus objProgressStatus = new fhirCsR5.Models.ResearchStudyProgressStatus();
            objProgressStatus.DeserializeJson(ref reader, options);
            ProgressStatus.Add(objProgressStatus);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProgressStatus.Count == 0)
          {
            ProgressStatus = null;
          }

          break;

        case "protocol":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Protocol = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objProtocol = new fhirCsR5.Models.Reference();
            objProtocol.DeserializeJson(ref reader, options);
            Protocol.Add(objProtocol);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Protocol.Count == 0)
          {
            Protocol = null;
          }

          break;

        case "recruitment":
          Recruitment = new fhirCsR5.Models.ResearchStudyRecruitment();
          Recruitment.DeserializeJson(ref reader, options);
          break;

        case "region":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Region = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objRegion = new fhirCsR5.Models.CodeableConcept();
            objRegion.DeserializeJson(ref reader, options);
            Region.Add(objRegion);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Region.Count == 0)
          {
            Region = null;
          }

          break;

        case "relatedArtifact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedArtifact = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.RelatedArtifact objRelatedArtifact = new fhirCsR5.Models.RelatedArtifact();
            objRelatedArtifact.DeserializeJson(ref reader, options);
            RelatedArtifact.Add(objRelatedArtifact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedArtifact.Count == 0)
          {
            RelatedArtifact = null;
          }

          break;

        case "result":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Result = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objResult = new fhirCsR5.Models.Reference();
            objResult.DeserializeJson(ref reader, options);
            Result.Add(objResult);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Result.Count == 0)
          {
            Result = null;
          }

          break;

        case "site":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Site = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objSite = new fhirCsR5.Models.Reference();
            objSite.DeserializeJson(ref reader, options);
            Site.Add(objSite);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Site.Count == 0)
          {
            Site = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "studyDesign":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          StudyDesign = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objStudyDesign = new fhirCsR5.Models.CodeableConcept();
            objStudyDesign.DeserializeJson(ref reader, options);
            StudyDesign.Add(objStudyDesign);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (StudyDesign.Count == 0)
          {
            StudyDesign = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR5.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR5.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR5.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        case "webLocation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          WebLocation = new List<ResearchStudyWebLocation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ResearchStudyWebLocation objWebLocation = new fhirCsR5.Models.ResearchStudyWebLocation();
            objWebLocation.DeserializeJson(ref reader, options);
            WebLocation.Add(objWebLocation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (WebLocation.Count == 0)
          {
            WebLocation = null;
          }

          break;

        case "whyStopped":
          WhyStopped = new fhirCsR5.Models.CodeableConcept();
          WhyStopped.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ResearchStudy.status field
  /// </summary>
  public static class ResearchStudyStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
      "unknown",
    };
  }
}
