// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhirCsR5.Serialization;

namespace fhirCsR5.Models
{
  /// <summary>
  /// UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceUdiCarrier>))]
  public class DeviceUdiCarrier : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The AIDC form of UDIs should be scanned or otherwise used for the identification of the device whenever possible to minimize errors in records resulting from manual transcriptions. If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
    /// </summary>
    public byte[] CarrierAIDC { get; set; }
    /// <summary>
    /// If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
    /// </summary>
    public string CarrierHRF { get; set; }
    /// <summary>
    /// Extension container element for CarrierHRF
    /// </summary>
    public Element _CarrierHRF { get; set; }
    /// <summary>
    /// The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
    /// </summary>
    public string DeviceIdentifier { get; set; }
    /// <summary>
    /// Extension container element for DeviceIdentifier
    /// </summary>
    public Element _DeviceIdentifier { get; set; }
    /// <summary>
    /// A coded entry to indicate how the data was entered.
    /// </summary>
    public string EntryType { get; set; }
    /// <summary>
    /// Extension container element for EntryType
    /// </summary>
    public Element _EntryType { get; set; }
    /// <summary>
    /// Organization that is charged with issuing UDIs for devices. For example, the US FDA issuers include: 
    /// 1) GS1: http://hl7.org/fhir/NamingSystem/gs1-di, 
    /// 2) HIBCC: http://hl7.org/fhir/NamingSystem/hibcc-diI, 
    /// 3) ICCBBA for blood containers: http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 
    /// 4) ICCBA for other devices: http://hl7.org/fhir/NamingSystem/iccbba-other-di # Informationsstelle für Arzneispezialitäten (IFA GmbH) (EU only): http://hl7.org/fhir/NamingSystem/ifa-gmbh-di.
    /// </summary>
    public string Issuer { get; set; }
    /// <summary>
    /// Extension container element for Issuer
    /// </summary>
    public Element _Issuer { get; set; }
    /// <summary>
    /// The identity of the authoritative source for UDI generation within a jurisdiction. All UDIs are globally unique within a single namespace with the appropriate repository uri as the system. For example, UDIs of devices managed in the U.S. by the FDA, the value is http://hl7.org/fhir/NamingSystem/us-fda-udi or in the European Union by the European Commission http://hl7.org/fhir/NamingSystem/eu-ec-udi.
    /// </summary>
    public string Jurisdiction { get; set; }
    /// <summary>
    /// Extension container element for Jurisdiction
    /// </summary>
    public Element _Jurisdiction { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(DeviceIdentifier))
      {
        writer.WriteString("deviceIdentifier", (string)DeviceIdentifier!);
      }

      if (_DeviceIdentifier != null)
      {
        writer.WritePropertyName("_deviceIdentifier");
        _DeviceIdentifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issuer))
      {
        writer.WriteString("issuer", (string)Issuer!);
      }

      if (_Issuer != null)
      {
        writer.WritePropertyName("_issuer");
        _Issuer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Jurisdiction))
      {
        writer.WriteString("jurisdiction", (string)Jurisdiction!);
      }

      if (_Jurisdiction != null)
      {
        writer.WritePropertyName("_jurisdiction");
        _Jurisdiction.SerializeJson(writer, options);
      }

      if (CarrierAIDC != null)
      {
        writer.WriteString("carrierAIDC", System.Convert.ToBase64String(CarrierAIDC));
      }

      if (!string.IsNullOrEmpty(CarrierHRF))
      {
        writer.WriteString("carrierHRF", (string)CarrierHRF!);
      }

      if (_CarrierHRF != null)
      {
        writer.WritePropertyName("_carrierHRF");
        _CarrierHRF.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EntryType))
      {
        writer.WriteString("entryType", (string)EntryType!);
      }

      if (_EntryType != null)
      {
        writer.WritePropertyName("_entryType");
        _EntryType.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "carrierAIDC":
          CarrierAIDC = System.Convert.FromBase64String(reader.GetString());
          break;

        case "carrierHRF":
          CarrierHRF = reader.GetString();
          break;

        case "_carrierHRF":
          _CarrierHRF = new fhirCsR5.Models.Element();
          _CarrierHRF.DeserializeJson(ref reader, options);
          break;

        case "deviceIdentifier":
          DeviceIdentifier = reader.GetString();
          break;

        case "_deviceIdentifier":
          _DeviceIdentifier = new fhirCsR5.Models.Element();
          _DeviceIdentifier.DeserializeJson(ref reader, options);
          break;

        case "entryType":
          EntryType = reader.GetString();
          break;

        case "_entryType":
          _EntryType = new fhirCsR5.Models.Element();
          _EntryType.DeserializeJson(ref reader, options);
          break;

        case "issuer":
          Issuer = reader.GetString();
          break;

        case "_issuer":
          _Issuer = new fhirCsR5.Models.Element();
          _Issuer.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          Jurisdiction = reader.GetString();
          break;

        case "_jurisdiction":
          _Jurisdiction = new fhirCsR5.Models.Element();
          _Jurisdiction.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Device.udiCarrier.entryType field
  /// </summary>
  public static class DeviceUdiCarrierEntryTypeCodes {
    public const string BARCODE = "barcode";
    public const string RFID = "rfid";
    public const string MANUAL = "manual";
    public const string CARD = "card";
    public const string SELF_REPORTED = "self-reported";
    public const string ELECTRONIC_TRANSMISSION = "electronic-transmission";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "barcode",
      "rfid",
      "manual",
      "card",
      "self-reported",
      "electronic-transmission",
      "unknown",
    };
  }
  /// <summary>
  /// This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceDeviceName>))]
  public class DeviceDeviceName : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The name that identifies the device.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The type of deviceName. Note that ManufactureDeviceName means that the name is the name as given by the manufacturer, not the name of the manufacturer.
    /// RegisteredName | UserFriendlyName | PatientReportedName.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR5.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR5.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Device.deviceName.type field
  /// </summary>
  public static class DeviceDeviceNameTypeCodes {
    public const string REGISTERED_NAME = "registered-name";
    public const string USER_FRIENDLY_NAME = "user-friendly-name";
    public const string PATIENT_REPORTED_NAME = "patient-reported-name";
    public static HashSet<string> Values = new HashSet<string>() {
      "registered-name",
      "user-friendly-name",
      "patient-reported-name",
    };
  }
  /// <summary>
  /// The actual design of the device or software version running on the device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceVersion>))]
  public class DeviceVersion : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Note that the module of the device would not need to be tracked as a separate device, e.g., using different UDI, thus would typically involve one or more software modules. For example, a device may involve two software modules each on a different version.
    /// </summary>
    public Identifier Component { get; set; }
    /// <summary>
    /// The date the version was installed on the device.
    /// </summary>
    public string InstallDate { get; set; }
    /// <summary>
    /// Extension container element for InstallDate
    /// </summary>
    public Element _InstallDate { get; set; }
    /// <summary>
    /// The type of the device version, e.g. manufacturer, approved, internal.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The version text.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Component != null)
      {
        writer.WritePropertyName("component");
        Component.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(InstallDate))
      {
        writer.WriteString("installDate", (string)InstallDate!);
      }

      if (_InstallDate != null)
      {
        writer.WritePropertyName("_installDate");
        _InstallDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "component":
          Component = new fhirCsR5.Models.Identifier();
          Component.DeserializeJson(ref reader, options);
          break;

        case "installDate":
          InstallDate = reader.GetString();
          break;

        case "_installDate":
          _InstallDate = new fhirCsR5.Models.Element();
          _InstallDate.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR5.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The standards to which the device adheres and may be certified to in support of its capabilities, e.g., communication, performance, process, or measurement standards.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceSpecialization>))]
  public class DeviceSpecialization : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Kind of standards that the device adheres to, e.g., communication, performance or communication.
    /// </summary>
    public Coding Category { get; set; }
    /// <summary>
    /// Code that specifies the system that identifies the specific standard that the device adheres to.
    /// </summary>
    public CodeableConcept SystemType { get; set; }
    /// <summary>
    /// The version of the standard that is used to operate and communicate.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (SystemType != null)
      {
        writer.WritePropertyName("systemType");
        SystemType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = new fhirCsR5.Models.Coding();
          Category.DeserializeJson(ref reader, options);
          break;

        case "systemType":
          SystemType = new fhirCsR5.Models.CodeableConcept();
          SystemType.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR5.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Characteristics or features of the device that are otherwise not captured in available attributes, e.g., actual configuration settings, time or timing attributes, resolution, accuracy, and physical attributes.  The focus is on properties of the device actually in use while DeviceDefinition focuses on properties that are available to be used.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceProperty>))]
  public class DeviceProperty : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Code that specifies the property being represented. No codes are specified but the MDC codes are an example: https://terminology.hl7.org/MDC.html.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The string is used for properties that are intrinsically text, such as warning text, or assemlby instructions. CodeableConcept.text also supports unencoded text but should be used where the characteristic is a concept that might be coded but there is no assigned code for the present value. For example, a security class can be a code like 'Class 1' but in some cases may contain a string like 'Depending on the settings' - in this case the property is normally coded but this is an exception
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// The string is used for properties that are intrinsically text, such as warning text, or assemlby instructions. CodeableConcept.text also supports unencoded text but should be used where the characteristic is a concept that might be coded but there is no assigned code for the present value. For example, a security class can be a code like 'Class 1' but in some cases may contain a string like 'Depending on the settings' - in this case the property is normally coded but this is an exception
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// The string is used for properties that are intrinsically text, such as warning text, or assemlby instructions. CodeableConcept.text also supports unencoded text but should be used where the characteristic is a concept that might be coded but there is no assigned code for the present value. For example, a security class can be a code like 'Class 1' but in some cases may contain a string like 'Depending on the settings' - in this case the property is normally coded but this is an exception
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// The string is used for properties that are intrinsically text, such as warning text, or assemlby instructions. CodeableConcept.text also supports unencoded text but should be used where the characteristic is a concept that might be coded but there is no assigned code for the present value. For example, a security class can be a code like 'Class 1' but in some cases may contain a string like 'Depending on the settings' - in this case the property is normally coded but this is an exception
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// Extension container element for ValueBoolean
    /// </summary>
    public Element _ValueBoolean { get; set; }
    /// <summary>
    /// The string is used for properties that are intrinsically text, such as warning text, or assemlby instructions. CodeableConcept.text also supports unencoded text but should be used where the characteristic is a concept that might be coded but there is no assigned code for the present value. For example, a security class can be a code like 'Class 1' but in some cases may contain a string like 'Depending on the settings' - in this case the property is normally coded but this is an exception
    /// </summary>
    public int? ValueInteger { get; set; }
    /// <summary>
    /// Extension container element for ValueInteger
    /// </summary>
    public Element _ValueInteger { get; set; }
    /// <summary>
    /// The string is used for properties that are intrinsically text, such as warning text, or assemlby instructions. CodeableConcept.text also supports unencoded text but should be used where the characteristic is a concept that might be coded but there is no assigned code for the present value. For example, a security class can be a code like 'Class 1' but in some cases may contain a string like 'Depending on the settings' - in this case the property is normally coded but this is an exception
    /// </summary>
    public Range ValueRange { get; set; }
    /// <summary>
    /// The string is used for properties that are intrinsically text, such as warning text, or assemlby instructions. CodeableConcept.text also supports unencoded text but should be used where the characteristic is a concept that might be coded but there is no assigned code for the present value. For example, a security class can be a code like 'Class 1' but in some cases may contain a string like 'Depending on the settings' - in this case the property is normally coded but this is an exception
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueCodeableConcept != null)
      {
        writer.WritePropertyName("valueCodeableConcept");
        ValueCodeableConcept.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (_ValueBoolean != null)
      {
        writer.WritePropertyName("_valueBoolean");
        _ValueBoolean.SerializeJson(writer, options);
      }

      if (ValueInteger != null)
      {
        writer.WriteNumber("valueInteger", (int)ValueInteger!);
      }

      if (_ValueInteger != null)
      {
        writer.WritePropertyName("_valueInteger");
        _ValueInteger.SerializeJson(writer, options);
      }

      if (ValueRange != null)
      {
        writer.WritePropertyName("valueRange");
        ValueRange.SerializeJson(writer, options);
      }

      if (ValueAttachment != null)
      {
        writer.WritePropertyName("valueAttachment");
        ValueAttachment.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR5.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR5.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new fhirCsR5.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR5.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "_valueBoolean":
          _ValueBoolean = new fhirCsR5.Models.Element();
          _ValueBoolean.DeserializeJson(ref reader, options);
          break;

        case "valueInteger":
          ValueInteger = reader.GetInt32();
          break;

        case "_valueInteger":
          _ValueInteger = new fhirCsR5.Models.Element();
          _ValueInteger.DeserializeJson(ref reader, options);
          break;

        case "valueRange":
          ValueRange = new fhirCsR5.Models.Range();
          ValueRange.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          ValueAttachment = new fhirCsR5.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The status of the device itself - whether it is switched on, or activated, etc.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceOperation>))]
  public class DeviceOperation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The series of occurrences that repeats during the operation of the device.
    /// </summary>
    public Count Cycle { get; set; }
    /// <summary>
    /// A measurement of time during the device's operation (e.g., days, hours, mins, etc).
    /// </summary>
    public Duration Duration { get; set; }
    /// <summary>
    /// The designated condition for performing a task with the device.
    /// </summary>
    public CodeableConcept Mode { get; set; }
    /// <summary>
    /// The individual performing the action enabled by the device.
    /// </summary>
    public List<Reference> Operator { get; set; }
    /// <summary>
    /// The state or condition of the device's operation.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// The reasons given for the current operational status - i.e. why is the device switched on etc.
    /// </summary>
    public List<CodeableConcept> StatusReason { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if ((StatusReason != null) && (StatusReason.Count != 0))
      {
        writer.WritePropertyName("statusReason");
        writer.WriteStartArray();

        foreach (CodeableConcept valStatusReason in StatusReason)
        {
          valStatusReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Operator != null) && (Operator.Count != 0))
      {
        writer.WritePropertyName("operator");
        writer.WriteStartArray();

        foreach (Reference valOperator in Operator)
        {
          valOperator.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Mode != null)
      {
        writer.WritePropertyName("mode");
        Mode.SerializeJson(writer, options);
      }

      if (Cycle != null)
      {
        writer.WritePropertyName("cycle");
        Cycle.SerializeJson(writer, options);
      }

      if (Duration != null)
      {
        writer.WritePropertyName("duration");
        Duration.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "cycle":
          Cycle = new fhirCsR5.Models.Count();
          Cycle.DeserializeJson(ref reader, options);
          break;

        case "duration":
          Duration = new fhirCsR5.Models.Duration();
          Duration.DeserializeJson(ref reader, options);
          break;

        case "mode":
          Mode = new fhirCsR5.Models.CodeableConcept();
          Mode.DeserializeJson(ref reader, options);
          break;

        case "operator":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Operator = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objOperator = new fhirCsR5.Models.Reference();
            objOperator.DeserializeJson(ref reader, options);
            Operator.Add(objOperator);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Operator.Count == 0)
          {
            Operator = null;
          }

          break;

        case "status":
          Status = new fhirCsR5.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "statusReason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          StatusReason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objStatusReason = new fhirCsR5.Models.CodeableConcept();
            objStatusReason.DeserializeJson(ref reader, options);
            StatusReason.Add(objStatusReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (StatusReason.Count == 0)
          {
            StatusReason = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The details about the device when it is affixed or inside of a patient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<DeviceAssociation>))]
  public class DeviceAssociation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The current anatomical location of the device in/on the humanSubject where it is attached or placed.
    /// </summary>
    public CodeableReference BodyStructure { get; set; }
    /// <summary>
    /// The individual to whom the device is affixed or inserted in their body.
    /// </summary>
    public Reference HumanSubject { get; set; }
    /// <summary>
    /// The state of the usage or application of the device.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// The reasons given for the current association status - i.e. why is the device explanted, or attached to the patient, etc.
    /// </summary>
    public List<CodeableConcept> StatusReason { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR5.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if ((StatusReason != null) && (StatusReason.Count != 0))
      {
        writer.WritePropertyName("statusReason");
        writer.WriteStartArray();

        foreach (CodeableConcept valStatusReason in StatusReason)
        {
          valStatusReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (HumanSubject != null)
      {
        writer.WritePropertyName("humanSubject");
        HumanSubject.SerializeJson(writer, options);
      }

      if (BodyStructure != null)
      {
        writer.WritePropertyName("bodyStructure");
        BodyStructure.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "bodyStructure":
          BodyStructure = new fhirCsR5.Models.CodeableReference();
          BodyStructure.DeserializeJson(ref reader, options);
          break;

        case "humanSubject":
          HumanSubject = new fhirCsR5.Models.Reference();
          HumanSubject.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = new fhirCsR5.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "statusReason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          StatusReason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objStatusReason = new fhirCsR5.Models.CodeableConcept();
            objStatusReason.DeserializeJson(ref reader, options);
            StatusReason.Add(objStatusReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (StatusReason.Count == 0)
          {
            StatusReason = null;
          }

          break;

        default:
          ((fhirCsR5.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR5.Serialization.JsonStreamComponentConverter<Device>))]
  public class Device : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Device";
    /// <summary>
    /// The details about the device when it is affixed or inside of a patient.
    /// </summary>
    public List<DeviceAssociation> Association { get; set; }
    /// <summary>
    /// The availability of the device.
    /// </summary>
    public CodeableConcept AvailabilityStatus { get; set; }
    /// <summary>
    /// Necessary to support mandatory requirements for traceability from donor/source to recipient and vice versa, while also satisfying donor anonymity requirements. The element is defined consistently across BiologicallyDerivedProduct, NutritionProduct, and Device.  The identifier references an event that links to a single biological entity such as a blood donor, or to multiple biological entities (e.g. when the product is an embryo or a pooled platelet product).  A single biologicalSourceEvent identifier may appear on multiple products of many types derived from a single donation event or source extraction.  As an example, a single donation event may provide 2 kidneys and a liver for organ transplantation, 2 corneas for eye surgery, heart valves and arterial tissue for cardiovascular surgery, multiple skin grafts, tendons, multiple shaped bone grafts and a large number of bone putty/paste products; and each of them may be assigned to the same biological source event identifier.
    /// </summary>
    public Identifier BiologicalSourceEvent { get; set; }
    /// <summary>
    /// Devices may be associated with one or more categories.
    /// </summary>
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// used for troubleshooting etc.
    /// </summary>
    public List<ContactPoint> Contact { get; set; }
    /// <summary>
    /// The reference to the definition for the device.
    /// </summary>
    public CodeableReference Definition { get; set; }
    /// <summary>
    /// This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
    /// </summary>
    public List<DeviceDeviceName> DeviceName { get; set; }
    /// <summary>
    /// The name used to display by default when the device is referenced. Based on intent of use by the resource creator, this may reflect one of the names in Device.deviceName, or may be another simple name.
    /// </summary>
    public string DisplayName { get; set; }
    /// <summary>
    /// Extension container element for DisplayName
    /// </summary>
    public Element _DisplayName { get; set; }
    /// <summary>
    /// Technical endpoints providing access to services provided by the device defined at this resource.
    /// </summary>
    public List<Reference> Endpoint { get; set; }
    /// <summary>
    /// The date and time beyond which this device is no longer valid or should not be used (if applicable).
    /// </summary>
    public string ExpirationDate { get; set; }
    /// <summary>
    /// Extension container element for ExpirationDate
    /// </summary>
    public Element _ExpirationDate { get; set; }
    /// <summary>
    /// The linked device acting as a communication/data collector, translator or controller for the current device (e.g., mobile phone application that relays a blood pressure device's data).
    /// </summary>
    public List<CodeableReference> Gateway { get; set; }
    /// <summary>
    /// Certain attributes, like serial number and UDI Carrier (the HRF or AIDC barcode string) are not device instance identifiers as they are not consistently able to uniquely identify the instance of a device, thus are not appropriate to be used to value Device.identifier. The barcode string from a barcode present on a device label or package may identify the instance, include names given to the device in local usage, or may identify the type of device. If the identifier identifies the type of device, Device.type element should be used. The identifier is typically valued if the serialNumber or lotNumber is not valued and represents a different type of identifier.  However, it is permissible to still include those identifiers in DeviceDefinition.identifier with the appropriate identifier.type.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The place where the device can be found.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// Lot number assigned by the manufacturer.
    /// </summary>
    public string LotNumber { get; set; }
    /// <summary>
    /// Extension container element for LotNumber
    /// </summary>
    public Element _LotNumber { get; set; }
    /// <summary>
    /// The date and time when the device was manufactured.
    /// </summary>
    public string ManufactureDate { get; set; }
    /// <summary>
    /// Extension container element for ManufactureDate
    /// </summary>
    public Element _ManufactureDate { get; set; }
    /// <summary>
    /// A name of the manufacturer or entity legally responsible for the device.
    /// </summary>
    public string Manufacturer { get; set; }
    /// <summary>
    /// Extension container element for Manufacturer
    /// </summary>
    public Element _Manufacturer { get; set; }
    /// <summary>
    /// The manufacturer's model number for the device.
    /// </summary>
    public string ModelNumber { get; set; }
    /// <summary>
    /// Extension container element for ModelNumber
    /// </summary>
    public Element _ModelNumber { get; set; }
    /// <summary>
    /// Descriptive information, usage information or implantation information that is not captured in an existing element.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// The status of the device itself - whether it is switched on, or activated, etc.
    /// </summary>
    public List<DeviceOperation> Operation { get; set; }
    /// <summary>
    /// An organization that is responsible for the provision and ongoing maintenance of the device.
    /// </summary>
    public Reference Owner { get; set; }
    /// <summary>
    /// For example a vital signs monitor (parent) where three separate modules can be plugged into such as interchangeable blood pressure, oximeter, temperature modules.  These modules are represented as devices with the .parent valued to the vital signs monitor when plugged in.
    /// </summary>
    public Reference Parent { get; set; }
    /// <summary>
    /// Alphanumeric Maximum 20.
    /// </summary>
    public string PartNumber { get; set; }
    /// <summary>
    /// Extension container element for PartNumber
    /// </summary>
    public Element _PartNumber { get; set; }
    /// <summary>
    /// Characteristics or features of the device that are otherwise not captured in available attributes, e.g., actual configuration settings, time or timing attributes, resolution, accuracy, and physical attributes.  The focus is on properties of the device actually in use while DeviceDefinition focuses on properties that are available to be used.
    /// </summary>
    public List<DeviceProperty> Property { get; set; }
    /// <summary>
    /// Provides additional safety characteristics about a medical device.  For example devices containing latex.
    /// </summary>
    public List<CodeableConcept> Safety { get; set; }
    /// <summary>
    /// Alphanumeric Maximum 20. While a serial number is a type of identifier, in the context of devices for which a UDI is required, thus a serial number may be part of the production identifier, it is more informative to have the serial number as a dedicated attribute together with the other UDI production identifier.  When the device is not subject to including the UDI (e.g., its presence and exchange is not mandated by local regulatory requirements or specific use case at hand), thus the concept of production identifiers is not relevant as a set, it remains helpful for consistency to still use Device.serialNumber rather than using Device.identifier with an appropriate type.  Systems that do not realize an identifier is a serial number may place it in Device.identifier or if the identifier.system is known for the serial number, it may also be populated in the Device.identifier as a globally unique id_.
    /// </summary>
    public string SerialNumber { get; set; }
    /// <summary>
    /// Extension container element for SerialNumber
    /// </summary>
    public Element _SerialNumber { get; set; }
    /// <summary>
    /// The standards to which the device adheres and may be certified to in support of its capabilities, e.g., communication, performance, process, or measurement standards.
    /// </summary>
    public List<DeviceSpecialization> Specialization { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the device (record)as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Multiple device types are use when a device is categorized in more than one context – for example, hybrid devices in which the device is both of type gateway and sensor.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
    /// </summary>
    public List<DeviceUdiCarrier> UdiCarrier { get; set; }
    /// <summary>
    /// If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// The actual design of the device or software version running on the device.
    /// </summary>
    public List<DeviceVersion> Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR5.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(DisplayName))
      {
        writer.WriteString("displayName", (string)DisplayName!);
      }

      if (_DisplayName != null)
      {
        writer.WritePropertyName("_displayName");
        _DisplayName.SerializeJson(writer, options);
      }

      if (Definition != null)
      {
        writer.WritePropertyName("definition");
        Definition.SerializeJson(writer, options);
      }

      if ((UdiCarrier != null) && (UdiCarrier.Count != 0))
      {
        writer.WritePropertyName("udiCarrier");
        writer.WriteStartArray();

        foreach (DeviceUdiCarrier valUdiCarrier in UdiCarrier)
        {
          valUdiCarrier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (AvailabilityStatus != null)
      {
        writer.WritePropertyName("availabilityStatus");
        AvailabilityStatus.SerializeJson(writer, options);
      }

      if (BiologicalSourceEvent != null)
      {
        writer.WritePropertyName("biologicalSourceEvent");
        BiologicalSourceEvent.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Manufacturer))
      {
        writer.WriteString("manufacturer", (string)Manufacturer!);
      }

      if (_Manufacturer != null)
      {
        writer.WritePropertyName("_manufacturer");
        _Manufacturer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ManufactureDate))
      {
        writer.WriteString("manufactureDate", (string)ManufactureDate!);
      }

      if (_ManufactureDate != null)
      {
        writer.WritePropertyName("_manufactureDate");
        _ManufactureDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ExpirationDate))
      {
        writer.WriteString("expirationDate", (string)ExpirationDate!);
      }

      if (_ExpirationDate != null)
      {
        writer.WritePropertyName("_expirationDate");
        _ExpirationDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LotNumber))
      {
        writer.WriteString("lotNumber", (string)LotNumber!);
      }

      if (_LotNumber != null)
      {
        writer.WritePropertyName("_lotNumber");
        _LotNumber.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SerialNumber))
      {
        writer.WriteString("serialNumber", (string)SerialNumber!);
      }

      if (_SerialNumber != null)
      {
        writer.WritePropertyName("_serialNumber");
        _SerialNumber.SerializeJson(writer, options);
      }

      if ((DeviceName != null) && (DeviceName.Count != 0))
      {
        writer.WritePropertyName("deviceName");
        writer.WriteStartArray();

        foreach (DeviceDeviceName valDeviceName in DeviceName)
        {
          valDeviceName.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ModelNumber))
      {
        writer.WriteString("modelNumber", (string)ModelNumber!);
      }

      if (_ModelNumber != null)
      {
        writer.WritePropertyName("_modelNumber");
        _ModelNumber.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PartNumber))
      {
        writer.WriteString("partNumber", (string)PartNumber!);
      }

      if (_PartNumber != null)
      {
        writer.WritePropertyName("_partNumber");
        _PartNumber.SerializeJson(writer, options);
      }

      if ((Category != null) && (Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();

        foreach (CodeableConcept valCategory in Category)
        {
          valCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Version != null) && (Version.Count != 0))
      {
        writer.WritePropertyName("version");
        writer.WriteStartArray();

        foreach (DeviceVersion valVersion in Version)
        {
          valVersion.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Specialization != null) && (Specialization.Count != 0))
      {
        writer.WritePropertyName("specialization");
        writer.WriteStartArray();

        foreach (DeviceSpecialization valSpecialization in Specialization)
        {
          valSpecialization.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Property != null) && (Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();

        foreach (DeviceProperty valProperty in Property)
        {
          valProperty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Operation != null) && (Operation.Count != 0))
      {
        writer.WritePropertyName("operation");
        writer.WriteStartArray();

        foreach (DeviceOperation valOperation in Operation)
        {
          valOperation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Association != null) && (Association.Count != 0))
      {
        writer.WritePropertyName("association");
        writer.WriteStartArray();

        foreach (DeviceAssociation valAssociation in Association)
        {
          valAssociation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Owner != null)
      {
        writer.WritePropertyName("owner");
        Owner.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactPoint valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Endpoint != null) && (Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();

        foreach (Reference valEndpoint in Endpoint)
        {
          valEndpoint.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Gateway != null) && (Gateway.Count != 0))
      {
        writer.WritePropertyName("gateway");
        writer.WriteStartArray();

        foreach (CodeableReference valGateway in Gateway)
        {
          valGateway.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Safety != null) && (Safety.Count != 0))
      {
        writer.WritePropertyName("safety");
        writer.WriteStartArray();

        foreach (CodeableConcept valSafety in Safety)
        {
          valSafety.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Parent != null)
      {
        writer.WritePropertyName("parent");
        Parent.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "association":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Association = new List<DeviceAssociation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceAssociation objAssociation = new fhirCsR5.Models.DeviceAssociation();
            objAssociation.DeserializeJson(ref reader, options);
            Association.Add(objAssociation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Association.Count == 0)
          {
            Association = null;
          }

          break;

        case "availabilityStatus":
          AvailabilityStatus = new fhirCsR5.Models.CodeableConcept();
          AvailabilityStatus.DeserializeJson(ref reader, options);
          break;

        case "biologicalSourceEvent":
          BiologicalSourceEvent = new fhirCsR5.Models.Identifier();
          BiologicalSourceEvent.DeserializeJson(ref reader, options);
          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objCategory = new fhirCsR5.Models.CodeableConcept();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.ContactPoint objContact = new fhirCsR5.Models.ContactPoint();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "definition":
          Definition = new fhirCsR5.Models.CodeableReference();
          Definition.DeserializeJson(ref reader, options);
          break;

        case "deviceName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DeviceName = new List<DeviceDeviceName>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceDeviceName objDeviceName = new fhirCsR5.Models.DeviceDeviceName();
            objDeviceName.DeserializeJson(ref reader, options);
            DeviceName.Add(objDeviceName);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DeviceName.Count == 0)
          {
            DeviceName = null;
          }

          break;

        case "displayName":
          DisplayName = reader.GetString();
          break;

        case "_displayName":
          _DisplayName = new fhirCsR5.Models.Element();
          _DisplayName.DeserializeJson(ref reader, options);
          break;

        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Endpoint = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Reference objEndpoint = new fhirCsR5.Models.Reference();
            objEndpoint.DeserializeJson(ref reader, options);
            Endpoint.Add(objEndpoint);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Endpoint.Count == 0)
          {
            Endpoint = null;
          }

          break;

        case "expirationDate":
          ExpirationDate = reader.GetString();
          break;

        case "_expirationDate":
          _ExpirationDate = new fhirCsR5.Models.Element();
          _ExpirationDate.DeserializeJson(ref reader, options);
          break;

        case "gateway":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Gateway = new List<CodeableReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableReference objGateway = new fhirCsR5.Models.CodeableReference();
            objGateway.DeserializeJson(ref reader, options);
            Gateway.Add(objGateway);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Gateway.Count == 0)
          {
            Gateway = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Identifier objIdentifier = new fhirCsR5.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "location":
          Location = new fhirCsR5.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "lotNumber":
          LotNumber = reader.GetString();
          break;

        case "_lotNumber":
          _LotNumber = new fhirCsR5.Models.Element();
          _LotNumber.DeserializeJson(ref reader, options);
          break;

        case "manufactureDate":
          ManufactureDate = reader.GetString();
          break;

        case "_manufactureDate":
          _ManufactureDate = new fhirCsR5.Models.Element();
          _ManufactureDate.DeserializeJson(ref reader, options);
          break;

        case "manufacturer":
          Manufacturer = reader.GetString();
          break;

        case "_manufacturer":
          _Manufacturer = new fhirCsR5.Models.Element();
          _Manufacturer.DeserializeJson(ref reader, options);
          break;

        case "modelNumber":
          ModelNumber = reader.GetString();
          break;

        case "_modelNumber":
          _ModelNumber = new fhirCsR5.Models.Element();
          _ModelNumber.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.Annotation objNote = new fhirCsR5.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "operation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Operation = new List<DeviceOperation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceOperation objOperation = new fhirCsR5.Models.DeviceOperation();
            objOperation.DeserializeJson(ref reader, options);
            Operation.Add(objOperation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Operation.Count == 0)
          {
            Operation = null;
          }

          break;

        case "owner":
          Owner = new fhirCsR5.Models.Reference();
          Owner.DeserializeJson(ref reader, options);
          break;

        case "parent":
          Parent = new fhirCsR5.Models.Reference();
          Parent.DeserializeJson(ref reader, options);
          break;

        case "partNumber":
          PartNumber = reader.GetString();
          break;

        case "_partNumber":
          _PartNumber = new fhirCsR5.Models.Element();
          _PartNumber.DeserializeJson(ref reader, options);
          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Property = new List<DeviceProperty>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceProperty objProperty = new fhirCsR5.Models.DeviceProperty();
            objProperty.DeserializeJson(ref reader, options);
            Property.Add(objProperty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Property.Count == 0)
          {
            Property = null;
          }

          break;

        case "safety":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Safety = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objSafety = new fhirCsR5.Models.CodeableConcept();
            objSafety.DeserializeJson(ref reader, options);
            Safety.Add(objSafety);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Safety.Count == 0)
          {
            Safety = null;
          }

          break;

        case "serialNumber":
          SerialNumber = reader.GetString();
          break;

        case "_serialNumber":
          _SerialNumber = new fhirCsR5.Models.Element();
          _SerialNumber.DeserializeJson(ref reader, options);
          break;

        case "specialization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Specialization = new List<DeviceSpecialization>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceSpecialization objSpecialization = new fhirCsR5.Models.DeviceSpecialization();
            objSpecialization.DeserializeJson(ref reader, options);
            Specialization.Add(objSpecialization);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Specialization.Count == 0)
          {
            Specialization = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR5.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.CodeableConcept objType = new fhirCsR5.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        case "udiCarrier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UdiCarrier = new List<DeviceUdiCarrier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceUdiCarrier objUdiCarrier = new fhirCsR5.Models.DeviceUdiCarrier();
            objUdiCarrier.DeserializeJson(ref reader, options);
            UdiCarrier.Add(objUdiCarrier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UdiCarrier.Count == 0)
          {
            UdiCarrier = null;
          }

          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR5.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Version = new List<DeviceVersion>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR5.Models.DeviceVersion objVersion = new fhirCsR5.Models.DeviceVersion();
            objVersion.DeserializeJson(ref reader, options);
            Version.Add(objVersion);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Version.Count == 0)
          {
            Version = null;
          }

          break;

        default:
          ((fhirCsR5.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Device.status field
  /// </summary>
  public static class DeviceStatusCodes {
    public const string ACTIVE = "active";
    public const string INACTIVE = "inactive";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public static HashSet<string> Values = new HashSet<string>() {
      "active",
      "inactive",
      "entered-in-error",
    };
  }
}
