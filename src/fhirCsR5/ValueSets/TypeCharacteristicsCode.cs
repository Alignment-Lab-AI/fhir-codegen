// <auto-generated />
// Built from: hl7.fhir.r5.core version: 5.0.0-ballot
  // Option: "NAMESPACE" = "fhirCsR5"

using fhirCsR5.Models;

namespace fhirCsR5.ValueSets
{
  /// <summary>
  /// Description Needed Here
  /// </summary>
  public static class TypeCharacteristicsCodeCodes
  {
    /// <summary>
    /// The type can be bound to a terminology. Note that a classic binding has system|version|code|display, but not all bindable types carry all four of these, and how they are bound varies, so an additional extension is required to enable tools to work with this content
    /// </summary>
    public static readonly Coding CanBind = new Coding
    {
      Code = "can-bind",
      Display = "Can Bind",
      System = "http://hl7.org/fhir/type-characteristics-code"
    };
    /// <summary>
    /// The content is uncontrolled human readable text that may make sense to translate
    /// </summary>
    public static readonly Coding DoTranslations = new Coding
    {
      Code = "do-translations",
      Display = "Do Translations",
      System = "http://hl7.org/fhir/type-characteristics-code"
    };
    /// <summary>
    /// The type has variable length and be constrained by it's length. In principle, any type can be constrained by the number of characters to represent it, but this is not meaningful for numbers or attachments
    /// </summary>
    public static readonly Coding HasLength = new Coding
    {
      Code = "has-length",
      Display = "Has Length",
      System = "http://hl7.org/fhir/type-characteristics-code"
    };
    /// <summary>
    /// The type has a value domain that is a range, and can be associated with allowable min/max values on it's ElementDefinitions
    /// </summary>
    public static readonly Coding HasRange = new Coding
    {
      Code = "has-range",
      Display = "Has Range",
      System = "http://hl7.org/fhir/type-characteristics-code"
    };
    /// <summary>
    /// The type can be constrained by the number of bytes it takes to represent the content. This is usually applied to content that is compressed or interpreted, and there's no fixed relationship between the number of bytes of content, and the number of characters it represents
    /// </summary>
    public static readonly Coding HasSize = new Coding
    {
      Code = "has-size",
      Display = "Has Size",
      System = "http://hl7.org/fhir/type-characteristics-code"
    };
    /// <summary>
    /// The type is reference to external content else where that can have a type. This is associated with the use of ElementDefinition.type.targetProfile
    /// </summary>
    public static readonly Coding HasTarget = new Coding
    {
      Code = "has-target",
      Display = "Has Target",
      System = "http://hl7.org/fhir/type-characteristics-code"
    };
    /// <summary>
    /// The content has units of measure (UCUM, by implication) and it may be useful to constrain the units by some valueset
    /// </summary>
    public static readonly Coding HasUnits = new Coding
    {
      Code = "has-units",
      Display = "Has Units",
      System = "http://hl7.org/fhir/type-characteristics-code"
    };
    /// <summary>
    /// The type is a continuous distribution. These types have issues associated with precision and equality, and can have a specified number of max decimal places (via an extension)
    /// </summary>
    public static readonly Coding IsContinuous = new Coding
    {
      Code = "is-continuous",
      Display = "Is Continuous",
      System = "http://hl7.org/fhir/type-characteristics-code"
    };

    /// <summary>
    /// Literal for code: CanBind
    /// </summary>
    public const string LiteralCanBind = "can-bind";

    /// <summary>
    /// Literal for code: TypeCharacteristicsCodeCanBind
    /// </summary>
    public const string LiteralTypeCharacteristicsCodeCanBind = "http://hl7.org/fhir/type-characteristics-code#can-bind";

    /// <summary>
    /// Literal for code: DoTranslations
    /// </summary>
    public const string LiteralDoTranslations = "do-translations";

    /// <summary>
    /// Literal for code: TypeCharacteristicsCodeDoTranslations
    /// </summary>
    public const string LiteralTypeCharacteristicsCodeDoTranslations = "http://hl7.org/fhir/type-characteristics-code#do-translations";

    /// <summary>
    /// Literal for code: HasLength
    /// </summary>
    public const string LiteralHasLength = "has-length";

    /// <summary>
    /// Literal for code: TypeCharacteristicsCodeHasLength
    /// </summary>
    public const string LiteralTypeCharacteristicsCodeHasLength = "http://hl7.org/fhir/type-characteristics-code#has-length";

    /// <summary>
    /// Literal for code: HasRange
    /// </summary>
    public const string LiteralHasRange = "has-range";

    /// <summary>
    /// Literal for code: TypeCharacteristicsCodeHasRange
    /// </summary>
    public const string LiteralTypeCharacteristicsCodeHasRange = "http://hl7.org/fhir/type-characteristics-code#has-range";

    /// <summary>
    /// Literal for code: HasSize
    /// </summary>
    public const string LiteralHasSize = "has-size";

    /// <summary>
    /// Literal for code: TypeCharacteristicsCodeHasSize
    /// </summary>
    public const string LiteralTypeCharacteristicsCodeHasSize = "http://hl7.org/fhir/type-characteristics-code#has-size";

    /// <summary>
    /// Literal for code: HasTarget
    /// </summary>
    public const string LiteralHasTarget = "has-target";

    /// <summary>
    /// Literal for code: TypeCharacteristicsCodeHasTarget
    /// </summary>
    public const string LiteralTypeCharacteristicsCodeHasTarget = "http://hl7.org/fhir/type-characteristics-code#has-target";

    /// <summary>
    /// Literal for code: HasUnits
    /// </summary>
    public const string LiteralHasUnits = "has-units";

    /// <summary>
    /// Literal for code: TypeCharacteristicsCodeHasUnits
    /// </summary>
    public const string LiteralTypeCharacteristicsCodeHasUnits = "http://hl7.org/fhir/type-characteristics-code#has-units";

    /// <summary>
    /// Literal for code: IsContinuous
    /// </summary>
    public const string LiteralIsContinuous = "is-continuous";

    /// <summary>
    /// Literal for code: TypeCharacteristicsCodeIsContinuous
    /// </summary>
    public const string LiteralTypeCharacteristicsCodeIsContinuous = "http://hl7.org/fhir/type-characteristics-code#is-continuous";

    /// <summary>
    /// Dictionary for looking up TypeCharacteristicsCode Codings based on Codes
    /// </summary>
    public static Dictionary<string, Coding> Values = new Dictionary<string, Coding>() {
      { "can-bind", CanBind }, 
      { "http://hl7.org/fhir/type-characteristics-code#can-bind", CanBind }, 
      { "do-translations", DoTranslations }, 
      { "http://hl7.org/fhir/type-characteristics-code#do-translations", DoTranslations }, 
      { "has-length", HasLength }, 
      { "http://hl7.org/fhir/type-characteristics-code#has-length", HasLength }, 
      { "has-range", HasRange }, 
      { "http://hl7.org/fhir/type-characteristics-code#has-range", HasRange }, 
      { "has-size", HasSize }, 
      { "http://hl7.org/fhir/type-characteristics-code#has-size", HasSize }, 
      { "has-target", HasTarget }, 
      { "http://hl7.org/fhir/type-characteristics-code#has-target", HasTarget }, 
      { "has-units", HasUnits }, 
      { "http://hl7.org/fhir/type-characteristics-code#has-units", HasUnits }, 
      { "is-continuous", IsContinuous }, 
      { "http://hl7.org/fhir/type-characteristics-code#is-continuous", IsContinuous }, 
    };
  };
}
