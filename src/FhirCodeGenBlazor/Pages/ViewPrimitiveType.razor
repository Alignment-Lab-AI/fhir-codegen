@page "/view/primitivetype"

@using FhirCodeGenBlazor.Models
@using FhirCodeGenBlazor.Services
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@inject NavigationManager NavManager
@inject ISpecManagerWebService SpecService
@implements IDisposable
@implements IPackageVersionProvider

@if (fhirPrimitive == null)
{
    <PageTitle>FHIR Primitive</PageTitle>    
}
else
{
    <PageTitle>@fhirPrimitive.Name</PageTitle>
    @if (fhirPrimitive != null)
    {
        <MudGrid Spacing="1">
            <MudItem xs="12"><MudText Typo="Typo.h5">FHIR Primitive Type: @fhirPrimitive.Name</MudText></MudItem>

        <MudItem xs="2">Id</MudItem>
        <MudItem xs="10">@fhirPrimitive.Id</MudItem>
            <MudItem xs="2">Name</MudItem>
            <MudItem xs="10">@fhirPrimitive.Name</MudItem>

            <MudItem xs="2">Path</MudItem>
            <MudItem xs="10">@fhirPrimitive.Path</MudItem>

            <MudItem xs="2">Base Type</MudItem>
            <MudItem xs="10">@fhirPrimitive.BaseTypeName</MudItem>

            <MudItem xs="2">URL</MudItem>
            <MudItem xs="10">@fhirPrimitive.URL.ToString()</MudItem>

            <MudItem xs="2">Standard Status</MudItem>
            <MudItem xs="10">@fhirPrimitive.StandardStatus</MudItem>

            <MudItem xs="2">Short Description</MudItem>
            <MudItem xs="10">@fhirPrimitive.ShortDescription</MudItem>

            <MudItem xs="2">Comment</MudItem>
            <MudItem xs="10">@fhirPrimitive.Comment</MudItem>
        </MudGrid>
    }
}

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "packageName")]
    public string PackageName { get; set; } = "";

    /// <summary>Gets or sets the package version.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "version")]
    public string Version { get; set; } = "";

    /// <summary>Gets or sets the identifier.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "url")]
    public string Url { get; set; } = "";

    /// <summary>The directive.</summary>
    private string directive = string.Empty;

    /// <summary>The FHIR primitive.</summary>
    private FhirPrimitive? fhirPrimitive = null;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavTracker?.NotifyNav(Url, $"view/primitivetype?packageName={PackageName}&version={Version}&url={Url}", 2);
        NavManager.LocationChanged += HandleLocationChanged;

        if (string.IsNullOrEmpty(PackageName))
        {
            return;
        }

        directive = PackageName + "#" + Version;
        GetObject();
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/view/primitivetype"))
        {
            NavTracker?.NotifyNav(Url, $"view/primitivetype?packageName={PackageName}&version={Version}&url={Url}", 2);
            directive = PackageName + "#" + Version;
            GetObject();

            // manually flag state has changed in case we are in a callback / async context
            await InvokeAsync(() => StateHasChanged());
        }
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }

    private void GetObject()
    {
        if (string.IsNullOrEmpty(directive))
        {
            Console.WriteLine("Missing required directive!");
            return;
        }

        if (string.IsNullOrEmpty(Url))
        {
            Console.WriteLine("Missing required Url");
            return;
        }

        if (!SpecService.ContainsKey(directive))
        {
            Console.WriteLine($"Directive {directive} is unknown or not loaded");
            return;
        }

        fhirPrimitive = null;

        if (!SpecService[directive].TryGetArtifact(
                Url,
                out object obj,
                out FhirArtifactClassEnum fhirArtifactClass,
                out _,
                true,
                FhirArtifactClassEnum.PrimitiveType))
        {
            Console.WriteLine($"Unresolved artifact: {Url} from {PackageName}#{Version}!");
            return;
        }

        if (fhirArtifactClass != FhirArtifactClassEnum.PrimitiveType)
        {
            Console.WriteLine($"Incorrect artifact type: {Url} from {PackageName}#{Version} came back as {fhirArtifactClass}!");
            return;
        }

        fhirPrimitive = (FhirPrimitive)obj;

        // manually flag state has changed in case we are in a callback / async context
        InvokeAsync(() => StateHasChanged());
    }
}
