@page "/addpackage/"
@using FhirCodeGenBlazor.Models
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@using FhirCodeGenBlazor.Services;
@using Microsoft.Health.Fhir.SpecManager.PackageManager
@inject NavigationManager NavigationManager
@inject IPackageManagerWebService PackageService
@implements IDisposable

<PageTitle>Add Package To Cache</PageTitle>
<h4>Find And Download Package</h4>

<MudTabs Elevation="2" Centered="true" Rounded="true" ApplyEffectsToContainer="true">
    <MudTabPanel Text="Released Package">
        <MudCard Elevation="2">
            <MudCardContent>
                <MudTextField @bind-Value="@packageName"
                              Label="Package Name"
                              HelperText="Released Package Name or Canonical URL"></MudTextField>
            </MudCardContent>
            <MudCardActions>
                <MudFab OnClick="(() => LookupReleasedPackage())" StartIcon="@Icons.Filled.ManageSearch" Label="Lookup"/>
                <MudFab OnClick="(() => RequestManualDownload())" StartIcon="@Icons.Filled.DownloadForOffline" Label="Try to Load the Directive" />
            </MudCardActions>
        </MudCard>

        <MudTable
            Items="@releaseVersions"
            Dense="true"
            Striped="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Released Packages</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Directive</MudTh>
                <MudTh>Package</MudTh>
                <MudTh>Date</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    @switch (GetPackageState(context))
                    {
                        case PackageLoadStateEnum.Queued:
                        case PackageLoadStateEnum.InProgress:
                            <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" />
                            break;

                        case PackageLoadStateEnum.Unknown:
                            <MudTooltip Text="Download">
                                <MudFab
                                    StartIcon="@Icons.Filled.Download"
                                    OnClick="@(() => RequestReleasedDownload(context))"
                                    Size="Size.Small"/>
                            </MudTooltip>
                            break;

                        case PackageLoadStateEnum.NotLoaded:
                        case PackageLoadStateEnum.Loaded:
                        case PackageLoadStateEnum.Parsed:
                        default:
                            <MudTooltip Text="Download">
                                <MudFab
                                    StartIcon="@Icons.Filled.Delete"
                                    Color="Color.Error"
                                    OnClick="@(() => RequestDelete(context))"
                                    Size="Size.Small" />
                            </MudTooltip>
                            break;
                    }
                </MudTd>
                <MudTd>@GetVersionDirective(context)</MudTd>
                <MudTd>@context.URL</MudTd>
                <MudTd>@context.Date</MudTd>
                <MudTd></MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>

    <MudTabPanel Text="CI Build - FHIR IG">
        <MudCard>
            <MudCardContent>
                <MudTextField @bind-Value="@ciBranch" Label="CI Path or URL">
                </MudTextField>
                <MudText>
                    Branch information can be found via the
                    <MudLink Href="http://build.fhir.org/ig/" Target="_blank">IG Index</MudLink>. Builds must
                    appear in the index and valid values can be the path rooted at <code>ig/</code>, the branch name, or the
                    URL of the built landing page (e.g., <code>http://build.fhir.org/ig/.../index.html</code>).
                </MudText>
            </MudCardContent>
            <MudCardActions>
                <MudFab OnClick="(() => LookupCiBuild(true))" StartIcon="@Icons.Filled.ManageSearch" Label="Lookup" />

                @if (ciPackage != null)
                {
                    @if (IsCiLocal())
                    {
                        <MudFab OnClick="(() => RequestCiDelete())" StartIcon="@Icons.Filled.Delete" Label="Delete" Color="Color.Error" />
                    }

                    @switch (GetCiPackageState())
                    {
                        case PackageLoadStateEnum.Queued:
                        case PackageLoadStateEnum.InProgress:
                            <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" />
                            break;

                        case PackageLoadStateEnum.Unknown:
                        case PackageLoadStateEnum.NotLoaded:
                        case PackageLoadStateEnum.Loaded:
                        case PackageLoadStateEnum.Parsed:
                        default:
                            <MudFab OnClick="(() => RequestCiDownload())" StartIcon="@Icons.Filled.DriveFileMove" Label="Download" />
                            break;
                    }
                }
            </MudCardActions>
        </MudCard>

        @if (ciPackage != null)
        {
            <MudGrid>
                <MudItem xs="2">Name</MudItem>
                <MudItem xs="10">@ciPackage.Name</MudItem>

                <MudItem xs="2">Version</MudItem>
                <MudItem xs="10">@ciPackage.Version</MudItem>

                <MudItem xs="2">URL</MudItem>
                <MudItem xs="10">@ciPackage.URL</MudItem>

                <MudItem xs="2">Build Date</MudItem>
                <MudItem xs="10">@ciPackage.BuildDate</MudItem>

                <MudItem xs="2">Title</MudItem>
                <MudItem xs="10">@ciPackage.Title</MudItem>

                <MudItem xs="2">Description</MudItem>
                <MudItem xs="10">@ciPackage.Description</MudItem>

                <MudItem xs="2">FHIR Versions</MudItem>
                <MudItem xs="10">@string.Join(", ", ciPackage.FhirVersions)</MudItem>

                <MudItem xs="2">Dependencies</MudItem>
                <MudItem xs="10">@string.Join(", ", ciPackage.Dependencies.Select((k,v) => $"{k}#{v}"))</MudItem>
            </MudGrid>
        }

    </MudTabPanel>

    <MudTabPanel Text="CI Build - FHIR Core">
        <MudCard>
            <MudCardContent>
                <MudTextField @bind-Value="@ciBranch" Label="CI Path or URL">
                </MudTextField>
                <MudText>
                    Branch information can be found via the <MudLink Href="http://build.fhir.org/branches/" Target="_blank">Core Branch Index</MudLink>.
                    Builds must appear in the index and valid values can be the path rooted at <code>branches/</code>, the branch name,
                    or the URL of the built landing page (e.g., <code>http://build.fhir.org/branches/.../</code>).
                </MudText>
            </MudCardContent>
            <MudCardActions>
                <MudFab OnClick="(() => LookupCiBuild(false))" StartIcon="@Icons.Filled.ManageSearch" Label="Lookup" />

                @if (ciPackage != null)
                {
                    @if (IsCiLocal())
                    {
                        <MudTooltip Text="Delete">
                            <MudFab StartIcon="@Icons.Filled.Delete"
                                Color="Color.Error"
                                @onclick="() => RequestCiDelete()"
                                Size="Size.Small" />
                        </MudTooltip>
                    }

                    @switch (GetCiPackageState())
                    {
                        case PackageLoadStateEnum.Queued:
                        case PackageLoadStateEnum.InProgress:
                            <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" />
                            break;

                        case PackageLoadStateEnum.Unknown:
                        case PackageLoadStateEnum.NotLoaded:
                        case PackageLoadStateEnum.Loaded:
                        case PackageLoadStateEnum.Parsed:
                        default:
                            <MudFab OnClick="(() => RequestCiDownload())" StartIcon="@Icons.Filled.DriveFileMove" Label="Download" />
                            break;
                    }
                }
            </MudCardActions>
        </MudCard>

        @if (ciPackage != null)
        {
            <MudGrid>
                <MudItem xs="2">Name</MudItem>
                <MudItem xs="10">@ciPackage.Name</MudItem>

                <MudItem xs="2">Version</MudItem>
                <MudItem xs="10">@ciPackage.Version</MudItem>

                <MudItem xs="2">URL</MudItem>
                <MudItem xs="10">@ciPackage.URL</MudItem>

                <MudItem xs="2">Build Date</MudItem>
                <MudItem xs="10">@ciPackage.BuildDate</MudItem>

                <MudItem xs="2">Title</MudItem>
                <MudItem xs="10">@ciPackage.Title</MudItem>

                <MudItem xs="2">Description</MudItem>
                <MudItem xs="10">@ciPackage.Description</MudItem>

                <MudItem xs="2">FHIR Versions</MudItem>
                <MudItem xs="10">@string.Join(", ", ciPackage.FhirVersions)</MudItem>

                <MudItem xs="2">Dependencies</MudItem>
                <MudItem xs="10">@string.Join(", ", ciPackage.Dependencies.Select((k,v) => $"{k}#{v}"))</MudItem>
            </MudGrid>
        }

    </MudTabPanel>

</MudTabs>


@code {
    /// <summary>Name of the package.</summary>
    private string packageName = string.Empty;

    /// <summary>The ci branch.</summary>
    private string ciBranch = string.Empty;

    /// <summary>The release versions.</summary>
    private IEnumerable<RegistryPackageManifest.VersionInfo> releaseVersions = new RegistryPackageManifest.VersionInfo[0];

    /// <summary>The CI package.</summary>
    private NpmPackageDetails? ciPackage = null;

    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        PackageService.OnChanged += PackageServiceChanged;

        NavTracker?.NotifyNav("Add Package", "addpackage", 1);
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
        PackageService.OnChanged -= PackageServiceChanged;
    }

        /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/diff"))
        {
            NavTracker?.NotifyNav("Add Package", "addpackage", 1);
        }
    }


    /// <summary>Handles the package service changed event.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information to send to registered event handlers.</param>
    private void PackageServiceChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Query if this object is ci local.</summary>
    /// <returns>True if ci local, false if not.</returns>
    private bool IsCiLocal()
    {
        if (ciPackage == null)
        {
            return false;
        }

        string directive = ciPackage.Name + "#current";

        if (PackageService.ContainsKey(directive))
        {
            return true;
        }

        return false;
    }

    /// <summary>Gets package state.</summary>
    /// <param name="versionInfo">Information describing the version.</param>
    /// <returns>The package state.</returns>
    private PackageLoadStateEnum GetPackageState(RegistryPackageManifest.VersionInfo versionInfo)
    {
        string directive = versionInfo.Name + "#" + versionInfo.Version;

        if (PackageService.ContainsKey(directive))
        {
            return PackageService[directive].PackageState;
        }

        return PackageLoadStateEnum.Unknown;
    }

    /// <summary>Gets ci package state.</summary>
    /// <returns>The ci package state.</returns>
    private PackageLoadStateEnum GetCiPackageState()
    {
        if (ciPackage == null)
        {
            return PackageLoadStateEnum.Unknown;
        }

        string directive = ciPackage.Name + "#current";

        if (PackageService.ContainsKey(directive))
        {
            return PackageService[directive].PackageState;
        }

        return PackageLoadStateEnum.Unknown;
    }

    /// <summary>Request version download.</summary>
    /// <param name="versionInfo">Information describing the version.</param>
    private void RequestCiDownload()
    {
        if (ciPackage == null)
        {
            return;
        }

        string directive = ciPackage.Name + "#current";

        PackageService.RequestDownload(directive, ciBranch, out _);
    }

    /// <summary>Request manual download.</summary>
    private void RequestManualDownload()
    {
        PackageService.RequestDownload(packageName, string.Empty, out _);
    }

    /// <summary>Request version download.</summary>
    /// <param name="versionInfo">Information describing the version.</param>
    private void RequestReleasedDownload(RegistryPackageManifest.VersionInfo versionInfo)
    {
        string directive = versionInfo.Name + "#" + versionInfo.Version;

        PackageService.RequestDownload(directive, string.Empty, out _);
    }

    /// <summary>Request delete.</summary>
    /// <param name="versionInfo">Information describing the version.</param>
    private void RequestCiDelete()
    {
        if (ciPackage == null)
        {
            return;
        }

        string directive = ciPackage.Name + "#current";

        PackageService.DeletePackage(directive);
    }

    /// <summary>Request delete.</summary>
    /// <param name="versionInfo">Information describing the version.</param>
    private void RequestDelete(RegistryPackageManifest.VersionInfo versionInfo)
    {
        string directive = versionInfo.Name + "#" + versionInfo.Version;

        PackageService.DeletePackage(directive);
    }

    /// <summary>Gets a directive.</summary>
    /// <param name="versionInfo">Information describing the version.</param>
    /// <returns>The directive.</returns>
    private string GetVersionDirective(RegistryPackageManifest.VersionInfo versionInfo)
    {
        return versionInfo.Name + "#" + versionInfo.Version;
    }

    /// <summary>Looks up a given key to find its associated released package.</summary>
    private void LookupReleasedPackage()
    {
        bool success = PackageService.TryGetRegistryManifests(packageName, out IEnumerable<RegistryPackageManifest> manifests);

        if (!success)
        {
            if (releaseVersions.Any())
            {
                releaseVersions = new RegistryPackageManifest.VersionInfo[0];
            }

            return;
        }

        List<RegistryPackageManifest.VersionInfo> registryVersions = new();

        foreach (RegistryPackageManifest manifest in manifests)
        {
            if ((manifest.Versions == null) ||
                (!manifest.Versions.Any()))
            {
                continue;
            }

            registryVersions.AddRange(manifest.Versions.Values);
        }

        registryVersions.Sort((a, b) => b.Version.CompareTo(a.Version));
        releaseVersions = registryVersions.ToArray();
    }

    /// <summary>Looks up a given key to find its associated ci build.</summary>
    private void LookupCiBuild(bool isIg)
    {
        bool success = false;
        NpmPackageDetails details;

        if (isIg)
        {
            success = PackageService.TryGetGuideCiPackageDetails(ciBranch, out details);
        }
        else
        {
            success = PackageService.TryGetCoreCiPackageDetails(ciBranch, out details);
        }

        if (success)
        {
            ciPackage = details;
        }
        else
        {
            ciPackage = null;
        }
    }
}
