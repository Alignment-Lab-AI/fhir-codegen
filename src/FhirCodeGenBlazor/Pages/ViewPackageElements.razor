@page "/view/package/elements"

@using FhirCodeGenBlazor.Models;
@using FhirCodeGenBlazor.Services;
@using Markdig;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.CodeAnalysis.CSharp.Scripting;
@using Microsoft.CodeAnalysis.Scripting;
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@using Microsoft.Health.Fhir.SpecManager.Manager;
@using System.IO;
@using System.Text.RegularExpressions;
@using System.Linq;
@using static FhirCodeGenBlazor.Models.PackageElementModels
@inject ISpecManagerWebService SpecService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage BrowserStore
@implements IDisposable
@implements IPackageVersionProvider

@if (string.IsNullOrEmpty(directive) ||
     (!SpecService.ContainsKey(directive)))
{
    <PageTitle>FHIR Element Search</PageTitle>
    <MudText Typo="Typo.h5">This page requires a loaded package (specified by name and version).</MudText>
}
else
{
    <PageTitle>@directive</PageTitle>

    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel Text="Artifact Type Filtering">
            <MudGrid>
                <MudItem xs="6" sm="3">
                    <MudFab StartIcon="@Icons.Filled.Flip"
                            Label="Toggle All Artifacts"
                            OnClick="() => InvokeAsync(() => ToggleShowArtifactState())"
                            Disabled="@_busy"
                            />
                </MudItem>

                @foreach(FhirArtifactClassEnum ac in showArtifactClass.Keys.OrderBy(k => k.ToString()))
                {
                    <MudItem xs="6" sm="3">
                        <MudSwitch
                            Color="Color.Info"
                            Checked="@showArtifactClass[ac]"
                            CheckedChanged="@((bool s) => ToggleShowState(ac, s))"
                            Label="@(ac.ToString() + " (" + SpecService[directive].ArtifactRecordsByClass[ac].Count() + ")")" />
                    </MudItem>
                }
            </MudGrid>
        </MudExpansionPanel>
        <MudExpansionPanel Text="Advanced Filtering">
            <MudTabs Elevation="2" Centered="true" ApplyEffectsToContainer="true" @bind-ActivePanelIndex="searchPanelIndex" >
                <MudTabPanel Text="Basic String">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudSelect T="string" Label="Comparison Property" @bind-Value="stringMatchProperty">
                                @foreach (string v in _basicMatchProperties)
                                {
                                    <MudSelectItem Value="@v">@v</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12">
                            <MudSelect T="StringMatchTypeCodes" Label="String Match Type" @bind-Value="stringMatchType">
                                <MudSelectItem Value="StringMatchTypeCodes.StartsWith">Starts With</MudSelectItem>
                                <MudSelectItem Value="StringMatchTypeCodes.Contains">Contains</MudSelectItem>
                                <MudSelectItem Value="StringMatchTypeCodes.EndsWith">Ends With</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12">
                            <MudSelect T="StringMatchSensitivityCodes" Label="Case Sensitivity" @bind-Value="stringSensitivity">
                                <MudSelectItem Value="StringMatchSensitivityCodes.CaseInsensitive">Starts With</MudSelectItem>
                                <MudSelectItem Value="StringMatchSensitivityCodes.CaseSensitive">Contains</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="@stringMatchValue" Error="inputIsInvalid" Label="Search Value" DebounceInterval="500" OnDebounceIntervalElapsed="HandleFilterChange" />
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
                <MudTabPanel Text="RegEx">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudSelect T="string" Label="Comparison Property" @bind-Value="regexMatchProperty">
                                @foreach (string v in _basicMatchProperties)
                                {
                                    <MudSelectItem Value="@v">@v</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="@regexExpression" Error="inputIsInvalid" Label="Regular Expression" DebounceInterval="500" OnDebounceIntervalElapsed="HandleFilterChange" />
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
                <MudTabPanel Text="LINQ">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="@linqPredicate" Error="inputIsInvalid" Label="LINQ Predicate" DebounceInterval="500" OnDebounceIntervalElapsed="HandleFilterChange" />
                        </MudItem>
                        <MudItem xs="12">
                            For details and examples, please see the 
                            <MudLink href="https://microsoft.github.io/fhir-codegen/articles/blazorui.html#linq" target="_blank">API documentation</MudLink>.
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
            </MudTabs>
        </MudExpansionPanel>
    </MudExpansionPanels>

    <MudTable
        @ref="_displayTable"
        Items="@filteredElements"
        Filter="new Func<ElementRecord, bool>(FilterFuncInstance)"
        Dense="true"
        Striped="true"
        Hover="true"
        Height="calc(100vh - (var(--mud-appbar-height) * 4.6))"
        FixedHeader="true"
        RowsPerPage="100">
        <ToolBarContent>
            <MudSwitch Class="ms-2" Color="Color.Info" @bind-Checked="showDetailedInfo" Label="Show detailed info" />
            <MudButton Class="ms-2" Color="Color.Info" Variant="Variant.Outlined" StartIcon="@Icons.Filled.Download" OnClick="() => DownloadElementPathsJson()">Paths (JSON)</MudButton>
            <MudButton Class="ms-2" Color="Color.Info" Variant="Variant.Outlined" StartIcon="@Icons.Filled.Download" OnClick="() => DownloadFhirElementsJson()">Elements (JSON)</MudButton>
        </ToolBarContent>
        <ColGroup>
            <col style="width: 20vw!important;" />
            <col style="width: 7vw!important;" />
            <col style="width: 3vw!important;" />
            <col style="width: 10vw!important;" />
            <col style="width: 50vw!important;" />
        </ColGroup>
        <HeaderContent>
            <MudTh>Element</MudTh>
            <MudTh>Flags</MudTh>
            <MudTh>Card.</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Short</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <b>@context.Element.Path</b><br />
                <em>Defined by @context.DefinedByClass: @context.RootComplex.Path</em>
                @if (!string.IsNullOrEmpty(context.Element.FixedFieldName))
                {
                    <MudText Color="Color.Error">&nbsp;*</MudText>
                    <span> fixed to: </span>
                    <span class="font-monospace bg-dark bg-opacity-50 text-light p-1">@context.Element.FixedFieldValue</span>
                }
            </MudTd>
            <MudTd>
                @if (context.Element.IsMustSupport)
                {
                    <MudTooltip Text="Must Supprt">Ⓜ️</MudTooltip>
                }

                @if (context.Element.IsModifier)
                {
                    <MudTooltip Text="@(context.Element.IsModifierReason ?? "Modifier Element")">⁈</MudTooltip>
                }

                @if (context.Element.IsSummary)
                {
                    <MudTooltip Text="Include in Summary">∑</MudTooltip>
                }
            </MudTd>
            <MudTd>@context.Element.FhirCardinality</MudTd>
            <MudTd>@GetElementTypeString(context.Element)</MudTd>
            <MudTd>
                @context.Element.ShortDescription
            </MudTd>
        </RowTemplate>
        <ChildRowContent>
            @if (showDetailedInfo)
            {
                <MudTr>
                    <td colspan="5" style="padding-left: 32px;">
                        <MudText Typo="Typo.caption">
                            <strong>Definition:</strong><p>@context.Element.Purpose</p>
                            <strong>Comments:</strong>
                            @(new MarkupString(Markdown.ToHtml(context.Element.Comment)))

                            @if (!string.IsNullOrEmpty(context.Element.ValueSet))
                            {
                                <p><strong>Bound to:</strong> @context.Element.ValueSet (@context.Element.ValueSetBindingStrength)</p>
                            }

                            @if (!string.IsNullOrEmpty(context.Element.ValidationRegEx))
                            {
                                <p><strong>Validation RegEx:</strong> @context.Element.ValidationRegEx</p>
                            }
                        </MudText>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="@(new int[] {100, 50, 20, 10})" />
        </PagerContent>
    </MudTable>
}


@code {
    /// <summary>The display table.</summary>
    private MudTable<ElementRecord>? _displayTable = null;

    /// <summary>Values that represent string match types.</summary>
    private enum StringMatchTypeCodes
    {
        StartsWith,
        Contains,
        EndsWith,
    }

    /// <summary>Values that represent string match sensitivities.</summary>
    private enum StringMatchSensitivityCodes
    {
        CaseSensitive,
        CaseInsensitive,
    }

    /// <summary>The basic match properties.</summary>
    private static List<string> _basicMatchProperties = new()
    {
        "Comment",
        "ExplicitName",
        "Id",
        "Name",
        "Path",
        "ShortDescription",
        "URL",
    };

    /// <summary>A script globals.</summary>
    public class ScriptGlobals
    {
        /// <summary>Gets the FhirVersionInfo.</summary>
        public FhirVersionInfo Info { get; }

        /// <summary>Gets the match RegEx.</summary>
        public Regex? MatchRegex { get; }

        /// <summary>Initializes a new instance of the ScriptGlobals class.</summary>
        /// <param name="info">The information.</param>
        public ScriptGlobals(FhirVersionInfo info, Regex? matchRegex)
        {
            Info = info;
            MatchRegex = matchRegex;
        }
    }

    /// <summary>Type of the string match.</summary>
    private StringMatchTypeCodes _stringMatchType = StringMatchTypeCodes.Contains;

    /// <summary>Gets or sets the type of the string match.</summary>
    private StringMatchTypeCodes stringMatchType
    {
        get
        {
            return _stringMatchType;
        }
        set
        {
            if (_stringMatchType != value)
            {
                _stringMatchType = value;
                HandleFilterChange(stringMatchValue);
            }
        }
    }

    /// <summary>The string sensitivity.</summary>
    private StringMatchSensitivityCodes _stringSensitivity = StringMatchSensitivityCodes.CaseInsensitive;

    /// <summary>Gets or sets the string sensitivity.</summary>
    private StringMatchSensitivityCodes stringSensitivity
    {
        get
        {
            return _stringSensitivity;
        }
        set
        {
            if (_stringSensitivity != value)
            {
                _stringSensitivity = value;
                HandleFilterChange(stringMatchValue);
            }
        }
    }

    /// <summary>The string match property.</summary>
    private string _stringMatchProperty = "Name";

    /// <summary>Gets or sets the string match property.</summary>
    private string stringMatchProperty
    {
        get
        {
            return _stringMatchProperty;
        }
        set
        {
            if (!_stringMatchProperty.Equals(value, StringComparison.Ordinal))
            {
                _stringMatchProperty = value;
                HandleFilterChange(stringMatchValue);
            }
        }
    }

    /// <summary>The RegEx match property.</summary>
    private string _regexMatchProperty = "Name";

    /// <summary>Gets or sets the RegEx match property.</summary>
    private string regexMatchProperty
    {
        get
        {
            return _regexMatchProperty;
        }
        set
        {
            if (!_regexMatchProperty.Equals(value, StringComparison.Ordinal))
            {
                _regexMatchProperty = value;
                HandleFilterChange(regexExpression);
            }
        }
    }

    /// <summary>Zero-based index of the search panel.</summary>
    private int searchPanelIndex = 0;

    /// <summary>(Immutable) The search panel index basic text.</summary>
    private const int SearchPanelIndexBasicText = 0;
    /// <summary>(Immutable) The search panel index RegEx.</summary>
    private const int SearchPanelIndexRegEx = 1;
    /// <summary>(Immutable) The search panel index linq.</summary>
    private const int SearchPanelIndexLinq = 2;

    /// <summary>The string match value.</summary>
    private string stringMatchValue = "";

    /// <summary>The RegEx expression.</summary>
    private string regexExpression = "";

    /// <summary>The linq predicate.</summary>
    private string linqPredicate = "";

    /// <summary>The search predicate.</summary>
    private Func<FhirElement, bool>? searchPredicate = null;

    /// <summary>True if input is invalid.</summary>
    private bool inputIsInvalid = false;

    /// <summary>Information about the paging status.</summary>
    /// <param name="PageNavigation"> The page navigation.</param>
    /// <param name="CurrentPage">    The current page.</param>
    /// <param name="CurrentIndexMin">The current index minimum.</param>
    /// <param name="CurrentIndexMax">The current index maximum.</param>
    /// <param name="LastPage">       The last page.</param>
    private record struct PagingStatusInfo(
        int[] PageNavigation,
        int CurrentPage,
        int CurrentIndexMin,
        int CurrentIndexMax,
        int LastPage);

    /// <summary>The show artifact class.  Initialize all to false, will be updated after first render.</summary>
    private Dictionary<FhirArtifactClassEnum, bool> showArtifactClass = new()
    {
        { FhirArtifactClassEnum.ComplexType, false },
        { FhirArtifactClassEnum.Resource, false },
        { FhirArtifactClassEnum.Extension, false },
        { FhirArtifactClassEnum.Profile, false },
        { FhirArtifactClassEnum.LogicalModel, false }
    };

    /// <summary>
    /// Gets or sets a value indicating whether the detailed information is shown.
    /// </summary>
    private bool showDetailedInfo { get; set; } = true;

    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "packageName")]
    public string PackageName { get; set; } = "";

    /// <summary>Gets or sets the package version.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "version")]
    public string Version { get; set; } = "";

    /// <summary>The directive.</summary>
    private string directive = string.Empty;

    /// <summary>The filtered elements.</summary>
    private List<ElementRecord> filteredElements = new();

    /// <summary>The element lock object.</summary>
    private object _elementLockObject = new();

    /// <summary>Control toggle behavior of the 'all' button.</summary>
    private bool _showArtifactState = true;

    /// <summary>If the page should be showing progress indicators.</summary>
    private bool _busy = false;

    /// <summary>Options for controlling the create structure script.</summary>
    private ScriptOptions csScriptOpts = ScriptOptions.Default
        .AddReferences(
            typeof(FhirElement).Assembly,
            typeof(SpecManagerWebService).Assembly,
            AppDomain.CurrentDomain.GetAssemblies().SingleOrDefault(a => a.GetName().Name?.Equals("System.Linq") ?? false),
            AppDomain.CurrentDomain.GetAssemblies().SingleOrDefault(a => a.GetName().Name?.Equals("System.Runtime") ?? false))
        .AddImports("System.Linq", "System.Text", "System.Text.RegularExpressions");

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        directive = PackageName + "#" + Version;

        NavTracker?.NotifyNav("Elements of " + directive, $"view/package/elements?packageName={PackageName}&version={Version}", 1);
        NavigationManager.LocationChanged += HandleLocationChanged;

        HandleNonFilterChange();
    }

    /// <summary>Executes the after render action.</summary>
    /// <param name="firstRender">True to first render.</param>
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Task.Run(() => UpdateInitialArtifactDisplay());
        }

        base.OnAfterRender(firstRender);
    }

    /// <summary>Updates the initial artifact display.</summary>
    private async void UpdateInitialArtifactDisplay()
    {
        foreach (FhirArtifactClassEnum classEnum in showArtifactClass.Keys)
        {
            var readResult = await BrowserStore.GetAsync<bool>("showAC_" + classEnum);
            if (readResult.Success)
            {
                showArtifactClass[classEnum] = readResult.Value;
            }
            else
            {
                showArtifactClass[classEnum] = true;
            }
        }

        _ = InvokeAsync(() => BuildElementList());
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/view/package/elements"))
        {
            directive = PackageName + "#" + Version;

            NavTracker?.NotifyNav("Elements of " + directive, $"view/package/elements?packageName={PackageName}&version={Version}", 1);

            HandleNonFilterChange();
        }
    }

    /// <summary>Adds the elements from complex.</summary>
    /// <param name="predicate">    The predicate.</param>
    /// <param name="complex">      The complex.</param>
    /// <param name="elements">     The elements.</param>
    /// <param name="rootComplex">  The root complex.</param>
    /// <param name="artifactClass">The artifact class.</param>
    private void AddElementsFromComplex(
        FhirComplex complex,
        List<ElementRecord> elements,
        FhirComplex rootComplex,
        FhirArtifactClassEnum artifactClass)
    {
        if (complex == null)
        {
            return;
        }

        if (complex.Components != null)
        {
            foreach (FhirComplex component in complex.Components.Values)
            {
                AddElementsFromComplex(component, elements, rootComplex, artifactClass);
            }
        }

        if ((complex.Elements == null) || (!complex.Elements.Values.Any()))
        {
            return;
        }

        if ((complex.Elements == null) || (!complex.Elements.Any()))
        {
            return;
        }

        foreach (FhirElement element in complex.Elements.Values)
        {
            elements.Add(new ElementRecord(
                artifactClass,
                rootComplex,
                element));
        }
    }

    /// <summary>Filter function instance.</summary>
    /// <param name="e">A FhirElement to process.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool FilterFuncInstance(ElementRecord e) => FilterFuncDefinition(e, searchPredicate);

    /// <summary>Filter function definition.</summary>
    /// <param name="e">A FhirElement to process.</param>
    /// <param name="p">A predicate to evaluate against the element.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool FilterFuncDefinition(ElementRecord e, Func<FhirElement, bool>? p)
    {
        if (p == null)
        {
            return !inputIsInvalid;
        }

        try
        {
            return p.Invoke(e.Element);
        }
        catch
        {
            return false;
        }
    }

    /// <summary>Rebuild filtered elements.</summary>
    private void BuildElementList()
    {
        _busy = true;

        try
        {
            List<ElementRecord> filtered = new();

            foreach ((FhirArtifactClassEnum artifactClass, bool visible) in showArtifactClass)
            {
                if (!visible)
                {
                    continue;
                }

                if (SpecService[directive].TryGetArtifactValues<FhirComplex>(artifactClass, out IEnumerable<FhirComplex> values))
                {
                    foreach (FhirComplex complex in values)
                    {
                        AddElementsFromComplex(complex, filtered, complex, artifactClass);
                    }
                }
            }

            filtered.Sort((a, b) => a.Element.Path.CompareTo(b.Element.Path));

            filteredElements = filtered;
        }
        finally
        {
            _busy = false;
            InvokeAsync(() => StateHasChanged());
        }
    }

    /// <summary>
    /// Attempts to build predicate a Func&lt;FhirElement,bool&gt; from the given FilterOptions.
    /// </summary>
    /// <param name="predicate">[out] The predicate.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool TryBuildPredicate(out Func<FhirElement, bool>? predicate)
    {
        string predString;
        Regex? matchRegex = null;

        switch (searchPanelIndex)
        {
            case SearchPanelIndexBasicText:
                if (stringMatchValue.Length < 2)
                {
                    predicate = null;
                    return false;
                }

                string sc = stringSensitivity == StringMatchSensitivityCodes.CaseSensitive
                    ? "System.StringComparison.Ordinal"
                    : "System.StringComparison.OrdinalIgnoreCase";

                predString = $"e => e.{stringMatchProperty}.{stringMatchType}(\"{stringMatchValue}\", {sc})";
                break;

            case SearchPanelIndexRegEx:
                try
                {
                    matchRegex = new(regexExpression);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"TryBuildPredicate <<< caught exception compiling regex ({regexExpression}): {ex.Message}");
                    if (ex.InnerException != null)
                    {
                        Console.WriteLine($" <<< inner: {ex.InnerException.Message}");
                    }
                    predicate = null;
                    return false;
                }

                predString = $"e => MatchRegex.IsMatch(e.{regexMatchProperty})";
                break;

            case SearchPanelIndexLinq:
                predString = linqPredicate;
                break;

            default:
                predicate = null;
                return false;
        }

        try
        {
            predicate = CSharpScript.EvaluateAsync<Func<FhirElement, bool>>(
                predString,
                csScriptOpts,
                new ScriptGlobals(SpecService[directive], matchRegex)).Result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"RebuildFilteredElements <<< caught exception compiling filter ({predString}): {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($" <<< inner: {ex.InnerException.Message}");
            }
            predicate = null;
            return false;
        }

        return true;
    }

    /// <summary>Links for artifact.</summary>
    /// <param name="record">The record.</param>
    /// <returns>A string.</returns>
    private string LinkForArtifact(FhirArtifactRecord record)
    {
        return $"/view/{record.ArtifactClass}/?packageName={PackageName}&version={Version}&url={record.Url}";
    }

    /// <summary>Downloads the element paths JSON.</summary>
    private async void DownloadElementPathsJson()
    {
        /// <summary>The elements.</summary>
        IEnumerable<string> elements;

        lock (_elementLockObject)
        {
            elements = filteredElements.Where(e => FilterFuncDefinition(e, searchPredicate)).Select<ElementRecord, string>(e => e.Element.Path);
        }

        string content = System.Text.Json.JsonSerializer.Serialize(elements);
        using (Stream fs = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(content), false))
        using (DotNetStreamReference streamRef = new DotNetStreamReference(fs, false))
        {
            await JS.InvokeVoidAsync("downloadFileFromStream", "elementPaths.json", streamRef);
        }
    }

    /// <summary>Downloads the FHIR elements JSON.</summary>
    private async void DownloadFhirElementsJson()
    {
        IEnumerable<FhirElement> elements;

        lock (_elementLockObject)
        {
            elements = filteredElements.Where(e => FilterFuncDefinition(e, searchPredicate)).Select<ElementRecord, FhirElement>(e => e.Element);
        }

        string content = System.Text.Json.JsonSerializer.Serialize(elements);
        using (Stream fs = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(content), false))
        using (DotNetStreamReference streamRef = new DotNetStreamReference(fs, false))
        {
            await JS.InvokeVoidAsync("downloadFileFromStream", "elements.json", streamRef);
        }
    }

    /// <summary>Toggle show artifact state.</summary>
    private void ToggleShowArtifactState()
    {
        // flag we are busy - will be cleared by RebuildFilteredArtifacts
        _busy = true;

        _showArtifactState = !_showArtifactState;
        foreach (FhirArtifactClassEnum ac in showArtifactClass.Keys)
        {
            showArtifactClass[ac] = _showArtifactState;
            _ = BrowserStore.SetAsync("showAC_" + ac, showArtifactClass[ac]);
        }

        InvokeAsync(() => BuildElementList());
    }

    /// <summary>Toggle show state.</summary>
    /// <param name="classEnum">The class enum.</param>
    private void ToggleShowState(FhirArtifactClassEnum classEnum, bool? v)
    {
        if (v == showArtifactClass[classEnum])
        {
            return;
        }

        if (v == null)
        {
            showArtifactClass[classEnum] = !showArtifactClass[classEnum];
        }
        else
        {
            showArtifactClass[classEnum] = (v == true);
        }

        _ = BrowserStore.SetAsync("showAC_" + classEnum, showArtifactClass[classEnum]);

        InvokeAsync(() => BuildElementList());
    }

    /// <summary>Handles the filter change described by value.</summary>
    /// <param name="value">The value.</param>
    private void HandleFilterChange(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            searchPredicate = null;
            inputIsInvalid = false;
            _displayTable?.UpdateSelection();
            InvokeAsync(() => StateHasChanged());
            return;
        }

        if (TryBuildPredicate(out Func<FhirElement, bool>? pred))
        {
            searchPredicate = pred;
            inputIsInvalid = false;
            _displayTable?.UpdateSelection();
            InvokeAsync(() => StateHasChanged());
            return;
        }

        inputIsInvalid = true;
        _displayTable?.UpdateSelection();
        InvokeAsync(() => StateHasChanged());
    }

    private void HandleNonFilterChange()
    {
        InvokeAsync(() => BuildElementList());
    }

    /// <summary>Gets element type string.</summary>
    /// <param name="element">The element.</param>
    /// <returns>The element type string.</returns>
    private MarkupString GetElementTypeString(FhirElement element)
    {
        if (element.BaseTypeName.Equals(element.Id, StringComparison.Ordinal))
        {
            return new MarkupString("BackboneElement");
        }

        if (!string.IsNullOrEmpty(element.BaseTypeName))
        {
            return new MarkupString(element.BaseTypeName);
        }

        return new MarkupString(string.Join(
            ", <br />",
            element.ElementTypes.Values.Select(
                et => et.Profiles.Any()
                    ? $"{et.Name}( {string.Join("<br /> | ", et.Profiles.Values.Select(p => p.Name))} )"
                    : et.Name)));
    }
}
