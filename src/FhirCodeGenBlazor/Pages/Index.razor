@page "/"
@using FhirCodeGenBlazor.Models
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@using FhirCodeGenBlazor.Services;
@inject NavigationManager NavigationManager
@inject IPackageManagerWebService PackageService
@inject ISpecManagerWebService SpecService
@implements IDisposable

<PageTitle>FHIR Cache</PageTitle>

@if (!loaded)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable
        Items="@PackageService.OrderBy(r => r.Key)"
        Filter="new Func<KeyValuePair<string, PackageCacheRecord>, bool>(FilterFuncInstance)"
        Dense="true"
        Striped="true"
        Height="calc(100vh - (var(--mud-appbar-height) * 2))"
        FixedHeader="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">FHIR Cache Contents</MudText>
            <MudSpacer />
            <MudFab StartIcon="@Icons.Filled.LibraryAdd" OnClick="@(() => NavToAddPackage())" Size="Size.Small" />
            <MudSpacer />
            <MudTextField @bind-Value="packageSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col style="width: 15vw!important;" />
            <col style="width: 15vw!important;" />
            <col style="width: 5vw!important;" />
            <col style="width: 20vw!important;" />
            <col style="width: 45vw!important;" />
        </ColGroup>
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh>Cache Directive</MudTh>
            <MudTh>FHIR</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Dependencies</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                @switch (context.Value.PackageState)
                {
                    case PackageLoadStateEnum.Loaded:
                        @if (SpecService.ContainsKey(context.Key))
                        {
                            <MudTooltip Text="Package Overview">
                                <MudFab
                                    StartIcon="@Icons.Filled.ViewInAr"
                                    @onclick="() => NavToViewPackage(context.Key)"
                                    Size="Size.Small" />
                            </MudTooltip>
                            <MudTooltip Text="LINQ Runner">
                                <MudFab
                                    StartIcon="@Icons.Filled.Search"
                                    @onclick="() => NavToScript(context.Key)"
                                    Size="Size.Small" />
                            </MudTooltip>
                            <MudTooltip Text="Element Explorer">
                                <MudFab
                                    StartIcon="@Icons.Filled.Preview"
                                    @onclick="() => NavToPackageElements(context.Key)"
                                    Size="Size.Small" />
                            </MudTooltip>
                            <MudTooltip Text="Export">
                                <MudFab
                                    StartIcon="@Icons.Filled.DriveFileMove"
                                    @onclick="() => NavToExportPackage(context.Key)"
                                    Size="Size.Small" />
                            </MudTooltip>
                            <MudTooltip Text="Delete">
                                <MudFab
                                    StartIcon="@Icons.Filled.Delete"
                                    Color="Color.Error"
                                    @onclick="() => RequestDelete(context.Key)"
                                    Size="Size.Small" />
                            </MudTooltip>
                        }
                        else
                        {
                            <MudTooltip Text="Loaded">
                                <MudFab
                                    StartIcon="@Icons.Filled.DownloadDone"
                                    Color="Color.Success"
                                    Disabled="true"
                                    Size="Size.Small" />
                            </MudTooltip>
                            <MudTooltip Text="Delete">
                                <MudFab
                                    StartIcon="@Icons.Filled.Delete"
                                    Color="Color.Error"
                                    @onclick="() => RequestDelete(context.Key)"
                                    Size="Size.Small" />
                            </MudTooltip>
                        }

                        break;

                    case PackageLoadStateEnum.Parsed:
                        <MudTooltip Text="Loaded">
                            <MudFab
                                StartIcon="@Icons.Filled.DownloadDone"
                                Color="Color.Success"
                                Disabled="true"
                                Size="Size.Small" />
                        </MudTooltip>
                        break;

                    case PackageLoadStateEnum.Queued:
                    case PackageLoadStateEnum.InProgress:
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" />
                        break;

                    default:
                        <MudTooltip Text="Load">
                            <MudFab
                                StartIcon="@Icons.Filled.Input"
                                @onclick="() => ButtonLoadPackageClicked(context.Key)"
                                Size="Size.Small" />
                        </MudTooltip>
                        <MudTooltip Text="Delete">
                            <MudFab
                                StartIcon="@Icons.Filled.Delete"
                                Color="Color.Error"
                                @onclick="() => RequestDelete(context.Key)"
                                Size="Size.Small" />
                        </MudTooltip>
                        break;
                }
            </MudTd>
            <MudTd DataLabel="CacheDirective">@context.Key</MudTd>
            <MudTd DataLabel="FhirVersions">@string.Join(',', context.Value.Details?.FhirVersions ?? Array.Empty<string>())</MudTd>
            <MudTd DataLabel="Title">@context.Value.Details?.Title</MudTd>
            <MudTd DataLabel="Dependencies">@DependenciesForPackage(context.Value)</MudTd>
        </RowTemplate>
        <FooterContent>
            <MudTd></MudTd>
            <MudTd style="font-weight: 500;">Cache Directive</MudTd>
            <MudTd style="font-weight: 500;">FHIR</MudTd>
            <MudTd style="font-weight: 500;">Title</MudTd>
            <MudTd style="font-weight: 500;">Dependencies</MudTd>
        </FooterContent>
    </MudTable>
}

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    private bool loaded = false;
    private string directiveToLoad = string.Empty;

    private string packageSearchString = string.Empty;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavTracker?.NotifyNav("FHIR Cache", "", 0);
        PackageService.OnChanged += PackageServiceChanged;
        loaded = true;
    }

    private bool FilterFuncInstance(KeyValuePair<string,PackageCacheRecord> kvp) => FilterFuncDefinition(kvp, packageSearchString);

    /// <summary>Filter function.</summary>
    /// <param name="kvp">         The kvp.</param>
    /// <param name="searchString">The search string.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool FilterFuncDefinition(KeyValuePair<string, PackageCacheRecord> kvp, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString) ||
            kvp.Key.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        PackageService.OnChanged -= PackageServiceChanged;
    }

    /// <summary>Handles the package service changed event.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information to send to registered event handlers.</param>
    private void PackageServiceChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Navigation to add package.</summary>
    private void NavToAddPackage()
    {
        NavigationManager.NavigateTo("/addpackage");
    }

    /// <summary>Navigation to browse package.</summary>
    /// <param name="directive">The directive.</param>
    private void NavToPackageElements(string directive)
    {
        string[] components = directive.Split('#');

        if (components.Length > 1)
        {
            NavigationManager.NavigateTo($"/view/package/elements?packageName={components[0]}&version={components[1]}");
            return;
        }

        NavigationManager.NavigateTo($"/view/package/elements?packageName={components[0]}");
    }

    /// <summary>Navigation to browse package.</summary>
    /// <param name="directive">The directive.</param>
    private void NavToViewPackage(string directive)
    {
        string[] components = directive.Split('#');

        if (components.Length > 1)
        {
            NavigationManager.NavigateTo($"/view/package?packageName={components[0]}&version={components[1]}");
            return;
        }

        NavigationManager.NavigateTo($"/view/package?packageName={components[0]}");
    }

    /// <summary>Navigation to script page.</summary>
    /// <param name="directive">The directive.</param>
    private void NavToScript(string directive)
    {
        string[] components = directive.Split('#');

        if (components.Length > 1)
        {
            NavigationManager.NavigateTo($"/script/package?packageName={components[0]}&version={components[1]}");
            return;
        }

        NavigationManager.NavigateTo($"/script/package?packageName={components[0]}");
    }

    /// <summary>Navigation to export package.</summary>
    /// <param name="directive">The directive.</param>
    private void NavToExportPackage(string directive)
    {
        string[] components = directive.Split('#');

        if (components.Length > 1)
        {
            NavigationManager.NavigateTo($"/export/package?packageName={components[0]}&version={components[1]}");
            return;
        }

        NavigationManager.NavigateTo($"/export/package?packageName={components[0]}");
    }

    /// <summary>Button load package clicked.</summary>
    /// <param name="directive">The directive.</param>
    void ButtonLoadPackageClicked(string directive)
    {
        PackageService.RequestLoad(directive, out _);
    }

    /// <summary>Request delete.</summary>
    /// <param name="versionInfo">Information describing the version.</param>
    private void RequestDelete(string directive)
    {
        PackageService.DeletePackage(directive);
    }


    /// <summary>Dependencies for package.</summary>
    /// <param name="record">The record.</param>
    /// <returns>A string.</returns>
    string DependenciesForPackage(PackageCacheRecord record)
    {
        if (record.Details?.Dependencies?.Any() != true)
        {
            return string.Empty;
        }

        return string.Join(", ", record.Details.Dependencies.Select((KeyValuePair<string, string> kvp) => $"{kvp.Key}#{kvp.Value}"));
    }
}
