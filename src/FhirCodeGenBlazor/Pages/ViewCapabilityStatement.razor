@page "/view/capabilitystatement"

@using FhirCodeGenBlazor.Models
@using FhirCodeGenBlazor.Services
@using Microsoft.Health.Fhir.CodeGenCommon.Extensions;
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@inject NavigationManager NavManager
@inject ISpecManagerWebService SpecService
@implements IDisposable
@implements IPackageVersionProvider

@if (fhirCaps == null)
{
    <PageTitle>FHIR CapabilityStatement</PageTitle>
}
else
{
    <PageTitle>@fhirCaps.Name</PageTitle>
    @if (fhirCaps != null)
    {
        <MudExpansionPanels MultiExpansion="true">
            <MudExpansionPanel Text="Capability Statement Information" IsInitiallyExpanded="true">
                <MudGrid Spacing="1">
                    <MudItem xs="12"><MudText Typo="Typo.h5">FHIR Capability Statement: @fhirCaps.Name</MudText></MudItem>

                    <MudItem xs="2">Id</MudItem>
                    <MudItem xs="10">@fhirCaps.Id</MudItem>

                    <MudItem xs="2">Name</MudItem>
                    <MudItem xs="10">@fhirCaps.Name</MudItem>

                    <MudItem xs="2">Title</MudItem>
                    <MudItem xs="10">@fhirCaps.Title</MudItem>

                    <MudItem xs="2">URL</MudItem>
                    <MudItem xs="10">@fhirCaps.Url</MudItem>

                    <MudItem xs="2">FHIR Version</MudItem>
                    <MudItem xs="10">@fhirCaps.FhirVersion</MudItem>

                    <MudItem xs="2">Software Name</MudItem>
                    <MudItem xs="10">@fhirCaps.SoftwareName</MudItem>

                    <MudItem xs="2">Software Version</MudItem>
                    <MudItem xs="10">@fhirCaps.SoftwareVersion</MudItem>

                    <MudItem xs="2">Software Release Date</MudItem>
                    <MudItem xs="10">@fhirCaps.SoftwareReleaseDate</MudItem>

                    <MudItem xs="2">Implementation Description</MudItem>
                    <MudItem xs="10">@fhirCaps.ImplementationDescription</MudItem>

                    <MudItem xs="2">Implementation URL</MudItem>
                    <MudItem xs="10">@fhirCaps.ImplementationUrl</MudItem>

                    <MudItem xs="2">FHIR MIME Types</MudItem>
                    <MudItem xs="10">
                        @foreach (FhirCapabiltyStatement.ValWithExpectation<string> v in fhirCaps.FhirMimeTypesEx)
                        {
                            <MudChip>@(v.Value + " (" + v.ExpectationCode + ")")</MudChip>
                        }
                    </MudItem>

                    <MudItem xs="2">Patch MIME Types</MudItem>
                    <MudItem xs="10">
                        @foreach (FhirCapabiltyStatement.ValWithExpectation<string> v in fhirCaps.PatchMimeTypesEx)
                        {
                            <MudChip>@(v.Value + " (" + v.ExpectationCode + ")")</MudChip>
                        }
                    </MudItem>

                    <MudItem xs="2">Instantiates (Implements)</MudItem>
                    <MudItem xs="10">
                        @foreach (FhirCapabiltyStatement.ValWithExpectation<string> v in fhirCaps.InstantiatesEx)
                        {
                            <MudChip>@(v.Value + " (" + v.ExpectationCode + ")")</MudChip>
                        }
                    </MudItem>

                    <MudItem xs="2">Supported IGs</MudItem>
                    <MudItem xs="10">
                        @foreach (FhirCapabiltyStatement.ValWithExpectation<string> v in fhirCaps.ImplementationGuidesEx)
                        {
                            <MudChip>@(v.Value + " (" + v.ExpectationCode + ")")</MudChip>
                        }
                    </MudItem>
                </MudGrid>
            </MudExpansionPanel>
            @if (!string.IsNullOrEmpty(fhirCaps.NarrativeText))
            {
                <MudExpansionPanel Text="@("Narrative: " + fhirCaps.NarrativeStatus)">
                    <MudPaper Class="pa-16 ma-2" Elevation="3">
                        @(new MarkupString(fhirCaps.NarrativeText))
                    </MudPaper>
                </MudExpansionPanel>
            }
            <MudExpansionPanel Text="Resources">
                <MudTable Items="@fhirCaps.ResourceInteractions.Values"
                      Striped="true"
                      Hover="true"
                      Dense="true"
                      Height="60vh"
                      FixedHeader="true">
                    <ColGroup>
                        <col style="width: 10vw!important;" />
                        <col style="width: 30vw!important;" />
                        <col style="width: 30vw!important;" />
                        <col style="width: 30vw!important;" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Resource Type</MudTh>
                        <MudTh>Profiles</MudTh>
                        <MudTh>Searches</MudTh>
                        <MudTh>Operations</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.ToStringWithExpectation()</MudTd>
                        <MudTd>@string.Join(", ", context.SupportedProfilesEx.Select(v => v.ToStringWithExpectation()))</MudTd>
                        <MudTd>@string.Join(", ", context.SearchParameters.Values.Select(sp => sp.ToStringWithExpectation()))</MudTd>
                        <MudTd>@string.Join(", ", context.Operations.Values.Select(op => op.ToStringWithExpectation()))</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Server Search Parameters">
            </MudExpansionPanel>
            <MudExpansionPanel Text="Server Operations">
            </MudExpansionPanel>

        </MudExpansionPanels>
    }
}

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "packageName")]
    public string PackageName { get; set; } = "";

    /// <summary>Gets or sets the package version.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "version")]
    public string Version { get; set; } = "";

    /// <summary>Gets or sets the identifier.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "url")]
    public string Url { get; set; } = "";

    /// <summary>The directive.</summary>
    private string directive = string.Empty;

    /// <summary>A FHIR Capability Statement.</summary>
    private FhirCapabiltyStatement? fhirCaps = null;



    //private IEnumerable<dynamic> expandedInteractions =  

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavTracker?.NotifyNav(Url, $"view/CapabilityStatement?packageName={PackageName}&version={Version}&url={Url}", 2);
        NavManager.LocationChanged += HandleLocationChanged;

        if (string.IsNullOrEmpty(PackageName))
        {
            return;
        }

        directive = PackageName + "#" + Version;
        GetObject();
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/view/CodeSystem"))
        {
            NavTracker?.NotifyNav(Url, $"view/CapabilityStatement?packageName={PackageName}&version={Version}&url={Url}", 2);
            directive = PackageName + "#" + Version;
            GetObject();
        }
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }

    /// <summary>Gets property string.</summary>
    /// <param name="concept">The concept.</param>
    /// <returns>The property string.</returns>
    private string GetPropertyString(FhirConcept concept)
    {
        if (!concept.Properties.Any())
        {
            return string.Empty;
        }

        return string.Join(", ", concept.Properties.Select((kvp) => kvp.Key + ": " + string.Join(", ", kvp.Value)));
    }

    /// <summary>Gets the object.</summary>
    private void GetObject()
    {
        if (string.IsNullOrEmpty(directive))
        {
            Console.WriteLine("Missing required directive!");
            return;
        }

        if (string.IsNullOrEmpty(Url))
        {
            Console.WriteLine("Missing required Url");
            return;
        }

        if (!SpecService.ContainsKey(directive))
        {
            Console.WriteLine($"Directive {directive} is unknown or not loaded");
            return;
        }

        fhirCaps = null;

        if (!SpecService[directive].TryGetArtifact(
                Url,
                out object obj,
                out FhirArtifactClassEnum fhirArtifactClass,
                out _,
                true,
                FhirArtifactClassEnum.CapabilityStatement))
        {
            Console.WriteLine($"Unresolved artifact: {Url} from {PackageName}#{Version}!");
            return;
        }

        if (fhirArtifactClass != FhirArtifactClassEnum.CapabilityStatement)
        {
            Console.WriteLine($"Incorrect artifact type: {Url} from {PackageName}#{Version} came back as {fhirArtifactClass}!");
            return;
        }

        fhirCaps = (FhirCapabiltyStatement)obj;

        // manually flag state has changed in case we are in a callback / async context
        InvokeAsync(() => StateHasChanged());
    }
}
