@page "/view/package"

@using FhirCodeGenBlazor.Models;
@using FhirCodeGenBlazor.Services;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@inject ISpecManagerWebService SpecService
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage BrowserStore
@implements IDisposable

@if (string.IsNullOrEmpty(directive) ||
     (!SpecService.ContainsKey(directive)))
{
    <PageTitle>FHIR Package Browser</PageTitle>
    <MudText Typo="Typo.h5">This page requires a loaded package (specified by name and version).</MudText>
}
else
{
    <PageTitle>@directive</PageTitle>

    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel Text="Artifact Type Filtering">
            <MudGrid>
                <MudItem xs="6" sm="3">
                    <MudFab StartIcon="@Icons.Material.Filled.Flip"
                            Label="Toggle All Artifacts"
                            OnClick="() => InvokeAsync(() => ToggleShowArtifactState())"
                            Disabled="@_busy"
                            />
                </MudItem>

                @foreach(FhirArtifactClassEnum ac in showArtifactClass.Keys.OrderBy(k => k.ToString()))
                {
                    <MudItem xs="6" sm="3">
                        <MudSwitch
                            Color="Color.Info"
                            Checked="@showArtifactClass[ac]"
                            CheckedChanged="@((bool s) => ToggleShowState(ac, s))"
                            Label="@(ac.ToString() + " (" + SpecService[directive].ArtifactRecordsByClass[ac].Count() + ")")" />
                    </MudItem>
                }
            </MudGrid>
        </MudExpansionPanel>
    </MudExpansionPanels>
    <MudTable
        Items="filteredArtifacts"
          Height="calc(100vh - (var(--mud-appbar-height) * 2.9))"
          Filter="new Func<FhirArtifactRecord, bool>(FilterFuncInstance)"
        Dense="true"
        Striped="true"
        Virtualize="true"
        FixedHeader="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Package Contents</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="artifactFilterText" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col style="width: 10vw!important;" />
            <col style="width: 10vw!important;" />
            <col style="width: 80vw!important;" />
        </ColGroup>
        <HeaderContent>
            <MudTh>Artifact Type</MudTh>
            <MudTh>Id</MudTh>
            <MudTh>Url</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.ArtifactClass</MudTd>
            <MudTd><MudLink href="@LinkForArtifact(context)">@context.Id</MudLink></MudTd>
            <MudTd>@context.Url</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private List<FhirArtifactRecord> filteredArtifacts = new();

    private Dictionary<FhirArtifactClassEnum, bool> showArtifactClass = new();

    /// <summary>Specifies the filter.</summary>
    private string artifactFilterText = "";

    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "packageName")]
    public string PackageName { get; set; } = "";

    /// <summary>Gets or sets the package version.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "version")]
    public string Version { get; set; } = "";

    /// <summary>The directive.</summary>
    private string directive = string.Empty;

    /// <summary>Control toggle behavior of the 'all' button.</summary>
    private bool _showArtifactState = true;

    /// <summary>If the page should be showing progress indicators.</summary>
    private bool _busy = false;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        directive = PackageName + "#" + Version;

        NavTracker?.NotifyNav("Explore " + directive, $"view/package?packageName={PackageName}&version={Version}", 1);
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    /// <summary>Executes the after render action.</summary>
    /// <param name="firstRender">True to first render.</param>
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Task.Run(() => RebuildFilteredArtifacts(artifactFilterText, true));
        }

        base.OnAfterRender(firstRender);
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    /// <summary>Artifacts updated.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Artifact index changed event information.</param>
    private void ArtifactsUpdated(object? sender, ArtifactIndexChangedEventArgs e)
    {
        if ((e.PackageName == PackageName) && (e.Version == Version))
        {
            RebuildFilteredArtifacts(artifactFilterText, true);
        }
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/view/package"))
        {
            directive = PackageName + "#" + Version;

            NavTracker?.NotifyNav("Explore " + directive, $"view/package?packageName={PackageName}&version={Version}", 1);
        }
    }

    /// <summary>Toggle show artifact state.</summary>
    private void ToggleShowArtifactState()
    {
        // flag we are busy - will be cleared by RebuildFilteredArtifacts
        _busy = true;

        _showArtifactState = !_showArtifactState;
        foreach (FhirArtifactClassEnum ac in showArtifactClass.Keys)
        {
            showArtifactClass[ac] = _showArtifactState;
            _ = BrowserStore.SetAsync("showAC_" + ac, showArtifactClass[ac]);
        }

        InvokeAsync(() => RebuildFilteredArtifacts(artifactFilterText, false));
    }

    /// <summary>Toggle show state.</summary>
    /// <param name="classEnum">The class enum.</param>
    private void ToggleShowState(FhirArtifactClassEnum classEnum, bool? v)
    {
        if (v == showArtifactClass[classEnum])
        {
            return;
        }

        if (v == null)
        {
            showArtifactClass[classEnum] = !showArtifactClass[classEnum];
        }
        else
        {
            showArtifactClass[classEnum] = (v == true);
        }

        _ = BrowserStore.SetAsync("showAC_" + classEnum, showArtifactClass[classEnum]);

        InvokeAsync(() => RebuildFilteredArtifacts(artifactFilterText, false));
    }

    /// <summary>Filter function instance.</summary>
    /// <param name="rec">The record.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool FilterFuncInstance(FhirArtifactRecord rec) => FilterFuncDefinition(rec, artifactFilterText);

    /// <summary>Filter function definition.</summary>
    /// <param name="rec">         The record.</param>
    /// <param name="searchString">The search string.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool FilterFuncDefinition(FhirArtifactRecord rec, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString) ||
            rec.Id.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
            rec.Url.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    /// <summary>Rebuild filtered artifacts.</summary>
    /// <param name="appliedFilter">            (Optional) A filter specifying the applied.</param>
    /// <param name="checkShownArtifactClasses">(Optional) True to check show artifact classes.</param>
    private async void RebuildFilteredArtifacts(
        string appliedFilter = "",
        bool checkShownArtifactClasses = false)
    {
        if (!SpecService.ContainsKey(directive))
        {
            return;
        }

        _busy = true;

        if (checkShownArtifactClasses)
        {
            foreach (FhirArtifactClassEnum classEnum in SpecService[directive].ArtifactRecordsByClass.Keys)
            {
                if (!showArtifactClass.ContainsKey(classEnum))
                {
                    var readResult = await BrowserStore.GetAsync<bool>("showAC_" + classEnum);
                    if (readResult.Success)
                    {
                        showArtifactClass.Add(classEnum, readResult.Value);
                    }
                    else
                    {
                        switch (classEnum)
                        {
                            case FhirArtifactClassEnum.Resource:
                                showArtifactClass.Add(classEnum, true);
                                break;

                            default:
                                showArtifactClass.Add(classEnum, false);
                                break;
                        }
                    }
                }
            }

            foreach (FhirArtifactClassEnum classEnum in showArtifactClass.Keys)
            {
                if (!SpecService[directive].ArtifactRecordsByClass.ContainsKey(classEnum))
                {
                    showArtifactClass.Remove(classEnum);
                }
            }
        }

        //artifactFilterText = appliedFilter;

        if (SpecService[directive].ArtifactRecordsByClass == null)
        {
            filteredArtifacts = new();

            // manually flag state has changed in case we are in a callback / async context
            await InvokeAsync(() => StateHasChanged());

            return;
        }

        List<FhirArtifactRecord> artifacts = new();

        foreach ((FhirArtifactClassEnum classEnum, IEnumerable<FhirArtifactRecord> records) in SpecService[directive].ArtifactRecordsByClass)
        {
            if (showArtifactClass[classEnum] != true)
            {
                continue;
            }

            artifacts.AddRange(records);

            //AppendFilteredArtifacts(classEnum, appliedFilter, ref artifacts, records);
        }

        artifacts.Sort((a, b) => a.Id.CompareTo(b.Id));
        filteredArtifacts = artifacts;

        _busy = false;

        // manually flag state has changed in case we are in a callback / async context
        await InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Links for artifact.</summary>
    /// <param name="record">The record.</param>
    /// <returns>A string.</returns>
    private string LinkForArtifact(FhirArtifactRecord record)
    {
        switch (record.ArtifactClass)
        {
            // types requiring specific view pages
            case FhirArtifactClassEnum.CodeSystem:
            case FhirArtifactClassEnum.Operation:
            case FhirArtifactClassEnum.PrimitiveType:
            case FhirArtifactClassEnum.ValueSet:
            case FhirArtifactClassEnum.CapabilityStatement:
                return $"/view/{record.ArtifactClass}/?packageName={PackageName}&version={Version}&url={record.Url}";

            // types using the ViewFhirComplex page
            case FhirArtifactClassEnum.ComplexType:
            case FhirArtifactClassEnum.Extension:
            case FhirArtifactClassEnum.LogicalModel:
            case FhirArtifactClassEnum.Profile:
            case FhirArtifactClassEnum.Resource:
                return $"/view/complex/?packageName={PackageName}&version={Version}&url={record.Url}&ac={record.ArtifactClass}";

            // types not displayable
            case FhirArtifactClassEnum.Compartment:
            case FhirArtifactClassEnum.ConceptMap:
            case FhirArtifactClassEnum.ImplementationGuide:
            case FhirArtifactClassEnum.NamingSystem:
            case FhirArtifactClassEnum.SearchParameter:
            case FhirArtifactClassEnum.StructureMap:
            case FhirArtifactClassEnum.Unknown:
            default:
                break;
        }

        return "";
    }
}
