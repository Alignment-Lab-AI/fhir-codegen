@page "/view/codesystem"

@using FhirCodeGenBlazor.Models
@using FhirCodeGenBlazor.Services
@using FhirCodeGenBlazor.Components
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@inject NavigationManager NavManager
@inject ISpecManagerWebService SpecService
@implements IDisposable
@implements IPackageVersionProvider

@if (fhirCodeSystem == null)
{
    <PageTitle>FHIR CodeSystem</PageTitle>
}
else
{
    <PageTitle>@fhirCodeSystem.Name</PageTitle>
    @if (fhirCodeSystem != null)
    {
        <MudExpansionPanels MultiExpansion="true">
            <MudExpansionPanel Text="CodeSystem Information">
                <MudGrid Spacing="1">
                    <MudItem xs="12"><MudText Typo="Typo.h5">FHIR Code System: @fhirCodeSystem.Name</MudText></MudItem>

                    <MudItem xs="2">Id</MudItem>
                    <MudItem xs="10">@fhirCodeSystem.Id</MudItem>

                    <MudItem xs="2">Name</MudItem>
                    <MudItem xs="10">@fhirCodeSystem.Name</MudItem>

                    <MudItem xs="2">Title</MudItem>
                    <MudItem xs="10">@fhirCodeSystem.Title</MudItem>

                    <MudItem xs="2">URL</MudItem>
                    <MudItem xs="10">@fhirCodeSystem.URL.ToString()</MudItem>

                    <MudItem xs="2">Version</MudItem>
                    <MudItem xs="10">@fhirCodeSystem.Version</MudItem>

                    <MudItem xs="2">Standard Status</MudItem>
                    <MudItem xs="10">@fhirCodeSystem.StandardStatus</MudItem>

                    <MudItem xs="2">Short Description</MudItem>
                    <MudItem xs="10">@fhirCodeSystem.Description</MudItem>
                </MudGrid>
            </MudExpansionPanel>
        </MudExpansionPanels>

        @if (fhirCodeSystem?.ConceptLookup?.Any() ?? false)
        {
            <MudTable Items="@fhirCodeSystem.ConceptLookup.Values"
                  Striped="true"
                  Hover="true"
                  Dense="true"
                  Height="calc(100vh - (var(--mud-appbar-height) * 2.9))"
                  FixedHeader="true">
                <ColGroup>
                    <col style="width: 5vw!important;" />
                    <col style="width: 5vw!important;" />
                    <col style="width: 20vw!important;" />
                    <col style="width: 70vw!important;" />
                </ColGroup>
                <HeaderContent>
                    <MudTh>Code</MudTh>
                    <MudTh>Display</MudTh>
                    <MudTh>Definition</MudTh>
                    <MudTh>Properties</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd><MudText Typo="Typo.body2">@context.Concept.Code</MudText></MudTd>
                    <MudTd>@context.Concept.Display</MudTd>
                    <MudTd>@context.Concept.Definition</MudTd>
                    <MudTd>@GetPropertyString(context.Concept)</MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudText>There are no non-deprecated conepts present.</MudText>
        }
    }
}

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "packageName")]
    public string PackageName { get; set; } = "";

    /// <summary>Gets or sets the package version.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "version")]
    public string Version { get; set; } = "";

    /// <summary>Gets or sets the identifier.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "url")]
    public string Url { get; set; } = "";

    /// <summary>The directive.</summary>
    private string directive = string.Empty;

    /// <summary>A complex-type FHIR artifact (resource, complex data type, etc.).</summary>
    private FhirCodeSystem? fhirCodeSystem = null;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavTracker?.NotifyNav(Url, $"view/CodeSystem?packageName={PackageName}&version={Version}&url={Url}", 2);
        NavManager.LocationChanged += HandleLocationChanged;

        if (string.IsNullOrEmpty(PackageName))
        {
            return;
        }

        directive = PackageName + "#" + Version;
        GetObject();
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/view/CodeSystem"))
        {
            NavTracker?.NotifyNav(Url, $"view/CodeSystem?packageName={PackageName}&version={Version}&url={Url}", 2);
            directive = PackageName + "#" + Version;
            GetObject();
        }
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }

    /// <summary>Gets property string.</summary>
    /// <param name="concept">The concept.</param>
    /// <returns>The property string.</returns>
    private string GetPropertyString(FhirConcept concept)
    {
        if (!concept.Properties.Any())
        {
            return string.Empty;
        }

        return string.Join(", ", concept.Properties.Select((kvp) => kvp.Key + ": " + string.Join(", ", kvp.Value)));
    }

    /// <summary>Gets the object.</summary>
    private void GetObject()
    {
        if (string.IsNullOrEmpty(directive))
        {
            Console.WriteLine("Missing required directive!");
            return;
        }

        if (string.IsNullOrEmpty(Url))
        {
            Console.WriteLine("Missing required Url");
            return;
        }

        if (!SpecService.ContainsKey(directive))
        {
            Console.WriteLine($"Directive {directive} is unknown or not loaded");
            return;
        }

        fhirCodeSystem = null;

        if (!SpecService[directive].TryGetArtifact(
                Url,
                out object obj,
                out FhirArtifactClassEnum fhirArtifactClass,
                out _,
                true,
                FhirArtifactClassEnum.CodeSystem))
        {
            Console.WriteLine($"Unresolved artifact: {Url} from {PackageName}#{Version}!");
            return;
        }

        if (fhirArtifactClass != FhirArtifactClassEnum.CodeSystem)
        {
            Console.WriteLine($"Incorrect artifact type: {Url} from {PackageName}#{Version} came back as {fhirArtifactClass}!");
            return;
        }

        fhirCodeSystem = (FhirCodeSystem)obj;

        // manually flag state has changed in case we are in a callback / async context
        InvokeAsync(() => StateHasChanged());
    }
}
