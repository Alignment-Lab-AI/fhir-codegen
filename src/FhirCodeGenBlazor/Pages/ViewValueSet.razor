@page "/view/valueset"

@using FhirCodeGenBlazor.Models
@using FhirCodeGenBlazor.Services
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@inject NavigationManager NavManager
@inject ISpecManagerWebService SpecService
@implements IDisposable
@implements IPackageVersionProvider

@if (fhirValueSet == null)
{
    <PageTitle>FHIR ValueSet</PageTitle>
}
else
{
    <PageTitle>@fhirValueSet.Name</PageTitle>

    @if (fhirValueSet != null)
    {
        <MudExpansionPanels MultiExpansion="true">
            <MudExpansionPanel Text="ValueSet Information">
                <MudGrid Spacing="1">
                    <MudItem xs="12"><MudText Typo="Typo.h5">FHIR Value Set: @fhirValueSet.Name</MudText></MudItem>

                    <MudItem xs="2">Id</MudItem>
                    <MudItem xs="10">@fhirValueSet.Id</MudItem>

                    <MudItem xs="2">Name</MudItem>
                    <MudItem xs="10">@fhirValueSet.Name</MudItem>

                    <MudItem xs="2">Title</MudItem>
                    <MudItem xs="10">@fhirValueSet.Title</MudItem>

                    <MudItem xs="2">URL</MudItem>
                    <MudItem xs="10">@fhirValueSet.URL.ToString()</MudItem>

                    <MudItem xs="2">Version</MudItem>
                    <MudItem xs="10">@fhirValueSet.Version</MudItem>

                    <MudItem xs="2">Standard Status</MudItem>
                    <MudItem xs="10">@fhirValueSet.StandardStatus</MudItem>

                    <MudItem xs="2">Short Description</MudItem>
                    <MudItem xs="10">@fhirValueSet.Description</MudItem>
                </MudGrid>
            </MudExpansionPanel>

            <MudExpansionPanel Text="Expansion">
                @if (fhirValueSet?.Expansion != null)
                {
                    <MudGrid>
                        <MudItem xs="2">Identifier</MudItem>
                        <MudItem xs="10">@fhirValueSet.Expansion.Identifier</MudItem>

                        <MudItem xs="2">Timestamp</MudItem>
                        <MudItem xs="10">@fhirValueSet.Expansion.Timestamp</MudItem>

                        <MudItem xs="2">Is a Limited Expansion</MudItem>
                        <MudItem xs="10">@fhirValueSet.Expansion.IsLimitedExpansion</MudItem>

                        <MudItem xs="2">Parameters</MudItem>
                        @foreach ((string name, dynamic value) in fhirValueSet.Expansion.Parameters)
                        {
                            <MudItem xs="2">
                                <MudField Label="@name" Variant="Variant.Text">@value</MudField>
                            </MudItem>
                        }
                    </MudGrid>

                    <MudTable Items="@fhirValueSet.Expansion.Contains"
                          Striped="true"
                          Hover="true"
                          Dense="true"
                          Height="50vh"
                          FixedHeader="true">
                        <ColGroup>
                            <col style="width: 5vw!important;" />
                            <col style="width: 5vw!important;" />
                            <col style="width: 20vw!important;" />
                            <col style="width: 70vw!important;" />
                        </ColGroup>
                        <HeaderContent>
                            <MudTh>Code</MudTh>
                            <MudTh>Display</MudTh>
                            <MudTh>Definition</MudTh>
                            <MudTh>Properties</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd><MudText Typo="Typo.body2">@context.Code</MudText></MudTd>
                            <MudTd>@context.Display</MudTd>
                            <MudTd>@context.Definition</MudTd>
                            <MudTd>@GetPropertyString(context)</MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudText>There is no expansion loaded for this ValueSet.</MudText>
                }
            </MudExpansionPanel>

            @if (fhirValueSet?.Concepts?.Any() ?? false)
            {
                <MudExpansionPanel Text="Enumerated Concepts">
                    <MudTable Items="@fhirValueSet.Concepts"
                          Striped="true"
                          Hover="true"
                          Dense="true"
                          Height="50vh"
                          FixedHeader="true">
                        <ColGroup>
                            <col style="width: 5vw!important;" />
                            <col style="width: 5vw!important;" />
                            <col style="width: 20vw!important;" />
                            <col style="width: 70vw!important;" />
                        </ColGroup>
                        <HeaderContent>
                            <MudTh>Code</MudTh>
                            <MudTh>Display</MudTh>
                            <MudTh>Definition</MudTh>
                            <MudTh>Properties</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd><MudText Typo="Typo.body2">@context.Code</MudText></MudTd>
                            <MudTd>@context.Display</MudTd>
                            <MudTd>@context.Definition</MudTd>
                            <MudTd>@GetPropertyString(context)</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudExpansionPanel>
            }

            @if (fhirValueSet?.ComposeIncludes != null)
            {
                @foreach (FhirValueSetComposition vsc in fhirValueSet.ComposeIncludes)
                {
                    <MudExpansionPanel Text="@("Composition Include: " + vsc.System + (string.IsNullOrEmpty(vsc.Version) ? string.Empty : "|" + vsc.Version))">
                        @if (vsc.Filters?.Count > 0)
                        {
                            <MudTable Items="@vsc.Filters"
                                  Striped="true"
                                  Hover="true"
                                  Dense="true">
                                <HeaderContent>
                                    <MudTh>Property</MudTh>
                                    <MudTh>Operation</MudTh>
                                    <MudTh>Value</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@context.Property</MudTd>
                                    <MudTd>@context.Operation</MudTd>
                                    <MudTd>@context.Value</MudTd>
                                </RowTemplate>
                            </MudTable>
                        }

                        @if (vsc.Concepts?.Count > 0)
                        {
                            <MudTable Items="@vsc.Concepts"
                                  Striped="true"
                                  Hover="true"
                                  Dense="true">
                                <HeaderContent>
                                    <MudTh>Code</MudTh>
                                    <MudTh>Display</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@context.Code</MudTd>
                                    <MudTd>@context.Display</MudTd>
                                </RowTemplate>
                            </MudTable>
                        }
                    </MudExpansionPanel>
                }
            }

            @if (fhirValueSet?.ComposeExcludes != null)
            {
                @foreach (FhirValueSetComposition vsc in fhirValueSet.ComposeExcludes)
                {
                    <MudExpansionPanel Text="@("Composition Exclude: " + vsc.System + (string.IsNullOrEmpty(vsc.Version) ? string.Empty : "|" + vsc.Version))">
                        @if (vsc.Filters?.Count > 0)
                        {
                            <MudTable Items="@vsc.Filters"
                                  Striped="true"
                                  Hover="true"
                                  Dense="true">
                                <HeaderContent>
                                    <MudTh>Property</MudTh>
                                    <MudTh>Operation</MudTh>
                                    <MudTh>Value</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@context.Property</MudTd>
                                    <MudTd>@context.Operation</MudTd>
                                    <MudTd>@context.Value</MudTd>
                                </RowTemplate>
                            </MudTable>
                        }

                        @if (vsc.Concepts?.Count > 0)
                        {
                            <MudTable Items="@vsc.Concepts"
                                  Striped="true"
                                  Hover="true"
                                  Dense="true">
                                <HeaderContent>
                                    <MudTh>Code</MudTh>
                                    <MudTh>Display</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@context.Code</MudTd>
                                    <MudTd>@context.Display</MudTd>
                                </RowTemplate>
                            </MudTable>
                        }
                    </MudExpansionPanel>
                }
            }

        </MudExpansionPanels>
    }
}

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "packageName")]
    public string PackageName { get; set; } = "";

    /// <summary>Gets or sets the package version.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "version")]
    public string Version { get; set; } = "";

    /// <summary>Gets or sets the identifier.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "url")]
    public string Url { get; set; } = "";

    /// <summary>The directive.</summary>
    private string directive = string.Empty;

    /// <summary>A FHIR Value Set.</summary>
    private FhirValueSet? fhirValueSet = null;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavTracker?.NotifyNav(Url, $"view/valueset?packageName={PackageName}&version={Version}&url={Url}", 2);
        NavManager.LocationChanged += HandleLocationChanged;

        if (string.IsNullOrEmpty(PackageName))
        {
            return;
        }

        directive = PackageName + "#" + Version;
        GetObject();
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/view/valueset"))
        {
            NavTracker?.NotifyNav(Url, $"view/valueset?packageName={PackageName}&version={Version}&url={Url}", 2);
            directive = PackageName + "#" + Version;
            GetObject();
        }
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }

    /// <summary>Gets property string.</summary>
    /// <param name="concept">The concept.</param>
    /// <returns>The property string.</returns>
    private string GetPropertyString(FhirConcept concept)
    {
        if (!concept.Properties.Any())
        {
            return string.Empty;
        }

        return string.Join(", ", concept.Properties.Select((kvp) => kvp.Key + ": " + string.Join(", ", kvp.Value)));
    }

    /// <summary>Gets the object.</summary>
    private void GetObject()
    {
        if (string.IsNullOrEmpty(directive))
        {
            Console.WriteLine("Missing required directive!");
            return;
        }

        if (string.IsNullOrEmpty(Url))
        {
            Console.WriteLine("Missing required Url");
            return;
        }

        if (!SpecService.ContainsKey(directive))
        {
            Console.WriteLine($"Directive {directive} is unknown or not loaded");
            return;
        }

        fhirValueSet = null;

        if (!SpecService[directive].TryGetArtifact(
                Url,
                out object obj,
                out FhirArtifactClassEnum fhirArtifactClass,
                out _,
                true,
                FhirArtifactClassEnum.ValueSet))
        {
            Console.WriteLine($"Unresolved artifact: {Url} from {PackageName}#{Version}!");
            return;
        }

        if (fhirArtifactClass != FhirArtifactClassEnum.ValueSet)
        {
            Console.WriteLine($"Incorrect artifact type: {Url} from {PackageName}#{Version} came back as {fhirArtifactClass}!");
            return;
        }

        fhirValueSet = (FhirValueSet)obj;

        // manually flag state has changed in case we are in a callback / async context
        InvokeAsync(() => StateHasChanged());
    }
}
