@page "/script/package"

@using BlazorMonaco
@using BlazorMonaco.Editor
@using FhirCodeGenBlazor.Models;
@using FhirCodeGenBlazor.Services;
@using Markdig;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.CodeAnalysis.CSharp.Scripting;
@using Microsoft.CodeAnalysis.Scripting;
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@using Microsoft.Health.Fhir.SpecManager.Manager;
@using System.IO;
@using System.Text.RegularExpressions;
@using System.Linq;
@using static FhirCodeGenBlazor.Models.PackageElementModels

@inject ISpecManagerWebService SpecService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage BrowserStore
@implements IDisposable
@implements IPackageVersionProvider

@if (string.IsNullOrEmpty(directive) ||
    (!SpecService.ContainsKey(directive)))
{
    <PageTitle>FHIR Element Search</PageTitle>
    <MudText Typo="Typo.h5">This page requires a loaded package (specified by name and version).</MudText>
}
else
{
    <PageTitle>@directive</PageTitle>

    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel Text="Advanced Filtering" IsInitiallyExpanded="true">
            <MudGrid>
                <MudItem xs="12">
                    <StandaloneCodeEditor @ref="_editor" Id="script-code-editor" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" />
                </MudItem>
                <MudItem xs="12">
                    For details and examples, please see the
                    <MudLink href="https://microsoft.github.io/fhir-codegen/articles/blazorui.html#linq" target="_blank">API documentation</MudLink>.
                </MudItem>
                <MudItem xs="12">
                    <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => CompileScript())">
                        @if (_busy)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        }
                        else
                        {
                            <MudText>Compile</MudText>
                        }
                    </MudButton>
                    <MudButton Color="Color.Primary" Disabled="@inputIsInvalid" Variant="Variant.Outlined" OnClick="@(() => RunCompiledScript())">
                        @if (_busy)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        }
                        else
                        {
                            <MudText>Run</MudText>
                        }
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudExpansionPanel>
    </MudExpansionPanels>

    <StandaloneCodeEditor @ref="_resultEditor" Id="script-result-editor" ConstructionOptions="ResultConstructionOptions" OnDidInit="EditorOnDidInit" />

}


@code {
    private StandaloneCodeEditor? _editor = null;
    private StandaloneCodeEditor? _resultEditor = null;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "csharp",
                Theme = "vs-dark",
                GlyphMargin = false,
                Value = "",
            };
    }


    private StandaloneEditorConstructionOptions ResultConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "text",
                Theme = "vs-dark",
                GlyphMargin = false,
                Value = "",
            };
    }

    /// <summary>A script globals.</summary>
    public class ScriptGlobals
    {
        /// <summary>Gets the FhirVersionInfo.</summary>
        public FhirVersionInfo Info { get; }

        /// <summary>Initializes a new instance of the ScriptGlobals class.</summary>
        /// <param name="info">The information.</param>
        public ScriptGlobals(FhirVersionInfo info)
        {
            Info = info;
        }
    }

    /// <summary>The compiled.</summary>
    private Script<object>? _compiled = null;

    /// <summary>True if input is invalid.</summary>
    private bool inputIsInvalid = true;

    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "packageName")]
    public string PackageName { get; set; } = "";

    /// <summary>Gets or sets the package version.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "version")]
    public string Version { get; set; } = "";

    /// <summary>The directive.</summary>
    private string directive = string.Empty;

    /// <summary>Options for controlling the JSON serializer.</summary>
    private static System.Text.Json.JsonSerializerOptions jsonSerializerOptions = new()
    {
        Converters = { new System.Text.Json.Serialization.JsonStringEnumConverter() }
    };

    /// <summary>If the page should be showing progress indicators.</summary>
    private bool _busy = false;

    /// <summary>Options for controlling the create structure script.</summary>
    private ScriptOptions csScriptOpts = ScriptOptions.Default
        .AddReferences(
            typeof(FhirElement).Assembly,
            typeof(SpecManagerWebService).Assembly,
            AppDomain.CurrentDomain.GetAssemblies().SingleOrDefault(a => a.GetName().Name?.Equals("System.Collections") ?? false),
            AppDomain.CurrentDomain.GetAssemblies().SingleOrDefault(a => a.GetName().Name?.Equals("System.Linq") ?? false),
            AppDomain.CurrentDomain.GetAssemblies().SingleOrDefault(a => a.GetName().Name?.Equals("System.Runtime") ?? false),
            AppDomain.CurrentDomain.GetAssemblies().SingleOrDefault(a => a.GetName().Name?.Equals("Microsoft.Health.Fhir.CodeGenCommon") ?? false),
            AppDomain.CurrentDomain.GetAssemblies().SingleOrDefault(a => a.GetName().Name?.Equals("Microsoft.Health.Fhir.SpecManager") ?? false))
        .AddImports(
            "System",
            "System.Linq",
            "System.Text",
            "System.Text.RegularExpressions",
            "System.Collections",
            "System.Collections.Generic",
            "Microsoft.Health.Fhir.CodeGenCommon.Models",
            "Microsoft.Health.Fhir.SpecManager.Manager");

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        directive = PackageName + "#" + Version;

        NavTracker?.NotifyNav("Elements of " + directive, $"view/package/elements?packageName={PackageName}&version={Version}", 1);
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    /// <summary>Executes the after render action.</summary>
    /// <param name="firstRender">True to first render.</param>
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Task.Run(() => LoadSavedContent());
        }

        base.OnAfterRender(firstRender);
    }

    private async Task LoadSavedContent()
    {
        var readResult = await BrowserStore.GetAsync<string>("package-script");
        if (readResult.Success)
        {
            _ = _editor?.SetValue(readResult.Value);
        }
    }

    private async Task EditorOnDidInit()
    {
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/linq/package"))
        {
            directive = PackageName + "#" + Version;

            NavTracker?.NotifyNav("Linq: " + directive, $"linq/package?packageName={PackageName}&version={Version}", 1);
        }
    }

    ///// <summary>Downloads the element paths JSON.</summary>
    //private async void DownloadElementPathsJson()
    //{
    //    ///// <summary>The elements.</summary>
    //    //IEnumerable<string> elements = Array.Empty<string>();

    //    //lock (_elementLockObject)
    //    //{
    //    //    //elements = filteredRecords.Where(e => FilterFuncDefinition(e, searchPredicate)).Select<ElementRecord, string>(e => e.Element.Path);
    //    //}

    //    //string content = System.Text.Json.JsonSerializer.Serialize(elements, jsonSerializerOptions);
    //    //using (Stream fs = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(content), false))
    //    //using (DotNetStreamReference streamRef = new DotNetStreamReference(fs, false))
    //    //{
    //    //    await JS.InvokeVoidAsync("downloadFileFromStream", "elementPaths.json", streamRef);
    //    //}
    //}

    /// <summary>Compile script.</summary>
    private async void CompileScript()
    {
        _busy = true;
        _ = InvokeAsync(() => StateHasChanged());


        if (_editor == null)
        {
            _busy = false;
            inputIsInvalid = true;
            _ = InvokeAsync(() => StateHasChanged());
            return;
        }

        string scriptCode = await _editor!.GetValue();

        if (string.IsNullOrEmpty(scriptCode))
        {
            _busy = false;
            inputIsInvalid = true;
            _ = InvokeAsync(() => StateHasChanged());
            return;
        }

        if ((TryCompile(scriptCode, out _compiled)) &&
            (_compiled != null))
        {
            _busy = false;
            inputIsInvalid = false;
            _ = InvokeAsync(() => StateHasChanged());
            return;
        }

        _busy = false;
        inputIsInvalid = true;
        _ = BrowserStore.SetAsync("package-script", scriptCode);
        _ = InvokeAsync(() => StateHasChanged());
    }

    private void RunCompiledScript()
    {
        if (_compiled == null)
        {
            return;
        }

        _busy = true;
        _ = InvokeAsync(() => StateHasChanged());

        try
        {
            object result = _compiled.RunAsync(new ScriptGlobals(SpecService[directive])).Result.ReturnValue;

            if (result is string resString)
            {
                _resultEditor?.SetValue(resString);
            }
            else if (result is IEnumerable<string> resStringEnum)
            {
                _resultEditor?.SetValue(string.Join('\n', resStringEnum));
            }
            else
            {
                _resultEditor?.SetValue(result.ToString());
            }

            //filteredRecords = Fhir34866();
        }
        catch (Exception ex)
        {
            string msg = $"RunCompiledScript <<< caught exception running filter: {ex.Message}";
            if (ex.InnerException != null)
            {
                msg += $"\n <<< inner: {ex.InnerException.Message}";
            }

            _resultEditor?.SetValue(msg);
        }

        _busy = false;
        InvokeAsync(() => StateHasChanged());
    }


    ///// <summary>Handles the filter change described by value.</summary>
    ///// <param name="value">The value.</param>
    //private void HandleFilterChange()
    //{
    //    if (string.IsNullOrEmpty(scriptCode))
    //    {
    //        inputIsInvalid = true;
    //        _displayTable?.UpdateSelection();
    //        InvokeAsync(() => StateHasChanged());
    //        return;
    //    }

    //    if ((!TryCompile(out Script<IEnumerable<string>>? linqFunc)) ||
    //        (linqFunc == null))
    //    {
    //        inputIsInvalid = true;
    //        _displayTable?.UpdateSelection();
    //        InvokeAsync(() => StateHasChanged());
    //        return;
    //    }

    //    filteredRecords = linqFunc.RunAsync(new ScriptGlobals(SpecService[directive])).Result.ReturnValue;
    //    //filteredRecords = Fhir34866();

    //    Console.WriteLine("Invoke complete!");

    //    inputIsInvalid = false;
    //    _displayTable?.UpdateSelection();
    //    InvokeAsync(() => StateHasChanged());
    //}


    /// <summary>
    /// Attempts to build predicate a Func&lt;FhirElement,bool&gt; from the given FilterOptions.
    /// </summary>
    /// <param name="predicate">[out] The predicate.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool TryCompile(string scriptCode, out Script<object>? func)
    {
        try
        {
            func = CSharpScript.Create<object>(scriptCode, csScriptOpts, typeof(ScriptGlobals));

            //predicate = CSharpScript.EvaluateAsync<Func<IEnumerable<string>>>(
            //    linqPredicate,
            //    csScriptOpts,
            //    new ScriptGlobals(SpecService[directive])).Result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"TryCompile <<< caught exception compiling filter: {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($" <<< inner: {ex.InnerException.Message}");
            }
            func = null;
            return false;
        }

        return true;
    }


    object Fhir34866(FhirVersionInfo Info)
    {
        Dictionary<string, List<string>> workflowsByElementPath = new();
        Dictionary<string, List<string>> elementPathsByWorkflow = new();

        Dictionary<string, List<FhirSearchParam>> patternSearchParameters = new();

        foreach (FhirComplex fc in Info.Resources.Values)
        {
            if (!fc.Mappings.ContainsKey("workflow"))
            {
                continue;
            }

            foreach (FhirElement ce in fc.Elements.Values)
            {
                if (!ce.Mappings.ContainsKey("workflow"))
                {
                    continue;
                }

                foreach (FhirElementDefMapping elementMapping in ce.Mappings["workflow"])
                {
                    if (!elementPathsByWorkflow.ContainsKey(elementMapping.Map))
                    {
                        elementPathsByWorkflow.Add(elementMapping.Map, new());
                    }

                    elementPathsByWorkflow[elementMapping.Map].Add(ce.Path);

                    if (!workflowsByElementPath.ContainsKey(ce.Path))
                    {
                        workflowsByElementPath.Add(ce.Path, new());
                    }

                    workflowsByElementPath[ce.Path].Add(elementMapping.Map);
                }
            }
        }

        foreach (FhirSearchParam sp in Info.SearchParametersByUrl.Values)
        {
            if (string.IsNullOrEmpty(sp.Expression))
            {
                continue;
            }

            if (sp.Expression.Contains('|'))
            {
                foreach ((string path, List<string> workflowPatterns) in workflowsByElementPath)
                {
                    if (!sp.Expression.Contains(path, StringComparison.OrdinalIgnoreCase))
                    {
                        continue;
                    }

                    foreach (string pattern in workflowPatterns)
                    {
                        if (!patternSearchParameters.ContainsKey(pattern))
                        {
                            patternSearchParameters.Add(pattern, new());
                        }

                        patternSearchParameters[pattern].Add(sp);
                    }
                }
            }
            else if (workflowsByElementPath.ContainsKey(sp.Expression))
            {
                foreach (string pattern in workflowsByElementPath[sp.Expression])
                {
                    if (!patternSearchParameters.ContainsKey(pattern))
                    {
                        patternSearchParameters.Add(pattern, new());
                    }

                    patternSearchParameters[pattern].Add(sp);
                }
            }
        }

        string value = string.Empty;

        foreach ((string pattern, List<FhirSearchParam> searchParameters) in patternSearchParameters)
        {
            if (searchParameters.Select((sp) => sp.Code).Distinct().Count() < 2)
            {
                continue;
            }

            foreach (FhirSearchParam sp in searchParameters)
            {
                value += $"\"{pattern}\",\"{sp.Code}\",\"{sp.URL.ToString()}\"\n";
            }

        }

        return value;
        //return patternSearchParameters.Select((kvp) => (kvp.Value.Distinct().Count() > 1) ? $"{kvp.Key}:\n * {string.Join("\n * ", kvp.Value.Distinct())}" : string.Empty).Where(v => !string.IsNullOrEmpty(v));
        //return patternSearchParameters.Select((kvp) => $"{kvp.Key}:\n * {string.Join("\n * ", kvp.Value.Distinct())}");
    }
}
