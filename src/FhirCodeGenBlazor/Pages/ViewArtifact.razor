@page "/viewartifact"

@using FhirCodeGenBlazor.Models
@using FhirCodeGenBlazor.Services
@using FhirCodeGenBlazor.Components
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@inject NavigationManager NavManager
@inject ISpecManagerWebService SpecService
@implements IDisposable
@implements IPackageVersionProvider

<PageTitle>View Artifact</PageTitle>
@if (string.IsNullOrEmpty(headerText))
{
    <h3>FHIR Artifact Viewer</h3>
}
else
{
    <h3>@headerText</h3>
}

@if (fhirComplex != null)
{
    <CascadingValue Value="this">
        <FhirComplexDisplay ObjectToDisplay=@fhirComplex ArtifactClass=@fhirArtifactClass />
    </CascadingValue>
}

@if (fhirPrimitive != null)
{
    <CascadingValue Value="this">
        <FhirPrimitiveDisplay ObjectToDisplay=@fhirPrimitive/>
    </CascadingValue>
}

@code {
    private string headerText = "";

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "packageName")]
    public string PackageName { get; set; } = "";

    /// <summary>Gets or sets the package version.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "version")]
    public string Version { get; set; } = "";

    /// <summary>Gets or sets the identifier.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string Id { get; set; } = "";

    /// <summary>The directive.</summary>
    private string directive = string.Empty;

    /// <summary>A complex-type FHIR artifact (resource, complex data type, etc.).</summary>
    private FhirComplex? fhirComplex = null;

    /// <summary>The FHIR primitive.</summary>
    private FhirPrimitive? fhirPrimitive = null;

    /// <summary>The FHIR operation.</summary>
    private FhirOperation? fhirOperation = null;

    /// <summary>The FHIR search parameter.</summary>
    private FhirSearchParam? fhirSearchParameter = null;

    /// <summary>The FHIR artifact class.</summary>
    private FhirArtifactClassEnum fhirArtifactClass = FhirArtifactClassEnum.Unknown;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavManager.LocationChanged += HandleLocationChanged;

        if (string.IsNullOrEmpty(PackageName))
        {
            return;
        }

        directive = PackageName + "#" + Version;
        GetObject();
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/viewartifact"))
        {
            directive = PackageName + "#" + Version;
            GetObject();

            // manually flag state has changed in case we are in a callback / async context
            await InvokeAsync(() => StateHasChanged());
        }
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }

    private void GetObject()
    {
        if (string.IsNullOrEmpty(directive))
        {
            Console.WriteLine("Missing required directive!");
            return;
        }

        if (string.IsNullOrEmpty(Id))
        {
            Console.WriteLine("Missing required Id");
            return;
        }

        if (!SpecService.ContainsKey(directive))
        {
            Console.WriteLine($"Directive {directive} is unknown or not loaded");
            return;
        }

        fhirComplex = null;
        fhirPrimitive = null;
        fhirOperation = null;
        fhirSearchParameter = null;

        if (!SpecService[directive].TryGetArtifact(Id, out object obj, out fhirArtifactClass))
        {
            headerText = $"Unresolved artifact: {Id} from {PackageName}#{Version}!";
            return;
        }

        switch (fhirArtifactClass)
        {
            case FhirArtifactClassEnum.Profile:
                {
                    fhirComplex = (FhirComplex)obj;
                    headerText = $"FHIR {fhirArtifactClass} - {fhirComplex.ExplicitName ?? fhirComplex.Id} ({PackageName}#{Version})";
                    return;
                }

            case FhirArtifactClassEnum.Resource:
                {
                    fhirComplex = (FhirComplex)obj;
                    headerText = $"FHIR {fhirArtifactClass} - {fhirComplex.ExplicitName ?? fhirComplex.Id} ({PackageName}#{Version})";
                    return;
                }

            case FhirArtifactClassEnum.ComplexType:
                {
                    fhirComplex = (FhirComplex)obj;
                    headerText = $"FHIR {fhirArtifactClass} - {fhirComplex.ExplicitName ?? fhirComplex.Id} ({PackageName}#{Version})";
                    return;
                }

            case FhirArtifactClassEnum.Extension:
                {
                    fhirComplex = (FhirComplex)obj;
                    headerText = $"FHIR {fhirArtifactClass} - {fhirComplex.ExplicitName ?? fhirComplex.Id} ({PackageName}#{Version})";
                    return;
                }

            case FhirArtifactClassEnum.PrimitiveType:
                {
                    fhirPrimitive = (FhirPrimitive)obj;
                    headerText = $"FHIR {fhirArtifactClass} - {fhirPrimitive.Id} ({PackageName}#{Version})";
                    return;
                }

            case FhirArtifactClassEnum.Operation:
                {
                    fhirOperation = (FhirOperation)obj;
                    headerText = $"FHIR {fhirArtifactClass} - {fhirOperation.Id} ({PackageName}#{Version})";
                    return;
                }

            case FhirArtifactClassEnum.SearchParameter:
                {
                    fhirSearchParameter = (FhirSearchParam)obj;
                    headerText = $"FHIR {fhirArtifactClass} - {fhirSearchParameter.Id} ({PackageName}#{Version})";
                    return;
                }

            case FhirArtifactClassEnum.CodeSystem:
                {
                    headerText = $"Not yet implemented - {fhirArtifactClass} {Id} from {PackageName}#{Version}!";
                    return;
                }

            case FhirArtifactClassEnum.ValueSet:
                {
                    headerText = $"Not yet implemented - {fhirArtifactClass} {Id} from {PackageName}#{Version}!";
                    return;
                }

            case FhirArtifactClassEnum.CapabilityStatement:
                {
                    headerText = $"Not yet implemented - {fhirArtifactClass} {Id} from {PackageName}#{Version}!";
                    return;
                }

            case FhirArtifactClassEnum.Compartment:
                {
                    headerText = $"Not yet implemented - {fhirArtifactClass} {Id} from {PackageName}#{Version}!";
                    return;
                }

            case FhirArtifactClassEnum.ConceptMap:
                {
                    headerText = $"Not yet implemented - {fhirArtifactClass} {Id} from {PackageName}#{Version}!";
                    return;
                }

            case FhirArtifactClassEnum.NamingSystem:
                {
                    headerText = $"Not yet implemented - {fhirArtifactClass} {Id} from {PackageName}#{Version}!";
                    return;
                }

            case FhirArtifactClassEnum.StructureMap:
                {
                    headerText = $"Not yet implemented - {fhirArtifactClass} {Id} from {PackageName}#{Version}!";
                    return;
                }

            case FhirArtifactClassEnum.ImplementationGuide:
                {
                    headerText = $"Not yet implemented - {fhirArtifactClass} {Id} from {PackageName}#{Version}!";
                    return;
                }

            case FhirArtifactClassEnum.Unknown:
            default:
                {
                    headerText = $"Unkown artifact: {Id} from {PackageName}#{Version}!";
                    return;
                }
        }
    }
}
