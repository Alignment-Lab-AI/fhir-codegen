@page "/diff"

@using FhirCodeGenBlazor.Models;
@using FhirCodeGenBlazor.Services;
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@using Microsoft.Health.Fhir.SpecManager.Manager
@inject NavigationManager NavigationManager
@inject ISpecManagerWebService SpecService
@inject IPackageDiffWebService DiffService
@implements IDisposable

<PageTitle>FHIR Diff Tool</PageTitle>

<MudExpansionPanels MultiExpansion="true">
    <MudExpansionPanel Text="Package Selection" IsInitiallyExpanded="true">
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudSelect T="string" Label="Package A" @bind-Value="directiveA">
                            @foreach ((string key, FhirVersionInfo info) in SpecService.OrderBy((kvp) => kvp.Key))
                            {
                                <MudSelectItem Value="@key">@info.PackageName # @info.VersionString</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="4">
                        <MudField Label="(Optional) Artifact A" Variant="Variant.Filled">
                            @artifactA
                        </MudField>
                    </MudItem>
                    <MudItem xs="8">
                        <MudTooltip Text="Select Artifact">
                            <MudIconButton Icon="@Icons.Filled.LibraryAddCheck" @onclick="() => ShowArtifactSelectDialog(true)"/>
                        </MudTooltip>
                        <MudTooltip Text="Compare Entire Package">
                            <MudIconButton Icon="@Icons.Filled.Close" />
                        </MudTooltip>
                    </MudItem>

                    <MudItem xs="12">
                        <MudSelect T="string" Label="Package B" @bind-Value="directiveB">
                            @foreach ((string key, FhirVersionInfo info) in SpecService.OrderBy((kvp) => kvp.Key))
                            {
                                <MudSelectItem Value="@key">@info.PackageName # @info.VersionString</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="4">
                        <MudField Label="(Optional) Artifact B" Variant="Variant.Filled">
                            @artifactB
                        </MudField>
                    </MudItem>
                    <MudItem xs="8">
                        <MudTooltip Text="Select Artifact">
                            <MudIconButton Icon="@Icons.Filled.LibraryAddCheck" @onclick="() => ShowArtifactSelectDialog(false)"/>
                        </MudTooltip>
                        <MudTooltip Text="Compare Entire Package">
                            <MudIconButton Icon="@Icons.Filled.Close" />
                        </MudTooltip>
                    </MudItem>

                </MudGrid>
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Primary"
                           Variant="Variant.Filled"
                           Disabled="@_busy"
                           OnClick="() => RunDiff()">
                    @if (_busy)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Compare</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudExpansionPanel>

    <MudExpansionPanel Text="Artifact Type Filtering">
        <MudGrid>
            <MudItem xs="6" sm="3">
                <MudFab StartIcon="@Icons.Filled.Flip"
                        Label="Toggle All Artifacts"
                        OnClick="() => InvokeAsync(() => ToggleShowArtifactState())"
                        Disabled="@_busy"
                        />
            </MudItem>

            @foreach(FhirArtifactClassEnum ac in showArtifactClass.Keys.OrderBy(k => k.ToString()))
            {
                <MudItem xs="6" sm="3">
                    <MudSwitch
                        Color="Color.Info"
                        Checked="@showArtifactClass[ac]"
                        CheckedChanged="@((bool s) => ToggleShowState(ac, s))"
                        Label="@(ac.ToString() + " (" + results.DiffsByKeyByArtifactClass[ac].Count() + ")")" />
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>

    <MudExpansionPanel Text="Diff Type Filtering">
        <MudGrid>
            <MudItem xs="6" sm="3">
                <MudFab StartIcon="@Icons.Filled.Flip"
                        Label="Toggle All Difference Types"
                        OnClick="() => InvokeAsync(() => ToggleShowDiffTypeState())"
                        Disabled="@_busy" />
            </MudItem>

            @foreach (DiffResults.DiffTypeEnum dt in showDiffType.Keys.OrderBy(k => k))
            {
                <MudItem xs="6" sm="3">
                    <MudSwitch Color="Color.Info"
                           Checked="@showDiffType[dt]"
                           CheckedChanged="@((bool s) => ToggleShowState(dt, s))"
                           Label="@dt.ToString()" />
                </MudItem>
            }
        </MudGrid>
    </MudExpansionPanel>

</MudExpansionPanels>

<MudTable Height="calc(100vh - (var(--mud-appbar-height) * 4.7))"
    Items="elements"
    Filter="new Func<ExpandedDiffRec, bool>(FilterFuncInstance)"
          GroupBy="@_groupDefinition"
          GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
          GroupFooterClass="mb-4"
          Dense="true"
    Striped="true"
    Virtualize="false"
    FixedHeader="true"
    FixedFooter="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Differences between FHIR artifacts</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="artifactFilterText" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>&nbsp;</MudTh>
        <MudTh>Element Path</MudTh>
        <MudTh>Change</MudTh>
        @if (directiveA.Equals(directiveB, StringComparison.Ordinal))
        {
            <MudTh>@artifactA.Split('/').Last()</MudTh>
            <MudTh>@artifactB.Split('/').Last()</MudTh>
        }
        else if (string.IsNullOrEmpty(artifactA) || string.IsNullOrEmpty(artifactB))
        {
            <MudTh>@directiveA</MudTh>
            <MudTh>@directiveB</MudTh>
        }
        else
        {
            <MudTh>@(directiveA + "." + artifactA)</MudTh>
            <MudTh>@(directiveB + "." + artifactB)</MudTh>
        }
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh colspan="5">@context.Key</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd></MudTd>
        <MudTd>@context.Path</MudTd>
        <MudTd>@context.DiffType.ToString()</MudTd>
        <MudTd>@context.ValueA</MudTd>
        <MudTd>@context.ValueB</MudTd>
    </RowTemplate>
    <FooterContent>
        <MudTd></MudTd>
        <MudTd style="font-weight: 500;">Element Path</MudTd>
        <MudTd style="font-weight: 500;">Change</MudTd>
        @if (directiveA.Equals(directiveB, StringComparison.Ordinal))
        {
            <MudTd style="font-weight: 500;">@artifactA.Split('/').Last()</MudTd>
            <MudTd style="font-weight: 500;">@artifactB.Split('/').Last()</MudTd>
        }
        else if (string.IsNullOrEmpty(artifactA) || string.IsNullOrEmpty(artifactB))
        {
            <MudTd style="font-weight: 500;">@directiveA</MudTd>
            <MudTd style="font-weight: 500;">@directiveB</MudTd>
        }
        else
        {
            <MudTd style="font-weight: 500;">@(directiveA + "." + artifactA)</MudTd>
            <MudTd style="font-weight: 500;">@(directiveB + "." + artifactB)</MudTd>
        }
    </FooterContent>
</MudTable>

<MudDialog @bind-IsVisible="showArtifactDialog" Options="artifactDialogOptions" >
    <DialogContent>
        <MudTable Height="50vh"
            Items="dialogArtifacts"
            Filter="new Func<ExpandedArtifactRec, bool>(DialogFilterFuncInstance)"
            Hover="true"
            FixedHeader="true"
            Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Select Comparison Artifact</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="dialogFilterText" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Artifact Type</MudTh>
                <MudTh>Id</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudFab StartIcon="@Icons.Filled.Add" @onclick="() => SelectArtifact(context.Url)" Size="Size.Small" />
                </MudTd>
                <MudTd>@context.ArtifactClass</MudTd>
                <MudTd>@context.Id</MudTd>
            </RowTemplate>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseArtifactDialog" Class="px-10">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string directiveA = "";
    private string directiveB = "";

    private string artifactA = "";
    private string artifactB = "";

    /// <summary>True if the page is busy (e.g., running comparison).</summary>
    private bool _busy { get; set; } = false;

    /// <summary>Gets or sets a value indicating whether the artifact dialog is shown.</summary>
    private bool showArtifactDialog { get; set; } = false;

    /// <summary>The dialog filter text.</summary>
    private string dialogFilterText = "";

    /// <summary>True if dialog is for a.</summary>
    private bool dialogIsForA = false;

    /// <summary>Options for controlling the artifact dialog.</summary>
    private DialogOptions artifactDialogOptions = new() { FullWidth = true, };

    /// <summary>Information about the expanded artifact.</summary>
    /// <param name="ArtifactClass">The artifact class.</param>
    /// <param name="Url">          URL of the resource.</param>
    /// <param name="Id">           The identifier.</param>
    private readonly record struct ExpandedArtifactRec(
        FhirArtifactClassEnum ArtifactClass,
        string Url,
        string Id);

    private IEnumerable<ExpandedArtifactRec> dialogArtifacts = Array.Empty<ExpandedArtifactRec>();

    /// <summary>Specifies the filter.</summary>
    private string artifactFilterText = "";

    /// <summary>The results.</summary>
    private DiffResults results = new();

    /// <summary>The filtered.</summary>
    private Dictionary<FhirArtifactClassEnum, Dictionary<string, List<DiffResults.DiffRecord>>> filtered = new();

    /// <summary>Information about the expanded difference.</summary>
    /// <param name="ArtifactClass">The artifact class.</param>
    /// <param name="Group">        The group.</param>
    /// <param name="Path">         Full pathname of the file.</param>
    /// <param name="DiffType">     Type of the difference.</param>
    /// <param name="ValueA">       The value a.</param>
    /// <param name="ValueB">       The value b.</param>
    private readonly record struct ExpandedDiffRec(
        FhirArtifactClassEnum ArtifactClass,
        string Group,
        string Path,
        DiffResults.DiffTypeEnum DiffType,
        string ValueA,
        string ValueB);

    /// <summary>The elements.</summary>
    private IEnumerable<ExpandedDiffRec> elements = Array.Empty<ExpandedDiffRec>();

    /// <summary>The group definition.</summary>
    private TableGroupDefinition<ExpandedDiffRec> _groupDefinition = new()
    {
        GroupName = "Artifact Key",
        Indentation = false,
        Expandable = false,
        Selector = (e) => e.Group
    };

    private Dictionary<FhirArtifactClassEnum, bool> showArtifactClass = new();
    private Dictionary<DiffResults.DiffTypeEnum, bool> showDiffType = new();

    /// <summary>Control toggle behavior of the 'all' button.</summary>
    private bool _showDiffState = true;

    /// <summary>Control toggle behavior of the 'all' button.</summary>
    private bool _showArtifactState = true;

    private static string[] _bindingStrengthLiterals = {
        "Not bound",
        "Required",
        "Extensible",
        "Preferred",
        "Example"
    };

    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        foreach (DiffResults.DiffTypeEnum diffType in Enum.GetValues(typeof(DiffResults.DiffTypeEnum)))
        {
            showDiffType.Add(diffType, true);
        }

        NavTracker?.NotifyNav("FHIR Diff Tool", "diff", 1);
        NavigationManager.LocationChanged += HandleLocationChanged;

        DiffService.OnDiffCompleted += HandleDiffCompleted;
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
        DiffService.OnDiffCompleted -= HandleDiffCompleted;
    }

    /// <summary>Executes the difference operation.</summary>
    private void RunDiff()
    {
        if (string.IsNullOrEmpty(directiveA))
        {
            return;
        }

        if (string.IsNullOrEmpty(directiveB))
        {
            return;
        }

        if (_busy)
        {
            return;
        }

        _busy = true;

        //DifferOptions options = new(false, false, false, false, false, true);
        DifferOptions options = new(true, true, true, true, true, true);

        if (string.IsNullOrEmpty(artifactA) || artifactA.Equals('*') ||
            string.IsNullOrEmpty(artifactB) || artifactB.Equals('*'))
        {
            Task task = DiffService.RequestDiff(SpecService[directiveA], SpecService[directiveB], options);
            task.Start();
        }
        else
        {
            Task task = DiffService.RequestDiff(SpecService[directiveA], artifactA, SpecService[directiveB], artifactB, options);
            task.Start();
        }

    }

    /// <summary>Raises the difference completed event.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information to send to registered event handlers.</param>
    private void HandleDiffCompleted(object? sender, DiffCompletedEventArgs e)
    {
        _busy = false;
        results = e.Results ?? new();

        RebuildFilteredArtifacts(artifactFilterText, true);

        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Dialog filter function instance.</summary>
    /// <param name="rec">The record.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool DialogFilterFuncInstance(ExpandedArtifactRec rec) => DialogFilterFuncDefinition(rec, dialogFilterText);

    /// <summary>Dialog filter function definition.</summary>
    /// <param name="rec">         The record.</param>
    /// <param name="searchString">The search string.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool DialogFilterFuncDefinition(ExpandedArtifactRec rec, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString) ||
            rec.Id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    /// <summary>Filter function instance.</summary>
    /// <param name="diffRec">The difference record.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool FilterFuncInstance(ExpandedDiffRec diffRec) => FilterFuncDefinition(diffRec, artifactFilterText);

    /// <summary>Filter function definition.</summary>
    /// <param name="diffRec">     The difference record.</param>
    /// <param name="searchString">The search string.</param>
    /// <returns>True if it succeeds, false if it fails.</returns>
    private bool FilterFuncDefinition(ExpandedDiffRec diffRec, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString) ||
            diffRec.Path.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    /// <summary>Rebuild filtered artifacts.</summary>
    /// <param name="appliedFilter">            (Optional) A filter specifying the applied.</param>
    /// <param name="checkShownArtifactClasses">(Optional) True to check show artifact classes.</param>
    private async void RebuildFilteredArtifacts(
        string appliedFilter = "",
        bool checkShownArtifactClasses = false)
    {
        _busy = true;

        List<ExpandedDiffRec> elementList = new();

        if (checkShownArtifactClasses)
        {
            foreach ((FhirArtifactClassEnum artifactClass, Dictionary<string, List<DiffResults.DiffRecord>> artifactDict) in results.DiffsByKeyByArtifactClass)
            {
                if (!showArtifactClass.ContainsKey(artifactClass))
                {
                    showArtifactClass.Add(artifactClass, false);
                }
            }

            foreach (FhirArtifactClassEnum classEnum in showArtifactClass.Keys)
            {
                if (!results.DiffsByKeyByArtifactClass.ContainsKey(classEnum))
                {
                    showArtifactClass.Remove(classEnum);
                    continue;
                }

                if (results.DiffsByKeyByArtifactClass[classEnum].Count == 0)
                {
                    showArtifactClass[classEnum] = false;
                }
            }

            if (showArtifactClass.Count((kvp) => kvp.Value == true) == 0)
            {
                if (results.DiffsByKeyByArtifactClass.ContainsKey(FhirArtifactClassEnum.Resource) &&
                    (results.DiffsByKeyByArtifactClass[FhirArtifactClassEnum.Resource].Count > 0))
                {
                    showArtifactClass[FhirArtifactClassEnum.Resource] = true;
                }
                else if (results.DiffsByKeyByArtifactClass.ContainsKey(FhirArtifactClassEnum.Profile) &&
                    (results.DiffsByKeyByArtifactClass[FhirArtifactClassEnum.Profile].Count > 0))
                {
                    showArtifactClass[FhirArtifactClassEnum.Profile] = true;
                }
                else
                {
                    foreach (FhirArtifactClassEnum ac in showArtifactClass.Keys)
                    {
                        showArtifactClass[ac] = true;
                    }
                }
            }
        }

        foreach ((FhirArtifactClassEnum ac, Dictionary<string, List<DiffResults.DiffRecord>> artifacts) in results.DiffsByKeyByArtifactClass)
        {
            if (showArtifactClass[ac] == false)
            {
                continue;
            }

            foreach ((string key, List<DiffResults.DiffRecord> diffList) in artifacts.OrderBy(kvp => kvp.Key))
            {
                foreach (DiffResults.DiffRecord diffRec in diffList)
                {
                    if (showDiffType[diffRec.diffType] == false)
                    {
                        continue;
                    }

                    elementList.Add(new ExpandedDiffRec(
                        ac,
                        ac.ToString() + " - " + key,
                        diffRec.path,
                        diffRec.diffType,
                        diffRec.valueA,
                        diffRec.valueB));
                }
            }
        }

        elements = elementList;

        _busy = false;

        // manually flag state has changed in case we are in a callback / async context
        await InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Appends a filtered artifacts.</summary>
    /// <param name="classEnum">The class enum.</param>
    /// <param name="filter">   Specifies the filter.</param>
    /// <param name="updated">  [in,out] The updated.</param>
    /// <param name="data">     The data.</param>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private void AppendFilteredArtifacts(
        FhirArtifactClassEnum classEnum,
        string filter,
        ref Dictionary<FhirArtifactClassEnum, Dictionary<string, List<DiffResults.DiffRecord>>> updated,
        Dictionary<string, List<DiffResults.DiffRecord>> data)
    {
        if (!showArtifactClass.Any())
        {
            return;
        }

        if (showArtifactClass[classEnum] != true)
        {
            return;
        }

        updated.Add(classEnum, new());

        if (string.IsNullOrEmpty(filter))
        {
            foreach (string key in data.Keys.OrderBy((k) => k))
            {
                updated[classEnum].Add(key, new());
                updated[classEnum][key].AddRange(data[key].Where(r => showDiffType[r.diffType]));
                updated[classEnum][key].Sort((a, b) => a.path.CompareTo(b.path));
            }
        }
        else
        {
            foreach (string key in data.Keys.OrderBy((k) => k))
            {
                if (!key.Contains(filter, StringComparison.OrdinalIgnoreCase))
                {
                    continue;
                }

                updated[classEnum].Add(key, new());
                updated[classEnum][key].AddRange(
                    data[key].Where(r =>
                        showDiffType[r.diffType] &&
                        (r.path.Contains(filter, StringComparison.OrdinalIgnoreCase)
                    )));

                if (updated[classEnum][key].Count == 0)
                {
                    updated[classEnum].Remove(key);
                }
                else
                {
                    updated[classEnum][key].Sort((a, b) => a.path.CompareTo(b.path));
                }
            }
        }
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/diff"))
        {
            NavTracker?.NotifyNav("FHIR Diff Tool", $"diff", 1);
        }
    }

    /// <summary>Toggle show state.</summary>
    /// <param name="classEnum">The class enum.</param>
    /// <param name="v">        True to v.</param>
    private void ToggleShowState(FhirArtifactClassEnum classEnum, bool? v)
    {
        if (v == showArtifactClass[classEnum])
        {
            return;
        }

        if (v == null)
        {
            showArtifactClass[classEnum] = !showArtifactClass[classEnum];
        }
        else
        {
            showArtifactClass[classEnum] = (v == true);
        }

        InvokeAsync(() => RebuildFilteredArtifacts(artifactFilterText, false));
    }

    /// <summary>Shows the artifact select dialog.</summary>
    private void ShowArtifactSelectDialog(bool isForA)
    {
        if (isForA)
        {
            if (!SpecService.ContainsKey(directiveA))
            {
                return;
            }

            dialogIsForA = true;

            dialogArtifacts = SpecService[directiveA].ArtifactRecordsByClass
                .SelectMany(kvp => kvp.Value)
                .Select(rec => new ExpandedArtifactRec(
                    rec.ArtifactClass,
                    rec.Url.ToString(),
                    rec.Id));
        }
        else
        {
            if (!SpecService.ContainsKey(directiveB))
            {
                return;
            }

            dialogIsForA = false;

            dialogArtifacts = SpecService[directiveB].ArtifactRecordsByClass
                .SelectMany(kvp => kvp.Value)
                .Select(rec => new ExpandedArtifactRec(
                    rec.ArtifactClass,
                    rec.Url.ToString(),
                    rec.Id));
        }

        showArtifactDialog = true;
    }

    /// <summary>Select artifact.</summary>
    /// <param name="url">URL of the resource.</param>
    private void SelectArtifact(string url)
    {
        if (dialogIsForA)
        {
            artifactA = url;
        }
        else
        {
            artifactB = url;
        }

        dialogArtifacts = Array.Empty<ExpandedArtifactRec>();
        showArtifactDialog = false;
    }

    /// <summary>Closes artifact dialog.</summary>
    private void CloseArtifactDialog()
    {
        dialogArtifacts = Array.Empty<ExpandedArtifactRec>();
        showArtifactDialog = false;
    }

    /// <summary>Toggle show state.</summary>
    /// <param name="diffEnum">The difference enum.</param>
    /// <param name="v">       True to v.</param>
    private void ToggleShowState(DiffResults.DiffTypeEnum diffEnum, bool? v)
    {
        if (showDiffType[diffEnum] == v)
        {
            return;
        }

        if (v == null)
        {
            showDiffType[diffEnum] = !showDiffType[diffEnum];
        }
        else
        {
            showDiffType[diffEnum] = (v == true);
        }

        InvokeAsync(() => RebuildFilteredArtifacts(artifactFilterText, false));
    }

    /// <summary>Toggle show difference type state.</summary>
    private void ToggleShowDiffTypeState()
    {
        _showDiffState = !_showDiffState;
        foreach (DiffResults.DiffTypeEnum diffEnum in showDiffType.Keys)
        {
            showDiffType[diffEnum] = _showDiffState;
        }

        InvokeAsync(() => RebuildFilteredArtifacts(artifactFilterText, false));
    }

    /// <summary>Toggle show artifact state.</summary>
    private void ToggleShowArtifactState()
    {
        // flag we are busy - will be cleared by RebuildFilteredArtifacts
        _busy = true;

        _showArtifactState = !_showArtifactState;
        foreach (FhirArtifactClassEnum ac in showArtifactClass.Keys)
        {
            showArtifactClass[ac] = _showArtifactState;
        }

        InvokeAsync(() => RebuildFilteredArtifacts(artifactFilterText, false));
    }

    /// <summary>Gets value set header.</summary>
    /// <param name="vsUrl">URL of the vs.</param>
    /// <returns>The value set header.</returns>
    private string GetValueSetHeader(string vsUrl)
    {
        if (string.IsNullOrEmpty(vsUrl))
        {
            return string.Empty;
        }

        string val = vsUrl;

        if ((SpecService[directiveA]?.ValueSetsByUrl.ContainsKey(vsUrl) ?? false) &&
            (SpecService[directiveA].ValueSetsByUrl[vsUrl].ValueSetsByVersion.Any()))
        {
            FhirValueSet vsA = SpecService[directiveA].ValueSetsByUrl[vsUrl].ValueSetsByVersion.First().Value;
            val += $" | {_bindingStrengthLiterals[(int)(vsA.StrongestBinding ?? 0)]} in {directiveA}";
        }

        if ((SpecService[directiveB]?.ValueSetsByUrl.ContainsKey(vsUrl) ?? false) &&
            (SpecService[directiveB].ValueSetsByUrl[vsUrl].ValueSetsByVersion.Any()))
        {
            FhirValueSet vsB = SpecService[directiveB].ValueSetsByUrl[vsUrl].ValueSetsByVersion.First().Value;
            val += $" | {_bindingStrengthLiterals[(int)(vsB.StrongestBinding ?? 0)]} in {directiveB}";
        }

        return val;
    }

    private bool IsDisabledArtifactA()
    {
        return string.IsNullOrEmpty(directiveA);
    }

    private bool IsDisabledArtifactB()
    {
        return string.IsNullOrEmpty(directiveB);
    }
}
