@page "/export/package"

@using FhirCodeGenBlazor.Models;
@using FhirCodeGenBlazor.Services;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@using Microsoft.Health.Fhir.SpecManager.Language
@using Microsoft.Health.Fhir.SpecManager.Manager
@inject NavigationManager NavigationManager
@inject IServerConnectorService ConnectorService
@inject ISpecManagerWebService SpecService
@inject ISpecExporterWebService ExportService
@inject ProtectedLocalStorage BrowserStore
@implements IDisposable

@if ((string.IsNullOrEmpty(directive)) || (info == null))
{
    <PageTitle>FHIR Package Exporter</PageTitle>
    <p><em>This page requires a package name and version, please select...</em></p>
}
else if (info.ArtifactRecordsByClass.Any())
{
    <PageTitle>@directive</PageTitle>

    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel Text="Package Details">
            <MudSimpleTable>
                <thead>
                    <tr class="row justify-content-start">
                        <th class="col-2">Property</th>
                        <th class="col-4">Value</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="row justify-content-start">
                        <td class="col-2">Package Name</td>
                        <td class="col-4">@info.PackageName</td>
                    </tr>
                    <tr class="row justify-content-start">
                        <td class="col-2">Version</td>
                        <td class="col-4">@info.VersionString</td>
                    </tr>
                    <tr class="row justify-content-start">
                        <td class="col-2">FHIR Release</td>
                        <td class="col-4">@info.FhirSequence</td>
                    </tr>

                    @if (info.PackageDetails != null)
                    {
                        @if (info.PackageDetails.FhirVersions != null)
                        {
                            <tr class="row justify-content-start">
                                <td class="col-2">FHIR Versions</td>
                                <td class="col-4">@string.Join(", ", info.PackageDetails.FhirVersions)</td>
                            </tr>
                        }

                        @if (info.PackageDetails.Dependencies != null)
                        {
                            <tr class="row justify-content-start">
                                <td class="col-2">Dependencies</td>
                                <td class="col-4">@string.Join(", ", info.PackageDetails.Dependencies.Select(kvp => $"{kvp.Key}#{kvp.Value}"))</td>
                            </tr>
                        }
                    }
                </tbody>
            </MudSimpleTable>
        </MudExpansionPanel>
        <MudExpansionPanel Text="Package Contents">
            <MudTable
                Items="info.ArtifactRecordsByClass.Keys.OrderBy(e => e.ToString())"
                Dense="true"
                Striped="true">
                <HeaderContent>
                    <MudTh>Artifact Type</MudTh>
                    <MudTh>Count</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context</MudTd>
                    <MudTd>@info.ArtifactRecordsByClass[context].Count()</MudTd>
                </RowTemplate>
            </MudTable>
        </MudExpansionPanel>

        <MudExpansionPanel Text="Capability Filter" IsInitiallyExpanded="false">
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Stretch" Spacing="1" >
                <MudStack Row="true">
                    <MudTextField @bind-Value="@capabilityServerUrl"
                              Label="FHIR Server URL"
                              HelperText="FHIR Server URL to retrieve CapabilityStatement"></MudTextField>

                    <MudButton OnClick="() => InvokeAsync(() => TryGetServerInfo())">
                        Fetch
                    </MudButton>

                    <MudButton OnClick="() => {capabilityJson = string.Empty; capabilityStatement = null;}">
                        Clear
                    </MudButton>
                </MudStack>

                <MudStack Row="true">
                    <MudTextField @bind-Value="capabilityAuthHeader"
                              Label="Authorization Header"
                              HelperText="Authorization header value">
                    </MudTextField>
                </MudStack>

                <MudTextField T="string" @bind-Value="capabilityJson" Variant="Variant.Filled" Lines="5" ReadOnly="true" />
            </MudStack>
        </MudExpansionPanel>
        
        <MudExpansionPanel Text="Export Configuration" IsInitiallyExpanded="true">
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Stretch" Spacing="1">
                <MudSelect T="string" Label="Select a Language" @bind-Value="selectedLanguage">
                    @foreach (string name in ExportService.GetExportLanguages().Keys.OrderBy(k => k))
                    {
                        <MudSelectItem Value="@name"/>
                    }
                </MudSelect>
            
                @if ((language != null) && (exporterOptions != null))
                {
                    <MudField Label="Optional Artifact Types to Export" Variant="Variant.Text" InnerPadding="false">
                        <MudGrid>
                            @foreach (ExporterOptions.FhirExportClassType et in optionalExportTypes.Keys)
                            {
                                <MudItem xs="12" sm="6" md="4">
                                    <MudSwitch Color="Color.Info" @bind-Checked="@optionalExportTypes[et]" Label="@et.ToString()" />
                                </MudItem>
                            }
                        </MudGrid>
                    </MudField>
                }

                <MudText>General Export Options:</MudText>
                <MudTextField @bind-Value="exportDirectoryPath"
                        Label="Export Path"
                        HelperText="Server-based path to write export output"></MudTextField>
                <MudSelect T="ExporterOptions.ExtensionSupportLevel"
                        Label="Extension Support Level"
                        HelperText="If supported by this language, where extensions should be included.">
                    @foreach (ExporterOptions.ExtensionSupportLevel value in Enum.GetValues(typeof(ExporterOptions.ExtensionSupportLevel)))
                    {
                        <MudSelectItem Value="@value" />
                    }
                </MudSelect>
                <MudSwitch Color="Color.Info" @bind-Checked="@includeExperimental" Label="Draft/Experimental" />

                <MudText>Language Export Options:</MudText>
                @foreach (LanguageUiOption optValue in languageOptions.Values.OrderBy(v => v.Name))
                {
                    @switch (optValue.TypeCode)
                    {
                        case LanguageOptionTypeCodes.Boolean:
                            <MudSwitch Color="Color.Info"
                                    @bind-Checked="@optValue.Value"
                                    Converter="@(new BoolValConverter())">@optValue.Name - @optValue.Description</MudSwitch>
                            break;

                        case LanguageOptionTypeCodes.Number:
                            <MudNumericField T="int?"
                                    Label="@optValue.Name"
                                    HelperText="@optValue.Description"
                                    Value="string.IsNullOrEmpty(optValue.Value) ? null : Int32.Parse(optValue.Value)"
                                    ValueChanged="@((int? value) => optValue.Value = (value == null) ? null : value.ToString())" />
                            break;

                        case LanguageOptionTypeCodes.Choice:
                            <MudSelect T="string"
                                    Label="@optValue.Name"
                                    HelperText="@optValue.Description"
                                    @bind-Value="optValue.Value">
                                @foreach (string v in optValue.AllowedValues)
                                {
                                    <MudSelectItem Value="@v" />
                                }
                            </MudSelect>
                            break;

                        case LanguageOptionTypeCodes.CommaDelimtedString:
                            <MudTextField @bind-Value="@optValue.Value"
                                    Label="@optValue.Name"
                                    HelperText="@optValue.Description"></MudTextField>
                            break;

                        case LanguageOptionTypeCodes.String:
                        default:
                            <MudTextField @bind-Value="@optValue.Value"
                                    Label="@optValue.Name"
                                    HelperText="@optValue.Description"></MudTextField>
                            break;
                    }
                }
            </MudStack>
        </MudExpansionPanel>
    </MudExpansionPanels>
    <br />
    <MudButton
        Color="Color.Primary"
        Variant="Variant.Filled"
        Disabled="@exportInProgress"
        OnClick="() => StartExport()">
        @if (exportInProgress)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
            <MudText Class="ms-2">Processing</MudText>
        }
        else
        {
            <MudText>Start</MudText>
        }
    </MudButton>

    @if (!string.IsNullOrEmpty(uiMessage))
    {
        <MudText Color="Color.Error">@uiMessage</MudText>
    }

    <br />
}
else
{
    <PageTitle>@directive</PageTitle>
    <p><em>This package contains no supported artifacts.</em></p>
}

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "packageName")]
    public string PackageName { get; set; } = "";

    /// <summary>Gets or sets the package version.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "version")]
    public string Version { get; set; } = "";

    /// <summary>The directive.</summary>
    private string directive = string.Empty;

    /// <summary>Gets or sets the information.</summary>
    private FhirVersionInfo? info { get; set; } = null;

    /// <summary>Gets or sets the language.</summary>
    private ILanguage? language { get; set; } = null;

    private Dictionary<ExporterOptions.FhirExportClassType, bool> optionalExportTypes { get; set; } = new();

    /// <summary>Values that represent lanuage option type codes.</summary>
    public enum LanguageOptionTypeCodes
    {
        /// <summary>The option accepts boolean values.</summary>
        Boolean,

        /// <summary>The option accepts an arbitrary string value.</summary>
        String,

        /// <summary>The option accepts a comma-delimited set of arbitrary string values.</summary>
        CommaDelimtedString,

        /// <summary>The option accepts numeric values.</summary>
        Number,

        /// <summary>The option accepts one from a set of literals.</summary>
        Choice,
    }

    /// <summary>A language user interface option.</summary>
    public class LanguageUiOption
    {
        /// <summary>Initializes a new instance of the <see="LanguageUiOption"/> class.</summary>
        /// <param name="name">         The name.</param>
        /// <param name="description">  The description.</param>
        /// <param name="typeCode">     The type code.</param>
        /// <param name="defaultValue"> The default value.</param>
        /// <param name="allowedValues">The allowed values.</param>
        /// <param name="value">        The value.</param>
        public LanguageUiOption(
            string name,
            string description,
            LanguageOptionTypeCodes typeCode,
            string defaultValue,
            string[] allowedValues,
            string? value)
        {
            Name = name;
            Description = description;
            TypeCode = typeCode;
            DefaultValue = defaultValue;
            AllowedValues = allowedValues;
            Value = value;
        }

        /// <summary>Gets or sets the name.</summary>
        public string Name { get; set; }
        /// <summary>Gets or sets the description.</summary>
        public string Description { get; set; }
        /// <summary>Gets or sets the type code.</summary>
        public LanguageOptionTypeCodes TypeCode { get; set; }
        /// <summary>Gets or sets the default value.</summary>
        public string DefaultValue { get; set; }
        /// <summary>Gets or sets the allowed values.</summary>
        public string[] AllowedValues { get; set; }
        /// <summary>Gets or sets the value.</summary>
        public string? Value { get; set; }
    }

    /// <summary>Options for controlling the language.</summary>
    private Dictionary<string, LanguageUiOption> languageOptions = new();

    /// <summary>Gets or sets a value indicating whether the package details is shown.</summary>
    private bool showPackageDetails { get; set; } = true;

    /// <summary>Gets or sets a value indicating whether the package contents is shown.</summary>
    private bool showPackageContents { get; set; } = false;

    /// <summary>Gets or sets a value indicating whether the language details is shown.</summary>
    private bool showLanguageDetails { get; set; } = true;

    /// <summary>Gets or sets the full pathname of the export directory file.</summary>
    private string exportDirectoryPath { get; set; } = string.Empty;

    /// <summary>The selected language.</summary>
    private string _selectedLanguage = string.Empty;

    /// <summary>Gets or sets the selected language.</summary>
    private string selectedLanguage
    {
        get
        {
            return _selectedLanguage;
        }
        set
        {
            _selectedLanguage = value;
            InvokeAsync(() => UpdateLanguage(value));
        }
    }

    /// <summary>Options for controlling the exporter.</summary>
    private ExporterOptions? exporterOptions = null;

    /// <summary>The extension support.</summary>
    private ExporterOptions.ExtensionSupportLevel extensionSupport = ExporterOptions.ExtensionSupportLevel.NonPrimitive;

    /// <summary>
    /// Gets or sets a value indicating whether the experimental should be included.
    /// </summary>
    private bool includeExperimental { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether the in progress should be exported.
    /// </summary>
    private bool exportInProgress { get; set; } = false;

    /// <summary>URL of the capability server.</summary>
    private string capabilityServerUrl = string.Empty;

    /// <summary>The capability authentication header.</summary>
    private string capabilityAuthHeader = string.Empty;

    /// <summary>The capability statement.</summary>
    private FhirCapabiltyStatement? capabilityStatement = null;

    private string capabilityJson = string.Empty;

    /// <summary>Gets or sets the message.</summary>
    private string uiMessage { get; set; } = string.Empty;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        directive = PackageName + "#" + Version;
        if (SpecService.ContainsKey(directive))
        {
            info = SpecService[directive];
        }

        NavTracker?.NotifyNav("Export " + directive, $"export/package?packageName={PackageName}&version={Version}", 1);
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    /// <summary>Executes the after render asynchronous action.</summary>
    /// <param name="firstRender">True to first render.</param>
    /// <returns>An asynchronous result.</returns>
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            InvokeAsync(TryLoadInitialSettings);
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>Try update language asynchronous.</summary>
    /// <returns>An asynchronous result that yields the try update language.</returns>
    async Task<bool> TryLoadInitialSettings()
    {
        var readResult = await BrowserStore.GetAsync<string>("last_export_url");
        if (readResult.Success)
        {
            capabilityServerUrl = readResult.Value ?? string.Empty;
        }

        readResult = await BrowserStore.GetAsync<string>("last_export_auth");
        if (readResult.Success)
        {
            capabilityAuthHeader = readResult.Value ?? string.Empty;
        }

        readResult = await BrowserStore.GetAsync<string>("last_export_language");
        if (readResult.Success)
        {
            selectedLanguage = readResult.Value ?? string.Empty;
            UpdateLanguage(selectedLanguage);
        }

        return true;
    }

    /// <summary>
    /// Attempts to get a server information, returning a default value rather than throwing an
    /// exception if it fails.
    /// </summary>
    void TryGetServerInfo()
    {
        BrowserStore.SetAsync("last_export_url", capabilityServerUrl);
        BrowserStore.SetAsync("last_export_auth", capabilityAuthHeader);

        if (string.IsNullOrEmpty(capabilityServerUrl))
        {
            return;
        }

        Dictionary<string, IEnumerable<string>> headers = new();

        if (!string.IsNullOrEmpty(capabilityAuthHeader))
        {
            headers.Add("Authorization", new string[] { capabilityAuthHeader });
        }

        ConnectorService.TryGetServerInfo(capabilityServerUrl, false, headers, out capabilityJson, out capabilityStatement);
    }

    /// <summary>Starts an export.</summary>
    void StartExport()
    {
        if (exportInProgress)
        {
            return;
        }

        if (info == null)
        {
            uiMessage = "*** Failed to load the Package! ***";
            return;
        }

        if (exporterOptions == null)
        {
            uiMessage = "*** Cannot Export without configuration! ***";
            return;
        }

        if (language == null)
        {
            uiMessage = "*** An export language is required! ***";
            return;
        }

        if (string.IsNullOrEmpty(exportDirectoryPath))
        {
            uiMessage = "*** An export path is required! ***";
            return;
        }

        BrowserStore.SetAsync("last_export_language", exporterOptions.LanguageName);
        BrowserStore.SetAsync($"path_{directive}_{exporterOptions.LanguageName}", exportDirectoryPath);

        if (languageOptions != null)
        {
            exporterOptions.LanguageOptions.Clear();

            foreach ((string key, LanguageUiOption opt) in languageOptions)
            {
                BrowserStore.SetAsync($"{directive}_{exporterOptions.LanguageName}_{key}", opt.Value ?? string.Empty);
                if (!string.IsNullOrEmpty(opt.Value))
                {
                    exporterOptions.LanguageOptions.Add(key, opt.Value);
                }
            }
        }

        ExporterOptions options = new(
            exporterOptions.LanguageName,
            exporterOptions.ExportList,
            optionalExportTypes.Where(kvp => kvp.Value == true).Select(kvp => kvp.Key).ToList(),
            extensionSupport,
            exporterOptions.ExtensionUrls,
            exporterOptions.ExtensionElementPaths,
            exporterOptions.LanguageOptions,
            capabilityServerUrl ?? exporterOptions.ServerUrl,
            exporterOptions.ResolveExternal,
            includeExperimental,
            exporterOptions.LanguageInputDir);

        uiMessage = string.Empty;

        exportInProgress = true;

        Task exportTask = ExportService.RequestExport(
            info,
            capabilityStatement,
            language,
            options,
            exportDirectoryPath);

        exportTask.ContinueWith(at => ExportCompleteHandler(at));
        exportTask.Start();
    }

    /// <summary>Handler, called when the export complete.</summary>
    /// <param name="exportTask">The export task.</param>
    void ExportCompleteHandler(Task exportTask)
    {
        if (exportTask.IsCompletedSuccessfully)
        {
            uiMessage = $"Export complete: {DateTime.Now.ToString()}";
            exportInProgress = false;
            InvokeAsync(() => StateHasChanged());
            return;
        }

        uiMessage = "*** Export failed! ***";
        exportInProgress = false;
        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Updates the language described by name.</summary>
    /// <param name="name">The name.</param>
    private async void UpdateLanguage(string name)
    {
        if (string.IsNullOrEmpty(name))
        {
            exporterOptions = null;
            language = null;
            languageOptions.Clear();
            return;
        }

        if (exporterOptions?.LanguageName == name)
        {
            return;
        }

        if (ExportService.TryGetExportLanguage(name, out ILanguage? iLang) &&
            (iLang != null))
        {
            ProtectedBrowserStorageResult<string> readResult = await
                BrowserStore.GetAsync<string>($"path_{directive}_{iLang.LanguageName}");
            if (readResult.Success)
            {
                exportDirectoryPath = readResult.Value ?? exportDirectoryPath;
            }

            language = iLang;
            exporterOptions = new(
                name,
                exporterOptions?.ExportList,
                null,
                exporterOptions?.ExtensionSupport ?? ExporterOptions.ExtensionSupportLevel.NonPrimitive,
                exporterOptions?.ExtensionUrls,
                exporterOptions?.ExtensionElementPaths,
                null,
                exporterOptions?.ServerUrl,
                exporterOptions?.ResolveExternal ?? true,
                exporterOptions?.IncludeExperimental ?? true,
                exporterOptions?.LanguageInputDir);

            Dictionary<string, LanguageUiOption> langOpts = new();

            foreach ((string key, string description) in iLang.LanguageOptions)
            {
                ProtectedBrowserStorageResult<string> optReadResult = await
                    BrowserStore.GetAsync<string>($"{directive}_{iLang.LanguageName}_{key}");

                LanguageUiOption langOpt = ParseLanguageOption(key, description, optReadResult.Value);

                langOpts.Add(key, langOpt);
            }

            languageOptions = langOpts;

            //foreach (string option in iLang.LanguageOptions.Keys)
            //{
            //    ProtectedBrowserStorageResult<string> optReadResult = await
            //        BrowserStore.GetAsync<string>($"{directive}_{iLang.LanguageName}_{option}");

            //    if (!string.IsNullOrEmpty(optReadResult.Value))
            //    {
            //        switch (languageOptions[option].TypeCode)
            //        {
            //            case LanguageOptionTypeCodes.Boolean:

            //                break;

            //            case LanguageOptionTypeCodes.String:

            //                break;

            //            case LanguageOptionTypeCodes.CommaDelimtedString:
            //                break;

            //            case LanguageOptionTypeCodes.Number:
            //                break;

            //            case LanguageOptionTypeCodes.Choice:
            //                break;
            //        }

            //        //if ()
            //        //{
            //        //    exporterOptions.LanguageOptions[option] = optReadResult.Value ?? string.Empty;
            //        //}
            //        //else
            //        //{
            //        //    exporterOptions.LanguageOptions.Add(option, optReadResult.Value ?? string.Empty);
            //        //}
            //    }
            //}

            Dictionary<ExporterOptions.FhirExportClassType, bool> optionalExports = new();

            foreach (ExporterOptions.FhirExportClassType optionalExportType in language.OptionalExportClassTypes)
            {
                optionalExports.Add(
                    optionalExportType,
                    optionalExportTypes.ContainsKey(optionalExportType)
                        ? optionalExportTypes[optionalExportType]
                        : false);
                //exporterOptions.OptionalClassTypesToExport.Add(optionalExportType);
            }

            optionalExportTypes = optionalExports;
        }
        else
        {
            language = null;
            exporterOptions = null;
        }

        await InvokeAsync(() => StateHasChanged());
    }

    private LanguageUiOption ParseLanguageOption(
        string optionName,
        string optionDescription,
        string? savedValue)
    {
        int openParenLoc = optionDescription.LastIndexOf('(');
        int closeParenLoc = optionDescription.LastIndexOf(')');

        if ((openParenLoc == -1) ||
            (closeParenLoc == -1) ||
            (openParenLoc > closeParenLoc))
        {
            return new LanguageUiOption(
                optionName,
                optionDescription,
                LanguageOptionTypeCodes.String,
                string.Empty,
                Array.Empty<string>(),
                savedValue);
        }

        string description = optionDescription.Substring(0, openParenLoc - 1).Trim();

        if (closeParenLoc != (optionDescription.Length - 1))
        {
            description += optionDescription.Substring(closeParenLoc + 1);
        }

        string hint = optionDescription.Substring(openParenLoc + 1, (closeParenLoc - openParenLoc) - 1);

        if (hint.Contains('|'))
        {
            string[] choices = hint.Split('|');

            if ((choices.Length == 2) &&
                choices.Contains("false", StringComparer.OrdinalIgnoreCase) &&
                choices.Contains("true", StringComparer.OrdinalIgnoreCase))
            {
                return new LanguageUiOption(
                    optionName,
                    description,
                    LanguageOptionTypeCodes.Boolean,
                    choices[0],
                    choices,
                    savedValue);
            }

            return new LanguageUiOption(
                optionName,
                description,
                LanguageOptionTypeCodes.Choice,
                choices[0],
                choices,
                savedValue);
        }

        if (hint.Contains(','))
        {
            return new LanguageUiOption(
                optionName,
                description,
                LanguageOptionTypeCodes.CommaDelimtedString,
                hint,
                Array.Empty<string>(),
                savedValue ?? hint);
        }

        if (int.TryParse(hint, out _))
        {
            return new LanguageUiOption(
                optionName,
                description,
                LanguageOptionTypeCodes.Number,
                hint,
                Array.Empty<string>(),
                savedValue ?? hint);
        }

        return new LanguageUiOption(
            optionName,
            description,
            LanguageOptionTypeCodes.String,
            hint,
            Array.Empty<string>(),
            savedValue ?? hint);
    }

    /// <summary>Gets button variant.</summary>
    /// <param name="ct">The ct.</param>
    /// <returns>The button variant.</returns>
    private MudBlazor.Variant GetButtonVariant(ExporterOptions.FhirExportClassType ct)
    {
        if (exporterOptions?.OptionalClassTypesToExport.Contains(ct) == true)
        {
            return Variant.Filled;
        }

        return Variant.Outlined;
    }

    /// <summary>Toggle optional.</summary>
    /// <param name="ct">The ct.</param>
    private void ToggleOptional(ExporterOptions.FhirExportClassType ct)
    {
        if (exporterOptions == null)
        {
            return;
        }

        if (exporterOptions.OptionalClassTypesToExport.Contains(ct) == true)
        {
            exporterOptions.OptionalClassTypesToExport.Remove(ct);
        }
        else
        {
            exporterOptions.OptionalClassTypesToExport.Add(ct);
        }
    }

    /// <summary>A value converter.</summary>
    public class BoolValConverter : BoolConverter<string?>
    {
        public BoolValConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }

        private const string TrueString = "true";
        private const string FalseString = "false";
        private const string NullString = "";

        private string OnGet(bool? value)
        {
            try
            {
                if (value == null)
                {
                    return NullString;
                }

                return (value == true) ? TrueString : FalseString;
            }
            catch (Exception e)
            {
                UpdateGetError("Conversion error: " + e.Message);
                return NullString;
            }
        }

        private bool? OnSet(string? arg)
        {
            if (string.IsNullOrEmpty(arg))
            {
                return null;
            }

            try
            {
                if (arg.Equals(TrueString, StringComparison.OrdinalIgnoreCase))
                {
                    return true;
                }

                if (arg.Equals(FalseString, StringComparison.OrdinalIgnoreCase))
                {
                    return false;
                }

                return null;
            }
            catch (FormatException e)
            {
                UpdateSetError("Conversion error: " + e.Message);
                return null;
            }
        }
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/export/package"))
        {
            directive = PackageName + "#" + Version;
            if (SpecService.ContainsKey(directive))
            {
                info = SpecService[directive];
            }
            else
            {
                info = null;
            }

            NavTracker?.NotifyNav("Export " + directive, $"view/package?packageName={PackageName}&version={Version}", 1);

            InvokeAsync(() => StateHasChanged());
        }
    }
}
