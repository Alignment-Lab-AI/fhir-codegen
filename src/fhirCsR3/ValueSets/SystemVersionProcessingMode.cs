// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using fhirCsR3.Models;

namespace fhirCsR3.ValueSets
{
  /// <summary>
  /// How to manage the intersection between a fixed version in a value set, and a fixed version of the system in the expansion profile
  /// </summary>
  public static class SystemVersionProcessingModeCodes
  {
    /// <summary>
    /// Use this version of the code system. If a value set specifies a different version, the expansion operation should fail
    /// </summary>
    public static readonly Coding CheckValueSetVersion = new Coding
    {
      Code = "check",
      Display = "Check ValueSet Version",
      System = "http://hl7.org/fhir/system-version-processing-mode"
    };
    /// <summary>
    /// Use this version of the code system if a value set doesn't specify a version
    /// </summary>
    public static readonly Coding DefaultVersion = new Coding
    {
      Code = "default",
      Display = "Default Version",
      System = "http://hl7.org/fhir/system-version-processing-mode"
    };
    /// <summary>
    /// Use this version of the code system irrespective of which version is specified by a value set. Note that this has obvious safety issues, in that it may result in a value set expansion giving a different list of codes that is both wrong and unsafe, and implementers should only use this capability reluctantly. It primarily exists to deal with situations where specifications have fallen into decay as time passes. If a  version is override, the version used SHALL explicitly be represented in the expansion parameters
    /// </summary>
    public static readonly Coding OverrideValueSetVersion = new Coding
    {
      Code = "override",
      Display = "Override ValueSet Version",
      System = "http://hl7.org/fhir/system-version-processing-mode"
    };

    /// <summary>
    /// Literal for code: CheckValueSetVersion
    /// </summary>
    public const string LiteralCheckValueSetVersion = "check";

    /// <summary>
    /// Literal for code: DefaultVersion
    /// </summary>
    public const string LiteralDefaultVersion = "default";

    /// <summary>
    /// Literal for code: OverrideValueSetVersion
    /// </summary>
    public const string LiteralOverrideValueSetVersion = "override";
  };
}
