// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using fhirCsR3.Models;

namespace fhirCsR3.ValueSets
{
  /// <summary>
  /// A type defined by FHIR that is an abstract type
  /// </summary>
  public static class AbstractTypesCodes
  {
    /// <summary>
    /// A place holder that means any kind of resource
    /// </summary>
    public static readonly Coding Any = new Coding
    {
      Code = "Any",
      Display = "Any",
      System = "http://hl7.org/fhir/abstract-types"
    };
    /// <summary>
    /// A place holder that means any kind of data type
    /// </summary>
    public static readonly Coding Type = new Coding
    {
      Code = "Type",
      Display = "Type",
      System = "http://hl7.org/fhir/abstract-types"
    };

    /// <summary>
    /// Literal for code: Any
    /// </summary>
    public const string LiteralAny = "Any";

    /// <summary>
    /// Literal for code: AbstractTypesAny
    /// </summary>
    public const string LiteralAbstractTypesAny = "http://hl7.org/fhir/abstract-types#Any";

    /// <summary>
    /// Literal for code: Type
    /// </summary>
    public const string LiteralType = "Type";

    /// <summary>
    /// Literal for code: AbstractTypesType
    /// </summary>
    public const string LiteralAbstractTypesType = "http://hl7.org/fhir/abstract-types#Type";

    /// <summary>
    /// Dictionary for looking up AbstractTypes Codings based on Codes
    /// </summary>
    public static Dictionary<string, Coding> Values = new Dictionary<string, Coding>() {
      { "Any", Any }, 
      { "http://hl7.org/fhir/abstract-types#Any", Any }, 
      { "Type", Type }, 
      { "http://hl7.org/fhir/abstract-types#Type", Type }, 
    };
  };
}
