// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using fhirCsR3.Models;

namespace fhirCsR3.ValueSets
{
  /// <summary>
  /// Defines the type of structure that a definition is describing.
  /// </summary>
  public static class StructureDefinitionKindCodes
  {
    /// <summary>
    /// A  complex structure that defines a set of data elements. These can be used throughout Resource and extension definitions, and in logical models.
    /// </summary>
    public static readonly Coding ComplexDataType = new Coding
    {
      Code = "complex-type",
      Display = "Complex Data Type",
      System = "http://hl7.org/fhir/structure-definition-kind"
    };
    /// <summary>
    /// A conceptual package of data that will be mapped to resources for implementation.
    /// </summary>
    public static readonly Coding LogicalModel = new Coding
    {
      Code = "logical",
      Display = "Logical Model",
      System = "http://hl7.org/fhir/structure-definition-kind"
    };
    /// <summary>
    /// A primitive type that has a value and an extension. These can be used throughout Resource and extension definitions. Only the base specification can define primitive types.
    /// </summary>
    public static readonly Coding PrimitiveDataType = new Coding
    {
      Code = "primitive-type",
      Display = "Primitive Data Type",
      System = "http://hl7.org/fhir/structure-definition-kind"
    };
    /// <summary>
    /// A resource defined by the FHIR specification.
    /// </summary>
    public static readonly Coding Resource = new Coding
    {
      Code = "resource",
      Display = "Resource",
      System = "http://hl7.org/fhir/structure-definition-kind"
    };

    /// <summary>
    /// Literal for code: ComplexDataType
    /// </summary>
    public const string LiteralComplexDataType = "complex-type";

    /// <summary>
    /// Literal for code: LogicalModel
    /// </summary>
    public const string LiteralLogicalModel = "logical";

    /// <summary>
    /// Literal for code: PrimitiveDataType
    /// </summary>
    public const string LiteralPrimitiveDataType = "primitive-type";

    /// <summary>
    /// Literal for code: Resource
    /// </summary>
    public const string LiteralResource = "resource";
  };
}
