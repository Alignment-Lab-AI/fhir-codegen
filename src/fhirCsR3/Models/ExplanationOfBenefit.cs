// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// Other claims which are related to this claim such as prior claim versions or for related services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitRelated>))]
  public class ExplanationOfBenefitRelated : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Do we need a relationship code?
    /// </summary>
    public Reference Claim { get; set; }
    /// <summary>
    /// An alternate organizational reference to the case or file to which this particular claim pertains - eg Property/Casualy insurer claim # or Workers Compensation case # .
    /// </summary>
    public Identifier Reference { get; set; }
    /// <summary>
    /// For example prior or umbrella.
    /// </summary>
    public CodeableConcept Relationship { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Claim != null)
      {
        writer.WritePropertyName("claim");
        Claim.SerializeJson(writer, options);
      }

      if (Relationship != null)
      {
        writer.WritePropertyName("relationship");
        Relationship.SerializeJson(writer, options);
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "claim":
          Claim = new fhirCsR3.Models.Reference();
          Claim.DeserializeJson(ref reader, options);
          break;

        case "reference":
          Reference = new fhirCsR3.Models.Identifier();
          Reference.DeserializeJson(ref reader, options);
          break;

        case "relationship":
          Relationship = new fhirCsR3.Models.CodeableConcept();
          Relationship.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The party to be reimbursed for the services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitPayee>))]
  public class ExplanationOfBenefitPayee : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Party to be reimbursed: Subscriber, provider, other.
    /// </summary>
    public Reference Party { get; set; }
    /// <summary>
    /// organization | patient | practitioner | relatedperson.
    /// </summary>
    public CodeableConcept ResourceType { get; set; }
    /// <summary>
    /// Type of Party to be reimbursed: Subscriber, provider, other.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (ResourceType != null)
      {
        writer.WritePropertyName("resourceType");
        ResourceType.SerializeJson(writer, options);
      }

      if (Party != null)
      {
        writer.WritePropertyName("party");
        Party.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "party":
          Party = new fhirCsR3.Models.Reference();
          Party.DeserializeJson(ref reader, options);
          break;

        case "resourceType":
          ResourceType = new fhirCsR3.Models.CodeableConcept();
          ResourceType.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitInformation>))]
  public class ExplanationOfBenefitInformation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This may contain the local bill type codes such as the US UB-04 bill type code.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// This may contain the local bill type codes such as the US UB-04 bill type code.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// For example, provides the reason for: the additional stay, or missing tooth or any other situation where a reason code is required in addition to the content.
    /// </summary>
    public Coding Reason { get; set; }
    /// <summary>
    /// Sequence of the information element which serves to provide a link.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// The date when or period to which this information refers.
    /// </summary>
    public string TimingDate { get; set; }
    /// <summary>
    /// Extension container element for TimingDate
    /// </summary>
    public Element _TimingDate { get; set; }
    /// <summary>
    /// The date when or period to which this information refers.
    /// </summary>
    public Period TimingPeriod { get; set; }
    /// <summary>
    /// Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
    /// </summary>
    public Reference ValueReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TimingDate))
      {
        writer.WriteString("timingDate", (string)TimingDate!);
      }

      if (_TimingDate != null)
      {
        writer.WritePropertyName("_timingDate");
        _TimingDate.SerializeJson(writer, options);
      }

      if (TimingPeriod != null)
      {
        writer.WritePropertyName("timingPeriod");
        TimingPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueAttachment != null)
      {
        writer.WritePropertyName("valueAttachment");
        ValueAttachment.SerializeJson(writer, options);
      }

      if (ValueReference != null)
      {
        writer.WritePropertyName("valueReference");
        ValueReference.SerializeJson(writer, options);
      }

      if (Reason != null)
      {
        writer.WritePropertyName("reason");
        Reason.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR3.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "reason":
          Reason = new fhirCsR3.Models.Coding();
          Reason.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "timingDate":
          TimingDate = reader.GetString();
          break;

        case "_timingDate":
          _TimingDate = new fhirCsR3.Models.Element();
          _TimingDate.DeserializeJson(ref reader, options);
          break;

        case "timingPeriod":
          TimingPeriod = new fhirCsR3.Models.Period();
          TimingPeriod.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR3.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR3.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          ValueAttachment = new fhirCsR3.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          ValueReference = new fhirCsR3.Models.Reference();
          ValueReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The members of the team who provided the overall service as well as their role and whether responsible and qualifications.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitCareTeam>))]
  public class ExplanationOfBenefitCareTeam : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The members of the team who provided the overall service.
    /// </summary>
    public Reference Provider { get; set; }
    /// <summary>
    /// The qualification which is applicable for this service.
    /// </summary>
    public CodeableConcept Qualification { get; set; }
    /// <summary>
    /// The practitioner who is billing and responsible for the claimed services rendered to the patient.
    /// </summary>
    public bool? Responsible { get; set; }
    /// <summary>
    /// The lead, assisting or supervising practitioner and their discipline if a multidisiplinary team.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Sequence of careteam which serves to order and provide a link.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (Provider != null)
      {
        writer.WritePropertyName("provider");
        Provider.SerializeJson(writer, options);
      }

      if (Responsible != null)
      {
        writer.WriteBoolean("responsible", (bool)Responsible!);
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Qualification != null)
      {
        writer.WritePropertyName("qualification");
        Qualification.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "provider":
          Provider = new fhirCsR3.Models.Reference();
          Provider.DeserializeJson(ref reader, options);
          break;

        case "qualification":
          Qualification = new fhirCsR3.Models.CodeableConcept();
          Qualification.DeserializeJson(ref reader, options);
          break;

        case "responsible":
          Responsible = reader.GetBoolean();
          break;

        case "role":
          Role = new fhirCsR3.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Ordered list of patient diagnosis for which care is sought.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitDiagnosis>))]
  public class ExplanationOfBenefitDiagnosis : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The diagnosis.
    /// </summary>
    public CodeableConcept DiagnosisCodeableConcept { get; set; }
    /// <summary>
    /// The diagnosis.
    /// </summary>
    public Reference DiagnosisReference { get; set; }
    /// <summary>
    /// The package billing code, for example DRG, based on the assigned grouping code system.
    /// </summary>
    public CodeableConcept PackageCode { get; set; }
    /// <summary>
    /// Sequence of diagnosis which serves to provide a link.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (DiagnosisCodeableConcept != null)
      {
        writer.WritePropertyName("diagnosisCodeableConcept");
        DiagnosisCodeableConcept.SerializeJson(writer, options);
      }

      if (DiagnosisReference != null)
      {
        writer.WritePropertyName("diagnosisReference");
        DiagnosisReference.SerializeJson(writer, options);
      }

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (PackageCode != null)
      {
        writer.WritePropertyName("packageCode");
        PackageCode.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "diagnosisCodeableConcept":
          DiagnosisCodeableConcept = new fhirCsR3.Models.CodeableConcept();
          DiagnosisCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "diagnosisReference":
          DiagnosisReference = new fhirCsR3.Models.Reference();
          DiagnosisReference.DeserializeJson(ref reader, options);
          break;

        case "packageCode":
          PackageCode = new fhirCsR3.Models.CodeableConcept();
          PackageCode.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objType = new fhirCsR3.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Ordered list of patient procedures performed to support the adjudication.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitProcedure>))]
  public class ExplanationOfBenefitProcedure : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// SB DateTime??
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// The procedure code.
    /// </summary>
    public CodeableConcept ProcedureCodeableConcept { get; set; }
    /// <summary>
    /// The procedure code.
    /// </summary>
    public Reference ProcedureReference { get; set; }
    /// <summary>
    /// Sequence of procedures which serves to order and provide a link.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (ProcedureCodeableConcept != null)
      {
        writer.WritePropertyName("procedureCodeableConcept");
        ProcedureCodeableConcept.SerializeJson(writer, options);
      }

      if (ProcedureReference != null)
      {
        writer.WritePropertyName("procedureReference");
        ProcedureReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR3.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "procedureCodeableConcept":
          ProcedureCodeableConcept = new fhirCsR3.Models.CodeableConcept();
          ProcedureCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "procedureReference":
          ProcedureReference = new fhirCsR3.Models.Reference();
          ProcedureReference.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Financial instrument by which payment information for health care.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitInsurance>))]
  public class ExplanationOfBenefitInsurance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Reference to the program or plan identification, underwriter or payor.
    /// </summary>
    public Reference Coverage { get; set; }
    /// <summary>
    /// A list of references from the Insurer to which these services pertain.
    /// </summary>
    public List<string> PreAuthRef { get; set; }
    /// <summary>
    /// Extension container element for PreAuthRef
    /// </summary>
    public List<Element> _PreAuthRef { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Coverage != null)
      {
        writer.WritePropertyName("coverage");
        Coverage.SerializeJson(writer, options);
      }

      if ((PreAuthRef != null) && (PreAuthRef.Count != 0))
      {
        writer.WritePropertyName("preAuthRef");
        writer.WriteStartArray();

        foreach (string valPreAuthRef in PreAuthRef)
        {
          writer.WriteStringValue(valPreAuthRef);
        }

        writer.WriteEndArray();
      }

      if ((_PreAuthRef != null) && (_PreAuthRef.Count != 0))
      {
        writer.WritePropertyName("_preAuthRef");
        writer.WriteStartArray();

        foreach (Element val_PreAuthRef in _PreAuthRef)
        {
          val_PreAuthRef.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "coverage":
          Coverage = new fhirCsR3.Models.Reference();
          Coverage.DeserializeJson(ref reader, options);
          break;

        case "preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PreAuthRef = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            PreAuthRef.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PreAuthRef.Count == 0)
          {
            PreAuthRef = null;
          }

          break;

        case "_preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _PreAuthRef = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Element obj_PreAuthRef = new fhirCsR3.Models.Element();
            obj_PreAuthRef.DeserializeJson(ref reader, options);
            _PreAuthRef.Add(obj_PreAuthRef);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_PreAuthRef.Count == 0)
          {
            _PreAuthRef = null;
          }

          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An accident which resulted in the need for healthcare services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitAccident>))]
  public class ExplanationOfBenefitAccident : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Date of an accident which these services are addressing.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Where the accident occurred.
    /// </summary>
    public Address LocationAddress { get; set; }
    /// <summary>
    /// Where the accident occurred.
    /// </summary>
    public Reference LocationReference { get; set; }
    /// <summary>
    /// Type of accident: work, auto, etc.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (LocationAddress != null)
      {
        writer.WritePropertyName("locationAddress");
        LocationAddress.SerializeJson(writer, options);
      }

      if (LocationReference != null)
      {
        writer.WritePropertyName("locationReference");
        LocationReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR3.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          LocationAddress = new fhirCsR3.Models.Address();
          LocationAddress.DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          LocationReference = new fhirCsR3.Models.Reference();
          LocationReference.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The adjudications results.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitItemAdjudication>))]
  public class ExplanationOfBenefitItemAdjudication : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Monitory amount associated with the code.
    /// </summary>
    public Money Amount { get; set; }
    /// <summary>
    /// Code indicating: Co-Pay, deductable, elegible, benefit, tax, etc.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// Adjudication reason such as limit reached.
    /// </summary>
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
    /// </summary>
    public decimal? Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Reason != null)
      {
        writer.WritePropertyName("reason");
        Reason.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (Value != null)
      {
        writer.WriteNumber("value", (decimal)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new fhirCsR3.Models.Money();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "reason":
          Reason = new fhirCsR3.Models.CodeableConcept();
          Reason.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetDecimal();
          break;

        case "_value":
          _Value = new fhirCsR3.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Third tier of goods and services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitItemDetailSubDetail>))]
  public class ExplanationOfBenefitItemDetailSubDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ExplanationOfBenefitItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// Health Care Service Type Codes  to identify the classification of service or benefits.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.
    /// </summary>
    public List<CodeableConcept> ProgramCode { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The type of reveneu or cost center providing the product and/or service.
    /// </summary>
    public CodeableConcept Revenue { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// A code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI).
    /// </summary>
    public CodeableConcept Service { get; set; }
    /// <summary>
    /// The type of product or service.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// List of Unique Device Identifiers associated with this line item.
    /// </summary>
    public List<Reference> Udi { get; set; }
    /// <summary>
    /// The fee for an addittional service or product or charge.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Revenue != null)
      {
        writer.WritePropertyName("revenue");
        Revenue.SerializeJson(writer, options);
      }

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Service != null)
      {
        writer.WritePropertyName("service");
        Service.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ProgramCode != null) && (ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valProgramCode in ProgramCode)
        {
          valProgramCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if ((Udi != null) && (Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();

        foreach (Reference valUdi in Udi)
        {
          valUdi.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ExplanationOfBenefitItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitItemAdjudication objAdjudication = new fhirCsR3.Models.ExplanationOfBenefitItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR3.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objModifier = new fhirCsR3.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new fhirCsR3.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objProgramCode = new fhirCsR3.Models.CodeableConcept();
            objProgramCode.DeserializeJson(ref reader, options);
            ProgramCode.Add(objProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProgramCode.Count == 0)
          {
            ProgramCode = null;
          }

          break;

        case "quantity":
          Quantity = new fhirCsR3.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "revenue":
          Revenue = new fhirCsR3.Models.CodeableConcept();
          Revenue.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "service":
          Service = new fhirCsR3.Models.CodeableConcept();
          Service.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Udi = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objUdi = new fhirCsR3.Models.Reference();
            objUdi.DeserializeJson(ref reader, options);
            Udi.Add(objUdi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Udi.Count == 0)
          {
            Udi = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new fhirCsR3.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Second tier of goods and services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitItemDetail>))]
  public class ExplanationOfBenefitItemDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ExplanationOfBenefitItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// Health Care Service Type Codes  to identify the classification of service or benefits.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.
    /// </summary>
    public List<CodeableConcept> ProgramCode { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The type of reveneu or cost center providing the product and/or service.
    /// </summary>
    public CodeableConcept Revenue { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept Service { get; set; }
    /// <summary>
    /// Third tier of goods and services.
    /// </summary>
    public List<ExplanationOfBenefitItemDetailSubDetail> SubDetail { get; set; }
    /// <summary>
    /// ItemType.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// List of Unique Device Identifiers associated with this line item.
    /// </summary>
    public List<Reference> Udi { get; set; }
    /// <summary>
    /// If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Revenue != null)
      {
        writer.WritePropertyName("revenue");
        Revenue.SerializeJson(writer, options);
      }

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Service != null)
      {
        writer.WritePropertyName("service");
        Service.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ProgramCode != null) && (ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valProgramCode in ProgramCode)
        {
          valProgramCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if ((Udi != null) && (Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();

        foreach (Reference valUdi in Udi)
        {
          valUdi.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SubDetail != null) && (SubDetail.Count != 0))
      {
        writer.WritePropertyName("subDetail");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitItemDetailSubDetail valSubDetail in SubDetail)
        {
          valSubDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ExplanationOfBenefitItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitItemAdjudication objAdjudication = new fhirCsR3.Models.ExplanationOfBenefitItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR3.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objModifier = new fhirCsR3.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new fhirCsR3.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objProgramCode = new fhirCsR3.Models.CodeableConcept();
            objProgramCode.DeserializeJson(ref reader, options);
            ProgramCode.Add(objProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProgramCode.Count == 0)
          {
            ProgramCode = null;
          }

          break;

        case "quantity":
          Quantity = new fhirCsR3.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "revenue":
          Revenue = new fhirCsR3.Models.CodeableConcept();
          Revenue.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "service":
          Service = new fhirCsR3.Models.CodeableConcept();
          Service.DeserializeJson(ref reader, options);
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubDetail = new List<ExplanationOfBenefitItemDetailSubDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitItemDetailSubDetail objSubDetail = new fhirCsR3.Models.ExplanationOfBenefitItemDetailSubDetail();
            objSubDetail.DeserializeJson(ref reader, options);
            SubDetail.Add(objSubDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubDetail.Count == 0)
          {
            SubDetail = null;
          }

          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Udi = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objUdi = new fhirCsR3.Models.Reference();
            objUdi.DeserializeJson(ref reader, options);
            Udi.Add(objUdi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Udi.Count == 0)
          {
            Udi = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new fhirCsR3.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// First tier of goods and services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitItem>))]
  public class ExplanationOfBenefitItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ExplanationOfBenefitItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// Physical service site on the patient (limb, tooth, etc).
    /// </summary>
    public CodeableConcept BodySite { get; set; }
    /// <summary>
    /// Careteam applicable for this service or product line.
    /// </summary>
    public List<uint> CareTeamLinkId { get; set; }
    /// <summary>
    /// Health Care Service Type Codes  to identify the classification of service or benefits.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// Second tier of goods and services.
    /// </summary>
    public List<ExplanationOfBenefitItemDetail> Detail { get; set; }
    /// <summary>
    /// Diagnosis applicable for this service or product line.
    /// </summary>
    public List<uint> DiagnosisLinkId { get; set; }
    /// <summary>
    /// A billed item may include goods or services provided in multiple encounters.
    /// </summary>
    public List<Reference> Encounter { get; set; }
    /// <summary>
    /// A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// Exceptions, special conditions and supporting information pplicable for this service or product line.
    /// </summary>
    public List<uint> InformationLinkId { get; set; }
    /// <summary>
    /// Where the service was provided.
    /// </summary>
    public CodeableConcept LocationCodeableConcept { get; set; }
    /// <summary>
    /// Where the service was provided.
    /// </summary>
    public Address LocationAddress { get; set; }
    /// <summary>
    /// Where the service was provided.
    /// </summary>
    public Reference LocationReference { get; set; }
    /// <summary>
    /// Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// Procedures applicable for this service or product line.
    /// </summary>
    public List<uint> ProcedureLinkId { get; set; }
    /// <summary>
    /// For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.
    /// </summary>
    public List<CodeableConcept> ProgramCode { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The type of reveneu or cost center providing the product and/or service.
    /// </summary>
    public CodeableConcept Revenue { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept Service { get; set; }
    /// <summary>
    /// The date or dates when the enclosed suite of services were performed or completed.
    /// </summary>
    public string ServicedDate { get; set; }
    /// <summary>
    /// Extension container element for ServicedDate
    /// </summary>
    public Element _ServicedDate { get; set; }
    /// <summary>
    /// The date or dates when the enclosed suite of services were performed or completed.
    /// </summary>
    public Period ServicedPeriod { get; set; }
    /// <summary>
    /// A region or surface of the site, eg. limb region or tooth surface(s).
    /// </summary>
    public List<CodeableConcept> SubSite { get; set; }
    /// <summary>
    /// List of Unique Device Identifiers associated with this line item.
    /// </summary>
    public List<Reference> Udi { get; set; }
    /// <summary>
    /// If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if ((CareTeamLinkId != null) && (CareTeamLinkId.Count != 0))
      {
        writer.WritePropertyName("careTeamLinkId");
        writer.WriteStartArray();

        foreach (uint valCareTeamLinkId in CareTeamLinkId)
        {
          writer.WriteNumberValue(valCareTeamLinkId);
        }

        writer.WriteEndArray();
      }

      if ((DiagnosisLinkId != null) && (DiagnosisLinkId.Count != 0))
      {
        writer.WritePropertyName("diagnosisLinkId");
        writer.WriteStartArray();

        foreach (uint valDiagnosisLinkId in DiagnosisLinkId)
        {
          writer.WriteNumberValue(valDiagnosisLinkId);
        }

        writer.WriteEndArray();
      }

      if ((ProcedureLinkId != null) && (ProcedureLinkId.Count != 0))
      {
        writer.WritePropertyName("procedureLinkId");
        writer.WriteStartArray();

        foreach (uint valProcedureLinkId in ProcedureLinkId)
        {
          writer.WriteNumberValue(valProcedureLinkId);
        }

        writer.WriteEndArray();
      }

      if ((InformationLinkId != null) && (InformationLinkId.Count != 0))
      {
        writer.WritePropertyName("informationLinkId");
        writer.WriteStartArray();

        foreach (uint valInformationLinkId in InformationLinkId)
        {
          writer.WriteNumberValue(valInformationLinkId);
        }

        writer.WriteEndArray();
      }

      if (Revenue != null)
      {
        writer.WritePropertyName("revenue");
        Revenue.SerializeJson(writer, options);
      }

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Service != null)
      {
        writer.WritePropertyName("service");
        Service.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ProgramCode != null) && (ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valProgramCode in ProgramCode)
        {
          valProgramCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ServicedDate))
      {
        writer.WriteString("servicedDate", (string)ServicedDate!);
      }

      if (_ServicedDate != null)
      {
        writer.WritePropertyName("_servicedDate");
        _ServicedDate.SerializeJson(writer, options);
      }

      if (ServicedPeriod != null)
      {
        writer.WritePropertyName("servicedPeriod");
        ServicedPeriod.SerializeJson(writer, options);
      }

      if (LocationCodeableConcept != null)
      {
        writer.WritePropertyName("locationCodeableConcept");
        LocationCodeableConcept.SerializeJson(writer, options);
      }

      if (LocationAddress != null)
      {
        writer.WritePropertyName("locationAddress");
        LocationAddress.SerializeJson(writer, options);
      }

      if (LocationReference != null)
      {
        writer.WritePropertyName("locationReference");
        LocationReference.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if ((Udi != null) && (Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();

        foreach (Reference valUdi in Udi)
        {
          valUdi.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (BodySite != null)
      {
        writer.WritePropertyName("bodySite");
        BodySite.SerializeJson(writer, options);
      }

      if ((SubSite != null) && (SubSite.Count != 0))
      {
        writer.WritePropertyName("subSite");
        writer.WriteStartArray();

        foreach (CodeableConcept valSubSite in SubSite)
        {
          valSubSite.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Encounter != null) && (Encounter.Count != 0))
      {
        writer.WritePropertyName("encounter");
        writer.WriteStartArray();

        foreach (Reference valEncounter in Encounter)
        {
          valEncounter.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitItemDetail valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ExplanationOfBenefitItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitItemAdjudication objAdjudication = new fhirCsR3.Models.ExplanationOfBenefitItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "bodySite":
          BodySite = new fhirCsR3.Models.CodeableConcept();
          BodySite.DeserializeJson(ref reader, options);
          break;

        case "careTeamLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CareTeamLinkId = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            CareTeamLinkId.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CareTeamLinkId.Count == 0)
          {
            CareTeamLinkId = null;
          }

          break;

        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<ExplanationOfBenefitItemDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitItemDetail objDetail = new fhirCsR3.Models.ExplanationOfBenefitItemDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "diagnosisLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DiagnosisLinkId = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            DiagnosisLinkId.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DiagnosisLinkId.Count == 0)
          {
            DiagnosisLinkId = null;
          }

          break;

        case "encounter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Encounter = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objEncounter = new fhirCsR3.Models.Reference();
            objEncounter.DeserializeJson(ref reader, options);
            Encounter.Add(objEncounter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Encounter.Count == 0)
          {
            Encounter = null;
          }

          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR3.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "informationLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InformationLinkId = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            InformationLinkId.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InformationLinkId.Count == 0)
          {
            InformationLinkId = null;
          }

          break;

        case "locationCodeableConcept":
          LocationCodeableConcept = new fhirCsR3.Models.CodeableConcept();
          LocationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          LocationAddress = new fhirCsR3.Models.Address();
          LocationAddress.DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          LocationReference = new fhirCsR3.Models.Reference();
          LocationReference.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objModifier = new fhirCsR3.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new fhirCsR3.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "procedureLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProcedureLinkId = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ProcedureLinkId.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProcedureLinkId.Count == 0)
          {
            ProcedureLinkId = null;
          }

          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objProgramCode = new fhirCsR3.Models.CodeableConcept();
            objProgramCode.DeserializeJson(ref reader, options);
            ProgramCode.Add(objProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProgramCode.Count == 0)
          {
            ProgramCode = null;
          }

          break;

        case "quantity":
          Quantity = new fhirCsR3.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "revenue":
          Revenue = new fhirCsR3.Models.CodeableConcept();
          Revenue.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "service":
          Service = new fhirCsR3.Models.CodeableConcept();
          Service.DeserializeJson(ref reader, options);
          break;

        case "servicedDate":
          ServicedDate = reader.GetString();
          break;

        case "_servicedDate":
          _ServicedDate = new fhirCsR3.Models.Element();
          _ServicedDate.DeserializeJson(ref reader, options);
          break;

        case "servicedPeriod":
          ServicedPeriod = new fhirCsR3.Models.Period();
          ServicedPeriod.DeserializeJson(ref reader, options);
          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubSite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objSubSite = new fhirCsR3.Models.CodeableConcept();
            objSubSite.DeserializeJson(ref reader, options);
            SubSite.Add(objSubSite);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubSite.Count == 0)
          {
            SubSite = null;
          }

          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Udi = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objUdi = new fhirCsR3.Models.Reference();
            objUdi.DeserializeJson(ref reader, options);
            Udi.Add(objUdi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Udi.Count == 0)
          {
            Udi = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new fhirCsR3.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The second tier service adjudications for payor added services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitAddItemDetail>))]
  public class ExplanationOfBenefitAddItemDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ExplanationOfBenefitItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// Health Care Service Type Codes  to identify the classification of service or benefits.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// The fee charged for the professional service or product.
    /// </summary>
    public Money Fee { get; set; }
    /// <summary>
    /// Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// The type of reveneu or cost center providing the product and/or service.
    /// </summary>
    public CodeableConcept Revenue { get; set; }
    /// <summary>
    /// A code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI).
    /// </summary>
    public CodeableConcept Service { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Revenue != null)
      {
        writer.WritePropertyName("revenue");
        Revenue.SerializeJson(writer, options);
      }

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Service != null)
      {
        writer.WritePropertyName("service");
        Service.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Fee != null)
      {
        writer.WritePropertyName("fee");
        Fee.SerializeJson(writer, options);
      }

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ExplanationOfBenefitItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitItemAdjudication objAdjudication = new fhirCsR3.Models.ExplanationOfBenefitItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "fee":
          Fee = new fhirCsR3.Models.Money();
          Fee.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objModifier = new fhirCsR3.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "revenue":
          Revenue = new fhirCsR3.Models.CodeableConcept();
          Revenue.DeserializeJson(ref reader, options);
          break;

        case "service":
          Service = new fhirCsR3.Models.CodeableConcept();
          Service.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The first tier service adjudications for payor added services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitAddItem>))]
  public class ExplanationOfBenefitAddItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ExplanationOfBenefitItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// Health Care Service Type Codes  to identify the classification of service or benefits.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// The second tier service adjudications for payor added services.
    /// </summary>
    public List<ExplanationOfBenefitAddItemDetail> Detail { get; set; }
    /// <summary>
    /// The fee charged for the professional service or product.
    /// </summary>
    public Money Fee { get; set; }
    /// <summary>
    /// Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// The type of reveneu or cost center providing the product and/or service.
    /// </summary>
    public CodeableConcept Revenue { get; set; }
    /// <summary>
    /// List of input service items which this service line is intended to replace.
    /// </summary>
    public List<uint> SequenceLinkId { get; set; }
    /// <summary>
    /// If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept Service { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((SequenceLinkId != null) && (SequenceLinkId.Count != 0))
      {
        writer.WritePropertyName("sequenceLinkId");
        writer.WriteStartArray();

        foreach (uint valSequenceLinkId in SequenceLinkId)
        {
          writer.WriteNumberValue(valSequenceLinkId);
        }

        writer.WriteEndArray();
      }

      if (Revenue != null)
      {
        writer.WritePropertyName("revenue");
        Revenue.SerializeJson(writer, options);
      }

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Service != null)
      {
        writer.WritePropertyName("service");
        Service.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Fee != null)
      {
        writer.WritePropertyName("fee");
        Fee.SerializeJson(writer, options);
      }

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitAddItemDetail valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ExplanationOfBenefitItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitItemAdjudication objAdjudication = new fhirCsR3.Models.ExplanationOfBenefitItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<ExplanationOfBenefitAddItemDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitAddItemDetail objDetail = new fhirCsR3.Models.ExplanationOfBenefitAddItemDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "fee":
          Fee = new fhirCsR3.Models.Money();
          Fee.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objModifier = new fhirCsR3.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "revenue":
          Revenue = new fhirCsR3.Models.CodeableConcept();
          Revenue.DeserializeJson(ref reader, options);
          break;

        case "sequenceLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SequenceLinkId = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SequenceLinkId.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SequenceLinkId.Count == 0)
          {
            SequenceLinkId = null;
          }

          break;

        case "service":
          Service = new fhirCsR3.Models.CodeableConcept();
          Service.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Payment details for the claim if the claim has been paid.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitPayment>))]
  public class ExplanationOfBenefitPayment : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Adjustment to the payment of this transaction which is not related to adjudication of this transaction.
    /// </summary>
    public Money Adjustment { get; set; }
    /// <summary>
    /// Reason for the payment adjustment.
    /// </summary>
    public CodeableConcept AdjustmentReason { get; set; }
    /// <summary>
    /// Payable less any payment adjustment.
    /// </summary>
    public Money Amount { get; set; }
    /// <summary>
    /// Estimated payment date.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Payment identifer.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Whether this represents partial or complete payment of the claim.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Adjustment != null)
      {
        writer.WritePropertyName("adjustment");
        Adjustment.SerializeJson(writer, options);
      }

      if (AdjustmentReason != null)
      {
        writer.WritePropertyName("adjustmentReason");
        AdjustmentReason.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjustment":
          Adjustment = new fhirCsR3.Models.Money();
          Adjustment.DeserializeJson(ref reader, options);
          break;

        case "adjustmentReason":
          AdjustmentReason = new fhirCsR3.Models.CodeableConcept();
          AdjustmentReason.DeserializeJson(ref reader, options);
          break;

        case "amount":
          Amount = new fhirCsR3.Models.Money();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR3.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR3.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Note text.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitProcessNote>))]
  public class ExplanationOfBenefitProcessNote : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
    /// </summary>
    public CodeableConcept Language { get; set; }
    /// <summary>
    /// An integer associated with each note which may be referred to from each service line item.
    /// </summary>
    public uint? Number { get; set; }
    /// <summary>
    /// The note text.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// The note purpose: Print/Display.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Number != null)
      {
        writer.WriteNumber("number", (uint)Number!);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (Language != null)
      {
        writer.WritePropertyName("language");
        Language.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "language":
          Language = new fhirCsR3.Models.CodeableConcept();
          Language.DeserializeJson(ref reader, options);
          break;

        case "number":
          Number = reader.GetUInt32();
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR3.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Benefits Used to date.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitBenefitBalanceFinancial>))]
  public class ExplanationOfBenefitBenefitBalanceFinancial : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Benefits allowed.
    /// </summary>
    public uint? AllowedUnsignedInt { get; set; }
    /// <summary>
    /// Benefits allowed.
    /// </summary>
    public string AllowedString { get; set; }
    /// <summary>
    /// Extension container element for AllowedString
    /// </summary>
    public Element _AllowedString { get; set; }
    /// <summary>
    /// Benefits allowed.
    /// </summary>
    public Money AllowedMoney { get; set; }
    /// <summary>
    /// Deductable, visits, benefit amount.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Benefits used.
    /// </summary>
    public uint? UsedUnsignedInt { get; set; }
    /// <summary>
    /// Benefits used.
    /// </summary>
    public Money UsedMoney { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (AllowedUnsignedInt != null)
      {
        writer.WriteNumber("allowedUnsignedInt", (uint)AllowedUnsignedInt!);
      }

      if (!string.IsNullOrEmpty(AllowedString))
      {
        writer.WriteString("allowedString", (string)AllowedString!);
      }

      if (_AllowedString != null)
      {
        writer.WritePropertyName("_allowedString");
        _AllowedString.SerializeJson(writer, options);
      }

      if (AllowedMoney != null)
      {
        writer.WritePropertyName("allowedMoney");
        AllowedMoney.SerializeJson(writer, options);
      }

      if (UsedUnsignedInt != null)
      {
        writer.WriteNumber("usedUnsignedInt", (uint)UsedUnsignedInt!);
      }

      if (UsedMoney != null)
      {
        writer.WritePropertyName("usedMoney");
        UsedMoney.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allowedUnsignedInt":
          AllowedUnsignedInt = reader.GetUInt32();
          break;

        case "allowedString":
          AllowedString = reader.GetString();
          break;

        case "_allowedString":
          _AllowedString = new fhirCsR3.Models.Element();
          _AllowedString.DeserializeJson(ref reader, options);
          break;

        case "allowedMoney":
          AllowedMoney = new fhirCsR3.Models.Money();
          AllowedMoney.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "usedUnsignedInt":
          UsedUnsignedInt = reader.GetUInt32();
          break;

        case "usedMoney":
          UsedMoney = new fhirCsR3.Models.Money();
          UsedMoney.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Balance by Benefit Category.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefitBenefitBalance>))]
  public class ExplanationOfBenefitBenefitBalance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Dental, Vision, Medical, Pharmacy, Rehab etc.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// A richer description of the benefit, for example 'DENT2 covers 100% of basic, 50% of major but exclused Ortho, Implants and Costmetic services'.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// True if the indicated class of service is excluded from the plan, missing or False indicated the service is included in the coverage.
    /// </summary>
    public bool? Excluded { get; set; }
    /// <summary>
    /// Benefits Used to date.
    /// </summary>
    public List<ExplanationOfBenefitBenefitBalanceFinancial> Financial { get; set; }
    /// <summary>
    /// A short name or tag for the benefit, for example MED01, or DENT2.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Network designation.
    /// </summary>
    public CodeableConcept Network { get; set; }
    /// <summary>
    /// Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.
    /// </summary>
    public CodeableConcept SubCategory { get; set; }
    /// <summary>
    /// The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual vistis'.
    /// </summary>
    public CodeableConcept Term { get; set; }
    /// <summary>
    /// Unit designation: individual or family.
    /// </summary>
    public CodeableConcept Unit { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (SubCategory != null)
      {
        writer.WritePropertyName("subCategory");
        SubCategory.SerializeJson(writer, options);
      }

      if (Excluded != null)
      {
        writer.WriteBoolean("excluded", (bool)Excluded!);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Network != null)
      {
        writer.WritePropertyName("network");
        Network.SerializeJson(writer, options);
      }

      if (Unit != null)
      {
        writer.WritePropertyName("unit");
        Unit.SerializeJson(writer, options);
      }

      if (Term != null)
      {
        writer.WritePropertyName("term");
        Term.SerializeJson(writer, options);
      }

      if ((Financial != null) && (Financial.Count != 0))
      {
        writer.WritePropertyName("financial");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitBenefitBalanceFinancial valFinancial in Financial)
        {
          valFinancial.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "excluded":
          Excluded = reader.GetBoolean();
          break;

        case "financial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Financial = new List<ExplanationOfBenefitBenefitBalanceFinancial>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitBenefitBalanceFinancial objFinancial = new fhirCsR3.Models.ExplanationOfBenefitBenefitBalanceFinancial();
            objFinancial.DeserializeJson(ref reader, options);
            Financial.Add(objFinancial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Financial.Count == 0)
          {
            Financial = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR3.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "network":
          Network = new fhirCsR3.Models.CodeableConcept();
          Network.DeserializeJson(ref reader, options);
          break;

        case "subCategory":
          SubCategory = new fhirCsR3.Models.CodeableConcept();
          SubCategory.DeserializeJson(ref reader, options);
          break;

        case "term":
          Term = new fhirCsR3.Models.CodeableConcept();
          Term.DeserializeJson(ref reader, options);
          break;

        case "unit":
          Unit = new fhirCsR3.Models.CodeableConcept();
          Unit.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExplanationOfBenefit>))]
  public class ExplanationOfBenefit : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ExplanationOfBenefit";
    /// <summary>
    /// An accident which resulted in the need for healthcare services.
    /// </summary>
    public ExplanationOfBenefitAccident Accident { get; set; }
    /// <summary>
    /// The first tier service adjudications for payor added services.
    /// </summary>
    public List<ExplanationOfBenefitAddItem> AddItem { get; set; }
    /// <summary>
    /// Balance by Benefit Category.
    /// </summary>
    public List<ExplanationOfBenefitBenefitBalance> BenefitBalance { get; set; }
    /// <summary>
    /// The billable period for which charges are being submitted.
    /// </summary>
    public Period BillablePeriod { get; set; }
    /// <summary>
    /// The members of the team who provided the overall service as well as their role and whether responsible and qualifications.
    /// </summary>
    public List<ExplanationOfBenefitCareTeam> CareTeam { get; set; }
    /// <summary>
    /// The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
    /// </summary>
    public Reference Claim { get; set; }
    /// <summary>
    /// The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
    /// </summary>
    public Reference ClaimResponse { get; set; }
    /// <summary>
    /// The date when the EOB was created.
    /// </summary>
    public string Created { get; set; }
    /// <summary>
    /// Extension container element for Created
    /// </summary>
    public Element _Created { get; set; }
    /// <summary>
    /// Ordered list of patient diagnosis for which care is sought.
    /// </summary>
    public List<ExplanationOfBenefitDiagnosis> Diagnosis { get; set; }
    /// <summary>
    /// Do we need a disposition code?
    /// </summary>
    public string Disposition { get; set; }
    /// <summary>
    /// Extension container element for Disposition
    /// </summary>
    public Element _Disposition { get; set; }
    /// <summary>
    /// The start and optional end dates of when the patient was precluded from working due to the treatable condition(s).
    /// </summary>
    public Period EmploymentImpacted { get; set; }
    /// <summary>
    /// The person who created the explanation of benefit.
    /// </summary>
    public Reference Enterer { get; set; }
    /// <summary>
    /// Facility where the services were provided.
    /// </summary>
    public Reference Facility { get; set; }
    /// <summary>
    /// The form to be used for printing the content.
    /// </summary>
    public CodeableConcept Form { get; set; }
    /// <summary>
    /// The start and optional end dates of when the patient was confined to a treatment center.
    /// </summary>
    public Period Hospitalization { get; set; }
    /// <summary>
    /// The EOB Business Identifier.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required.
    /// </summary>
    public List<ExplanationOfBenefitInformation> Information { get; set; }
    /// <summary>
    /// Financial instrument by which payment information for health care.
    /// </summary>
    public ExplanationOfBenefitInsurance Insurance { get; set; }
    /// <summary>
    /// The insurer which is responsible for the explanation of benefit.
    /// </summary>
    public Reference Insurer { get; set; }
    /// <summary>
    /// First tier of goods and services.
    /// </summary>
    public List<ExplanationOfBenefitItem> Item { get; set; }
    /// <summary>
    /// The provider which is responsible for the claim.
    /// </summary>
    public Reference Organization { get; set; }
    /// <summary>
    /// Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products. For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new precription for an alternate medication which has the same theraputic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
    /// </summary>
    public Reference OriginalPrescription { get; set; }
    /// <summary>
    /// Processing outcome errror, partial or complete processing.
    /// </summary>
    public CodeableConcept Outcome { get; set; }
    /// <summary>
    /// Patient Resource.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// The party to be reimbursed for the services.
    /// </summary>
    public ExplanationOfBenefitPayee Payee { get; set; }
    /// <summary>
    /// Payment details for the claim if the claim has been paid.
    /// </summary>
    public ExplanationOfBenefitPayment Payment { get; set; }
    /// <summary>
    /// Precedence (primary, secondary, etc.).
    /// </summary>
    public uint? Precedence { get; set; }
    /// <summary>
    /// Prescription to support the dispensing of Pharmacy or Vision products.
    /// </summary>
    public Reference Prescription { get; set; }
    /// <summary>
    /// Ordered list of patient procedures performed to support the adjudication.
    /// </summary>
    public List<ExplanationOfBenefitProcedure> Procedure { get; set; }
    /// <summary>
    /// Note text.
    /// </summary>
    public List<ExplanationOfBenefitProcessNote> ProcessNote { get; set; }
    /// <summary>
    /// The provider which is responsible for the claim.
    /// </summary>
    public Reference Provider { get; set; }
    /// <summary>
    /// The referral resource which lists the date, practitioner, reason and other supporting information.
    /// </summary>
    public Reference Referral { get; set; }
    /// <summary>
    /// Other claims which are related to this claim such as prior claim versions or for related services.
    /// </summary>
    public List<ExplanationOfBenefitRelated> Related { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// This may contain the local bill type codes such as the US UB-04 bill type code.
    /// </summary>
    public List<CodeableConcept> SubType { get; set; }
    /// <summary>
    /// Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductable).
    /// </summary>
    public Money TotalBenefit { get; set; }
    /// <summary>
    /// The total cost of the services reported.
    /// </summary>
    public Money TotalCost { get; set; }
    /// <summary>
    /// Affects which fields and value sets are used.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The amount of deductable applied which was not allocated to any particular service line.
    /// </summary>
    public Money UnallocDeductable { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((SubType != null) && (SubType.Count != 0))
      {
        writer.WritePropertyName("subType");
        writer.WriteStartArray();

        foreach (CodeableConcept valSubType in SubType)
        {
          valSubType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (BillablePeriod != null)
      {
        writer.WritePropertyName("billablePeriod");
        BillablePeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Created))
      {
        writer.WriteString("created", (string)Created!);
      }

      if (_Created != null)
      {
        writer.WritePropertyName("_created");
        _Created.SerializeJson(writer, options);
      }

      if (Enterer != null)
      {
        writer.WritePropertyName("enterer");
        Enterer.SerializeJson(writer, options);
      }

      if (Insurer != null)
      {
        writer.WritePropertyName("insurer");
        Insurer.SerializeJson(writer, options);
      }

      if (Provider != null)
      {
        writer.WritePropertyName("provider");
        Provider.SerializeJson(writer, options);
      }

      if (Organization != null)
      {
        writer.WritePropertyName("organization");
        Organization.SerializeJson(writer, options);
      }

      if (Referral != null)
      {
        writer.WritePropertyName("referral");
        Referral.SerializeJson(writer, options);
      }

      if (Facility != null)
      {
        writer.WritePropertyName("facility");
        Facility.SerializeJson(writer, options);
      }

      if (Claim != null)
      {
        writer.WritePropertyName("claim");
        Claim.SerializeJson(writer, options);
      }

      if (ClaimResponse != null)
      {
        writer.WritePropertyName("claimResponse");
        ClaimResponse.SerializeJson(writer, options);
      }

      if (Outcome != null)
      {
        writer.WritePropertyName("outcome");
        Outcome.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Disposition))
      {
        writer.WriteString("disposition", (string)Disposition!);
      }

      if (_Disposition != null)
      {
        writer.WritePropertyName("_disposition");
        _Disposition.SerializeJson(writer, options);
      }

      if ((Related != null) && (Related.Count != 0))
      {
        writer.WritePropertyName("related");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitRelated valRelated in Related)
        {
          valRelated.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Prescription != null)
      {
        writer.WritePropertyName("prescription");
        Prescription.SerializeJson(writer, options);
      }

      if (OriginalPrescription != null)
      {
        writer.WritePropertyName("originalPrescription");
        OriginalPrescription.SerializeJson(writer, options);
      }

      if (Payee != null)
      {
        writer.WritePropertyName("payee");
        Payee.SerializeJson(writer, options);
      }

      if ((Information != null) && (Information.Count != 0))
      {
        writer.WritePropertyName("information");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitInformation valInformation in Information)
        {
          valInformation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((CareTeam != null) && (CareTeam.Count != 0))
      {
        writer.WritePropertyName("careTeam");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitCareTeam valCareTeam in CareTeam)
        {
          valCareTeam.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Diagnosis != null) && (Diagnosis.Count != 0))
      {
        writer.WritePropertyName("diagnosis");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitDiagnosis valDiagnosis in Diagnosis)
        {
          valDiagnosis.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Procedure != null) && (Procedure.Count != 0))
      {
        writer.WritePropertyName("procedure");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitProcedure valProcedure in Procedure)
        {
          valProcedure.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Precedence != null)
      {
        writer.WriteNumber("precedence", (uint)Precedence!);
      }

      if (Insurance != null)
      {
        writer.WritePropertyName("insurance");
        Insurance.SerializeJson(writer, options);
      }

      if (Accident != null)
      {
        writer.WritePropertyName("accident");
        Accident.SerializeJson(writer, options);
      }

      if (EmploymentImpacted != null)
      {
        writer.WritePropertyName("employmentImpacted");
        EmploymentImpacted.SerializeJson(writer, options);
      }

      if (Hospitalization != null)
      {
        writer.WritePropertyName("hospitalization");
        Hospitalization.SerializeJson(writer, options);
      }

      if ((Item != null) && (Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitItem valItem in Item)
        {
          valItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AddItem != null) && (AddItem.Count != 0))
      {
        writer.WritePropertyName("addItem");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitAddItem valAddItem in AddItem)
        {
          valAddItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (TotalCost != null)
      {
        writer.WritePropertyName("totalCost");
        TotalCost.SerializeJson(writer, options);
      }

      if (UnallocDeductable != null)
      {
        writer.WritePropertyName("unallocDeductable");
        UnallocDeductable.SerializeJson(writer, options);
      }

      if (TotalBenefit != null)
      {
        writer.WritePropertyName("totalBenefit");
        TotalBenefit.SerializeJson(writer, options);
      }

      if (Payment != null)
      {
        writer.WritePropertyName("payment");
        Payment.SerializeJson(writer, options);
      }

      if (Form != null)
      {
        writer.WritePropertyName("form");
        Form.SerializeJson(writer, options);
      }

      if ((ProcessNote != null) && (ProcessNote.Count != 0))
      {
        writer.WritePropertyName("processNote");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitProcessNote valProcessNote in ProcessNote)
        {
          valProcessNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((BenefitBalance != null) && (BenefitBalance.Count != 0))
      {
        writer.WritePropertyName("benefitBalance");
        writer.WriteStartArray();

        foreach (ExplanationOfBenefitBenefitBalance valBenefitBalance in BenefitBalance)
        {
          valBenefitBalance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "accident":
          Accident = new fhirCsR3.Models.ExplanationOfBenefitAccident();
          Accident.DeserializeJson(ref reader, options);
          break;

        case "addItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AddItem = new List<ExplanationOfBenefitAddItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitAddItem objAddItem = new fhirCsR3.Models.ExplanationOfBenefitAddItem();
            objAddItem.DeserializeJson(ref reader, options);
            AddItem.Add(objAddItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AddItem.Count == 0)
          {
            AddItem = null;
          }

          break;

        case "benefitBalance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BenefitBalance = new List<ExplanationOfBenefitBenefitBalance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitBenefitBalance objBenefitBalance = new fhirCsR3.Models.ExplanationOfBenefitBenefitBalance();
            objBenefitBalance.DeserializeJson(ref reader, options);
            BenefitBalance.Add(objBenefitBalance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BenefitBalance.Count == 0)
          {
            BenefitBalance = null;
          }

          break;

        case "billablePeriod":
          BillablePeriod = new fhirCsR3.Models.Period();
          BillablePeriod.DeserializeJson(ref reader, options);
          break;

        case "careTeam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CareTeam = new List<ExplanationOfBenefitCareTeam>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitCareTeam objCareTeam = new fhirCsR3.Models.ExplanationOfBenefitCareTeam();
            objCareTeam.DeserializeJson(ref reader, options);
            CareTeam.Add(objCareTeam);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CareTeam.Count == 0)
          {
            CareTeam = null;
          }

          break;

        case "claim":
          Claim = new fhirCsR3.Models.Reference();
          Claim.DeserializeJson(ref reader, options);
          break;

        case "claimResponse":
          ClaimResponse = new fhirCsR3.Models.Reference();
          ClaimResponse.DeserializeJson(ref reader, options);
          break;

        case "created":
          Created = reader.GetString();
          break;

        case "_created":
          _Created = new fhirCsR3.Models.Element();
          _Created.DeserializeJson(ref reader, options);
          break;

        case "diagnosis":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Diagnosis = new List<ExplanationOfBenefitDiagnosis>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitDiagnosis objDiagnosis = new fhirCsR3.Models.ExplanationOfBenefitDiagnosis();
            objDiagnosis.DeserializeJson(ref reader, options);
            Diagnosis.Add(objDiagnosis);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Diagnosis.Count == 0)
          {
            Diagnosis = null;
          }

          break;

        case "disposition":
          Disposition = reader.GetString();
          break;

        case "_disposition":
          _Disposition = new fhirCsR3.Models.Element();
          _Disposition.DeserializeJson(ref reader, options);
          break;

        case "employmentImpacted":
          EmploymentImpacted = new fhirCsR3.Models.Period();
          EmploymentImpacted.DeserializeJson(ref reader, options);
          break;

        case "enterer":
          Enterer = new fhirCsR3.Models.Reference();
          Enterer.DeserializeJson(ref reader, options);
          break;

        case "facility":
          Facility = new fhirCsR3.Models.Reference();
          Facility.DeserializeJson(ref reader, options);
          break;

        case "form":
          Form = new fhirCsR3.Models.CodeableConcept();
          Form.DeserializeJson(ref reader, options);
          break;

        case "hospitalization":
          Hospitalization = new fhirCsR3.Models.Period();
          Hospitalization.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Identifier objIdentifier = new fhirCsR3.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "information":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Information = new List<ExplanationOfBenefitInformation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitInformation objInformation = new fhirCsR3.Models.ExplanationOfBenefitInformation();
            objInformation.DeserializeJson(ref reader, options);
            Information.Add(objInformation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Information.Count == 0)
          {
            Information = null;
          }

          break;

        case "insurance":
          Insurance = new fhirCsR3.Models.ExplanationOfBenefitInsurance();
          Insurance.DeserializeJson(ref reader, options);
          break;

        case "insurer":
          Insurer = new fhirCsR3.Models.Reference();
          Insurer.DeserializeJson(ref reader, options);
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Item = new List<ExplanationOfBenefitItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitItem objItem = new fhirCsR3.Models.ExplanationOfBenefitItem();
            objItem.DeserializeJson(ref reader, options);
            Item.Add(objItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Item.Count == 0)
          {
            Item = null;
          }

          break;

        case "organization":
          Organization = new fhirCsR3.Models.Reference();
          Organization.DeserializeJson(ref reader, options);
          break;

        case "originalPrescription":
          OriginalPrescription = new fhirCsR3.Models.Reference();
          OriginalPrescription.DeserializeJson(ref reader, options);
          break;

        case "outcome":
          Outcome = new fhirCsR3.Models.CodeableConcept();
          Outcome.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR3.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "payee":
          Payee = new fhirCsR3.Models.ExplanationOfBenefitPayee();
          Payee.DeserializeJson(ref reader, options);
          break;

        case "payment":
          Payment = new fhirCsR3.Models.ExplanationOfBenefitPayment();
          Payment.DeserializeJson(ref reader, options);
          break;

        case "precedence":
          Precedence = reader.GetUInt32();
          break;

        case "prescription":
          Prescription = new fhirCsR3.Models.Reference();
          Prescription.DeserializeJson(ref reader, options);
          break;

        case "procedure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Procedure = new List<ExplanationOfBenefitProcedure>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitProcedure objProcedure = new fhirCsR3.Models.ExplanationOfBenefitProcedure();
            objProcedure.DeserializeJson(ref reader, options);
            Procedure.Add(objProcedure);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Procedure.Count == 0)
          {
            Procedure = null;
          }

          break;

        case "processNote":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProcessNote = new List<ExplanationOfBenefitProcessNote>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitProcessNote objProcessNote = new fhirCsR3.Models.ExplanationOfBenefitProcessNote();
            objProcessNote.DeserializeJson(ref reader, options);
            ProcessNote.Add(objProcessNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProcessNote.Count == 0)
          {
            ProcessNote = null;
          }

          break;

        case "provider":
          Provider = new fhirCsR3.Models.Reference();
          Provider.DeserializeJson(ref reader, options);
          break;

        case "referral":
          Referral = new fhirCsR3.Models.Reference();
          Referral.DeserializeJson(ref reader, options);
          break;

        case "related":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Related = new List<ExplanationOfBenefitRelated>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExplanationOfBenefitRelated objRelated = new fhirCsR3.Models.ExplanationOfBenefitRelated();
            objRelated.DeserializeJson(ref reader, options);
            Related.Add(objRelated);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Related.Count == 0)
          {
            Related = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objSubType = new fhirCsR3.Models.CodeableConcept();
            objSubType.DeserializeJson(ref reader, options);
            SubType.Add(objSubType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubType.Count == 0)
          {
            SubType = null;
          }

          break;

        case "totalBenefit":
          TotalBenefit = new fhirCsR3.Models.Money();
          TotalBenefit.DeserializeJson(ref reader, options);
          break;

        case "totalCost":
          TotalCost = new fhirCsR3.Models.Money();
          TotalCost.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "unallocDeductable":
          UnallocDeductable = new fhirCsR3.Models.Money();
          UnallocDeductable.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ExplanationOfBenefit.status field
  /// </summary>
  public static class ExplanationOfBenefitStatusCodes {
    public const string ACTIVE = "active";
    public const string CANCELLED = "cancelled";
    public const string DRAFT = "draft";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
}
