// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// A description of a triggering event.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<TriggerDefinition>))]
  public class TriggerDefinition : Element,  IFhirJsonSerializable {
    /// <summary>
    /// The triggering data of the event (if this is a data trigger).
    /// </summary>
    public DataRequirement EventData { get; set; }
    /// <summary>
    /// The name of the event (if this is a named-event trigger).
    /// </summary>
    public string EventName { get; set; }
    /// <summary>
    /// Extension container element for EventName
    /// </summary>
    public Element _EventName { get; set; }
    /// <summary>
    /// The timing of the event (if this is a period trigger).
    /// </summary>
    public Timing EventTimingTiming { get; set; }
    /// <summary>
    /// The timing of the event (if this is a period trigger).
    /// </summary>
    public Reference EventTimingReference { get; set; }
    /// <summary>
    /// The timing of the event (if this is a period trigger).
    /// </summary>
    public string EventTimingDate { get; set; }
    /// <summary>
    /// Extension container element for EventTimingDate
    /// </summary>
    public Element _EventTimingDate { get; set; }
    /// <summary>
    /// The timing of the event (if this is a period trigger).
    /// </summary>
    public string EventTimingDateTime { get; set; }
    /// <summary>
    /// Extension container element for EventTimingDateTime
    /// </summary>
    public Element _EventTimingDateTime { get; set; }
    /// <summary>
    /// The type of triggering event.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.Element)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EventName))
      {
        writer.WriteString("eventName", (string)EventName!);
      }

      if (_EventName != null)
      {
        writer.WritePropertyName("_eventName");
        _EventName.SerializeJson(writer, options);
      }

      if (EventTimingTiming != null)
      {
        writer.WritePropertyName("eventTimingTiming");
        EventTimingTiming.SerializeJson(writer, options);
      }

      if (EventTimingReference != null)
      {
        writer.WritePropertyName("eventTimingReference");
        EventTimingReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EventTimingDate))
      {
        writer.WriteString("eventTimingDate", (string)EventTimingDate!);
      }

      if (_EventTimingDate != null)
      {
        writer.WritePropertyName("_eventTimingDate");
        _EventTimingDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EventTimingDateTime))
      {
        writer.WriteString("eventTimingDateTime", (string)EventTimingDateTime!);
      }

      if (_EventTimingDateTime != null)
      {
        writer.WritePropertyName("_eventTimingDateTime");
        _EventTimingDateTime.SerializeJson(writer, options);
      }

      if (EventData != null)
      {
        writer.WritePropertyName("eventData");
        EventData.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "eventData":
          EventData = new fhirCsR3.Models.DataRequirement();
          EventData.DeserializeJson(ref reader, options);
          break;

        case "eventName":
          EventName = reader.GetString();
          break;

        case "_eventName":
          _EventName = new fhirCsR3.Models.Element();
          _EventName.DeserializeJson(ref reader, options);
          break;

        case "eventTimingTiming":
          EventTimingTiming = new fhirCsR3.Models.Timing();
          EventTimingTiming.DeserializeJson(ref reader, options);
          break;

        case "eventTimingReference":
          EventTimingReference = new fhirCsR3.Models.Reference();
          EventTimingReference.DeserializeJson(ref reader, options);
          break;

        case "eventTimingDate":
          EventTimingDate = reader.GetString();
          break;

        case "_eventTimingDate":
          _EventTimingDate = new fhirCsR3.Models.Element();
          _EventTimingDate.DeserializeJson(ref reader, options);
          break;

        case "eventTimingDateTime":
          EventTimingDateTime = reader.GetString();
          break;

        case "_eventTimingDateTime":
          _EventTimingDateTime = new fhirCsR3.Models.Element();
          _EventTimingDateTime.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR3.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the TriggerDefinition.type field
  /// </summary>
  public static class TriggerDefinitionTypeCodes {
    public const string NAMED_EVENT = "named-event";
    public const string PERIODIC = "periodic";
    public const string DATA_ADDED = "data-added";
    public const string DATA_MODIFIED = "data-modified";
    public const string DATA_REMOVED = "data-removed";
    public const string DATA_ACCESSED = "data-accessed";
    public const string DATA_ACCESS_ENDED = "data-access-ended";
  }
}
