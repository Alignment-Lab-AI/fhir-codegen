// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// List of participants involved in the appointment.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<AppointmentParticipant>))]
  public class AppointmentParticipant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A Person, Location/HealthcareService or Device that is participating in the appointment.
    /// </summary>
    public Reference Actor { get; set; }
    /// <summary>
    /// Is this participant required to be present at the meeting. This covers a use-case where 2 doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.
    /// </summary>
    public string Required { get; set; }
    /// <summary>
    /// Extension container element for Required
    /// </summary>
    public Element _Required { get; set; }
    /// <summary>
    /// Participation status of the actor.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The role of the participant can be used to declare what the actor will be doing in the scope of this appointment.
    /// If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
    /// This value SHALL be the same when creating an AppointmentResponse so that they can be matched, and subsequently update the Appointment.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Actor != null)
      {
        writer.WritePropertyName("actor");
        Actor.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Required))
      {
        writer.WriteString("required", (string)Required!);
      }

      if (_Required != null)
      {
        writer.WritePropertyName("_required");
        _Required.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actor":
          Actor = new fhirCsR3.Models.Reference();
          Actor.DeserializeJson(ref reader, options);
          break;

        case "required":
          Required = reader.GetString();
          break;

        case "_required":
          _Required = new fhirCsR3.Models.Element();
          _Required.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objType = new fhirCsR3.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Appointment.participant.required field
  /// </summary>
  public static class AppointmentParticipantRequiredCodes {
    public const string REQUIRED = "required";
    public const string OPTIONAL = "optional";
    public const string INFORMATION_ONLY = "information-only";
  }
  /// <summary>
  /// Code Values for the Appointment.participant.status field
  /// </summary>
  public static class AppointmentParticipantStatusCodes {
    public const string ACCEPTED = "accepted";
    public const string DECLINED = "declined";
    public const string TENTATIVE = "tentative";
    public const string NEEDS_ACTION = "needs-action";
  }
  /// <summary>
  /// A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<Appointment>))]
  public class Appointment : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Appointment";
    /// <summary>
    /// The style of appointment or patient that has been booked in the slot (not service type).
    /// </summary>
    public CodeableConcept AppointmentType { get; set; }
    /// <summary>
    /// Additional text to aid in facilitating the appointment. For instance, a comment might be, "patient should proceed immediately to infusion room upon arrival"
    /// Where this is a planned appointment and the start/end dates are not set then this field can be used to provide additional guidance on the details of the appointment request, including any restrictions on when to book it.
    /// </summary>
    public string Comment { get; set; }
    /// <summary>
    /// Extension container element for Comment
    /// </summary>
    public Element _Comment { get; set; }
    /// <summary>
    /// This property is required for many use cases where the age of an appointment is considered in processing workflows for scheduling and billing of appointments.
    /// </summary>
    public string Created { get; set; }
    /// <summary>
    /// Extension container element for Created
    /// </summary>
    public Element _Created { get; set; }
    /// <summary>
    /// The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Date/Time that the appointment is to conclude.
    /// </summary>
    public string End { get; set; }
    /// <summary>
    /// Extension container element for End
    /// </summary>
    public Element _End { get; set; }
    /// <summary>
    /// This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The referral request this appointment is allocated to assess (incoming referral).
    /// </summary>
    public List<Reference> IncomingReferral { get; set; }
    /// <summary>
    /// Reason the appointment has been scheduled to take place, as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
    /// </summary>
    public List<Reference> Indication { get; set; }
    /// <summary>
    /// Number of minutes that the appointment is to take. This can be less than the duration between the start and end times (where actual time of appointment is only an estimate or is a planned appointment request).
    /// </summary>
    public uint? MinutesDuration { get; set; }
    /// <summary>
    /// List of participants involved in the appointment.
    /// </summary>
    public List<AppointmentParticipant> Participant { get; set; }
    /// <summary>
    /// Seeking implementer feedback on this property and how interoperable it is.
    /// Using an extension to record a codeableconcept for named values may be tested at a future connectathon.
    /// </summary>
    public uint? Priority { get; set; }
    /// <summary>
    /// The reason that this appointment is being scheduled. This is more clinical than administrative.
    /// </summary>
    public List<CodeableConcept> Reason { get; set; }
    /// <summary>
    /// This does not introduce a capacity for recurring appointments.
    /// </summary>
    public List<Period> RequestedPeriod { get; set; }
    /// <summary>
    /// A broad categorisation of the service that is to be performed during this appointment.
    /// </summary>
    public CodeableConcept ServiceCategory { get; set; }
    /// <summary>
    /// The specific service that is to be performed during this appointment.
    /// </summary>
    public List<CodeableConcept> ServiceType { get; set; }
    /// <summary>
    /// The slots from the participants' schedules that will be filled by the appointment.
    /// </summary>
    public List<Reference> Slot { get; set; }
    /// <summary>
    /// The specialty of a practitioner that would be required to perform the service requested in this appointment.
    /// </summary>
    public List<CodeableConcept> Specialty { get; set; }
    /// <summary>
    /// Date/Time that the appointment is to take place.
    /// </summary>
    public string Start { get; set; }
    /// <summary>
    /// Extension container element for Start
    /// </summary>
    public Element _Start { get; set; }
    /// <summary>
    /// If the Appointment's status is "cancelled" then all participants are expected to have their calendars released for the appointment period, and as such any Slots that were marked as BUSY can be re-set to FREE.
    /// This element is labeled as a modifier because the status contains the code entered-in-error that mark the Appointment as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Additional information to support the appointment provided when making the appointment.
    /// </summary>
    public List<Reference> SupportingInformation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (ServiceCategory != null)
      {
        writer.WritePropertyName("serviceCategory");
        ServiceCategory.SerializeJson(writer, options);
      }

      if ((ServiceType != null) && (ServiceType.Count != 0))
      {
        writer.WritePropertyName("serviceType");
        writer.WriteStartArray();

        foreach (CodeableConcept valServiceType in ServiceType)
        {
          valServiceType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Specialty != null) && (Specialty.Count != 0))
      {
        writer.WritePropertyName("specialty");
        writer.WriteStartArray();

        foreach (CodeableConcept valSpecialty in Specialty)
        {
          valSpecialty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (AppointmentType != null)
      {
        writer.WritePropertyName("appointmentType");
        AppointmentType.SerializeJson(writer, options);
      }

      if ((Reason != null) && (Reason.Count != 0))
      {
        writer.WritePropertyName("reason");
        writer.WriteStartArray();

        foreach (CodeableConcept valReason in Reason)
        {
          valReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Indication != null) && (Indication.Count != 0))
      {
        writer.WritePropertyName("indication");
        writer.WriteStartArray();

        foreach (Reference valIndication in Indication)
        {
          valIndication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Priority != null)
      {
        writer.WriteNumber("priority", (uint)Priority!);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((SupportingInformation != null) && (SupportingInformation.Count != 0))
      {
        writer.WritePropertyName("supportingInformation");
        writer.WriteStartArray();

        foreach (Reference valSupportingInformation in SupportingInformation)
        {
          valSupportingInformation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Start))
      {
        writer.WriteString("start", (string)Start!);
      }

      if (_Start != null)
      {
        writer.WritePropertyName("_start");
        _Start.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(End))
      {
        writer.WriteString("end", (string)End!);
      }

      if (_End != null)
      {
        writer.WritePropertyName("_end");
        _End.SerializeJson(writer, options);
      }

      if (MinutesDuration != null)
      {
        writer.WriteNumber("minutesDuration", (uint)MinutesDuration!);
      }

      if ((Slot != null) && (Slot.Count != 0))
      {
        writer.WritePropertyName("slot");
        writer.WriteStartArray();

        foreach (Reference valSlot in Slot)
        {
          valSlot.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Created))
      {
        writer.WriteString("created", (string)Created!);
      }

      if (_Created != null)
      {
        writer.WritePropertyName("_created");
        _Created.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Comment))
      {
        writer.WriteString("comment", (string)Comment!);
      }

      if (_Comment != null)
      {
        writer.WritePropertyName("_comment");
        _Comment.SerializeJson(writer, options);
      }

      if ((IncomingReferral != null) && (IncomingReferral.Count != 0))
      {
        writer.WritePropertyName("incomingReferral");
        writer.WriteStartArray();

        foreach (Reference valIncomingReferral in IncomingReferral)
        {
          valIncomingReferral.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Participant != null) && (Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();

        foreach (AppointmentParticipant valParticipant in Participant)
        {
          valParticipant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RequestedPeriod != null) && (RequestedPeriod.Count != 0))
      {
        writer.WritePropertyName("requestedPeriod");
        writer.WriteStartArray();

        foreach (Period valRequestedPeriod in RequestedPeriod)
        {
          valRequestedPeriod.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "appointmentType":
          AppointmentType = new fhirCsR3.Models.CodeableConcept();
          AppointmentType.DeserializeJson(ref reader, options);
          break;

        case "comment":
          Comment = reader.GetString();
          break;

        case "_comment":
          _Comment = new fhirCsR3.Models.Element();
          _Comment.DeserializeJson(ref reader, options);
          break;

        case "created":
          Created = reader.GetString();
          break;

        case "_created":
          _Created = new fhirCsR3.Models.Element();
          _Created.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "end":
          End = reader.GetString();
          break;

        case "_end":
          _End = new fhirCsR3.Models.Element();
          _End.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Identifier objIdentifier = new fhirCsR3.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "incomingReferral":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          IncomingReferral = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objIncomingReferral = new fhirCsR3.Models.Reference();
            objIncomingReferral.DeserializeJson(ref reader, options);
            IncomingReferral.Add(objIncomingReferral);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (IncomingReferral.Count == 0)
          {
            IncomingReferral = null;
          }

          break;

        case "indication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Indication = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objIndication = new fhirCsR3.Models.Reference();
            objIndication.DeserializeJson(ref reader, options);
            Indication.Add(objIndication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Indication.Count == 0)
          {
            Indication = null;
          }

          break;

        case "minutesDuration":
          MinutesDuration = reader.GetUInt32();
          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Participant = new List<AppointmentParticipant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.AppointmentParticipant objParticipant = new fhirCsR3.Models.AppointmentParticipant();
            objParticipant.DeserializeJson(ref reader, options);
            Participant.Add(objParticipant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Participant.Count == 0)
          {
            Participant = null;
          }

          break;

        case "priority":
          Priority = reader.GetUInt32();
          break;

        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objReason = new fhirCsR3.Models.CodeableConcept();
            objReason.DeserializeJson(ref reader, options);
            Reason.Add(objReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reason.Count == 0)
          {
            Reason = null;
          }

          break;

        case "requestedPeriod":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RequestedPeriod = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Period objRequestedPeriod = new fhirCsR3.Models.Period();
            objRequestedPeriod.DeserializeJson(ref reader, options);
            RequestedPeriod.Add(objRequestedPeriod);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RequestedPeriod.Count == 0)
          {
            RequestedPeriod = null;
          }

          break;

        case "serviceCategory":
          ServiceCategory = new fhirCsR3.Models.CodeableConcept();
          ServiceCategory.DeserializeJson(ref reader, options);
          break;

        case "serviceType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ServiceType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objServiceType = new fhirCsR3.Models.CodeableConcept();
            objServiceType.DeserializeJson(ref reader, options);
            ServiceType.Add(objServiceType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ServiceType.Count == 0)
          {
            ServiceType = null;
          }

          break;

        case "slot":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Slot = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objSlot = new fhirCsR3.Models.Reference();
            objSlot.DeserializeJson(ref reader, options);
            Slot.Add(objSlot);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Slot.Count == 0)
          {
            Slot = null;
          }

          break;

        case "specialty":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Specialty = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objSpecialty = new fhirCsR3.Models.CodeableConcept();
            objSpecialty.DeserializeJson(ref reader, options);
            Specialty.Add(objSpecialty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Specialty.Count == 0)
          {
            Specialty = null;
          }

          break;

        case "start":
          Start = reader.GetString();
          break;

        case "_start":
          _Start = new fhirCsR3.Models.Element();
          _Start.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "supportingInformation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportingInformation = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objSupportingInformation = new fhirCsR3.Models.Reference();
            objSupportingInformation.DeserializeJson(ref reader, options);
            SupportingInformation.Add(objSupportingInformation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportingInformation.Count == 0)
          {
            SupportingInformation = null;
          }

          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Appointment.status field
  /// </summary>
  public static class AppointmentStatusCodes {
    public const string PROPOSED = "proposed";
    public const string PENDING = "pending";
    public const string BOOKED = "booked";
    public const string ARRIVED = "arrived";
    public const string FULFILLED = "fulfilled";
    public const string CANCELLED = "cancelled";
    public const string NOSHOW = "noshow";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
}
