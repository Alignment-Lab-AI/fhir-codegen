// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// If none of the conditions listed have an outcome of "death" specified, that indicates that none of the specified conditions are known to have been the primary cause of death.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<FamilyMemberHistoryCondition>))]
  public class FamilyMemberHistoryCondition : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// An area where general notes can be placed about this specific condition.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
    /// </summary>
    public Age OnsetAge { get; set; }
    /// <summary>
    /// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
    /// </summary>
    public Range OnsetRange { get; set; }
    /// <summary>
    /// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
    /// </summary>
    public Period OnsetPeriod { get; set; }
    /// <summary>
    /// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
    /// </summary>
    public string OnsetString { get; set; }
    /// <summary>
    /// Extension container element for OnsetString
    /// </summary>
    public Element _OnsetString { get; set; }
    /// <summary>
    /// Indicates what happened as a result of this condition.  If the condition resulted in death, deceased date is captured on the relation.
    /// </summary>
    public CodeableConcept Outcome { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Outcome != null)
      {
        writer.WritePropertyName("outcome");
        Outcome.SerializeJson(writer, options);
      }

      if (OnsetAge != null)
      {
        writer.WritePropertyName("onsetAge");
        OnsetAge.SerializeJson(writer, options);
      }

      if (OnsetRange != null)
      {
        writer.WritePropertyName("onsetRange");
        OnsetRange.SerializeJson(writer, options);
      }

      if (OnsetPeriod != null)
      {
        writer.WritePropertyName("onsetPeriod");
        OnsetPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(OnsetString))
      {
        writer.WriteString("onsetString", (string)OnsetString!);
      }

      if (_OnsetString != null)
      {
        writer.WritePropertyName("_onsetString");
        _OnsetString.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR3.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Annotation objNote = new fhirCsR3.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "onsetAge":
          OnsetAge = new fhirCsR3.Models.Age();
          OnsetAge.DeserializeJson(ref reader, options);
          break;

        case "onsetRange":
          OnsetRange = new fhirCsR3.Models.Range();
          OnsetRange.DeserializeJson(ref reader, options);
          break;

        case "onsetPeriod":
          OnsetPeriod = new fhirCsR3.Models.Period();
          OnsetPeriod.DeserializeJson(ref reader, options);
          break;

        case "onsetString":
          OnsetString = reader.GetString();
          break;

        case "_onsetString":
          _OnsetString = new fhirCsR3.Models.Element();
          _OnsetString.DeserializeJson(ref reader, options);
          break;

        case "outcome":
          Outcome = new fhirCsR3.Models.CodeableConcept();
          Outcome.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<FamilyMemberHistory>))]
  public class FamilyMemberHistory : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "FamilyMemberHistory";
    /// <summary>
    /// use estimatedAge to indicate whether the age is actual or not.
    /// </summary>
    public Age AgeAge { get; set; }
    /// <summary>
    /// use estimatedAge to indicate whether the age is actual or not.
    /// </summary>
    public Range AgeRange { get; set; }
    /// <summary>
    /// use estimatedAge to indicate whether the age is actual or not.
    /// </summary>
    public string AgeString { get; set; }
    /// <summary>
    /// Extension container element for AgeString
    /// </summary>
    public Element _AgeString { get; set; }
    /// <summary>
    /// The actual or approximate date of birth of the relative.
    /// </summary>
    public Period BornPeriod { get; set; }
    /// <summary>
    /// The actual or approximate date of birth of the relative.
    /// </summary>
    public string BornDate { get; set; }
    /// <summary>
    /// Extension container element for BornDate
    /// </summary>
    public Element _BornDate { get; set; }
    /// <summary>
    /// The actual or approximate date of birth of the relative.
    /// </summary>
    public string BornString { get; set; }
    /// <summary>
    /// Extension container element for BornString
    /// </summary>
    public Element _BornString { get; set; }
    /// <summary>
    /// If none of the conditions listed have an outcome of "death" specified, that indicates that none of the specified conditions are known to have been the primary cause of death.
    /// </summary>
    public List<FamilyMemberHistoryCondition> Condition { get; set; }
    /// <summary>
    /// This should be captured even if the same as the date on the List aggregating the full family history.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    public bool? DeceasedBoolean { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    public Age DeceasedAge { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    public Range DeceasedRange { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    public string DeceasedDate { get; set; }
    /// <summary>
    /// Extension container element for DeceasedDate
    /// </summary>
    public Element _DeceasedDate { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    public string DeceasedString { get; set; }
    /// <summary>
    /// Extension container element for DeceasedString
    /// </summary>
    public Element _DeceasedString { get; set; }
    /// <summary>
    /// A protocol or questionnaire that was adhered to in whole or in part by this event.
    /// </summary>
    public List<Reference> Definition { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the fact tha age is estimated can/should change the results of any algorithm that calculates based on the specified age.
    /// </summary>
    public bool? EstimatedAge { get; set; }
    /// <summary>
    /// Administrative Gender - the gender that the relative is considered to have for administration and record keeping purposes.
    /// </summary>
    public string Gender { get; set; }
    /// <summary>
    /// Extension container element for Gender
    /// </summary>
    public Element _Gender { get; set; }
    /// <summary>
    /// This records identifiers associated with this family member history record that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair".
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because it marks the family member history as a family member history that did not occur.  The more attributes are populated, the more constrained the negated statement is.  This notDone element is being evaluated and will likely be removed in a subsequent release.
    /// </summary>
    public bool? NotDone { get; set; }
    /// <summary>
    /// This notDoneReason element is being evaluated and will likely be replaced in a subsequent release (e.g. dataAbsentReason).
    /// </summary>
    public CodeableConcept NotDoneReason { get; set; }
    /// <summary>
    /// This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// The person who this history concerns.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// Textual reasons can be caprued using reasonCode.text.
    /// </summary>
    public List<CodeableConcept> ReasonCode { get; set; }
    /// <summary>
    /// Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event.
    /// </summary>
    public List<Reference> ReasonReference { get; set; }
    /// <summary>
    /// The type of relationship this person has to the patient (father, mother, brother etc.).
    /// </summary>
    public CodeableConcept Relationship { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Definition != null) && (Definition.Count != 0))
      {
        writer.WritePropertyName("definition");
        writer.WriteStartArray();

        foreach (Reference valDefinition in Definition)
        {
          valDefinition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (NotDone != null)
      {
        writer.WriteBoolean("notDone", (bool)NotDone!);
      }

      if (NotDoneReason != null)
      {
        writer.WritePropertyName("notDoneReason");
        NotDoneReason.SerializeJson(writer, options);
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (Relationship != null)
      {
        writer.WritePropertyName("relationship");
        Relationship.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Gender))
      {
        writer.WriteString("gender", (string)Gender!);
      }

      if (_Gender != null)
      {
        writer.WritePropertyName("_gender");
        _Gender.SerializeJson(writer, options);
      }

      if (BornPeriod != null)
      {
        writer.WritePropertyName("bornPeriod");
        BornPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(BornDate))
      {
        writer.WriteString("bornDate", (string)BornDate!);
      }

      if (_BornDate != null)
      {
        writer.WritePropertyName("_bornDate");
        _BornDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(BornString))
      {
        writer.WriteString("bornString", (string)BornString!);
      }

      if (_BornString != null)
      {
        writer.WritePropertyName("_bornString");
        _BornString.SerializeJson(writer, options);
      }

      if (AgeAge != null)
      {
        writer.WritePropertyName("ageAge");
        AgeAge.SerializeJson(writer, options);
      }

      if (AgeRange != null)
      {
        writer.WritePropertyName("ageRange");
        AgeRange.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AgeString))
      {
        writer.WriteString("ageString", (string)AgeString!);
      }

      if (_AgeString != null)
      {
        writer.WritePropertyName("_ageString");
        _AgeString.SerializeJson(writer, options);
      }

      if (EstimatedAge != null)
      {
        writer.WriteBoolean("estimatedAge", (bool)EstimatedAge!);
      }

      if (DeceasedBoolean != null)
      {
        writer.WriteBoolean("deceasedBoolean", (bool)DeceasedBoolean!);
      }

      if (DeceasedAge != null)
      {
        writer.WritePropertyName("deceasedAge");
        DeceasedAge.SerializeJson(writer, options);
      }

      if (DeceasedRange != null)
      {
        writer.WritePropertyName("deceasedRange");
        DeceasedRange.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DeceasedDate))
      {
        writer.WriteString("deceasedDate", (string)DeceasedDate!);
      }

      if (_DeceasedDate != null)
      {
        writer.WritePropertyName("_deceasedDate");
        _DeceasedDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DeceasedString))
      {
        writer.WriteString("deceasedString", (string)DeceasedString!);
      }

      if (_DeceasedString != null)
      {
        writer.WritePropertyName("_deceasedString");
        _DeceasedString.SerializeJson(writer, options);
      }

      if ((ReasonCode != null) && (ReasonCode.Count != 0))
      {
        writer.WritePropertyName("reasonCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valReasonCode in ReasonCode)
        {
          valReasonCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ReasonReference != null) && (ReasonReference.Count != 0))
      {
        writer.WritePropertyName("reasonReference");
        writer.WriteStartArray();

        foreach (Reference valReasonReference in ReasonReference)
        {
          valReasonReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Condition != null) && (Condition.Count != 0))
      {
        writer.WritePropertyName("condition");
        writer.WriteStartArray();

        foreach (FamilyMemberHistoryCondition valCondition in Condition)
        {
          valCondition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "ageAge":
          AgeAge = new fhirCsR3.Models.Age();
          AgeAge.DeserializeJson(ref reader, options);
          break;

        case "ageRange":
          AgeRange = new fhirCsR3.Models.Range();
          AgeRange.DeserializeJson(ref reader, options);
          break;

        case "ageString":
          AgeString = reader.GetString();
          break;

        case "_ageString":
          _AgeString = new fhirCsR3.Models.Element();
          _AgeString.DeserializeJson(ref reader, options);
          break;

        case "bornPeriod":
          BornPeriod = new fhirCsR3.Models.Period();
          BornPeriod.DeserializeJson(ref reader, options);
          break;

        case "bornDate":
          BornDate = reader.GetString();
          break;

        case "_bornDate":
          _BornDate = new fhirCsR3.Models.Element();
          _BornDate.DeserializeJson(ref reader, options);
          break;

        case "bornString":
          BornString = reader.GetString();
          break;

        case "_bornString":
          _BornString = new fhirCsR3.Models.Element();
          _BornString.DeserializeJson(ref reader, options);
          break;

        case "condition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Condition = new List<FamilyMemberHistoryCondition>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.FamilyMemberHistoryCondition objCondition = new fhirCsR3.Models.FamilyMemberHistoryCondition();
            objCondition.DeserializeJson(ref reader, options);
            Condition.Add(objCondition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Condition.Count == 0)
          {
            Condition = null;
          }

          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR3.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "deceasedBoolean":
          DeceasedBoolean = reader.GetBoolean();
          break;

        case "deceasedAge":
          DeceasedAge = new fhirCsR3.Models.Age();
          DeceasedAge.DeserializeJson(ref reader, options);
          break;

        case "deceasedRange":
          DeceasedRange = new fhirCsR3.Models.Range();
          DeceasedRange.DeserializeJson(ref reader, options);
          break;

        case "deceasedDate":
          DeceasedDate = reader.GetString();
          break;

        case "_deceasedDate":
          _DeceasedDate = new fhirCsR3.Models.Element();
          _DeceasedDate.DeserializeJson(ref reader, options);
          break;

        case "deceasedString":
          DeceasedString = reader.GetString();
          break;

        case "_deceasedString":
          _DeceasedString = new fhirCsR3.Models.Element();
          _DeceasedString.DeserializeJson(ref reader, options);
          break;

        case "definition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Definition = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objDefinition = new fhirCsR3.Models.Reference();
            objDefinition.DeserializeJson(ref reader, options);
            Definition.Add(objDefinition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Definition.Count == 0)
          {
            Definition = null;
          }

          break;

        case "estimatedAge":
          EstimatedAge = reader.GetBoolean();
          break;

        case "gender":
          Gender = reader.GetString();
          break;

        case "_gender":
          _Gender = new fhirCsR3.Models.Element();
          _Gender.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Identifier objIdentifier = new fhirCsR3.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR3.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "notDone":
          NotDone = reader.GetBoolean();
          break;

        case "notDoneReason":
          NotDoneReason = new fhirCsR3.Models.CodeableConcept();
          NotDoneReason.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Annotation objNote = new fhirCsR3.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "patient":
          Patient = new fhirCsR3.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "reasonCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objReasonCode = new fhirCsR3.Models.CodeableConcept();
            objReasonCode.DeserializeJson(ref reader, options);
            ReasonCode.Add(objReasonCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonCode.Count == 0)
          {
            ReasonCode = null;
          }

          break;

        case "reasonReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonReference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objReasonReference = new fhirCsR3.Models.Reference();
            objReasonReference.DeserializeJson(ref reader, options);
            ReasonReference.Add(objReasonReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonReference.Count == 0)
          {
            ReasonReference = null;
          }

          break;

        case "relationship":
          Relationship = new fhirCsR3.Models.CodeableConcept();
          Relationship.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the FamilyMemberHistory.gender field
  /// </summary>
  public static class FamilyMemberHistoryGenderCodes {
    public const string MALE = "male";
    public const string FEMALE = "female";
    public const string OTHER = "other";
    public const string UNKNOWN = "unknown";
  }
  /// <summary>
  /// Code Values for the FamilyMemberHistory.status field
  /// </summary>
  public static class FamilyMemberHistoryStatusCodes {
    public const string PARTIAL = "partial";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string HEALTH_UNKNOWN = "health-unknown";
  }
}
