// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// Clinical stage or grade of a condition. May include formal severity assessments.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ConditionStage>))]
  public class ConditionStage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Reference to a formal record of the evidence on which the staging assessment is based.
    /// </summary>
    public List<Reference> Assessment { get; set; }
    /// <summary>
    /// A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
    /// </summary>
    public CodeableConcept Summary { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Summary != null)
      {
        writer.WritePropertyName("summary");
        Summary.SerializeJson(writer, options);
      }

      if ((Assessment != null) && (Assessment.Count != 0))
      {
        writer.WritePropertyName("assessment");
        writer.WriteStartArray();

        foreach (Reference valAssessment in Assessment)
        {
          valAssessment.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "assessment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Assessment = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objAssessment = new fhirCsR3.Models.Reference();
            objAssessment.DeserializeJson(ref reader, options);
            Assessment.Add(objAssessment);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Assessment.Count == 0)
          {
            Assessment = null;
          }

          break;

        case "summary":
          Summary = new fhirCsR3.Models.CodeableConcept();
          Summary.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ConditionEvidence>))]
  public class ConditionEvidence : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A manifestation or symptom that led to the recording of this condition.
    /// </summary>
    public List<CodeableConcept> Code { get; set; }
    /// <summary>
    /// Links to other relevant information, including pathology reports.
    /// </summary>
    public List<Reference> Detail { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (CodeableConcept valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (Reference valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objCode = new fhirCsR3.Models.CodeableConcept();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objDetail = new fhirCsR3.Models.Reference();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<Condition>))]
  public class Condition : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Condition";
    /// <summary>
    /// There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
    /// </summary>
    public string AbatementDateTime { get; set; }
    /// <summary>
    /// Extension container element for AbatementDateTime
    /// </summary>
    public Element _AbatementDateTime { get; set; }
    /// <summary>
    /// There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
    /// </summary>
    public Age AbatementAge { get; set; }
    /// <summary>
    /// There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
    /// </summary>
    public bool? AbatementBoolean { get; set; }
    /// <summary>
    /// Extension container element for AbatementBoolean
    /// </summary>
    public Element _AbatementBoolean { get; set; }
    /// <summary>
    /// There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
    /// </summary>
    public Period AbatementPeriod { get; set; }
    /// <summary>
    /// There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
    /// </summary>
    public Range AbatementRange { get; set; }
    /// <summary>
    /// There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
    /// </summary>
    public string AbatementString { get; set; }
    /// <summary>
    /// Extension container element for AbatementString
    /// </summary>
    public Element _AbatementString { get; set; }
    /// <summary>
    /// The assertedDate represents the date when this particular Condition record was created in the EHR, not the date of the most recent update in terms of when severity, abatement, etc. were specified.  The date of the last record modification can be retrieved from the resource metadata.
    /// </summary>
    public string AssertedDate { get; set; }
    /// <summary>
    /// Extension container element for AssertedDate
    /// </summary>
    public Element _AssertedDate { get; set; }
    /// <summary>
    /// Individual who is making the condition statement.
    /// </summary>
    public Reference Asserter { get; set; }
    /// <summary>
    /// Only used if not implicit in code found in Condition.code. If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [body-site-instance](extension-body-site-instance.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
    /// </summary>
    public List<CodeableConcept> BodySite { get; set; }
    /// <summary>
    /// The categorization is often highly contextual and may appear poorly differentiated or not very useful in other contexts.
    /// </summary>
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the condition as not currently valid or of concern.
    /// </summary>
    public string ClinicalStatus { get; set; }
    /// <summary>
    /// Extension container element for ClinicalStatus
    /// </summary>
    public Element _ClinicalStatus { get; set; }
    /// <summary>
    /// Identification of the condition, problem or diagnosis.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// This record indicates the encounter this particular record is associated with.  In the case of a "new" diagnosis reflecting ongoing/revised information about the condition, this might be distinct from the first encounter in which the underlying condition was first "known".
    /// </summary>
    public Reference Context { get; set; }
    /// <summary>
    /// The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.
    /// </summary>
    public List<ConditionEvidence> Evidence { get; set; }
    /// <summary>
    /// This records identifiers associated with this condition that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Age is generally used when the patient reports an age at which the Condition began to occur.
    /// </summary>
    public string OnsetDateTime { get; set; }
    /// <summary>
    /// Extension container element for OnsetDateTime
    /// </summary>
    public Element _OnsetDateTime { get; set; }
    /// <summary>
    /// Age is generally used when the patient reports an age at which the Condition began to occur.
    /// </summary>
    public Age OnsetAge { get; set; }
    /// <summary>
    /// Age is generally used when the patient reports an age at which the Condition began to occur.
    /// </summary>
    public Period OnsetPeriod { get; set; }
    /// <summary>
    /// Age is generally used when the patient reports an age at which the Condition began to occur.
    /// </summary>
    public Range OnsetRange { get; set; }
    /// <summary>
    /// Age is generally used when the patient reports an age at which the Condition began to occur.
    /// </summary>
    public string OnsetString { get; set; }
    /// <summary>
    /// Extension container element for OnsetString
    /// </summary>
    public Element _OnsetString { get; set; }
    /// <summary>
    /// Coding of the severity with a terminology is preferred, where possible.
    /// </summary>
    public CodeableConcept Severity { get; set; }
    /// <summary>
    /// Clinical stage or grade of a condition. May include formal severity assessments.
    /// </summary>
    public ConditionStage Stage { get; set; }
    /// <summary>
    /// Indicates the patient or group who the condition record is associated with.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// verificationStatus is not required.  For example, when a patient has abdominal pain in the ED, there is not likely going to be a verification status.
    /// This element is labeled as a modifier because the status contains the code refuted and entered-in-error that mark the Condition as not currently valid.
    /// </summary>
    public string VerificationStatus { get; set; }
    /// <summary>
    /// Extension container element for VerificationStatus
    /// </summary>
    public Element _VerificationStatus { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ClinicalStatus))
      {
        writer.WriteString("clinicalStatus", (string)ClinicalStatus!);
      }

      if (_ClinicalStatus != null)
      {
        writer.WritePropertyName("_clinicalStatus");
        _ClinicalStatus.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(VerificationStatus))
      {
        writer.WriteString("verificationStatus", (string)VerificationStatus!);
      }

      if (_VerificationStatus != null)
      {
        writer.WritePropertyName("_verificationStatus");
        _VerificationStatus.SerializeJson(writer, options);
      }

      if ((Category != null) && (Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();

        foreach (CodeableConcept valCategory in Category)
        {
          valCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Severity != null)
      {
        writer.WritePropertyName("severity");
        Severity.SerializeJson(writer, options);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if ((BodySite != null) && (BodySite.Count != 0))
      {
        writer.WritePropertyName("bodySite");
        writer.WriteStartArray();

        foreach (CodeableConcept valBodySite in BodySite)
        {
          valBodySite.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (Context != null)
      {
        writer.WritePropertyName("context");
        Context.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(OnsetDateTime))
      {
        writer.WriteString("onsetDateTime", (string)OnsetDateTime!);
      }

      if (_OnsetDateTime != null)
      {
        writer.WritePropertyName("_onsetDateTime");
        _OnsetDateTime.SerializeJson(writer, options);
      }

      if (OnsetAge != null)
      {
        writer.WritePropertyName("onsetAge");
        OnsetAge.SerializeJson(writer, options);
      }

      if (OnsetPeriod != null)
      {
        writer.WritePropertyName("onsetPeriod");
        OnsetPeriod.SerializeJson(writer, options);
      }

      if (OnsetRange != null)
      {
        writer.WritePropertyName("onsetRange");
        OnsetRange.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(OnsetString))
      {
        writer.WriteString("onsetString", (string)OnsetString!);
      }

      if (_OnsetString != null)
      {
        writer.WritePropertyName("_onsetString");
        _OnsetString.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AbatementDateTime))
      {
        writer.WriteString("abatementDateTime", (string)AbatementDateTime!);
      }

      if (_AbatementDateTime != null)
      {
        writer.WritePropertyName("_abatementDateTime");
        _AbatementDateTime.SerializeJson(writer, options);
      }

      if (AbatementAge != null)
      {
        writer.WritePropertyName("abatementAge");
        AbatementAge.SerializeJson(writer, options);
      }

      if (AbatementBoolean != null)
      {
        writer.WriteBoolean("abatementBoolean", (bool)AbatementBoolean!);
      }

      if (_AbatementBoolean != null)
      {
        writer.WritePropertyName("_abatementBoolean");
        _AbatementBoolean.SerializeJson(writer, options);
      }

      if (AbatementPeriod != null)
      {
        writer.WritePropertyName("abatementPeriod");
        AbatementPeriod.SerializeJson(writer, options);
      }

      if (AbatementRange != null)
      {
        writer.WritePropertyName("abatementRange");
        AbatementRange.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AbatementString))
      {
        writer.WriteString("abatementString", (string)AbatementString!);
      }

      if (_AbatementString != null)
      {
        writer.WritePropertyName("_abatementString");
        _AbatementString.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AssertedDate))
      {
        writer.WriteString("assertedDate", (string)AssertedDate!);
      }

      if (_AssertedDate != null)
      {
        writer.WritePropertyName("_assertedDate");
        _AssertedDate.SerializeJson(writer, options);
      }

      if (Asserter != null)
      {
        writer.WritePropertyName("asserter");
        Asserter.SerializeJson(writer, options);
      }

      if (Stage != null)
      {
        writer.WritePropertyName("stage");
        Stage.SerializeJson(writer, options);
      }

      if ((Evidence != null) && (Evidence.Count != 0))
      {
        writer.WritePropertyName("evidence");
        writer.WriteStartArray();

        foreach (ConditionEvidence valEvidence in Evidence)
        {
          valEvidence.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "abatementDateTime":
          AbatementDateTime = reader.GetString();
          break;

        case "_abatementDateTime":
          _AbatementDateTime = new fhirCsR3.Models.Element();
          _AbatementDateTime.DeserializeJson(ref reader, options);
          break;

        case "abatementAge":
          AbatementAge = new fhirCsR3.Models.Age();
          AbatementAge.DeserializeJson(ref reader, options);
          break;

        case "abatementBoolean":
          AbatementBoolean = reader.GetBoolean();
          break;

        case "_abatementBoolean":
          _AbatementBoolean = new fhirCsR3.Models.Element();
          _AbatementBoolean.DeserializeJson(ref reader, options);
          break;

        case "abatementPeriod":
          AbatementPeriod = new fhirCsR3.Models.Period();
          AbatementPeriod.DeserializeJson(ref reader, options);
          break;

        case "abatementRange":
          AbatementRange = new fhirCsR3.Models.Range();
          AbatementRange.DeserializeJson(ref reader, options);
          break;

        case "abatementString":
          AbatementString = reader.GetString();
          break;

        case "_abatementString":
          _AbatementString = new fhirCsR3.Models.Element();
          _AbatementString.DeserializeJson(ref reader, options);
          break;

        case "assertedDate":
          AssertedDate = reader.GetString();
          break;

        case "_assertedDate":
          _AssertedDate = new fhirCsR3.Models.Element();
          _AssertedDate.DeserializeJson(ref reader, options);
          break;

        case "asserter":
          Asserter = new fhirCsR3.Models.Reference();
          Asserter.DeserializeJson(ref reader, options);
          break;

        case "bodySite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BodySite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objBodySite = new fhirCsR3.Models.CodeableConcept();
            objBodySite.DeserializeJson(ref reader, options);
            BodySite.Add(objBodySite);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BodySite.Count == 0)
          {
            BodySite = null;
          }

          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objCategory = new fhirCsR3.Models.CodeableConcept();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "clinicalStatus":
          ClinicalStatus = reader.GetString();
          break;

        case "_clinicalStatus":
          _ClinicalStatus = new fhirCsR3.Models.Element();
          _ClinicalStatus.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR3.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "context":
          Context = new fhirCsR3.Models.Reference();
          Context.DeserializeJson(ref reader, options);
          break;

        case "evidence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Evidence = new List<ConditionEvidence>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ConditionEvidence objEvidence = new fhirCsR3.Models.ConditionEvidence();
            objEvidence.DeserializeJson(ref reader, options);
            Evidence.Add(objEvidence);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Evidence.Count == 0)
          {
            Evidence = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Identifier objIdentifier = new fhirCsR3.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Annotation objNote = new fhirCsR3.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "onsetDateTime":
          OnsetDateTime = reader.GetString();
          break;

        case "_onsetDateTime":
          _OnsetDateTime = new fhirCsR3.Models.Element();
          _OnsetDateTime.DeserializeJson(ref reader, options);
          break;

        case "onsetAge":
          OnsetAge = new fhirCsR3.Models.Age();
          OnsetAge.DeserializeJson(ref reader, options);
          break;

        case "onsetPeriod":
          OnsetPeriod = new fhirCsR3.Models.Period();
          OnsetPeriod.DeserializeJson(ref reader, options);
          break;

        case "onsetRange":
          OnsetRange = new fhirCsR3.Models.Range();
          OnsetRange.DeserializeJson(ref reader, options);
          break;

        case "onsetString":
          OnsetString = reader.GetString();
          break;

        case "_onsetString":
          _OnsetString = new fhirCsR3.Models.Element();
          _OnsetString.DeserializeJson(ref reader, options);
          break;

        case "severity":
          Severity = new fhirCsR3.Models.CodeableConcept();
          Severity.DeserializeJson(ref reader, options);
          break;

        case "stage":
          Stage = new fhirCsR3.Models.ConditionStage();
          Stage.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR3.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "verificationStatus":
          VerificationStatus = reader.GetString();
          break;

        case "_verificationStatus":
          _VerificationStatus = new fhirCsR3.Models.Element();
          _VerificationStatus.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Condition.clinicalStatus field
  /// </summary>
  public static class ConditionClinicalStatusCodes {
    public const string ACTIVE = "active";
    public const string RECURRENCE = "recurrence";
    public const string INACTIVE = "inactive";
    public const string REMISSION = "remission";
    public const string RESOLVED = "resolved";
    public static HashSet<string> Values = new HashSet<string>() {
      "active",
      "recurrence",
      "inactive",
      "remission",
      "resolved",
    };
  }
  /// <summary>
  /// Code Values for the Condition.verificationStatus field
  /// </summary>
  public static class ConditionVerificationStatusCodes {
    public const string PROVISIONAL = "provisional";
    public const string DIFFERENTIAL = "differential";
    public const string CONFIRMED = "confirmed";
    public const string REFUTED = "refuted";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "provisional",
      "differential",
      "confirmed",
      "refuted",
      "entered-in-error",
      "unknown",
    };
  }
}
