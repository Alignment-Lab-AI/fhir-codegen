// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// Who or what is controlled by this consent. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ConsentActor>))]
  public class ConsentActor : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The resource that identifies the actor. To identify a actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// How the individual is involved in the resources content that is described in the consent.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          Reference = new fhirCsR3.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = new fhirCsR3.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ConsentPolicy>))]
  public class ConsentPolicy : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Entity or Organization having regulatory jurisdiction or accountability for Â enforcing policies pertaining to Consent Directives.
    /// </summary>
    public string Authority { get; set; }
    /// <summary>
    /// Extension container element for Authority
    /// </summary>
    public Element _Authority { get; set; }
    /// <summary>
    /// This element is for discoverability / documentation, and does not modify or qualify the policy rules.
    /// </summary>
    public string Uri { get; set; }
    /// <summary>
    /// Extension container element for Uri
    /// </summary>
    public Element _Uri { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Authority))
      {
        writer.WriteString("authority", (string)Authority!);
      }

      if (_Authority != null)
      {
        writer.WritePropertyName("_authority");
        _Authority.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Uri))
      {
        writer.WriteString("uri", (string)Uri!);
      }

      if (_Uri != null)
      {
        writer.WritePropertyName("_uri");
        _Uri.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authority":
          Authority = reader.GetString();
          break;

        case "_authority":
          _Authority = new fhirCsR3.Models.Element();
          _Authority.DeserializeJson(ref reader, options);
          break;

        case "uri":
          Uri = reader.GetString();
          break;

        case "_uri":
          _Uri = new fhirCsR3.Models.Element();
          _Uri.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The resources controlled by this consent, if specific resources are referenced.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ConsentData>))]
  public class ConsentData : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// How the resource reference is interpreted when testing consent restrictions.
    /// </summary>
    public string Meaning { get; set; }
    /// <summary>
    /// Extension container element for Meaning
    /// </summary>
    public Element _Meaning { get; set; }
    /// <summary>
    /// A reference to a specific resource that defines which resources are covered by this consent.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Meaning))
      {
        writer.WriteString("meaning", (string)Meaning!);
      }

      if (_Meaning != null)
      {
        writer.WritePropertyName("_meaning");
        _Meaning.SerializeJson(writer, options);
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "meaning":
          Meaning = reader.GetString();
          break;

        case "_meaning":
          _Meaning = new fhirCsR3.Models.Element();
          _Meaning.DeserializeJson(ref reader, options);
          break;

        case "reference":
          Reference = new fhirCsR3.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Consent.data.meaning field
  /// </summary>
  public static class ConsentDataMeaningCodes {
    public const string INSTANCE = "instance";
    public const string RELATED = "related";
    public const string DEPENDENTS = "dependents";
    public const string AUTHOREDBY = "authoredby";
  }
  /// <summary>
  /// Who or what is controlled by this Exception. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ConsentExceptActor>))]
  public class ConsentExceptActor : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The resource that identifies the actor. To identify a actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// How the individual is involved in the resources content that is described in the exception.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          Reference = new fhirCsR3.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = new fhirCsR3.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The resources controlled by this exception, if specific resources are referenced.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ConsentExceptData>))]
  public class ConsentExceptData : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// How the resource reference is interpreted when testing consent restrictions.
    /// </summary>
    public string Meaning { get; set; }
    /// <summary>
    /// Extension container element for Meaning
    /// </summary>
    public Element _Meaning { get; set; }
    /// <summary>
    /// A reference to a specific resource that defines which resources are covered by this consent.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Meaning))
      {
        writer.WriteString("meaning", (string)Meaning!);
      }

      if (_Meaning != null)
      {
        writer.WritePropertyName("_meaning");
        _Meaning.SerializeJson(writer, options);
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "meaning":
          Meaning = reader.GetString();
          break;

        case "_meaning":
          _Meaning = new fhirCsR3.Models.Element();
          _Meaning.DeserializeJson(ref reader, options);
          break;

        case "reference":
          Reference = new fhirCsR3.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Consent.except.data.meaning field
  /// </summary>
  public static class ConsentExceptDataMeaningCodes {
    public const string INSTANCE = "instance";
    public const string RELATED = "related";
    public const string DEPENDENTS = "dependents";
    public const string AUTHOREDBY = "authoredby";
  }
  /// <summary>
  /// An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ConsentExcept>))]
  public class ConsentExcept : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Note that this is the direct action (not the grounds for the action covered in the purpose element). At present, the only action in the understood and tested scope of this resource is 'read'.
    /// </summary>
    public List<CodeableConcept> Action { get; set; }
    /// <summary>
    /// Who or what is controlled by this Exception. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
    /// </summary>
    public List<ConsentExceptActor> Actor { get; set; }
    /// <summary>
    /// Multiple types are or'ed together. The intention of the contentType element is that the codes refer to profiles or document types defined in a standard or an implementation guide somewhere.
    /// </summary>
    public List<Coding> Class { get; set; }
    /// <summary>
    /// Typical use of this is a Document code with class = CDA.
    /// </summary>
    public List<Coding> Code { get; set; }
    /// <summary>
    /// The resources controlled by this exception, if specific resources are referenced.
    /// </summary>
    public List<ConsentExceptData> Data { get; set; }
    /// <summary>
    /// This has a different sense to the Consent.period - that is when the consent agreement holds. This is the time period of the data that is controlled by the agreement.
    /// </summary>
    public Period DataPeriod { get; set; }
    /// <summary>
    /// The timeframe in this exception is valid.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// E.g. if the purpose is 'research', then the operational context must be research, in order for the consent to apply. Not all of the security labels make sense for use in this element (may define a narrower value set?).
    /// </summary>
    public List<Coding> Purpose { get; set; }
    /// <summary>
    /// If the consent specifies a security label of "R" then it applies to all resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high water mark. For other kinds of security labels, subsumption logic applies. Not all of the security labels make sense for use in this element (may define a narrower value set?).
    /// </summary>
    public List<Coding> SecurityLabel { get; set; }
    /// <summary>
    /// Action  to take - permit or deny - when the exception conditions are met.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if ((Actor != null) && (Actor.Count != 0))
      {
        writer.WritePropertyName("actor");
        writer.WriteStartArray();

        foreach (ConsentExceptActor valActor in Actor)
        {
          valActor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (CodeableConcept valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SecurityLabel != null) && (SecurityLabel.Count != 0))
      {
        writer.WritePropertyName("securityLabel");
        writer.WriteStartArray();

        foreach (Coding valSecurityLabel in SecurityLabel)
        {
          valSecurityLabel.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Purpose != null) && (Purpose.Count != 0))
      {
        writer.WritePropertyName("purpose");
        writer.WriteStartArray();

        foreach (Coding valPurpose in Purpose)
        {
          valPurpose.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Class != null) && (Class.Count != 0))
      {
        writer.WritePropertyName("class");
        writer.WriteStartArray();

        foreach (Coding valClass in Class)
        {
          valClass.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (Coding valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (DataPeriod != null)
      {
        writer.WritePropertyName("dataPeriod");
        DataPeriod.SerializeJson(writer, options);
      }

      if ((Data != null) && (Data.Count != 0))
      {
        writer.WritePropertyName("data");
        writer.WriteStartArray();

        foreach (ConsentExceptData valData in Data)
        {
          valData.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objAction = new fhirCsR3.Models.CodeableConcept();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "actor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Actor = new List<ConsentExceptActor>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ConsentExceptActor objActor = new fhirCsR3.Models.ConsentExceptActor();
            objActor.DeserializeJson(ref reader, options);
            Actor.Add(objActor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Actor.Count == 0)
          {
            Actor = null;
          }

          break;

        case "class":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Class = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Coding objClass = new fhirCsR3.Models.Coding();
            objClass.DeserializeJson(ref reader, options);
            Class.Add(objClass);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Class.Count == 0)
          {
            Class = null;
          }

          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Coding objCode = new fhirCsR3.Models.Coding();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "data":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Data = new List<ConsentExceptData>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ConsentExceptData objData = new fhirCsR3.Models.ConsentExceptData();
            objData.DeserializeJson(ref reader, options);
            Data.Add(objData);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Data.Count == 0)
          {
            Data = null;
          }

          break;

        case "dataPeriod":
          DataPeriod = new fhirCsR3.Models.Period();
          DataPeriod.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR3.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Purpose = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Coding objPurpose = new fhirCsR3.Models.Coding();
            objPurpose.DeserializeJson(ref reader, options);
            Purpose.Add(objPurpose);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Purpose.Count == 0)
          {
            Purpose = null;
          }

          break;

        case "securityLabel":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SecurityLabel = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Coding objSecurityLabel = new fhirCsR3.Models.Coding();
            objSecurityLabel.DeserializeJson(ref reader, options);
            SecurityLabel.Add(objSecurityLabel);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SecurityLabel.Count == 0)
          {
            SecurityLabel = null;
          }

          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR3.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Consent.except.type field
  /// </summary>
  public static class ConsentExceptTypeCodes {
    public const string DENY = "deny";
    public const string PERMIT = "permit";
  }
  /// <summary>
  /// A record of a healthcare consumerâs policy choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<Consent>))]
  public class Consent : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Consent";
    /// <summary>
    /// Note that this is the direct action (not the grounds for the action covered in the purpose element). At present, the only action in the understood and tested scope of this resource is 'read'.
    /// </summary>
    public List<CodeableConcept> Action { get; set; }
    /// <summary>
    /// Who or what is controlled by this consent. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
    /// </summary>
    public List<ConsentActor> Actor { get; set; }
    /// <summary>
    /// A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.
    /// </summary>
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// Commonly, the patient the consent pertains to is the consentor, but particularly for young and old people, it may be some other person - e.g. a legal guardian.
    /// </summary>
    public List<Reference> ConsentingParty { get; set; }
    /// <summary>
    /// The resources controlled by this consent, if specific resources are referenced.
    /// </summary>
    public List<ConsentData> Data { get; set; }
    /// <summary>
    /// This has a different sense to the Consent.period - that is when the consent agreement holds. This is the time period of the data that is controlled by the agreement.
    /// </summary>
    public Period DataPeriod { get; set; }
    /// <summary>
    /// This is not the time of the original consent, but the time that this statement was made or derived.
    /// </summary>
    public string DateTime { get; set; }
    /// <summary>
    /// Extension container element for DateTime
    /// </summary>
    public Element _DateTime { get; set; }
    /// <summary>
    /// An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
    /// </summary>
    public List<ConsentExcept> Except { get; set; }
    /// <summary>
    /// This identifier is identifies this copy of the consent. Where this identifier is also used elsewhere as the identifier for a consent record (e.g. a CDA consent document) then the consent details are expected to be the same.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// The organization that manages the consent, and the framework within which it is executed.
    /// </summary>
    public List<Reference> Organization { get; set; }
    /// <summary>
    /// Commonly, the patient the consent pertains to is the author, but for young and old people, it may be some other person.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// This can be a subset of the period of the original statement.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
    /// </summary>
    public List<ConsentPolicy> Policy { get; set; }
    /// <summary>
    /// If the policy reference is not known, the resource cannot be processed. Where the reference is absent, there is no particular policy other than what is expressed directly in the consent resource.
    /// </summary>
    public string PolicyRule { get; set; }
    /// <summary>
    /// Extension container element for PolicyRule
    /// </summary>
    public Element _PolicyRule { get; set; }
    /// <summary>
    /// This element is for discoverability / documentation, and does not modify or qualify the policy (e.g. the policy itself describes the purposes for which it applies).
    /// </summary>
    public List<Coding> Purpose { get; set; }
    /// <summary>
    /// If the consent specifies a security label of "R" then it applies to all resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high water mark. For other kinds of security labels, subsumption logic applies. Not all of the security labels make sense for use in this element (may define a narrower value set?).
    /// </summary>
    public List<Coding> SecurityLabel { get; set; }
    /// <summary>
    /// The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
    /// </summary>
    public Attachment SourceAttachment { get; set; }
    /// <summary>
    /// The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
    /// </summary>
    public Identifier SourceIdentifier { get; set; }
    /// <summary>
    /// The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
    /// </summary>
    public Reference SourceReference { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains the codes rejected and entered-in-error that mark the Consent as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if ((Category != null) && (Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();

        foreach (CodeableConcept valCategory in Category)
        {
          valCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DateTime))
      {
        writer.WriteString("dateTime", (string)DateTime!);
      }

      if (_DateTime != null)
      {
        writer.WritePropertyName("_dateTime");
        _DateTime.SerializeJson(writer, options);
      }

      if ((ConsentingParty != null) && (ConsentingParty.Count != 0))
      {
        writer.WritePropertyName("consentingParty");
        writer.WriteStartArray();

        foreach (Reference valConsentingParty in ConsentingParty)
        {
          valConsentingParty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Actor != null) && (Actor.Count != 0))
      {
        writer.WritePropertyName("actor");
        writer.WriteStartArray();

        foreach (ConsentActor valActor in Actor)
        {
          valActor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (CodeableConcept valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Organization != null) && (Organization.Count != 0))
      {
        writer.WritePropertyName("organization");
        writer.WriteStartArray();

        foreach (Reference valOrganization in Organization)
        {
          valOrganization.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (SourceAttachment != null)
      {
        writer.WritePropertyName("sourceAttachment");
        SourceAttachment.SerializeJson(writer, options);
      }

      if (SourceIdentifier != null)
      {
        writer.WritePropertyName("sourceIdentifier");
        SourceIdentifier.SerializeJson(writer, options);
      }

      if (SourceReference != null)
      {
        writer.WritePropertyName("sourceReference");
        SourceReference.SerializeJson(writer, options);
      }

      if ((Policy != null) && (Policy.Count != 0))
      {
        writer.WritePropertyName("policy");
        writer.WriteStartArray();

        foreach (ConsentPolicy valPolicy in Policy)
        {
          valPolicy.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(PolicyRule))
      {
        writer.WriteString("policyRule", (string)PolicyRule!);
      }

      if (_PolicyRule != null)
      {
        writer.WritePropertyName("_policyRule");
        _PolicyRule.SerializeJson(writer, options);
      }

      if ((SecurityLabel != null) && (SecurityLabel.Count != 0))
      {
        writer.WritePropertyName("securityLabel");
        writer.WriteStartArray();

        foreach (Coding valSecurityLabel in SecurityLabel)
        {
          valSecurityLabel.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Purpose != null) && (Purpose.Count != 0))
      {
        writer.WritePropertyName("purpose");
        writer.WriteStartArray();

        foreach (Coding valPurpose in Purpose)
        {
          valPurpose.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (DataPeriod != null)
      {
        writer.WritePropertyName("dataPeriod");
        DataPeriod.SerializeJson(writer, options);
      }

      if ((Data != null) && (Data.Count != 0))
      {
        writer.WritePropertyName("data");
        writer.WriteStartArray();

        foreach (ConsentData valData in Data)
        {
          valData.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Except != null) && (Except.Count != 0))
      {
        writer.WritePropertyName("except");
        writer.WriteStartArray();

        foreach (ConsentExcept valExcept in Except)
        {
          valExcept.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objAction = new fhirCsR3.Models.CodeableConcept();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "actor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Actor = new List<ConsentActor>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ConsentActor objActor = new fhirCsR3.Models.ConsentActor();
            objActor.DeserializeJson(ref reader, options);
            Actor.Add(objActor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Actor.Count == 0)
          {
            Actor = null;
          }

          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objCategory = new fhirCsR3.Models.CodeableConcept();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "consentingParty":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ConsentingParty = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objConsentingParty = new fhirCsR3.Models.Reference();
            objConsentingParty.DeserializeJson(ref reader, options);
            ConsentingParty.Add(objConsentingParty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ConsentingParty.Count == 0)
          {
            ConsentingParty = null;
          }

          break;

        case "data":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Data = new List<ConsentData>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ConsentData objData = new fhirCsR3.Models.ConsentData();
            objData.DeserializeJson(ref reader, options);
            Data.Add(objData);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Data.Count == 0)
          {
            Data = null;
          }

          break;

        case "dataPeriod":
          DataPeriod = new fhirCsR3.Models.Period();
          DataPeriod.DeserializeJson(ref reader, options);
          break;

        case "dateTime":
          DateTime = reader.GetString();
          break;

        case "_dateTime":
          _DateTime = new fhirCsR3.Models.Element();
          _DateTime.DeserializeJson(ref reader, options);
          break;

        case "except":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Except = new List<ConsentExcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ConsentExcept objExcept = new fhirCsR3.Models.ConsentExcept();
            objExcept.DeserializeJson(ref reader, options);
            Except.Add(objExcept);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Except.Count == 0)
          {
            Except = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR3.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "organization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Organization = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objOrganization = new fhirCsR3.Models.Reference();
            objOrganization.DeserializeJson(ref reader, options);
            Organization.Add(objOrganization);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Organization.Count == 0)
          {
            Organization = null;
          }

          break;

        case "patient":
          Patient = new fhirCsR3.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR3.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "policy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Policy = new List<ConsentPolicy>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ConsentPolicy objPolicy = new fhirCsR3.Models.ConsentPolicy();
            objPolicy.DeserializeJson(ref reader, options);
            Policy.Add(objPolicy);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Policy.Count == 0)
          {
            Policy = null;
          }

          break;

        case "policyRule":
          PolicyRule = reader.GetString();
          break;

        case "_policyRule":
          _PolicyRule = new fhirCsR3.Models.Element();
          _PolicyRule.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Purpose = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Coding objPurpose = new fhirCsR3.Models.Coding();
            objPurpose.DeserializeJson(ref reader, options);
            Purpose.Add(objPurpose);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Purpose.Count == 0)
          {
            Purpose = null;
          }

          break;

        case "securityLabel":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SecurityLabel = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Coding objSecurityLabel = new fhirCsR3.Models.Coding();
            objSecurityLabel.DeserializeJson(ref reader, options);
            SecurityLabel.Add(objSecurityLabel);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SecurityLabel.Count == 0)
          {
            SecurityLabel = null;
          }

          break;

        case "sourceAttachment":
          SourceAttachment = new fhirCsR3.Models.Attachment();
          SourceAttachment.DeserializeJson(ref reader, options);
          break;

        case "sourceIdentifier":
          SourceIdentifier = new fhirCsR3.Models.Identifier();
          SourceIdentifier.DeserializeJson(ref reader, options);
          break;

        case "sourceReference":
          SourceReference = new fhirCsR3.Models.Reference();
          SourceReference.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Consent.status field
  /// </summary>
  public static class ConsentStatusCodes {
    public const string DRAFT = "draft";
    public const string PROPOSED = "proposed";
    public const string ACTIVE = "active";
    public const string REJECTED = "rejected";
    public const string INACTIVE = "inactive";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
}
