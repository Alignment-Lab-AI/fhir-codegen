// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<DataRequirementCodeFilter>))]
  public class DataRequirementCodeFilter : Element,  IFhirJsonSerializable {
    /// <summary>
    /// The code-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.
    /// </summary>
    public string Path { get; set; }
    /// <summary>
    /// Extension container element for Path
    /// </summary>
    public Element _Path { get; set; }
    /// <summary>
    /// The codes for the code filter. Only one of valueSet, valueCode, valueCoding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes.
    /// </summary>
    public List<string> ValueCode { get; set; }
    /// <summary>
    /// Extension container element for ValueCode
    /// </summary>
    public List<Element> _ValueCode { get; set; }
    /// <summary>
    /// The CodeableConcepts for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified CodeableConcepts.
    /// </summary>
    public List<CodeableConcept> ValueCodeableConcept { get; set; }
    /// <summary>
    /// The Codings for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified Codings.
    /// </summary>
    public List<Coding> ValueCoding { get; set; }
    /// <summary>
    /// The valueset for the code filter. The valueSet and value elements are exclusive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.
    /// </summary>
    public string ValueSetString { get; set; }
    /// <summary>
    /// Extension container element for ValueSetString
    /// </summary>
    public Element _ValueSetString { get; set; }
    /// <summary>
    /// The valueset for the code filter. The valueSet and value elements are exclusive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.
    /// </summary>
    public Reference ValueSetReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.Element)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Path))
      {
        writer.WriteString("path", (string)Path!);
      }

      if (_Path != null)
      {
        writer.WritePropertyName("_path");
        _Path.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueSetString))
      {
        writer.WriteString("valueSetString", (string)ValueSetString!);
      }

      if (_ValueSetString != null)
      {
        writer.WritePropertyName("_valueSetString");
        _ValueSetString.SerializeJson(writer, options);
      }

      if (ValueSetReference != null)
      {
        writer.WritePropertyName("valueSetReference");
        ValueSetReference.SerializeJson(writer, options);
      }

      if ((ValueCode != null) && (ValueCode.Count != 0))
      {
        writer.WritePropertyName("valueCode");
        writer.WriteStartArray();

        foreach (string valValueCode in ValueCode)
        {
          writer.WriteStringValue(valValueCode);
        }

        writer.WriteEndArray();
      }

      if ((_ValueCode != null) && (_ValueCode.Count != 0))
      {
        writer.WritePropertyName("_valueCode");
        writer.WriteStartArray();

        foreach (Element val_ValueCode in _ValueCode)
        {
          val_ValueCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ValueCoding != null) && (ValueCoding.Count != 0))
      {
        writer.WritePropertyName("valueCoding");
        writer.WriteStartArray();

        foreach (Coding valValueCoding in ValueCoding)
        {
          valValueCoding.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ValueCodeableConcept != null) && (ValueCodeableConcept.Count != 0))
      {
        writer.WritePropertyName("valueCodeableConcept");
        writer.WriteStartArray();

        foreach (CodeableConcept valValueCodeableConcept in ValueCodeableConcept)
        {
          valValueCodeableConcept.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "path":
          Path = reader.GetString();
          break;

        case "_path":
          _Path = new fhirCsR3.Models.Element();
          _Path.DeserializeJson(ref reader, options);
          break;

        case "valueCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValueCode = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ValueCode.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValueCode.Count == 0)
          {
            ValueCode = null;
          }

          break;

        case "_valueCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _ValueCode = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Element obj_ValueCode = new fhirCsR3.Models.Element();
            obj_ValueCode.DeserializeJson(ref reader, options);
            _ValueCode.Add(obj_ValueCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_ValueCode.Count == 0)
          {
            _ValueCode = null;
          }

          break;

        case "valueCodeableConcept":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValueCodeableConcept = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objValueCodeableConcept = new fhirCsR3.Models.CodeableConcept();
            objValueCodeableConcept.DeserializeJson(ref reader, options);
            ValueCodeableConcept.Add(objValueCodeableConcept);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValueCodeableConcept.Count == 0)
          {
            ValueCodeableConcept = null;
          }

          break;

        case "valueCoding":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValueCoding = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Coding objValueCoding = new fhirCsR3.Models.Coding();
            objValueCoding.DeserializeJson(ref reader, options);
            ValueCoding.Add(objValueCoding);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValueCoding.Count == 0)
          {
            ValueCoding = null;
          }

          break;

        case "valueSetString":
          ValueSetString = reader.GetString();
          break;

        case "_valueSetString":
          _ValueSetString = new fhirCsR3.Models.Element();
          _ValueSetString.DeserializeJson(ref reader, options);
          break;

        case "valueSetReference":
          ValueSetReference = new fhirCsR3.Models.Reference();
          ValueSetReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Date filters specify additional constraints on the data in terms of the applicable date range for specific elements.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<DataRequirementDateFilter>))]
  public class DataRequirementDateFilter : Element,  IFhirJsonSerializable {
    /// <summary>
    /// The date-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type dateTime, Period, Schedule, or Timing.
    /// </summary>
    public string Path { get; set; }
    /// <summary>
    /// Extension container element for Path
    /// </summary>
    public Element _Path { get; set; }
    /// <summary>
    /// The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration from now.
    /// </summary>
    public string ValueDateTime { get; set; }
    /// <summary>
    /// Extension container element for ValueDateTime
    /// </summary>
    public Element _ValueDateTime { get; set; }
    /// <summary>
    /// The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration from now.
    /// </summary>
    public Period ValuePeriod { get; set; }
    /// <summary>
    /// The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration from now.
    /// </summary>
    public Duration ValueDuration { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.Element)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Path))
      {
        writer.WriteString("path", (string)Path!);
      }

      if (_Path != null)
      {
        writer.WritePropertyName("_path");
        _Path.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueDateTime))
      {
        writer.WriteString("valueDateTime", (string)ValueDateTime!);
      }

      if (_ValueDateTime != null)
      {
        writer.WritePropertyName("_valueDateTime");
        _ValueDateTime.SerializeJson(writer, options);
      }

      if (ValuePeriod != null)
      {
        writer.WritePropertyName("valuePeriod");
        ValuePeriod.SerializeJson(writer, options);
      }

      if (ValueDuration != null)
      {
        writer.WritePropertyName("valueDuration");
        ValueDuration.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "path":
          Path = reader.GetString();
          break;

        case "_path":
          _Path = new fhirCsR3.Models.Element();
          _Path.DeserializeJson(ref reader, options);
          break;

        case "valueDateTime":
          ValueDateTime = reader.GetString();
          break;

        case "_valueDateTime":
          _ValueDateTime = new fhirCsR3.Models.Element();
          _ValueDateTime.DeserializeJson(ref reader, options);
          break;

        case "valuePeriod":
          ValuePeriod = new fhirCsR3.Models.Period();
          ValuePeriod.DeserializeJson(ref reader, options);
          break;

        case "valueDuration":
          ValueDuration = new fhirCsR3.Models.Duration();
          ValueDuration.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<DataRequirement>))]
  public class DataRequirement : Element,  IFhirJsonSerializable {
    /// <summary>
    /// Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data.
    /// </summary>
    public List<DataRequirementCodeFilter> CodeFilter { get; set; }
    /// <summary>
    /// Date filters specify additional constraints on the data in terms of the applicable date range for specific elements.
    /// </summary>
    public List<DataRequirementDateFilter> DateFilter { get; set; }
    /// <summary>
    /// Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. Note that the value for this element can be a path to allow references to nested elements. In that case, all the elements along the path must be supported.
    /// </summary>
    public List<string> MustSupport { get; set; }
    /// <summary>
    /// Extension container element for MustSupport
    /// </summary>
    public List<Element> _MustSupport { get; set; }
    /// <summary>
    /// The profile of the required data, specified as the uri of the profile definition.
    /// </summary>
    public List<string> Profile { get; set; }
    /// <summary>
    /// Extension container element for Profile
    /// </summary>
    public List<Element> _Profile { get; set; }
    /// <summary>
    /// The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.Element)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if ((Profile != null) && (Profile.Count != 0))
      {
        writer.WritePropertyName("profile");
        writer.WriteStartArray();

        foreach (string valProfile in Profile)
        {
          writer.WriteStringValue(valProfile);
        }

        writer.WriteEndArray();
      }

      if ((_Profile != null) && (_Profile.Count != 0))
      {
        writer.WritePropertyName("_profile");
        writer.WriteStartArray();

        foreach (Element val_Profile in _Profile)
        {
          val_Profile.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((MustSupport != null) && (MustSupport.Count != 0))
      {
        writer.WritePropertyName("mustSupport");
        writer.WriteStartArray();

        foreach (string valMustSupport in MustSupport)
        {
          writer.WriteStringValue(valMustSupport);
        }

        writer.WriteEndArray();
      }

      if ((_MustSupport != null) && (_MustSupport.Count != 0))
      {
        writer.WritePropertyName("_mustSupport");
        writer.WriteStartArray();

        foreach (Element val_MustSupport in _MustSupport)
        {
          val_MustSupport.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((CodeFilter != null) && (CodeFilter.Count != 0))
      {
        writer.WritePropertyName("codeFilter");
        writer.WriteStartArray();

        foreach (DataRequirementCodeFilter valCodeFilter in CodeFilter)
        {
          valCodeFilter.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((DateFilter != null) && (DateFilter.Count != 0))
      {
        writer.WritePropertyName("dateFilter");
        writer.WriteStartArray();

        foreach (DataRequirementDateFilter valDateFilter in DateFilter)
        {
          valDateFilter.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "codeFilter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CodeFilter = new List<DataRequirementCodeFilter>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.DataRequirementCodeFilter objCodeFilter = new fhirCsR3.Models.DataRequirementCodeFilter();
            objCodeFilter.DeserializeJson(ref reader, options);
            CodeFilter.Add(objCodeFilter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CodeFilter.Count == 0)
          {
            CodeFilter = null;
          }

          break;

        case "dateFilter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DateFilter = new List<DataRequirementDateFilter>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.DataRequirementDateFilter objDateFilter = new fhirCsR3.Models.DataRequirementDateFilter();
            objDateFilter.DeserializeJson(ref reader, options);
            DateFilter.Add(objDateFilter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DateFilter.Count == 0)
          {
            DateFilter = null;
          }

          break;

        case "mustSupport":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MustSupport = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            MustSupport.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MustSupport.Count == 0)
          {
            MustSupport = null;
          }

          break;

        case "_mustSupport":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _MustSupport = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Element obj_MustSupport = new fhirCsR3.Models.Element();
            obj_MustSupport.DeserializeJson(ref reader, options);
            _MustSupport.Add(obj_MustSupport);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_MustSupport.Count == 0)
          {
            _MustSupport = null;
          }

          break;

        case "profile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Profile = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Profile.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Profile.Count == 0)
          {
            Profile = null;
          }

          break;

        case "_profile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Profile = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Element obj_Profile = new fhirCsR3.Models.Element();
            obj_Profile.DeserializeJson(ref reader, options);
            _Profile.Add(obj_Profile);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Profile.Count == 0)
          {
            _Profile = null;
          }

          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR3.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
