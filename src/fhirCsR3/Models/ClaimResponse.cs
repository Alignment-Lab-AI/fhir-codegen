// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// The adjudication results.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ClaimResponseItemAdjudication>))]
  public class ClaimResponseItemAdjudication : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Monetary amount associated with the code.
    /// </summary>
    public Money Amount { get; set; }
    /// <summary>
    /// Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// Adjudication reason such as limit reached.
    /// </summary>
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
    /// </summary>
    public decimal? Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Reason != null)
      {
        writer.WritePropertyName("reason");
        Reason.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (Value != null)
      {
        writer.WriteNumber("value", (decimal)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new fhirCsR3.Models.Money();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "reason":
          Reason = new fhirCsR3.Models.CodeableConcept();
          Reason.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetDecimal();
          break;

        case "_value":
          _Value = new fhirCsR3.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The third tier service adjudications for submitted services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ClaimResponseItemDetailSubDetail>))]
  public class ClaimResponseItemDetailSubDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    public uint SequenceLinkId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequenceLinkId", SequenceLinkId);

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ClaimResponseItemAdjudication objAdjudication = new fhirCsR3.Models.ClaimResponseItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "sequenceLinkId":
          SequenceLinkId = reader.GetUInt32();
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The second tier service adjudications for submitted services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ClaimResponseItemDetail>))]
  public class ClaimResponseItemDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    public uint SequenceLinkId { get; set; }
    /// <summary>
    /// The third tier service adjudications for submitted services.
    /// </summary>
    public List<ClaimResponseItemDetailSubDetail> SubDetail { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequenceLinkId", SequenceLinkId);

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SubDetail != null) && (SubDetail.Count != 0))
      {
        writer.WritePropertyName("subDetail");
        writer.WriteStartArray();

        foreach (ClaimResponseItemDetailSubDetail valSubDetail in SubDetail)
        {
          valSubDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ClaimResponseItemAdjudication objAdjudication = new fhirCsR3.Models.ClaimResponseItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "sequenceLinkId":
          SequenceLinkId = reader.GetUInt32();
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubDetail = new List<ClaimResponseItemDetailSubDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ClaimResponseItemDetailSubDetail objSubDetail = new fhirCsR3.Models.ClaimResponseItemDetailSubDetail();
            objSubDetail.DeserializeJson(ref reader, options);
            SubDetail.Add(objSubDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubDetail.Count == 0)
          {
            SubDetail = null;
          }

          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The first tier service adjudications for submitted services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ClaimResponseItem>))]
  public class ClaimResponseItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudication results.
    /// </summary>
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// The second tier service adjudications for submitted services.
    /// </summary>
    public List<ClaimResponseItemDetail> Detail { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    public uint SequenceLinkId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequenceLinkId", SequenceLinkId);

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (ClaimResponseItemDetail valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ClaimResponseItemAdjudication objAdjudication = new fhirCsR3.Models.ClaimResponseItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<ClaimResponseItemDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ClaimResponseItemDetail objDetail = new fhirCsR3.Models.ClaimResponseItemDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "sequenceLinkId":
          SequenceLinkId = reader.GetUInt32();
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The second tier service adjudications for payor added services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ClaimResponseAddItemDetail>))]
  public class ClaimResponseAddItemDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// Health Care Service Type Codes  to identify the classification of service or benefits.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// The fee charged for the professional service or product..
    /// </summary>
    public Money Fee { get; set; }
    /// <summary>
    /// Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// The type of reveneu or cost center providing the product and/or service.
    /// </summary>
    public CodeableConcept Revenue { get; set; }
    /// <summary>
    /// A code to indicate the Professional Service or Product supplied.
    /// </summary>
    public CodeableConcept Service { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Revenue != null)
      {
        writer.WritePropertyName("revenue");
        Revenue.SerializeJson(writer, options);
      }

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Service != null)
      {
        writer.WritePropertyName("service");
        Service.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Fee != null)
      {
        writer.WritePropertyName("fee");
        Fee.SerializeJson(writer, options);
      }

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ClaimResponseItemAdjudication objAdjudication = new fhirCsR3.Models.ClaimResponseItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "fee":
          Fee = new fhirCsR3.Models.Money();
          Fee.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objModifier = new fhirCsR3.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "revenue":
          Revenue = new fhirCsR3.Models.CodeableConcept();
          Revenue.DeserializeJson(ref reader, options);
          break;

        case "service":
          Service = new fhirCsR3.Models.CodeableConcept();
          Service.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The first tier service adjudications for payor added services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ClaimResponseAddItem>))]
  public class ClaimResponseAddItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// Health Care Service Type Codes  to identify the classification of service or benefits.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// The second tier service adjudications for payor added services.
    /// </summary>
    public List<ClaimResponseAddItemDetail> Detail { get; set; }
    /// <summary>
    /// The fee charged for the professional service or product..
    /// </summary>
    public Money Fee { get; set; }
    /// <summary>
    /// Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// The type of reveneu or cost center providing the product and/or service.
    /// </summary>
    public CodeableConcept Revenue { get; set; }
    /// <summary>
    /// List of input service items which this service line is intended to replace.
    /// </summary>
    public List<uint> SequenceLinkId { get; set; }
    /// <summary>
    /// A code to indicate the Professional Service or Product supplied.
    /// </summary>
    public CodeableConcept Service { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((SequenceLinkId != null) && (SequenceLinkId.Count != 0))
      {
        writer.WritePropertyName("sequenceLinkId");
        writer.WriteStartArray();

        foreach (uint valSequenceLinkId in SequenceLinkId)
        {
          writer.WriteNumberValue(valSequenceLinkId);
        }

        writer.WriteEndArray();
      }

      if (Revenue != null)
      {
        writer.WritePropertyName("revenue");
        Revenue.SerializeJson(writer, options);
      }

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Service != null)
      {
        writer.WritePropertyName("service");
        Service.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Fee != null)
      {
        writer.WritePropertyName("fee");
        Fee.SerializeJson(writer, options);
      }

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (ClaimResponseAddItemDetail valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ClaimResponseItemAdjudication objAdjudication = new fhirCsR3.Models.ClaimResponseItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<ClaimResponseAddItemDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ClaimResponseAddItemDetail objDetail = new fhirCsR3.Models.ClaimResponseAddItemDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "fee":
          Fee = new fhirCsR3.Models.Money();
          Fee.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objModifier = new fhirCsR3.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "revenue":
          Revenue = new fhirCsR3.Models.CodeableConcept();
          Revenue.DeserializeJson(ref reader, options);
          break;

        case "sequenceLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SequenceLinkId = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SequenceLinkId.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SequenceLinkId.Count == 0)
          {
            SequenceLinkId = null;
          }

          break;

        case "service":
          Service = new fhirCsR3.Models.CodeableConcept();
          Service.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Mutually exclusive with Services Provided (Item).
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ClaimResponseError>))]
  public class ClaimResponseError : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An error code,from a specified code system, which details why the claim could not be adjudicated.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
    /// </summary>
    public uint? DetailSequenceLinkId { get; set; }
    /// <summary>
    /// The sequence number of the line item submitted which contains the error. This value is omitted when the error is elsewhere.
    /// </summary>
    public uint? SequenceLinkId { get; set; }
    /// <summary>
    /// The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
    /// </summary>
    public uint? SubdetailSequenceLinkId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (SequenceLinkId != null)
      {
        writer.WriteNumber("sequenceLinkId", (uint)SequenceLinkId!);
      }

      if (DetailSequenceLinkId != null)
      {
        writer.WriteNumber("detailSequenceLinkId", (uint)DetailSequenceLinkId!);
      }

      if (SubdetailSequenceLinkId != null)
      {
        writer.WriteNumber("subdetailSequenceLinkId", (uint)SubdetailSequenceLinkId!);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR3.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "detailSequenceLinkId":
          DetailSequenceLinkId = reader.GetUInt32();
          break;

        case "sequenceLinkId":
          SequenceLinkId = reader.GetUInt32();
          break;

        case "subdetailSequenceLinkId":
          SubdetailSequenceLinkId = reader.GetUInt32();
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Payment details for the claim if the claim has been paid.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ClaimResponsePayment>))]
  public class ClaimResponsePayment : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Adjustment to the payment of this transaction which is not related to adjudication of this transaction.
    /// </summary>
    public Money Adjustment { get; set; }
    /// <summary>
    /// Reason for the payment adjustment.
    /// </summary>
    public CodeableConcept AdjustmentReason { get; set; }
    /// <summary>
    /// Payable less any payment adjustment.
    /// </summary>
    public Money Amount { get; set; }
    /// <summary>
    /// Estimated payment data.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Payment identifier.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Whether this represents partial or complete payment of the claim.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Adjustment != null)
      {
        writer.WritePropertyName("adjustment");
        Adjustment.SerializeJson(writer, options);
      }

      if (AdjustmentReason != null)
      {
        writer.WritePropertyName("adjustmentReason");
        AdjustmentReason.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjustment":
          Adjustment = new fhirCsR3.Models.Money();
          Adjustment.DeserializeJson(ref reader, options);
          break;

        case "adjustmentReason":
          AdjustmentReason = new fhirCsR3.Models.CodeableConcept();
          AdjustmentReason.DeserializeJson(ref reader, options);
          break;

        case "amount":
          Amount = new fhirCsR3.Models.Money();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR3.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR3.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Note text.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ClaimResponseProcessNote>))]
  public class ClaimResponseProcessNote : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
    /// </summary>
    public CodeableConcept Language { get; set; }
    /// <summary>
    /// An integer associated with each note which may be referred to from each service line item.
    /// </summary>
    public uint? Number { get; set; }
    /// <summary>
    /// The note text.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// The note purpose: Print/Display.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Number != null)
      {
        writer.WriteNumber("number", (uint)Number!);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (Language != null)
      {
        writer.WritePropertyName("language");
        Language.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "language":
          Language = new fhirCsR3.Models.CodeableConcept();
          Language.DeserializeJson(ref reader, options);
          break;

        case "number":
          Number = reader.GetUInt32();
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR3.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Financial instrument by which payment information for health care.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ClaimResponseInsurance>))]
  public class ClaimResponseInsurance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The contract number of a business agreement which describes the terms and conditions.
    /// </summary>
    public string BusinessArrangement { get; set; }
    /// <summary>
    /// Extension container element for BusinessArrangement
    /// </summary>
    public Element _BusinessArrangement { get; set; }
    /// <summary>
    /// The Coverages adjudication details.
    /// </summary>
    public Reference ClaimResponse { get; set; }
    /// <summary>
    /// Reference to the program or plan identification, underwriter or payor.
    /// </summary>
    public Reference Coverage { get; set; }
    /// <summary>
    /// The instance number of the Coverage which is the focus for adjudication. The Coverage against which the claim is to be adjudicated.
    /// </summary>
    public bool Focal { get; set; }
    /// <summary>
    /// A list of references from the Insurer to which these services pertain.
    /// </summary>
    public List<string> PreAuthRef { get; set; }
    /// <summary>
    /// Extension container element for PreAuthRef
    /// </summary>
    public List<Element> _PreAuthRef { get; set; }
    /// <summary>
    /// A service line item.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      writer.WriteBoolean("focal", Focal);

      if (Coverage != null)
      {
        writer.WritePropertyName("coverage");
        Coverage.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(BusinessArrangement))
      {
        writer.WriteString("businessArrangement", (string)BusinessArrangement!);
      }

      if (_BusinessArrangement != null)
      {
        writer.WritePropertyName("_businessArrangement");
        _BusinessArrangement.SerializeJson(writer, options);
      }

      if ((PreAuthRef != null) && (PreAuthRef.Count != 0))
      {
        writer.WritePropertyName("preAuthRef");
        writer.WriteStartArray();

        foreach (string valPreAuthRef in PreAuthRef)
        {
          writer.WriteStringValue(valPreAuthRef);
        }

        writer.WriteEndArray();
      }

      if ((_PreAuthRef != null) && (_PreAuthRef.Count != 0))
      {
        writer.WritePropertyName("_preAuthRef");
        writer.WriteStartArray();

        foreach (Element val_PreAuthRef in _PreAuthRef)
        {
          val_PreAuthRef.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ClaimResponse != null)
      {
        writer.WritePropertyName("claimResponse");
        ClaimResponse.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "businessArrangement":
          BusinessArrangement = reader.GetString();
          break;

        case "_businessArrangement":
          _BusinessArrangement = new fhirCsR3.Models.Element();
          _BusinessArrangement.DeserializeJson(ref reader, options);
          break;

        case "claimResponse":
          ClaimResponse = new fhirCsR3.Models.Reference();
          ClaimResponse.DeserializeJson(ref reader, options);
          break;

        case "coverage":
          Coverage = new fhirCsR3.Models.Reference();
          Coverage.DeserializeJson(ref reader, options);
          break;

        case "focal":
          Focal = reader.GetBoolean();
          break;

        case "preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PreAuthRef = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            PreAuthRef.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PreAuthRef.Count == 0)
          {
            PreAuthRef = null;
          }

          break;

        case "_preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _PreAuthRef = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Element obj_PreAuthRef = new fhirCsR3.Models.Element();
            obj_PreAuthRef.DeserializeJson(ref reader, options);
            _PreAuthRef.Add(obj_PreAuthRef);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_PreAuthRef.Count == 0)
          {
            _PreAuthRef = null;
          }

          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This resource provides the adjudication details from the processing of a Claim resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ClaimResponse>))]
  public class ClaimResponse : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ClaimResponse";
    /// <summary>
    /// The first tier service adjudications for payor added services.
    /// </summary>
    public List<ClaimResponseAddItem> AddItem { get; set; }
    /// <summary>
    /// Request for additional supporting or authorizing information, such as: documents, images or resources.
    /// </summary>
    public List<Reference> CommunicationRequest { get; set; }
    /// <summary>
    /// The date when the enclosed suite of services were performed or completed.
    /// </summary>
    public string Created { get; set; }
    /// <summary>
    /// Extension container element for Created
    /// </summary>
    public Element _Created { get; set; }
    /// <summary>
    /// A description of the status of the adjudication.
    /// </summary>
    public string Disposition { get; set; }
    /// <summary>
    /// Extension container element for Disposition
    /// </summary>
    public Element _Disposition { get; set; }
    /// <summary>
    /// Mutually exclusive with Services Provided (Item).
    /// </summary>
    public List<ClaimResponseError> Error { get; set; }
    /// <summary>
    /// The form to be used for printing the content.
    /// </summary>
    public CodeableConcept Form { get; set; }
    /// <summary>
    /// The Response business identifier.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Financial instrument by which payment information for health care.
    /// </summary>
    public List<ClaimResponseInsurance> Insurance { get; set; }
    /// <summary>
    /// The Insurer who produced this adjudicated response.
    /// </summary>
    public Reference Insurer { get; set; }
    /// <summary>
    /// The first tier service adjudications for submitted services.
    /// </summary>
    public List<ClaimResponseItem> Item { get; set; }
    /// <summary>
    /// Processing outcome errror, partial or complete processing.
    /// </summary>
    public CodeableConcept Outcome { get; set; }
    /// <summary>
    /// Patient Resource.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// Party to be reimbursed: Subscriber, provider, other.
    /// </summary>
    public CodeableConcept PayeeType { get; set; }
    /// <summary>
    /// Payment details for the claim if the claim has been paid.
    /// </summary>
    public ClaimResponsePayment Payment { get; set; }
    /// <summary>
    /// Note text.
    /// </summary>
    public List<ClaimResponseProcessNote> ProcessNote { get; set; }
    /// <summary>
    /// Original request resource referrence.
    /// </summary>
    public Reference Request { get; set; }
    /// <summary>
    /// The organization which is responsible for the services rendered to the patient.
    /// </summary>
    public Reference RequestOrganization { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    public Reference RequestProvider { get; set; }
    /// <summary>
    /// Status of funds reservation (For provider, for Patient, None).
    /// </summary>
    public Coding Reserved { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains the code cancelled and entered-in-error that mark the response as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductible).
    /// </summary>
    public Money TotalBenefit { get; set; }
    /// <summary>
    /// The total cost of the services reported.
    /// </summary>
    public Money TotalCost { get; set; }
    /// <summary>
    /// The amount of deductible applied which was not allocated to any particular service line.
    /// </summary>
    public Money UnallocDeductable { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Created))
      {
        writer.WriteString("created", (string)Created!);
      }

      if (_Created != null)
      {
        writer.WritePropertyName("_created");
        _Created.SerializeJson(writer, options);
      }

      if (Insurer != null)
      {
        writer.WritePropertyName("insurer");
        Insurer.SerializeJson(writer, options);
      }

      if (RequestProvider != null)
      {
        writer.WritePropertyName("requestProvider");
        RequestProvider.SerializeJson(writer, options);
      }

      if (RequestOrganization != null)
      {
        writer.WritePropertyName("requestOrganization");
        RequestOrganization.SerializeJson(writer, options);
      }

      if (Request != null)
      {
        writer.WritePropertyName("request");
        Request.SerializeJson(writer, options);
      }

      if (Outcome != null)
      {
        writer.WritePropertyName("outcome");
        Outcome.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Disposition))
      {
        writer.WriteString("disposition", (string)Disposition!);
      }

      if (_Disposition != null)
      {
        writer.WritePropertyName("_disposition");
        _Disposition.SerializeJson(writer, options);
      }

      if (PayeeType != null)
      {
        writer.WritePropertyName("payeeType");
        PayeeType.SerializeJson(writer, options);
      }

      if ((Item != null) && (Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();

        foreach (ClaimResponseItem valItem in Item)
        {
          valItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AddItem != null) && (AddItem.Count != 0))
      {
        writer.WritePropertyName("addItem");
        writer.WriteStartArray();

        foreach (ClaimResponseAddItem valAddItem in AddItem)
        {
          valAddItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Error != null) && (Error.Count != 0))
      {
        writer.WritePropertyName("error");
        writer.WriteStartArray();

        foreach (ClaimResponseError valError in Error)
        {
          valError.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (TotalCost != null)
      {
        writer.WritePropertyName("totalCost");
        TotalCost.SerializeJson(writer, options);
      }

      if (UnallocDeductable != null)
      {
        writer.WritePropertyName("unallocDeductable");
        UnallocDeductable.SerializeJson(writer, options);
      }

      if (TotalBenefit != null)
      {
        writer.WritePropertyName("totalBenefit");
        TotalBenefit.SerializeJson(writer, options);
      }

      if (Payment != null)
      {
        writer.WritePropertyName("payment");
        Payment.SerializeJson(writer, options);
      }

      if (Reserved != null)
      {
        writer.WritePropertyName("reserved");
        Reserved.SerializeJson(writer, options);
      }

      if (Form != null)
      {
        writer.WritePropertyName("form");
        Form.SerializeJson(writer, options);
      }

      if ((ProcessNote != null) && (ProcessNote.Count != 0))
      {
        writer.WritePropertyName("processNote");
        writer.WriteStartArray();

        foreach (ClaimResponseProcessNote valProcessNote in ProcessNote)
        {
          valProcessNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((CommunicationRequest != null) && (CommunicationRequest.Count != 0))
      {
        writer.WritePropertyName("communicationRequest");
        writer.WriteStartArray();

        foreach (Reference valCommunicationRequest in CommunicationRequest)
        {
          valCommunicationRequest.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Insurance != null) && (Insurance.Count != 0))
      {
        writer.WritePropertyName("insurance");
        writer.WriteStartArray();

        foreach (ClaimResponseInsurance valInsurance in Insurance)
        {
          valInsurance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "addItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AddItem = new List<ClaimResponseAddItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ClaimResponseAddItem objAddItem = new fhirCsR3.Models.ClaimResponseAddItem();
            objAddItem.DeserializeJson(ref reader, options);
            AddItem.Add(objAddItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AddItem.Count == 0)
          {
            AddItem = null;
          }

          break;

        case "communicationRequest":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CommunicationRequest = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objCommunicationRequest = new fhirCsR3.Models.Reference();
            objCommunicationRequest.DeserializeJson(ref reader, options);
            CommunicationRequest.Add(objCommunicationRequest);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CommunicationRequest.Count == 0)
          {
            CommunicationRequest = null;
          }

          break;

        case "created":
          Created = reader.GetString();
          break;

        case "_created":
          _Created = new fhirCsR3.Models.Element();
          _Created.DeserializeJson(ref reader, options);
          break;

        case "disposition":
          Disposition = reader.GetString();
          break;

        case "_disposition":
          _Disposition = new fhirCsR3.Models.Element();
          _Disposition.DeserializeJson(ref reader, options);
          break;

        case "error":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Error = new List<ClaimResponseError>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ClaimResponseError objError = new fhirCsR3.Models.ClaimResponseError();
            objError.DeserializeJson(ref reader, options);
            Error.Add(objError);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Error.Count == 0)
          {
            Error = null;
          }

          break;

        case "form":
          Form = new fhirCsR3.Models.CodeableConcept();
          Form.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Identifier objIdentifier = new fhirCsR3.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Insurance = new List<ClaimResponseInsurance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ClaimResponseInsurance objInsurance = new fhirCsR3.Models.ClaimResponseInsurance();
            objInsurance.DeserializeJson(ref reader, options);
            Insurance.Add(objInsurance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Insurance.Count == 0)
          {
            Insurance = null;
          }

          break;

        case "insurer":
          Insurer = new fhirCsR3.Models.Reference();
          Insurer.DeserializeJson(ref reader, options);
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Item = new List<ClaimResponseItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ClaimResponseItem objItem = new fhirCsR3.Models.ClaimResponseItem();
            objItem.DeserializeJson(ref reader, options);
            Item.Add(objItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Item.Count == 0)
          {
            Item = null;
          }

          break;

        case "outcome":
          Outcome = new fhirCsR3.Models.CodeableConcept();
          Outcome.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR3.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "payeeType":
          PayeeType = new fhirCsR3.Models.CodeableConcept();
          PayeeType.DeserializeJson(ref reader, options);
          break;

        case "payment":
          Payment = new fhirCsR3.Models.ClaimResponsePayment();
          Payment.DeserializeJson(ref reader, options);
          break;

        case "processNote":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProcessNote = new List<ClaimResponseProcessNote>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ClaimResponseProcessNote objProcessNote = new fhirCsR3.Models.ClaimResponseProcessNote();
            objProcessNote.DeserializeJson(ref reader, options);
            ProcessNote.Add(objProcessNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProcessNote.Count == 0)
          {
            ProcessNote = null;
          }

          break;

        case "request":
          Request = new fhirCsR3.Models.Reference();
          Request.DeserializeJson(ref reader, options);
          break;

        case "requestOrganization":
          RequestOrganization = new fhirCsR3.Models.Reference();
          RequestOrganization.DeserializeJson(ref reader, options);
          break;

        case "requestProvider":
          RequestProvider = new fhirCsR3.Models.Reference();
          RequestProvider.DeserializeJson(ref reader, options);
          break;

        case "reserved":
          Reserved = new fhirCsR3.Models.Coding();
          Reserved.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "totalBenefit":
          TotalBenefit = new fhirCsR3.Models.Money();
          TotalBenefit.DeserializeJson(ref reader, options);
          break;

        case "totalCost":
          TotalCost = new fhirCsR3.Models.Money();
          TotalCost.DeserializeJson(ref reader, options);
          break;

        case "unallocDeductable":
          UnallocDeductable = new fhirCsR3.Models.Money();
          UnallocDeductable.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ClaimResponse.status field
  /// </summary>
  public static class ClaimResponseStatusCodes {
    public const string ACTIVE = "active";
    public const string CANCELLED = "cancelled";
    public const string DRAFT = "draft";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
}
