// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// A single SOP instance within the series, e.g. an image, or presentation state.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ImagingStudySeriesInstance>))]
  public class ImagingStudySeriesInstance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The number of instance in the series.
    /// </summary>
    public uint? Number { get; set; }
    /// <summary>
    /// DICOM instance  type.
    /// </summary>
    public string SopClass { get; set; }
    /// <summary>
    /// Extension container element for SopClass
    /// </summary>
    public Element _SopClass { get; set; }
    /// <summary>
    /// Particularly for post-acquisition analytic objects, such as SR, presentation states, value mapping, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Formal identifier for this image or other content.
    /// </summary>
    public string Uid { get; set; }
    /// <summary>
    /// Extension container element for Uid
    /// </summary>
    public Element _Uid { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Uid))
      {
        writer.WriteString("uid", (string)Uid!);
      }

      if (_Uid != null)
      {
        writer.WritePropertyName("_uid");
        _Uid.SerializeJson(writer, options);
      }

      if (Number != null)
      {
        writer.WriteNumber("number", (uint)Number!);
      }

      if (!string.IsNullOrEmpty(SopClass))
      {
        writer.WriteString("sopClass", (string)SopClass!);
      }

      if (_SopClass != null)
      {
        writer.WritePropertyName("_sopClass");
        _SopClass.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "number":
          Number = reader.GetUInt32();
          break;

        case "sopClass":
          SopClass = reader.GetString();
          break;

        case "_sopClass":
          _SopClass = new fhirCsR3.Models.Element();
          _SopClass.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR3.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "uid":
          Uid = reader.GetString();
          break;

        case "_uid":
          _Uid = new fhirCsR3.Models.Element();
          _Uid.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Each study has one or more series of images or other content.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ImagingStudySeries>))]
  public class ImagingStudySeries : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Availability of series (online, offline or nearline).
    /// </summary>
    public string Availability { get; set; }
    /// <summary>
    /// Extension container element for Availability
    /// </summary>
    public Element _Availability { get; set; }
    /// <summary>
    /// The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.
    /// </summary>
    public Coding BodySite { get; set; }
    /// <summary>
    /// A description of the series.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG) formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; and DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances.
    /// </summary>
    public List<Reference> Endpoint { get; set; }
    /// <summary>
    /// A single SOP instance within the series, e.g. an image, or presentation state.
    /// </summary>
    public List<ImagingStudySeriesInstance> Instance { get; set; }
    /// <summary>
    /// The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.
    /// </summary>
    public Coding Laterality { get; set; }
    /// <summary>
    /// The modality of this series sequence.
    /// </summary>
    public Coding Modality { get; set; }
    /// <summary>
    /// The numeric identifier of this series in the study.
    /// </summary>
    public uint? Number { get; set; }
    /// <summary>
    /// Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
    /// </summary>
    public uint? NumberOfInstances { get; set; }
    /// <summary>
    /// The physician or operator (often the radiology technician)  who performed the series. The performer is recorded at the series level, since each series in a study may be performed by a different practitioner, at different times, and using different devices. A series may be performed by multiple practitioners.
    /// </summary>
    public List<Reference> Performer { get; set; }
    /// <summary>
    /// The date and time the series was started.
    /// </summary>
    public string Started { get; set; }
    /// <summary>
    /// Extension container element for Started
    /// </summary>
    public Element _Started { get; set; }
    /// <summary>
    /// Formal identifier for this series.
    /// </summary>
    public string Uid { get; set; }
    /// <summary>
    /// Extension container element for Uid
    /// </summary>
    public Element _Uid { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Uid))
      {
        writer.WriteString("uid", (string)Uid!);
      }

      if (_Uid != null)
      {
        writer.WritePropertyName("_uid");
        _Uid.SerializeJson(writer, options);
      }

      if (Number != null)
      {
        writer.WriteNumber("number", (uint)Number!);
      }

      if (Modality != null)
      {
        writer.WritePropertyName("modality");
        Modality.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (NumberOfInstances != null)
      {
        writer.WriteNumber("numberOfInstances", (uint)NumberOfInstances!);
      }

      if (!string.IsNullOrEmpty(Availability))
      {
        writer.WriteString("availability", (string)Availability!);
      }

      if (_Availability != null)
      {
        writer.WritePropertyName("_availability");
        _Availability.SerializeJson(writer, options);
      }

      if ((Endpoint != null) && (Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();

        foreach (Reference valEndpoint in Endpoint)
        {
          valEndpoint.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (BodySite != null)
      {
        writer.WritePropertyName("bodySite");
        BodySite.SerializeJson(writer, options);
      }

      if (Laterality != null)
      {
        writer.WritePropertyName("laterality");
        Laterality.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Started))
      {
        writer.WriteString("started", (string)Started!);
      }

      if (_Started != null)
      {
        writer.WritePropertyName("_started");
        _Started.SerializeJson(writer, options);
      }

      if ((Performer != null) && (Performer.Count != 0))
      {
        writer.WritePropertyName("performer");
        writer.WriteStartArray();

        foreach (Reference valPerformer in Performer)
        {
          valPerformer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Instance != null) && (Instance.Count != 0))
      {
        writer.WritePropertyName("instance");
        writer.WriteStartArray();

        foreach (ImagingStudySeriesInstance valInstance in Instance)
        {
          valInstance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "availability":
          Availability = reader.GetString();
          break;

        case "_availability":
          _Availability = new fhirCsR3.Models.Element();
          _Availability.DeserializeJson(ref reader, options);
          break;

        case "bodySite":
          BodySite = new fhirCsR3.Models.Coding();
          BodySite.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Endpoint = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objEndpoint = new fhirCsR3.Models.Reference();
            objEndpoint.DeserializeJson(ref reader, options);
            Endpoint.Add(objEndpoint);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Endpoint.Count == 0)
          {
            Endpoint = null;
          }

          break;

        case "instance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Instance = new List<ImagingStudySeriesInstance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ImagingStudySeriesInstance objInstance = new fhirCsR3.Models.ImagingStudySeriesInstance();
            objInstance.DeserializeJson(ref reader, options);
            Instance.Add(objInstance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Instance.Count == 0)
          {
            Instance = null;
          }

          break;

        case "laterality":
          Laterality = new fhirCsR3.Models.Coding();
          Laterality.DeserializeJson(ref reader, options);
          break;

        case "modality":
          Modality = new fhirCsR3.Models.Coding();
          Modality.DeserializeJson(ref reader, options);
          break;

        case "number":
          Number = reader.GetUInt32();
          break;

        case "numberOfInstances":
          NumberOfInstances = reader.GetUInt32();
          break;

        case "performer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Performer = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objPerformer = new fhirCsR3.Models.Reference();
            objPerformer.DeserializeJson(ref reader, options);
            Performer.Add(objPerformer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Performer.Count == 0)
          {
            Performer = null;
          }

          break;

        case "started":
          Started = reader.GetString();
          break;

        case "_started":
          _Started = new fhirCsR3.Models.Element();
          _Started.DeserializeJson(ref reader, options);
          break;

        case "uid":
          Uid = reader.GetString();
          break;

        case "_uid":
          _Uid = new fhirCsR3.Models.Element();
          _Uid.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ImagingStudy.series.availability field
  /// </summary>
  public static class ImagingStudySeriesAvailabilityCodes {
    public const string ONLINE = "ONLINE";
    public const string OFFLINE = "OFFLINE";
    public const string NEARLINE = "NEARLINE";
    public const string UNAVAILABLE = "UNAVAILABLE";
  }
  /// <summary>
  /// Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ImagingStudy>))]
  public class ImagingStudy : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ImagingStudy";
    /// <summary>
    /// Accession Number is an identifier related to some aspect of imaging workflow and data management. Usage may vary across different institutions.  See for instance [IHE Radiology Technical Framework Volume 1 Appendix A](http://www.ihe.net/uploadedFiles/Documents/Radiology/IHE_RAD_TF_Rev13.0_Vol1_FT_2014-07-30.pdf).
    /// </summary>
    public Identifier Accession { get; set; }
    /// <summary>
    /// Availability of study (online, offline, or nearline).
    /// </summary>
    public string Availability { get; set; }
    /// <summary>
    /// Extension container element for Availability
    /// </summary>
    public Element _Availability { get; set; }
    /// <summary>
    /// A list of the diagnostic requests that resulted in this imaging study being performed.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// The encounter or episode at which the request is initiated.
    /// </summary>
    public Reference Context { get; set; }
    /// <summary>
    /// Institution-generated description or classification of the Study performed.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG), formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances; or IHE Invoke Image Display (IID), which provides standard invocation of an imaging web viewer.
    /// </summary>
    public List<Reference> Endpoint { get; set; }
    /// <summary>
    /// Other identifiers for the study.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Who read the study and interpreted the images or other content.
    /// </summary>
    public List<Reference> Interpreter { get; set; }
    /// <summary>
    /// A list of all the Series.ImageModality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
    /// </summary>
    public List<Coding> ModalityList { get; set; }
    /// <summary>
    /// Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
    /// </summary>
    public uint? NumberOfInstances { get; set; }
    /// <summary>
    /// Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present.
    /// </summary>
    public uint? NumberOfSeries { get; set; }
    /// <summary>
    /// The patient imaged in the study.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// The code for the performed procedure type.
    /// </summary>
    public List<CodeableConcept> ProcedureCode { get; set; }
    /// <summary>
    /// A reference to the performed Procedure.
    /// </summary>
    public List<Reference> ProcedureReference { get; set; }
    /// <summary>
    /// Description of clinical condition indicating why the ImagingStudy was requested.
    /// </summary>
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// The requesting/referring physician.
    /// </summary>
    public Reference Referrer { get; set; }
    /// <summary>
    /// Each study has one or more series of images or other content.
    /// </summary>
    public List<ImagingStudySeries> Series { get; set; }
    /// <summary>
    /// Date and time the study started.
    /// </summary>
    public string Started { get; set; }
    /// <summary>
    /// Extension container element for Started
    /// </summary>
    public Element _Started { get; set; }
    /// <summary>
    /// Formal identifier for the study.
    /// </summary>
    public string Uid { get; set; }
    /// <summary>
    /// Extension container element for Uid
    /// </summary>
    public Element _Uid { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Uid))
      {
        writer.WriteString("uid", (string)Uid!);
      }

      if (_Uid != null)
      {
        writer.WritePropertyName("_uid");
        _Uid.SerializeJson(writer, options);
      }

      if (Accession != null)
      {
        writer.WritePropertyName("accession");
        Accession.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Availability))
      {
        writer.WriteString("availability", (string)Availability!);
      }

      if (_Availability != null)
      {
        writer.WritePropertyName("_availability");
        _Availability.SerializeJson(writer, options);
      }

      if ((ModalityList != null) && (ModalityList.Count != 0))
      {
        writer.WritePropertyName("modalityList");
        writer.WriteStartArray();

        foreach (Coding valModalityList in ModalityList)
        {
          valModalityList.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (Context != null)
      {
        writer.WritePropertyName("context");
        Context.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Started))
      {
        writer.WriteString("started", (string)Started!);
      }

      if (_Started != null)
      {
        writer.WritePropertyName("_started");
        _Started.SerializeJson(writer, options);
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Referrer != null)
      {
        writer.WritePropertyName("referrer");
        Referrer.SerializeJson(writer, options);
      }

      if ((Interpreter != null) && (Interpreter.Count != 0))
      {
        writer.WritePropertyName("interpreter");
        writer.WriteStartArray();

        foreach (Reference valInterpreter in Interpreter)
        {
          valInterpreter.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Endpoint != null) && (Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();

        foreach (Reference valEndpoint in Endpoint)
        {
          valEndpoint.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (NumberOfSeries != null)
      {
        writer.WriteNumber("numberOfSeries", (uint)NumberOfSeries!);
      }

      if (NumberOfInstances != null)
      {
        writer.WriteNumber("numberOfInstances", (uint)NumberOfInstances!);
      }

      if ((ProcedureReference != null) && (ProcedureReference.Count != 0))
      {
        writer.WritePropertyName("procedureReference");
        writer.WriteStartArray();

        foreach (Reference valProcedureReference in ProcedureReference)
        {
          valProcedureReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ProcedureCode != null) && (ProcedureCode.Count != 0))
      {
        writer.WritePropertyName("procedureCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valProcedureCode in ProcedureCode)
        {
          valProcedureCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Reason != null)
      {
        writer.WritePropertyName("reason");
        Reason.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Series != null) && (Series.Count != 0))
      {
        writer.WritePropertyName("series");
        writer.WriteStartArray();

        foreach (ImagingStudySeries valSeries in Series)
        {
          valSeries.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "accession":
          Accession = new fhirCsR3.Models.Identifier();
          Accession.DeserializeJson(ref reader, options);
          break;

        case "availability":
          Availability = reader.GetString();
          break;

        case "_availability":
          _Availability = new fhirCsR3.Models.Element();
          _Availability.DeserializeJson(ref reader, options);
          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objBasedOn = new fhirCsR3.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "context":
          Context = new fhirCsR3.Models.Reference();
          Context.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Endpoint = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objEndpoint = new fhirCsR3.Models.Reference();
            objEndpoint.DeserializeJson(ref reader, options);
            Endpoint.Add(objEndpoint);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Endpoint.Count == 0)
          {
            Endpoint = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Identifier objIdentifier = new fhirCsR3.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "interpreter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Interpreter = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objInterpreter = new fhirCsR3.Models.Reference();
            objInterpreter.DeserializeJson(ref reader, options);
            Interpreter.Add(objInterpreter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Interpreter.Count == 0)
          {
            Interpreter = null;
          }

          break;

        case "modalityList":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ModalityList = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Coding objModalityList = new fhirCsR3.Models.Coding();
            objModalityList.DeserializeJson(ref reader, options);
            ModalityList.Add(objModalityList);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ModalityList.Count == 0)
          {
            ModalityList = null;
          }

          break;

        case "numberOfInstances":
          NumberOfInstances = reader.GetUInt32();
          break;

        case "numberOfSeries":
          NumberOfSeries = reader.GetUInt32();
          break;

        case "patient":
          Patient = new fhirCsR3.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "procedureCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProcedureCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objProcedureCode = new fhirCsR3.Models.CodeableConcept();
            objProcedureCode.DeserializeJson(ref reader, options);
            ProcedureCode.Add(objProcedureCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProcedureCode.Count == 0)
          {
            ProcedureCode = null;
          }

          break;

        case "procedureReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProcedureReference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objProcedureReference = new fhirCsR3.Models.Reference();
            objProcedureReference.DeserializeJson(ref reader, options);
            ProcedureReference.Add(objProcedureReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProcedureReference.Count == 0)
          {
            ProcedureReference = null;
          }

          break;

        case "reason":
          Reason = new fhirCsR3.Models.CodeableConcept();
          Reason.DeserializeJson(ref reader, options);
          break;

        case "referrer":
          Referrer = new fhirCsR3.Models.Reference();
          Referrer.DeserializeJson(ref reader, options);
          break;

        case "series":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Series = new List<ImagingStudySeries>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ImagingStudySeries objSeries = new fhirCsR3.Models.ImagingStudySeries();
            objSeries.DeserializeJson(ref reader, options);
            Series.Add(objSeries);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Series.Count == 0)
          {
            Series = null;
          }

          break;

        case "started":
          Started = reader.GetString();
          break;

        case "_started":
          _Started = new fhirCsR3.Models.Element();
          _Started.DeserializeJson(ref reader, options);
          break;

        case "uid":
          Uid = reader.GetString();
          break;

        case "_uid":
          _Uid = new fhirCsR3.Models.Element();
          _Uid.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ImagingStudy.availability field
  /// </summary>
  public static class ImagingStudyAvailabilityCodes {
    public const string ONLINE = "ONLINE";
    public const string OFFLINE = "OFFLINE";
    public const string NEARLINE = "NEARLINE";
    public const string UNAVAILABLE = "UNAVAILABLE";
  }
}
