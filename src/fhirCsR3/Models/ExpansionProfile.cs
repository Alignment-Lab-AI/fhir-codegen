// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// Fix use of a particular code system to a particular version.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExpansionProfileFixedVersion>))]
  public class ExpansionProfileFixedVersion : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// How to manage the intersection between a fixed version in a value set, and this fixed version of the system in the expansion profile.
    /// </summary>
    public string Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public Element _Mode { get; set; }
    /// <summary>
    /// See ''Coding.system'' for further documentation.
    /// </summary>
    public string System { get; set; }
    /// <summary>
    /// Extension container element for System
    /// </summary>
    public Element _System { get; set; }
    /// <summary>
    /// The version of the code system from which codes in the expansion should be included.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(System))
      {
        writer.WriteString("system", (string)System!);
      }

      if (_System != null)
      {
        writer.WritePropertyName("_system");
        _System.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Mode))
      {
        writer.WriteString("mode", (string)Mode!);
      }

      if (_Mode != null)
      {
        writer.WritePropertyName("_mode");
        _Mode.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          Mode = reader.GetString();
          break;

        case "_mode":
          _Mode = new fhirCsR3.Models.Element();
          _Mode.DeserializeJson(ref reader, options);
          break;

        case "system":
          System = reader.GetString();
          break;

        case "_system":
          _System = new fhirCsR3.Models.Element();
          _System.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR3.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ExpansionProfile.fixedVersion.mode field
  /// </summary>
  public static class ExpansionProfileFixedVersionModeCodes {
    public const string VAL_DEFAULT = "default";
    public const string CHECK = "check";
    public const string VAL_OVERRIDE = "override";
    public static HashSet<string> Values = new HashSet<string>() {
      "default",
      "check",
      "override",
    };
  }
  /// <summary>
  /// When a system is excluded, and this makes a material difference to the expansion, the exclusion SHALL  be noted in the expansion parameters using a parameter 'excluded'.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExpansionProfileExcludedSystem>))]
  public class ExpansionProfileExcludedSystem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// See ''Coding.system'' for further documentation.
    /// </summary>
    public string System { get; set; }
    /// <summary>
    /// Extension container element for System
    /// </summary>
    public Element _System { get; set; }
    /// <summary>
    /// This is used to apply version specifc exclusion contraints. If no version is specified, then all codes from the code system present in the expansion (prior to application of the expansion profile) will be excluded.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(System))
      {
        writer.WriteString("system", (string)System!);
      }

      if (_System != null)
      {
        writer.WritePropertyName("_system");
        _System.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "system":
          System = reader.GetString();
          break;

        case "_system":
          _System = new fhirCsR3.Models.Element();
          _System.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR3.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// At least one of designation.language or designation.use must be provided for each include.designation element.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExpansionProfileDesignationIncludeDesignation>))]
  public class ExpansionProfileDesignationIncludeDesignation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// In the absence of a language, all designations are retained which match the designation.use parameter for this include.designation.
    /// </summary>
    public string Language { get; set; }
    /// <summary>
    /// Extension container element for Language
    /// </summary>
    public Element _Language { get; set; }
    /// <summary>
    /// In the absence of a use, all designations are retained which match the designation.language parameter for this include.designation element.
    /// </summary>
    public Coding Use { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Language))
      {
        writer.WriteString("language", (string)Language!);
      }

      if (_Language != null)
      {
        writer.WritePropertyName("_language");
        _Language.SerializeJson(writer, options);
      }

      if (Use != null)
      {
        writer.WritePropertyName("use");
        Use.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "language":
          Language = reader.GetString();
          break;

        case "_language":
          _Language = new fhirCsR3.Models.Element();
          _Language.DeserializeJson(ref reader, options);
          break;

        case "use":
          Use = new fhirCsR3.Models.Coding();
          Use.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Designations to be included.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExpansionProfileDesignationInclude>))]
  public class ExpansionProfileDesignationInclude : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// At least one of designation.language or designation.use must be provided for each include.designation element.
    /// </summary>
    public List<ExpansionProfileDesignationIncludeDesignation> Designation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Designation != null) && (Designation.Count != 0))
      {
        writer.WritePropertyName("designation");
        writer.WriteStartArray();

        foreach (ExpansionProfileDesignationIncludeDesignation valDesignation in Designation)
        {
          valDesignation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "designation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Designation = new List<ExpansionProfileDesignationIncludeDesignation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExpansionProfileDesignationIncludeDesignation objDesignation = new fhirCsR3.Models.ExpansionProfileDesignationIncludeDesignation();
            objDesignation.DeserializeJson(ref reader, options);
            Designation.Add(objDesignation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Designation.Count == 0)
          {
            Designation = null;
          }

          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// At least one of designation.language or designation.use must be provided for each exclude.designation element.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExpansionProfileDesignationExcludeDesignation>))]
  public class ExpansionProfileDesignationExcludeDesignation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// In the absence of a language, all designations are excluded which match the designation.use parameter for this exclude.designation element.
    /// </summary>
    public string Language { get; set; }
    /// <summary>
    /// Extension container element for Language
    /// </summary>
    public Element _Language { get; set; }
    /// <summary>
    /// In the absence of a use, all designations are retained which match the designation.language parameter for this exclude.designation element.
    /// </summary>
    public Coding Use { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Language))
      {
        writer.WriteString("language", (string)Language!);
      }

      if (_Language != null)
      {
        writer.WritePropertyName("_language");
        _Language.SerializeJson(writer, options);
      }

      if (Use != null)
      {
        writer.WritePropertyName("use");
        Use.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "language":
          Language = reader.GetString();
          break;

        case "_language":
          _Language = new fhirCsR3.Models.Element();
          _Language.DeserializeJson(ref reader, options);
          break;

        case "use":
          Use = new fhirCsR3.Models.Coding();
          Use.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Designations to be excluded.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExpansionProfileDesignationExclude>))]
  public class ExpansionProfileDesignationExclude : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// At least one of designation.language or designation.use must be provided for each exclude.designation element.
    /// </summary>
    public List<ExpansionProfileDesignationExcludeDesignation> Designation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Designation != null) && (Designation.Count != 0))
      {
        writer.WritePropertyName("designation");
        writer.WriteStartArray();

        foreach (ExpansionProfileDesignationExcludeDesignation valDesignation in Designation)
        {
          valDesignation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "designation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Designation = new List<ExpansionProfileDesignationExcludeDesignation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExpansionProfileDesignationExcludeDesignation objDesignation = new fhirCsR3.Models.ExpansionProfileDesignationExcludeDesignation();
            objDesignation.DeserializeJson(ref reader, options);
            Designation.Add(objDesignation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Designation.Count == 0)
          {
            Designation = null;
          }

          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A set of criteria that provide the constraints imposed on the value set expansion by including or excluding designations.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExpansionProfileDesignation>))]
  public class ExpansionProfileDesignation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Designations to be excluded.
    /// </summary>
    public ExpansionProfileDesignationExclude Exclude { get; set; }
    /// <summary>
    /// Designations to be included.
    /// </summary>
    public ExpansionProfileDesignationInclude Include { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Include != null)
      {
        writer.WritePropertyName("include");
        Include.SerializeJson(writer, options);
      }

      if (Exclude != null)
      {
        writer.WritePropertyName("exclude");
        Exclude.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "exclude":
          Exclude = new fhirCsR3.Models.ExpansionProfileDesignationExclude();
          Exclude.DeserializeJson(ref reader, options);
          break;

        case "include":
          Include = new fhirCsR3.Models.ExpansionProfileDesignationInclude();
          Include.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Resource to define constraints on the Expansion of a FHIR ValueSet.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ExpansionProfile>))]
  public class ExpansionProfile : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ExpansionProfile";
    /// <summary>
    /// Inactive codes are included if activeOnly is present and has a value of "true". Note that if the value set explicitly specifies that inactive codes are included, this property can still remove them from a specific expansion, but this parameter cannot include them if the value set excludes them.
    /// </summary>
    public bool? ActiveOnly { get; set; }
    /// <summary>
    /// Extension container element for ActiveOnly
    /// </summary>
    public Element _ActiveOnly { get; set; }
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the expansion profile. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the expansion profile was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the expansion profile as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// A set of criteria that provide the constraints imposed on the value set expansion by including or excluding designations.
    /// </summary>
    public ExpansionProfileDesignation Designation { get; set; }
    /// <summary>
    /// Specifies the language to be used for description in the expansions i.e. the language to be used for ValueSet.expansion.contains.display.
    /// </summary>
    public string DisplayLanguage { get; set; }
    /// <summary>
    /// Extension container element for DisplayLanguage
    /// </summary>
    public Element _DisplayLanguage { get; set; }
    /// <summary>
    /// When a system is excluded, and this makes a material difference to the expansion, the exclusion SHALL  be noted in the expansion parameters using a parameter 'excluded'.
    /// </summary>
    public ExpansionProfileExcludedSystem ExcludedSystem { get; set; }
    /// <summary>
    /// Nesting of codes is excluded if excludeNested is present and has a value of "true".
    /// </summary>
    public bool? ExcludeNested { get; set; }
    /// <summary>
    /// Extension container element for ExcludeNested
    /// </summary>
    public Element _ExcludeNested { get; set; }
    /// <summary>
    /// Codes which cannot be used in user interfaces will be excluded if excludeNotForUI is present and has a value of "true".
    /// </summary>
    public bool? ExcludeNotForUI { get; set; }
    /// <summary>
    /// Extension container element for ExcludeNotForUI
    /// </summary>
    public Element _ExcludeNotForUI { get; set; }
    /// <summary>
    /// Post coordinated codes are excluded if excludePostCoordinated is present and has a value of "true".
    /// </summary>
    public bool? ExcludePostCoordinated { get; set; }
    /// <summary>
    /// Extension container element for ExcludePostCoordinated
    /// </summary>
    public Element _ExcludePostCoordinated { get; set; }
    /// <summary>
    /// Allows filtering of expansion profile that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental expansion profile in production.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Extension container element for Experimental
    /// </summary>
    public Element _Experimental { get; set; }
    /// <summary>
    /// Fix use of a particular code system to a particular version.
    /// </summary>
    public List<ExpansionProfileFixedVersion> FixedVersion { get; set; }
    /// <summary>
    /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this expansion profile outside of FHIR, where it is not possible to use the logical URI.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// The ValueSet defintion refers to all fields in the ValueSet definition apart from  ValueSet.contains. The definition is only included if includeDefinition is present and has a value of "true".
    /// </summary>
    public bool? IncludeDefinition { get; set; }
    /// <summary>
    /// Extension container element for IncludeDefinition
    /// </summary>
    public Element _IncludeDefinition { get; set; }
    /// <summary>
    /// ExpansionProfile.designation.include and ExpansionProfile.designation.exclude are only evaluated if includeDesignations is present and set to "true". If includeDesignations is present with a value of "true" and both ExpansionProfile.designation.include and ExpansionProfile.designation.exclude are absent, then all designations are returned in the expansion.
    /// </summary>
    public bool? IncludeDesignations { get; set; }
    /// <summary>
    /// Extension container element for IncludeDesignations
    /// </summary>
    public Element _IncludeDesignations { get; set; }
    /// <summary>
    /// It may be possible for the expansion profile to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// This field overides the default behaviour (which is to return an error). This does not apply to expansions which are unbounded. Clients SHALL process the extension [http://hl7.org/fhir/StructureDefinition/valueset-toocostly](extension-valueset-toocostly.html) correctly if limitedExpansion = true.
    /// </summary>
    public bool? LimitedExpansion { get; set; }
    /// <summary>
    /// Extension container element for LimitedExpansion
    /// </summary>
    public Element _LimitedExpansion { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Usually an organization, but may be an individual. The publisher (or steward) of the expansion profile is the organization or individual primarily responsible for the maintenance and upkeep of the expansion profile. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the expansion profile. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// Allows filtering of expansion profiles that are appropriate for use vs. not.  
    /// This is labeled as "Is Modifier" because applications should not use a retired expansion profile without due consideration.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different expansion profile instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the expansion profile with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (_Experimental != null)
      {
        writer.WritePropertyName("_experimental");
        _Experimental.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((FixedVersion != null) && (FixedVersion.Count != 0))
      {
        writer.WritePropertyName("fixedVersion");
        writer.WriteStartArray();

        foreach (ExpansionProfileFixedVersion valFixedVersion in FixedVersion)
        {
          valFixedVersion.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ExcludedSystem != null)
      {
        writer.WritePropertyName("excludedSystem");
        ExcludedSystem.SerializeJson(writer, options);
      }

      if (IncludeDesignations != null)
      {
        writer.WriteBoolean("includeDesignations", (bool)IncludeDesignations!);
      }

      if (_IncludeDesignations != null)
      {
        writer.WritePropertyName("_includeDesignations");
        _IncludeDesignations.SerializeJson(writer, options);
      }

      if (Designation != null)
      {
        writer.WritePropertyName("designation");
        Designation.SerializeJson(writer, options);
      }

      if (IncludeDefinition != null)
      {
        writer.WriteBoolean("includeDefinition", (bool)IncludeDefinition!);
      }

      if (_IncludeDefinition != null)
      {
        writer.WritePropertyName("_includeDefinition");
        _IncludeDefinition.SerializeJson(writer, options);
      }

      if (ActiveOnly != null)
      {
        writer.WriteBoolean("activeOnly", (bool)ActiveOnly!);
      }

      if (_ActiveOnly != null)
      {
        writer.WritePropertyName("_activeOnly");
        _ActiveOnly.SerializeJson(writer, options);
      }

      if (ExcludeNested != null)
      {
        writer.WriteBoolean("excludeNested", (bool)ExcludeNested!);
      }

      if (_ExcludeNested != null)
      {
        writer.WritePropertyName("_excludeNested");
        _ExcludeNested.SerializeJson(writer, options);
      }

      if (ExcludeNotForUI != null)
      {
        writer.WriteBoolean("excludeNotForUI", (bool)ExcludeNotForUI!);
      }

      if (_ExcludeNotForUI != null)
      {
        writer.WritePropertyName("_excludeNotForUI");
        _ExcludeNotForUI.SerializeJson(writer, options);
      }

      if (ExcludePostCoordinated != null)
      {
        writer.WriteBoolean("excludePostCoordinated", (bool)ExcludePostCoordinated!);
      }

      if (_ExcludePostCoordinated != null)
      {
        writer.WritePropertyName("_excludePostCoordinated");
        _ExcludePostCoordinated.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DisplayLanguage))
      {
        writer.WriteString("displayLanguage", (string)DisplayLanguage!);
      }

      if (_DisplayLanguage != null)
      {
        writer.WritePropertyName("_displayLanguage");
        _DisplayLanguage.SerializeJson(writer, options);
      }

      if (LimitedExpansion != null)
      {
        writer.WriteBoolean("limitedExpansion", (bool)LimitedExpansion!);
      }

      if (_LimitedExpansion != null)
      {
        writer.WritePropertyName("_limitedExpansion");
        _LimitedExpansion.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "activeOnly":
          ActiveOnly = reader.GetBoolean();
          break;

        case "_activeOnly":
          _ActiveOnly = new fhirCsR3.Models.Element();
          _ActiveOnly.DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ContactDetail objContact = new fhirCsR3.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR3.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "designation":
          Designation = new fhirCsR3.Models.ExpansionProfileDesignation();
          Designation.DeserializeJson(ref reader, options);
          break;

        case "displayLanguage":
          DisplayLanguage = reader.GetString();
          break;

        case "_displayLanguage":
          _DisplayLanguage = new fhirCsR3.Models.Element();
          _DisplayLanguage.DeserializeJson(ref reader, options);
          break;

        case "excludedSystem":
          ExcludedSystem = new fhirCsR3.Models.ExpansionProfileExcludedSystem();
          ExcludedSystem.DeserializeJson(ref reader, options);
          break;

        case "excludeNested":
          ExcludeNested = reader.GetBoolean();
          break;

        case "_excludeNested":
          _ExcludeNested = new fhirCsR3.Models.Element();
          _ExcludeNested.DeserializeJson(ref reader, options);
          break;

        case "excludeNotForUI":
          ExcludeNotForUI = reader.GetBoolean();
          break;

        case "_excludeNotForUI":
          _ExcludeNotForUI = new fhirCsR3.Models.Element();
          _ExcludeNotForUI.DeserializeJson(ref reader, options);
          break;

        case "excludePostCoordinated":
          ExcludePostCoordinated = reader.GetBoolean();
          break;

        case "_excludePostCoordinated":
          _ExcludePostCoordinated = new fhirCsR3.Models.Element();
          _ExcludePostCoordinated.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "_experimental":
          _Experimental = new fhirCsR3.Models.Element();
          _Experimental.DeserializeJson(ref reader, options);
          break;

        case "fixedVersion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          FixedVersion = new List<ExpansionProfileFixedVersion>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ExpansionProfileFixedVersion objFixedVersion = new fhirCsR3.Models.ExpansionProfileFixedVersion();
            objFixedVersion.DeserializeJson(ref reader, options);
            FixedVersion.Add(objFixedVersion);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (FixedVersion.Count == 0)
          {
            FixedVersion = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR3.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "includeDefinition":
          IncludeDefinition = reader.GetBoolean();
          break;

        case "_includeDefinition":
          _IncludeDefinition = new fhirCsR3.Models.Element();
          _IncludeDefinition.DeserializeJson(ref reader, options);
          break;

        case "includeDesignations":
          IncludeDesignations = reader.GetBoolean();
          break;

        case "_includeDesignations":
          _IncludeDesignations = new fhirCsR3.Models.Element();
          _IncludeDesignations.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objJurisdiction = new fhirCsR3.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "limitedExpansion":
          LimitedExpansion = reader.GetBoolean();
          break;

        case "_limitedExpansion":
          _LimitedExpansion = new fhirCsR3.Models.Element();
          _LimitedExpansion.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR3.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR3.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR3.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.UsageContext objUseContext = new fhirCsR3.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR3.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ExpansionProfile.status field
  /// </summary>
  public static class ExpansionProfileStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
      "unknown",
    };
  }
}
