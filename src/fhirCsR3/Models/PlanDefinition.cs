// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// Indicates what should be done and within what timeframe.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<PlanDefinitionGoalTarget>))]
  public class PlanDefinitionGoalTarget : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. Whan a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
    /// </summary>
    public Quantity DetailQuantity { get; set; }
    /// <summary>
    /// The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. Whan a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
    /// </summary>
    public Range DetailRange { get; set; }
    /// <summary>
    /// The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. Whan a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
    /// </summary>
    public CodeableConcept DetailCodeableConcept { get; set; }
    /// <summary>
    /// Indicates the timeframe after the start of the goal in which the goal should be met.
    /// </summary>
    public Duration Due { get; set; }
    /// <summary>
    /// The parameter whose value is to be tracked, e.g. body weigth, blood pressure, or hemoglobin A1c level.
    /// </summary>
    public CodeableConcept Measure { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Measure != null)
      {
        writer.WritePropertyName("measure");
        Measure.SerializeJson(writer, options);
      }

      if (DetailQuantity != null)
      {
        writer.WritePropertyName("detailQuantity");
        DetailQuantity.SerializeJson(writer, options);
      }

      if (DetailRange != null)
      {
        writer.WritePropertyName("detailRange");
        DetailRange.SerializeJson(writer, options);
      }

      if (DetailCodeableConcept != null)
      {
        writer.WritePropertyName("detailCodeableConcept");
        DetailCodeableConcept.SerializeJson(writer, options);
      }

      if (Due != null)
      {
        writer.WritePropertyName("due");
        Due.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "detailQuantity":
          DetailQuantity = new fhirCsR3.Models.Quantity();
          DetailQuantity.DeserializeJson(ref reader, options);
          break;

        case "detailRange":
          DetailRange = new fhirCsR3.Models.Range();
          DetailRange.DeserializeJson(ref reader, options);
          break;

        case "detailCodeableConcept":
          DetailCodeableConcept = new fhirCsR3.Models.CodeableConcept();
          DetailCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "due":
          Due = new fhirCsR3.Models.Duration();
          Due.DeserializeJson(ref reader, options);
          break;

        case "measure":
          Measure = new fhirCsR3.Models.CodeableConcept();
          Measure.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<PlanDefinitionGoal>))]
  public class PlanDefinitionGoal : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Identifies problems, conditions, issues, or concerns the goal is intended to address.
    /// </summary>
    public List<CodeableConcept> Addresses { get; set; }
    /// <summary>
    /// Indicates a category the goal falls within.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// If no code is available, use CodeableConcept.text.
    /// </summary>
    public CodeableConcept Description { get; set; }
    /// <summary>
    /// Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.
    /// </summary>
    public List<RelatedArtifact> Documentation { get; set; }
    /// <summary>
    /// Identifies the expected level of importance associated with reaching/sustaining the defined goal.
    /// </summary>
    public CodeableConcept Priority { get; set; }
    /// <summary>
    /// The event after which the goal should begin being pursued.
    /// </summary>
    public CodeableConcept Start { get; set; }
    /// <summary>
    /// Indicates what should be done and within what timeframe.
    /// </summary>
    public List<PlanDefinitionGoalTarget> Target { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Description != null)
      {
        writer.WritePropertyName("description");
        Description.SerializeJson(writer, options);
      }

      if (Priority != null)
      {
        writer.WritePropertyName("priority");
        Priority.SerializeJson(writer, options);
      }

      if (Start != null)
      {
        writer.WritePropertyName("start");
        Start.SerializeJson(writer, options);
      }

      if ((Addresses != null) && (Addresses.Count != 0))
      {
        writer.WritePropertyName("addresses");
        writer.WriteStartArray();

        foreach (CodeableConcept valAddresses in Addresses)
        {
          valAddresses.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Documentation != null) && (Documentation.Count != 0))
      {
        writer.WritePropertyName("documentation");
        writer.WriteStartArray();

        foreach (RelatedArtifact valDocumentation in Documentation)
        {
          valDocumentation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Target != null) && (Target.Count != 0))
      {
        writer.WritePropertyName("target");
        writer.WriteStartArray();

        foreach (PlanDefinitionGoalTarget valTarget in Target)
        {
          valTarget.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "addresses":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Addresses = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objAddresses = new fhirCsR3.Models.CodeableConcept();
            objAddresses.DeserializeJson(ref reader, options);
            Addresses.Add(objAddresses);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Addresses.Count == 0)
          {
            Addresses = null;
          }

          break;

        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = new fhirCsR3.Models.CodeableConcept();
          Description.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Documentation = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.RelatedArtifact objDocumentation = new fhirCsR3.Models.RelatedArtifact();
            objDocumentation.DeserializeJson(ref reader, options);
            Documentation.Add(objDocumentation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Documentation.Count == 0)
          {
            Documentation = null;
          }

          break;

        case "priority":
          Priority = new fhirCsR3.Models.CodeableConcept();
          Priority.DeserializeJson(ref reader, options);
          break;

        case "start":
          Start = new fhirCsR3.Models.CodeableConcept();
          Start.DeserializeJson(ref reader, options);
          break;

        case "target":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Target = new List<PlanDefinitionGoalTarget>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.PlanDefinitionGoalTarget objTarget = new fhirCsR3.Models.PlanDefinitionGoalTarget();
            objTarget.DeserializeJson(ref reader, options);
            Target.Add(objTarget);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Target.Count == 0)
          {
            Target = null;
          }

          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An expression that describes applicability criteria, or start/stop conditions for the action.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<PlanDefinitionActionCondition>))]
  public class PlanDefinitionActionCondition : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A brief, natural language description of the condition that effectively communicates the intended semantics.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
    /// </summary>
    public string Expression { get; set; }
    /// <summary>
    /// Extension container element for Expression
    /// </summary>
    public Element _Expression { get; set; }
    /// <summary>
    /// Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe when enter/exit criteria for an action.
    /// </summary>
    public string Kind { get; set; }
    /// <summary>
    /// Extension container element for Kind
    /// </summary>
    public Element _Kind { get; set; }
    /// <summary>
    /// The media type of the language for the expression.
    /// </summary>
    public string Language { get; set; }
    /// <summary>
    /// Extension container element for Language
    /// </summary>
    public Element _Language { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Kind))
      {
        writer.WriteString("kind", (string)Kind!);
      }

      if (_Kind != null)
      {
        writer.WritePropertyName("_kind");
        _Kind.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Language))
      {
        writer.WriteString("language", (string)Language!);
      }

      if (_Language != null)
      {
        writer.WritePropertyName("_language");
        _Language.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Expression))
      {
        writer.WriteString("expression", (string)Expression!);
      }

      if (_Expression != null)
      {
        writer.WritePropertyName("_expression");
        _Expression.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "expression":
          Expression = reader.GetString();
          break;

        case "_expression":
          _Expression = new fhirCsR3.Models.Element();
          _Expression.DeserializeJson(ref reader, options);
          break;

        case "kind":
          Kind = reader.GetString();
          break;

        case "_kind":
          _Kind = new fhirCsR3.Models.Element();
          _Kind.DeserializeJson(ref reader, options);
          break;

        case "language":
          Language = reader.GetString();
          break;

        case "_language":
          _Language = new fhirCsR3.Models.Element();
          _Language.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.condition.kind field
  /// </summary>
  public static class PlanDefinitionActionConditionKindCodes {
    public const string APPLICABILITY = "applicability";
    public const string START = "start";
    public const string STOP = "stop";
    public static HashSet<string> Values = new HashSet<string>() {
      "applicability",
      "start",
      "stop",
    };
  }
  /// <summary>
  /// When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<PlanDefinitionActionRelatedAction>))]
  public class PlanDefinitionActionRelatedAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The element id of the related action.
    /// </summary>
    public string ActionId { get; set; }
    /// <summary>
    /// Extension container element for ActionId
    /// </summary>
    public Element _ActionId { get; set; }
    /// <summary>
    /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
    /// </summary>
    public Duration OffsetDuration { get; set; }
    /// <summary>
    /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
    /// </summary>
    public Range OffsetRange { get; set; }
    /// <summary>
    /// The relationship of this action to the related action.
    /// </summary>
    public string Relationship { get; set; }
    /// <summary>
    /// Extension container element for Relationship
    /// </summary>
    public Element _Relationship { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(ActionId))
      {
        writer.WriteString("actionId", (string)ActionId!);
      }

      if (_ActionId != null)
      {
        writer.WritePropertyName("_actionId");
        _ActionId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Relationship))
      {
        writer.WriteString("relationship", (string)Relationship!);
      }

      if (_Relationship != null)
      {
        writer.WritePropertyName("_relationship");
        _Relationship.SerializeJson(writer, options);
      }

      if (OffsetDuration != null)
      {
        writer.WritePropertyName("offsetDuration");
        OffsetDuration.SerializeJson(writer, options);
      }

      if (OffsetRange != null)
      {
        writer.WritePropertyName("offsetRange");
        OffsetRange.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actionId":
          ActionId = reader.GetString();
          break;

        case "_actionId":
          _ActionId = new fhirCsR3.Models.Element();
          _ActionId.DeserializeJson(ref reader, options);
          break;

        case "offsetDuration":
          OffsetDuration = new fhirCsR3.Models.Duration();
          OffsetDuration.DeserializeJson(ref reader, options);
          break;

        case "offsetRange":
          OffsetRange = new fhirCsR3.Models.Range();
          OffsetRange.DeserializeJson(ref reader, options);
          break;

        case "relationship":
          Relationship = reader.GetString();
          break;

        case "_relationship":
          _Relationship = new fhirCsR3.Models.Element();
          _Relationship.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.relatedAction.relationship field
  /// </summary>
  public static class PlanDefinitionActionRelatedActionRelationshipCodes {
    public const string BEFORE_START = "before-start";
    public const string BEFORE = "before";
    public const string BEFORE_END = "before-end";
    public const string CONCURRENT_WITH_START = "concurrent-with-start";
    public const string CONCURRENT = "concurrent";
    public const string CONCURRENT_WITH_END = "concurrent-with-end";
    public const string AFTER_START = "after-start";
    public const string AFTER = "after";
    public const string AFTER_END = "after-end";
    public static HashSet<string> Values = new HashSet<string>() {
      "before-start",
      "before",
      "before-end",
      "concurrent-with-start",
      "concurrent",
      "concurrent-with-end",
      "after-start",
      "after",
      "after-end",
    };
  }
  /// <summary>
  /// Indicates who should participate in performing the action described.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<PlanDefinitionActionParticipant>))]
  public class PlanDefinitionActionParticipant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The role the participant should play in performing the described action.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// The type of participant in the action.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "role":
          Role = new fhirCsR3.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR3.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.participant.type field
  /// </summary>
  public static class PlanDefinitionActionParticipantTypeCodes {
    public const string PATIENT = "patient";
    public const string PRACTITIONER = "practitioner";
    public const string RELATED_PERSON = "related-person";
    public static HashSet<string> Values = new HashSet<string>() {
      "patient",
      "practitioner",
      "related-person",
    };
  }
  /// <summary>
  /// Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<PlanDefinitionActionDynamicValue>))]
  public class PlanDefinitionActionDynamicValue : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A brief, natural language description of the intended semantics of the dynamic value.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
    /// </summary>
    public string Expression { get; set; }
    /// <summary>
    /// Extension container element for Expression
    /// </summary>
    public Element _Expression { get; set; }
    /// <summary>
    /// The media type of the language for the expression.
    /// </summary>
    public string Language { get; set; }
    /// <summary>
    /// Extension container element for Language
    /// </summary>
    public Element _Language { get; set; }
    /// <summary>
    /// The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression.
    /// </summary>
    public string Path { get; set; }
    /// <summary>
    /// Extension container element for Path
    /// </summary>
    public Element _Path { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Path))
      {
        writer.WriteString("path", (string)Path!);
      }

      if (_Path != null)
      {
        writer.WritePropertyName("_path");
        _Path.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Language))
      {
        writer.WriteString("language", (string)Language!);
      }

      if (_Language != null)
      {
        writer.WritePropertyName("_language");
        _Language.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Expression))
      {
        writer.WriteString("expression", (string)Expression!);
      }

      if (_Expression != null)
      {
        writer.WritePropertyName("_expression");
        _Expression.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "expression":
          Expression = reader.GetString();
          break;

        case "_expression":
          _Expression = new fhirCsR3.Models.Element();
          _Expression.DeserializeJson(ref reader, options);
          break;

        case "language":
          Language = reader.GetString();
          break;

        case "_language":
          _Language = new fhirCsR3.Models.Element();
          _Language.DeserializeJson(ref reader, options);
          break;

        case "path":
          Path = reader.GetString();
          break;

        case "_path":
          _Path = new fhirCsR3.Models.Element();
          _Path.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An action to be taken as part of the plan.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<PlanDefinitionAction>))]
  public class PlanDefinitionAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.
    /// </summary>
    public List<PlanDefinitionAction> Action { get; set; }
    /// <summary>
    /// Defines whether the action can be selected multiple times.
    /// </summary>
    public string CardinalityBehavior { get; set; }
    /// <summary>
    /// Extension container element for CardinalityBehavior
    /// </summary>
    public Element _CardinalityBehavior { get; set; }
    /// <summary>
    /// A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a the section of a documentation template.
    /// </summary>
    public List<CodeableConcept> Code { get; set; }
    /// <summary>
    /// An expression that describes applicability criteria, or start/stop conditions for the action.
    /// </summary>
    public List<PlanDefinitionActionCondition> Condition { get; set; }
    /// <summary>
    /// Note that the definition is optional, and if no definition is specified, a dynamicValue with a root (~) path can be used to define the entire resource dynamically.
    /// </summary>
    public Reference Definition { get; set; }
    /// <summary>
    /// A short description of the action used to provide a summary to display to the user.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
    /// </summary>
    public List<RelatedArtifact> Documentation { get; set; }
    /// <summary>
    /// Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
    /// </summary>
    public List<PlanDefinitionActionDynamicValue> DynamicValue { get; set; }
    /// <summary>
    /// Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition.
    /// </summary>
    public List<string> GoalId { get; set; }
    /// <summary>
    /// Extension container element for GoalId
    /// </summary>
    public List<Element> _GoalId { get; set; }
    /// <summary>
    /// Defines the grouping behavior for the action and its children.
    /// </summary>
    public string GroupingBehavior { get; set; }
    /// <summary>
    /// Extension container element for GroupingBehavior
    /// </summary>
    public Element _GroupingBehavior { get; set; }
    /// <summary>
    /// Defines input data requirements for the action.
    /// </summary>
    public List<DataRequirement> Input { get; set; }
    /// <summary>
    /// A user-visible label for the action.
    /// </summary>
    public string Label { get; set; }
    /// <summary>
    /// Extension container element for Label
    /// </summary>
    public Element _Label { get; set; }
    /// <summary>
    /// Defines the outputs of the action, if any.
    /// </summary>
    public List<DataRequirement> Output { get; set; }
    /// <summary>
    /// Indicates who should participate in performing the action described.
    /// </summary>
    public List<PlanDefinitionActionParticipant> Participant { get; set; }
    /// <summary>
    /// Defines whether the action should usually be preselected.
    /// </summary>
    public string PrecheckBehavior { get; set; }
    /// <summary>
    /// Extension container element for PrecheckBehavior
    /// </summary>
    public Element _PrecheckBehavior { get; set; }
    /// <summary>
    /// This is different than the clinical evidence documentation, it's an actual business description of the reason for performing the action.
    /// </summary>
    public List<CodeableConcept> Reason { get; set; }
    /// <summary>
    /// When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
    /// </summary>
    public List<PlanDefinitionActionRelatedAction> RelatedAction { get; set; }
    /// <summary>
    /// Defines the requiredness behavior for the action.
    /// </summary>
    public string RequiredBehavior { get; set; }
    /// <summary>
    /// Extension container element for RequiredBehavior
    /// </summary>
    public Element _RequiredBehavior { get; set; }
    /// <summary>
    /// Defines the selection behavior for the action and its children.
    /// </summary>
    public string SelectionBehavior { get; set; }
    /// <summary>
    /// Extension container element for SelectionBehavior
    /// </summary>
    public Element _SelectionBehavior { get; set; }
    /// <summary>
    /// A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that may not be capable of interpreting it dynamically.
    /// </summary>
    public string TextEquivalent { get; set; }
    /// <summary>
    /// Extension container element for TextEquivalent
    /// </summary>
    public Element _TextEquivalent { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public string TimingDateTime { get; set; }
    /// <summary>
    /// Extension container element for TimingDateTime
    /// </summary>
    public Element _TimingDateTime { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public Period TimingPeriod { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public Duration TimingDuration { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public Range TimingRange { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public Timing TimingTiming { get; set; }
    /// <summary>
    /// The title of the action displayed to a user.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
    /// </summary>
    public Reference Transform { get; set; }
    /// <summary>
    /// A description of when the action should be triggered.
    /// </summary>
    public List<TriggerDefinition> TriggerDefinition { get; set; }
    /// <summary>
    /// The type of action to perform (create, update, remove).
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Label))
      {
        writer.WriteString("label", (string)Label!);
      }

      if (_Label != null)
      {
        writer.WritePropertyName("_label");
        _Label.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TextEquivalent))
      {
        writer.WriteString("textEquivalent", (string)TextEquivalent!);
      }

      if (_TextEquivalent != null)
      {
        writer.WritePropertyName("_textEquivalent");
        _TextEquivalent.SerializeJson(writer, options);
      }

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (CodeableConcept valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Reason != null) && (Reason.Count != 0))
      {
        writer.WritePropertyName("reason");
        writer.WriteStartArray();

        foreach (CodeableConcept valReason in Reason)
        {
          valReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Documentation != null) && (Documentation.Count != 0))
      {
        writer.WritePropertyName("documentation");
        writer.WriteStartArray();

        foreach (RelatedArtifact valDocumentation in Documentation)
        {
          valDocumentation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((GoalId != null) && (GoalId.Count != 0))
      {
        writer.WritePropertyName("goalId");
        writer.WriteStartArray();

        foreach (string valGoalId in GoalId)
        {
          writer.WriteStringValue(valGoalId);
        }

        writer.WriteEndArray();
      }

      if ((_GoalId != null) && (_GoalId.Count != 0))
      {
        writer.WritePropertyName("_goalId");
        writer.WriteStartArray();

        foreach (Element val_GoalId in _GoalId)
        {
          val_GoalId.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((TriggerDefinition != null) && (TriggerDefinition.Count != 0))
      {
        writer.WritePropertyName("triggerDefinition");
        writer.WriteStartArray();

        foreach (TriggerDefinition valTriggerDefinition in TriggerDefinition)
        {
          valTriggerDefinition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Condition != null) && (Condition.Count != 0))
      {
        writer.WritePropertyName("condition");
        writer.WriteStartArray();

        foreach (PlanDefinitionActionCondition valCondition in Condition)
        {
          valCondition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Input != null) && (Input.Count != 0))
      {
        writer.WritePropertyName("input");
        writer.WriteStartArray();

        foreach (DataRequirement valInput in Input)
        {
          valInput.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Output != null) && (Output.Count != 0))
      {
        writer.WritePropertyName("output");
        writer.WriteStartArray();

        foreach (DataRequirement valOutput in Output)
        {
          valOutput.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelatedAction != null) && (RelatedAction.Count != 0))
      {
        writer.WritePropertyName("relatedAction");
        writer.WriteStartArray();

        foreach (PlanDefinitionActionRelatedAction valRelatedAction in RelatedAction)
        {
          valRelatedAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(TimingDateTime))
      {
        writer.WriteString("timingDateTime", (string)TimingDateTime!);
      }

      if (_TimingDateTime != null)
      {
        writer.WritePropertyName("_timingDateTime");
        _TimingDateTime.SerializeJson(writer, options);
      }

      if (TimingPeriod != null)
      {
        writer.WritePropertyName("timingPeriod");
        TimingPeriod.SerializeJson(writer, options);
      }

      if (TimingDuration != null)
      {
        writer.WritePropertyName("timingDuration");
        TimingDuration.SerializeJson(writer, options);
      }

      if (TimingRange != null)
      {
        writer.WritePropertyName("timingRange");
        TimingRange.SerializeJson(writer, options);
      }

      if (TimingTiming != null)
      {
        writer.WritePropertyName("timingTiming");
        TimingTiming.SerializeJson(writer, options);
      }

      if ((Participant != null) && (Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();

        foreach (PlanDefinitionActionParticipant valParticipant in Participant)
        {
          valParticipant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(GroupingBehavior))
      {
        writer.WriteString("groupingBehavior", (string)GroupingBehavior!);
      }

      if (_GroupingBehavior != null)
      {
        writer.WritePropertyName("_groupingBehavior");
        _GroupingBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SelectionBehavior))
      {
        writer.WriteString("selectionBehavior", (string)SelectionBehavior!);
      }

      if (_SelectionBehavior != null)
      {
        writer.WritePropertyName("_selectionBehavior");
        _SelectionBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RequiredBehavior))
      {
        writer.WriteString("requiredBehavior", (string)RequiredBehavior!);
      }

      if (_RequiredBehavior != null)
      {
        writer.WritePropertyName("_requiredBehavior");
        _RequiredBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PrecheckBehavior))
      {
        writer.WriteString("precheckBehavior", (string)PrecheckBehavior!);
      }

      if (_PrecheckBehavior != null)
      {
        writer.WritePropertyName("_precheckBehavior");
        _PrecheckBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CardinalityBehavior))
      {
        writer.WriteString("cardinalityBehavior", (string)CardinalityBehavior!);
      }

      if (_CardinalityBehavior != null)
      {
        writer.WritePropertyName("_cardinalityBehavior");
        _CardinalityBehavior.SerializeJson(writer, options);
      }

      if (Definition != null)
      {
        writer.WritePropertyName("definition");
        Definition.SerializeJson(writer, options);
      }

      if (Transform != null)
      {
        writer.WritePropertyName("transform");
        Transform.SerializeJson(writer, options);
      }

      if ((DynamicValue != null) && (DynamicValue.Count != 0))
      {
        writer.WritePropertyName("dynamicValue");
        writer.WriteStartArray();

        foreach (PlanDefinitionActionDynamicValue valDynamicValue in DynamicValue)
        {
          valDynamicValue.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (PlanDefinitionAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<PlanDefinitionAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.PlanDefinitionAction objAction = new fhirCsR3.Models.PlanDefinitionAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "cardinalityBehavior":
          CardinalityBehavior = reader.GetString();
          break;

        case "_cardinalityBehavior":
          _CardinalityBehavior = new fhirCsR3.Models.Element();
          _CardinalityBehavior.DeserializeJson(ref reader, options);
          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objCode = new fhirCsR3.Models.CodeableConcept();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "condition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Condition = new List<PlanDefinitionActionCondition>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.PlanDefinitionActionCondition objCondition = new fhirCsR3.Models.PlanDefinitionActionCondition();
            objCondition.DeserializeJson(ref reader, options);
            Condition.Add(objCondition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Condition.Count == 0)
          {
            Condition = null;
          }

          break;

        case "definition":
          Definition = new fhirCsR3.Models.Reference();
          Definition.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Documentation = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.RelatedArtifact objDocumentation = new fhirCsR3.Models.RelatedArtifact();
            objDocumentation.DeserializeJson(ref reader, options);
            Documentation.Add(objDocumentation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Documentation.Count == 0)
          {
            Documentation = null;
          }

          break;

        case "dynamicValue":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DynamicValue = new List<PlanDefinitionActionDynamicValue>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.PlanDefinitionActionDynamicValue objDynamicValue = new fhirCsR3.Models.PlanDefinitionActionDynamicValue();
            objDynamicValue.DeserializeJson(ref reader, options);
            DynamicValue.Add(objDynamicValue);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DynamicValue.Count == 0)
          {
            DynamicValue = null;
          }

          break;

        case "goalId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          GoalId = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            GoalId.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (GoalId.Count == 0)
          {
            GoalId = null;
          }

          break;

        case "_goalId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _GoalId = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Element obj_GoalId = new fhirCsR3.Models.Element();
            obj_GoalId.DeserializeJson(ref reader, options);
            _GoalId.Add(obj_GoalId);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_GoalId.Count == 0)
          {
            _GoalId = null;
          }

          break;

        case "groupingBehavior":
          GroupingBehavior = reader.GetString();
          break;

        case "_groupingBehavior":
          _GroupingBehavior = new fhirCsR3.Models.Element();
          _GroupingBehavior.DeserializeJson(ref reader, options);
          break;

        case "input":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Input = new List<DataRequirement>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.DataRequirement objInput = new fhirCsR3.Models.DataRequirement();
            objInput.DeserializeJson(ref reader, options);
            Input.Add(objInput);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Input.Count == 0)
          {
            Input = null;
          }

          break;

        case "label":
          Label = reader.GetString();
          break;

        case "_label":
          _Label = new fhirCsR3.Models.Element();
          _Label.DeserializeJson(ref reader, options);
          break;

        case "output":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Output = new List<DataRequirement>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.DataRequirement objOutput = new fhirCsR3.Models.DataRequirement();
            objOutput.DeserializeJson(ref reader, options);
            Output.Add(objOutput);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Output.Count == 0)
          {
            Output = null;
          }

          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Participant = new List<PlanDefinitionActionParticipant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.PlanDefinitionActionParticipant objParticipant = new fhirCsR3.Models.PlanDefinitionActionParticipant();
            objParticipant.DeserializeJson(ref reader, options);
            Participant.Add(objParticipant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Participant.Count == 0)
          {
            Participant = null;
          }

          break;

        case "precheckBehavior":
          PrecheckBehavior = reader.GetString();
          break;

        case "_precheckBehavior":
          _PrecheckBehavior = new fhirCsR3.Models.Element();
          _PrecheckBehavior.DeserializeJson(ref reader, options);
          break;

        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objReason = new fhirCsR3.Models.CodeableConcept();
            objReason.DeserializeJson(ref reader, options);
            Reason.Add(objReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reason.Count == 0)
          {
            Reason = null;
          }

          break;

        case "relatedAction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedAction = new List<PlanDefinitionActionRelatedAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.PlanDefinitionActionRelatedAction objRelatedAction = new fhirCsR3.Models.PlanDefinitionActionRelatedAction();
            objRelatedAction.DeserializeJson(ref reader, options);
            RelatedAction.Add(objRelatedAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedAction.Count == 0)
          {
            RelatedAction = null;
          }

          break;

        case "requiredBehavior":
          RequiredBehavior = reader.GetString();
          break;

        case "_requiredBehavior":
          _RequiredBehavior = new fhirCsR3.Models.Element();
          _RequiredBehavior.DeserializeJson(ref reader, options);
          break;

        case "selectionBehavior":
          SelectionBehavior = reader.GetString();
          break;

        case "_selectionBehavior":
          _SelectionBehavior = new fhirCsR3.Models.Element();
          _SelectionBehavior.DeserializeJson(ref reader, options);
          break;

        case "textEquivalent":
          TextEquivalent = reader.GetString();
          break;

        case "_textEquivalent":
          _TextEquivalent = new fhirCsR3.Models.Element();
          _TextEquivalent.DeserializeJson(ref reader, options);
          break;

        case "timingDateTime":
          TimingDateTime = reader.GetString();
          break;

        case "_timingDateTime":
          _TimingDateTime = new fhirCsR3.Models.Element();
          _TimingDateTime.DeserializeJson(ref reader, options);
          break;

        case "timingPeriod":
          TimingPeriod = new fhirCsR3.Models.Period();
          TimingPeriod.DeserializeJson(ref reader, options);
          break;

        case "timingDuration":
          TimingDuration = new fhirCsR3.Models.Duration();
          TimingDuration.DeserializeJson(ref reader, options);
          break;

        case "timingRange":
          TimingRange = new fhirCsR3.Models.Range();
          TimingRange.DeserializeJson(ref reader, options);
          break;

        case "timingTiming":
          TimingTiming = new fhirCsR3.Models.Timing();
          TimingTiming.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR3.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "transform":
          Transform = new fhirCsR3.Models.Reference();
          Transform.DeserializeJson(ref reader, options);
          break;

        case "triggerDefinition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          TriggerDefinition = new List<TriggerDefinition>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.TriggerDefinition objTriggerDefinition = new fhirCsR3.Models.TriggerDefinition();
            objTriggerDefinition.DeserializeJson(ref reader, options);
            TriggerDefinition.Add(objTriggerDefinition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (TriggerDefinition.Count == 0)
          {
            TriggerDefinition = null;
          }

          break;

        case "type":
          Type = new fhirCsR3.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.cardinalityBehavior field
  /// </summary>
  public static class PlanDefinitionActionCardinalityBehaviorCodes {
    public const string SINGLE = "single";
    public const string MULTIPLE = "multiple";
    public static HashSet<string> Values = new HashSet<string>() {
      "single",
      "multiple",
    };
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.groupingBehavior field
  /// </summary>
  public static class PlanDefinitionActionGroupingBehaviorCodes {
    public const string VISUAL_GROUP = "visual-group";
    public const string LOGICAL_GROUP = "logical-group";
    public const string SENTENCE_GROUP = "sentence-group";
    public static HashSet<string> Values = new HashSet<string>() {
      "visual-group",
      "logical-group",
      "sentence-group",
    };
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.precheckBehavior field
  /// </summary>
  public static class PlanDefinitionActionPrecheckBehaviorCodes {
    public const string YES = "yes";
    public const string NO = "no";
    public static HashSet<string> Values = new HashSet<string>() {
      "yes",
      "no",
    };
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.requiredBehavior field
  /// </summary>
  public static class PlanDefinitionActionRequiredBehaviorCodes {
    public const string MUST = "must";
    public const string COULD = "could";
    public const string MUST_UNLESS_DOCUMENTED = "must-unless-documented";
    public static HashSet<string> Values = new HashSet<string>() {
      "must",
      "could",
      "must-unless-documented",
    };
  }
  /// <summary>
  /// Code Values for the PlanDefinition.action.selectionBehavior field
  /// </summary>
  public static class PlanDefinitionActionSelectionBehaviorCodes {
    public const string ANY = "any";
    public const string ALL = "all";
    public const string ALL_OR_NONE = "all-or-none";
    public const string EXACTLY_ONE = "exactly-one";
    public const string AT_MOST_ONE = "at-most-one";
    public const string ONE_OR_MORE = "one-or-more";
    public static HashSet<string> Values = new HashSet<string>() {
      "any",
      "all",
      "all-or-none",
      "exactly-one",
      "at-most-one",
      "one-or-more",
    };
  }
  /// <summary>
  /// This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<PlanDefinition>))]
  public class PlanDefinition : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "PlanDefinition";
    /// <summary>
    /// An action to be taken as part of the plan.
    /// </summary>
    public List<PlanDefinitionAction> Action { get; set; }
    /// <summary>
    /// The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
    /// </summary>
    public string ApprovalDate { get; set; }
    /// <summary>
    /// Extension container element for ApprovalDate
    /// </summary>
    public Element _ApprovalDate { get; set; }
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// A contributor to the content of the asset, including authors, editors, reviewers, and endorsers.
    /// </summary>
    public List<Contributor> Contributor { get; set; }
    /// <summary>
    /// A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the plan definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the plan definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the plan definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The effective period for a plan definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
    /// </summary>
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// Allows filtering of plan definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental plan definition in production.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Extension container element for Experimental
    /// </summary>
    public Element _Experimental { get; set; }
    /// <summary>
    /// Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
    /// </summary>
    public List<PlanDefinitionGoal> Goal { get; set; }
    /// <summary>
    /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this plan definition outside of FHIR, where it is not possible to use the logical URI.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// It may be possible for the plan definition to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// If specified, this is usually after the approval date.
    /// </summary>
    public string LastReviewDate { get; set; }
    /// <summary>
    /// Extension container element for LastReviewDate
    /// </summary>
    public Element _LastReviewDate { get; set; }
    /// <summary>
    /// A reference to a Library resource containing any formal logic used by the plan definition.
    /// </summary>
    public List<Reference> Library { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Usually an organization, but may be an individual. The publisher (or steward) of the plan definition is the organization or individual primarily responsible for the maintenance and upkeep of the plan definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the plan definition. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the plan definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this plan definition.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// Each related artifact is either an attachment, or a reference to another resource, but not both.
    /// </summary>
    public List<RelatedArtifact> RelatedArtifact { get; set; }
    /// <summary>
    /// Allows filtering of plan definitions that are appropriate for use vs. not.  
    /// This is labeled as "Is Modifier" because applications should not use a retired plan definition without due consideration.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.
    /// </summary>
    public List<CodeableConcept> Topic { get; set; }
    /// <summary>
    /// The type of asset the plan definition represents, e.g. an order set, protocol, or event-condition-action rule.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// A detailed description of how the asset is used from a clinical perspective.
    /// </summary>
    public string Usage { get; set; }
    /// <summary>
    /// Extension container element for Usage
    /// </summary>
    public Element _Usage { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different plan definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the plan definition with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (_Experimental != null)
      {
        writer.WritePropertyName("_experimental");
        _Experimental.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Usage))
      {
        writer.WriteString("usage", (string)Usage!);
      }

      if (_Usage != null)
      {
        writer.WritePropertyName("_usage");
        _Usage.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ApprovalDate))
      {
        writer.WriteString("approvalDate", (string)ApprovalDate!);
      }

      if (_ApprovalDate != null)
      {
        writer.WritePropertyName("_approvalDate");
        _ApprovalDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastReviewDate))
      {
        writer.WriteString("lastReviewDate", (string)LastReviewDate!);
      }

      if (_LastReviewDate != null)
      {
        writer.WritePropertyName("_lastReviewDate");
        _LastReviewDate.SerializeJson(writer, options);
      }

      if (EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        EffectivePeriod.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Topic != null) && (Topic.Count != 0))
      {
        writer.WritePropertyName("topic");
        writer.WriteStartArray();

        foreach (CodeableConcept valTopic in Topic)
        {
          valTopic.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Contributor != null) && (Contributor.Count != 0))
      {
        writer.WritePropertyName("contributor");
        writer.WriteStartArray();

        foreach (Contributor valContributor in Contributor)
        {
          valContributor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if ((RelatedArtifact != null) && (RelatedArtifact.Count != 0))
      {
        writer.WritePropertyName("relatedArtifact");
        writer.WriteStartArray();

        foreach (RelatedArtifact valRelatedArtifact in RelatedArtifact)
        {
          valRelatedArtifact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Library != null) && (Library.Count != 0))
      {
        writer.WritePropertyName("library");
        writer.WriteStartArray();

        foreach (Reference valLibrary in Library)
        {
          valLibrary.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Goal != null) && (Goal.Count != 0))
      {
        writer.WritePropertyName("goal");
        writer.WriteStartArray();

        foreach (PlanDefinitionGoal valGoal in Goal)
        {
          valGoal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (PlanDefinitionAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<PlanDefinitionAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.PlanDefinitionAction objAction = new fhirCsR3.Models.PlanDefinitionAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "approvalDate":
          ApprovalDate = reader.GetString();
          break;

        case "_approvalDate":
          _ApprovalDate = new fhirCsR3.Models.Element();
          _ApprovalDate.DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ContactDetail objContact = new fhirCsR3.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "contributor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contributor = new List<Contributor>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Contributor objContributor = new fhirCsR3.Models.Contributor();
            objContributor.DeserializeJson(ref reader, options);
            Contributor.Add(objContributor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contributor.Count == 0)
          {
            Contributor = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR3.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR3.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "effectivePeriod":
          EffectivePeriod = new fhirCsR3.Models.Period();
          EffectivePeriod.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "_experimental":
          _Experimental = new fhirCsR3.Models.Element();
          _Experimental.DeserializeJson(ref reader, options);
          break;

        case "goal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Goal = new List<PlanDefinitionGoal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.PlanDefinitionGoal objGoal = new fhirCsR3.Models.PlanDefinitionGoal();
            objGoal.DeserializeJson(ref reader, options);
            Goal.Add(objGoal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Goal.Count == 0)
          {
            Goal = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Identifier objIdentifier = new fhirCsR3.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objJurisdiction = new fhirCsR3.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "lastReviewDate":
          LastReviewDate = reader.GetString();
          break;

        case "_lastReviewDate":
          _LastReviewDate = new fhirCsR3.Models.Element();
          _LastReviewDate.DeserializeJson(ref reader, options);
          break;

        case "library":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Library = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objLibrary = new fhirCsR3.Models.Reference();
            objLibrary.DeserializeJson(ref reader, options);
            Library.Add(objLibrary);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Library.Count == 0)
          {
            Library = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR3.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR3.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR3.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "relatedArtifact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedArtifact = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.RelatedArtifact objRelatedArtifact = new fhirCsR3.Models.RelatedArtifact();
            objRelatedArtifact.DeserializeJson(ref reader, options);
            RelatedArtifact.Add(objRelatedArtifact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedArtifact.Count == 0)
          {
            RelatedArtifact = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR3.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "topic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Topic = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objTopic = new fhirCsR3.Models.CodeableConcept();
            objTopic.DeserializeJson(ref reader, options);
            Topic.Add(objTopic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Topic.Count == 0)
          {
            Topic = null;
          }

          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR3.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "usage":
          Usage = reader.GetString();
          break;

        case "_usage":
          _Usage = new fhirCsR3.Models.Element();
          _Usage.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.UsageContext objUseContext = new fhirCsR3.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR3.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the PlanDefinition.status field
  /// </summary>
  public static class PlanDefinitionStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
      "unknown",
    };
  }
}
