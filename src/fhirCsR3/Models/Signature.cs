// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different signature approaches have different utilities.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<Signature>))]
  public class Signature : Element,  IFhirJsonSerializable {
    /// <summary>
    /// Where the signature type is an XML DigSig, the signed content is a FHIR Resource(s), the signature is of the XML form of the Resource(s) using  XML-Signature (XMLDIG) "Detached Signature" form.
    /// </summary>
    public byte[] Blob { get; set; }
    /// <summary>
    /// A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jwt for JWT, and image/* for a graphical image of a signature, etc.
    /// </summary>
    public string ContentType { get; set; }
    /// <summary>
    /// Extension container element for ContentType
    /// </summary>
    public Element _ContentType { get; set; }
    /// <summary>
    /// The party that can't sign. For example a child.
    /// </summary>
    public string OnBehalfOfUri { get; set; }
    /// <summary>
    /// Extension container element for OnBehalfOfUri
    /// </summary>
    public Element _OnBehalfOfUri { get; set; }
    /// <summary>
    /// The party that can't sign. For example a child.
    /// </summary>
    public Reference OnBehalfOfReference { get; set; }
    /// <summary>
    /// Examples include attesting to: authorship, correct transcription, and witness of specific event. Also known as a &amp;quot;Commitment Type Indication&amp;quot;.
    /// </summary>
    public List<Coding> Type { get; set; }
    /// <summary>
    /// This should agree with the information in the signature.
    /// </summary>
    public string When { get; set; }
    /// <summary>
    /// Extension container element for When
    /// </summary>
    public Element _When { get; set; }
    /// <summary>
    /// This should agree with the information in the signature.
    /// </summary>
    public string WhoUri { get; set; }
    /// <summary>
    /// Extension container element for WhoUri
    /// </summary>
    public Element _WhoUri { get; set; }
    /// <summary>
    /// This should agree with the information in the signature.
    /// </summary>
    public Reference WhoReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.Element)this).SerializeJson(writer, options, false);

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (Coding valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(When))
      {
        writer.WriteString("when", (string)When!);
      }

      if (_When != null)
      {
        writer.WritePropertyName("_when");
        _When.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(WhoUri))
      {
        writer.WriteString("whoUri", (string)WhoUri!);
      }

      if (_WhoUri != null)
      {
        writer.WritePropertyName("_whoUri");
        _WhoUri.SerializeJson(writer, options);
      }

      if (WhoReference != null)
      {
        writer.WritePropertyName("whoReference");
        WhoReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(OnBehalfOfUri))
      {
        writer.WriteString("onBehalfOfUri", (string)OnBehalfOfUri!);
      }

      if (_OnBehalfOfUri != null)
      {
        writer.WritePropertyName("_onBehalfOfUri");
        _OnBehalfOfUri.SerializeJson(writer, options);
      }

      if (OnBehalfOfReference != null)
      {
        writer.WritePropertyName("onBehalfOfReference");
        OnBehalfOfReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ContentType))
      {
        writer.WriteString("contentType", (string)ContentType!);
      }

      if (_ContentType != null)
      {
        writer.WritePropertyName("_contentType");
        _ContentType.SerializeJson(writer, options);
      }

      if (Blob != null)
      {
        writer.WriteString("blob", System.Convert.ToBase64String(Blob));
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "blob":
          Blob = System.Convert.FromBase64String(reader.GetString());
          break;

        case "contentType":
          ContentType = reader.GetString();
          break;

        case "_contentType":
          _ContentType = new fhirCsR3.Models.Element();
          _ContentType.DeserializeJson(ref reader, options);
          break;

        case "onBehalfOfUri":
          OnBehalfOfUri = reader.GetString();
          break;

        case "_onBehalfOfUri":
          _OnBehalfOfUri = new fhirCsR3.Models.Element();
          _OnBehalfOfUri.DeserializeJson(ref reader, options);
          break;

        case "onBehalfOfReference":
          OnBehalfOfReference = new fhirCsR3.Models.Reference();
          OnBehalfOfReference.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Coding objType = new fhirCsR3.Models.Coding();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        case "when":
          When = reader.GetString();
          break;

        case "_when":
          _When = new fhirCsR3.Models.Element();
          _When.DeserializeJson(ref reader, options);
          break;

        case "whoUri":
          WhoUri = reader.GetString();
          break;

        case "_whoUri":
          _WhoUri = new fhirCsR3.Models.Element();
          _WhoUri.DeserializeJson(ref reader, options);
          break;

        case "whoReference":
          WhoReference = new fhirCsR3.Models.Reference();
          WhoReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
