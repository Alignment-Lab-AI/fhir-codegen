// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.
  /// This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<QuestionnaireItemEnableWhen>))]
  public class QuestionnaireItemEnableWhen : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
    /// Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
    /// The dataType of this element must be the same as the data type of the question being referenced.
    /// </summary>
    public bool? AnswerBoolean { get; set; }
    /// <summary>
    /// Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
    /// Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
    /// The dataType of this element must be the same as the data type of the question being referenced.
    /// </summary>
    public decimal? AnswerDecimal { get; set; }
    /// <summary>
    /// Extension container element for AnswerDecimal
    /// </summary>
    public Element _AnswerDecimal { get; set; }
    /// <summary>
    /// Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
    /// Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
    /// The dataType of this element must be the same as the data type of the question being referenced.
    /// </summary>
    public int? AnswerInteger { get; set; }
    /// <summary>
    /// Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
    /// Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
    /// The dataType of this element must be the same as the data type of the question being referenced.
    /// </summary>
    public string AnswerDate { get; set; }
    /// <summary>
    /// Extension container element for AnswerDate
    /// </summary>
    public Element _AnswerDate { get; set; }
    /// <summary>
    /// Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
    /// Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
    /// The dataType of this element must be the same as the data type of the question being referenced.
    /// </summary>
    public string AnswerDateTime { get; set; }
    /// <summary>
    /// Extension container element for AnswerDateTime
    /// </summary>
    public Element _AnswerDateTime { get; set; }
    /// <summary>
    /// Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
    /// Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
    /// The dataType of this element must be the same as the data type of the question being referenced.
    /// </summary>
    public string AnswerTime { get; set; }
    /// <summary>
    /// Extension container element for AnswerTime
    /// </summary>
    public Element _AnswerTime { get; set; }
    /// <summary>
    /// Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
    /// Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
    /// The dataType of this element must be the same as the data type of the question being referenced.
    /// </summary>
    public string AnswerString { get; set; }
    /// <summary>
    /// Extension container element for AnswerString
    /// </summary>
    public Element _AnswerString { get; set; }
    /// <summary>
    /// Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
    /// Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
    /// The dataType of this element must be the same as the data type of the question being referenced.
    /// </summary>
    public string AnswerUri { get; set; }
    /// <summary>
    /// Extension container element for AnswerUri
    /// </summary>
    public Element _AnswerUri { get; set; }
    /// <summary>
    /// Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
    /// Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
    /// The dataType of this element must be the same as the data type of the question being referenced.
    /// </summary>
    public Attachment AnswerAttachment { get; set; }
    /// <summary>
    /// Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
    /// Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
    /// The dataType of this element must be the same as the data type of the question being referenced.
    /// </summary>
    public Coding AnswerCoding { get; set; }
    /// <summary>
    /// Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
    /// Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
    /// The dataType of this element must be the same as the data type of the question being referenced.
    /// </summary>
    public Quantity AnswerQuantity { get; set; }
    /// <summary>
    /// Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
    /// Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
    /// The dataType of this element must be the same as the data type of the question being referenced.
    /// </summary>
    public Reference AnswerReference { get; set; }
    /// <summary>
    /// If answered=false and answer values are also provided, then they are treated as "or".  I.e. "Enable if the question is unanswered or the answer is one of the specified values".  If answered=true and answers are present, one of the specified answers must be met. (So there's little reason to specify answered=true if answers are present.).
    /// </summary>
    public bool? HasAnswer { get; set; }
    /// <summary>
    /// If multiple question occurrences are present for the same question (same linkId), then this refers to the nearest question occurrence reachable by tracing first the "ancestor" axis and then the "preceding" axis and then the "following" axis.
    /// </summary>
    public string Question { get; set; }
    /// <summary>
    /// Extension container element for Question
    /// </summary>
    public Element _Question { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Question))
      {
        writer.WriteString("question", (string)Question!);
      }

      if (_Question != null)
      {
        writer.WritePropertyName("_question");
        _Question.SerializeJson(writer, options);
      }

      if (HasAnswer != null)
      {
        writer.WriteBoolean("hasAnswer", (bool)HasAnswer!);
      }

      if (AnswerBoolean != null)
      {
        writer.WriteBoolean("answerBoolean", (bool)AnswerBoolean!);
      }

      if (AnswerDecimal != null)
      {
        writer.WriteNumber("answerDecimal", (decimal)AnswerDecimal!);
      }

      if (_AnswerDecimal != null)
      {
        writer.WritePropertyName("_answerDecimal");
        _AnswerDecimal.SerializeJson(writer, options);
      }

      if (AnswerInteger != null)
      {
        writer.WriteNumber("answerInteger", (int)AnswerInteger!);
      }

      if (!string.IsNullOrEmpty(AnswerDate))
      {
        writer.WriteString("answerDate", (string)AnswerDate!);
      }

      if (_AnswerDate != null)
      {
        writer.WritePropertyName("_answerDate");
        _AnswerDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AnswerDateTime))
      {
        writer.WriteString("answerDateTime", (string)AnswerDateTime!);
      }

      if (_AnswerDateTime != null)
      {
        writer.WritePropertyName("_answerDateTime");
        _AnswerDateTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AnswerTime))
      {
        writer.WriteString("answerTime", (string)AnswerTime!);
      }

      if (_AnswerTime != null)
      {
        writer.WritePropertyName("_answerTime");
        _AnswerTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AnswerString))
      {
        writer.WriteString("answerString", (string)AnswerString!);
      }

      if (_AnswerString != null)
      {
        writer.WritePropertyName("_answerString");
        _AnswerString.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AnswerUri))
      {
        writer.WriteString("answerUri", (string)AnswerUri!);
      }

      if (_AnswerUri != null)
      {
        writer.WritePropertyName("_answerUri");
        _AnswerUri.SerializeJson(writer, options);
      }

      if (AnswerAttachment != null)
      {
        writer.WritePropertyName("answerAttachment");
        AnswerAttachment.SerializeJson(writer, options);
      }

      if (AnswerCoding != null)
      {
        writer.WritePropertyName("answerCoding");
        AnswerCoding.SerializeJson(writer, options);
      }

      if (AnswerQuantity != null)
      {
        writer.WritePropertyName("answerQuantity");
        AnswerQuantity.SerializeJson(writer, options);
      }

      if (AnswerReference != null)
      {
        writer.WritePropertyName("answerReference");
        AnswerReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "answerBoolean":
          AnswerBoolean = reader.GetBoolean();
          break;

        case "answerDecimal":
          AnswerDecimal = reader.GetDecimal();
          break;

        case "_answerDecimal":
          _AnswerDecimal = new fhirCsR3.Models.Element();
          _AnswerDecimal.DeserializeJson(ref reader, options);
          break;

        case "answerInteger":
          AnswerInteger = reader.GetInt32();
          break;

        case "answerDate":
          AnswerDate = reader.GetString();
          break;

        case "_answerDate":
          _AnswerDate = new fhirCsR3.Models.Element();
          _AnswerDate.DeserializeJson(ref reader, options);
          break;

        case "answerDateTime":
          AnswerDateTime = reader.GetString();
          break;

        case "_answerDateTime":
          _AnswerDateTime = new fhirCsR3.Models.Element();
          _AnswerDateTime.DeserializeJson(ref reader, options);
          break;

        case "answerTime":
          AnswerTime = reader.GetString();
          break;

        case "_answerTime":
          _AnswerTime = new fhirCsR3.Models.Element();
          _AnswerTime.DeserializeJson(ref reader, options);
          break;

        case "answerString":
          AnswerString = reader.GetString();
          break;

        case "_answerString":
          _AnswerString = new fhirCsR3.Models.Element();
          _AnswerString.DeserializeJson(ref reader, options);
          break;

        case "answerUri":
          AnswerUri = reader.GetString();
          break;

        case "_answerUri":
          _AnswerUri = new fhirCsR3.Models.Element();
          _AnswerUri.DeserializeJson(ref reader, options);
          break;

        case "answerAttachment":
          AnswerAttachment = new fhirCsR3.Models.Attachment();
          AnswerAttachment.DeserializeJson(ref reader, options);
          break;

        case "answerCoding":
          AnswerCoding = new fhirCsR3.Models.Coding();
          AnswerCoding.DeserializeJson(ref reader, options);
          break;

        case "answerQuantity":
          AnswerQuantity = new fhirCsR3.Models.Quantity();
          AnswerQuantity.DeserializeJson(ref reader, options);
          break;

        case "answerReference":
          AnswerReference = new fhirCsR3.Models.Reference();
          AnswerReference.DeserializeJson(ref reader, options);
          break;

        case "hasAnswer":
          HasAnswer = reader.GetBoolean();
          break;

        case "question":
          Question = reader.GetString();
          break;

        case "_question":
          _Question = new fhirCsR3.Models.Element();
          _Question.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This element can be used when the value set machinery of options is deemed too cumbersome or when there's a need to capture options that are not codes.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<QuestionnaireItemOption>))]
  public class QuestionnaireItemOption : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The data type of the value must agree with the item.type.
    /// </summary>
    public int? ValueInteger { get; set; }
    /// <summary>
    /// The data type of the value must agree with the item.type.
    /// </summary>
    public string ValueDate { get; set; }
    /// <summary>
    /// Extension container element for ValueDate
    /// </summary>
    public Element _ValueDate { get; set; }
    /// <summary>
    /// The data type of the value must agree with the item.type.
    /// </summary>
    public string ValueTime { get; set; }
    /// <summary>
    /// Extension container element for ValueTime
    /// </summary>
    public Element _ValueTime { get; set; }
    /// <summary>
    /// The data type of the value must agree with the item.type.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// The data type of the value must agree with the item.type.
    /// </summary>
    public Coding ValueCoding { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ValueInteger != null)
      {
        writer.WriteNumber("valueInteger", (int)ValueInteger!);
      }

      if (!string.IsNullOrEmpty(ValueDate))
      {
        writer.WriteString("valueDate", (string)ValueDate!);
      }

      if (_ValueDate != null)
      {
        writer.WritePropertyName("_valueDate");
        _ValueDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueTime))
      {
        writer.WriteString("valueTime", (string)ValueTime!);
      }

      if (_ValueTime != null)
      {
        writer.WritePropertyName("_valueTime");
        _ValueTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (ValueCoding != null)
      {
        writer.WritePropertyName("valueCoding");
        ValueCoding.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "valueInteger":
          ValueInteger = reader.GetInt32();
          break;

        case "valueDate":
          ValueDate = reader.GetString();
          break;

        case "_valueDate":
          _ValueDate = new fhirCsR3.Models.Element();
          _ValueDate.DeserializeJson(ref reader, options);
          break;

        case "valueTime":
          ValueTime = reader.GetString();
          break;

        case "_valueTime":
          _ValueTime = new fhirCsR3.Models.Element();
          _ValueTime.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR3.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueCoding":
          ValueCoding = new fhirCsR3.Models.Coding();
          ValueCoding.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<QuestionnaireItem>))]
  public class QuestionnaireItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The value may come from the ElementDefinition referred to by .definition.
    /// </summary>
    public List<Coding> Code { get; set; }
    /// <summary>
    /// the URI refers to an ElementDefinition in either a [StructureDefinition](structuredefinition.html#) or a [DataElement](dataelement.html#), and always starts with the canonical URL for the target resource. When referring to a StructureDefinition, a fragment identifier is used to specify the element definition by its id [Element.id](element-definitions.html#Element.id). E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x]. In the absence of a fragment identifier, the first/root element definition in the target is the matching element definition. Note that [LOINC codes](loinc.html#dataelements) implicitly define DataElement resources.
    /// </summary>
    public string Definition { get; set; }
    /// <summary>
    /// Extension container element for Definition
    /// </summary>
    public Element _Definition { get; set; }
    /// <summary>
    /// If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.
    /// This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met.
    /// </summary>
    public List<QuestionnaireItemEnableWhen> EnableWhen { get; set; }
    /// <summary>
    /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
    /// The data type of initial[x] must agree with the item.type.
    /// </summary>
    public bool? InitialBoolean { get; set; }
    /// <summary>
    /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
    /// The data type of initial[x] must agree with the item.type.
    /// </summary>
    public decimal? InitialDecimal { get; set; }
    /// <summary>
    /// Extension container element for InitialDecimal
    /// </summary>
    public Element _InitialDecimal { get; set; }
    /// <summary>
    /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
    /// The data type of initial[x] must agree with the item.type.
    /// </summary>
    public int? InitialInteger { get; set; }
    /// <summary>
    /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
    /// The data type of initial[x] must agree with the item.type.
    /// </summary>
    public string InitialDate { get; set; }
    /// <summary>
    /// Extension container element for InitialDate
    /// </summary>
    public Element _InitialDate { get; set; }
    /// <summary>
    /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
    /// The data type of initial[x] must agree with the item.type.
    /// </summary>
    public string InitialDateTime { get; set; }
    /// <summary>
    /// Extension container element for InitialDateTime
    /// </summary>
    public Element _InitialDateTime { get; set; }
    /// <summary>
    /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
    /// The data type of initial[x] must agree with the item.type.
    /// </summary>
    public string InitialTime { get; set; }
    /// <summary>
    /// Extension container element for InitialTime
    /// </summary>
    public Element _InitialTime { get; set; }
    /// <summary>
    /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
    /// The data type of initial[x] must agree with the item.type.
    /// </summary>
    public string InitialString { get; set; }
    /// <summary>
    /// Extension container element for InitialString
    /// </summary>
    public Element _InitialString { get; set; }
    /// <summary>
    /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
    /// The data type of initial[x] must agree with the item.type.
    /// </summary>
    public string InitialUri { get; set; }
    /// <summary>
    /// Extension container element for InitialUri
    /// </summary>
    public Element _InitialUri { get; set; }
    /// <summary>
    /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
    /// The data type of initial[x] must agree with the item.type.
    /// </summary>
    public Attachment InitialAttachment { get; set; }
    /// <summary>
    /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
    /// The data type of initial[x] must agree with the item.type.
    /// </summary>
    public Coding InitialCoding { get; set; }
    /// <summary>
    /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
    /// The data type of initial[x] must agree with the item.type.
    /// </summary>
    public Quantity InitialQuantity { get; set; }
    /// <summary>
    /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
    /// The data type of initial[x] must agree with the item.type.
    /// </summary>
    public Reference InitialReference { get; set; }
    /// <summary>
    /// There is no specified limit to the depth of nesting.  However, Questionnaire authors are encouraged to consider the impact on the user and user interface of overly deep nesting.
    /// </summary>
    public List<QuestionnaireItem> Item { get; set; }
    /// <summary>
    /// This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.
    /// </summary>
    public string LinkId { get; set; }
    /// <summary>
    /// Extension container element for LinkId
    /// </summary>
    public Element _LinkId { get; set; }
    /// <summary>
    /// For base64binary, reflects the number of characters representing the encoded data, not the number of bytes of the binary data. The value may come from the ElementDefinition referred to by .definition.
    /// </summary>
    public int? MaxLength { get; set; }
    /// <summary>
    /// This element can be used when the value set machinery of options is deemed too cumbersome or when there's a need to capture options that are not codes.
    /// </summary>
    public List<QuestionnaireItemOption> Option { get; set; }
    /// <summary>
    /// LOINC defines many useful value sets for questionnaire responses. See [LOINC Answer Lists](loinc.html#alist). The value may come from the ElementDefinition referred to by .definition.
    /// </summary>
    public Reference Options { get; set; }
    /// <summary>
    /// These are generally unique within a questionnaire, though this is not guaranteed. Some questionnaires may have multiple questions with the same label with logic to control which gets exposed.
    /// Typically these won't be used for "display" items, though such use is not prohibited.
    /// Systems SHOULD NOT generate their own prefixes if prefixes are defined for any items within a Questionnaire.
    /// </summary>
    public string Prefix { get; set; }
    /// <summary>
    /// Extension container element for Prefix
    /// </summary>
    public Element _Prefix { get; set; }
    /// <summary>
    /// The value of readOnly elements can be established by asserting  extensions for defaultValues, linkages that support pre-population and/or extensions that support calculation based on other answers.
    /// </summary>
    public bool? ReadOnly { get; set; }
    /// <summary>
    /// If a question is marked as repeats=true, then multiple answers can be provided for the question in the corresponding QuestionnaireResponse.  When rendering the questionnaire, it is up to the rendering software whether to render the question text for each answer repetition or to simply list each of the answers beneath the question.  (Which is most appropriate visually may depend on the type of answer as well as whether there are nested items.). The value may come from the ElementDefinition referred to by .definition.
    /// </summary>
    public bool? Repeats { get; set; }
    /// <summary>
    /// Questionnaire.item.required only has meaning for elements that are conditionally enabled with enableWhen if the condition evaluates to true.  If an item that contains other items is marked as required, that does not automatically make the contained elements required (though required groups must contain at least one child element). The value may come from the ElementDefinition referred to by .definition.
    /// </summary>
    public bool? Required { get; set; }
    /// <summary>
    /// The name of a section, the text of a question or text content for a display item.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// Additional constraints on the type of answer can be conveyed by extensions. The value may come from the ElementDefinition referred to by .definition.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(LinkId))
      {
        writer.WriteString("linkId", (string)LinkId!);
      }

      if (_LinkId != null)
      {
        writer.WritePropertyName("_linkId");
        _LinkId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Definition))
      {
        writer.WriteString("definition", (string)Definition!);
      }

      if (_Definition != null)
      {
        writer.WritePropertyName("_definition");
        _Definition.SerializeJson(writer, options);
      }

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (Coding valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Prefix))
      {
        writer.WriteString("prefix", (string)Prefix!);
      }

      if (_Prefix != null)
      {
        writer.WritePropertyName("_prefix");
        _Prefix.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if ((EnableWhen != null) && (EnableWhen.Count != 0))
      {
        writer.WritePropertyName("enableWhen");
        writer.WriteStartArray();

        foreach (QuestionnaireItemEnableWhen valEnableWhen in EnableWhen)
        {
          valEnableWhen.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Required != null)
      {
        writer.WriteBoolean("required", (bool)Required!);
      }

      if (Repeats != null)
      {
        writer.WriteBoolean("repeats", (bool)Repeats!);
      }

      if (ReadOnly != null)
      {
        writer.WriteBoolean("readOnly", (bool)ReadOnly!);
      }

      if (MaxLength != null)
      {
        writer.WriteNumber("maxLength", (int)MaxLength!);
      }

      if (Options != null)
      {
        writer.WritePropertyName("options");
        Options.SerializeJson(writer, options);
      }

      if ((Option != null) && (Option.Count != 0))
      {
        writer.WritePropertyName("option");
        writer.WriteStartArray();

        foreach (QuestionnaireItemOption valOption in Option)
        {
          valOption.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (InitialBoolean != null)
      {
        writer.WriteBoolean("initialBoolean", (bool)InitialBoolean!);
      }

      if (InitialDecimal != null)
      {
        writer.WriteNumber("initialDecimal", (decimal)InitialDecimal!);
      }

      if (_InitialDecimal != null)
      {
        writer.WritePropertyName("_initialDecimal");
        _InitialDecimal.SerializeJson(writer, options);
      }

      if (InitialInteger != null)
      {
        writer.WriteNumber("initialInteger", (int)InitialInteger!);
      }

      if (!string.IsNullOrEmpty(InitialDate))
      {
        writer.WriteString("initialDate", (string)InitialDate!);
      }

      if (_InitialDate != null)
      {
        writer.WritePropertyName("_initialDate");
        _InitialDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(InitialDateTime))
      {
        writer.WriteString("initialDateTime", (string)InitialDateTime!);
      }

      if (_InitialDateTime != null)
      {
        writer.WritePropertyName("_initialDateTime");
        _InitialDateTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(InitialTime))
      {
        writer.WriteString("initialTime", (string)InitialTime!);
      }

      if (_InitialTime != null)
      {
        writer.WritePropertyName("_initialTime");
        _InitialTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(InitialString))
      {
        writer.WriteString("initialString", (string)InitialString!);
      }

      if (_InitialString != null)
      {
        writer.WritePropertyName("_initialString");
        _InitialString.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(InitialUri))
      {
        writer.WriteString("initialUri", (string)InitialUri!);
      }

      if (_InitialUri != null)
      {
        writer.WritePropertyName("_initialUri");
        _InitialUri.SerializeJson(writer, options);
      }

      if (InitialAttachment != null)
      {
        writer.WritePropertyName("initialAttachment");
        InitialAttachment.SerializeJson(writer, options);
      }

      if (InitialCoding != null)
      {
        writer.WritePropertyName("initialCoding");
        InitialCoding.SerializeJson(writer, options);
      }

      if (InitialQuantity != null)
      {
        writer.WritePropertyName("initialQuantity");
        InitialQuantity.SerializeJson(writer, options);
      }

      if (InitialReference != null)
      {
        writer.WritePropertyName("initialReference");
        InitialReference.SerializeJson(writer, options);
      }

      if ((Item != null) && (Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();

        foreach (QuestionnaireItem valItem in Item)
        {
          valItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Coding objCode = new fhirCsR3.Models.Coding();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "definition":
          Definition = reader.GetString();
          break;

        case "_definition":
          _Definition = new fhirCsR3.Models.Element();
          _Definition.DeserializeJson(ref reader, options);
          break;

        case "enableWhen":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          EnableWhen = new List<QuestionnaireItemEnableWhen>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.QuestionnaireItemEnableWhen objEnableWhen = new fhirCsR3.Models.QuestionnaireItemEnableWhen();
            objEnableWhen.DeserializeJson(ref reader, options);
            EnableWhen.Add(objEnableWhen);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (EnableWhen.Count == 0)
          {
            EnableWhen = null;
          }

          break;

        case "initialBoolean":
          InitialBoolean = reader.GetBoolean();
          break;

        case "initialDecimal":
          InitialDecimal = reader.GetDecimal();
          break;

        case "_initialDecimal":
          _InitialDecimal = new fhirCsR3.Models.Element();
          _InitialDecimal.DeserializeJson(ref reader, options);
          break;

        case "initialInteger":
          InitialInteger = reader.GetInt32();
          break;

        case "initialDate":
          InitialDate = reader.GetString();
          break;

        case "_initialDate":
          _InitialDate = new fhirCsR3.Models.Element();
          _InitialDate.DeserializeJson(ref reader, options);
          break;

        case "initialDateTime":
          InitialDateTime = reader.GetString();
          break;

        case "_initialDateTime":
          _InitialDateTime = new fhirCsR3.Models.Element();
          _InitialDateTime.DeserializeJson(ref reader, options);
          break;

        case "initialTime":
          InitialTime = reader.GetString();
          break;

        case "_initialTime":
          _InitialTime = new fhirCsR3.Models.Element();
          _InitialTime.DeserializeJson(ref reader, options);
          break;

        case "initialString":
          InitialString = reader.GetString();
          break;

        case "_initialString":
          _InitialString = new fhirCsR3.Models.Element();
          _InitialString.DeserializeJson(ref reader, options);
          break;

        case "initialUri":
          InitialUri = reader.GetString();
          break;

        case "_initialUri":
          _InitialUri = new fhirCsR3.Models.Element();
          _InitialUri.DeserializeJson(ref reader, options);
          break;

        case "initialAttachment":
          InitialAttachment = new fhirCsR3.Models.Attachment();
          InitialAttachment.DeserializeJson(ref reader, options);
          break;

        case "initialCoding":
          InitialCoding = new fhirCsR3.Models.Coding();
          InitialCoding.DeserializeJson(ref reader, options);
          break;

        case "initialQuantity":
          InitialQuantity = new fhirCsR3.Models.Quantity();
          InitialQuantity.DeserializeJson(ref reader, options);
          break;

        case "initialReference":
          InitialReference = new fhirCsR3.Models.Reference();
          InitialReference.DeserializeJson(ref reader, options);
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Item = new List<QuestionnaireItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.QuestionnaireItem objItem = new fhirCsR3.Models.QuestionnaireItem();
            objItem.DeserializeJson(ref reader, options);
            Item.Add(objItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Item.Count == 0)
          {
            Item = null;
          }

          break;

        case "linkId":
          LinkId = reader.GetString();
          break;

        case "_linkId":
          _LinkId = new fhirCsR3.Models.Element();
          _LinkId.DeserializeJson(ref reader, options);
          break;

        case "maxLength":
          MaxLength = reader.GetInt32();
          break;

        case "option":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Option = new List<QuestionnaireItemOption>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.QuestionnaireItemOption objOption = new fhirCsR3.Models.QuestionnaireItemOption();
            objOption.DeserializeJson(ref reader, options);
            Option.Add(objOption);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Option.Count == 0)
          {
            Option = null;
          }

          break;

        case "options":
          Options = new fhirCsR3.Models.Reference();
          Options.DeserializeJson(ref reader, options);
          break;

        case "prefix":
          Prefix = reader.GetString();
          break;

        case "_prefix":
          _Prefix = new fhirCsR3.Models.Element();
          _Prefix.DeserializeJson(ref reader, options);
          break;

        case "readOnly":
          ReadOnly = reader.GetBoolean();
          break;

        case "repeats":
          Repeats = reader.GetBoolean();
          break;

        case "required":
          Required = reader.GetBoolean();
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR3.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR3.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Questionnaire.item.type field
  /// </summary>
  public static class QuestionnaireItemTypeCodes {
    public const string GROUP = "group";
    public const string DISPLAY = "display";
    public const string QUESTION = "question";
    public const string BOOLEAN = "boolean";
    public const string VAL_DECIMAL = "decimal";
    public const string INTEGER = "integer";
    public const string DATE = "date";
    public const string DATETIME = "dateTime";
    public const string TIME = "time";
    public const string VAL_STRING = "string";
    public const string TEXT = "text";
    public const string URL = "url";
    public const string CHOICE = "choice";
    public const string OPEN_CHOICE = "open-choice";
    public const string ATTACHMENT = "attachment";
    public const string REFERENCE = "reference";
    public const string QUANTITY = "quantity";
  }
  /// <summary>
  /// A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<Questionnaire>))]
  public class Questionnaire : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Questionnaire";
    /// <summary>
    /// The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
    /// </summary>
    public string ApprovalDate { get; set; }
    /// <summary>
    /// Extension container element for ApprovalDate
    /// </summary>
    public Element _ApprovalDate { get; set; }
    /// <summary>
    /// An identifier for this question or group of questions in a particular terminology such as LOINC.
    /// </summary>
    public List<Coding> Code { get; set; }
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the questionnaire. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the questionnaire was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the questionnaire as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The effective period for a questionnaire  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
    /// </summary>
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// Allows filtering of questionnaire that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental questionnaire in production.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this questionnaire outside of FHIR, where it is not possible to use the logical URI.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
    /// </summary>
    public List<QuestionnaireItem> Item { get; set; }
    /// <summary>
    /// It may be possible for the questionnaire to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// If specified, this is usually after the approval date.
    /// </summary>
    public string LastReviewDate { get; set; }
    /// <summary>
    /// Extension container element for LastReviewDate
    /// </summary>
    public Element _LastReviewDate { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Usually an organization, but may be an individual. The publisher (or steward) of the questionnaire is the organization or individual primarily responsible for the maintenance and upkeep of the questionnaire. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the questionnaire. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the questionnaire Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this questionnaire.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// Allows filtering of questionnaires that are appropriate for use vs. not.  
    /// This is labeled as "Is Modifier" because applications should not use a retired questionnaire without due consideration.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// If none are specified, then the subject is unlimited.
    /// </summary>
    public List<string> SubjectType { get; set; }
    /// <summary>
    /// Extension container element for SubjectType
    /// </summary>
    public List<Element> _SubjectType { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different questionnaire instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the questionnaire with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ApprovalDate))
      {
        writer.WriteString("approvalDate", (string)ApprovalDate!);
      }

      if (_ApprovalDate != null)
      {
        writer.WritePropertyName("_approvalDate");
        _ApprovalDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastReviewDate))
      {
        writer.WriteString("lastReviewDate", (string)LastReviewDate!);
      }

      if (_LastReviewDate != null)
      {
        writer.WritePropertyName("_lastReviewDate");
        _LastReviewDate.SerializeJson(writer, options);
      }

      if (EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        EffectivePeriod.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (Coding valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SubjectType != null) && (SubjectType.Count != 0))
      {
        writer.WritePropertyName("subjectType");
        writer.WriteStartArray();

        foreach (string valSubjectType in SubjectType)
        {
          writer.WriteStringValue(valSubjectType);
        }

        writer.WriteEndArray();
      }

      if ((_SubjectType != null) && (_SubjectType.Count != 0))
      {
        writer.WritePropertyName("_subjectType");
        writer.WriteStartArray();

        foreach (Element val_SubjectType in _SubjectType)
        {
          val_SubjectType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Item != null) && (Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();

        foreach (QuestionnaireItem valItem in Item)
        {
          valItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "approvalDate":
          ApprovalDate = reader.GetString();
          break;

        case "_approvalDate":
          _ApprovalDate = new fhirCsR3.Models.Element();
          _ApprovalDate.DeserializeJson(ref reader, options);
          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Coding objCode = new fhirCsR3.Models.Coding();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ContactDetail objContact = new fhirCsR3.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR3.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR3.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "effectivePeriod":
          EffectivePeriod = new fhirCsR3.Models.Period();
          EffectivePeriod.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Identifier objIdentifier = new fhirCsR3.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Item = new List<QuestionnaireItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.QuestionnaireItem objItem = new fhirCsR3.Models.QuestionnaireItem();
            objItem.DeserializeJson(ref reader, options);
            Item.Add(objItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Item.Count == 0)
          {
            Item = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objJurisdiction = new fhirCsR3.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "lastReviewDate":
          LastReviewDate = reader.GetString();
          break;

        case "_lastReviewDate":
          _LastReviewDate = new fhirCsR3.Models.Element();
          _LastReviewDate.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR3.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR3.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR3.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subjectType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubjectType = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SubjectType.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubjectType.Count == 0)
          {
            SubjectType = null;
          }

          break;

        case "_subjectType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _SubjectType = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Element obj_SubjectType = new fhirCsR3.Models.Element();
            obj_SubjectType.DeserializeJson(ref reader, options);
            _SubjectType.Add(obj_SubjectType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_SubjectType.Count == 0)
          {
            _SubjectType = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR3.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR3.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.UsageContext objUseContext = new fhirCsR3.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR3.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Questionnaire.status field
  /// </summary>
  public static class QuestionnaireStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
  }
}
