// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
  /// For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ContractAgent>))]
  public class ContractAgent : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Who or what parties are assigned roles in this Contract.
    /// </summary>
    public Reference Actor { get; set; }
    /// <summary>
    /// Role type of agent assigned roles in this Contract.
    /// </summary>
    public List<CodeableConcept> Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Actor != null)
      {
        writer.WritePropertyName("actor");
        Actor.SerializeJson(writer, options);
      }

      if ((Role != null) && (Role.Count != 0))
      {
        writer.WritePropertyName("role");
        writer.WriteStartArray();

        foreach (CodeableConcept valRole in Role)
        {
          valRole.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actor":
          Actor = new fhirCsR3.Models.Reference();
          Actor.DeserializeJson(ref reader, options);
          break;

        case "role":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Role = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objRole = new fhirCsR3.Models.CodeableConcept();
            objRole.DeserializeJson(ref reader, options);
            Role.Add(objRole);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Role.Count == 0)
          {
            Role = null;
          }

          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
  /// For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ContractSigner>))]
  public class ContractSigner : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Party which is a signator to this Contract.
    /// </summary>
    public Reference Party { get; set; }
    /// <summary>
    /// Legally binding Contract DSIG signature contents in Base64.
    /// </summary>
    public List<Signature> Signature { get; set; }
    /// <summary>
    /// Role of this Contract signer, e.g. notary, grantee.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Party != null)
      {
        writer.WritePropertyName("party");
        Party.SerializeJson(writer, options);
      }

      if ((Signature != null) && (Signature.Count != 0))
      {
        writer.WritePropertyName("signature");
        writer.WriteStartArray();

        foreach (Signature valSignature in Signature)
        {
          valSignature.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "party":
          Party = new fhirCsR3.Models.Reference();
          Party.DeserializeJson(ref reader, options);
          break;

        case "signature":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Signature = new List<Signature>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Signature objSignature = new fhirCsR3.Models.Signature();
            objSignature.DeserializeJson(ref reader, options);
            Signature.Add(objSignature);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Signature.Count == 0)
          {
            Signature = null;
          }

          break;

        case "type":
          Type = new fhirCsR3.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Contract Valued Item List.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ContractValuedItem>))]
  public class ContractValuedItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates the time during which this Contract ValuedItem information is effective.
    /// </summary>
    public string EffectiveTime { get; set; }
    /// <summary>
    /// Extension container element for EffectiveTime
    /// </summary>
    public Element _EffectiveTime { get; set; }
    /// <summary>
    /// Specific type of Contract Valued Item that may be priced.
    /// </summary>
    public CodeableConcept EntityCodeableConcept { get; set; }
    /// <summary>
    /// Specific type of Contract Valued Item that may be priced.
    /// </summary>
    public Reference EntityReference { get; set; }
    /// <summary>
    /// A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// Identifies a Contract Valued Item instance.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
    /// </summary>
    public decimal? Points { get; set; }
    /// <summary>
    /// Extension container element for Points
    /// </summary>
    public Element _Points { get; set; }
    /// <summary>
    /// Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// A Contract Valued Item unit valuation measure.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (EntityCodeableConcept != null)
      {
        writer.WritePropertyName("entityCodeableConcept");
        EntityCodeableConcept.SerializeJson(writer, options);
      }

      if (EntityReference != null)
      {
        writer.WritePropertyName("entityReference");
        EntityReference.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EffectiveTime))
      {
        writer.WriteString("effectiveTime", (string)EffectiveTime!);
      }

      if (_EffectiveTime != null)
      {
        writer.WritePropertyName("_effectiveTime");
        _EffectiveTime.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Points != null)
      {
        writer.WriteNumber("points", (decimal)Points!);
      }

      if (_Points != null)
      {
        writer.WritePropertyName("_points");
        _Points.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "effectiveTime":
          EffectiveTime = reader.GetString();
          break;

        case "_effectiveTime":
          _EffectiveTime = new fhirCsR3.Models.Element();
          _EffectiveTime.DeserializeJson(ref reader, options);
          break;

        case "entityCodeableConcept":
          EntityCodeableConcept = new fhirCsR3.Models.CodeableConcept();
          EntityCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "entityReference":
          EntityReference = new fhirCsR3.Models.Reference();
          EntityReference.DeserializeJson(ref reader, options);
          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR3.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR3.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "net":
          Net = new fhirCsR3.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "points":
          Points = reader.GetDecimal();
          break;

        case "_points":
          _Points = new fhirCsR3.Models.Element();
          _Points.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR3.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          UnitPrice = new fhirCsR3.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
  /// For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ContractTermAgent>))]
  public class ContractTermAgent : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The agent assigned a role in this Contract Provision.
    /// </summary>
    public Reference Actor { get; set; }
    /// <summary>
    /// Role played by the agent assigned this role in the execution of this Contract Provision.
    /// </summary>
    public List<CodeableConcept> Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Actor != null)
      {
        writer.WritePropertyName("actor");
        Actor.SerializeJson(writer, options);
      }

      if ((Role != null) && (Role.Count != 0))
      {
        writer.WritePropertyName("role");
        writer.WriteStartArray();

        foreach (CodeableConcept valRole in Role)
        {
          valRole.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actor":
          Actor = new fhirCsR3.Models.Reference();
          Actor.DeserializeJson(ref reader, options);
          break;

        case "role":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Role = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objRole = new fhirCsR3.Models.CodeableConcept();
            objRole.DeserializeJson(ref reader, options);
            Role.Add(objRole);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Role.Count == 0)
          {
            Role = null;
          }

          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Contract Provision Valued Item List.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ContractTermValuedItem>))]
  public class ContractTermValuedItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates the time during which this Contract Term ValuedItem information is effective.
    /// </summary>
    public string EffectiveTime { get; set; }
    /// <summary>
    /// Extension container element for EffectiveTime
    /// </summary>
    public Element _EffectiveTime { get; set; }
    /// <summary>
    /// Specific type of Contract Provision Valued Item that may be priced.
    /// </summary>
    public CodeableConcept EntityCodeableConcept { get; set; }
    /// <summary>
    /// Specific type of Contract Provision Valued Item that may be priced.
    /// </summary>
    public Reference EntityReference { get; set; }
    /// <summary>
    /// A real number that represents a multiplier used in determining the overall value of the Contract Provision Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// Identifies a Contract Provision Valued Item instance.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Expresses the product of the Contract Provision Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Provision Valued Item delivered. The concept of Points allows for assignment of point values for a Contract ProvisionValued Item, such that a monetary amount can be assigned to each point.
    /// </summary>
    public decimal? Points { get; set; }
    /// <summary>
    /// Extension container element for Points
    /// </summary>
    public Element _Points { get; set; }
    /// <summary>
    /// Specifies the units by which the Contract Provision Valued Item is measured or counted, and quantifies the countable or measurable Contract Term Valued Item instances.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// A Contract Provision Valued Item unit valuation measure.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (EntityCodeableConcept != null)
      {
        writer.WritePropertyName("entityCodeableConcept");
        EntityCodeableConcept.SerializeJson(writer, options);
      }

      if (EntityReference != null)
      {
        writer.WritePropertyName("entityReference");
        EntityReference.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EffectiveTime))
      {
        writer.WriteString("effectiveTime", (string)EffectiveTime!);
      }

      if (_EffectiveTime != null)
      {
        writer.WritePropertyName("_effectiveTime");
        _EffectiveTime.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Points != null)
      {
        writer.WriteNumber("points", (decimal)Points!);
      }

      if (_Points != null)
      {
        writer.WritePropertyName("_points");
        _Points.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "effectiveTime":
          EffectiveTime = reader.GetString();
          break;

        case "_effectiveTime":
          _EffectiveTime = new fhirCsR3.Models.Element();
          _EffectiveTime.DeserializeJson(ref reader, options);
          break;

        case "entityCodeableConcept":
          EntityCodeableConcept = new fhirCsR3.Models.CodeableConcept();
          EntityCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "entityReference":
          EntityReference = new fhirCsR3.Models.Reference();
          EntityReference.DeserializeJson(ref reader, options);
          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR3.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR3.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "net":
          Net = new fhirCsR3.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "points":
          Points = reader.GetDecimal();
          break;

        case "_points":
          _Points = new fhirCsR3.Models.Element();
          _Points.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR3.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          UnitPrice = new fhirCsR3.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ContractTerm>))]
  public class ContractTerm : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Action stipulated by this Contract Provision.
    /// </summary>
    public List<CodeableConcept> Action { get; set; }
    /// <summary>
    /// Reason or purpose for the action stipulated by this Contract Provision.
    /// </summary>
    public List<CodeableConcept> ActionReason { get; set; }
    /// <summary>
    /// Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
    /// For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
    /// </summary>
    public List<ContractTermAgent> Agent { get; set; }
    /// <summary>
    /// Relevant time or time-period when this Contract Provision is applicable.
    /// </summary>
    public Period Applies { get; set; }
    /// <summary>
    /// Nested group of Contract Provisions.
    /// </summary>
    public List<ContractTerm> Group { get; set; }
    /// <summary>
    /// Unique identifier for this particular Contract Provision.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// When this Contract Provision was issued.
    /// </summary>
    public string Issued { get; set; }
    /// <summary>
    /// Extension container element for Issued
    /// </summary>
    public Element _Issued { get; set; }
    /// <summary>
    /// A set of security labels that define which terms are controlled by this condition.
    /// </summary>
    public List<Coding> SecurityLabel { get; set; }
    /// <summary>
    /// Subtype of this Contract Provision, e.g. life time maximum payment for a contract term for specific valued item, e.g. disability payment.
    /// </summary>
    public CodeableConcept SubType { get; set; }
    /// <summary>
    /// Human readable form of this Contract Provision.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// The Contract.term.topic, as a Contract Resource subpart, is handled in the same manner as the Contract Resource as discussed above.
    /// </summary>
    public List<Reference> Topic { get; set; }
    /// <summary>
    /// Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Contract Provision Valued Item List.
    /// </summary>
    public List<ContractTermValuedItem> ValuedItem { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issued))
      {
        writer.WriteString("issued", (string)Issued!);
      }

      if (_Issued != null)
      {
        writer.WritePropertyName("_issued");
        _Issued.SerializeJson(writer, options);
      }

      if (Applies != null)
      {
        writer.WritePropertyName("applies");
        Applies.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (SubType != null)
      {
        writer.WritePropertyName("subType");
        SubType.SerializeJson(writer, options);
      }

      if ((Topic != null) && (Topic.Count != 0))
      {
        writer.WritePropertyName("topic");
        writer.WriteStartArray();

        foreach (Reference valTopic in Topic)
        {
          valTopic.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (CodeableConcept valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ActionReason != null) && (ActionReason.Count != 0))
      {
        writer.WritePropertyName("actionReason");
        writer.WriteStartArray();

        foreach (CodeableConcept valActionReason in ActionReason)
        {
          valActionReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SecurityLabel != null) && (SecurityLabel.Count != 0))
      {
        writer.WritePropertyName("securityLabel");
        writer.WriteStartArray();

        foreach (Coding valSecurityLabel in SecurityLabel)
        {
          valSecurityLabel.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Agent != null) && (Agent.Count != 0))
      {
        writer.WritePropertyName("agent");
        writer.WriteStartArray();

        foreach (ContractTermAgent valAgent in Agent)
        {
          valAgent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if ((ValuedItem != null) && (ValuedItem.Count != 0))
      {
        writer.WritePropertyName("valuedItem");
        writer.WriteStartArray();

        foreach (ContractTermValuedItem valValuedItem in ValuedItem)
        {
          valValuedItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Group != null) && (Group.Count != 0))
      {
        writer.WritePropertyName("group");
        writer.WriteStartArray();

        foreach (ContractTerm valGroup in Group)
        {
          valGroup.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objAction = new fhirCsR3.Models.CodeableConcept();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "actionReason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ActionReason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objActionReason = new fhirCsR3.Models.CodeableConcept();
            objActionReason.DeserializeJson(ref reader, options);
            ActionReason.Add(objActionReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ActionReason.Count == 0)
          {
            ActionReason = null;
          }

          break;

        case "agent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Agent = new List<ContractTermAgent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ContractTermAgent objAgent = new fhirCsR3.Models.ContractTermAgent();
            objAgent.DeserializeJson(ref reader, options);
            Agent.Add(objAgent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Agent.Count == 0)
          {
            Agent = null;
          }

          break;

        case "applies":
          Applies = new fhirCsR3.Models.Period();
          Applies.DeserializeJson(ref reader, options);
          break;

        case "group":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Group = new List<ContractTerm>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ContractTerm objGroup = new fhirCsR3.Models.ContractTerm();
            objGroup.DeserializeJson(ref reader, options);
            Group.Add(objGroup);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Group.Count == 0)
          {
            Group = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR3.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "issued":
          Issued = reader.GetString();
          break;

        case "_issued":
          _Issued = new fhirCsR3.Models.Element();
          _Issued.DeserializeJson(ref reader, options);
          break;

        case "securityLabel":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SecurityLabel = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Coding objSecurityLabel = new fhirCsR3.Models.Coding();
            objSecurityLabel.DeserializeJson(ref reader, options);
            SecurityLabel.Add(objSecurityLabel);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SecurityLabel.Count == 0)
          {
            SecurityLabel = null;
          }

          break;

        case "subType":
          SubType = new fhirCsR3.Models.CodeableConcept();
          SubType.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR3.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "topic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Topic = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objTopic = new fhirCsR3.Models.Reference();
            objTopic.DeserializeJson(ref reader, options);
            Topic.Add(objTopic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Topic.Count == 0)
          {
            Topic = null;
          }

          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valuedItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValuedItem = new List<ContractTermValuedItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ContractTermValuedItem objValuedItem = new fhirCsR3.Models.ContractTermValuedItem();
            objValuedItem.DeserializeJson(ref reader, options);
            ValuedItem.Add(objValuedItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValuedItem.Count == 0)
          {
            ValuedItem = null;
          }

          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ContractFriendly>))]
  public class ContractFriendly : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
    /// </summary>
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
    /// </summary>
    public Reference ContentReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ContentAttachment != null)
      {
        writer.WritePropertyName("contentAttachment");
        ContentAttachment.SerializeJson(writer, options);
      }

      if (ContentReference != null)
      {
        writer.WritePropertyName("contentReference");
        ContentReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          ContentAttachment = new fhirCsR3.Models.Attachment();
          ContentAttachment.DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          ContentReference = new fhirCsR3.Models.Reference();
          ContentReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// List of Legal expressions or representations of this Contract.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ContractLegal>))]
  public class ContractLegal : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Contract legal text in human renderable form.
    /// </summary>
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// Contract legal text in human renderable form.
    /// </summary>
    public Reference ContentReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ContentAttachment != null)
      {
        writer.WritePropertyName("contentAttachment");
        ContentAttachment.SerializeJson(writer, options);
      }

      if (ContentReference != null)
      {
        writer.WritePropertyName("contentReference");
        ContentReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          ContentAttachment = new fhirCsR3.Models.Attachment();
          ContentAttachment.DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          ContentReference = new fhirCsR3.Models.Reference();
          ContentReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// List of Computable Policy Rule Language Representations of this Contract.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<ContractRule>))]
  public class ContractRule : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
    /// </summary>
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
    /// </summary>
    public Reference ContentReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ContentAttachment != null)
      {
        writer.WritePropertyName("contentAttachment");
        ContentAttachment.SerializeJson(writer, options);
      }

      if (ContentReference != null)
      {
        writer.WritePropertyName("contentReference");
        ContentReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          ContentAttachment = new fhirCsR3.Models.Attachment();
          ContentAttachment.DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          ContentReference = new fhirCsR3.Models.Reference();
          ContentReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A formal agreement between parties regarding the conduct of business, exchange of information or other matters.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<Contract>))]
  public class Contract : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Contract";
    /// <summary>
    /// Action stipulated by this Contract.
    /// </summary>
    public List<CodeableConcept> Action { get; set; }
    /// <summary>
    /// Reason for action stipulated by this Contract.
    /// </summary>
    public List<CodeableConcept> ActionReason { get; set; }
    /// <summary>
    /// Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
    /// For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
    /// </summary>
    public List<ContractAgent> Agent { get; set; }
    /// <summary>
    /// Relevant time or time-period when this Contract is applicable.
    /// </summary>
    public Period Applies { get; set; }
    /// <summary>
    /// A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
    /// </summary>
    public List<Reference> Authority { get; set; }
    /// <summary>
    /// Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
    /// </summary>
    public Attachment BindingAttachment { get; set; }
    /// <summary>
    /// Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
    /// </summary>
    public Reference BindingReference { get; set; }
    /// <summary>
    /// The minimal content derived from the basal information source at a specific stage in its lifecycle.
    /// </summary>
    public CodeableConcept ContentDerivative { get; set; }
    /// <summary>
    /// The type of decision made by a grantor with respect to an offer made by a grantee.
    /// </summary>
    public CodeableConcept DecisionType { get; set; }
    /// <summary>
    /// Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
    /// </summary>
    public List<Reference> Domain { get; set; }
    /// <summary>
    /// The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
    /// </summary>
    public List<ContractFriendly> Friendly { get; set; }
    /// <summary>
    /// Unique identifier for this Contract.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// When this  Contract was issued.
    /// </summary>
    public string Issued { get; set; }
    /// <summary>
    /// Extension container element for Issued
    /// </summary>
    public Element _Issued { get; set; }
    /// <summary>
    /// List of Legal expressions or representations of this Contract.
    /// </summary>
    public List<ContractLegal> Legal { get; set; }
    /// <summary>
    /// List of Computable Policy Rule Language Representations of this Contract.
    /// </summary>
    public List<ContractRule> Rule { get; set; }
    /// <summary>
    /// A set of security labels that define which resources are controlled by this consent. If more than one label is specified, all resources must have all the specified labels.
    /// </summary>
    public List<Coding> SecurityLabel { get; set; }
    /// <summary>
    /// Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
    /// For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
    /// </summary>
    public List<ContractSigner> Signer { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the contract as not currently valid or active.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The Contract.subject is an entity that has some role with respect to the Contract.topic and Contract.topic.term, which is of focal interest to the parties to the contract and likely impacted in a significant way by the Contract.action/Contract.action.reason and the Contract.term.action/Contract.action.reason. 
    /// In many cases, the Contract.subject is a Contract.signer if the subject is an adult; has a legal interest in the contract; and incompetent to participate in the contract agreement.
    /// </summary>
    public List<Reference> Subject { get; set; }
    /// <summary>
    /// More specific type or specialization of an overarching or more general contract such as auto insurance, home owner  insurance, prenupial agreement, Advanced-Directive, or privacy consent.
    /// </summary>
    public List<CodeableConcept> SubType { get; set; }
    /// <summary>
    /// One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
    /// </summary>
    public List<ContractTerm> Term { get; set; }
    /// <summary>
    /// The Contract.topic may be an application for or offer of a policy or service (e.g., uri to a consent directive form or a health insurance policy), which becomes the Contract once accepted by both the grantor and grantee. 
    /// The Contract Resource may function simply as the computable representation of the executed contract, which may be the attached to the Contract Resource as the “binding” or as the “friendly” electronic form.  For example, a Contract Resource may be automatically populated with the values expressed in a related QuestionnaireResponse. 
    /// However, the Contract Resource may be considered the legally binding contract if it is the only “executed” form of this contract, and includes the signatures as *The Contract Resource may function as the computable representation of an application or offer in a pre-executed Contract if the grantor has not entered any values.  In this case, it is populated with values in a “legal” form of the application or offer or by the values in an associated Questionnaire.  If the grantor has filled in the legal form or the associated Questionnaire Response, then these values are used to populate a pre-executed Contract Resource.
    /// If the Contract.topic is considered an application or offer, then the policy is often required to be attached as the “legal” basis for the application to ensure “informed consent” to the contract, and that any discrepancy between the application and the policy are interpreted against the policy.  Implementers should check organizational and jurisdictional policies to determine the relationship among multiple representations of a contract pre- and post-execution.
    /// </summary>
    public List<Reference> Topic { get; set; }
    /// <summary>
    /// Type of Contract such as an insurance policy, real estate contract, a will, power of attorny, Privacy or Security policy , trust framework agreement, etc.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Contract Valued Item List.
    /// </summary>
    public List<ContractValuedItem> ValuedItem { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issued))
      {
        writer.WriteString("issued", (string)Issued!);
      }

      if (_Issued != null)
      {
        writer.WritePropertyName("_issued");
        _Issued.SerializeJson(writer, options);
      }

      if (Applies != null)
      {
        writer.WritePropertyName("applies");
        Applies.SerializeJson(writer, options);
      }

      if ((Subject != null) && (Subject.Count != 0))
      {
        writer.WritePropertyName("subject");
        writer.WriteStartArray();

        foreach (Reference valSubject in Subject)
        {
          valSubject.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Topic != null) && (Topic.Count != 0))
      {
        writer.WritePropertyName("topic");
        writer.WriteStartArray();

        foreach (Reference valTopic in Topic)
        {
          valTopic.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Authority != null) && (Authority.Count != 0))
      {
        writer.WritePropertyName("authority");
        writer.WriteStartArray();

        foreach (Reference valAuthority in Authority)
        {
          valAuthority.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Domain != null) && (Domain.Count != 0))
      {
        writer.WritePropertyName("domain");
        writer.WriteStartArray();

        foreach (Reference valDomain in Domain)
        {
          valDomain.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((SubType != null) && (SubType.Count != 0))
      {
        writer.WritePropertyName("subType");
        writer.WriteStartArray();

        foreach (CodeableConcept valSubType in SubType)
        {
          valSubType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (CodeableConcept valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ActionReason != null) && (ActionReason.Count != 0))
      {
        writer.WritePropertyName("actionReason");
        writer.WriteStartArray();

        foreach (CodeableConcept valActionReason in ActionReason)
        {
          valActionReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (DecisionType != null)
      {
        writer.WritePropertyName("decisionType");
        DecisionType.SerializeJson(writer, options);
      }

      if (ContentDerivative != null)
      {
        writer.WritePropertyName("contentDerivative");
        ContentDerivative.SerializeJson(writer, options);
      }

      if ((SecurityLabel != null) && (SecurityLabel.Count != 0))
      {
        writer.WritePropertyName("securityLabel");
        writer.WriteStartArray();

        foreach (Coding valSecurityLabel in SecurityLabel)
        {
          valSecurityLabel.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Agent != null) && (Agent.Count != 0))
      {
        writer.WritePropertyName("agent");
        writer.WriteStartArray();

        foreach (ContractAgent valAgent in Agent)
        {
          valAgent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Signer != null) && (Signer.Count != 0))
      {
        writer.WritePropertyName("signer");
        writer.WriteStartArray();

        foreach (ContractSigner valSigner in Signer)
        {
          valSigner.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ValuedItem != null) && (ValuedItem.Count != 0))
      {
        writer.WritePropertyName("valuedItem");
        writer.WriteStartArray();

        foreach (ContractValuedItem valValuedItem in ValuedItem)
        {
          valValuedItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Term != null) && (Term.Count != 0))
      {
        writer.WritePropertyName("term");
        writer.WriteStartArray();

        foreach (ContractTerm valTerm in Term)
        {
          valTerm.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (BindingAttachment != null)
      {
        writer.WritePropertyName("bindingAttachment");
        BindingAttachment.SerializeJson(writer, options);
      }

      if (BindingReference != null)
      {
        writer.WritePropertyName("bindingReference");
        BindingReference.SerializeJson(writer, options);
      }

      if ((Friendly != null) && (Friendly.Count != 0))
      {
        writer.WritePropertyName("friendly");
        writer.WriteStartArray();

        foreach (ContractFriendly valFriendly in Friendly)
        {
          valFriendly.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Legal != null) && (Legal.Count != 0))
      {
        writer.WritePropertyName("legal");
        writer.WriteStartArray();

        foreach (ContractLegal valLegal in Legal)
        {
          valLegal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Rule != null) && (Rule.Count != 0))
      {
        writer.WritePropertyName("rule");
        writer.WriteStartArray();

        foreach (ContractRule valRule in Rule)
        {
          valRule.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objAction = new fhirCsR3.Models.CodeableConcept();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "actionReason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ActionReason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objActionReason = new fhirCsR3.Models.CodeableConcept();
            objActionReason.DeserializeJson(ref reader, options);
            ActionReason.Add(objActionReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ActionReason.Count == 0)
          {
            ActionReason = null;
          }

          break;

        case "agent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Agent = new List<ContractAgent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ContractAgent objAgent = new fhirCsR3.Models.ContractAgent();
            objAgent.DeserializeJson(ref reader, options);
            Agent.Add(objAgent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Agent.Count == 0)
          {
            Agent = null;
          }

          break;

        case "applies":
          Applies = new fhirCsR3.Models.Period();
          Applies.DeserializeJson(ref reader, options);
          break;

        case "authority":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Authority = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objAuthority = new fhirCsR3.Models.Reference();
            objAuthority.DeserializeJson(ref reader, options);
            Authority.Add(objAuthority);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Authority.Count == 0)
          {
            Authority = null;
          }

          break;

        case "bindingAttachment":
          BindingAttachment = new fhirCsR3.Models.Attachment();
          BindingAttachment.DeserializeJson(ref reader, options);
          break;

        case "bindingReference":
          BindingReference = new fhirCsR3.Models.Reference();
          BindingReference.DeserializeJson(ref reader, options);
          break;

        case "contentDerivative":
          ContentDerivative = new fhirCsR3.Models.CodeableConcept();
          ContentDerivative.DeserializeJson(ref reader, options);
          break;

        case "decisionType":
          DecisionType = new fhirCsR3.Models.CodeableConcept();
          DecisionType.DeserializeJson(ref reader, options);
          break;

        case "domain":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Domain = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objDomain = new fhirCsR3.Models.Reference();
            objDomain.DeserializeJson(ref reader, options);
            Domain.Add(objDomain);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Domain.Count == 0)
          {
            Domain = null;
          }

          break;

        case "friendly":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Friendly = new List<ContractFriendly>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ContractFriendly objFriendly = new fhirCsR3.Models.ContractFriendly();
            objFriendly.DeserializeJson(ref reader, options);
            Friendly.Add(objFriendly);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Friendly.Count == 0)
          {
            Friendly = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR3.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "issued":
          Issued = reader.GetString();
          break;

        case "_issued":
          _Issued = new fhirCsR3.Models.Element();
          _Issued.DeserializeJson(ref reader, options);
          break;

        case "legal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Legal = new List<ContractLegal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ContractLegal objLegal = new fhirCsR3.Models.ContractLegal();
            objLegal.DeserializeJson(ref reader, options);
            Legal.Add(objLegal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Legal.Count == 0)
          {
            Legal = null;
          }

          break;

        case "rule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Rule = new List<ContractRule>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ContractRule objRule = new fhirCsR3.Models.ContractRule();
            objRule.DeserializeJson(ref reader, options);
            Rule.Add(objRule);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Rule.Count == 0)
          {
            Rule = null;
          }

          break;

        case "securityLabel":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SecurityLabel = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Coding objSecurityLabel = new fhirCsR3.Models.Coding();
            objSecurityLabel.DeserializeJson(ref reader, options);
            SecurityLabel.Add(objSecurityLabel);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SecurityLabel.Count == 0)
          {
            SecurityLabel = null;
          }

          break;

        case "signer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Signer = new List<ContractSigner>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ContractSigner objSigner = new fhirCsR3.Models.ContractSigner();
            objSigner.DeserializeJson(ref reader, options);
            Signer.Add(objSigner);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Signer.Count == 0)
          {
            Signer = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Subject = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objSubject = new fhirCsR3.Models.Reference();
            objSubject.DeserializeJson(ref reader, options);
            Subject.Add(objSubject);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Subject.Count == 0)
          {
            Subject = null;
          }

          break;

        case "subType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objSubType = new fhirCsR3.Models.CodeableConcept();
            objSubType.DeserializeJson(ref reader, options);
            SubType.Add(objSubType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubType.Count == 0)
          {
            SubType = null;
          }

          break;

        case "term":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Term = new List<ContractTerm>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ContractTerm objTerm = new fhirCsR3.Models.ContractTerm();
            objTerm.DeserializeJson(ref reader, options);
            Term.Add(objTerm);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Term.Count == 0)
          {
            Term = null;
          }

          break;

        case "topic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Topic = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objTopic = new fhirCsR3.Models.Reference();
            objTopic.DeserializeJson(ref reader, options);
            Topic.Add(objTopic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Topic.Count == 0)
          {
            Topic = null;
          }

          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valuedItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValuedItem = new List<ContractValuedItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.ContractValuedItem objValuedItem = new fhirCsR3.Models.ContractValuedItem();
            objValuedItem.DeserializeJson(ref reader, options);
            ValuedItem.Add(objValuedItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValuedItem.Count == 0)
          {
            ValuedItem = null;
          }

          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Contract.status field
  /// </summary>
  public static class ContractStatusCodes {
    public const string AMENDED = "amended";
    public const string APPENDED = "appended";
    public const string CANCELLED = "cancelled";
    public const string DISPUTED = "disputed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string EXECUTABLE = "executable";
    public const string EXECUTED = "executed";
    public const string NEGOTIABLE = "negotiable";
    public const string OFFERED = "offered";
    public const string POLICY = "policy";
    public const string REJECTED = "rejected";
    public const string RENEWED = "renewed";
    public const string REVOKED = "revoked";
    public const string RESOLVED = "resolved";
    public const string TERMINATED = "terminated";
  }
}
