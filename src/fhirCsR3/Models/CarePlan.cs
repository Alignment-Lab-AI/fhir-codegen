// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<CarePlanActivityDetail>))]
  public class CarePlanActivityDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// High-level categorization of the type of activity in a care plan.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// Tends to be less relevant for activities involving particular products.  Codes should not convey negation - use "prohibited" instead.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Identifies the quantity expected to be consumed in a given day.
    /// </summary>
    public Quantity DailyAmount { get; set; }
    /// <summary>
    /// Identifies the protocol, questionnaire, guideline or other specification the planned activity should be conducted in accordance with.
    /// </summary>
    public Reference Definition { get; set; }
    /// <summary>
    /// This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Internal reference that identifies the goals that this activity is intended to contribute towards meeting.
    /// </summary>
    public List<Reference> Goal { get; set; }
    /// <summary>
    /// May reference a specific clinical location or may identify a type of location.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// A performer MAY also be a participant in the care plan.
    /// </summary>
    public List<Reference> Performer { get; set; }
    /// <summary>
    /// Identifies the food, drug or other product to be consumed or supplied in the activity.
    /// </summary>
    public CodeableConcept ProductCodeableConcept { get; set; }
    /// <summary>
    /// Identifies the food, drug or other product to be consumed or supplied in the activity.
    /// </summary>
    public Reference ProductReference { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because it marks an activity as an activity that is not to be performed.
    /// </summary>
    public bool? Prohibited { get; set; }
    /// <summary>
    /// Identifies the quantity expected to be supplied, administered or consumed by the subject.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// This could be a diagnosis code.  If a full condition record exists or additional detail is needed, use reasonCondition instead.
    /// </summary>
    public List<CodeableConcept> ReasonCode { get; set; }
    /// <summary>
    /// Conditions can be identified at the activity level that are not identified as reasons for the overall plan.
    /// </summary>
    public List<Reference> ReasonReference { get; set; }
    /// <summary>
    /// The period, timing or frequency upon which the described activity is to occur.
    /// </summary>
    public Timing ScheduledTiming { get; set; }
    /// <summary>
    /// The period, timing or frequency upon which the described activity is to occur.
    /// </summary>
    public Period ScheduledPeriod { get; set; }
    /// <summary>
    /// The period, timing or frequency upon which the described activity is to occur.
    /// </summary>
    public string ScheduledString { get; set; }
    /// <summary>
    /// Extension container element for ScheduledString
    /// </summary>
    public Element _ScheduledString { get; set; }
    /// <summary>
    /// Some aspects of status can be inferred based on the resources linked in actionTaken.  Note that "status" is only as current as the plan was most recently updated.  
    /// The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the activity.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Will generally not be present if status is "complete".  Be sure to prompt to update this (or at least remove the existing value) if the status is changed.
    /// </summary>
    public string StatusReason { get; set; }
    /// <summary>
    /// Extension container element for StatusReason
    /// </summary>
    public Element _StatusReason { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Definition != null)
      {
        writer.WritePropertyName("definition");
        Definition.SerializeJson(writer, options);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if ((ReasonCode != null) && (ReasonCode.Count != 0))
      {
        writer.WritePropertyName("reasonCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valReasonCode in ReasonCode)
        {
          valReasonCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ReasonReference != null) && (ReasonReference.Count != 0))
      {
        writer.WritePropertyName("reasonReference");
        writer.WriteStartArray();

        foreach (Reference valReasonReference in ReasonReference)
        {
          valReasonReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Goal != null) && (Goal.Count != 0))
      {
        writer.WritePropertyName("goal");
        writer.WriteStartArray();

        foreach (Reference valGoal in Goal)
        {
          valGoal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StatusReason))
      {
        writer.WriteString("statusReason", (string)StatusReason!);
      }

      if (_StatusReason != null)
      {
        writer.WritePropertyName("_statusReason");
        _StatusReason.SerializeJson(writer, options);
      }

      if (Prohibited != null)
      {
        writer.WriteBoolean("prohibited", (bool)Prohibited!);
      }

      if (ScheduledTiming != null)
      {
        writer.WritePropertyName("scheduledTiming");
        ScheduledTiming.SerializeJson(writer, options);
      }

      if (ScheduledPeriod != null)
      {
        writer.WritePropertyName("scheduledPeriod");
        ScheduledPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ScheduledString))
      {
        writer.WriteString("scheduledString", (string)ScheduledString!);
      }

      if (_ScheduledString != null)
      {
        writer.WritePropertyName("_scheduledString");
        _ScheduledString.SerializeJson(writer, options);
      }

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if ((Performer != null) && (Performer.Count != 0))
      {
        writer.WritePropertyName("performer");
        writer.WriteStartArray();

        foreach (Reference valPerformer in Performer)
        {
          valPerformer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ProductCodeableConcept != null)
      {
        writer.WritePropertyName("productCodeableConcept");
        ProductCodeableConcept.SerializeJson(writer, options);
      }

      if (ProductReference != null)
      {
        writer.WritePropertyName("productReference");
        ProductReference.SerializeJson(writer, options);
      }

      if (DailyAmount != null)
      {
        writer.WritePropertyName("dailyAmount");
        DailyAmount.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR3.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "dailyAmount":
          DailyAmount = new fhirCsR3.Models.Quantity();
          DailyAmount.DeserializeJson(ref reader, options);
          break;

        case "definition":
          Definition = new fhirCsR3.Models.Reference();
          Definition.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "goal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Goal = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objGoal = new fhirCsR3.Models.Reference();
            objGoal.DeserializeJson(ref reader, options);
            Goal.Add(objGoal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Goal.Count == 0)
          {
            Goal = null;
          }

          break;

        case "location":
          Location = new fhirCsR3.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "performer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Performer = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objPerformer = new fhirCsR3.Models.Reference();
            objPerformer.DeserializeJson(ref reader, options);
            Performer.Add(objPerformer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Performer.Count == 0)
          {
            Performer = null;
          }

          break;

        case "productCodeableConcept":
          ProductCodeableConcept = new fhirCsR3.Models.CodeableConcept();
          ProductCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "productReference":
          ProductReference = new fhirCsR3.Models.Reference();
          ProductReference.DeserializeJson(ref reader, options);
          break;

        case "prohibited":
          Prohibited = reader.GetBoolean();
          break;

        case "quantity":
          Quantity = new fhirCsR3.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "reasonCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objReasonCode = new fhirCsR3.Models.CodeableConcept();
            objReasonCode.DeserializeJson(ref reader, options);
            ReasonCode.Add(objReasonCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonCode.Count == 0)
          {
            ReasonCode = null;
          }

          break;

        case "reasonReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonReference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objReasonReference = new fhirCsR3.Models.Reference();
            objReasonReference.DeserializeJson(ref reader, options);
            ReasonReference.Add(objReasonReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonReference.Count == 0)
          {
            ReasonReference = null;
          }

          break;

        case "scheduledTiming":
          ScheduledTiming = new fhirCsR3.Models.Timing();
          ScheduledTiming.DeserializeJson(ref reader, options);
          break;

        case "scheduledPeriod":
          ScheduledPeriod = new fhirCsR3.Models.Period();
          ScheduledPeriod.DeserializeJson(ref reader, options);
          break;

        case "scheduledString":
          ScheduledString = reader.GetString();
          break;

        case "_scheduledString":
          _ScheduledString = new fhirCsR3.Models.Element();
          _ScheduledString.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "statusReason":
          StatusReason = reader.GetString();
          break;

        case "_statusReason":
          _StatusReason = new fhirCsR3.Models.Element();
          _StatusReason.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CarePlan.activity.detail.status field
  /// </summary>
  public static class CarePlanActivityDetailStatusCodes {
    public const string NOT_STARTED = "not-started";
    public const string SCHEDULED = "scheduled";
    public const string IN_PROGRESS = "in-progress";
    public const string ON_HOLD = "on-hold";
    public const string COMPLETED = "completed";
    public const string CANCELLED = "cancelled";
    public const string UNKNOWN = "unknown";
  }
  /// <summary>
  /// Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<CarePlanActivity>))]
  public class CarePlanActivity : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
    /// </summary>
    public CarePlanActivityDetail Detail { get; set; }
    /// <summary>
    /// Note that this should not duplicate the activity status (e.g. completed or in progress).
    /// </summary>
    public List<CodeableConcept> OutcomeCodeableConcept { get; set; }
    /// <summary>
    /// The activity outcome is independent of the outcome of the related goal(s).  For example, if the goal is to achieve a target body weight of 150 lb and an activity is defined to diet, then the activity outcome could be calories consumed whereas the goal outcome is an observation for the actual body weight measured.
    /// </summary>
    public List<Reference> OutcomeReference { get; set; }
    /// <summary>
    /// This element should NOT be used to describe the activity to be performed - that occurs either within the resource pointed to by activity.detail.reference or in activity.detail.description.
    /// </summary>
    public List<Annotation> Progress { get; set; }
    /// <summary>
    /// Standard extension exists ([goal-pertainstogoal](extension-goal-pertainstogoal.html)) that allows goals to be referenced from any of the referenced resources in CarePlan.activity.reference.  
    /// The goal should be visible when the resource referenced by CarePlan.activity.reference is viewed indepedently from the CarePlan.  Requests that are pointed to by a CarePlan using this element should *not* point to this CarePlan using the "basedOn" element.  i.e. Requests that are part of a CarePlan are not "based on" the CarePlan.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((OutcomeCodeableConcept != null) && (OutcomeCodeableConcept.Count != 0))
      {
        writer.WritePropertyName("outcomeCodeableConcept");
        writer.WriteStartArray();

        foreach (CodeableConcept valOutcomeCodeableConcept in OutcomeCodeableConcept)
        {
          valOutcomeCodeableConcept.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((OutcomeReference != null) && (OutcomeReference.Count != 0))
      {
        writer.WritePropertyName("outcomeReference");
        writer.WriteStartArray();

        foreach (Reference valOutcomeReference in OutcomeReference)
        {
          valOutcomeReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Progress != null) && (Progress.Count != 0))
      {
        writer.WritePropertyName("progress");
        writer.WriteStartArray();

        foreach (Annotation valProgress in Progress)
        {
          valProgress.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (Detail != null)
      {
        writer.WritePropertyName("detail");
        Detail.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "detail":
          Detail = new fhirCsR3.Models.CarePlanActivityDetail();
          Detail.DeserializeJson(ref reader, options);
          break;

        case "outcomeCodeableConcept":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          OutcomeCodeableConcept = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objOutcomeCodeableConcept = new fhirCsR3.Models.CodeableConcept();
            objOutcomeCodeableConcept.DeserializeJson(ref reader, options);
            OutcomeCodeableConcept.Add(objOutcomeCodeableConcept);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (OutcomeCodeableConcept.Count == 0)
          {
            OutcomeCodeableConcept = null;
          }

          break;

        case "outcomeReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          OutcomeReference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objOutcomeReference = new fhirCsR3.Models.Reference();
            objOutcomeReference.DeserializeJson(ref reader, options);
            OutcomeReference.Add(objOutcomeReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (OutcomeReference.Count == 0)
          {
            OutcomeReference = null;
          }

          break;

        case "progress":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Progress = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Annotation objProgress = new fhirCsR3.Models.Annotation();
            objProgress.DeserializeJson(ref reader, options);
            Progress.Add(objProgress);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Progress.Count == 0)
          {
            Progress = null;
          }

          break;

        case "reference":
          Reference = new fhirCsR3.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<CarePlan>))]
  public class CarePlan : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "CarePlan";
    /// <summary>
    /// Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
    /// </summary>
    public List<CarePlanActivity> Activity { get; set; }
    /// <summary>
    /// Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
    /// </summary>
    public List<Reference> Addresses { get; set; }
    /// <summary>
    /// Collaborative care plans may have multiple authors.
    /// </summary>
    public List<Reference> Author { get; set; }
    /// <summary>
    /// A care plan that is fulfilled in whole or in part by this care plan.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
    /// </summary>
    public List<Reference> CareTeam { get; set; }
    /// <summary>
    /// There may be multiple axis of categorization and one plan may serve multiple purposes.  In some cases, this may be redundant with references to CarePlan.concern.
    /// </summary>
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// Activities conducted as a result of the care plan may well occur as part of other encounters/episodes.
    /// </summary>
    public Reference Context { get; set; }
    /// <summary>
    /// Identifies the protocol, questionnaire, guideline or other specification the care plan should be conducted in accordance with.
    /// </summary>
    public List<Reference> Definition { get; set; }
    /// <summary>
    /// A description of the scope and nature of the plan.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Goal can be achieving a particular change or merely maintaining a current state or even slowing a decline.
    /// </summary>
    public List<Reference> Goal { get; set; }
    /// <summary>
    /// This records identifiers associated with this care plan that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
    /// </summary>
    public string Intent { get; set; }
    /// <summary>
    /// Extension container element for Intent
    /// </summary>
    public Element _Intent { get; set; }
    /// <summary>
    /// General notes about the care plan not covered elsewhere.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Each care plan is an independent request, such that having a care plan be part of another care plan can cause issues with cascading statuses.  As such, this element is still being discussed.
    /// </summary>
    public List<Reference> PartOf { get; set; }
    /// <summary>
    /// Any activities scheduled as part of the plan should be constrained to the specified period regardless of whether the activities are planned within a single encounter/episode or across multiple encounters/episodes (e.g. the longitudinal management of a chronic condition).
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// The replacement could be because the initial care plan was immediately rejected (due to an issue) or because the previous care plan was completed, but the need for the action described by the care plan remains ongoing.
    /// </summary>
    public List<Reference> Replaces { get; set; }
    /// <summary>
    /// The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the care plan.
    /// This element is labeled as a modifier because the status contains the code entered-in-error] that marks the plan as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Identifies the patient or group whose intended care is described by the plan.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Use "concern" to identify specific conditions addressed by the care plan.
    /// </summary>
    public List<Reference> SupportingInfo { get; set; }
    /// <summary>
    /// Human-friendly name for the CarePlan.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Definition != null) && (Definition.Count != 0))
      {
        writer.WritePropertyName("definition");
        writer.WriteStartArray();

        foreach (Reference valDefinition in Definition)
        {
          valDefinition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Replaces != null) && (Replaces.Count != 0))
      {
        writer.WritePropertyName("replaces");
        writer.WriteStartArray();

        foreach (Reference valReplaces in Replaces)
        {
          valReplaces.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PartOf != null) && (PartOf.Count != 0))
      {
        writer.WritePropertyName("partOf");
        writer.WriteStartArray();

        foreach (Reference valPartOf in PartOf)
        {
          valPartOf.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Intent))
      {
        writer.WriteString("intent", (string)Intent!);
      }

      if (_Intent != null)
      {
        writer.WritePropertyName("_intent");
        _Intent.SerializeJson(writer, options);
      }

      if ((Category != null) && (Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();

        foreach (CodeableConcept valCategory in Category)
        {
          valCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (Context != null)
      {
        writer.WritePropertyName("context");
        Context.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if ((Author != null) && (Author.Count != 0))
      {
        writer.WritePropertyName("author");
        writer.WriteStartArray();

        foreach (Reference valAuthor in Author)
        {
          valAuthor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((CareTeam != null) && (CareTeam.Count != 0))
      {
        writer.WritePropertyName("careTeam");
        writer.WriteStartArray();

        foreach (Reference valCareTeam in CareTeam)
        {
          valCareTeam.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Addresses != null) && (Addresses.Count != 0))
      {
        writer.WritePropertyName("addresses");
        writer.WriteStartArray();

        foreach (Reference valAddresses in Addresses)
        {
          valAddresses.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SupportingInfo != null) && (SupportingInfo.Count != 0))
      {
        writer.WritePropertyName("supportingInfo");
        writer.WriteStartArray();

        foreach (Reference valSupportingInfo in SupportingInfo)
        {
          valSupportingInfo.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Goal != null) && (Goal.Count != 0))
      {
        writer.WritePropertyName("goal");
        writer.WriteStartArray();

        foreach (Reference valGoal in Goal)
        {
          valGoal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Activity != null) && (Activity.Count != 0))
      {
        writer.WritePropertyName("activity");
        writer.WriteStartArray();

        foreach (CarePlanActivity valActivity in Activity)
        {
          valActivity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "activity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Activity = new List<CarePlanActivity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CarePlanActivity objActivity = new fhirCsR3.Models.CarePlanActivity();
            objActivity.DeserializeJson(ref reader, options);
            Activity.Add(objActivity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Activity.Count == 0)
          {
            Activity = null;
          }

          break;

        case "addresses":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Addresses = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objAddresses = new fhirCsR3.Models.Reference();
            objAddresses.DeserializeJson(ref reader, options);
            Addresses.Add(objAddresses);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Addresses.Count == 0)
          {
            Addresses = null;
          }

          break;

        case "author":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Author = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objAuthor = new fhirCsR3.Models.Reference();
            objAuthor.DeserializeJson(ref reader, options);
            Author.Add(objAuthor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Author.Count == 0)
          {
            Author = null;
          }

          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objBasedOn = new fhirCsR3.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "careTeam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CareTeam = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objCareTeam = new fhirCsR3.Models.Reference();
            objCareTeam.DeserializeJson(ref reader, options);
            CareTeam.Add(objCareTeam);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CareTeam.Count == 0)
          {
            CareTeam = null;
          }

          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objCategory = new fhirCsR3.Models.CodeableConcept();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "context":
          Context = new fhirCsR3.Models.Reference();
          Context.DeserializeJson(ref reader, options);
          break;

        case "definition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Definition = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objDefinition = new fhirCsR3.Models.Reference();
            objDefinition.DeserializeJson(ref reader, options);
            Definition.Add(objDefinition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Definition.Count == 0)
          {
            Definition = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "goal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Goal = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objGoal = new fhirCsR3.Models.Reference();
            objGoal.DeserializeJson(ref reader, options);
            Goal.Add(objGoal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Goal.Count == 0)
          {
            Goal = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Identifier objIdentifier = new fhirCsR3.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "intent":
          Intent = reader.GetString();
          break;

        case "_intent":
          _Intent = new fhirCsR3.Models.Element();
          _Intent.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Annotation objNote = new fhirCsR3.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "partOf":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PartOf = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objPartOf = new fhirCsR3.Models.Reference();
            objPartOf.DeserializeJson(ref reader, options);
            PartOf.Add(objPartOf);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PartOf.Count == 0)
          {
            PartOf = null;
          }

          break;

        case "period":
          Period = new fhirCsR3.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "replaces":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Replaces = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objReplaces = new fhirCsR3.Models.Reference();
            objReplaces.DeserializeJson(ref reader, options);
            Replaces.Add(objReplaces);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Replaces.Count == 0)
          {
            Replaces = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR3.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "supportingInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportingInfo = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objSupportingInfo = new fhirCsR3.Models.Reference();
            objSupportingInfo.DeserializeJson(ref reader, options);
            SupportingInfo.Add(objSupportingInfo);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportingInfo.Count == 0)
          {
            SupportingInfo = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR3.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CarePlan.intent field
  /// </summary>
  public static class CarePlanIntentCodes {
    public const string PROPOSAL = "proposal";
    public const string PLAN = "plan";
    public const string ORDER = "order";
    public const string OPTION = "option";
  }
  /// <summary>
  /// Code Values for the CarePlan.status field
  /// </summary>
  public static class CarePlanStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string SUSPENDED = "suspended";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string CANCELLED = "cancelled";
    public const string UNKNOWN = "unknown";
  }
}
