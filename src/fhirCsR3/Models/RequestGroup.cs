// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// An expression that describes applicability criteria, or start/stop conditions for the action.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<RequestGroupActionCondition>))]
  public class RequestGroupActionCondition : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A brief, natural language description of the condition that effectively communicates the intended semantics.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
    /// </summary>
    public string Expression { get; set; }
    /// <summary>
    /// Extension container element for Expression
    /// </summary>
    public Element _Expression { get; set; }
    /// <summary>
    /// Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe when enter/exit criteria for an action.
    /// </summary>
    public string Kind { get; set; }
    /// <summary>
    /// Extension container element for Kind
    /// </summary>
    public Element _Kind { get; set; }
    /// <summary>
    /// The media type of the language for the expression.
    /// </summary>
    public string Language { get; set; }
    /// <summary>
    /// Extension container element for Language
    /// </summary>
    public Element _Language { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Kind))
      {
        writer.WriteString("kind", (string)Kind!);
      }

      if (_Kind != null)
      {
        writer.WritePropertyName("_kind");
        _Kind.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Language))
      {
        writer.WriteString("language", (string)Language!);
      }

      if (_Language != null)
      {
        writer.WritePropertyName("_language");
        _Language.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Expression))
      {
        writer.WriteString("expression", (string)Expression!);
      }

      if (_Expression != null)
      {
        writer.WritePropertyName("_expression");
        _Expression.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "expression":
          Expression = reader.GetString();
          break;

        case "_expression":
          _Expression = new fhirCsR3.Models.Element();
          _Expression.DeserializeJson(ref reader, options);
          break;

        case "kind":
          Kind = reader.GetString();
          break;

        case "_kind":
          _Kind = new fhirCsR3.Models.Element();
          _Kind.DeserializeJson(ref reader, options);
          break;

        case "language":
          Language = reader.GetString();
          break;

        case "_language":
          _Language = new fhirCsR3.Models.Element();
          _Language.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the RequestGroup.action.condition.kind field
  /// </summary>
  public static class RequestGroupActionConditionKindCodes {
    public const string APPLICABILITY = "applicability";
    public const string START = "start";
    public const string STOP = "stop";
  }
  /// <summary>
  /// A relationship to another action such as "before" or "30-60 minutes after start of".
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<RequestGroupActionRelatedAction>))]
  public class RequestGroupActionRelatedAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The element id of the action this is related to.
    /// </summary>
    public string ActionId { get; set; }
    /// <summary>
    /// Extension container element for ActionId
    /// </summary>
    public Element _ActionId { get; set; }
    /// <summary>
    /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
    /// </summary>
    public Duration OffsetDuration { get; set; }
    /// <summary>
    /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
    /// </summary>
    public Range OffsetRange { get; set; }
    /// <summary>
    /// The relationship of this action to the related action.
    /// </summary>
    public string Relationship { get; set; }
    /// <summary>
    /// Extension container element for Relationship
    /// </summary>
    public Element _Relationship { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(ActionId))
      {
        writer.WriteString("actionId", (string)ActionId!);
      }

      if (_ActionId != null)
      {
        writer.WritePropertyName("_actionId");
        _ActionId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Relationship))
      {
        writer.WriteString("relationship", (string)Relationship!);
      }

      if (_Relationship != null)
      {
        writer.WritePropertyName("_relationship");
        _Relationship.SerializeJson(writer, options);
      }

      if (OffsetDuration != null)
      {
        writer.WritePropertyName("offsetDuration");
        OffsetDuration.SerializeJson(writer, options);
      }

      if (OffsetRange != null)
      {
        writer.WritePropertyName("offsetRange");
        OffsetRange.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actionId":
          ActionId = reader.GetString();
          break;

        case "_actionId":
          _ActionId = new fhirCsR3.Models.Element();
          _ActionId.DeserializeJson(ref reader, options);
          break;

        case "offsetDuration":
          OffsetDuration = new fhirCsR3.Models.Duration();
          OffsetDuration.DeserializeJson(ref reader, options);
          break;

        case "offsetRange":
          OffsetRange = new fhirCsR3.Models.Range();
          OffsetRange.DeserializeJson(ref reader, options);
          break;

        case "relationship":
          Relationship = reader.GetString();
          break;

        case "_relationship":
          _Relationship = new fhirCsR3.Models.Element();
          _Relationship.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the RequestGroup.action.relatedAction.relationship field
  /// </summary>
  public static class RequestGroupActionRelatedActionRelationshipCodes {
    public const string BEFORE_START = "before-start";
    public const string BEFORE = "before";
    public const string BEFORE_END = "before-end";
    public const string CONCURRENT_WITH_START = "concurrent-with-start";
    public const string CONCURRENT = "concurrent";
    public const string CONCURRENT_WITH_END = "concurrent-with-end";
    public const string AFTER_START = "after-start";
    public const string AFTER = "after";
    public const string AFTER_END = "after-end";
  }
  /// <summary>
  /// The actions, if any, produced by the evaluation of the artifact.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<RequestGroupAction>))]
  public class RequestGroupAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Sub actions.
    /// </summary>
    public List<RequestGroupAction> Action { get; set; }
    /// <summary>
    /// Defines whether the action can be selected multiple times.
    /// </summary>
    public string CardinalityBehavior { get; set; }
    /// <summary>
    /// Extension container element for CardinalityBehavior
    /// </summary>
    public Element _CardinalityBehavior { get; set; }
    /// <summary>
    /// A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a the section of a documentation template.
    /// </summary>
    public List<CodeableConcept> Code { get; set; }
    /// <summary>
    /// An expression that describes applicability criteria, or start/stop conditions for the action.
    /// </summary>
    public List<RequestGroupActionCondition> Condition { get; set; }
    /// <summary>
    /// A short description of the action used to provide a summary to display to the user.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
    /// </summary>
    public List<RelatedArtifact> Documentation { get; set; }
    /// <summary>
    /// Defines the grouping behavior for the action and its children.
    /// </summary>
    public string GroupingBehavior { get; set; }
    /// <summary>
    /// Extension container element for GroupingBehavior
    /// </summary>
    public Element _GroupingBehavior { get; set; }
    /// <summary>
    /// A user-visible label for the action.
    /// </summary>
    public string Label { get; set; }
    /// <summary>
    /// Extension container element for Label
    /// </summary>
    public Element _Label { get; set; }
    /// <summary>
    /// The participant that should perform or be responsible for this action.
    /// </summary>
    public List<Reference> Participant { get; set; }
    /// <summary>
    /// Defines whether the action should usually be preselected.
    /// </summary>
    public string PrecheckBehavior { get; set; }
    /// <summary>
    /// Extension container element for PrecheckBehavior
    /// </summary>
    public Element _PrecheckBehavior { get; set; }
    /// <summary>
    /// A relationship to another action such as "before" or "30-60 minutes after start of".
    /// </summary>
    public List<RequestGroupActionRelatedAction> RelatedAction { get; set; }
    /// <summary>
    /// Defines the requiredness behavior for the action.
    /// </summary>
    public string RequiredBehavior { get; set; }
    /// <summary>
    /// Extension container element for RequiredBehavior
    /// </summary>
    public Element _RequiredBehavior { get; set; }
    /// <summary>
    /// The target resource SHALL be a [Request](request.html) resource with a Request.intent set to "option".
    /// </summary>
    public Reference Resource { get; set; }
    /// <summary>
    /// Defines the selection behavior for the action and its children.
    /// </summary>
    public string SelectionBehavior { get; set; }
    /// <summary>
    /// Extension container element for SelectionBehavior
    /// </summary>
    public Element _SelectionBehavior { get; set; }
    /// <summary>
    /// A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that may not be capable of interpreting it dynamically.
    /// </summary>
    public string TextEquivalent { get; set; }
    /// <summary>
    /// Extension container element for TextEquivalent
    /// </summary>
    public Element _TextEquivalent { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public string TimingDateTime { get; set; }
    /// <summary>
    /// Extension container element for TimingDateTime
    /// </summary>
    public Element _TimingDateTime { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public Period TimingPeriod { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public Duration TimingDuration { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public Range TimingRange { get; set; }
    /// <summary>
    /// An optional value describing when the action should be performed.
    /// </summary>
    public Timing TimingTiming { get; set; }
    /// <summary>
    /// The title of the action displayed to a user.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// The type of action to perform (create, update, remove).
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Label))
      {
        writer.WriteString("label", (string)Label!);
      }

      if (_Label != null)
      {
        writer.WritePropertyName("_label");
        _Label.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TextEquivalent))
      {
        writer.WriteString("textEquivalent", (string)TextEquivalent!);
      }

      if (_TextEquivalent != null)
      {
        writer.WritePropertyName("_textEquivalent");
        _TextEquivalent.SerializeJson(writer, options);
      }

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (CodeableConcept valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Documentation != null) && (Documentation.Count != 0))
      {
        writer.WritePropertyName("documentation");
        writer.WriteStartArray();

        foreach (RelatedArtifact valDocumentation in Documentation)
        {
          valDocumentation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Condition != null) && (Condition.Count != 0))
      {
        writer.WritePropertyName("condition");
        writer.WriteStartArray();

        foreach (RequestGroupActionCondition valCondition in Condition)
        {
          valCondition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelatedAction != null) && (RelatedAction.Count != 0))
      {
        writer.WritePropertyName("relatedAction");
        writer.WriteStartArray();

        foreach (RequestGroupActionRelatedAction valRelatedAction in RelatedAction)
        {
          valRelatedAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(TimingDateTime))
      {
        writer.WriteString("timingDateTime", (string)TimingDateTime!);
      }

      if (_TimingDateTime != null)
      {
        writer.WritePropertyName("_timingDateTime");
        _TimingDateTime.SerializeJson(writer, options);
      }

      if (TimingPeriod != null)
      {
        writer.WritePropertyName("timingPeriod");
        TimingPeriod.SerializeJson(writer, options);
      }

      if (TimingDuration != null)
      {
        writer.WritePropertyName("timingDuration");
        TimingDuration.SerializeJson(writer, options);
      }

      if (TimingRange != null)
      {
        writer.WritePropertyName("timingRange");
        TimingRange.SerializeJson(writer, options);
      }

      if (TimingTiming != null)
      {
        writer.WritePropertyName("timingTiming");
        TimingTiming.SerializeJson(writer, options);
      }

      if ((Participant != null) && (Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();

        foreach (Reference valParticipant in Participant)
        {
          valParticipant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(GroupingBehavior))
      {
        writer.WriteString("groupingBehavior", (string)GroupingBehavior!);
      }

      if (_GroupingBehavior != null)
      {
        writer.WritePropertyName("_groupingBehavior");
        _GroupingBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SelectionBehavior))
      {
        writer.WriteString("selectionBehavior", (string)SelectionBehavior!);
      }

      if (_SelectionBehavior != null)
      {
        writer.WritePropertyName("_selectionBehavior");
        _SelectionBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RequiredBehavior))
      {
        writer.WriteString("requiredBehavior", (string)RequiredBehavior!);
      }

      if (_RequiredBehavior != null)
      {
        writer.WritePropertyName("_requiredBehavior");
        _RequiredBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PrecheckBehavior))
      {
        writer.WriteString("precheckBehavior", (string)PrecheckBehavior!);
      }

      if (_PrecheckBehavior != null)
      {
        writer.WritePropertyName("_precheckBehavior");
        _PrecheckBehavior.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CardinalityBehavior))
      {
        writer.WriteString("cardinalityBehavior", (string)CardinalityBehavior!);
      }

      if (_CardinalityBehavior != null)
      {
        writer.WritePropertyName("_cardinalityBehavior");
        _CardinalityBehavior.SerializeJson(writer, options);
      }

      if (Resource != null)
      {
        writer.WritePropertyName("resource");
        Resource.SerializeJson(writer, options);
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (RequestGroupAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<RequestGroupAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.RequestGroupAction objAction = new fhirCsR3.Models.RequestGroupAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "cardinalityBehavior":
          CardinalityBehavior = reader.GetString();
          break;

        case "_cardinalityBehavior":
          _CardinalityBehavior = new fhirCsR3.Models.Element();
          _CardinalityBehavior.DeserializeJson(ref reader, options);
          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.CodeableConcept objCode = new fhirCsR3.Models.CodeableConcept();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "condition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Condition = new List<RequestGroupActionCondition>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.RequestGroupActionCondition objCondition = new fhirCsR3.Models.RequestGroupActionCondition();
            objCondition.DeserializeJson(ref reader, options);
            Condition.Add(objCondition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Condition.Count == 0)
          {
            Condition = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Documentation = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.RelatedArtifact objDocumentation = new fhirCsR3.Models.RelatedArtifact();
            objDocumentation.DeserializeJson(ref reader, options);
            Documentation.Add(objDocumentation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Documentation.Count == 0)
          {
            Documentation = null;
          }

          break;

        case "groupingBehavior":
          GroupingBehavior = reader.GetString();
          break;

        case "_groupingBehavior":
          _GroupingBehavior = new fhirCsR3.Models.Element();
          _GroupingBehavior.DeserializeJson(ref reader, options);
          break;

        case "label":
          Label = reader.GetString();
          break;

        case "_label":
          _Label = new fhirCsR3.Models.Element();
          _Label.DeserializeJson(ref reader, options);
          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Participant = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objParticipant = new fhirCsR3.Models.Reference();
            objParticipant.DeserializeJson(ref reader, options);
            Participant.Add(objParticipant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Participant.Count == 0)
          {
            Participant = null;
          }

          break;

        case "precheckBehavior":
          PrecheckBehavior = reader.GetString();
          break;

        case "_precheckBehavior":
          _PrecheckBehavior = new fhirCsR3.Models.Element();
          _PrecheckBehavior.DeserializeJson(ref reader, options);
          break;

        case "relatedAction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedAction = new List<RequestGroupActionRelatedAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.RequestGroupActionRelatedAction objRelatedAction = new fhirCsR3.Models.RequestGroupActionRelatedAction();
            objRelatedAction.DeserializeJson(ref reader, options);
            RelatedAction.Add(objRelatedAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedAction.Count == 0)
          {
            RelatedAction = null;
          }

          break;

        case "requiredBehavior":
          RequiredBehavior = reader.GetString();
          break;

        case "_requiredBehavior":
          _RequiredBehavior = new fhirCsR3.Models.Element();
          _RequiredBehavior.DeserializeJson(ref reader, options);
          break;

        case "resource":
          Resource = new fhirCsR3.Models.Reference();
          Resource.DeserializeJson(ref reader, options);
          break;

        case "selectionBehavior":
          SelectionBehavior = reader.GetString();
          break;

        case "_selectionBehavior":
          _SelectionBehavior = new fhirCsR3.Models.Element();
          _SelectionBehavior.DeserializeJson(ref reader, options);
          break;

        case "textEquivalent":
          TextEquivalent = reader.GetString();
          break;

        case "_textEquivalent":
          _TextEquivalent = new fhirCsR3.Models.Element();
          _TextEquivalent.DeserializeJson(ref reader, options);
          break;

        case "timingDateTime":
          TimingDateTime = reader.GetString();
          break;

        case "_timingDateTime":
          _TimingDateTime = new fhirCsR3.Models.Element();
          _TimingDateTime.DeserializeJson(ref reader, options);
          break;

        case "timingPeriod":
          TimingPeriod = new fhirCsR3.Models.Period();
          TimingPeriod.DeserializeJson(ref reader, options);
          break;

        case "timingDuration":
          TimingDuration = new fhirCsR3.Models.Duration();
          TimingDuration.DeserializeJson(ref reader, options);
          break;

        case "timingRange":
          TimingRange = new fhirCsR3.Models.Range();
          TimingRange.DeserializeJson(ref reader, options);
          break;

        case "timingTiming":
          TimingTiming = new fhirCsR3.Models.Timing();
          TimingTiming.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR3.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR3.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the RequestGroup.action.cardinalityBehavior field
  /// </summary>
  public static class RequestGroupActionCardinalityBehaviorCodes {
    public const string SINGLE = "single";
    public const string MULTIPLE = "multiple";
  }
  /// <summary>
  /// Code Values for the RequestGroup.action.groupingBehavior field
  /// </summary>
  public static class RequestGroupActionGroupingBehaviorCodes {
    public const string VISUAL_GROUP = "visual-group";
    public const string LOGICAL_GROUP = "logical-group";
    public const string SENTENCE_GROUP = "sentence-group";
  }
  /// <summary>
  /// Code Values for the RequestGroup.action.precheckBehavior field
  /// </summary>
  public static class RequestGroupActionPrecheckBehaviorCodes {
    public const string YES = "yes";
    public const string NO = "no";
  }
  /// <summary>
  /// Code Values for the RequestGroup.action.requiredBehavior field
  /// </summary>
  public static class RequestGroupActionRequiredBehaviorCodes {
    public const string MUST = "must";
    public const string COULD = "could";
    public const string MUST_UNLESS_DOCUMENTED = "must-unless-documented";
  }
  /// <summary>
  /// Code Values for the RequestGroup.action.selectionBehavior field
  /// </summary>
  public static class RequestGroupActionSelectionBehaviorCodes {
    public const string ANY = "any";
    public const string ALL = "all";
    public const string ALL_OR_NONE = "all-or-none";
    public const string EXACTLY_ONE = "exactly-one";
    public const string AT_MOST_ONE = "at-most-one";
    public const string ONE_OR_MORE = "one-or-more";
  }
  /// <summary>
  /// A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<RequestGroup>))]
  public class RequestGroup : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "RequestGroup";
    /// <summary>
    /// The actions, if any, produced by the evaluation of the artifact.
    /// </summary>
    public List<RequestGroupAction> Action { get; set; }
    /// <summary>
    /// Provides a reference to the author of the request group.
    /// </summary>
    public Reference Author { get; set; }
    /// <summary>
    /// Indicates when the request group was created.
    /// </summary>
    public string AuthoredOn { get; set; }
    /// <summary>
    /// Extension container element for AuthoredOn
    /// </summary>
    public Element _AuthoredOn { get; set; }
    /// <summary>
    /// A plan, proposal or order that is fulfilled in whole or in part by this request.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// Describes the context of the request group, if any.
    /// </summary>
    public Reference Context { get; set; }
    /// <summary>
    /// A protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
    /// </summary>
    public List<Reference> Definition { get; set; }
    /// <summary>
    /// Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition.  Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
    /// </summary>
    public Identifier GroupIdentifier { get; set; }
    /// <summary>
    /// Allows a service to provide a unique, business identifier for the request.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
    /// </summary>
    public string Intent { get; set; }
    /// <summary>
    /// Extension container element for Intent
    /// </summary>
    public Element _Intent { get; set; }
    /// <summary>
    /// Provides a mechanism to communicate additional information about the response.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Indicates how quickly the request should be addressed with respect to other requests.
    /// </summary>
    public string Priority { get; set; }
    /// <summary>
    /// Extension container element for Priority
    /// </summary>
    public Element _Priority { get; set; }
    /// <summary>
    /// Indicates the reason the request group was created. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
    /// </summary>
    public CodeableConcept ReasonCodeableConcept { get; set; }
    /// <summary>
    /// Indicates the reason the request group was created. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
    /// </summary>
    public Reference ReasonReference { get; set; }
    /// <summary>
    /// The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
    /// </summary>
    public List<Reference> Replaces { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The subject for which the request group was created.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Definition != null) && (Definition.Count != 0))
      {
        writer.WritePropertyName("definition");
        writer.WriteStartArray();

        foreach (Reference valDefinition in Definition)
        {
          valDefinition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Replaces != null) && (Replaces.Count != 0))
      {
        writer.WritePropertyName("replaces");
        writer.WriteStartArray();

        foreach (Reference valReplaces in Replaces)
        {
          valReplaces.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (GroupIdentifier != null)
      {
        writer.WritePropertyName("groupIdentifier");
        GroupIdentifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Intent))
      {
        writer.WriteString("intent", (string)Intent!);
      }

      if (_Intent != null)
      {
        writer.WritePropertyName("_intent");
        _Intent.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Priority))
      {
        writer.WriteString("priority", (string)Priority!);
      }

      if (_Priority != null)
      {
        writer.WritePropertyName("_priority");
        _Priority.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (Context != null)
      {
        writer.WritePropertyName("context");
        Context.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AuthoredOn))
      {
        writer.WriteString("authoredOn", (string)AuthoredOn!);
      }

      if (_AuthoredOn != null)
      {
        writer.WritePropertyName("_authoredOn");
        _AuthoredOn.SerializeJson(writer, options);
      }

      if (Author != null)
      {
        writer.WritePropertyName("author");
        Author.SerializeJson(writer, options);
      }

      if (ReasonCodeableConcept != null)
      {
        writer.WritePropertyName("reasonCodeableConcept");
        ReasonCodeableConcept.SerializeJson(writer, options);
      }

      if (ReasonReference != null)
      {
        writer.WritePropertyName("reasonReference");
        ReasonReference.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (RequestGroupAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<RequestGroupAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.RequestGroupAction objAction = new fhirCsR3.Models.RequestGroupAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "author":
          Author = new fhirCsR3.Models.Reference();
          Author.DeserializeJson(ref reader, options);
          break;

        case "authoredOn":
          AuthoredOn = reader.GetString();
          break;

        case "_authoredOn":
          _AuthoredOn = new fhirCsR3.Models.Element();
          _AuthoredOn.DeserializeJson(ref reader, options);
          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objBasedOn = new fhirCsR3.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "context":
          Context = new fhirCsR3.Models.Reference();
          Context.DeserializeJson(ref reader, options);
          break;

        case "definition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Definition = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objDefinition = new fhirCsR3.Models.Reference();
            objDefinition.DeserializeJson(ref reader, options);
            Definition.Add(objDefinition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Definition.Count == 0)
          {
            Definition = null;
          }

          break;

        case "groupIdentifier":
          GroupIdentifier = new fhirCsR3.Models.Identifier();
          GroupIdentifier.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Identifier objIdentifier = new fhirCsR3.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "intent":
          Intent = reader.GetString();
          break;

        case "_intent":
          _Intent = new fhirCsR3.Models.Element();
          _Intent.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Annotation objNote = new fhirCsR3.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "priority":
          Priority = reader.GetString();
          break;

        case "_priority":
          _Priority = new fhirCsR3.Models.Element();
          _Priority.DeserializeJson(ref reader, options);
          break;

        case "reasonCodeableConcept":
          ReasonCodeableConcept = new fhirCsR3.Models.CodeableConcept();
          ReasonCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "reasonReference":
          ReasonReference = new fhirCsR3.Models.Reference();
          ReasonReference.DeserializeJson(ref reader, options);
          break;

        case "replaces":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Replaces = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objReplaces = new fhirCsR3.Models.Reference();
            objReplaces.DeserializeJson(ref reader, options);
            Replaces.Add(objReplaces);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Replaces.Count == 0)
          {
            Replaces = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR3.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the RequestGroup.intent field
  /// </summary>
  public static class RequestGroupIntentCodes {
    public const string PROPOSAL = "proposal";
    public const string PLAN = "plan";
    public const string ORDER = "order";
    public const string ORIGINAL_ORDER = "original-order";
    public const string REFLEX_ORDER = "reflex-order";
    public const string FILLER_ORDER = "filler-order";
    public const string INSTANCE_ORDER = "instance-order";
    public const string OPTION = "option";
  }
  /// <summary>
  /// Code Values for the RequestGroup.priority field
  /// </summary>
  public static class RequestGroupPriorityCodes {
    public const string ROUTINE = "routine";
    public const string URGENT = "urgent";
    public const string ASAP = "asap";
    public const string STAT = "stat";
  }
  /// <summary>
  /// Code Values for the RequestGroup.status field
  /// </summary>
  public static class RequestGroupStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string SUSPENDED = "suspended";
    public const string CANCELLED = "cancelled";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string UNKNOWN = "unknown";
  }
}
