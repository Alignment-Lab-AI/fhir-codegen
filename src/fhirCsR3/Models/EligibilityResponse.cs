// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// Benefits Used to date.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<EligibilityResponseInsuranceBenefitBalanceFinancial>))]
  public class EligibilityResponseInsuranceBenefitBalanceFinancial : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Benefits allowed.
    /// </summary>
    public uint? AllowedUnsignedInt { get; set; }
    /// <summary>
    /// Benefits allowed.
    /// </summary>
    public string AllowedString { get; set; }
    /// <summary>
    /// Extension container element for AllowedString
    /// </summary>
    public Element _AllowedString { get; set; }
    /// <summary>
    /// Benefits allowed.
    /// </summary>
    public Money AllowedMoney { get; set; }
    /// <summary>
    /// Deductable, visits, benefit amount.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Benefits used.
    /// </summary>
    public uint? UsedUnsignedInt { get; set; }
    /// <summary>
    /// Benefits used.
    /// </summary>
    public Money UsedMoney { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (AllowedUnsignedInt != null)
      {
        writer.WriteNumber("allowedUnsignedInt", (uint)AllowedUnsignedInt!);
      }

      if (!string.IsNullOrEmpty(AllowedString))
      {
        writer.WriteString("allowedString", (string)AllowedString!);
      }

      if (_AllowedString != null)
      {
        writer.WritePropertyName("_allowedString");
        _AllowedString.SerializeJson(writer, options);
      }

      if (AllowedMoney != null)
      {
        writer.WritePropertyName("allowedMoney");
        AllowedMoney.SerializeJson(writer, options);
      }

      if (UsedUnsignedInt != null)
      {
        writer.WriteNumber("usedUnsignedInt", (uint)UsedUnsignedInt!);
      }

      if (UsedMoney != null)
      {
        writer.WritePropertyName("usedMoney");
        UsedMoney.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allowedUnsignedInt":
          AllowedUnsignedInt = reader.GetUInt32();
          break;

        case "allowedString":
          AllowedString = reader.GetString();
          break;

        case "_allowedString":
          _AllowedString = new fhirCsR3.Models.Element();
          _AllowedString.DeserializeJson(ref reader, options);
          break;

        case "allowedMoney":
          AllowedMoney = new fhirCsR3.Models.Money();
          AllowedMoney.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR3.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "usedUnsignedInt":
          UsedUnsignedInt = reader.GetUInt32();
          break;

        case "usedMoney":
          UsedMoney = new fhirCsR3.Models.Money();
          UsedMoney.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Benefits and optionally current balances by Category.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<EligibilityResponseInsuranceBenefitBalance>))]
  public class EligibilityResponseInsuranceBenefitBalance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Dental, Vision, Medical, Pharmacy, Rehab etc.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// A richer description of the benefit, for example 'DENT2 covers 100% of basic, 50% of major but exclused Ortho, Implants and Costmetic services'.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// True if the indicated class of service is excluded from the plan, missing or False indicated the service is included in the coverage.
    /// </summary>
    public bool? Excluded { get; set; }
    /// <summary>
    /// Extension container element for Excluded
    /// </summary>
    public Element _Excluded { get; set; }
    /// <summary>
    /// Benefits Used to date.
    /// </summary>
    public List<EligibilityResponseInsuranceBenefitBalanceFinancial> Financial { get; set; }
    /// <summary>
    /// A short name or tag for the benefit, for example MED01, or DENT2.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Network designation.
    /// </summary>
    public CodeableConcept Network { get; set; }
    /// <summary>
    /// Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.
    /// </summary>
    public CodeableConcept SubCategory { get; set; }
    /// <summary>
    /// The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual vistis'.
    /// </summary>
    public CodeableConcept Term { get; set; }
    /// <summary>
    /// Unit designation: individual or family.
    /// </summary>
    public CodeableConcept Unit { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (SubCategory != null)
      {
        writer.WritePropertyName("subCategory");
        SubCategory.SerializeJson(writer, options);
      }

      if (Excluded != null)
      {
        writer.WriteBoolean("excluded", (bool)Excluded!);
      }

      if (_Excluded != null)
      {
        writer.WritePropertyName("_excluded");
        _Excluded.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Network != null)
      {
        writer.WritePropertyName("network");
        Network.SerializeJson(writer, options);
      }

      if (Unit != null)
      {
        writer.WritePropertyName("unit");
        Unit.SerializeJson(writer, options);
      }

      if (Term != null)
      {
        writer.WritePropertyName("term");
        Term.SerializeJson(writer, options);
      }

      if ((Financial != null) && (Financial.Count != 0))
      {
        writer.WritePropertyName("financial");
        writer.WriteStartArray();

        foreach (EligibilityResponseInsuranceBenefitBalanceFinancial valFinancial in Financial)
        {
          valFinancial.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = new fhirCsR3.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR3.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "excluded":
          Excluded = reader.GetBoolean();
          break;

        case "_excluded":
          _Excluded = new fhirCsR3.Models.Element();
          _Excluded.DeserializeJson(ref reader, options);
          break;

        case "financial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Financial = new List<EligibilityResponseInsuranceBenefitBalanceFinancial>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.EligibilityResponseInsuranceBenefitBalanceFinancial objFinancial = new fhirCsR3.Models.EligibilityResponseInsuranceBenefitBalanceFinancial();
            objFinancial.DeserializeJson(ref reader, options);
            Financial.Add(objFinancial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Financial.Count == 0)
          {
            Financial = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR3.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "network":
          Network = new fhirCsR3.Models.CodeableConcept();
          Network.DeserializeJson(ref reader, options);
          break;

        case "subCategory":
          SubCategory = new fhirCsR3.Models.CodeableConcept();
          SubCategory.DeserializeJson(ref reader, options);
          break;

        case "term":
          Term = new fhirCsR3.Models.CodeableConcept();
          Term.DeserializeJson(ref reader, options);
          break;

        case "unit":
          Unit = new fhirCsR3.Models.CodeableConcept();
          Unit.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The insurer may provide both the details for the requested coverage as well as details for additional coverages known to the insurer.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<EligibilityResponseInsurance>))]
  public class EligibilityResponseInsurance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Benefits and optionally current balances by Category.
    /// </summary>
    public List<EligibilityResponseInsuranceBenefitBalance> BenefitBalance { get; set; }
    /// <summary>
    /// The contract resource which may provide more detailed information.
    /// </summary>
    public Reference Contract { get; set; }
    /// <summary>
    /// A suite of updated or additional Coverages from the Insurer.
    /// </summary>
    public Reference Coverage { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Coverage != null)
      {
        writer.WritePropertyName("coverage");
        Coverage.SerializeJson(writer, options);
      }

      if (Contract != null)
      {
        writer.WritePropertyName("contract");
        Contract.SerializeJson(writer, options);
      }

      if ((BenefitBalance != null) && (BenefitBalance.Count != 0))
      {
        writer.WritePropertyName("benefitBalance");
        writer.WriteStartArray();

        foreach (EligibilityResponseInsuranceBenefitBalance valBenefitBalance in BenefitBalance)
        {
          valBenefitBalance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "benefitBalance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BenefitBalance = new List<EligibilityResponseInsuranceBenefitBalance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.EligibilityResponseInsuranceBenefitBalance objBenefitBalance = new fhirCsR3.Models.EligibilityResponseInsuranceBenefitBalance();
            objBenefitBalance.DeserializeJson(ref reader, options);
            BenefitBalance.Add(objBenefitBalance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BenefitBalance.Count == 0)
          {
            BenefitBalance = null;
          }

          break;

        case "contract":
          Contract = new fhirCsR3.Models.Reference();
          Contract.DeserializeJson(ref reader, options);
          break;

        case "coverage":
          Coverage = new fhirCsR3.Models.Reference();
          Coverage.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Mutually exclusive with Services Provided (Item).
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<EligibilityResponseError>))]
  public class EligibilityResponseError : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An error code,from a specified code system, which details why the eligibility check could not be performed.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR3.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This resource provides eligibility and plan details from the processing of an Eligibility resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<EligibilityResponse>))]
  public class EligibilityResponse : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "EligibilityResponse";
    /// <summary>
    /// The date when the enclosed suite of services were performed or completed.
    /// </summary>
    public string Created { get; set; }
    /// <summary>
    /// Extension container element for Created
    /// </summary>
    public Element _Created { get; set; }
    /// <summary>
    /// A description of the status of the adjudication.
    /// </summary>
    public string Disposition { get; set; }
    /// <summary>
    /// Extension container element for Disposition
    /// </summary>
    public Element _Disposition { get; set; }
    /// <summary>
    /// Mutually exclusive with Services Provided (Item).
    /// </summary>
    public List<EligibilityResponseError> Error { get; set; }
    /// <summary>
    /// The form to be used for printing the content.
    /// </summary>
    public CodeableConcept Form { get; set; }
    /// <summary>
    /// The Response business identifier.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Flag indicating if the coverage provided is inforce currently  if no service date(s) specified or for the whole duration of the service dates.
    /// </summary>
    public bool? Inforce { get; set; }
    /// <summary>
    /// Extension container element for Inforce
    /// </summary>
    public Element _Inforce { get; set; }
    /// <summary>
    /// The insurer may provide both the details for the requested coverage as well as details for additional coverages known to the insurer.
    /// </summary>
    public List<EligibilityResponseInsurance> Insurance { get; set; }
    /// <summary>
    /// The Insurer who produced this adjudicated response.
    /// </summary>
    public Reference Insurer { get; set; }
    /// <summary>
    /// Transaction status: error, complete.
    /// </summary>
    public CodeableConcept Outcome { get; set; }
    /// <summary>
    /// Original request resource reference.
    /// </summary>
    public Reference Request { get; set; }
    /// <summary>
    /// The organization which is responsible for the services rendered to the patient.
    /// </summary>
    public Reference RequestOrganization { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    public Reference RequestProvider { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Created))
      {
        writer.WriteString("created", (string)Created!);
      }

      if (_Created != null)
      {
        writer.WritePropertyName("_created");
        _Created.SerializeJson(writer, options);
      }

      if (RequestProvider != null)
      {
        writer.WritePropertyName("requestProvider");
        RequestProvider.SerializeJson(writer, options);
      }

      if (RequestOrganization != null)
      {
        writer.WritePropertyName("requestOrganization");
        RequestOrganization.SerializeJson(writer, options);
      }

      if (Request != null)
      {
        writer.WritePropertyName("request");
        Request.SerializeJson(writer, options);
      }

      if (Outcome != null)
      {
        writer.WritePropertyName("outcome");
        Outcome.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Disposition))
      {
        writer.WriteString("disposition", (string)Disposition!);
      }

      if (_Disposition != null)
      {
        writer.WritePropertyName("_disposition");
        _Disposition.SerializeJson(writer, options);
      }

      if (Insurer != null)
      {
        writer.WritePropertyName("insurer");
        Insurer.SerializeJson(writer, options);
      }

      if (Inforce != null)
      {
        writer.WriteBoolean("inforce", (bool)Inforce!);
      }

      if (_Inforce != null)
      {
        writer.WritePropertyName("_inforce");
        _Inforce.SerializeJson(writer, options);
      }

      if ((Insurance != null) && (Insurance.Count != 0))
      {
        writer.WritePropertyName("insurance");
        writer.WriteStartArray();

        foreach (EligibilityResponseInsurance valInsurance in Insurance)
        {
          valInsurance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Form != null)
      {
        writer.WritePropertyName("form");
        Form.SerializeJson(writer, options);
      }

      if ((Error != null) && (Error.Count != 0))
      {
        writer.WritePropertyName("error");
        writer.WriteStartArray();

        foreach (EligibilityResponseError valError in Error)
        {
          valError.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "created":
          Created = reader.GetString();
          break;

        case "_created":
          _Created = new fhirCsR3.Models.Element();
          _Created.DeserializeJson(ref reader, options);
          break;

        case "disposition":
          Disposition = reader.GetString();
          break;

        case "_disposition":
          _Disposition = new fhirCsR3.Models.Element();
          _Disposition.DeserializeJson(ref reader, options);
          break;

        case "error":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Error = new List<EligibilityResponseError>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.EligibilityResponseError objError = new fhirCsR3.Models.EligibilityResponseError();
            objError.DeserializeJson(ref reader, options);
            Error.Add(objError);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Error.Count == 0)
          {
            Error = null;
          }

          break;

        case "form":
          Form = new fhirCsR3.Models.CodeableConcept();
          Form.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Identifier objIdentifier = new fhirCsR3.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "inforce":
          Inforce = reader.GetBoolean();
          break;

        case "_inforce":
          _Inforce = new fhirCsR3.Models.Element();
          _Inforce.DeserializeJson(ref reader, options);
          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Insurance = new List<EligibilityResponseInsurance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.EligibilityResponseInsurance objInsurance = new fhirCsR3.Models.EligibilityResponseInsurance();
            objInsurance.DeserializeJson(ref reader, options);
            Insurance.Add(objInsurance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Insurance.Count == 0)
          {
            Insurance = null;
          }

          break;

        case "insurer":
          Insurer = new fhirCsR3.Models.Reference();
          Insurer.DeserializeJson(ref reader, options);
          break;

        case "outcome":
          Outcome = new fhirCsR3.Models.CodeableConcept();
          Outcome.DeserializeJson(ref reader, options);
          break;

        case "request":
          Request = new fhirCsR3.Models.Reference();
          Request.DeserializeJson(ref reader, options);
          break;

        case "requestOrganization":
          RequestOrganization = new fhirCsR3.Models.Reference();
          RequestOrganization.DeserializeJson(ref reader, options);
          break;

        case "requestProvider":
          RequestProvider = new fhirCsR3.Models.Reference();
          RequestProvider.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR3.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the EligibilityResponse.status field
  /// </summary>
  public static class EligibilityResponseStatusCodes {
    public const string ACTIVE = "active";
    public const string CANCELLED = "cancelled";
    public const string DRAFT = "draft";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public static HashSet<string> Values = new HashSet<string>() {
      "active",
      "cancelled",
      "draft",
      "entered-in-error",
    };
  }
}
