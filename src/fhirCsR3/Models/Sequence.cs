// <auto-generated />
// Built from: hl7.fhir.r3.core version: 3.0.2
  // Option: "NAMESPACE" = "fhirCsR3"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR3.Serialization;

namespace fhirCsR3.Models
{
  /// <summary>
  /// A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<SequenceReferenceSeq>))]
  public class SequenceReferenceSeq : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
    /// </summary>
    public CodeableConcept Chromosome { get; set; }
    /// <summary>
    /// The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'.  Version number must be included if a versioned release of a primary build was used.
    /// </summary>
    public string GenomeBuild { get; set; }
    /// <summary>
    /// Extension container element for GenomeBuild
    /// </summary>
    public Element _GenomeBuild { get; set; }
    /// <summary>
    /// Reference identifier of reference sequence submitted to NCBI. It must match the type in the Sequence.type field. For example, the prefix, “NG_” identifies reference sequence for genes, “NM_” for messenger RNA transcripts, and “NP_” for amino acid sequences.
    /// </summary>
    public CodeableConcept ReferenceSeqId { get; set; }
    /// <summary>
    /// A Pointer to another Sequence entity as reference sequence.
    /// </summary>
    public Reference ReferenceSeqPointer { get; set; }
    /// <summary>
    /// A string like "ACGT".
    /// </summary>
    public string ReferenceSeqString { get; set; }
    /// <summary>
    /// Extension container element for ReferenceSeqString
    /// </summary>
    public Element _ReferenceSeqString { get; set; }
    /// <summary>
    /// Directionality of DNA sequence. Available values are "1" for the plus strand (5' to 3')/Watson/Sense/positive  and "-1" for the minus strand(3' to 5')/Crick/Antisense/negative.
    /// </summary>
    public int? Strand { get; set; }
    /// <summary>
    /// Extension container element for Strand
    /// </summary>
    public Element _Strand { get; set; }
    /// <summary>
    /// End position of the window on the reference sequence. If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
    /// </summary>
    public int WindowEnd { get; set; }
    /// <summary>
    /// Extension container element for WindowEnd
    /// </summary>
    public Element _WindowEnd { get; set; }
    /// <summary>
    /// Start position of the window on the reference sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
    /// </summary>
    public int WindowStart { get; set; }
    /// <summary>
    /// Extension container element for WindowStart
    /// </summary>
    public Element _WindowStart { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Chromosome != null)
      {
        writer.WritePropertyName("chromosome");
        Chromosome.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(GenomeBuild))
      {
        writer.WriteString("genomeBuild", (string)GenomeBuild!);
      }

      if (_GenomeBuild != null)
      {
        writer.WritePropertyName("_genomeBuild");
        _GenomeBuild.SerializeJson(writer, options);
      }

      if (ReferenceSeqId != null)
      {
        writer.WritePropertyName("referenceSeqId");
        ReferenceSeqId.SerializeJson(writer, options);
      }

      if (ReferenceSeqPointer != null)
      {
        writer.WritePropertyName("referenceSeqPointer");
        ReferenceSeqPointer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ReferenceSeqString))
      {
        writer.WriteString("referenceSeqString", (string)ReferenceSeqString!);
      }

      if (_ReferenceSeqString != null)
      {
        writer.WritePropertyName("_referenceSeqString");
        _ReferenceSeqString.SerializeJson(writer, options);
      }

      if (Strand != null)
      {
        writer.WriteNumber("strand", (int)Strand!);
      }

      if (_Strand != null)
      {
        writer.WritePropertyName("_strand");
        _Strand.SerializeJson(writer, options);
      }

      writer.WriteNumber("windowStart", WindowStart);

      if (_WindowStart != null)
      {
        writer.WritePropertyName("_windowStart");
        _WindowStart.SerializeJson(writer, options);
      }

      writer.WriteNumber("windowEnd", WindowEnd);

      if (_WindowEnd != null)
      {
        writer.WritePropertyName("_windowEnd");
        _WindowEnd.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "chromosome":
          Chromosome = new fhirCsR3.Models.CodeableConcept();
          Chromosome.DeserializeJson(ref reader, options);
          break;

        case "genomeBuild":
          GenomeBuild = reader.GetString();
          break;

        case "_genomeBuild":
          _GenomeBuild = new fhirCsR3.Models.Element();
          _GenomeBuild.DeserializeJson(ref reader, options);
          break;

        case "referenceSeqId":
          ReferenceSeqId = new fhirCsR3.Models.CodeableConcept();
          ReferenceSeqId.DeserializeJson(ref reader, options);
          break;

        case "referenceSeqPointer":
          ReferenceSeqPointer = new fhirCsR3.Models.Reference();
          ReferenceSeqPointer.DeserializeJson(ref reader, options);
          break;

        case "referenceSeqString":
          ReferenceSeqString = reader.GetString();
          break;

        case "_referenceSeqString":
          _ReferenceSeqString = new fhirCsR3.Models.Element();
          _ReferenceSeqString.DeserializeJson(ref reader, options);
          break;

        case "strand":
          Strand = reader.GetInt32();
          break;

        case "_strand":
          _Strand = new fhirCsR3.Models.Element();
          _Strand.DeserializeJson(ref reader, options);
          break;

        case "windowEnd":
          WindowEnd = reader.GetInt32();
          break;

        case "_windowEnd":
          _WindowEnd = new fhirCsR3.Models.Element();
          _WindowEnd.DeserializeJson(ref reader, options);
          break;

        case "windowStart":
          WindowStart = reader.GetInt32();
          break;

        case "_windowStart":
          _WindowStart = new fhirCsR3.Models.Element();
          _WindowStart.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<SequenceVariant>))]
  public class SequenceVariant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Extended CIGAR string for aligning the sequence with reference bases. See detailed documentation [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm).
    /// </summary>
    public string Cigar { get; set; }
    /// <summary>
    /// Extension container element for Cigar
    /// </summary>
    public Element _Cigar { get; set; }
    /// <summary>
    /// End position of the variant on the reference sequence.If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
    /// </summary>
    public int? End { get; set; }
    /// <summary>
    /// Extension container element for End
    /// </summary>
    public Element _End { get; set; }
    /// <summary>
    /// An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).  Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed  sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
    /// </summary>
    public string ObservedAllele { get; set; }
    /// <summary>
    /// Extension container element for ObservedAllele
    /// </summary>
    public Element _ObservedAllele { get; set; }
    /// <summary>
    /// An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)). Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the reference sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
    /// </summary>
    public string ReferenceAllele { get; set; }
    /// <summary>
    /// Extension container element for ReferenceAllele
    /// </summary>
    public Element _ReferenceAllele { get; set; }
    /// <summary>
    /// Start position of the variant on the  reference sequence.If the coordinate system is either 0-based or 1-based, then start position is inclusive.
    /// </summary>
    public int? Start { get; set; }
    /// <summary>
    /// Extension container element for Start
    /// </summary>
    public Element _Start { get; set; }
    /// <summary>
    /// A pointer to an Observation containing variant information.
    /// </summary>
    public Reference VariantPointer { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Start != null)
      {
        writer.WriteNumber("start", (int)Start!);
      }

      if (_Start != null)
      {
        writer.WritePropertyName("_start");
        _Start.SerializeJson(writer, options);
      }

      if (End != null)
      {
        writer.WriteNumber("end", (int)End!);
      }

      if (_End != null)
      {
        writer.WritePropertyName("_end");
        _End.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ObservedAllele))
      {
        writer.WriteString("observedAllele", (string)ObservedAllele!);
      }

      if (_ObservedAllele != null)
      {
        writer.WritePropertyName("_observedAllele");
        _ObservedAllele.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ReferenceAllele))
      {
        writer.WriteString("referenceAllele", (string)ReferenceAllele!);
      }

      if (_ReferenceAllele != null)
      {
        writer.WritePropertyName("_referenceAllele");
        _ReferenceAllele.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Cigar))
      {
        writer.WriteString("cigar", (string)Cigar!);
      }

      if (_Cigar != null)
      {
        writer.WritePropertyName("_cigar");
        _Cigar.SerializeJson(writer, options);
      }

      if (VariantPointer != null)
      {
        writer.WritePropertyName("variantPointer");
        VariantPointer.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "cigar":
          Cigar = reader.GetString();
          break;

        case "_cigar":
          _Cigar = new fhirCsR3.Models.Element();
          _Cigar.DeserializeJson(ref reader, options);
          break;

        case "end":
          End = reader.GetInt32();
          break;

        case "_end":
          _End = new fhirCsR3.Models.Element();
          _End.DeserializeJson(ref reader, options);
          break;

        case "observedAllele":
          ObservedAllele = reader.GetString();
          break;

        case "_observedAllele":
          _ObservedAllele = new fhirCsR3.Models.Element();
          _ObservedAllele.DeserializeJson(ref reader, options);
          break;

        case "referenceAllele":
          ReferenceAllele = reader.GetString();
          break;

        case "_referenceAllele":
          _ReferenceAllele = new fhirCsR3.Models.Element();
          _ReferenceAllele.DeserializeJson(ref reader, options);
          break;

        case "start":
          Start = reader.GetInt32();
          break;

        case "_start":
          _Start = new fhirCsR3.Models.Element();
          _Start.DeserializeJson(ref reader, options);
          break;

        case "variantPointer":
          VariantPointer = new fhirCsR3.Models.Reference();
          VariantPointer.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<SequenceQuality>))]
  public class SequenceQuality : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// End position of the sequence.If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
    /// </summary>
    public int? End { get; set; }
    /// <summary>
    /// Extension container element for End
    /// </summary>
    public Element _End { get; set; }
    /// <summary>
    /// Harmonic mean of Recall and Precision, computed as: 2 * precision * recall / (precision + recall).
    /// </summary>
    public decimal? FScore { get; set; }
    /// <summary>
    /// Extension container element for FScore
    /// </summary>
    public Element _FScore { get; set; }
    /// <summary>
    /// The number of false positives where the non-REF alleles in the Truth and Query Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or similar).
    /// </summary>
    public decimal? GtFP { get; set; }
    /// <summary>
    /// Extension container element for GtFP
    /// </summary>
    public Element _GtFP { get; set; }
    /// <summary>
    /// Which method is used to get sequence quality.
    /// </summary>
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// QUERY.TP / (QUERY.TP + QUERY.FP).
    /// </summary>
    public decimal? Precision { get; set; }
    /// <summary>
    /// Extension container element for Precision
    /// </summary>
    public Element _Precision { get; set; }
    /// <summary>
    /// False positives, i.e. the number of sites in the Query Call Set for which there is no path through the Truth Call Set that is consistent with this site. Sites with correct variant but incorrect genotype are counted here.
    /// </summary>
    public decimal? QueryFP { get; set; }
    /// <summary>
    /// Extension container element for QueryFP
    /// </summary>
    public Element _QueryFP { get; set; }
    /// <summary>
    /// True positives, from the perspective of the query data, i.e. the number of sites in the Query Call Set for which there are paths through the Truth Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
    /// </summary>
    public decimal? QueryTP { get; set; }
    /// <summary>
    /// Extension container element for QueryTP
    /// </summary>
    public Element _QueryTP { get; set; }
    /// <summary>
    /// TRUTH.TP / (TRUTH.TP + TRUTH.FN).
    /// </summary>
    public decimal? Recall { get; set; }
    /// <summary>
    /// Extension container element for Recall
    /// </summary>
    public Element _Recall { get; set; }
    /// <summary>
    /// The score of an experimentally derived feature such as a p-value ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).
    /// </summary>
    public Quantity Score { get; set; }
    /// <summary>
    /// Gold standard sequence used for comparing against.
    /// </summary>
    public CodeableConcept StandardSequence { get; set; }
    /// <summary>
    /// Start position of the sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
    /// </summary>
    public int? Start { get; set; }
    /// <summary>
    /// Extension container element for Start
    /// </summary>
    public Element _Start { get; set; }
    /// <summary>
    /// False negatives, i.e. the number of sites in the Truth Call Set for which there is no path through the Query Call Set that is consistent with all of the alleles at this site, or sites for which there is an inaccurate genotype call for the event. Sites with correct variant but incorrect genotype are counted here.
    /// </summary>
    public decimal? TruthFN { get; set; }
    /// <summary>
    /// Extension container element for TruthFN
    /// </summary>
    public Element _TruthFN { get; set; }
    /// <summary>
    /// True positives, from the perspective of the truth data, i.e. the number of sites in the Truth Call Set for which there are paths through the Query Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
    /// </summary>
    public decimal? TruthTP { get; set; }
    /// <summary>
    /// Extension container element for TruthTP
    /// </summary>
    public Element _TruthTP { get; set; }
    /// <summary>
    /// INDEL / SNP / Undefined variant.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (StandardSequence != null)
      {
        writer.WritePropertyName("standardSequence");
        StandardSequence.SerializeJson(writer, options);
      }

      if (Start != null)
      {
        writer.WriteNumber("start", (int)Start!);
      }

      if (_Start != null)
      {
        writer.WritePropertyName("_start");
        _Start.SerializeJson(writer, options);
      }

      if (End != null)
      {
        writer.WriteNumber("end", (int)End!);
      }

      if (_End != null)
      {
        writer.WritePropertyName("_end");
        _End.SerializeJson(writer, options);
      }

      if (Score != null)
      {
        writer.WritePropertyName("score");
        Score.SerializeJson(writer, options);
      }

      if (Method != null)
      {
        writer.WritePropertyName("method");
        Method.SerializeJson(writer, options);
      }

      if (TruthTP != null)
      {
        writer.WriteNumber("truthTP", (decimal)TruthTP!);
      }

      if (_TruthTP != null)
      {
        writer.WritePropertyName("_truthTP");
        _TruthTP.SerializeJson(writer, options);
      }

      if (QueryTP != null)
      {
        writer.WriteNumber("queryTP", (decimal)QueryTP!);
      }

      if (_QueryTP != null)
      {
        writer.WritePropertyName("_queryTP");
        _QueryTP.SerializeJson(writer, options);
      }

      if (TruthFN != null)
      {
        writer.WriteNumber("truthFN", (decimal)TruthFN!);
      }

      if (_TruthFN != null)
      {
        writer.WritePropertyName("_truthFN");
        _TruthFN.SerializeJson(writer, options);
      }

      if (QueryFP != null)
      {
        writer.WriteNumber("queryFP", (decimal)QueryFP!);
      }

      if (_QueryFP != null)
      {
        writer.WritePropertyName("_queryFP");
        _QueryFP.SerializeJson(writer, options);
      }

      if (GtFP != null)
      {
        writer.WriteNumber("gtFP", (decimal)GtFP!);
      }

      if (_GtFP != null)
      {
        writer.WritePropertyName("_gtFP");
        _GtFP.SerializeJson(writer, options);
      }

      if (Precision != null)
      {
        writer.WriteNumber("precision", (decimal)Precision!);
      }

      if (_Precision != null)
      {
        writer.WritePropertyName("_precision");
        _Precision.SerializeJson(writer, options);
      }

      if (Recall != null)
      {
        writer.WriteNumber("recall", (decimal)Recall!);
      }

      if (_Recall != null)
      {
        writer.WritePropertyName("_recall");
        _Recall.SerializeJson(writer, options);
      }

      if (FScore != null)
      {
        writer.WriteNumber("fScore", (decimal)FScore!);
      }

      if (_FScore != null)
      {
        writer.WritePropertyName("_fScore");
        _FScore.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "end":
          End = reader.GetInt32();
          break;

        case "_end":
          _End = new fhirCsR3.Models.Element();
          _End.DeserializeJson(ref reader, options);
          break;

        case "fScore":
          FScore = reader.GetDecimal();
          break;

        case "_fScore":
          _FScore = new fhirCsR3.Models.Element();
          _FScore.DeserializeJson(ref reader, options);
          break;

        case "gtFP":
          GtFP = reader.GetDecimal();
          break;

        case "_gtFP":
          _GtFP = new fhirCsR3.Models.Element();
          _GtFP.DeserializeJson(ref reader, options);
          break;

        case "method":
          Method = new fhirCsR3.Models.CodeableConcept();
          Method.DeserializeJson(ref reader, options);
          break;

        case "precision":
          Precision = reader.GetDecimal();
          break;

        case "_precision":
          _Precision = new fhirCsR3.Models.Element();
          _Precision.DeserializeJson(ref reader, options);
          break;

        case "queryFP":
          QueryFP = reader.GetDecimal();
          break;

        case "_queryFP":
          _QueryFP = new fhirCsR3.Models.Element();
          _QueryFP.DeserializeJson(ref reader, options);
          break;

        case "queryTP":
          QueryTP = reader.GetDecimal();
          break;

        case "_queryTP":
          _QueryTP = new fhirCsR3.Models.Element();
          _QueryTP.DeserializeJson(ref reader, options);
          break;

        case "recall":
          Recall = reader.GetDecimal();
          break;

        case "_recall":
          _Recall = new fhirCsR3.Models.Element();
          _Recall.DeserializeJson(ref reader, options);
          break;

        case "score":
          Score = new fhirCsR3.Models.Quantity();
          Score.DeserializeJson(ref reader, options);
          break;

        case "standardSequence":
          StandardSequence = new fhirCsR3.Models.CodeableConcept();
          StandardSequence.DeserializeJson(ref reader, options);
          break;

        case "start":
          Start = reader.GetInt32();
          break;

        case "_start":
          _Start = new fhirCsR3.Models.Element();
          _Start.DeserializeJson(ref reader, options);
          break;

        case "truthFN":
          TruthFN = reader.GetDecimal();
          break;

        case "_truthFN":
          _TruthFN = new fhirCsR3.Models.Element();
          _TruthFN.DeserializeJson(ref reader, options);
          break;

        case "truthTP":
          TruthTP = reader.GetDecimal();
          break;

        case "_truthTP":
          _TruthTP = new fhirCsR3.Models.Element();
          _TruthTP.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR3.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Sequence.quality.type field
  /// </summary>
  public static class SequenceQualityTypeCodes {
    public const string INDEL = "indel";
    public const string SNP = "snp";
    public const string UNKNOWN = "unknown";
    public static HashSet<string> Values = new HashSet<string>() {
      "indel",
      "snp",
      "unknown",
    };
  }
  /// <summary>
  /// Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<SequenceRepository>))]
  public class SequenceRepository : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Id of the variant in this external repository. The server will understand how to use this id to call for more info about datasets in external repository.
    /// </summary>
    public string DatasetId { get; set; }
    /// <summary>
    /// Extension container element for DatasetId
    /// </summary>
    public Element _DatasetId { get; set; }
    /// <summary>
    /// URI of an external repository which contains further details about the genetics data.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Id of the read in this external repository.
    /// </summary>
    public string ReadsetId { get; set; }
    /// <summary>
    /// Extension container element for ReadsetId
    /// </summary>
    public Element _ReadsetId { get; set; }
    /// <summary>
    /// Click and see / RESTful API / Need login to see / RESTful API with authentication / Other ways to see resource.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// URI of an external repository which contains further details about the genetics data.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Id of the variantset in this external repository. The server will understand how to use this id to call for more info about variantsets in external repository.
    /// </summary>
    public string VariantsetId { get; set; }
    /// <summary>
    /// Extension container element for VariantsetId
    /// </summary>
    public Element _VariantsetId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR3.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DatasetId))
      {
        writer.WriteString("datasetId", (string)DatasetId!);
      }

      if (_DatasetId != null)
      {
        writer.WritePropertyName("_datasetId");
        _DatasetId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(VariantsetId))
      {
        writer.WriteString("variantsetId", (string)VariantsetId!);
      }

      if (_VariantsetId != null)
      {
        writer.WritePropertyName("_variantsetId");
        _VariantsetId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ReadsetId))
      {
        writer.WriteString("readsetId", (string)ReadsetId!);
      }

      if (_ReadsetId != null)
      {
        writer.WritePropertyName("_readsetId");
        _ReadsetId.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "datasetId":
          DatasetId = reader.GetString();
          break;

        case "_datasetId":
          _DatasetId = new fhirCsR3.Models.Element();
          _DatasetId.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR3.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "readsetId":
          ReadsetId = reader.GetString();
          break;

        case "_readsetId":
          _ReadsetId = new fhirCsR3.Models.Element();
          _ReadsetId.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR3.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR3.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "variantsetId":
          VariantsetId = reader.GetString();
          break;

        case "_variantsetId":
          _VariantsetId = new fhirCsR3.Models.Element();
          _VariantsetId.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR3.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Sequence.repository.type field
  /// </summary>
  public static class SequenceRepositoryTypeCodes {
    public const string DIRECTLINK = "directlink";
    public const string OPENAPI = "openapi";
    public const string LOGIN = "login";
    public const string OAUTH = "oauth";
    public const string OTHER = "other";
    public static HashSet<string> Values = new HashSet<string>() {
      "directlink",
      "openapi",
      "login",
      "oauth",
      "other",
    };
  }
  /// <summary>
  /// Raw data describing a biological sequence.
  /// </summary>
  [JsonConverter(typeof(fhirCsR3.Serialization.JsonStreamComponentConverter<Sequence>))]
  public class Sequence : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Sequence";
    /// <summary>
    /// Whether the sequence is numbered starting at 0 (0-based numbering or coordinates, inclusive start, exclusive end) or starting at 1 (1-based numbering, inclusive start and inclusive end).
    /// </summary>
    public int CoordinateSystem { get; set; }
    /// <summary>
    /// Extension container element for CoordinateSystem
    /// </summary>
    public Element _CoordinateSystem { get; set; }
    /// <summary>
    /// The method for sequencing, for example, chip information.
    /// </summary>
    public Reference Device { get; set; }
    /// <summary>
    /// A unique identifier for this particular sequence instance. This is a FHIR-defined id.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Sequence that was observed. It is the result marked by referenceSeq along with variant records on referenceSeq. This shall starts from referenceSeq.windowStart and end by referenceSeq.windowEnd.
    /// </summary>
    public string ObservedSeq { get; set; }
    /// <summary>
    /// Extension container element for ObservedSeq
    /// </summary>
    public Element _ObservedSeq { get; set; }
    /// <summary>
    /// The patient whose sequencing results are described by this resource.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// The organization or lab that should be responsible for this result.
    /// </summary>
    public Reference Performer { get; set; }
    /// <summary>
    /// Pointer to next atomic sequence which at most contains one variant.
    /// </summary>
    public List<Reference> Pointer { get; set; }
    /// <summary>
    /// An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
    /// </summary>
    public List<SequenceQuality> Quality { get; set; }
    /// <summary>
    /// The number of copies of the seqeunce of interest. (RNASeq).
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Coverage (read depth or depth) is the average number of reads representing a given nucleotide in the reconstructed sequence.
    /// </summary>
    public int? ReadCoverage { get; set; }
    /// <summary>
    /// Extension container element for ReadCoverage
    /// </summary>
    public Element _ReadCoverage { get; set; }
    /// <summary>
    /// A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
    /// </summary>
    public SequenceReferenceSeq ReferenceSeq { get; set; }
    /// <summary>
    /// Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
    /// </summary>
    public List<SequenceRepository> Repository { get; set; }
    /// <summary>
    /// Specimen used for sequencing.
    /// </summary>
    public Reference Specimen { get; set; }
    /// <summary>
    /// Amino Acid Sequence/ DNA Sequence / RNA Sequence.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
    /// </summary>
    public List<SequenceVariant> Variant { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR3.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      writer.WriteNumber("coordinateSystem", CoordinateSystem);

      if (_CoordinateSystem != null)
      {
        writer.WritePropertyName("_coordinateSystem");
        _CoordinateSystem.SerializeJson(writer, options);
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (Specimen != null)
      {
        writer.WritePropertyName("specimen");
        Specimen.SerializeJson(writer, options);
      }

      if (Device != null)
      {
        writer.WritePropertyName("device");
        Device.SerializeJson(writer, options);
      }

      if (Performer != null)
      {
        writer.WritePropertyName("performer");
        Performer.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (ReferenceSeq != null)
      {
        writer.WritePropertyName("referenceSeq");
        ReferenceSeq.SerializeJson(writer, options);
      }

      if ((Variant != null) && (Variant.Count != 0))
      {
        writer.WritePropertyName("variant");
        writer.WriteStartArray();

        foreach (SequenceVariant valVariant in Variant)
        {
          valVariant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ObservedSeq))
      {
        writer.WriteString("observedSeq", (string)ObservedSeq!);
      }

      if (_ObservedSeq != null)
      {
        writer.WritePropertyName("_observedSeq");
        _ObservedSeq.SerializeJson(writer, options);
      }

      if ((Quality != null) && (Quality.Count != 0))
      {
        writer.WritePropertyName("quality");
        writer.WriteStartArray();

        foreach (SequenceQuality valQuality in Quality)
        {
          valQuality.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ReadCoverage != null)
      {
        writer.WriteNumber("readCoverage", (int)ReadCoverage!);
      }

      if (_ReadCoverage != null)
      {
        writer.WritePropertyName("_readCoverage");
        _ReadCoverage.SerializeJson(writer, options);
      }

      if ((Repository != null) && (Repository.Count != 0))
      {
        writer.WritePropertyName("repository");
        writer.WriteStartArray();

        foreach (SequenceRepository valRepository in Repository)
        {
          valRepository.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Pointer != null) && (Pointer.Count != 0))
      {
        writer.WritePropertyName("pointer");
        writer.WriteStartArray();

        foreach (Reference valPointer in Pointer)
        {
          valPointer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "coordinateSystem":
          CoordinateSystem = reader.GetInt32();
          break;

        case "_coordinateSystem":
          _CoordinateSystem = new fhirCsR3.Models.Element();
          _CoordinateSystem.DeserializeJson(ref reader, options);
          break;

        case "device":
          Device = new fhirCsR3.Models.Reference();
          Device.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Identifier objIdentifier = new fhirCsR3.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "observedSeq":
          ObservedSeq = reader.GetString();
          break;

        case "_observedSeq":
          _ObservedSeq = new fhirCsR3.Models.Element();
          _ObservedSeq.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR3.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "performer":
          Performer = new fhirCsR3.Models.Reference();
          Performer.DeserializeJson(ref reader, options);
          break;

        case "pointer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Pointer = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.Reference objPointer = new fhirCsR3.Models.Reference();
            objPointer.DeserializeJson(ref reader, options);
            Pointer.Add(objPointer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Pointer.Count == 0)
          {
            Pointer = null;
          }

          break;

        case "quality":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Quality = new List<SequenceQuality>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.SequenceQuality objQuality = new fhirCsR3.Models.SequenceQuality();
            objQuality.DeserializeJson(ref reader, options);
            Quality.Add(objQuality);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Quality.Count == 0)
          {
            Quality = null;
          }

          break;

        case "quantity":
          Quantity = new fhirCsR3.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "readCoverage":
          ReadCoverage = reader.GetInt32();
          break;

        case "_readCoverage":
          _ReadCoverage = new fhirCsR3.Models.Element();
          _ReadCoverage.DeserializeJson(ref reader, options);
          break;

        case "referenceSeq":
          ReferenceSeq = new fhirCsR3.Models.SequenceReferenceSeq();
          ReferenceSeq.DeserializeJson(ref reader, options);
          break;

        case "repository":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Repository = new List<SequenceRepository>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.SequenceRepository objRepository = new fhirCsR3.Models.SequenceRepository();
            objRepository.DeserializeJson(ref reader, options);
            Repository.Add(objRepository);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Repository.Count == 0)
          {
            Repository = null;
          }

          break;

        case "specimen":
          Specimen = new fhirCsR3.Models.Reference();
          Specimen.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR3.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "variant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Variant = new List<SequenceVariant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR3.Models.SequenceVariant objVariant = new fhirCsR3.Models.SequenceVariant();
            objVariant.DeserializeJson(ref reader, options);
            Variant.Add(objVariant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Variant.Count == 0)
          {
            Variant = null;
          }

          break;

        default:
          ((fhirCsR3.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Sequence.type field
  /// </summary>
  public static class SequenceTypeCodes {
    public const string AA = "aa";
    public const string DNA = "dna";
    public const string RNA = "rna";
    public static HashSet<string> Values = new HashSet<string>() {
      "aa",
      "dna",
      "rna",
    };
  }
}
