//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FmlMapping.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="FmlMappingParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
//[System.CLSCompliant(false)]
public interface IFmlMappingListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.structureMap"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructureMap([NotNull] FmlMappingParser.StructureMapContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.structureMap"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructureMap([NotNull] FmlMappingParser.StructureMapContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.conceptMapDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConceptMapDeclaration([NotNull] FmlMappingParser.ConceptMapDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.conceptMapDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConceptMapDeclaration([NotNull] FmlMappingParser.ConceptMapDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.conceptMapPrefix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConceptMapPrefix([NotNull] FmlMappingParser.ConceptMapPrefixContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.conceptMapPrefix"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConceptMapPrefix([NotNull] FmlMappingParser.ConceptMapPrefixContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.conceptMapCodeMap"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConceptMapCodeMap([NotNull] FmlMappingParser.ConceptMapCodeMapContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.conceptMapCodeMap"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConceptMapCodeMap([NotNull] FmlMappingParser.ConceptMapCodeMapContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.conceptMapSource"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConceptMapSource([NotNull] FmlMappingParser.ConceptMapSourceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.conceptMapSource"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConceptMapSource([NotNull] FmlMappingParser.ConceptMapSourceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.conceptMapTarget"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConceptMapTarget([NotNull] FmlMappingParser.ConceptMapTargetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.conceptMapTarget"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConceptMapTarget([NotNull] FmlMappingParser.ConceptMapTargetContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.code"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode([NotNull] FmlMappingParser.CodeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.code"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode([NotNull] FmlMappingParser.CodeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.mapDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMapDeclaration([NotNull] FmlMappingParser.MapDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.mapDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMapDeclaration([NotNull] FmlMappingParser.MapDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.metadataDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMetadataDeclaration([NotNull] FmlMappingParser.MetadataDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.metadataDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMetadataDeclaration([NotNull] FmlMappingParser.MetadataDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.markdownLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMarkdownLiteral([NotNull] FmlMappingParser.MarkdownLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.markdownLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMarkdownLiteral([NotNull] FmlMappingParser.MarkdownLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.url"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUrl([NotNull] FmlMappingParser.UrlContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.url"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUrl([NotNull] FmlMappingParser.UrlContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] FmlMappingParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] FmlMappingParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.structureDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructureDeclaration([NotNull] FmlMappingParser.StructureDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.structureDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructureDeclaration([NotNull] FmlMappingParser.StructureDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.constantDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantDeclaration([NotNull] FmlMappingParser.ConstantDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.constantDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantDeclaration([NotNull] FmlMappingParser.ConstantDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.groupDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGroupDeclaration([NotNull] FmlMappingParser.GroupDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.groupDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGroupDeclaration([NotNull] FmlMappingParser.GroupDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameters([NotNull] FmlMappingParser.ParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameters([NotNull] FmlMappingParser.ParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter([NotNull] FmlMappingParser.ParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter([NotNull] FmlMappingParser.ParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.groupExpressions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGroupExpressions([NotNull] FmlMappingParser.GroupExpressionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.groupExpressions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGroupExpressions([NotNull] FmlMappingParser.GroupExpressionsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.typeMode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeMode([NotNull] FmlMappingParser.TypeModeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.typeMode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeMode([NotNull] FmlMappingParser.TypeModeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.extends"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExtends([NotNull] FmlMappingParser.ExtendsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.extends"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExtends([NotNull] FmlMappingParser.ExtendsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.typeIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifier([NotNull] FmlMappingParser.TypeIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.typeIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifier([NotNull] FmlMappingParser.TypeIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>mapSimpleCopy</c>
	/// labeled alternative in <see cref="FmlMappingParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMapSimpleCopy([NotNull] FmlMappingParser.MapSimpleCopyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mapSimpleCopy</c>
	/// labeled alternative in <see cref="FmlMappingParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMapSimpleCopy([NotNull] FmlMappingParser.MapSimpleCopyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>mapFhirMarkup</c>
	/// labeled alternative in <see cref="FmlMappingParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMapFhirMarkup([NotNull] FmlMappingParser.MapFhirMarkupContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mapFhirMarkup</c>
	/// labeled alternative in <see cref="FmlMappingParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMapFhirMarkup([NotNull] FmlMappingParser.MapFhirMarkupContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.mapExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMapExpression([NotNull] FmlMappingParser.MapExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.mapExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMapExpression([NotNull] FmlMappingParser.MapExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.mapExpressionName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMapExpressionName([NotNull] FmlMappingParser.MapExpressionNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.mapExpressionName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMapExpressionName([NotNull] FmlMappingParser.MapExpressionNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.mapExpressionSource"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMapExpressionSource([NotNull] FmlMappingParser.MapExpressionSourceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.mapExpressionSource"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMapExpressionSource([NotNull] FmlMappingParser.MapExpressionSourceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.mapExpressionTarget"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMapExpressionTarget([NotNull] FmlMappingParser.MapExpressionTargetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.mapExpressionTarget"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMapExpressionTarget([NotNull] FmlMappingParser.MapExpressionTargetContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.sourceCardinality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSourceCardinality([NotNull] FmlMappingParser.SourceCardinalityContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.sourceCardinality"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSourceCardinality([NotNull] FmlMappingParser.SourceCardinalityContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.upperBound"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUpperBound([NotNull] FmlMappingParser.UpperBoundContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.upperBound"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUpperBound([NotNull] FmlMappingParser.UpperBoundContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.qualifiedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualifiedIdentifier([NotNull] FmlMappingParser.QualifiedIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.qualifiedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualifiedIdentifier([NotNull] FmlMappingParser.QualifiedIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.sourceDefault"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSourceDefault([NotNull] FmlMappingParser.SourceDefaultContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.sourceDefault"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSourceDefault([NotNull] FmlMappingParser.SourceDefaultContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.alias"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAlias([NotNull] FmlMappingParser.AliasContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.alias"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAlias([NotNull] FmlMappingParser.AliasContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.whereClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhereClause([NotNull] FmlMappingParser.WhereClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.whereClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhereClause([NotNull] FmlMappingParser.WhereClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.checkClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCheckClause([NotNull] FmlMappingParser.CheckClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.checkClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCheckClause([NotNull] FmlMappingParser.CheckClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.log"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLog([NotNull] FmlMappingParser.LogContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.log"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLog([NotNull] FmlMappingParser.LogContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.dependentExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDependentExpression([NotNull] FmlMappingParser.DependentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.dependentExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDependentExpression([NotNull] FmlMappingParser.DependentExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.importDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportDeclaration([NotNull] FmlMappingParser.ImportDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.importDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportDeclaration([NotNull] FmlMappingParser.ImportDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.mapLineTarget"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMapLineTarget([NotNull] FmlMappingParser.MapLineTargetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.mapLineTarget"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMapLineTarget([NotNull] FmlMappingParser.MapLineTargetContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.transform"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTransform([NotNull] FmlMappingParser.TransformContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.transform"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTransform([NotNull] FmlMappingParser.TransformContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.invocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInvocation([NotNull] FmlMappingParser.InvocationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.invocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInvocation([NotNull] FmlMappingParser.InvocationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParamList([NotNull] FmlMappingParser.ParamListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParamList([NotNull] FmlMappingParser.ParamListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam([NotNull] FmlMappingParser.ParamContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam([NotNull] FmlMappingParser.ParamContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>indexerExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexerExpression([NotNull] FmlMappingParser.IndexerExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>indexerExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexerExpression([NotNull] FmlMappingParser.IndexerExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>polarityExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPolarityExpression([NotNull] FmlMappingParser.PolarityExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>polarityExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPolarityExpression([NotNull] FmlMappingParser.PolarityExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpression([NotNull] FmlMappingParser.AdditiveExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpression([NotNull] FmlMappingParser.AdditiveExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] FmlMappingParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] FmlMappingParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unionExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnionExpression([NotNull] FmlMappingParser.UnionExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unionExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnionExpression([NotNull] FmlMappingParser.UnionExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpression([NotNull] FmlMappingParser.OrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpression([NotNull] FmlMappingParser.OrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpression([NotNull] FmlMappingParser.AndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpression([NotNull] FmlMappingParser.AndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>membershipExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMembershipExpression([NotNull] FmlMappingParser.MembershipExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>membershipExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMembershipExpression([NotNull] FmlMappingParser.MembershipExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>inequalityExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInequalityExpression([NotNull] FmlMappingParser.InequalityExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>inequalityExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInequalityExpression([NotNull] FmlMappingParser.InequalityExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>invocationExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInvocationExpression([NotNull] FmlMappingParser.InvocationExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>invocationExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInvocationExpression([NotNull] FmlMappingParser.InvocationExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>equalityExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualityExpression([NotNull] FmlMappingParser.EqualityExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>equalityExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualityExpression([NotNull] FmlMappingParser.EqualityExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>impliesExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImpliesExpression([NotNull] FmlMappingParser.ImpliesExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>impliesExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImpliesExpression([NotNull] FmlMappingParser.ImpliesExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>termExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTermExpression([NotNull] FmlMappingParser.TermExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>termExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTermExpression([NotNull] FmlMappingParser.TermExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>typeExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeExpression([NotNull] FmlMappingParser.TypeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typeExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeExpression([NotNull] FmlMappingParser.TypeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>invocationTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInvocationTerm([NotNull] FmlMappingParser.InvocationTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>invocationTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInvocationTerm([NotNull] FmlMappingParser.InvocationTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>literalTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralTerm([NotNull] FmlMappingParser.LiteralTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>literalTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralTerm([NotNull] FmlMappingParser.LiteralTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>externalConstantTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExternalConstantTerm([NotNull] FmlMappingParser.ExternalConstantTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>externalConstantTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExternalConstantTerm([NotNull] FmlMappingParser.ExternalConstantTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesizedTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedTerm([NotNull] FmlMappingParser.ParenthesizedTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesizedTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedTerm([NotNull] FmlMappingParser.ParenthesizedTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>functionInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionInvocation([NotNull] FmlMappingParser.FunctionInvocationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionInvocation([NotNull] FmlMappingParser.FunctionInvocationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>memberInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberInvocation([NotNull] FmlMappingParser.MemberInvocationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>memberInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberInvocation([NotNull] FmlMappingParser.MemberInvocationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>thisInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisInvocation([NotNull] FmlMappingParser.ThisInvocationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>thisInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisInvocation([NotNull] FmlMappingParser.ThisInvocationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>indexInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexInvocation([NotNull] FmlMappingParser.IndexInvocationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>indexInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexInvocation([NotNull] FmlMappingParser.IndexInvocationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>totalInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTotalInvocation([NotNull] FmlMappingParser.TotalInvocationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>totalInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTotalInvocation([NotNull] FmlMappingParser.TotalInvocationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.fpExternalConstant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFpExternalConstant([NotNull] FmlMappingParser.FpExternalConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.fpExternalConstant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFpExternalConstant([NotNull] FmlMappingParser.FpExternalConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.fpFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFpFunction([NotNull] FmlMappingParser.FpFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.fpFunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFpFunction([NotNull] FmlMappingParser.FpFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.fpParamList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFpParamList([NotNull] FmlMappingParser.FpParamListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.fpParamList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFpParamList([NotNull] FmlMappingParser.FpParamListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.fpTypeSpecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFpTypeSpecifier([NotNull] FmlMappingParser.FpTypeSpecifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.fpTypeSpecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFpTypeSpecifier([NotNull] FmlMappingParser.FpTypeSpecifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] FmlMappingParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] FmlMappingParser.ConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>nullLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullLiteral([NotNull] FmlMappingParser.NullLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>nullLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullLiteral([NotNull] FmlMappingParser.NullLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>booleanLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanLiteral([NotNull] FmlMappingParser.BooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanLiteral([NotNull] FmlMappingParser.BooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>quantityLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuantityLiteral([NotNull] FmlMappingParser.QuantityLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>quantityLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuantityLiteral([NotNull] FmlMappingParser.QuantityLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>longNumberLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLongNumberLiteral([NotNull] FmlMappingParser.LongNumberLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>longNumberLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLongNumberLiteral([NotNull] FmlMappingParser.LongNumberLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numberLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberLiteral([NotNull] FmlMappingParser.NumberLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numberLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberLiteral([NotNull] FmlMappingParser.NumberLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dateLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateLiteral([NotNull] FmlMappingParser.DateLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dateLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateLiteral([NotNull] FmlMappingParser.DateLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dateTimeLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateTimeLiteral([NotNull] FmlMappingParser.DateTimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dateTimeLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateTimeLiteral([NotNull] FmlMappingParser.DateTimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>timeLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimeLiteral([NotNull] FmlMappingParser.TimeLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>timeLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimeLiteral([NotNull] FmlMappingParser.TimeLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringLiteral([NotNull] FmlMappingParser.StringLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringLiteral([NotNull] FmlMappingParser.StringLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>quotedStringLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuotedStringLiteral([NotNull] FmlMappingParser.QuotedStringLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>quotedStringLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuotedStringLiteral([NotNull] FmlMappingParser.QuotedStringLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>quantityWithDate</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpQuantity"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuantityWithDate([NotNull] FmlMappingParser.QuantityWithDateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>quantityWithDate</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpQuantity"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuantityWithDate([NotNull] FmlMappingParser.QuantityWithDateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>quantityWithDatePlural</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpQuantity"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuantityWithDatePlural([NotNull] FmlMappingParser.QuantityWithDatePluralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>quantityWithDatePlural</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpQuantity"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuantityWithDatePlural([NotNull] FmlMappingParser.QuantityWithDatePluralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>quantityWithUcum</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpQuantity"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuantityWithUcum([NotNull] FmlMappingParser.QuantityWithUcumContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>quantityWithUcum</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpQuantity"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuantityWithUcum([NotNull] FmlMappingParser.QuantityWithUcumContext context);
}
