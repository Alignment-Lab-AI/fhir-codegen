//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FmlMapping.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IFmlMappingListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
//[System.CLSCompliant(false)]
public partial class FmlMappingBaseListener : IFmlMappingListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.structureMap"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructureMap([NotNull] FmlMappingParser.StructureMapContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.structureMap"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructureMap([NotNull] FmlMappingParser.StructureMapContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.conceptMapDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConceptMapDeclaration([NotNull] FmlMappingParser.ConceptMapDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.conceptMapDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConceptMapDeclaration([NotNull] FmlMappingParser.ConceptMapDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.conceptMapPrefix"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConceptMapPrefix([NotNull] FmlMappingParser.ConceptMapPrefixContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.conceptMapPrefix"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConceptMapPrefix([NotNull] FmlMappingParser.ConceptMapPrefixContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.conceptMapCodeMap"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConceptMapCodeMap([NotNull] FmlMappingParser.ConceptMapCodeMapContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.conceptMapCodeMap"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConceptMapCodeMap([NotNull] FmlMappingParser.ConceptMapCodeMapContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.conceptMapSource"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConceptMapSource([NotNull] FmlMappingParser.ConceptMapSourceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.conceptMapSource"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConceptMapSource([NotNull] FmlMappingParser.ConceptMapSourceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.conceptMapTarget"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConceptMapTarget([NotNull] FmlMappingParser.ConceptMapTargetContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.conceptMapTarget"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConceptMapTarget([NotNull] FmlMappingParser.ConceptMapTargetContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.code"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCode([NotNull] FmlMappingParser.CodeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.code"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCode([NotNull] FmlMappingParser.CodeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.mapDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMapDeclaration([NotNull] FmlMappingParser.MapDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.mapDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMapDeclaration([NotNull] FmlMappingParser.MapDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.metadataDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMetadataDeclaration([NotNull] FmlMappingParser.MetadataDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.metadataDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMetadataDeclaration([NotNull] FmlMappingParser.MetadataDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.markdownLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMarkdownLiteral([NotNull] FmlMappingParser.MarkdownLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.markdownLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMarkdownLiteral([NotNull] FmlMappingParser.MarkdownLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.url"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUrl([NotNull] FmlMappingParser.UrlContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.url"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUrl([NotNull] FmlMappingParser.UrlContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] FmlMappingParser.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] FmlMappingParser.IdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.structureDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructureDeclaration([NotNull] FmlMappingParser.StructureDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.structureDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructureDeclaration([NotNull] FmlMappingParser.StructureDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.constantDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstantDeclaration([NotNull] FmlMappingParser.ConstantDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.constantDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstantDeclaration([NotNull] FmlMappingParser.ConstantDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.groupDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroupDeclaration([NotNull] FmlMappingParser.GroupDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.groupDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroupDeclaration([NotNull] FmlMappingParser.GroupDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameters([NotNull] FmlMappingParser.ParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameters([NotNull] FmlMappingParser.ParametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameter([NotNull] FmlMappingParser.ParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameter([NotNull] FmlMappingParser.ParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.groupExpressions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroupExpressions([NotNull] FmlMappingParser.GroupExpressionsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.groupExpressions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroupExpressions([NotNull] FmlMappingParser.GroupExpressionsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.typeMode"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeMode([NotNull] FmlMappingParser.TypeModeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.typeMode"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeMode([NotNull] FmlMappingParser.TypeModeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.extends"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExtends([NotNull] FmlMappingParser.ExtendsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.extends"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExtends([NotNull] FmlMappingParser.ExtendsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.typeIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeIdentifier([NotNull] FmlMappingParser.TypeIdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.typeIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeIdentifier([NotNull] FmlMappingParser.TypeIdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>mapSimpleCopy</c>
	/// labeled alternative in <see cref="FmlMappingParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMapSimpleCopy([NotNull] FmlMappingParser.MapSimpleCopyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>mapSimpleCopy</c>
	/// labeled alternative in <see cref="FmlMappingParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMapSimpleCopy([NotNull] FmlMappingParser.MapSimpleCopyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>mapFhirMarkup</c>
	/// labeled alternative in <see cref="FmlMappingParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMapFhirMarkup([NotNull] FmlMappingParser.MapFhirMarkupContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>mapFhirMarkup</c>
	/// labeled alternative in <see cref="FmlMappingParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMapFhirMarkup([NotNull] FmlMappingParser.MapFhirMarkupContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.mapExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMapExpression([NotNull] FmlMappingParser.MapExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.mapExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMapExpression([NotNull] FmlMappingParser.MapExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.mapExpressionName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMapExpressionName([NotNull] FmlMappingParser.MapExpressionNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.mapExpressionName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMapExpressionName([NotNull] FmlMappingParser.MapExpressionNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.mapExpressionSource"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMapExpressionSource([NotNull] FmlMappingParser.MapExpressionSourceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.mapExpressionSource"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMapExpressionSource([NotNull] FmlMappingParser.MapExpressionSourceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.mapExpressionTarget"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMapExpressionTarget([NotNull] FmlMappingParser.MapExpressionTargetContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.mapExpressionTarget"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMapExpressionTarget([NotNull] FmlMappingParser.MapExpressionTargetContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.sourceCardinality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSourceCardinality([NotNull] FmlMappingParser.SourceCardinalityContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.sourceCardinality"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSourceCardinality([NotNull] FmlMappingParser.SourceCardinalityContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.upperBound"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUpperBound([NotNull] FmlMappingParser.UpperBoundContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.upperBound"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUpperBound([NotNull] FmlMappingParser.UpperBoundContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.qualifiedIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQualifiedIdentifier([NotNull] FmlMappingParser.QualifiedIdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.qualifiedIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQualifiedIdentifier([NotNull] FmlMappingParser.QualifiedIdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.sourceDefault"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSourceDefault([NotNull] FmlMappingParser.SourceDefaultContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.sourceDefault"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSourceDefault([NotNull] FmlMappingParser.SourceDefaultContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.alias"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAlias([NotNull] FmlMappingParser.AliasContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.alias"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAlias([NotNull] FmlMappingParser.AliasContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.whereClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhereClause([NotNull] FmlMappingParser.WhereClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.whereClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhereClause([NotNull] FmlMappingParser.WhereClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.checkClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCheckClause([NotNull] FmlMappingParser.CheckClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.checkClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCheckClause([NotNull] FmlMappingParser.CheckClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.log"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLog([NotNull] FmlMappingParser.LogContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.log"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLog([NotNull] FmlMappingParser.LogContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.dependentExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDependentExpression([NotNull] FmlMappingParser.DependentExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.dependentExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDependentExpression([NotNull] FmlMappingParser.DependentExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.importDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImportDeclaration([NotNull] FmlMappingParser.ImportDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.importDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImportDeclaration([NotNull] FmlMappingParser.ImportDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.mapLineTarget"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMapLineTarget([NotNull] FmlMappingParser.MapLineTargetContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.mapLineTarget"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMapLineTarget([NotNull] FmlMappingParser.MapLineTargetContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.transform"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTransform([NotNull] FmlMappingParser.TransformContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.transform"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTransform([NotNull] FmlMappingParser.TransformContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.invocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInvocation([NotNull] FmlMappingParser.InvocationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.invocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInvocation([NotNull] FmlMappingParser.InvocationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.paramList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParamList([NotNull] FmlMappingParser.ParamListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.paramList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParamList([NotNull] FmlMappingParser.ParamListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParam([NotNull] FmlMappingParser.ParamContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParam([NotNull] FmlMappingParser.ParamContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>indexerExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndexerExpression([NotNull] FmlMappingParser.IndexerExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>indexerExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndexerExpression([NotNull] FmlMappingParser.IndexerExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>polarityExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPolarityExpression([NotNull] FmlMappingParser.PolarityExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>polarityExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPolarityExpression([NotNull] FmlMappingParser.PolarityExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditiveExpression([NotNull] FmlMappingParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditiveExpression([NotNull] FmlMappingParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicativeExpression([NotNull] FmlMappingParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicativeExpression([NotNull] FmlMappingParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unionExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnionExpression([NotNull] FmlMappingParser.UnionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unionExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnionExpression([NotNull] FmlMappingParser.UnionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrExpression([NotNull] FmlMappingParser.OrExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrExpression([NotNull] FmlMappingParser.OrExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAndExpression([NotNull] FmlMappingParser.AndExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAndExpression([NotNull] FmlMappingParser.AndExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>membershipExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMembershipExpression([NotNull] FmlMappingParser.MembershipExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>membershipExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMembershipExpression([NotNull] FmlMappingParser.MembershipExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>inequalityExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInequalityExpression([NotNull] FmlMappingParser.InequalityExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>inequalityExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInequalityExpression([NotNull] FmlMappingParser.InequalityExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>invocationExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInvocationExpression([NotNull] FmlMappingParser.InvocationExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>invocationExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInvocationExpression([NotNull] FmlMappingParser.InvocationExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>equalityExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEqualityExpression([NotNull] FmlMappingParser.EqualityExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>equalityExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEqualityExpression([NotNull] FmlMappingParser.EqualityExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>impliesExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImpliesExpression([NotNull] FmlMappingParser.ImpliesExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>impliesExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImpliesExpression([NotNull] FmlMappingParser.ImpliesExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>termExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTermExpression([NotNull] FmlMappingParser.TermExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>termExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTermExpression([NotNull] FmlMappingParser.TermExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>typeExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeExpression([NotNull] FmlMappingParser.TypeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>typeExpression</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeExpression([NotNull] FmlMappingParser.TypeExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>invocationTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInvocationTerm([NotNull] FmlMappingParser.InvocationTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>invocationTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInvocationTerm([NotNull] FmlMappingParser.InvocationTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>literalTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralTerm([NotNull] FmlMappingParser.LiteralTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>literalTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralTerm([NotNull] FmlMappingParser.LiteralTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>externalConstantTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExternalConstantTerm([NotNull] FmlMappingParser.ExternalConstantTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>externalConstantTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExternalConstantTerm([NotNull] FmlMappingParser.ExternalConstantTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesizedTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesizedTerm([NotNull] FmlMappingParser.ParenthesizedTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesizedTerm</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesizedTerm([NotNull] FmlMappingParser.ParenthesizedTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>functionInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionInvocation([NotNull] FmlMappingParser.FunctionInvocationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>functionInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionInvocation([NotNull] FmlMappingParser.FunctionInvocationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>memberInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberInvocation([NotNull] FmlMappingParser.MemberInvocationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>memberInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberInvocation([NotNull] FmlMappingParser.MemberInvocationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>thisInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThisInvocation([NotNull] FmlMappingParser.ThisInvocationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>thisInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThisInvocation([NotNull] FmlMappingParser.ThisInvocationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>indexInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndexInvocation([NotNull] FmlMappingParser.IndexInvocationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>indexInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndexInvocation([NotNull] FmlMappingParser.IndexInvocationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>totalInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTotalInvocation([NotNull] FmlMappingParser.TotalInvocationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>totalInvocation</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpInvocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTotalInvocation([NotNull] FmlMappingParser.TotalInvocationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.fpExternalConstant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFpExternalConstant([NotNull] FmlMappingParser.FpExternalConstantContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.fpExternalConstant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFpExternalConstant([NotNull] FmlMappingParser.FpExternalConstantContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.fpFunction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFpFunction([NotNull] FmlMappingParser.FpFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.fpFunction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFpFunction([NotNull] FmlMappingParser.FpFunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.fpParamList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFpParamList([NotNull] FmlMappingParser.FpParamListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.fpParamList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFpParamList([NotNull] FmlMappingParser.FpParamListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.fpTypeSpecifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFpTypeSpecifier([NotNull] FmlMappingParser.FpTypeSpecifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.fpTypeSpecifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFpTypeSpecifier([NotNull] FmlMappingParser.FpTypeSpecifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FmlMappingParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstant([NotNull] FmlMappingParser.ConstantContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FmlMappingParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstant([NotNull] FmlMappingParser.ConstantContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>nullLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNullLiteral([NotNull] FmlMappingParser.NullLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>nullLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNullLiteral([NotNull] FmlMappingParser.NullLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>booleanLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBooleanLiteral([NotNull] FmlMappingParser.BooleanLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBooleanLiteral([NotNull] FmlMappingParser.BooleanLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>quantityLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuantityLiteral([NotNull] FmlMappingParser.QuantityLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>quantityLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuantityLiteral([NotNull] FmlMappingParser.QuantityLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>longNumberLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLongNumberLiteral([NotNull] FmlMappingParser.LongNumberLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>longNumberLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLongNumberLiteral([NotNull] FmlMappingParser.LongNumberLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>numberLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberLiteral([NotNull] FmlMappingParser.NumberLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>numberLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberLiteral([NotNull] FmlMappingParser.NumberLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>dateLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDateLiteral([NotNull] FmlMappingParser.DateLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>dateLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDateLiteral([NotNull] FmlMappingParser.DateLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>dateTimeLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDateTimeLiteral([NotNull] FmlMappingParser.DateTimeLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>dateTimeLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDateTimeLiteral([NotNull] FmlMappingParser.DateTimeLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>timeLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTimeLiteral([NotNull] FmlMappingParser.TimeLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>timeLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTimeLiteral([NotNull] FmlMappingParser.TimeLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringLiteral([NotNull] FmlMappingParser.StringLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringLiteral([NotNull] FmlMappingParser.StringLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>quotedStringLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuotedStringLiteral([NotNull] FmlMappingParser.QuotedStringLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>quotedStringLiteral</c>
	/// labeled alternative in <see cref="FmlMappingParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuotedStringLiteral([NotNull] FmlMappingParser.QuotedStringLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>quantityWithDate</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpQuantity"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuantityWithDate([NotNull] FmlMappingParser.QuantityWithDateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>quantityWithDate</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpQuantity"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuantityWithDate([NotNull] FmlMappingParser.QuantityWithDateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>quantityWithDatePlural</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpQuantity"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuantityWithDatePlural([NotNull] FmlMappingParser.QuantityWithDatePluralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>quantityWithDatePlural</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpQuantity"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuantityWithDatePlural([NotNull] FmlMappingParser.QuantityWithDatePluralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>quantityWithUcum</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpQuantity"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuantityWithUcum([NotNull] FmlMappingParser.QuantityWithUcumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>quantityWithUcum</c>
	/// labeled alternative in <see cref="FmlMappingParser.fpQuantity"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuantityWithUcum([NotNull] FmlMappingParser.QuantityWithUcumContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
