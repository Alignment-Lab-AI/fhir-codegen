//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FmlMapping.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class FmlMappingParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, BOOL=40, DATE=41, DATETIME=42, TIME=43, ID=44, IDENTIFIER=45, 
		DELIMITED_IDENTIFIER=46, STRING=47, INTEGER=48, NUMBER=49, DOUBLE_QUOTED_STRING=50, 
		HEADER_URL=51, HEADER_NAME=52, HEADER_TITLE=53, HEADER_STATUS=54, WS=55, 
		COMMENT=56, LINE_COMMENT=57;
	public const int
		RULE_structureMap = 0, RULE_header = 1, RULE_mapUrl = 2, RULE_mapName = 3, 
		RULE_mapTitle = 4, RULE_mapStatus = 5, RULE_stringValue = 6, RULE_url = 7, 
		RULE_identifier = 8, RULE_structure = 9, RULE_structureAlias = 10, RULE_imports = 11, 
		RULE_const = 12, RULE_group = 13, RULE_rules = 14, RULE_typeMode = 15, 
		RULE_extends = 16, RULE_parameters = 17, RULE_parameter = 18, RULE_type = 19, 
		RULE_rule = 20, RULE_ruleName = 21, RULE_ruleSources = 22, RULE_ruleSource = 23, 
		RULE_ruleTargets = 24, RULE_sourceType = 25, RULE_sourceCardinality = 26, 
		RULE_upperBound = 27, RULE_ruleContext = 28, RULE_sourceDefault = 29, 
		RULE_alias = 30, RULE_whereClause = 31, RULE_checkClause = 32, RULE_log = 33, 
		RULE_dependent = 34, RULE_ruleTarget = 35, RULE_transform = 36, RULE_invocation = 37, 
		RULE_paramList = 38, RULE_param = 39, RULE_fhirPath = 40, RULE_literal = 41, 
		RULE_groupTypeMode = 42, RULE_sourceListMode = 43, RULE_targetListMode = 44, 
		RULE_inputMode = 45, RULE_modelMode = 46;
	public static readonly string[] ruleNames = {
		"structureMap", "header", "mapUrl", "mapName", "mapTitle", "mapStatus", 
		"stringValue", "url", "identifier", "structure", "structureAlias", "imports", 
		"const", "group", "rules", "typeMode", "extends", "parameters", "parameter", 
		"type", "rule", "ruleName", "ruleSources", "ruleSource", "ruleTargets", 
		"sourceType", "sourceCardinality", "upperBound", "ruleContext", "sourceDefault", 
		"alias", "whereClause", "checkClause", "log", "dependent", "ruleTarget", 
		"transform", "invocation", "paramList", "param", "fhirPath", "literal", 
		"groupTypeMode", "sourceListMode", "targetListMode", "inputMode", "modelMode"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'uses'", "'as'", "'alias'", "'imports'", "'let'", "';'", 
		"'group'", "'{'", "'}'", "'<<'", "'>>'", "'extends'", "'('", "','", "')'", 
		"':'", "'->'", "'..'", "'*'", "'.'", "'default'", "'where'", "'check'", 
		"'log'", "'then'", "'types'", "'type+'", "'first'", "'not_first'", "'last'", 
		"'not_last'", "'only_one'", "'share'", "'single'", "'source'", "'target'", 
		"'queried'", "'produced'", null, null, null, null, null, null, null, null, 
		null, null, null, "'/// url'", "'/// name'", "'/// title'", "'/// status'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "BOOL", "DATE", "DATETIME", "TIME", "ID", "IDENTIFIER", 
		"DELIMITED_IDENTIFIER", "STRING", "INTEGER", "NUMBER", "DOUBLE_QUOTED_STRING", 
		"HEADER_URL", "HEADER_NAME", "HEADER_TITLE", "HEADER_STATUS", "WS", "COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FmlMapping.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FmlMappingParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FmlMappingParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FmlMappingParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StructureMapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeaderContext header() {
			return GetRuleContext<HeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(FmlMappingParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructureContext[] structure() {
			return GetRuleContexts<StructureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureContext structure(int i) {
			return GetRuleContext<StructureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext[] imports() {
			return GetRuleContexts<ImportsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext imports(int i) {
			return GetRuleContext<ImportsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstContext[] @const() {
			return GetRuleContexts<ConstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstContext @const(int i) {
			return GetRuleContext<ConstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext[] group() {
			return GetRuleContexts<GroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext group(int i) {
			return GetRuleContext<GroupContext>(i);
		}
		public StructureMapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureMap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterStructureMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitStructureMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureMapContext structureMap() {
		StructureMapContext _localctx = new StructureMapContext(Context, State);
		EnterRule(_localctx, 0, RULE_structureMap);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			header();
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 95;
				structure();
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 101;
				imports();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 107;
				@const();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 113;
				group();
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__7 );
			State = 118;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapUrlContext mapUrl() {
			return GetRuleContext<MapUrlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapNameContext mapName() {
			return GetRuleContext<MapNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapTitleContext mapTitle() {
			return GetRuleContext<MapTitleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapStatusContext mapStatus() {
			return GetRuleContext<MapStatusContext>(0);
		}
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 2, RULE_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			mapUrl();
			State = 121;
			mapName();
			State = 122;
			mapTitle();
			State = 123;
			mapStatus();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapUrlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_URL() { return GetToken(FmlMappingParser.HEADER_URL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public MapUrlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapUrl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapUrl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapUrl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapUrl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapUrlContext mapUrl() {
		MapUrlContext _localctx = new MapUrlContext(Context, State);
		EnterRule(_localctx, 4, RULE_mapUrl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(HEADER_URL);
			State = 126;
			Match(T__0);
			State = 127;
			stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_NAME() { return GetToken(FmlMappingParser.HEADER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public MapNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapNameContext mapName() {
		MapNameContext _localctx = new MapNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_mapName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(HEADER_NAME);
			State = 130;
			Match(T__0);
			State = 131;
			stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapTitleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_TITLE() { return GetToken(FmlMappingParser.HEADER_TITLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public MapTitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapTitle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapTitle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapTitle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapTitleContext mapTitle() {
		MapTitleContext _localctx = new MapTitleContext(Context, State);
		EnterRule(_localctx, 8, RULE_mapTitle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(HEADER_TITLE);
			State = 134;
			Match(T__0);
			State = 135;
			stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapStatusContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_STATUS() { return GetToken(FmlMappingParser.HEADER_STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public MapStatusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapStatus; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapStatus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapStatusContext mapStatus() {
		MapStatusContext _localctx = new MapStatusContext(Context, State);
		EnterRule(_localctx, 10, RULE_mapStatus);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(HEADER_STATUS);
			State = 138;
			Match(T__0);
			State = 139;
			stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_STRING() { return GetToken(FmlMappingParser.DOUBLE_QUOTED_STRING, 0); }
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_stringValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(DOUBLE_QUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(FmlMappingParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_STRING() { return GetToken(FmlMappingParser.DOUBLE_QUOTED_STRING, 0); }
		public UrlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_url; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterUrl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitUrl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlContext url() {
		UrlContext _localctx = new UrlContext(Context, State);
		EnterRule(_localctx, 14, RULE_url);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==DOUBLE_QUOTED_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FmlMappingParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITED_IDENTIFIER() { return GetToken(FmlMappingParser.DELIMITED_IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModelModeContext modelMode() {
			return GetRuleContext<ModelModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureAliasContext structureAlias() {
			return GetRuleContext<StructureAliasContext>(0);
		}
		public StructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureContext structure() {
		StructureContext _localctx = new StructureContext(Context, State);
		EnterRule(_localctx, 18, RULE_structure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(T__1);
			State = 148;
			url();
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 149;
				structureAlias();
				}
			}

			State = 152;
			Match(T__2);
			State = 153;
			modelMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StructureAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterStructureAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitStructureAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureAliasContext structureAlias() {
		StructureAliasContext _localctx = new StructureAliasContext(Context, State);
		EnterRule(_localctx, 20, RULE_structureAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(T__3);
			State = 156;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		public ImportsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imports; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterImports(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitImports(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImports(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportsContext imports() {
		ImportsContext _localctx = new ImportsContext(Context, State);
		EnterRule(_localctx, 22, RULE_imports);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(T__4);
			State = 159;
			url();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FhirPathContext fhirPath() {
			return GetRuleContext<FhirPathContext>(0);
		}
		public ConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstContext @const() {
		ConstContext _localctx = new ConstContext(Context, State);
		EnterRule(_localctx, 24, RULE_const);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(T__5);
			State = 162;
			Match(ID);
			State = 163;
			Match(T__0);
			State = 164;
			fhirPath();
			State = 165;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtendsContext extends() {
			return GetRuleContext<ExtendsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModeContext typeMode() {
			return GetRuleContext<TypeModeContext>(0);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 26, RULE_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(T__7);
			State = 168;
			Match(ID);
			State = 169;
			parameters();
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 170;
				extends();
				}
			}

			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 173;
				typeMode();
				}
			}

			State = 176;
			rules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 28, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(T__8);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0)) {
				{
				{
				State = 179;
				rule();
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 185;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupTypeModeContext groupTypeMode() {
			return GetRuleContext<GroupTypeModeContext>(0);
		}
		public TypeModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterTypeMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitTypeMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeModeContext typeMode() {
		TypeModeContext _localctx = new TypeModeContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeMode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(T__10);
			State = 188;
			groupTypeMode();
			State = 189;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		public ExtendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extends; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterExtends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitExtends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtends(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendsContext extends() {
		ExtendsContext _localctx = new ExtendsContext(Context, State);
		EnterRule(_localctx, 32, RULE_extends);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__12);
			State = 192;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(T__13);
			State = 195;
			parameter();
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 196;
				Match(T__14);
				State = 197;
				parameter();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__14 );
			State = 202;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputModeContext inputMode() {
			return GetRuleContext<InputModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			inputMode();
			State = 205;
			Match(ID);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 206;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 38, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(T__16);
			State = 210;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleSourcesContext ruleSources() {
			return GetRuleContext<RuleSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleTargetsContext ruleTargets() {
			return GetRuleContext<RuleTargetsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DependentContext dependent() {
			return GetRuleContext<DependentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleNameContext ruleName() {
			return GetRuleContext<RuleNameContext>(0);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 40, RULE_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			ruleSources();
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 213;
				Match(T__17);
				State = 214;
				ruleTargets();
				}
			}

			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 217;
				dependent();
				}
			}

			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 220;
				ruleName();
				}
			}

			State = 223;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		public RuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRuleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRuleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleNameContext ruleName() {
		RuleNameContext _localctx = new RuleNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_ruleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSourcesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleSourceContext[] ruleSource() {
			return GetRuleContexts<RuleSourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleSourceContext ruleSource(int i) {
			return GetRuleContext<RuleSourceContext>(i);
		}
		public RuleSourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSources; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRuleSources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRuleSources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSourcesContext ruleSources() {
		RuleSourcesContext _localctx = new RuleSourcesContext(Context, State);
		EnterRule(_localctx, 44, RULE_ruleSources);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			ruleSource();
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 228;
				Match(T__14);
				State = 229;
				ruleSource();
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleContextContext ruleContext() {
			return GetRuleContext<RuleContextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceTypeContext sourceType() {
			return GetRuleContext<SourceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceCardinalityContext sourceCardinality() {
			return GetRuleContext<SourceCardinalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceDefaultContext sourceDefault() {
			return GetRuleContext<SourceDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceListModeContext sourceListMode() {
			return GetRuleContext<SourceListModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckClauseContext checkClause() {
			return GetRuleContext<CheckClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogContext log() {
			return GetRuleContext<LogContext>(0);
		}
		public RuleSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRuleSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRuleSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSourceContext ruleSource() {
		RuleSourceContext _localctx = new RuleSourceContext(Context, State);
		EnterRule(_localctx, 46, RULE_ruleSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			ruleContext();
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 236;
				sourceType();
				}
			}

			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER) {
				{
				State = 239;
				sourceCardinality();
				}
			}

			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 242;
				sourceDefault();
				}
			}

			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16642998272L) != 0)) {
				{
				State = 245;
				sourceListMode();
				}
			}

			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 248;
				alias();
				}
			}

			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 251;
				whereClause();
				}
			}

			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 254;
				checkClause();
				}
			}

			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 257;
				log();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleTargetsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleTargetContext[] ruleTarget() {
			return GetRuleContexts<RuleTargetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleTargetContext ruleTarget(int i) {
			return GetRuleContext<RuleTargetContext>(i);
		}
		public RuleTargetsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleTargets; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRuleTargets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRuleTargets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleTargets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleTargetsContext ruleTargets() {
		RuleTargetsContext _localctx = new RuleTargetsContext(Context, State);
		EnterRule(_localctx, 48, RULE_ruleTargets);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			ruleTarget();
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 261;
				Match(T__14);
				State = 262;
				ruleTarget();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SourceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterSourceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitSourceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceTypeContext sourceType() {
		SourceTypeContext _localctx = new SourceTypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_sourceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(T__16);
			State = 269;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceCardinalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FmlMappingParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpperBoundContext upperBound() {
			return GetRuleContext<UpperBoundContext>(0);
		}
		public SourceCardinalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceCardinality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterSourceCardinality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitSourceCardinality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceCardinality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceCardinalityContext sourceCardinality() {
		SourceCardinalityContext _localctx = new SourceCardinalityContext(Context, State);
		EnterRule(_localctx, 52, RULE_sourceCardinality);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(INTEGER);
			State = 272;
			Match(T__18);
			State = 273;
			upperBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FmlMappingParser.INTEGER, 0); }
		public UpperBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterUpperBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitUpperBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperBoundContext upperBound() {
		UpperBoundContext _localctx = new UpperBoundContext(Context, State);
		EnterRule(_localctx, 54, RULE_upperBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==INTEGER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public RuleContextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleContext; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRuleContext(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRuleContext(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleContext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContextContext ruleContext() {
		RuleContextContext _localctx = new RuleContextContext(Context, State);
		EnterRule(_localctx, 56, RULE_ruleContext);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			identifier();
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__20) {
				{
				{
				State = 278;
				Match(T__20);
				State = 279;
				identifier();
				}
				}
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FhirPathContext fhirPath() {
			return GetRuleContext<FhirPathContext>(0);
		}
		public SourceDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterSourceDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitSourceDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceDefaultContext sourceDefault() {
		SourceDefaultContext _localctx = new SourceDefaultContext(Context, State);
		EnterRule(_localctx, 58, RULE_sourceDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__21);
			State = 286;
			Match(T__13);
			State = 287;
			fhirPath();
			State = 288;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 60, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			Match(T__2);
			State = 291;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FhirPathContext fhirPath() {
			return GetRuleContext<FhirPathContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 62, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(T__22);
			State = 294;
			Match(T__13);
			State = 295;
			fhirPath();
			State = 296;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FhirPathContext fhirPath() {
			return GetRuleContext<FhirPathContext>(0);
		}
		public CheckClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterCheckClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitCheckClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckClauseContext checkClause() {
		CheckClauseContext _localctx = new CheckClauseContext(Context, State);
		EnterRule(_localctx, 64, RULE_checkClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(T__23);
			State = 299;
			Match(T__13);
			State = 300;
			fhirPath();
			State = 301;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FhirPathContext fhirPath() {
			return GetRuleContext<FhirPathContext>(0);
		}
		public LogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterLog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitLog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogContext log() {
		LogContext _localctx = new LogContext(Context, State);
		EnterRule(_localctx, 66, RULE_log);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(T__24);
			State = 304;
			Match(T__13);
			State = 305;
			fhirPath();
			State = 306;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DependentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext[] invocation() {
			return GetRuleContexts<InvocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation(int i) {
			return GetRuleContext<InvocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public DependentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterDependent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitDependent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDependent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DependentContext dependent() {
		DependentContext _localctx = new DependentContext(Context, State);
		EnterRule(_localctx, 68, RULE_dependent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(T__25);
			State = 321;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
			case IDENTIFIER:
			case DELIMITED_IDENTIFIER:
				{
				State = 309;
				invocation();
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 310;
					Match(T__14);
					State = 311;
					invocation();
					}
					}
					State = 316;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 317;
					rules();
					}
				}

				}
				break;
			case T__8:
				{
				State = 320;
				rules();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleTargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleContextContext ruleContext() {
			return GetRuleContext<RuleContextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransformContext transform() {
			return GetRuleContext<TransformContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TargetListModeContext targetListMode() {
			return GetRuleContext<TargetListModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public RuleTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRuleTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRuleTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleTargetContext ruleTarget() {
		RuleTargetContext _localctx = new RuleTargetContext(Context, State);
		EnterRule(_localctx, 70, RULE_ruleTarget);
		int _la;
		try {
			State = 338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323;
				ruleContext();
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 324;
					Match(T__0);
					State = 325;
					transform();
					}
				}

				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 328;
					alias();
					}
				}

				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 54223962112L) != 0)) {
					{
					State = 331;
					targetListMode();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				invocation();
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 335;
					alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransformContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleContextContext ruleContext() {
			return GetRuleContext<RuleContextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public TransformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterTransform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitTransform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransformContext transform() {
		TransformContext _localctx = new TransformContext(Context, State);
		EnterRule(_localctx, 72, RULE_transform);
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341;
				ruleContext();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 342;
				invocation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 74, RULE_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			identifier();
			State = 346;
			Match(T__13);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1019247278948352L) != 0)) {
				{
				State = 347;
				paramList();
				}
			}

			State = 350;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 76, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			param();
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 353;
				Match(T__14);
				State = 354;
				param();
				}
				}
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 78, RULE_param);
		try {
			State = 362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case DATE:
			case DATETIME:
			case TIME:
			case STRING:
			case INTEGER:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 360;
				literal();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 361;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FhirPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FhirPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fhirPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterFhirPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitFhirPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFhirPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FhirPathContext fhirPath() {
		FhirPathContext _localctx = new FhirPathContext(Context, State);
		EnterRule(_localctx, 80, RULE_fhirPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FmlMappingParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(FmlMappingParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(FmlMappingParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(FmlMappingParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(FmlMappingParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(FmlMappingParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(FmlMappingParser.BOOL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 82, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1001655092903936L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupTypeModeContext : ParserRuleContext {
		public GroupTypeModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupTypeMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterGroupTypeMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitGroupTypeMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupTypeMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupTypeModeContext groupTypeMode() {
		GroupTypeModeContext _localctx = new GroupTypeModeContext(Context, State);
		EnterRule(_localctx, 84, RULE_groupTypeMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			_la = TokenStream.LA(1);
			if ( !(_la==T__26 || _la==T__27) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceListModeContext : ParserRuleContext {
		public SourceListModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceListMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterSourceListMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitSourceListMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceListMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceListModeContext sourceListMode() {
		SourceListModeContext _localctx = new SourceListModeContext(Context, State);
		EnterRule(_localctx, 86, RULE_sourceListMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16642998272L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetListModeContext : ParserRuleContext {
		public TargetListModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetListMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterTargetListMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitTargetListMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTargetListMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetListModeContext targetListMode() {
		TargetListModeContext _localctx = new TargetListModeContext(Context, State);
		EnterRule(_localctx, 88, RULE_targetListMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 54223962112L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputModeContext : ParserRuleContext {
		public InputModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterInputMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitInputMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputModeContext inputMode() {
		InputModeContext _localctx = new InputModeContext(Context, State);
		EnterRule(_localctx, 90, RULE_inputMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			_la = TokenStream.LA(1);
			if ( !(_la==T__35 || _la==T__36) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelModeContext : ParserRuleContext {
		public ModelModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterModelMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitModelMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelModeContext modelMode() {
		ModelModeContext _localctx = new ModelModeContext(Context, State);
		EnterRule(_localctx, 92, RULE_modelMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1030792151040L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,57,379,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,1,0,5,0,97,8,0,10,0,12,0,100,
		9,0,1,0,5,0,103,8,0,10,0,12,0,106,9,0,1,0,5,0,109,8,0,10,0,12,0,112,9,
		0,1,0,4,0,115,8,0,11,0,12,0,116,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
		2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,
		1,8,1,8,1,9,1,9,1,9,3,9,151,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,
		11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,3,13,172,8,13,1,13,
		3,13,175,8,13,1,13,1,13,1,14,1,14,5,14,181,8,14,10,14,12,14,184,9,14,1,
		14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,4,17,199,
		8,17,11,17,12,17,200,1,17,1,17,1,18,1,18,1,18,3,18,208,8,18,1,19,1,19,
		1,19,1,20,1,20,1,20,3,20,216,8,20,1,20,3,20,219,8,20,1,20,3,20,222,8,20,
		1,20,1,20,1,21,1,21,1,22,1,22,1,22,5,22,231,8,22,10,22,12,22,234,9,22,
		1,23,1,23,3,23,238,8,23,1,23,3,23,241,8,23,1,23,3,23,244,8,23,1,23,3,23,
		247,8,23,1,23,3,23,250,8,23,1,23,3,23,253,8,23,1,23,3,23,256,8,23,1,23,
		3,23,259,8,23,1,24,1,24,1,24,5,24,264,8,24,10,24,12,24,267,9,24,1,25,1,
		25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,5,28,281,8,28,10,
		28,12,28,284,9,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,
		31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,
		34,1,34,1,34,5,34,313,8,34,10,34,12,34,316,9,34,1,34,3,34,319,8,34,1,34,
		3,34,322,8,34,1,35,1,35,1,35,3,35,327,8,35,1,35,3,35,330,8,35,1,35,3,35,
		333,8,35,1,35,1,35,3,35,337,8,35,3,35,339,8,35,1,36,1,36,1,36,3,36,344,
		8,36,1,37,1,37,1,37,3,37,349,8,37,1,37,1,37,1,38,1,38,1,38,5,38,356,8,
		38,10,38,12,38,359,9,38,1,39,1,39,3,39,363,8,39,1,40,1,40,1,41,1,41,1,
		42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,0,0,47,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,0,9,2,0,47,47,50,
		50,1,0,44,46,2,0,20,20,48,48,2,0,40,43,47,49,1,0,27,28,1,0,29,33,3,0,29,
		29,31,31,34,35,1,0,36,37,1,0,36,39,368,0,94,1,0,0,0,2,120,1,0,0,0,4,125,
		1,0,0,0,6,129,1,0,0,0,8,133,1,0,0,0,10,137,1,0,0,0,12,141,1,0,0,0,14,143,
		1,0,0,0,16,145,1,0,0,0,18,147,1,0,0,0,20,155,1,0,0,0,22,158,1,0,0,0,24,
		161,1,0,0,0,26,167,1,0,0,0,28,178,1,0,0,0,30,187,1,0,0,0,32,191,1,0,0,
		0,34,194,1,0,0,0,36,204,1,0,0,0,38,209,1,0,0,0,40,212,1,0,0,0,42,225,1,
		0,0,0,44,227,1,0,0,0,46,235,1,0,0,0,48,260,1,0,0,0,50,268,1,0,0,0,52,271,
		1,0,0,0,54,275,1,0,0,0,56,277,1,0,0,0,58,285,1,0,0,0,60,290,1,0,0,0,62,
		293,1,0,0,0,64,298,1,0,0,0,66,303,1,0,0,0,68,308,1,0,0,0,70,338,1,0,0,
		0,72,343,1,0,0,0,74,345,1,0,0,0,76,352,1,0,0,0,78,362,1,0,0,0,80,364,1,
		0,0,0,82,366,1,0,0,0,84,368,1,0,0,0,86,370,1,0,0,0,88,372,1,0,0,0,90,374,
		1,0,0,0,92,376,1,0,0,0,94,98,3,2,1,0,95,97,3,18,9,0,96,95,1,0,0,0,97,100,
		1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,104,1,0,0,0,100,98,1,0,0,0,101,
		103,3,22,11,0,102,101,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,
		1,0,0,0,105,110,1,0,0,0,106,104,1,0,0,0,107,109,3,24,12,0,108,107,1,0,
		0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,114,1,0,0,0,112,
		110,1,0,0,0,113,115,3,26,13,0,114,113,1,0,0,0,115,116,1,0,0,0,116,114,
		1,0,0,0,116,117,1,0,0,0,117,118,1,0,0,0,118,119,5,0,0,1,119,1,1,0,0,0,
		120,121,3,4,2,0,121,122,3,6,3,0,122,123,3,8,4,0,123,124,3,10,5,0,124,3,
		1,0,0,0,125,126,5,51,0,0,126,127,5,1,0,0,127,128,3,12,6,0,128,5,1,0,0,
		0,129,130,5,52,0,0,130,131,5,1,0,0,131,132,3,12,6,0,132,7,1,0,0,0,133,
		134,5,53,0,0,134,135,5,1,0,0,135,136,3,12,6,0,136,9,1,0,0,0,137,138,5,
		54,0,0,138,139,5,1,0,0,139,140,3,12,6,0,140,11,1,0,0,0,141,142,5,50,0,
		0,142,13,1,0,0,0,143,144,7,0,0,0,144,15,1,0,0,0,145,146,7,1,0,0,146,17,
		1,0,0,0,147,148,5,2,0,0,148,150,3,14,7,0,149,151,3,20,10,0,150,149,1,0,
		0,0,150,151,1,0,0,0,151,152,1,0,0,0,152,153,5,3,0,0,153,154,3,92,46,0,
		154,19,1,0,0,0,155,156,5,4,0,0,156,157,3,16,8,0,157,21,1,0,0,0,158,159,
		5,5,0,0,159,160,3,14,7,0,160,23,1,0,0,0,161,162,5,6,0,0,162,163,5,44,0,
		0,163,164,5,1,0,0,164,165,3,80,40,0,165,166,5,7,0,0,166,25,1,0,0,0,167,
		168,5,8,0,0,168,169,5,44,0,0,169,171,3,34,17,0,170,172,3,32,16,0,171,170,
		1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,175,3,30,15,0,174,173,1,0,
		0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,177,3,28,14,0,177,27,1,0,0,0,178,
		182,5,9,0,0,179,181,3,40,20,0,180,179,1,0,0,0,181,184,1,0,0,0,182,180,
		1,0,0,0,182,183,1,0,0,0,183,185,1,0,0,0,184,182,1,0,0,0,185,186,5,10,0,
		0,186,29,1,0,0,0,187,188,5,11,0,0,188,189,3,84,42,0,189,190,5,12,0,0,190,
		31,1,0,0,0,191,192,5,13,0,0,192,193,5,44,0,0,193,33,1,0,0,0,194,195,5,
		14,0,0,195,198,3,36,18,0,196,197,5,15,0,0,197,199,3,36,18,0,198,196,1,
		0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,
		202,203,5,16,0,0,203,35,1,0,0,0,204,205,3,90,45,0,205,207,5,44,0,0,206,
		208,3,38,19,0,207,206,1,0,0,0,207,208,1,0,0,0,208,37,1,0,0,0,209,210,5,
		17,0,0,210,211,3,16,8,0,211,39,1,0,0,0,212,215,3,44,22,0,213,214,5,18,
		0,0,214,216,3,48,24,0,215,213,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,
		217,219,3,68,34,0,218,217,1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,
		222,3,42,21,0,221,220,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,
		5,7,0,0,224,41,1,0,0,0,225,226,5,44,0,0,226,43,1,0,0,0,227,232,3,46,23,
		0,228,229,5,15,0,0,229,231,3,46,23,0,230,228,1,0,0,0,231,234,1,0,0,0,232,
		230,1,0,0,0,232,233,1,0,0,0,233,45,1,0,0,0,234,232,1,0,0,0,235,237,3,56,
		28,0,236,238,3,50,25,0,237,236,1,0,0,0,237,238,1,0,0,0,238,240,1,0,0,0,
		239,241,3,52,26,0,240,239,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,
		244,3,58,29,0,243,242,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,247,
		3,86,43,0,246,245,1,0,0,0,246,247,1,0,0,0,247,249,1,0,0,0,248,250,3,60,
		30,0,249,248,1,0,0,0,249,250,1,0,0,0,250,252,1,0,0,0,251,253,3,62,31,0,
		252,251,1,0,0,0,252,253,1,0,0,0,253,255,1,0,0,0,254,256,3,64,32,0,255,
		254,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,259,3,66,33,0,258,257,
		1,0,0,0,258,259,1,0,0,0,259,47,1,0,0,0,260,265,3,70,35,0,261,262,5,15,
		0,0,262,264,3,70,35,0,263,261,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,
		265,266,1,0,0,0,266,49,1,0,0,0,267,265,1,0,0,0,268,269,5,17,0,0,269,270,
		3,16,8,0,270,51,1,0,0,0,271,272,5,48,0,0,272,273,5,19,0,0,273,274,3,54,
		27,0,274,53,1,0,0,0,275,276,7,2,0,0,276,55,1,0,0,0,277,282,3,16,8,0,278,
		279,5,21,0,0,279,281,3,16,8,0,280,278,1,0,0,0,281,284,1,0,0,0,282,280,
		1,0,0,0,282,283,1,0,0,0,283,57,1,0,0,0,284,282,1,0,0,0,285,286,5,22,0,
		0,286,287,5,14,0,0,287,288,3,80,40,0,288,289,5,16,0,0,289,59,1,0,0,0,290,
		291,5,3,0,0,291,292,3,16,8,0,292,61,1,0,0,0,293,294,5,23,0,0,294,295,5,
		14,0,0,295,296,3,80,40,0,296,297,5,16,0,0,297,63,1,0,0,0,298,299,5,24,
		0,0,299,300,5,14,0,0,300,301,3,80,40,0,301,302,5,16,0,0,302,65,1,0,0,0,
		303,304,5,25,0,0,304,305,5,14,0,0,305,306,3,80,40,0,306,307,5,16,0,0,307,
		67,1,0,0,0,308,321,5,26,0,0,309,314,3,74,37,0,310,311,5,15,0,0,311,313,
		3,74,37,0,312,310,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,
		0,0,315,318,1,0,0,0,316,314,1,0,0,0,317,319,3,28,14,0,318,317,1,0,0,0,
		318,319,1,0,0,0,319,322,1,0,0,0,320,322,3,28,14,0,321,309,1,0,0,0,321,
		320,1,0,0,0,322,69,1,0,0,0,323,326,3,56,28,0,324,325,5,1,0,0,325,327,3,
		72,36,0,326,324,1,0,0,0,326,327,1,0,0,0,327,329,1,0,0,0,328,330,3,60,30,
		0,329,328,1,0,0,0,329,330,1,0,0,0,330,332,1,0,0,0,331,333,3,88,44,0,332,
		331,1,0,0,0,332,333,1,0,0,0,333,339,1,0,0,0,334,336,3,74,37,0,335,337,
		3,60,30,0,336,335,1,0,0,0,336,337,1,0,0,0,337,339,1,0,0,0,338,323,1,0,
		0,0,338,334,1,0,0,0,339,71,1,0,0,0,340,344,3,82,41,0,341,344,3,56,28,0,
		342,344,3,74,37,0,343,340,1,0,0,0,343,341,1,0,0,0,343,342,1,0,0,0,344,
		73,1,0,0,0,345,346,3,16,8,0,346,348,5,14,0,0,347,349,3,76,38,0,348,347,
		1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,351,5,16,0,0,351,75,1,0,0,
		0,352,357,3,78,39,0,353,354,5,15,0,0,354,356,3,78,39,0,355,353,1,0,0,0,
		356,359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,77,1,0,0,0,359,357,
		1,0,0,0,360,363,3,82,41,0,361,363,5,44,0,0,362,360,1,0,0,0,362,361,1,0,
		0,0,363,79,1,0,0,0,364,365,3,82,41,0,365,81,1,0,0,0,366,367,7,3,0,0,367,
		83,1,0,0,0,368,369,7,4,0,0,369,85,1,0,0,0,370,371,7,5,0,0,371,87,1,0,0,
		0,372,373,7,6,0,0,373,89,1,0,0,0,374,375,7,7,0,0,375,91,1,0,0,0,376,377,
		7,8,0,0,377,93,1,0,0,0,36,98,104,110,116,150,171,174,182,200,207,215,218,
		221,232,237,240,243,246,249,252,255,258,265,282,314,318,321,326,329,332,
		336,338,343,348,357,362
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
