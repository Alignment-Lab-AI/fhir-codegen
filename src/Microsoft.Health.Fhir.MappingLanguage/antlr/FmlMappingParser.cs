//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FmlMapping.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class FmlMappingParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, NULL_LITERAL=86, BOOL=87, 
		DATE=88, DATE_TIME=89, TIME=90, LONG_INTEGER=91, DECIMAL=92, INTEGER=93, 
		ID=94, IDENTIFIER=95, DELIMITED_IDENTIFIER=96, SINGLE_QUOTED_STRING=97, 
		DOUBLE_QUOTED_STRING=98, TRIPLE_QUOTED_STRING_LITERAL=99, WS=100, BLOCK_COMMENT=101, 
		METADATA_PREFIX=102, LINE_COMMENT=103;
	public const int
		RULE_structureMap = 0, RULE_conceptMapDeclaration = 1, RULE_conceptMapPrefix = 2, 
		RULE_conceptMapCodeMap = 3, RULE_conceptMapSource = 4, RULE_conceptMapTarget = 5, 
		RULE_code = 6, RULE_mapDeclaration = 7, RULE_metadataDeclaration = 8, 
		RULE_markdownLiteral = 9, RULE_url = 10, RULE_identifier = 11, RULE_structureDeclaration = 12, 
		RULE_constantDeclaration = 13, RULE_groupDeclaration = 14, RULE_parameters = 15, 
		RULE_parameter = 16, RULE_groupExpressions = 17, RULE_typeMode = 18, RULE_extends = 19, 
		RULE_typeIdentifier = 20, RULE_expression = 21, RULE_mapExpression = 22, 
		RULE_mapExpressionName = 23, RULE_mapExpressionSource = 24, RULE_mapExpressionTarget = 25, 
		RULE_sourceCardinality = 26, RULE_upperBound = 27, RULE_qualifiedIdentifier = 28, 
		RULE_sourceDefault = 29, RULE_alias = 30, RULE_whereClause = 31, RULE_checkClause = 32, 
		RULE_log = 33, RULE_dependentExpression = 34, RULE_importDeclaration = 35, 
		RULE_mapLineTarget = 36, RULE_transform = 37, RULE_invocation = 38, RULE_paramList = 39, 
		RULE_param = 40, RULE_fpExpression = 41, RULE_fpTerm = 42, RULE_fpInvocation = 43, 
		RULE_fpExternalConstant = 44, RULE_fpFunction = 45, RULE_fpParamList = 46, 
		RULE_fpTypeSpecifier = 47, RULE_constant = 48, RULE_literal = 49, RULE_fpQuantity = 50;
	public static readonly string[] ruleNames = {
		"structureMap", "conceptMapDeclaration", "conceptMapPrefix", "conceptMapCodeMap", 
		"conceptMapSource", "conceptMapTarget", "code", "mapDeclaration", "metadataDeclaration", 
		"markdownLiteral", "url", "identifier", "structureDeclaration", "constantDeclaration", 
		"groupDeclaration", "parameters", "parameter", "groupExpressions", "typeMode", 
		"extends", "typeIdentifier", "expression", "mapExpression", "mapExpressionName", 
		"mapExpressionSource", "mapExpressionTarget", "sourceCardinality", "upperBound", 
		"qualifiedIdentifier", "sourceDefault", "alias", "whereClause", "checkClause", 
		"log", "dependentExpression", "importDeclaration", "mapLineTarget", "transform", 
		"invocation", "paramList", "param", "fpExpression", "fpTerm", "fpInvocation", 
		"fpExternalConstant", "fpFunction", "fpParamList", "fpTypeSpecifier", 
		"constant", "literal", "fpQuantity"
	};

	private static readonly string[] _LiteralNames = {
		null, "'conceptmap'", "'{'", "'}'", "'prefix'", "'='", "'-'", "':'", "'map'", 
		"'uses'", "'alias'", "'as'", "'source'", "'queried'", "'target'", "'produced'", 
		"'let'", "';'", "'group'", "'('", "','", "')'", "'<<'", "'types'", "'type+'", 
		"'>>'", "'extends'", "'->'", "'first'", "'not_first'", "'last'", "'not_last'", 
		"'only_one'", "'..'", "'*'", "'imports'", "'where'", "'check'", "'div'", 
		"'contains'", "'is'", "'.'", "'default'", "'log'", "'then'", "'share'", 
		"'single'", "'['", "']'", "'+'", "'/'", "'mod'", "'&'", "'|'", "'<='", 
		"'<'", "'>'", "'>='", "'~'", "'!='", "'!~'", "'in'", "'and'", "'or'", 
		"'xor'", "'implies'", "'$this'", "'$index'", "'$total'", "'%'", "'year'", 
		"'month'", "'week'", "'day'", "'hour'", "'minute'", "'second'", "'millisecond'", 
		"'years'", "'months'", "'weeks'", "'days'", "'hours'", "'minutes'", "'seconds'", 
		"'milliseconds'", null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'/// '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "NULL_LITERAL", "BOOL", "DATE", "DATE_TIME", "TIME", "LONG_INTEGER", 
		"DECIMAL", "INTEGER", "ID", "IDENTIFIER", "DELIMITED_IDENTIFIER", "SINGLE_QUOTED_STRING", 
		"DOUBLE_QUOTED_STRING", "TRIPLE_QUOTED_STRING_LITERAL", "WS", "BLOCK_COMMENT", 
		"METADATA_PREFIX", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FmlMapping.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FmlMappingParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FmlMappingParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FmlMappingParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StructureMapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(FmlMappingParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MetadataDeclarationContext[] metadataDeclaration() {
			return GetRuleContexts<MetadataDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetadataDeclarationContext metadataDeclaration(int i) {
			return GetRuleContext<MetadataDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConceptMapDeclarationContext[] conceptMapDeclaration() {
			return GetRuleContexts<ConceptMapDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConceptMapDeclarationContext conceptMapDeclaration(int i) {
			return GetRuleContext<ConceptMapDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapDeclarationContext mapDeclaration() {
			return GetRuleContext<MapDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureDeclarationContext[] structureDeclaration() {
			return GetRuleContexts<StructureDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureDeclarationContext structureDeclaration(int i) {
			return GetRuleContext<StructureDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext[] constantDeclaration() {
			return GetRuleContexts<ConstantDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext constantDeclaration(int i) {
			return GetRuleContext<ConstantDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupDeclarationContext[] groupDeclaration() {
			return GetRuleContexts<GroupDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupDeclarationContext groupDeclaration(int i) {
			return GetRuleContext<GroupDeclarationContext>(i);
		}
		public StructureMapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureMap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterStructureMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitStructureMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureMapContext structureMap() {
		StructureMapContext _localctx = new StructureMapContext(Context, State);
		EnterRule(_localctx, 0, RULE_structureMap);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 102;
					metadataDeclaration();
					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 111;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 108;
					conceptMapDeclaration();
					}
					} 
				}
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 114;
				mapDeclaration();
				}
			}

			State = 120;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 117;
					structureDeclaration();
					}
					} 
				}
				State = 122;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 126;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 123;
					importDeclaration();
					}
					} 
				}
				State = 128;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 129;
					constantDeclaration();
					}
					} 
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 135;
				groupDeclaration();
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__17 );
			State = 140;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConceptMapDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConceptMapPrefixContext[] conceptMapPrefix() {
			return GetRuleContexts<ConceptMapPrefixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConceptMapPrefixContext conceptMapPrefix(int i) {
			return GetRuleContext<ConceptMapPrefixContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConceptMapCodeMapContext[] conceptMapCodeMap() {
			return GetRuleContexts<ConceptMapCodeMapContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConceptMapCodeMapContext conceptMapCodeMap(int i) {
			return GetRuleContext<ConceptMapCodeMapContext>(i);
		}
		public ConceptMapDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conceptMapDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterConceptMapDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitConceptMapDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConceptMapDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConceptMapDeclarationContext conceptMapDeclaration() {
		ConceptMapDeclarationContext _localctx = new ConceptMapDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_conceptMapDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(T__0);
			State = 143;
			url();
			State = 144;
			Match(T__1);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 145;
				conceptMapPrefix();
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__3 );
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 150;
				conceptMapCodeMap();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 155;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConceptMapPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		public ConceptMapPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conceptMapPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterConceptMapPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitConceptMapPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConceptMapPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConceptMapPrefixContext conceptMapPrefix() {
		ConceptMapPrefixContext _localctx = new ConceptMapPrefixContext(Context, State);
		EnterRule(_localctx, 4, RULE_conceptMapPrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(T__3);
			State = 158;
			Match(ID);
			State = 159;
			Match(T__4);
			State = 160;
			url();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConceptMapCodeMapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConceptMapSourceContext conceptMapSource() {
			return GetRuleContext<ConceptMapSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConceptMapTargetContext conceptMapTarget() {
			return GetRuleContext<ConceptMapTargetContext>(0);
		}
		public ConceptMapCodeMapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conceptMapCodeMap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterConceptMapCodeMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitConceptMapCodeMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConceptMapCodeMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConceptMapCodeMapContext conceptMapCodeMap() {
		ConceptMapCodeMapContext _localctx = new ConceptMapCodeMapContext(Context, State);
		EnterRule(_localctx, 6, RULE_conceptMapCodeMap);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			conceptMapSource();
			State = 163;
			Match(T__5);
			State = 164;
			conceptMapTarget();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConceptMapSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public ConceptMapSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conceptMapSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterConceptMapSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitConceptMapSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConceptMapSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConceptMapSourceContext conceptMapSource() {
		ConceptMapSourceContext _localctx = new ConceptMapSourceContext(Context, State);
		EnterRule(_localctx, 8, RULE_conceptMapSource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(ID);
			State = 167;
			Match(T__6);
			State = 168;
			code();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConceptMapTargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public ConceptMapTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conceptMapTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterConceptMapTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitConceptMapTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConceptMapTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConceptMapTargetContext conceptMapTarget() {
		ConceptMapTargetContext _localctx = new ConceptMapTargetContext(Context, State);
		EnterRule(_localctx, 10, RULE_conceptMapTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(ID);
			State = 171;
			Match(T__6);
			State = 172;
			code();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTED_STRING() { return GetToken(FmlMappingParser.SINGLE_QUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_STRING() { return GetToken(FmlMappingParser.DOUBLE_QUOTED_STRING, 0); }
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 12, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 25L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MapDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapDeclarationContext mapDeclaration() {
		MapDeclarationContext _localctx = new MapDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_mapDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(T__7);
			State = 177;
			url();
			State = 178;
			Match(T__4);
			State = 179;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadataDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METADATA_PREFIX() { return GetToken(FmlMappingParser.METADATA_PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MarkdownLiteralContext markdownLiteral() {
			return GetRuleContext<MarkdownLiteralContext>(0);
		}
		public MetadataDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadataDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMetadataDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMetadataDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadataDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadataDeclarationContext metadataDeclaration() {
		MetadataDeclarationContext _localctx = new MetadataDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_metadataDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(METADATA_PREFIX);
			State = 182;
			qualifiedIdentifier();
			State = 183;
			Match(T__4);
			State = 186;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL_LITERAL:
			case BOOL:
			case DATE:
			case DATE_TIME:
			case TIME:
			case LONG_INTEGER:
			case DECIMAL:
			case INTEGER:
			case SINGLE_QUOTED_STRING:
			case DOUBLE_QUOTED_STRING:
				{
				State = 184;
				literal();
				}
				break;
			case TRIPLE_QUOTED_STRING_LITERAL:
				{
				State = 185;
				markdownLiteral();
				}
				break;
			case T__0:
			case T__7:
			case T__8:
			case T__15:
			case T__17:
			case T__34:
			case METADATA_PREFIX:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkdownLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIPLE_QUOTED_STRING_LITERAL() { return GetToken(FmlMappingParser.TRIPLE_QUOTED_STRING_LITERAL, 0); }
		public MarkdownLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markdownLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMarkdownLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMarkdownLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkdownLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkdownLiteralContext markdownLiteral() {
		MarkdownLiteralContext _localctx = new MarkdownLiteralContext(Context, State);
		EnterRule(_localctx, 18, RULE_markdownLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(TRIPLE_QUOTED_STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTED_STRING() { return GetToken(FmlMappingParser.SINGLE_QUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_STRING() { return GetToken(FmlMappingParser.DOUBLE_QUOTED_STRING, 0); }
		public UrlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_url; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterUrl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitUrl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlContext url() {
		UrlContext _localctx = new UrlContext(Context, State);
		EnterRule(_localctx, 20, RULE_url);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = TokenStream.LA(1);
			if ( !(_la==SINGLE_QUOTED_STRING || _la==DOUBLE_QUOTED_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FmlMappingParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITED_IDENTIFIER() { return GetToken(FmlMappingParser.DELIMITED_IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StructureDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterStructureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitStructureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDeclarationContext structureDeclaration() {
		StructureDeclarationContext _localctx = new StructureDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_structureDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(T__8);
			State = 195;
			url();
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 196;
				Match(T__9);
				State = 197;
				identifier();
				}
			}

			State = 200;
			Match(T__10);
			State = 201;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 61440L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression() {
			return GetRuleContext<FpExpressionContext>(0);
		}
		public ConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterConstantDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitConstantDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclarationContext constantDeclaration() {
		ConstantDeclarationContext _localctx = new ConstantDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_constantDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(T__15);
			State = 204;
			Match(ID);
			State = 205;
			Match(T__4);
			State = 206;
			fpExpression(0);
			State = 207;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupExpressionsContext groupExpressions() {
			return GetRuleContext<GroupExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtendsContext extends() {
			return GetRuleContext<ExtendsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModeContext typeMode() {
			return GetRuleContext<TypeModeContext>(0);
		}
		public GroupDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterGroupDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitGroupDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupDeclarationContext groupDeclaration() {
		GroupDeclarationContext _localctx = new GroupDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_groupDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(T__17);
			State = 210;
			Match(ID);
			State = 211;
			parameters();
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 212;
				extends();
				}
			}

			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 215;
				typeMode();
				}
			}

			State = 218;
			groupExpressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 30, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(T__18);
			State = 221;
			parameter();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 222;
				Match(T__19);
				State = 223;
				parameter();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__19 );
			State = 228;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 32, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			_la = TokenStream.LA(1);
			if ( !(_la==T__11 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 231;
			Match(ID);
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 232;
				typeIdentifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GroupExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterGroupExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitGroupExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupExpressionsContext groupExpressions() {
		GroupExpressionsContext _localctx = new GroupExpressionsContext(Context, State);
		EnterRule(_localctx, 34, RULE_groupExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(T__1);
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2164739366672L) != 0) || _la==ID || _la==IDENTIFIER) {
				{
				{
				State = 236;
				expression();
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 242;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeModeContext : ParserRuleContext {
		public TypeModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterTypeMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitTypeMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeModeContext typeMode() {
		TypeModeContext _localctx = new TypeModeContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(T__21);
			State = 245;
			_la = TokenStream.LA(1);
			if ( !(_la==T__22 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 246;
			Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		public ExtendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extends; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterExtends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitExtends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtends(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendsContext extends() {
		ExtendsContext _localctx = new ExtendsContext(Context, State);
		EnterRule(_localctx, 38, RULE_extends);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(T__25);
			State = 249;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdentifierContext typeIdentifier() {
		TypeIdentifierContext _localctx = new TypeIdentifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_typeIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(T__6);
			State = 252;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MapFhirMarkupContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapExpressionContext mapExpression() {
			return GetRuleContext<MapExpressionContext>(0);
		}
		public MapFhirMarkupContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapFhirMarkup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapFhirMarkup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapFhirMarkup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapSimpleCopyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext[] qualifiedIdentifier() {
			return GetRuleContexts<QualifiedIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier(int i) {
			return GetRuleContext<QualifiedIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapExpressionNameContext mapExpressionName() {
			return GetRuleContext<MapExpressionNameContext>(0);
		}
		public MapSimpleCopyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapSimpleCopy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapSimpleCopy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapSimpleCopy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression);
		int _la;
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new MapSimpleCopyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 254;
				qualifiedIdentifier();
				State = 255;
				Match(T__26);
				State = 256;
				qualifiedIdentifier();
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLE_QUOTED_STRING) {
					{
					State = 257;
					mapExpressionName();
					}
				}

				State = 260;
				Match(T__16);
				}
				break;
			case 2:
				_localctx = new MapFhirMarkupContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 262;
				mapExpression();
				State = 263;
				Match(T__16);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapExpressionSourceContext[] mapExpressionSource() {
			return GetRuleContexts<MapExpressionSourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapExpressionSourceContext mapExpressionSource(int i) {
			return GetRuleContext<MapExpressionSourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapExpressionTargetContext mapExpressionTarget() {
			return GetRuleContext<MapExpressionTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DependentExpressionContext dependentExpression() {
			return GetRuleContext<DependentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapExpressionNameContext mapExpressionName() {
			return GetRuleContext<MapExpressionNameContext>(0);
		}
		public MapExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapExpressionContext mapExpression() {
		MapExpressionContext _localctx = new MapExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_mapExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			mapExpressionSource();
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__19) {
				{
				{
				State = 268;
				Match(T__19);
				State = 269;
				mapExpressionSource();
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 275;
				Match(T__26);
				State = 276;
				mapExpressionTarget();
				}
			}

			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__43) {
				{
				State = 279;
				dependentExpression();
				}
			}

			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLE_QUOTED_STRING) {
				{
				State = 282;
				mapExpressionName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapExpressionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_STRING() { return GetToken(FmlMappingParser.DOUBLE_QUOTED_STRING, 0); }
		public MapExpressionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapExpressionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapExpressionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapExpressionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpressionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapExpressionNameContext mapExpressionName() {
		MapExpressionNameContext _localctx = new MapExpressionNameContext(Context, State);
		EnterRule(_localctx, 46, RULE_mapExpressionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(DOUBLE_QUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapExpressionSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceCardinalityContext sourceCardinality() {
			return GetRuleContext<SourceCardinalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceDefaultContext sourceDefault() {
			return GetRuleContext<SourceDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckClauseContext checkClause() {
			return GetRuleContext<CheckClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogContext log() {
			return GetRuleContext<LogContext>(0);
		}
		public MapExpressionSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapExpressionSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapExpressionSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapExpressionSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpressionSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapExpressionSourceContext mapExpressionSource() {
		MapExpressionSourceContext _localctx = new MapExpressionSourceContext(Context, State);
		EnterRule(_localctx, 48, RULE_mapExpressionSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			qualifiedIdentifier();
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 288;
				typeIdentifier();
				}
			}

			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER) {
				{
				State = 291;
				sourceCardinality();
				}
			}

			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__41) {
				{
				State = 294;
				sourceDefault();
				}
			}

			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8321499136L) != 0)) {
				{
				State = 297;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8321499136L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 300;
				alias();
				}
			}

			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__35) {
				{
				State = 303;
				whereClause();
				}
			}

			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__36) {
				{
				State = 306;
				checkClause();
				}
			}

			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__42) {
				{
				State = 309;
				log();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapExpressionTargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapLineTargetContext[] mapLineTarget() {
			return GetRuleContexts<MapLineTargetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapLineTargetContext mapLineTarget(int i) {
			return GetRuleContext<MapLineTargetContext>(i);
		}
		public MapExpressionTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapExpressionTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapExpressionTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapExpressionTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpressionTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapExpressionTargetContext mapExpressionTarget() {
		MapExpressionTargetContext _localctx = new MapExpressionTargetContext(Context, State);
		EnterRule(_localctx, 50, RULE_mapExpressionTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			mapLineTarget();
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__19) {
				{
				{
				State = 313;
				Match(T__19);
				State = 314;
				mapLineTarget();
				}
				}
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceCardinalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FmlMappingParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpperBoundContext upperBound() {
			return GetRuleContext<UpperBoundContext>(0);
		}
		public SourceCardinalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceCardinality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterSourceCardinality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitSourceCardinality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceCardinality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceCardinalityContext sourceCardinality() {
		SourceCardinalityContext _localctx = new SourceCardinalityContext(Context, State);
		EnterRule(_localctx, 52, RULE_sourceCardinality);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			Match(INTEGER);
			State = 321;
			Match(T__32);
			State = 322;
			upperBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FmlMappingParser.INTEGER, 0); }
		public UpperBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterUpperBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitUpperBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperBoundContext upperBound() {
		UpperBoundContext _localctx = new UpperBoundContext(Context, State);
		EnterRule(_localctx, 54, RULE_upperBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			_la = TokenStream.LA(1);
			if ( !(_la==T__33 || _la==INTEGER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(FmlMappingParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(FmlMappingParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(FmlMappingParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FmlMappingParser.IDENTIFIER, i);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_qualifiedIdentifier);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2164739366672L) != 0) || _la==ID || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 327;
					Match(T__40);
					State = 328;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2164739366672L) != 0) || _la==ID || _la==IDENTIFIER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression() {
			return GetRuleContext<FpExpressionContext>(0);
		}
		public SourceDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterSourceDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitSourceDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceDefaultContext sourceDefault() {
		SourceDefaultContext _localctx = new SourceDefaultContext(Context, State);
		EnterRule(_localctx, 58, RULE_sourceDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(T__41);
			State = 335;
			Match(T__18);
			State = 336;
			fpExpression(0);
			State = 337;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 60, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			Match(T__10);
			State = 340;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression() {
			return GetRuleContext<FpExpressionContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 62, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(T__35);
			State = 343;
			fpExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression() {
			return GetRuleContext<FpExpressionContext>(0);
		}
		public CheckClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterCheckClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitCheckClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckClauseContext checkClause() {
		CheckClauseContext _localctx = new CheckClauseContext(Context, State);
		EnterRule(_localctx, 64, RULE_checkClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(T__36);
			State = 346;
			Match(T__18);
			State = 347;
			fpExpression(0);
			State = 348;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression() {
			return GetRuleContext<FpExpressionContext>(0);
		}
		public LogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterLog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitLog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogContext log() {
		LogContext _localctx = new LogContext(Context, State);
		EnterRule(_localctx, 66, RULE_log);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			Match(T__42);
			State = 351;
			Match(T__18);
			State = 352;
			fpExpression(0);
			State = 353;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DependentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext[] invocation() {
			return GetRuleContexts<InvocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation(int i) {
			return GetRuleContext<InvocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupExpressionsContext groupExpressions() {
			return GetRuleContext<GroupExpressionsContext>(0);
		}
		public DependentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterDependentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitDependentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDependentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DependentExpressionContext dependentExpression() {
		DependentExpressionContext _localctx = new DependentExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_dependentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			Match(T__43);
			State = 368;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
			case IDENTIFIER:
			case DELIMITED_IDENTIFIER:
				{
				State = 356;
				invocation();
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__19) {
					{
					{
					State = 357;
					Match(T__19);
					State = 358;
					invocation();
					}
					}
					State = 363;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 364;
					groupExpressions();
					}
				}

				}
				break;
			case T__1:
				{
				State = 367;
				groupExpressions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_importDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(T__34);
			State = 371;
			url();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapLineTargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransformContext transform() {
			return GetRuleContext<TransformContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression() {
			return GetRuleContext<FpExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public MapLineTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapLineTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapLineTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapLineTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapLineTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapLineTargetContext mapLineTarget() {
		MapLineTargetContext _localctx = new MapLineTargetContext(Context, State);
		EnterRule(_localctx, 72, RULE_mapLineTarget);
		int _la;
		try {
			State = 397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373;
				qualifiedIdentifier();
				State = 376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 374;
					Match(T__4);
					State = 375;
					transform();
					}
				}

				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 378;
					alias();
					}
				}

				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 105554458443776L) != 0)) {
					{
					State = 381;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 105554458443776L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384;
				Match(T__18);
				State = 385;
				fpExpression(0);
				State = 386;
				Match(T__20);
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 387;
					alias();
					}
				}

				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 105554458443776L) != 0)) {
					{
					State = 390;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 105554458443776L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 393;
				invocation();
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 394;
					alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransformContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression() {
			return GetRuleContext<FpExpressionContext>(0);
		}
		public TransformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterTransform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitTransform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransformContext transform() {
		TransformContext _localctx = new TransformContext(Context, State);
		EnterRule(_localctx, 74, RULE_transform);
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 399;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 400;
				qualifiedIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 401;
				invocation();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 402;
				Match(T__18);
				State = 403;
				fpExpression(0);
				State = 404;
				Match(T__20);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 76, RULE_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			identifier();
			State = 409;
			Match(T__18);
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 6655L) != 0)) {
				{
				State = 410;
				paramList();
				}
			}

			State = 413;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 78, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			param();
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__19) {
				{
				{
				State = 416;
				Match(T__19);
				State = 417;
				param();
				}
				}
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 80, RULE_param);
		try {
			State = 425;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL_LITERAL:
			case BOOL:
			case DATE:
			case DATE_TIME:
			case TIME:
			case LONG_INTEGER:
			case DECIMAL:
			case INTEGER:
			case SINGLE_QUOTED_STRING:
			case DOUBLE_QUOTED_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 423;
				literal();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 424;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FpExpressionContext : ParserRuleContext {
		public FpExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fpExpression; } }
	 
		public FpExpressionContext() { }
		public virtual void CopyFrom(FpExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IndexerExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext[] fpExpression() {
			return GetRuleContexts<FpExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression(int i) {
			return GetRuleContext<FpExpressionContext>(i);
		}
		public IndexerExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterIndexerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitIndexerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PolarityExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression() {
			return GetRuleContext<FpExpressionContext>(0);
		}
		public PolarityExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterPolarityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitPolarityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPolarityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext[] fpExpression() {
			return GetRuleContexts<FpExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression(int i) {
			return GetRuleContext<FpExpressionContext>(i);
		}
		public AdditiveExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext[] fpExpression() {
			return GetRuleContexts<FpExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression(int i) {
			return GetRuleContext<FpExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext[] fpExpression() {
			return GetRuleContexts<FpExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression(int i) {
			return GetRuleContext<FpExpressionContext>(i);
		}
		public UnionExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterUnionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitUnionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext[] fpExpression() {
			return GetRuleContexts<FpExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression(int i) {
			return GetRuleContext<FpExpressionContext>(i);
		}
		public OrExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext[] fpExpression() {
			return GetRuleContexts<FpExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression(int i) {
			return GetRuleContext<FpExpressionContext>(i);
		}
		public AndExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MembershipExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext[] fpExpression() {
			return GetRuleContexts<FpExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression(int i) {
			return GetRuleContext<FpExpressionContext>(i);
		}
		public MembershipExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMembershipExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMembershipExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMembershipExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InequalityExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext[] fpExpression() {
			return GetRuleContexts<FpExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression(int i) {
			return GetRuleContext<FpExpressionContext>(i);
		}
		public InequalityExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterInequalityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitInequalityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInequalityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvocationExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression() {
			return GetRuleContext<FpExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpInvocationContext fpInvocation() {
			return GetRuleContext<FpInvocationContext>(0);
		}
		public InvocationExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterInvocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitInvocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext[] fpExpression() {
			return GetRuleContexts<FpExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression(int i) {
			return GetRuleContext<FpExpressionContext>(i);
		}
		public EqualityExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImpliesExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext[] fpExpression() {
			return GetRuleContexts<FpExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression(int i) {
			return GetRuleContext<FpExpressionContext>(i);
		}
		public ImpliesExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterImpliesExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitImpliesExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImpliesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpTermContext fpTerm() {
			return GetRuleContext<FpTermContext>(0);
		}
		public TermExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterTermExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitTermExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeExpressionContext : FpExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression() {
			return GetRuleContext<FpExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpTypeSpecifierContext fpTypeSpecifier() {
			return GetRuleContext<FpTypeSpecifierContext>(0);
		}
		public TypeExpressionContext(FpExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FpExpressionContext fpExpression() {
		return fpExpression(0);
	}

	private FpExpressionContext fpExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		FpExpressionContext _localctx = new FpExpressionContext(Context, _parentState);
		FpExpressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_fpExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__13:
			case T__15:
			case T__17:
			case T__18:
			case T__22:
			case T__25:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case NULL_LITERAL:
			case BOOL:
			case DATE:
			case DATE_TIME:
			case TIME:
			case LONG_INTEGER:
			case DECIMAL:
			case INTEGER:
			case ID:
			case IDENTIFIER:
			case DELIMITED_IDENTIFIER:
			case SINGLE_QUOTED_STRING:
			case DOUBLE_QUOTED_STRING:
				{
				_localctx = new TermExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 428;
				fpTerm();
				}
				break;
			case T__5:
			case T__48:
				{
				_localctx = new PolarityExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 429;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__48) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 430;
				fpExpression(11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 473;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 471;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new FpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_fpExpression);
						State = 433;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 434;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3377991778304000L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 435;
						fpExpression(11);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new FpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_fpExpression);
						State = 436;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 437;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 5066549580791872L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 438;
						fpExpression(10);
						}
						break;
					case 3:
						{
						_localctx = new UnionExpressionContext(new FpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_fpExpression);
						State = 439;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						{
						State = 440;
						Match(T__52);
						}
						State = 441;
						fpExpression(8);
						}
						break;
					case 4:
						{
						_localctx = new InequalityExpressionContext(new FpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_fpExpression);
						State = 442;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 443;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 270215977642229760L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 444;
						fpExpression(7);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new FpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_fpExpression);
						State = 445;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 446;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2017612633061982240L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 447;
						fpExpression(6);
						}
						break;
					case 6:
						{
						_localctx = new MembershipExpressionContext(new FpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_fpExpression);
						State = 448;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 449;
						_la = TokenStream.LA(1);
						if ( !(_la==T__38 || _la==T__60) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 450;
						fpExpression(5);
						}
						break;
					case 7:
						{
						_localctx = new AndExpressionContext(new FpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_fpExpression);
						State = 451;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						{
						State = 452;
						Match(T__61);
						}
						State = 453;
						fpExpression(4);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new FpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_fpExpression);
						State = 454;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 455;
						_la = TokenStream.LA(1);
						if ( !(_la==T__62 || _la==T__63) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 456;
						fpExpression(3);
						}
						break;
					case 9:
						{
						_localctx = new ImpliesExpressionContext(new FpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_fpExpression);
						State = 457;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						{
						State = 458;
						Match(T__64);
						}
						State = 459;
						fpExpression(2);
						}
						break;
					case 10:
						{
						_localctx = new InvocationExpressionContext(new FpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_fpExpression);
						State = 460;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 461;
						Match(T__40);
						State = 462;
						fpInvocation();
						}
						break;
					case 11:
						{
						_localctx = new IndexerExpressionContext(new FpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_fpExpression);
						State = 463;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 464;
						Match(T__46);
						State = 465;
						fpExpression(0);
						State = 466;
						Match(T__47);
						}
						break;
					case 12:
						{
						_localctx = new TypeExpressionContext(new FpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_fpExpression);
						State = 468;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 469;
						_la = TokenStream.LA(1);
						if ( !(_la==T__10 || _la==T__39) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 470;
						fpTypeSpecifier();
						}
						break;
					}
					} 
				}
				State = 475;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FpTermContext : ParserRuleContext {
		public FpTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fpTerm; } }
	 
		public FpTermContext() { }
		public virtual void CopyFrom(FpTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExternalConstantTermContext : FpTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExternalConstantContext fpExternalConstant() {
			return GetRuleContext<FpExternalConstantContext>(0);
		}
		public ExternalConstantTermContext(FpTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterExternalConstantTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitExternalConstantTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalConstantTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralTermContext : FpTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralTermContext(FpTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterLiteralTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitLiteralTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedTermContext : FpTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression() {
			return GetRuleContext<FpExpressionContext>(0);
		}
		public ParenthesizedTermContext(FpTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterParenthesizedTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitParenthesizedTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvocationTermContext : FpTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpInvocationContext fpInvocation() {
			return GetRuleContext<FpInvocationContext>(0);
		}
		public InvocationTermContext(FpTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterInvocationTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitInvocationTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FpTermContext fpTerm() {
		FpTermContext _localctx = new FpTermContext(Context, State);
		EnterRule(_localctx, 84, RULE_fpTerm);
		try {
			State = 483;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__13:
			case T__15:
			case T__17:
			case T__22:
			case T__25:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__65:
			case T__66:
			case T__67:
			case ID:
			case IDENTIFIER:
			case DELIMITED_IDENTIFIER:
				_localctx = new InvocationTermContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 476;
				fpInvocation();
				}
				break;
			case NULL_LITERAL:
			case BOOL:
			case DATE:
			case DATE_TIME:
			case TIME:
			case LONG_INTEGER:
			case DECIMAL:
			case INTEGER:
			case SINGLE_QUOTED_STRING:
			case DOUBLE_QUOTED_STRING:
				_localctx = new LiteralTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 477;
				literal();
				}
				break;
			case T__68:
				_localctx = new ExternalConstantTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 478;
				fpExternalConstant();
				}
				break;
			case T__18:
				_localctx = new ParenthesizedTermContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 479;
				Match(T__18);
				State = 480;
				fpExpression(0);
				State = 481;
				Match(T__20);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FpInvocationContext : ParserRuleContext {
		public FpInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fpInvocation; } }
	 
		public FpInvocationContext() { }
		public virtual void CopyFrom(FpInvocationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TotalInvocationContext : FpInvocationContext {
		public TotalInvocationContext(FpInvocationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterTotalInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitTotalInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotalInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisInvocationContext : FpInvocationContext {
		public ThisInvocationContext(FpInvocationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterThisInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitThisInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexInvocationContext : FpInvocationContext {
		public IndexInvocationContext(FpInvocationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterIndexInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitIndexInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionInvocationContext : FpInvocationContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpFunctionContext fpFunction() {
			return GetRuleContext<FpFunctionContext>(0);
		}
		public FunctionInvocationContext(FpInvocationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterFunctionInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitFunctionInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberInvocationContext : FpInvocationContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberInvocationContext(FpInvocationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMemberInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMemberInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FpInvocationContext fpInvocation() {
		FpInvocationContext _localctx = new FpInvocationContext(Context, State);
		EnterRule(_localctx, 86, RULE_fpInvocation);
		try {
			State = 490;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				_localctx = new FunctionInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 485;
				fpFunction();
				}
				break;
			case 2:
				_localctx = new MemberInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				identifier();
				}
				break;
			case 3:
				_localctx = new ThisInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 487;
				Match(T__65);
				}
				break;
			case 4:
				_localctx = new IndexInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 488;
				Match(T__66);
				}
				break;
			case 5:
				_localctx = new TotalInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 489;
				Match(T__67);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FpExternalConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTED_STRING() { return GetToken(FmlMappingParser.SINGLE_QUOTED_STRING, 0); }
		public FpExternalConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fpExternalConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterFpExternalConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitFpExternalConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFpExternalConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FpExternalConstantContext fpExternalConstant() {
		FpExternalConstantContext _localctx = new FpExternalConstantContext(Context, State);
		EnterRule(_localctx, 88, RULE_fpExternalConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(T__68);
			State = 495;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
			case IDENTIFIER:
			case DELIMITED_IDENTIFIER:
				{
				State = 493;
				identifier();
				}
				break;
			case SINGLE_QUOTED_STRING:
				{
				State = 494;
				Match(SINGLE_QUOTED_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FpFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpParamListContext fpParamList() {
			return GetRuleContext<FpParamListContext>(0);
		}
		public FpFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fpFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterFpFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitFpFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFpFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FpFunctionContext fpFunction() {
		FpFunctionContext _localctx = new FpFunctionContext(Context, State);
		EnterRule(_localctx, 90, RULE_fpFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			qualifiedIdentifier();
			State = 498;
			Match(T__18);
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 565114693312336L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 8588886031L) != 0)) {
				{
				State = 499;
				fpParamList();
				}
			}

			State = 502;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FpParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext[] fpExpression() {
			return GetRuleContexts<FpExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FpExpressionContext fpExpression(int i) {
			return GetRuleContext<FpExpressionContext>(i);
		}
		public FpParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fpParamList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterFpParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitFpParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFpParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FpParamListContext fpParamList() {
		FpParamListContext _localctx = new FpParamListContext(Context, State);
		EnterRule(_localctx, 92, RULE_fpParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			fpExpression(0);
			State = 509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__19) {
				{
				{
				State = 505;
				Match(T__19);
				State = 506;
				fpExpression(0);
				}
				}
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FpTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FpTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fpTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterFpTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitFpTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFpTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FpTypeSpecifierContext fpTypeSpecifier() {
		FpTypeSpecifierContext _localctx = new FpTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 94, RULE_fpTypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 96, RULE_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TimeLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(FmlMappingParser.TIME, 0); }
		public TimeLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(FmlMappingParser.NULL_LITERAL, 0); }
		public NullLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateTimeLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_TIME() { return GetToken(FmlMappingParser.DATE_TIME, 0); }
		public DateTimeLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTED_STRING() { return GetToken(FmlMappingParser.SINGLE_QUOTED_STRING, 0); }
		public StringLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QuotedStringLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_STRING() { return GetToken(FmlMappingParser.DOUBLE_QUOTED_STRING, 0); }
		public QuotedStringLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterQuotedStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitQuotedStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuotedStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(FmlMappingParser.DATE, 0); }
		public DateLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(FmlMappingParser.BOOL, 0); }
		public BooleanLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QuantityLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public FpQuantityContext fpQuantity() {
			return GetRuleContext<FpQuantityContext>(0);
		}
		public QuantityLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterQuantityLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitQuantityLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantityLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongNumberLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_INTEGER() { return GetToken(FmlMappingParser.LONG_INTEGER, 0); }
		public LongNumberLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterLongNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitLongNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FmlMappingParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(FmlMappingParser.DECIMAL, 0); }
		public NumberLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 98, RULE_literal);
		int _la;
		try {
			State = 526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 516;
				Match(NULL_LITERAL);
				}
				break;
			case 2:
				_localctx = new BooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 517;
				Match(BOOL);
				}
				break;
			case 3:
				_localctx = new QuantityLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 518;
				fpQuantity();
				}
				break;
			case 4:
				_localctx = new LongNumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 519;
				Match(LONG_INTEGER);
				}
				break;
			case 5:
				_localctx = new NumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 520;
				_la = TokenStream.LA(1);
				if ( !(_la==DECIMAL || _la==INTEGER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				_localctx = new DateLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 521;
				Match(DATE);
				}
				break;
			case 7:
				_localctx = new DateTimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 522;
				Match(DATE_TIME);
				}
				break;
			case 8:
				_localctx = new TimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 523;
				Match(TIME);
				}
				break;
			case 9:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 524;
				Match(SINGLE_QUOTED_STRING);
				}
				break;
			case 10:
				_localctx = new QuotedStringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 525;
				Match(DOUBLE_QUOTED_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FpQuantityContext : ParserRuleContext {
		public FpQuantityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fpQuantity; } }
	 
		public FpQuantityContext() { }
		public virtual void CopyFrom(FpQuantityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QuantityWithDateContext : FpQuantityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FmlMappingParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(FmlMappingParser.DECIMAL, 0); }
		public QuantityWithDateContext(FpQuantityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterQuantityWithDate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitQuantityWithDate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantityWithDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QuantityWithUcumContext : FpQuantityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTED_STRING() { return GetToken(FmlMappingParser.SINGLE_QUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FmlMappingParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(FmlMappingParser.DECIMAL, 0); }
		public QuantityWithUcumContext(FpQuantityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterQuantityWithUcum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitQuantityWithUcum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantityWithUcum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QuantityWithDatePluralContext : FpQuantityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FmlMappingParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(FmlMappingParser.DECIMAL, 0); }
		public QuantityWithDatePluralContext(FpQuantityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterQuantityWithDatePlural(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitQuantityWithDatePlural(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantityWithDatePlural(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FpQuantityContext fpQuantity() {
		FpQuantityContext _localctx = new FpQuantityContext(Context, State);
		EnterRule(_localctx, 100, RULE_fpQuantity);
		int _la;
		try {
			State = 534;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				_localctx = new QuantityWithDateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 528;
				_la = TokenStream.LA(1);
				if ( !(_la==DECIMAL || _la==INTEGER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 529;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 255L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				_localctx = new QuantityWithDatePluralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 530;
				_la = TokenStream.LA(1);
				if ( !(_la==DECIMAL || _la==INTEGER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 531;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 255L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				_localctx = new QuantityWithUcumContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 532;
				_la = TokenStream.LA(1);
				if ( !(_la==DECIMAL || _la==INTEGER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 533;
				Match(SINGLE_QUOTED_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 41: return fpExpression_sempred((FpExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool fpExpression_sempred(FpExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		case 9: return Precpred(Context, 13);
		case 10: return Precpred(Context, 12);
		case 11: return Precpred(Context, 8);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,103,537,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,1,0,5,0,104,8,0,10,0,12,0,107,9,0,1,0,5,0,110,8,0,10,0,12,0,
		113,9,0,1,0,3,0,116,8,0,1,0,5,0,119,8,0,10,0,12,0,122,9,0,1,0,5,0,125,
		8,0,10,0,12,0,128,9,0,1,0,5,0,131,8,0,10,0,12,0,134,9,0,1,0,4,0,137,8,
		0,11,0,12,0,138,1,0,1,0,1,1,1,1,1,1,1,1,4,1,147,8,1,11,1,12,1,148,1,1,
		4,1,152,8,1,11,1,12,1,153,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
		1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
		8,1,8,1,8,3,8,187,8,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,
		3,12,199,8,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
		14,1,14,3,14,214,8,14,1,14,3,14,217,8,14,1,14,1,14,1,15,1,15,1,15,1,15,
		4,15,225,8,15,11,15,12,15,226,1,15,1,15,1,16,1,16,1,16,3,16,234,8,16,1,
		17,1,17,5,17,238,8,17,10,17,12,17,241,9,17,1,17,1,17,1,18,1,18,1,18,1,
		18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,3,21,259,8,21,1,21,
		1,21,1,21,1,21,1,21,3,21,266,8,21,1,22,1,22,1,22,5,22,271,8,22,10,22,12,
		22,274,9,22,1,22,1,22,3,22,278,8,22,1,22,3,22,281,8,22,1,22,3,22,284,8,
		22,1,23,1,23,1,24,1,24,3,24,290,8,24,1,24,3,24,293,8,24,1,24,3,24,296,
		8,24,1,24,3,24,299,8,24,1,24,3,24,302,8,24,1,24,3,24,305,8,24,1,24,3,24,
		308,8,24,1,24,3,24,311,8,24,1,25,1,25,1,25,5,25,316,8,25,10,25,12,25,319,
		9,25,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,5,28,330,8,28,10,28,
		12,28,333,9,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,
		1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
		5,34,360,8,34,10,34,12,34,363,9,34,1,34,3,34,366,8,34,1,34,3,34,369,8,
		34,1,35,1,35,1,35,1,36,1,36,1,36,3,36,377,8,36,1,36,3,36,380,8,36,1,36,
		3,36,383,8,36,1,36,1,36,1,36,1,36,3,36,389,8,36,1,36,3,36,392,8,36,1,36,
		1,36,3,36,396,8,36,3,36,398,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,
		37,407,8,37,1,38,1,38,1,38,3,38,412,8,38,1,38,1,38,1,39,1,39,1,39,5,39,
		419,8,39,10,39,12,39,422,9,39,1,40,1,40,3,40,426,8,40,1,41,1,41,1,41,1,
		41,3,41,432,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,
		472,8,41,10,41,12,41,475,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
		484,8,42,1,43,1,43,1,43,1,43,1,43,3,43,491,8,43,1,44,1,44,1,44,3,44,496,
		8,44,1,45,1,45,1,45,3,45,501,8,45,1,45,1,45,1,46,1,46,1,46,5,46,508,8,
		46,10,46,12,46,511,9,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,
		49,1,49,1,49,1,49,1,49,3,49,527,8,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,
		535,8,50,1,50,5,105,111,120,126,132,1,82,51,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,0,21,2,0,94,94,97,98,
		1,0,97,98,1,0,94,96,1,0,12,15,2,0,12,12,14,14,1,0,23,24,1,0,28,32,2,0,
		34,34,93,93,9,0,4,4,8,12,14,14,16,16,18,18,23,23,26,26,35,40,94,95,3,0,
		28,28,30,30,45,46,2,0,6,6,49,49,3,0,34,34,38,38,50,51,3,0,6,6,49,49,52,
		52,1,0,54,57,2,0,5,5,58,60,2,0,39,39,61,61,1,0,63,64,2,0,11,11,40,40,1,
		0,92,93,1,0,70,77,1,0,78,85,569,0,105,1,0,0,0,2,142,1,0,0,0,4,157,1,0,
		0,0,6,162,1,0,0,0,8,166,1,0,0,0,10,170,1,0,0,0,12,174,1,0,0,0,14,176,1,
		0,0,0,16,181,1,0,0,0,18,188,1,0,0,0,20,190,1,0,0,0,22,192,1,0,0,0,24,194,
		1,0,0,0,26,203,1,0,0,0,28,209,1,0,0,0,30,220,1,0,0,0,32,230,1,0,0,0,34,
		235,1,0,0,0,36,244,1,0,0,0,38,248,1,0,0,0,40,251,1,0,0,0,42,265,1,0,0,
		0,44,267,1,0,0,0,46,285,1,0,0,0,48,287,1,0,0,0,50,312,1,0,0,0,52,320,1,
		0,0,0,54,324,1,0,0,0,56,326,1,0,0,0,58,334,1,0,0,0,60,339,1,0,0,0,62,342,
		1,0,0,0,64,345,1,0,0,0,66,350,1,0,0,0,68,355,1,0,0,0,70,370,1,0,0,0,72,
		397,1,0,0,0,74,406,1,0,0,0,76,408,1,0,0,0,78,415,1,0,0,0,80,425,1,0,0,
		0,82,431,1,0,0,0,84,483,1,0,0,0,86,490,1,0,0,0,88,492,1,0,0,0,90,497,1,
		0,0,0,92,504,1,0,0,0,94,512,1,0,0,0,96,514,1,0,0,0,98,526,1,0,0,0,100,
		534,1,0,0,0,102,104,3,16,8,0,103,102,1,0,0,0,104,107,1,0,0,0,105,106,1,
		0,0,0,105,103,1,0,0,0,106,111,1,0,0,0,107,105,1,0,0,0,108,110,3,2,1,0,
		109,108,1,0,0,0,110,113,1,0,0,0,111,112,1,0,0,0,111,109,1,0,0,0,112,115,
		1,0,0,0,113,111,1,0,0,0,114,116,3,14,7,0,115,114,1,0,0,0,115,116,1,0,0,
		0,116,120,1,0,0,0,117,119,3,24,12,0,118,117,1,0,0,0,119,122,1,0,0,0,120,
		121,1,0,0,0,120,118,1,0,0,0,121,126,1,0,0,0,122,120,1,0,0,0,123,125,3,
		70,35,0,124,123,1,0,0,0,125,128,1,0,0,0,126,127,1,0,0,0,126,124,1,0,0,
		0,127,132,1,0,0,0,128,126,1,0,0,0,129,131,3,26,13,0,130,129,1,0,0,0,131,
		134,1,0,0,0,132,133,1,0,0,0,132,130,1,0,0,0,133,136,1,0,0,0,134,132,1,
		0,0,0,135,137,3,28,14,0,136,135,1,0,0,0,137,138,1,0,0,0,138,136,1,0,0,
		0,138,139,1,0,0,0,139,140,1,0,0,0,140,141,5,0,0,1,141,1,1,0,0,0,142,143,
		5,1,0,0,143,144,3,20,10,0,144,146,5,2,0,0,145,147,3,4,2,0,146,145,1,0,
		0,0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,151,1,0,0,0,150,
		152,3,6,3,0,151,150,1,0,0,0,152,153,1,0,0,0,153,151,1,0,0,0,153,154,1,
		0,0,0,154,155,1,0,0,0,155,156,5,3,0,0,156,3,1,0,0,0,157,158,5,4,0,0,158,
		159,5,94,0,0,159,160,5,5,0,0,160,161,3,20,10,0,161,5,1,0,0,0,162,163,3,
		8,4,0,163,164,5,6,0,0,164,165,3,10,5,0,165,7,1,0,0,0,166,167,5,94,0,0,
		167,168,5,7,0,0,168,169,3,12,6,0,169,9,1,0,0,0,170,171,5,94,0,0,171,172,
		5,7,0,0,172,173,3,12,6,0,173,11,1,0,0,0,174,175,7,0,0,0,175,13,1,0,0,0,
		176,177,5,8,0,0,177,178,3,20,10,0,178,179,5,5,0,0,179,180,3,22,11,0,180,
		15,1,0,0,0,181,182,5,102,0,0,182,183,3,56,28,0,183,186,5,5,0,0,184,187,
		3,98,49,0,185,187,3,18,9,0,186,184,1,0,0,0,186,185,1,0,0,0,186,187,1,0,
		0,0,187,17,1,0,0,0,188,189,5,99,0,0,189,19,1,0,0,0,190,191,7,1,0,0,191,
		21,1,0,0,0,192,193,7,2,0,0,193,23,1,0,0,0,194,195,5,9,0,0,195,198,3,20,
		10,0,196,197,5,10,0,0,197,199,3,22,11,0,198,196,1,0,0,0,198,199,1,0,0,
		0,199,200,1,0,0,0,200,201,5,11,0,0,201,202,7,3,0,0,202,25,1,0,0,0,203,
		204,5,16,0,0,204,205,5,94,0,0,205,206,5,5,0,0,206,207,3,82,41,0,207,208,
		5,17,0,0,208,27,1,0,0,0,209,210,5,18,0,0,210,211,5,94,0,0,211,213,3,30,
		15,0,212,214,3,38,19,0,213,212,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,
		215,217,3,36,18,0,216,215,1,0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,
		219,3,34,17,0,219,29,1,0,0,0,220,221,5,19,0,0,221,224,3,32,16,0,222,223,
		5,20,0,0,223,225,3,32,16,0,224,222,1,0,0,0,225,226,1,0,0,0,226,224,1,0,
		0,0,226,227,1,0,0,0,227,228,1,0,0,0,228,229,5,21,0,0,229,31,1,0,0,0,230,
		231,7,4,0,0,231,233,5,94,0,0,232,234,3,40,20,0,233,232,1,0,0,0,233,234,
		1,0,0,0,234,33,1,0,0,0,235,239,5,2,0,0,236,238,3,42,21,0,237,236,1,0,0,
		0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,242,1,0,0,0,241,
		239,1,0,0,0,242,243,5,3,0,0,243,35,1,0,0,0,244,245,5,22,0,0,245,246,7,
		5,0,0,246,247,5,25,0,0,247,37,1,0,0,0,248,249,5,26,0,0,249,250,5,94,0,
		0,250,39,1,0,0,0,251,252,5,7,0,0,252,253,3,22,11,0,253,41,1,0,0,0,254,
		255,3,56,28,0,255,256,5,27,0,0,256,258,3,56,28,0,257,259,3,46,23,0,258,
		257,1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,261,5,17,0,0,261,266,1,
		0,0,0,262,263,3,44,22,0,263,264,5,17,0,0,264,266,1,0,0,0,265,254,1,0,0,
		0,265,262,1,0,0,0,266,43,1,0,0,0,267,272,3,48,24,0,268,269,5,20,0,0,269,
		271,3,48,24,0,270,268,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,
		1,0,0,0,273,277,1,0,0,0,274,272,1,0,0,0,275,276,5,27,0,0,276,278,3,50,
		25,0,277,275,1,0,0,0,277,278,1,0,0,0,278,280,1,0,0,0,279,281,3,68,34,0,
		280,279,1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,284,3,46,23,0,283,
		282,1,0,0,0,283,284,1,0,0,0,284,45,1,0,0,0,285,286,5,98,0,0,286,47,1,0,
		0,0,287,289,3,56,28,0,288,290,3,40,20,0,289,288,1,0,0,0,289,290,1,0,0,
		0,290,292,1,0,0,0,291,293,3,52,26,0,292,291,1,0,0,0,292,293,1,0,0,0,293,
		295,1,0,0,0,294,296,3,58,29,0,295,294,1,0,0,0,295,296,1,0,0,0,296,298,
		1,0,0,0,297,299,7,6,0,0,298,297,1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,
		0,300,302,3,60,30,0,301,300,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,
		305,3,62,31,0,304,303,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,306,308,
		3,64,32,0,307,306,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,311,3,66,
		33,0,310,309,1,0,0,0,310,311,1,0,0,0,311,49,1,0,0,0,312,317,3,72,36,0,
		313,314,5,20,0,0,314,316,3,72,36,0,315,313,1,0,0,0,316,319,1,0,0,0,317,
		315,1,0,0,0,317,318,1,0,0,0,318,51,1,0,0,0,319,317,1,0,0,0,320,321,5,93,
		0,0,321,322,5,33,0,0,322,323,3,54,27,0,323,53,1,0,0,0,324,325,7,7,0,0,
		325,55,1,0,0,0,326,331,7,8,0,0,327,328,5,41,0,0,328,330,7,8,0,0,329,327,
		1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,57,1,0,0,0,
		333,331,1,0,0,0,334,335,5,42,0,0,335,336,5,19,0,0,336,337,3,82,41,0,337,
		338,5,21,0,0,338,59,1,0,0,0,339,340,5,11,0,0,340,341,3,22,11,0,341,61,
		1,0,0,0,342,343,5,36,0,0,343,344,3,82,41,0,344,63,1,0,0,0,345,346,5,37,
		0,0,346,347,5,19,0,0,347,348,3,82,41,0,348,349,5,21,0,0,349,65,1,0,0,0,
		350,351,5,43,0,0,351,352,5,19,0,0,352,353,3,82,41,0,353,354,5,21,0,0,354,
		67,1,0,0,0,355,368,5,44,0,0,356,361,3,76,38,0,357,358,5,20,0,0,358,360,
		3,76,38,0,359,357,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,
		0,0,362,365,1,0,0,0,363,361,1,0,0,0,364,366,3,34,17,0,365,364,1,0,0,0,
		365,366,1,0,0,0,366,369,1,0,0,0,367,369,3,34,17,0,368,356,1,0,0,0,368,
		367,1,0,0,0,369,69,1,0,0,0,370,371,5,35,0,0,371,372,3,20,10,0,372,71,1,
		0,0,0,373,376,3,56,28,0,374,375,5,5,0,0,375,377,3,74,37,0,376,374,1,0,
		0,0,376,377,1,0,0,0,377,379,1,0,0,0,378,380,3,60,30,0,379,378,1,0,0,0,
		379,380,1,0,0,0,380,382,1,0,0,0,381,383,7,9,0,0,382,381,1,0,0,0,382,383,
		1,0,0,0,383,398,1,0,0,0,384,385,5,19,0,0,385,386,3,82,41,0,386,388,5,21,
		0,0,387,389,3,60,30,0,388,387,1,0,0,0,388,389,1,0,0,0,389,391,1,0,0,0,
		390,392,7,9,0,0,391,390,1,0,0,0,391,392,1,0,0,0,392,398,1,0,0,0,393,395,
		3,76,38,0,394,396,3,60,30,0,395,394,1,0,0,0,395,396,1,0,0,0,396,398,1,
		0,0,0,397,373,1,0,0,0,397,384,1,0,0,0,397,393,1,0,0,0,398,73,1,0,0,0,399,
		407,3,98,49,0,400,407,3,56,28,0,401,407,3,76,38,0,402,403,5,19,0,0,403,
		404,3,82,41,0,404,405,5,21,0,0,405,407,1,0,0,0,406,399,1,0,0,0,406,400,
		1,0,0,0,406,401,1,0,0,0,406,402,1,0,0,0,407,75,1,0,0,0,408,409,3,22,11,
		0,409,411,5,19,0,0,410,412,3,78,39,0,411,410,1,0,0,0,411,412,1,0,0,0,412,
		413,1,0,0,0,413,414,5,21,0,0,414,77,1,0,0,0,415,420,3,80,40,0,416,417,
		5,20,0,0,417,419,3,80,40,0,418,416,1,0,0,0,419,422,1,0,0,0,420,418,1,0,
		0,0,420,421,1,0,0,0,421,79,1,0,0,0,422,420,1,0,0,0,423,426,3,98,49,0,424,
		426,5,94,0,0,425,423,1,0,0,0,425,424,1,0,0,0,426,81,1,0,0,0,427,428,6,
		41,-1,0,428,432,3,84,42,0,429,430,7,10,0,0,430,432,3,82,41,11,431,427,
		1,0,0,0,431,429,1,0,0,0,432,473,1,0,0,0,433,434,10,10,0,0,434,435,7,11,
		0,0,435,472,3,82,41,11,436,437,10,9,0,0,437,438,7,12,0,0,438,472,3,82,
		41,10,439,440,10,7,0,0,440,441,5,53,0,0,441,472,3,82,41,8,442,443,10,6,
		0,0,443,444,7,13,0,0,444,472,3,82,41,7,445,446,10,5,0,0,446,447,7,14,0,
		0,447,472,3,82,41,6,448,449,10,4,0,0,449,450,7,15,0,0,450,472,3,82,41,
		5,451,452,10,3,0,0,452,453,5,62,0,0,453,472,3,82,41,4,454,455,10,2,0,0,
		455,456,7,16,0,0,456,472,3,82,41,3,457,458,10,1,0,0,458,459,5,65,0,0,459,
		472,3,82,41,2,460,461,10,13,0,0,461,462,5,41,0,0,462,472,3,86,43,0,463,
		464,10,12,0,0,464,465,5,47,0,0,465,466,3,82,41,0,466,467,5,48,0,0,467,
		472,1,0,0,0,468,469,10,8,0,0,469,470,7,17,0,0,470,472,3,94,47,0,471,433,
		1,0,0,0,471,436,1,0,0,0,471,439,1,0,0,0,471,442,1,0,0,0,471,445,1,0,0,
		0,471,448,1,0,0,0,471,451,1,0,0,0,471,454,1,0,0,0,471,457,1,0,0,0,471,
		460,1,0,0,0,471,463,1,0,0,0,471,468,1,0,0,0,472,475,1,0,0,0,473,471,1,
		0,0,0,473,474,1,0,0,0,474,83,1,0,0,0,475,473,1,0,0,0,476,484,3,86,43,0,
		477,484,3,98,49,0,478,484,3,88,44,0,479,480,5,19,0,0,480,481,3,82,41,0,
		481,482,5,21,0,0,482,484,1,0,0,0,483,476,1,0,0,0,483,477,1,0,0,0,483,478,
		1,0,0,0,483,479,1,0,0,0,484,85,1,0,0,0,485,491,3,90,45,0,486,491,3,22,
		11,0,487,491,5,66,0,0,488,491,5,67,0,0,489,491,5,68,0,0,490,485,1,0,0,
		0,490,486,1,0,0,0,490,487,1,0,0,0,490,488,1,0,0,0,490,489,1,0,0,0,491,
		87,1,0,0,0,492,495,5,69,0,0,493,496,3,22,11,0,494,496,5,97,0,0,495,493,
		1,0,0,0,495,494,1,0,0,0,496,89,1,0,0,0,497,498,3,56,28,0,498,500,5,19,
		0,0,499,501,3,92,46,0,500,499,1,0,0,0,500,501,1,0,0,0,501,502,1,0,0,0,
		502,503,5,21,0,0,503,91,1,0,0,0,504,509,3,82,41,0,505,506,5,20,0,0,506,
		508,3,82,41,0,507,505,1,0,0,0,508,511,1,0,0,0,509,507,1,0,0,0,509,510,
		1,0,0,0,510,93,1,0,0,0,511,509,1,0,0,0,512,513,3,56,28,0,513,95,1,0,0,
		0,514,515,5,94,0,0,515,97,1,0,0,0,516,527,5,86,0,0,517,527,5,87,0,0,518,
		527,3,100,50,0,519,527,5,91,0,0,520,527,7,18,0,0,521,527,5,88,0,0,522,
		527,5,89,0,0,523,527,5,90,0,0,524,527,5,97,0,0,525,527,5,98,0,0,526,516,
		1,0,0,0,526,517,1,0,0,0,526,518,1,0,0,0,526,519,1,0,0,0,526,520,1,0,0,
		0,526,521,1,0,0,0,526,522,1,0,0,0,526,523,1,0,0,0,526,524,1,0,0,0,526,
		525,1,0,0,0,527,99,1,0,0,0,528,529,7,18,0,0,529,535,7,19,0,0,530,531,7,
		18,0,0,531,535,7,20,0,0,532,533,7,18,0,0,533,535,5,97,0,0,534,528,1,0,
		0,0,534,530,1,0,0,0,534,532,1,0,0,0,535,101,1,0,0,0,56,105,111,115,120,
		126,132,138,148,153,186,198,213,216,226,233,239,258,265,272,277,280,283,
		289,292,295,298,301,304,307,310,317,331,361,365,368,376,379,382,388,391,
		395,397,406,411,420,425,431,471,473,483,490,495,500,509,526,534
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
