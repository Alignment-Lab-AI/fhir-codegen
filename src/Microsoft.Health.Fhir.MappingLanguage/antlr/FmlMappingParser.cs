//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FmlMapping.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class FmlMappingParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, BOOL=41, DATE=42, DATETIME=43, TIME=44, ID=45, IDENTIFIER=46, 
		DELIMITED_IDENTIFIER=47, STRING=48, INTEGER=49, NUMBER=50, DOUBLE_QUOTED_STRING=51, 
		HEADER_URL=52, HEADER_NAME=53, HEADER_TITLE=54, HEADER_STATUS=55, HEADER_DESCRIPTION=56, 
		WS=57, COMMENT=58, LINE_COMMENT=59;
	public const int
		RULE_structureMap = 0, RULE_header = 1, RULE_mapId = 2, RULE_mapUrl = 3, 
		RULE_mapName = 4, RULE_mapTitle = 5, RULE_mapStatus = 6, RULE_mapDescription = 7, 
		RULE_stringValue = 8, RULE_url = 9, RULE_identifier = 10, RULE_structure = 11, 
		RULE_structureAlias = 12, RULE_imports = 13, RULE_const = 14, RULE_group = 15, 
		RULE_rules = 16, RULE_typeMode = 17, RULE_extends = 18, RULE_parameters = 19, 
		RULE_parameter = 20, RULE_type = 21, RULE_rule = 22, RULE_ruleName = 23, 
		RULE_ruleSources = 24, RULE_ruleSource = 25, RULE_ruleTargets = 26, RULE_sourceType = 27, 
		RULE_sourceCardinality = 28, RULE_upperBound = 29, RULE_ruleContext = 30, 
		RULE_sourceDefault = 31, RULE_alias = 32, RULE_whereClause = 33, RULE_checkClause = 34, 
		RULE_log = 35, RULE_dependent = 36, RULE_ruleTarget = 37, RULE_transform = 38, 
		RULE_invocation = 39, RULE_paramList = 40, RULE_param = 41, RULE_fhirPath = 42, 
		RULE_literal = 43, RULE_groupTypeMode = 44, RULE_sourceListMode = 45, 
		RULE_targetListMode = 46, RULE_inputMode = 47, RULE_modelMode = 48;
	public static readonly string[] ruleNames = {
		"structureMap", "header", "mapId", "mapUrl", "mapName", "mapTitle", "mapStatus", 
		"mapDescription", "stringValue", "url", "identifier", "structure", "structureAlias", 
		"imports", "const", "group", "rules", "typeMode", "extends", "parameters", 
		"parameter", "type", "rule", "ruleName", "ruleSources", "ruleSource", 
		"ruleTargets", "sourceType", "sourceCardinality", "upperBound", "ruleContext", 
		"sourceDefault", "alias", "whereClause", "checkClause", "log", "dependent", 
		"ruleTarget", "transform", "invocation", "paramList", "param", "fhirPath", 
		"literal", "groupTypeMode", "sourceListMode", "targetListMode", "inputMode", 
		"modelMode"
	};

	private static readonly string[] _LiteralNames = {
		null, "'map'", "'='", "'uses'", "'as'", "'alias'", "'imports'", "'let'", 
		"';'", "'group'", "'{'", "'}'", "'<<'", "'>>'", "'extends'", "'('", "','", 
		"')'", "':'", "'->'", "'..'", "'*'", "'.'", "'default'", "'where'", "'check'", 
		"'log'", "'then'", "'types'", "'type+'", "'first'", "'not_first'", "'last'", 
		"'not_last'", "'only_one'", "'share'", "'single'", "'source'", "'target'", 
		"'queried'", "'produced'", null, null, null, null, null, null, null, null, 
		null, null, null, "'/// url'", "'/// name'", "'/// title'", "'/// status'", 
		"'/// description'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "BOOL", "DATE", "DATETIME", "TIME", "ID", 
		"IDENTIFIER", "DELIMITED_IDENTIFIER", "STRING", "INTEGER", "NUMBER", "DOUBLE_QUOTED_STRING", 
		"HEADER_URL", "HEADER_NAME", "HEADER_TITLE", "HEADER_STATUS", "HEADER_DESCRIPTION", 
		"WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FmlMapping.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FmlMappingParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FmlMappingParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FmlMappingParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StructureMapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeaderContext header() {
			return GetRuleContext<HeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(FmlMappingParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructureContext[] structure() {
			return GetRuleContexts<StructureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureContext structure(int i) {
			return GetRuleContext<StructureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext[] imports() {
			return GetRuleContexts<ImportsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext imports(int i) {
			return GetRuleContext<ImportsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstContext[] @const() {
			return GetRuleContexts<ConstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstContext @const(int i) {
			return GetRuleContext<ConstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext[] group() {
			return GetRuleContexts<GroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext group(int i) {
			return GetRuleContext<GroupContext>(i);
		}
		public StructureMapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureMap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterStructureMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitStructureMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureMapContext structureMap() {
		StructureMapContext _localctx = new StructureMapContext(Context, State);
		EnterRule(_localctx, 0, RULE_structureMap);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			header();
			State = 102;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 99;
					structure();
					}
					} 
				}
				State = 104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 108;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 105;
					imports();
					}
					} 
				}
				State = 110;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 114;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 111;
					@const();
					}
					} 
				}
				State = 116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 117;
				group();
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__8 || _la==LINE_COMMENT );
			State = 122;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapIdContext[] mapId() {
			return GetRuleContexts<MapIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapIdContext mapId(int i) {
			return GetRuleContext<MapIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapUrlContext[] mapUrl() {
			return GetRuleContexts<MapUrlContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapUrlContext mapUrl(int i) {
			return GetRuleContext<MapUrlContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapNameContext[] mapName() {
			return GetRuleContexts<MapNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapNameContext mapName(int i) {
			return GetRuleContext<MapNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapTitleContext[] mapTitle() {
			return GetRuleContexts<MapTitleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapTitleContext mapTitle(int i) {
			return GetRuleContext<MapTitleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapStatusContext[] mapStatus() {
			return GetRuleContexts<MapStatusContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapStatusContext mapStatus(int i) {
			return GetRuleContext<MapStatusContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapDescriptionContext[] mapDescription() {
			return GetRuleContexts<MapDescriptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapDescriptionContext mapDescription(int i) {
			return GetRuleContext<MapDescriptionContext>(i);
		}
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 2, RULE_header);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 130;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__0:
					case LINE_COMMENT:
						{
						State = 124;
						mapId();
						}
						break;
					case HEADER_URL:
						{
						State = 125;
						mapUrl();
						}
						break;
					case HEADER_NAME:
						{
						State = 126;
						mapName();
						}
						break;
					case HEADER_TITLE:
						{
						State = 127;
						mapTitle();
						}
						break;
					case HEADER_STATUS:
						{
						State = 128;
						mapStatus();
						}
						break;
					case HEADER_DESCRIPTION:
						{
						State = 129;
						mapDescription();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_COMMENT() { return GetTokens(FmlMappingParser.LINE_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT(int i) {
			return GetToken(FmlMappingParser.LINE_COMMENT, i);
		}
		public MapIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapIdContext mapId() {
		MapIdContext _localctx = new MapIdContext(Context, State);
		EnterRule(_localctx, 4, RULE_mapId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LINE_COMMENT) {
				{
				{
				State = 135;
				Match(LINE_COMMENT);
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141;
			Match(T__0);
			State = 142;
			url();
			State = 143;
			Match(T__1);
			State = 144;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapUrlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_URL() { return GetToken(FmlMappingParser.HEADER_URL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public MapUrlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapUrl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapUrl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapUrl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapUrl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapUrlContext mapUrl() {
		MapUrlContext _localctx = new MapUrlContext(Context, State);
		EnterRule(_localctx, 6, RULE_mapUrl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(HEADER_URL);
			State = 147;
			Match(T__1);
			State = 148;
			stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_NAME() { return GetToken(FmlMappingParser.HEADER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public MapNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapNameContext mapName() {
		MapNameContext _localctx = new MapNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_mapName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(HEADER_NAME);
			State = 151;
			Match(T__1);
			State = 152;
			stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapTitleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_TITLE() { return GetToken(FmlMappingParser.HEADER_TITLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public MapTitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapTitle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapTitle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapTitle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapTitleContext mapTitle() {
		MapTitleContext _localctx = new MapTitleContext(Context, State);
		EnterRule(_localctx, 10, RULE_mapTitle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(HEADER_TITLE);
			State = 155;
			Match(T__1);
			State = 156;
			stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapStatusContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_STATUS() { return GetToken(FmlMappingParser.HEADER_STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public MapStatusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapStatus; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapStatus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapStatusContext mapStatus() {
		MapStatusContext _localctx = new MapStatusContext(Context, State);
		EnterRule(_localctx, 12, RULE_mapStatus);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(HEADER_STATUS);
			State = 159;
			Match(T__1);
			State = 160;
			stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_DESCRIPTION() { return GetToken(FmlMappingParser.HEADER_DESCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public MapDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterMapDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitMapDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapDescriptionContext mapDescription() {
		MapDescriptionContext _localctx = new MapDescriptionContext(Context, State);
		EnterRule(_localctx, 14, RULE_mapDescription);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(HEADER_DESCRIPTION);
			State = 163;
			Match(T__1);
			State = 164;
			stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_STRING() { return GetToken(FmlMappingParser.DOUBLE_QUOTED_STRING, 0); }
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_stringValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(DOUBLE_QUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(FmlMappingParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_STRING() { return GetToken(FmlMappingParser.DOUBLE_QUOTED_STRING, 0); }
		public UrlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_url; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterUrl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitUrl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlContext url() {
		UrlContext _localctx = new UrlContext(Context, State);
		EnterRule(_localctx, 18, RULE_url);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==DOUBLE_QUOTED_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FmlMappingParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITED_IDENTIFIER() { return GetToken(FmlMappingParser.DELIMITED_IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 246290604621824L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModelModeContext modelMode() {
			return GetRuleContext<ModelModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_COMMENT() { return GetTokens(FmlMappingParser.LINE_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT(int i) {
			return GetToken(FmlMappingParser.LINE_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureAliasContext structureAlias() {
			return GetRuleContext<StructureAliasContext>(0);
		}
		public StructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureContext structure() {
		StructureContext _localctx = new StructureContext(Context, State);
		EnterRule(_localctx, 22, RULE_structure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LINE_COMMENT) {
				{
				{
				State = 172;
				Match(LINE_COMMENT);
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178;
			Match(T__2);
			State = 179;
			url();
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 180;
				structureAlias();
				}
			}

			State = 183;
			Match(T__3);
			State = 184;
			modelMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StructureAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterStructureAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitStructureAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureAliasContext structureAlias() {
		StructureAliasContext _localctx = new StructureAliasContext(Context, State);
		EnterRule(_localctx, 24, RULE_structureAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(T__4);
			State = 187;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_COMMENT() { return GetTokens(FmlMappingParser.LINE_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT(int i) {
			return GetToken(FmlMappingParser.LINE_COMMENT, i);
		}
		public ImportsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imports; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterImports(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitImports(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImports(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportsContext imports() {
		ImportsContext _localctx = new ImportsContext(Context, State);
		EnterRule(_localctx, 26, RULE_imports);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LINE_COMMENT) {
				{
				{
				State = 189;
				Match(LINE_COMMENT);
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 195;
			Match(T__5);
			State = 196;
			url();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FhirPathContext fhirPath() {
			return GetRuleContext<FhirPathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_COMMENT() { return GetTokens(FmlMappingParser.LINE_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT(int i) {
			return GetToken(FmlMappingParser.LINE_COMMENT, i);
		}
		public ConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstContext @const() {
		ConstContext _localctx = new ConstContext(Context, State);
		EnterRule(_localctx, 28, RULE_const);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LINE_COMMENT) {
				{
				{
				State = 198;
				Match(LINE_COMMENT);
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 204;
			Match(T__6);
			State = 205;
			Match(ID);
			State = 206;
			Match(T__1);
			State = 207;
			fhirPath();
			State = 208;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_COMMENT() { return GetTokens(FmlMappingParser.LINE_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT(int i) {
			return GetToken(FmlMappingParser.LINE_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtendsContext extends() {
			return GetRuleContext<ExtendsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModeContext typeMode() {
			return GetRuleContext<TypeModeContext>(0);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 30, RULE_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LINE_COMMENT) {
				{
				{
				State = 210;
				Match(LINE_COMMENT);
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 216;
			Match(T__8);
			State = 217;
			Match(ID);
			State = 218;
			parameters();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 219;
				extends();
				}
			}

			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 222;
				typeMode();
				}
			}

			State = 225;
			rules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 32, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(T__9);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576707042908045312L) != 0)) {
				{
				{
				State = 228;
				rule();
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 234;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupTypeModeContext groupTypeMode() {
			return GetRuleContext<GroupTypeModeContext>(0);
		}
		public TypeModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterTypeMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitTypeMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeModeContext typeMode() {
		TypeModeContext _localctx = new TypeModeContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeMode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(T__11);
			State = 237;
			groupTypeMode();
			State = 238;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		public ExtendsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extends; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterExtends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitExtends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtends(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendsContext extends() {
		ExtendsContext _localctx = new ExtendsContext(Context, State);
		EnterRule(_localctx, 36, RULE_extends);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(T__13);
			State = 241;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 38, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(T__14);
			State = 244;
			parameter();
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 245;
				Match(T__15);
				State = 246;
				parameter();
				}
				}
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__15 );
			State = 251;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputModeContext inputMode() {
			return GetRuleContext<InputModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			inputMode();
			State = 254;
			Match(ID);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 255;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(T__17);
			State = 259;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleSourcesContext ruleSources() {
			return GetRuleContext<RuleSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_COMMENT() { return GetTokens(FmlMappingParser.LINE_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT(int i) {
			return GetToken(FmlMappingParser.LINE_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleTargetsContext ruleTargets() {
			return GetRuleContext<RuleTargetsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DependentContext dependent() {
			return GetRuleContext<DependentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleNameContext ruleName() {
			return GetRuleContext<RuleNameContext>(0);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 44, RULE_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LINE_COMMENT) {
				{
				{
				State = 261;
				Match(LINE_COMMENT);
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 267;
			ruleSources();
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 268;
				Match(T__18);
				State = 269;
				ruleTargets();
				}
			}

			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 272;
				dependent();
				}
			}

			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 275;
				ruleName();
				}
			}

			State = 278;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		public RuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRuleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRuleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleNameContext ruleName() {
		RuleNameContext _localctx = new RuleNameContext(Context, State);
		EnterRule(_localctx, 46, RULE_ruleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSourcesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleSourceContext[] ruleSource() {
			return GetRuleContexts<RuleSourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleSourceContext ruleSource(int i) {
			return GetRuleContext<RuleSourceContext>(i);
		}
		public RuleSourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSources; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRuleSources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRuleSources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSourcesContext ruleSources() {
		RuleSourcesContext _localctx = new RuleSourcesContext(Context, State);
		EnterRule(_localctx, 48, RULE_ruleSources);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			ruleSource();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 283;
				Match(T__15);
				State = 284;
				ruleSource();
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleContextContext ruleContext() {
			return GetRuleContext<RuleContextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceTypeContext sourceType() {
			return GetRuleContext<SourceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceCardinalityContext sourceCardinality() {
			return GetRuleContext<SourceCardinalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceDefaultContext sourceDefault() {
			return GetRuleContext<SourceDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceListModeContext sourceListMode() {
			return GetRuleContext<SourceListModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckClauseContext checkClause() {
			return GetRuleContext<CheckClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogContext log() {
			return GetRuleContext<LogContext>(0);
		}
		public RuleSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRuleSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRuleSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSourceContext ruleSource() {
		RuleSourceContext _localctx = new RuleSourceContext(Context, State);
		EnterRule(_localctx, 50, RULE_ruleSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			ruleContext();
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 291;
				sourceType();
				}
			}

			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER) {
				{
				State = 294;
				sourceCardinality();
				}
			}

			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 297;
				sourceDefault();
				}
			}

			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33285996544L) != 0)) {
				{
				State = 300;
				sourceListMode();
				}
			}

			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 303;
				alias();
				}
			}

			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 306;
				whereClause();
				}
			}

			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 309;
				checkClause();
				}
			}

			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 312;
				log();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleTargetsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleTargetContext[] ruleTarget() {
			return GetRuleContexts<RuleTargetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleTargetContext ruleTarget(int i) {
			return GetRuleContext<RuleTargetContext>(i);
		}
		public RuleTargetsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleTargets; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRuleTargets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRuleTargets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleTargets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleTargetsContext ruleTargets() {
		RuleTargetsContext _localctx = new RuleTargetsContext(Context, State);
		EnterRule(_localctx, 52, RULE_ruleTargets);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			ruleTarget();
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 316;
				Match(T__15);
				State = 317;
				ruleTarget();
				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SourceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterSourceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitSourceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceTypeContext sourceType() {
		SourceTypeContext _localctx = new SourceTypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_sourceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			Match(T__17);
			State = 324;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceCardinalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FmlMappingParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpperBoundContext upperBound() {
			return GetRuleContext<UpperBoundContext>(0);
		}
		public SourceCardinalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceCardinality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterSourceCardinality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitSourceCardinality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceCardinality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceCardinalityContext sourceCardinality() {
		SourceCardinalityContext _localctx = new SourceCardinalityContext(Context, State);
		EnterRule(_localctx, 56, RULE_sourceCardinality);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(INTEGER);
			State = 327;
			Match(T__19);
			State = 328;
			upperBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FmlMappingParser.INTEGER, 0); }
		public UpperBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterUpperBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitUpperBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperBoundContext upperBound() {
		UpperBoundContext _localctx = new UpperBoundContext(Context, State);
		EnterRule(_localctx, 58, RULE_upperBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			_la = TokenStream.LA(1);
			if ( !(_la==T__20 || _la==INTEGER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public RuleContextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleContext; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRuleContext(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRuleContext(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleContext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContextContext ruleContext() {
		RuleContextContext _localctx = new RuleContextContext(Context, State);
		EnterRule(_localctx, 60, RULE_ruleContext);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			identifier();
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__21) {
				{
				{
				State = 333;
				Match(T__21);
				State = 334;
				identifier();
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FhirPathContext fhirPath() {
			return GetRuleContext<FhirPathContext>(0);
		}
		public SourceDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterSourceDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitSourceDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceDefaultContext sourceDefault() {
		SourceDefaultContext _localctx = new SourceDefaultContext(Context, State);
		EnterRule(_localctx, 62, RULE_sourceDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(T__22);
			State = 341;
			Match(T__14);
			State = 342;
			fhirPath();
			State = 343;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 64, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(T__3);
			State = 346;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FhirPathContext fhirPath() {
			return GetRuleContext<FhirPathContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 66, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			Match(T__23);
			State = 349;
			Match(T__14);
			State = 350;
			fhirPath();
			State = 351;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FhirPathContext fhirPath() {
			return GetRuleContext<FhirPathContext>(0);
		}
		public CheckClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterCheckClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitCheckClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckClauseContext checkClause() {
		CheckClauseContext _localctx = new CheckClauseContext(Context, State);
		EnterRule(_localctx, 68, RULE_checkClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(T__24);
			State = 354;
			Match(T__14);
			State = 355;
			fhirPath();
			State = 356;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FhirPathContext fhirPath() {
			return GetRuleContext<FhirPathContext>(0);
		}
		public LogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterLog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitLog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogContext log() {
		LogContext _localctx = new LogContext(Context, State);
		EnterRule(_localctx, 70, RULE_log);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			Match(T__25);
			State = 359;
			Match(T__14);
			State = 360;
			fhirPath();
			State = 361;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DependentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext[] invocation() {
			return GetRuleContexts<InvocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation(int i) {
			return GetRuleContext<InvocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public DependentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterDependent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitDependent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDependent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DependentContext dependent() {
		DependentContext _localctx = new DependentContext(Context, State);
		EnterRule(_localctx, 72, RULE_dependent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(T__26);
			State = 376;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
			case IDENTIFIER:
			case DELIMITED_IDENTIFIER:
				{
				State = 364;
				invocation();
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 365;
					Match(T__15);
					State = 366;
					invocation();
					}
					}
					State = 371;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 372;
					rules();
					}
				}

				}
				break;
			case T__9:
				{
				State = 375;
				rules();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleTargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleContextContext ruleContext() {
			return GetRuleContext<RuleContextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransformContext transform() {
			return GetRuleContext<TransformContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TargetListModeContext targetListMode() {
			return GetRuleContext<TargetListModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public RuleTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterRuleTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitRuleTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleTargetContext ruleTarget() {
		RuleTargetContext _localctx = new RuleTargetContext(Context, State);
		EnterRule(_localctx, 74, RULE_ruleTarget);
		int _la;
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 378;
				ruleContext();
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 379;
					Match(T__1);
					State = 380;
					transform();
					}
				}

				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 383;
					alias();
					}
				}

				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 108447924224L) != 0)) {
					{
					State = 386;
					targetListMode();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 389;
				invocation();
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 390;
					alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransformContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleContextContext ruleContext() {
			return GetRuleContext<RuleContextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public TransformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterTransform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitTransform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransformContext transform() {
		TransformContext _localctx = new TransformContext(Context, State);
		EnterRule(_localctx, 76, RULE_transform);
		try {
			State = 398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 396;
				ruleContext();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 397;
				invocation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 78, RULE_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			identifier();
			State = 401;
			Match(T__14);
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2038494557896704L) != 0)) {
				{
				State = 402;
				paramList();
				}
			}

			State = 405;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 80, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			param();
			State = 412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 408;
				Match(T__15);
				State = 409;
				param();
				}
				}
				State = 414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FmlMappingParser.ID, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 82, RULE_param);
		try {
			State = 417;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case DATE:
			case DATETIME:
			case TIME:
			case STRING:
			case INTEGER:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 415;
				literal();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 416;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FhirPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FhirPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fhirPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterFhirPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitFhirPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFhirPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FhirPathContext fhirPath() {
		FhirPathContext _localctx = new FhirPathContext(Context, State);
		EnterRule(_localctx, 84, RULE_fhirPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FmlMappingParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(FmlMappingParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(FmlMappingParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(FmlMappingParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(FmlMappingParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(FmlMappingParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(FmlMappingParser.BOOL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 86, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2003310185807872L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupTypeModeContext : ParserRuleContext {
		public GroupTypeModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupTypeMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterGroupTypeMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitGroupTypeMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupTypeMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupTypeModeContext groupTypeMode() {
		GroupTypeModeContext _localctx = new GroupTypeModeContext(Context, State);
		EnterRule(_localctx, 88, RULE_groupTypeMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			_la = TokenStream.LA(1);
			if ( !(_la==T__27 || _la==T__28) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceListModeContext : ParserRuleContext {
		public SourceListModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceListMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterSourceListMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitSourceListMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceListMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceListModeContext sourceListMode() {
		SourceListModeContext _localctx = new SourceListModeContext(Context, State);
		EnterRule(_localctx, 90, RULE_sourceListMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 33285996544L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetListModeContext : ParserRuleContext {
		public TargetListModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetListMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterTargetListMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitTargetListMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTargetListMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetListModeContext targetListMode() {
		TargetListModeContext _localctx = new TargetListModeContext(Context, State);
		EnterRule(_localctx, 92, RULE_targetListMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 108447924224L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputModeContext : ParserRuleContext {
		public InputModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterInputMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitInputMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputModeContext inputMode() {
		InputModeContext _localctx = new InputModeContext(Context, State);
		EnterRule(_localctx, 94, RULE_inputMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			_la = TokenStream.LA(1);
			if ( !(_la==T__36 || _la==T__37) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelModeContext : ParserRuleContext {
		public ModelModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.EnterModelMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFmlMappingListener typedListener = listener as IFmlMappingListener;
			if (typedListener != null) typedListener.ExitModelMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFmlMappingVisitor<TResult> typedVisitor = visitor as IFmlMappingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelModeContext modelMode() {
		ModelModeContext _localctx = new ModelModeContext(Context, State);
		EnterRule(_localctx, 96, RULE_modelMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2061584302080L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,59,434,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,5,
		0,101,8,0,10,0,12,0,104,9,0,1,0,5,0,107,8,0,10,0,12,0,110,9,0,1,0,5,0,
		113,8,0,10,0,12,0,116,9,0,1,0,4,0,119,8,0,11,0,12,0,120,1,0,1,0,1,1,1,
		1,1,1,1,1,1,1,1,1,5,1,131,8,1,10,1,12,1,134,9,1,1,2,5,2,137,8,2,10,2,12,
		2,140,9,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,
		1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
		5,11,174,8,11,10,11,12,11,177,9,11,1,11,1,11,1,11,3,11,182,8,11,1,11,1,
		11,1,11,1,12,1,12,1,12,1,13,5,13,191,8,13,10,13,12,13,194,9,13,1,13,1,
		13,1,13,1,14,5,14,200,8,14,10,14,12,14,203,9,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,15,5,15,212,8,15,10,15,12,15,215,9,15,1,15,1,15,1,15,1,15,3,
		15,221,8,15,1,15,3,15,224,8,15,1,15,1,15,1,16,1,16,5,16,230,8,16,10,16,
		12,16,233,9,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,
		1,19,1,19,4,19,248,8,19,11,19,12,19,249,1,19,1,19,1,20,1,20,1,20,3,20,
		257,8,20,1,21,1,21,1,21,1,22,5,22,263,8,22,10,22,12,22,266,9,22,1,22,1,
		22,1,22,3,22,271,8,22,1,22,3,22,274,8,22,1,22,3,22,277,8,22,1,22,1,22,
		1,23,1,23,1,24,1,24,1,24,5,24,286,8,24,10,24,12,24,289,9,24,1,25,1,25,
		3,25,293,8,25,1,25,3,25,296,8,25,1,25,3,25,299,8,25,1,25,3,25,302,8,25,
		1,25,3,25,305,8,25,1,25,3,25,308,8,25,1,25,3,25,311,8,25,1,25,3,25,314,
		8,25,1,26,1,26,1,26,5,26,319,8,26,10,26,12,26,322,9,26,1,27,1,27,1,27,
		1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,5,30,336,8,30,10,30,12,30,
		339,9,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
		33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,
		36,5,36,368,8,36,10,36,12,36,371,9,36,1,36,3,36,374,8,36,1,36,3,36,377,
		8,36,1,37,1,37,1,37,3,37,382,8,37,1,37,3,37,385,8,37,1,37,3,37,388,8,37,
		1,37,1,37,3,37,392,8,37,3,37,394,8,37,1,38,1,38,1,38,3,38,399,8,38,1,39,
		1,39,1,39,3,39,404,8,39,1,39,1,39,1,40,1,40,1,40,5,40,411,8,40,10,40,12,
		40,414,9,40,1,41,1,41,3,41,418,8,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,
		1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,0,0,49,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
		68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,0,9,2,0,48,48,51,51,1,0,45,
		47,2,0,21,21,49,49,2,0,41,44,48,50,1,0,28,29,1,0,30,34,3,0,30,30,32,32,
		35,36,1,0,37,38,1,0,37,40,433,0,98,1,0,0,0,2,132,1,0,0,0,4,138,1,0,0,0,
		6,146,1,0,0,0,8,150,1,0,0,0,10,154,1,0,0,0,12,158,1,0,0,0,14,162,1,0,0,
		0,16,166,1,0,0,0,18,168,1,0,0,0,20,170,1,0,0,0,22,175,1,0,0,0,24,186,1,
		0,0,0,26,192,1,0,0,0,28,201,1,0,0,0,30,213,1,0,0,0,32,227,1,0,0,0,34,236,
		1,0,0,0,36,240,1,0,0,0,38,243,1,0,0,0,40,253,1,0,0,0,42,258,1,0,0,0,44,
		264,1,0,0,0,46,280,1,0,0,0,48,282,1,0,0,0,50,290,1,0,0,0,52,315,1,0,0,
		0,54,323,1,0,0,0,56,326,1,0,0,0,58,330,1,0,0,0,60,332,1,0,0,0,62,340,1,
		0,0,0,64,345,1,0,0,0,66,348,1,0,0,0,68,353,1,0,0,0,70,358,1,0,0,0,72,363,
		1,0,0,0,74,393,1,0,0,0,76,398,1,0,0,0,78,400,1,0,0,0,80,407,1,0,0,0,82,
		417,1,0,0,0,84,419,1,0,0,0,86,421,1,0,0,0,88,423,1,0,0,0,90,425,1,0,0,
		0,92,427,1,0,0,0,94,429,1,0,0,0,96,431,1,0,0,0,98,102,3,2,1,0,99,101,3,
		22,11,0,100,99,1,0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,
		103,108,1,0,0,0,104,102,1,0,0,0,105,107,3,26,13,0,106,105,1,0,0,0,107,
		110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,114,1,0,0,0,110,108,1,
		0,0,0,111,113,3,28,14,0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,
		0,114,115,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,117,119,3,30,15,0,118,
		117,1,0,0,0,119,120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,122,1,
		0,0,0,122,123,5,0,0,1,123,1,1,0,0,0,124,131,3,4,2,0,125,131,3,6,3,0,126,
		131,3,8,4,0,127,131,3,10,5,0,128,131,3,12,6,0,129,131,3,14,7,0,130,124,
		1,0,0,0,130,125,1,0,0,0,130,126,1,0,0,0,130,127,1,0,0,0,130,128,1,0,0,
		0,130,129,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,
		3,1,0,0,0,134,132,1,0,0,0,135,137,5,59,0,0,136,135,1,0,0,0,137,140,1,0,
		0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,
		142,5,1,0,0,142,143,3,18,9,0,143,144,5,2,0,0,144,145,3,20,10,0,145,5,1,
		0,0,0,146,147,5,52,0,0,147,148,5,2,0,0,148,149,3,16,8,0,149,7,1,0,0,0,
		150,151,5,53,0,0,151,152,5,2,0,0,152,153,3,16,8,0,153,9,1,0,0,0,154,155,
		5,54,0,0,155,156,5,2,0,0,156,157,3,16,8,0,157,11,1,0,0,0,158,159,5,55,
		0,0,159,160,5,2,0,0,160,161,3,16,8,0,161,13,1,0,0,0,162,163,5,56,0,0,163,
		164,5,2,0,0,164,165,3,16,8,0,165,15,1,0,0,0,166,167,5,51,0,0,167,17,1,
		0,0,0,168,169,7,0,0,0,169,19,1,0,0,0,170,171,7,1,0,0,171,21,1,0,0,0,172,
		174,5,59,0,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,
		0,0,0,176,178,1,0,0,0,177,175,1,0,0,0,178,179,5,3,0,0,179,181,3,18,9,0,
		180,182,3,24,12,0,181,180,1,0,0,0,181,182,1,0,0,0,182,183,1,0,0,0,183,
		184,5,4,0,0,184,185,3,96,48,0,185,23,1,0,0,0,186,187,5,5,0,0,187,188,3,
		20,10,0,188,25,1,0,0,0,189,191,5,59,0,0,190,189,1,0,0,0,191,194,1,0,0,
		0,192,190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,192,1,0,0,0,195,
		196,5,6,0,0,196,197,3,18,9,0,197,27,1,0,0,0,198,200,5,59,0,0,199,198,1,
		0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,0,
		203,201,1,0,0,0,204,205,5,7,0,0,205,206,5,45,0,0,206,207,5,2,0,0,207,208,
		3,84,42,0,208,209,5,8,0,0,209,29,1,0,0,0,210,212,5,59,0,0,211,210,1,0,
		0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,
		213,1,0,0,0,216,217,5,9,0,0,217,218,5,45,0,0,218,220,3,38,19,0,219,221,
		3,36,18,0,220,219,1,0,0,0,220,221,1,0,0,0,221,223,1,0,0,0,222,224,3,34,
		17,0,223,222,1,0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,226,3,32,16,0,
		226,31,1,0,0,0,227,231,5,10,0,0,228,230,3,44,22,0,229,228,1,0,0,0,230,
		233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,231,1,
		0,0,0,234,235,5,11,0,0,235,33,1,0,0,0,236,237,5,12,0,0,237,238,3,88,44,
		0,238,239,5,13,0,0,239,35,1,0,0,0,240,241,5,14,0,0,241,242,5,45,0,0,242,
		37,1,0,0,0,243,244,5,15,0,0,244,247,3,40,20,0,245,246,5,16,0,0,246,248,
		3,40,20,0,247,245,1,0,0,0,248,249,1,0,0,0,249,247,1,0,0,0,249,250,1,0,
		0,0,250,251,1,0,0,0,251,252,5,17,0,0,252,39,1,0,0,0,253,254,3,94,47,0,
		254,256,5,45,0,0,255,257,3,42,21,0,256,255,1,0,0,0,256,257,1,0,0,0,257,
		41,1,0,0,0,258,259,5,18,0,0,259,260,3,20,10,0,260,43,1,0,0,0,261,263,5,
		59,0,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,
		265,267,1,0,0,0,266,264,1,0,0,0,267,270,3,48,24,0,268,269,5,19,0,0,269,
		271,3,52,26,0,270,268,1,0,0,0,270,271,1,0,0,0,271,273,1,0,0,0,272,274,
		3,72,36,0,273,272,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,277,3,46,
		23,0,276,275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,279,5,8,0,0,279,
		45,1,0,0,0,280,281,5,45,0,0,281,47,1,0,0,0,282,287,3,50,25,0,283,284,5,
		16,0,0,284,286,3,50,25,0,285,283,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,
		0,287,288,1,0,0,0,288,49,1,0,0,0,289,287,1,0,0,0,290,292,3,60,30,0,291,
		293,3,54,27,0,292,291,1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,296,
		3,56,28,0,295,294,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,299,3,62,
		31,0,298,297,1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,302,3,90,45,0,
		301,300,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,305,3,64,32,0,304,
		303,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,306,308,3,66,33,0,307,306,
		1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,311,3,68,34,0,310,309,1,0,
		0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,314,3,70,35,0,313,312,1,0,0,0,
		313,314,1,0,0,0,314,51,1,0,0,0,315,320,3,74,37,0,316,317,5,16,0,0,317,
		319,3,74,37,0,318,316,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,
		1,0,0,0,321,53,1,0,0,0,322,320,1,0,0,0,323,324,5,18,0,0,324,325,3,20,10,
		0,325,55,1,0,0,0,326,327,5,49,0,0,327,328,5,20,0,0,328,329,3,58,29,0,329,
		57,1,0,0,0,330,331,7,2,0,0,331,59,1,0,0,0,332,337,3,20,10,0,333,334,5,
		22,0,0,334,336,3,20,10,0,335,333,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,
		0,337,338,1,0,0,0,338,61,1,0,0,0,339,337,1,0,0,0,340,341,5,23,0,0,341,
		342,5,15,0,0,342,343,3,84,42,0,343,344,5,17,0,0,344,63,1,0,0,0,345,346,
		5,4,0,0,346,347,3,20,10,0,347,65,1,0,0,0,348,349,5,24,0,0,349,350,5,15,
		0,0,350,351,3,84,42,0,351,352,5,17,0,0,352,67,1,0,0,0,353,354,5,25,0,0,
		354,355,5,15,0,0,355,356,3,84,42,0,356,357,5,17,0,0,357,69,1,0,0,0,358,
		359,5,26,0,0,359,360,5,15,0,0,360,361,3,84,42,0,361,362,5,17,0,0,362,71,
		1,0,0,0,363,376,5,27,0,0,364,369,3,78,39,0,365,366,5,16,0,0,366,368,3,
		78,39,0,367,365,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,
		0,370,373,1,0,0,0,371,369,1,0,0,0,372,374,3,32,16,0,373,372,1,0,0,0,373,
		374,1,0,0,0,374,377,1,0,0,0,375,377,3,32,16,0,376,364,1,0,0,0,376,375,
		1,0,0,0,377,73,1,0,0,0,378,381,3,60,30,0,379,380,5,2,0,0,380,382,3,76,
		38,0,381,379,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,385,3,64,32,0,
		384,383,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,388,3,92,46,0,387,
		386,1,0,0,0,387,388,1,0,0,0,388,394,1,0,0,0,389,391,3,78,39,0,390,392,
		3,64,32,0,391,390,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,378,1,0,
		0,0,393,389,1,0,0,0,394,75,1,0,0,0,395,399,3,86,43,0,396,399,3,60,30,0,
		397,399,3,78,39,0,398,395,1,0,0,0,398,396,1,0,0,0,398,397,1,0,0,0,399,
		77,1,0,0,0,400,401,3,20,10,0,401,403,5,15,0,0,402,404,3,80,40,0,403,402,
		1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,406,5,17,0,0,406,79,1,0,0,
		0,407,412,3,82,41,0,408,409,5,16,0,0,409,411,3,82,41,0,410,408,1,0,0,0,
		411,414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,81,1,0,0,0,414,412,
		1,0,0,0,415,418,3,86,43,0,416,418,5,45,0,0,417,415,1,0,0,0,417,416,1,0,
		0,0,418,83,1,0,0,0,419,420,3,86,43,0,420,85,1,0,0,0,421,422,7,3,0,0,422,
		87,1,0,0,0,423,424,7,4,0,0,424,89,1,0,0,0,425,426,7,5,0,0,426,91,1,0,0,
		0,427,428,7,6,0,0,428,93,1,0,0,0,429,430,7,7,0,0,430,95,1,0,0,0,431,432,
		7,8,0,0,432,97,1,0,0,0,44,102,108,114,120,130,132,138,175,181,192,201,
		213,220,223,231,249,256,264,270,273,276,287,292,295,298,301,304,307,310,
		313,320,337,369,373,376,381,384,387,391,393,398,403,412,417
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
