// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceContact>))]
  public class ConformanceContact : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The name of an individual to contact regarding the conformance.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if ((Telecom != null) && (Telecom.Count != 0))
      {
        writer.WritePropertyName("telecom");
        writer.WriteStartArray();

        foreach (ContactPoint valTelecom in Telecom)
        {
          valTelecom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "telecom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Telecom = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContactPoint objTelecom = new fhirCsR2.Models.ContactPoint();
            objTelecom.DeserializeJson(ref reader, options);
            Telecom.Add(objTelecom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Telecom.Count == 0)
          {
            Telecom = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceSoftware>))]
  public class ConformanceSoftware : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Name software is known by.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Date this version of the software released.
    /// </summary>
    public string ReleaseDate { get; set; }
    /// <summary>
    /// Extension container element for ReleaseDate
    /// </summary>
    public Element _ReleaseDate { get; set; }
    /// <summary>
    /// The version identifier for the software covered by this statement.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ReleaseDate))
      {
        writer.WriteString("releaseDate", (string)ReleaseDate!);
      }

      if (_ReleaseDate != null)
      {
        writer.WritePropertyName("_releaseDate");
        _ReleaseDate.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "releaseDate":
          ReleaseDate = reader.GetString();
          break;

        case "_releaseDate":
          _ReleaseDate = new fhirCsR2.Models.Element();
          _ReleaseDate.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR2.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceImplementation>))]
  public class ConformanceImplementation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Information about the specific installation that this conformance statement relates to.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Certificates associated with security profiles.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceRestSecurityCertificate>))]
  public class ConformanceRestSecurityCertificate : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Actual certificate.
    /// </summary>
    public byte[] Blob { get; set; }
    /// <summary>
    /// Mime type for certificate.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (Blob != null)
      {
        writer.WriteString("blob", System.Convert.ToBase64String(Blob));
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "blob":
          Blob = System.Convert.FromBase64String(reader.GetString());
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR2.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about security implementation from an interface perspective - what a client needs to know.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceRestSecurity>))]
  public class ConformanceRestSecurity : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Certificates associated with security profiles.
    /// </summary>
    public List<ConformanceRestSecurityCertificate> Certificate { get; set; }
    /// <summary>
    /// Server adds CORS headers when responding to requests - this enables javascript applications to use the server.
    /// </summary>
    public bool? Cors { get; set; }
    /// <summary>
    /// Extension container element for Cors
    /// </summary>
    public Element _Cors { get; set; }
    /// <summary>
    /// General description of how security works.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Types of security services are supported/required by the system.
    /// </summary>
    public List<CodeableConcept> Service { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Cors != null)
      {
        writer.WriteBoolean("cors", (bool)Cors!);
      }

      if (_Cors != null)
      {
        writer.WritePropertyName("_cors");
        _Cors.SerializeJson(writer, options);
      }

      if ((Service != null) && (Service.Count != 0))
      {
        writer.WritePropertyName("service");
        writer.WriteStartArray();

        foreach (CodeableConcept valService in Service)
        {
          valService.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Certificate != null) && (Certificate.Count != 0))
      {
        writer.WritePropertyName("certificate");
        writer.WriteStartArray();

        foreach (ConformanceRestSecurityCertificate valCertificate in Certificate)
        {
          valCertificate.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "certificate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Certificate = new List<ConformanceRestSecurityCertificate>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConformanceRestSecurityCertificate objCertificate = new fhirCsR2.Models.ConformanceRestSecurityCertificate();
            objCertificate.DeserializeJson(ref reader, options);
            Certificate.Add(objCertificate);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Certificate.Count == 0)
          {
            Certificate = null;
          }

          break;

        case "cors":
          Cors = reader.GetBoolean();
          break;

        case "_cors":
          _Cors = new fhirCsR2.Models.Element();
          _Cors.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "service":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Service = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objService = new fhirCsR2.Models.CodeableConcept();
            objService.DeserializeJson(ref reader, options);
            Service.Add(objService);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Service.Count == 0)
          {
            Service = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Identifies a restful operation supported by the solution.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceRestResourceInteraction>))]
  public class ConformanceRestResourceInteraction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Coded identifier of the operation, supported by the system resource.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// REST allows a degree of variability in the implementation of RESTful solutions that is useful for exchange partners to be aware of.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR2.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR2.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Conformance.rest.resource.interaction.code field
  /// </summary>
  public static class ConformanceRestResourceInteractionCodeCodes {
    public const string READ = "read";
    public const string VREAD = "vread";
    public const string UPDATE = "update";
    public const string DELETE = "delete";
    public const string HISTORY_INSTANCE = "history-instance";
    public const string VALIDATE = "validate";
    public const string HISTORY_TYPE = "history-type";
    public const string CREATE = "create";
    public const string SEARCH_TYPE = "search-type";
    public static HashSet<string> Values = new HashSet<string>() {
      "read",
      "vread",
      "update",
      "delete",
      "history-instance",
      "validate",
      "history-type",
      "create",
      "search-type",
    };
  }
  /// <summary>
  /// Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceRestResourceSearchParam>))]
  public class ConformanceRestResourceSearchParam : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference, and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from Conformance.rest.resource.searchParam.name on the target resource type.
    /// </summary>
    public List<string> Chain { get; set; }
    /// <summary>
    /// Extension container element for Chain
    /// </summary>
    public List<Element> _Chain { get; set; }
    /// <summary>
    /// An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [[[SearchParameter.url]]]).
    /// </summary>
    public string Definition { get; set; }
    /// <summary>
    /// Extension container element for Definition
    /// </summary>
    public Element _Definition { get; set; }
    /// <summary>
    /// This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// A modifier supported for the search parameter.
    /// </summary>
    public List<string> Modifier { get; set; }
    /// <summary>
    /// Extension container element for Modifier
    /// </summary>
    public List<Element> _Modifier { get; set; }
    /// <summary>
    /// The name of the search parameter used in the interface.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Types of resource (if a resource is referenced).
    /// </summary>
    public List<string> Target { get; set; }
    /// <summary>
    /// Extension container element for Target
    /// </summary>
    public List<Element> _Target { get; set; }
    /// <summary>
    /// The type of value a search parameter refers to, and how the content is interpreted.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Definition))
      {
        writer.WriteString("definition", (string)Definition!);
      }

      if (_Definition != null)
      {
        writer.WritePropertyName("_definition");
        _Definition.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if ((Target != null) && (Target.Count != 0))
      {
        writer.WritePropertyName("target");
        writer.WriteStartArray();

        foreach (string valTarget in Target)
        {
          writer.WriteStringValue(valTarget);
        }

        writer.WriteEndArray();
      }

      if ((_Target != null) && (_Target.Count != 0))
      {
        writer.WritePropertyName("_target");
        writer.WriteStartArray();

        foreach (Element val_Target in _Target)
        {
          val_Target.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (string valModifier in Modifier)
        {
          writer.WriteStringValue(valModifier);
        }

        writer.WriteEndArray();
      }

      if ((_Modifier != null) && (_Modifier.Count != 0))
      {
        writer.WritePropertyName("_modifier");
        writer.WriteStartArray();

        foreach (Element val_Modifier in _Modifier)
        {
          val_Modifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Chain != null) && (Chain.Count != 0))
      {
        writer.WritePropertyName("chain");
        writer.WriteStartArray();

        foreach (string valChain in Chain)
        {
          writer.WriteStringValue(valChain);
        }

        writer.WriteEndArray();
      }

      if ((_Chain != null) && (_Chain.Count != 0))
      {
        writer.WritePropertyName("_chain");
        writer.WriteStartArray();

        foreach (Element val_Chain in _Chain)
        {
          val_Chain.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "chain":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Chain = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Chain.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Chain.Count == 0)
          {
            Chain = null;
          }

          break;

        case "_chain":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Chain = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Chain = new fhirCsR2.Models.Element();
            obj_Chain.DeserializeJson(ref reader, options);
            _Chain.Add(obj_Chain);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Chain.Count == 0)
          {
            _Chain = null;
          }

          break;

        case "definition":
          Definition = reader.GetString();
          break;

        case "_definition":
          _Definition = new fhirCsR2.Models.Element();
          _Definition.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR2.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Modifier.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "_modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Modifier = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Modifier = new fhirCsR2.Models.Element();
            obj_Modifier.DeserializeJson(ref reader, options);
            _Modifier.Add(obj_Modifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Modifier.Count == 0)
          {
            _Modifier = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "target":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Target = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Target.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Target.Count == 0)
          {
            Target = null;
          }

          break;

        case "_target":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Target = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Target = new fhirCsR2.Models.Element();
            obj_Target.DeserializeJson(ref reader, options);
            _Target.Add(obj_Target);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Target.Count == 0)
          {
            _Target = null;
          }

          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR2.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Conformance.rest.resource.searchParam.modifier field
  /// </summary>
  public static class ConformanceRestResourceSearchParamModifierCodes {
    public const string MISSING = "missing";
    public const string EXACT = "exact";
    public const string CONTAINS = "contains";
    public const string NOT = "not";
    public const string TEXT = "text";
    public const string VAL_IN = "in";
    public const string NOT_IN = "not-in";
    public const string BELOW = "below";
    public const string ABOVE = "above";
    public const string TYPE = "type";
    public static HashSet<string> Values = new HashSet<string>() {
      "missing",
      "exact",
      "contains",
      "not",
      "text",
      "in",
      "not-in",
      "below",
      "above",
      "type",
    };
  }
  /// <summary>
  /// Code Values for the Conformance.rest.resource.searchParam.type field
  /// </summary>
  public static class ConformanceRestResourceSearchParamTypeCodes {
    public const string NUMBER = "number";
    public const string DATE = "date";
    public const string VAL_STRING = "string";
    public const string TOKEN = "token";
    public const string REFERENCE = "reference";
    public const string COMPOSITE = "composite";
    public const string QUANTITY = "quantity";
    public const string URI = "uri";
    public static HashSet<string> Values = new HashSet<string>() {
      "number",
      "date",
      "string",
      "token",
      "reference",
      "composite",
      "quantity",
      "uri",
    };
  }
  /// <summary>
  /// A specification of the restful capabilities of the solution for a specific resource type.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceRestResource>))]
  public class ConformanceRestResource : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A flag that indicates that the server supports conditional create.
    /// </summary>
    public bool? ConditionalCreate { get; set; }
    /// <summary>
    /// Extension container element for ConditionalCreate
    /// </summary>
    public Element _ConditionalCreate { get; set; }
    /// <summary>
    /// A code that indicates how the server supports conditional delete.
    /// </summary>
    public string ConditionalDelete { get; set; }
    /// <summary>
    /// Extension container element for ConditionalDelete
    /// </summary>
    public Element _ConditionalDelete { get; set; }
    /// <summary>
    /// A flag that indicates that the server supports conditional update.
    /// </summary>
    public bool? ConditionalUpdate { get; set; }
    /// <summary>
    /// Extension container element for ConditionalUpdate
    /// </summary>
    public Element _ConditionalUpdate { get; set; }
    /// <summary>
    /// Identifies a restful operation supported by the solution.
    /// </summary>
    public List<ConformanceRestResourceInteraction> Interaction { get; set; }
    /// <summary>
    /// A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles]{profiling.html#profile-uses}.
    /// </summary>
    public Reference Profile { get; set; }
    /// <summary>
    /// A flag for whether the server is able to return past versions as part of the vRead operation.
    /// </summary>
    public bool? ReadHistory { get; set; }
    /// <summary>
    /// Extension container element for ReadHistory
    /// </summary>
    public Element _ReadHistory { get; set; }
    /// <summary>
    /// A list of _include values supported by the server.
    /// </summary>
    public List<string> SearchInclude { get; set; }
    /// <summary>
    /// Extension container element for SearchInclude
    /// </summary>
    public List<Element> _SearchInclude { get; set; }
    /// <summary>
    /// Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
    /// </summary>
    public List<ConformanceRestResourceSearchParam> SearchParam { get; set; }
    /// <summary>
    /// A list of _revinclude (reverse include) values supported by the server.
    /// </summary>
    public List<string> SearchRevInclude { get; set; }
    /// <summary>
    /// Extension container element for SearchRevInclude
    /// </summary>
    public List<Element> _SearchRevInclude { get; set; }
    /// <summary>
    /// A type of resource exposed via the restful interface.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// A flag to indicate that the server allows or needs to allow the client to create new identities on the server (e.g. that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
    /// </summary>
    public bool? UpdateCreate { get; set; }
    /// <summary>
    /// Extension container element for UpdateCreate
    /// </summary>
    public Element _UpdateCreate { get; set; }
    /// <summary>
    /// This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
    /// </summary>
    public string Versioning { get; set; }
    /// <summary>
    /// Extension container element for Versioning
    /// </summary>
    public Element _Versioning { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (Profile != null)
      {
        writer.WritePropertyName("profile");
        Profile.SerializeJson(writer, options);
      }

      if ((Interaction != null) && (Interaction.Count != 0))
      {
        writer.WritePropertyName("interaction");
        writer.WriteStartArray();

        foreach (ConformanceRestResourceInteraction valInteraction in Interaction)
        {
          valInteraction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Versioning))
      {
        writer.WriteString("versioning", (string)Versioning!);
      }

      if (_Versioning != null)
      {
        writer.WritePropertyName("_versioning");
        _Versioning.SerializeJson(writer, options);
      }

      if (ReadHistory != null)
      {
        writer.WriteBoolean("readHistory", (bool)ReadHistory!);
      }

      if (_ReadHistory != null)
      {
        writer.WritePropertyName("_readHistory");
        _ReadHistory.SerializeJson(writer, options);
      }

      if (UpdateCreate != null)
      {
        writer.WriteBoolean("updateCreate", (bool)UpdateCreate!);
      }

      if (_UpdateCreate != null)
      {
        writer.WritePropertyName("_updateCreate");
        _UpdateCreate.SerializeJson(writer, options);
      }

      if (ConditionalCreate != null)
      {
        writer.WriteBoolean("conditionalCreate", (bool)ConditionalCreate!);
      }

      if (_ConditionalCreate != null)
      {
        writer.WritePropertyName("_conditionalCreate");
        _ConditionalCreate.SerializeJson(writer, options);
      }

      if (ConditionalUpdate != null)
      {
        writer.WriteBoolean("conditionalUpdate", (bool)ConditionalUpdate!);
      }

      if (_ConditionalUpdate != null)
      {
        writer.WritePropertyName("_conditionalUpdate");
        _ConditionalUpdate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ConditionalDelete))
      {
        writer.WriteString("conditionalDelete", (string)ConditionalDelete!);
      }

      if (_ConditionalDelete != null)
      {
        writer.WritePropertyName("_conditionalDelete");
        _ConditionalDelete.SerializeJson(writer, options);
      }

      if ((SearchInclude != null) && (SearchInclude.Count != 0))
      {
        writer.WritePropertyName("searchInclude");
        writer.WriteStartArray();

        foreach (string valSearchInclude in SearchInclude)
        {
          writer.WriteStringValue(valSearchInclude);
        }

        writer.WriteEndArray();
      }

      if ((_SearchInclude != null) && (_SearchInclude.Count != 0))
      {
        writer.WritePropertyName("_searchInclude");
        writer.WriteStartArray();

        foreach (Element val_SearchInclude in _SearchInclude)
        {
          val_SearchInclude.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SearchRevInclude != null) && (SearchRevInclude.Count != 0))
      {
        writer.WritePropertyName("searchRevInclude");
        writer.WriteStartArray();

        foreach (string valSearchRevInclude in SearchRevInclude)
        {
          writer.WriteStringValue(valSearchRevInclude);
        }

        writer.WriteEndArray();
      }

      if ((_SearchRevInclude != null) && (_SearchRevInclude.Count != 0))
      {
        writer.WritePropertyName("_searchRevInclude");
        writer.WriteStartArray();

        foreach (Element val_SearchRevInclude in _SearchRevInclude)
        {
          val_SearchRevInclude.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SearchParam != null) && (SearchParam.Count != 0))
      {
        writer.WritePropertyName("searchParam");
        writer.WriteStartArray();

        foreach (ConformanceRestResourceSearchParam valSearchParam in SearchParam)
        {
          valSearchParam.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "conditionalCreate":
          ConditionalCreate = reader.GetBoolean();
          break;

        case "_conditionalCreate":
          _ConditionalCreate = new fhirCsR2.Models.Element();
          _ConditionalCreate.DeserializeJson(ref reader, options);
          break;

        case "conditionalDelete":
          ConditionalDelete = reader.GetString();
          break;

        case "_conditionalDelete":
          _ConditionalDelete = new fhirCsR2.Models.Element();
          _ConditionalDelete.DeserializeJson(ref reader, options);
          break;

        case "conditionalUpdate":
          ConditionalUpdate = reader.GetBoolean();
          break;

        case "_conditionalUpdate":
          _ConditionalUpdate = new fhirCsR2.Models.Element();
          _ConditionalUpdate.DeserializeJson(ref reader, options);
          break;

        case "interaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Interaction = new List<ConformanceRestResourceInteraction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConformanceRestResourceInteraction objInteraction = new fhirCsR2.Models.ConformanceRestResourceInteraction();
            objInteraction.DeserializeJson(ref reader, options);
            Interaction.Add(objInteraction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Interaction.Count == 0)
          {
            Interaction = null;
          }

          break;

        case "profile":
          Profile = new fhirCsR2.Models.Reference();
          Profile.DeserializeJson(ref reader, options);
          break;

        case "readHistory":
          ReadHistory = reader.GetBoolean();
          break;

        case "_readHistory":
          _ReadHistory = new fhirCsR2.Models.Element();
          _ReadHistory.DeserializeJson(ref reader, options);
          break;

        case "searchInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SearchInclude = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SearchInclude.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SearchInclude.Count == 0)
          {
            SearchInclude = null;
          }

          break;

        case "_searchInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _SearchInclude = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_SearchInclude = new fhirCsR2.Models.Element();
            obj_SearchInclude.DeserializeJson(ref reader, options);
            _SearchInclude.Add(obj_SearchInclude);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_SearchInclude.Count == 0)
          {
            _SearchInclude = null;
          }

          break;

        case "searchParam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SearchParam = new List<ConformanceRestResourceSearchParam>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConformanceRestResourceSearchParam objSearchParam = new fhirCsR2.Models.ConformanceRestResourceSearchParam();
            objSearchParam.DeserializeJson(ref reader, options);
            SearchParam.Add(objSearchParam);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SearchParam.Count == 0)
          {
            SearchParam = null;
          }

          break;

        case "searchRevInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SearchRevInclude = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SearchRevInclude.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SearchRevInclude.Count == 0)
          {
            SearchRevInclude = null;
          }

          break;

        case "_searchRevInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _SearchRevInclude = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_SearchRevInclude = new fhirCsR2.Models.Element();
            obj_SearchRevInclude.DeserializeJson(ref reader, options);
            _SearchRevInclude.Add(obj_SearchRevInclude);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_SearchRevInclude.Count == 0)
          {
            _SearchRevInclude = null;
          }

          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR2.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "updateCreate":
          UpdateCreate = reader.GetBoolean();
          break;

        case "_updateCreate":
          _UpdateCreate = new fhirCsR2.Models.Element();
          _UpdateCreate.DeserializeJson(ref reader, options);
          break;

        case "versioning":
          Versioning = reader.GetString();
          break;

        case "_versioning":
          _Versioning = new fhirCsR2.Models.Element();
          _Versioning.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Conformance.rest.resource.conditionalDelete field
  /// </summary>
  public static class ConformanceRestResourceConditionalDeleteCodes {
    public const string NOT_SUPPORTED = "not-supported";
    public const string SINGLE = "single";
    public const string MULTIPLE = "multiple";
    public static HashSet<string> Values = new HashSet<string>() {
      "not-supported",
      "single",
      "multiple",
    };
  }
  /// <summary>
  /// Code Values for the Conformance.rest.resource.versioning field
  /// </summary>
  public static class ConformanceRestResourceVersioningCodes {
    public const string NO_VERSION = "no-version";
    public const string VERSIONED = "versioned";
    public const string VERSIONED_UPDATE = "versioned-update";
    public static HashSet<string> Values = new HashSet<string>() {
      "no-version",
      "versioned",
      "versioned-update",
    };
  }
  /// <summary>
  /// A specification of restful operations supported by the system.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceRestInteraction>))]
  public class ConformanceRestInteraction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A coded identifier of the operation, supported by the system.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR2.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR2.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Conformance.rest.interaction.code field
  /// </summary>
  public static class ConformanceRestInteractionCodeCodes {
    public const string TRANSACTION = "transaction";
    public const string SEARCH_SYSTEM = "search-system";
    public const string HISTORY_SYSTEM = "history-system";
    public static HashSet<string> Values = new HashSet<string>() {
      "transaction",
      "search-system",
      "history-system",
    };
  }
  /// <summary>
  /// Definition of an operation or a named query and with its parameters and their meaning and type.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceRestOperation>))]
  public class ConformanceRestOperation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Where the formal definition can be found.
    /// </summary>
    public Reference Definition { get; set; }
    /// <summary>
    /// The name of a query, which is used in the _query parameter when the query is called.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (Definition != null)
      {
        writer.WritePropertyName("definition");
        Definition.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "definition":
          Definition = new fhirCsR2.Models.Reference();
          Definition.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A definition of the restful capabilities of the solution, if any.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceRest>))]
  public class ConformanceRest : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An absolute URI which is a reference to the definition of a compartment hosted by the system.
    /// </summary>
    public List<string> Compartment { get; set; }
    /// <summary>
    /// Extension container element for Compartment
    /// </summary>
    public List<Element> _Compartment { get; set; }
    /// <summary>
    /// Information about the system's restful capabilities that apply across all applications, such as security.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// A specification of restful operations supported by the system.
    /// </summary>
    public List<ConformanceRestInteraction> Interaction { get; set; }
    /// <summary>
    /// Identifies whether this portion of the statement is describing ability to initiate or receive restful operations.
    /// </summary>
    public string Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public Element _Mode { get; set; }
    /// <summary>
    /// Definition of an operation or a named query and with its parameters and their meaning and type.
    /// </summary>
    public List<ConformanceRestOperation> Operation { get; set; }
    /// <summary>
    /// A specification of the restful capabilities of the solution for a specific resource type.
    /// </summary>
    public List<ConformanceRestResource> Resource { get; set; }
    /// <summary>
    /// Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
    /// </summary>
    public List<ConformanceRestResourceSearchParam> SearchParam { get; set; }
    /// <summary>
    /// Information about security implementation from an interface perspective - what a client needs to know.
    /// </summary>
    public ConformanceRestSecurity Security { get; set; }
    /// <summary>
    /// A code that indicates how transactions are supported.
    /// </summary>
    public string TransactionMode { get; set; }
    /// <summary>
    /// Extension container element for TransactionMode
    /// </summary>
    public Element _TransactionMode { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Mode))
      {
        writer.WriteString("mode", (string)Mode!);
      }

      if (_Mode != null)
      {
        writer.WritePropertyName("_mode");
        _Mode.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if (Security != null)
      {
        writer.WritePropertyName("security");
        Security.SerializeJson(writer, options);
      }

      if ((Resource != null) && (Resource.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();

        foreach (ConformanceRestResource valResource in Resource)
        {
          valResource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Interaction != null) && (Interaction.Count != 0))
      {
        writer.WritePropertyName("interaction");
        writer.WriteStartArray();

        foreach (ConformanceRestInteraction valInteraction in Interaction)
        {
          valInteraction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(TransactionMode))
      {
        writer.WriteString("transactionMode", (string)TransactionMode!);
      }

      if (_TransactionMode != null)
      {
        writer.WritePropertyName("_transactionMode");
        _TransactionMode.SerializeJson(writer, options);
      }

      if ((SearchParam != null) && (SearchParam.Count != 0))
      {
        writer.WritePropertyName("searchParam");
        writer.WriteStartArray();

        foreach (ConformanceRestResourceSearchParam valSearchParam in SearchParam)
        {
          valSearchParam.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Operation != null) && (Operation.Count != 0))
      {
        writer.WritePropertyName("operation");
        writer.WriteStartArray();

        foreach (ConformanceRestOperation valOperation in Operation)
        {
          valOperation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Compartment != null) && (Compartment.Count != 0))
      {
        writer.WritePropertyName("compartment");
        writer.WriteStartArray();

        foreach (string valCompartment in Compartment)
        {
          writer.WriteStringValue(valCompartment);
        }

        writer.WriteEndArray();
      }

      if ((_Compartment != null) && (_Compartment.Count != 0))
      {
        writer.WritePropertyName("_compartment");
        writer.WriteStartArray();

        foreach (Element val_Compartment in _Compartment)
        {
          val_Compartment.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "compartment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Compartment = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Compartment.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Compartment.Count == 0)
          {
            Compartment = null;
          }

          break;

        case "_compartment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Compartment = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Compartment = new fhirCsR2.Models.Element();
            obj_Compartment.DeserializeJson(ref reader, options);
            _Compartment.Add(obj_Compartment);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Compartment.Count == 0)
          {
            _Compartment = null;
          }

          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR2.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "interaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Interaction = new List<ConformanceRestInteraction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConformanceRestInteraction objInteraction = new fhirCsR2.Models.ConformanceRestInteraction();
            objInteraction.DeserializeJson(ref reader, options);
            Interaction.Add(objInteraction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Interaction.Count == 0)
          {
            Interaction = null;
          }

          break;

        case "mode":
          Mode = reader.GetString();
          break;

        case "_mode":
          _Mode = new fhirCsR2.Models.Element();
          _Mode.DeserializeJson(ref reader, options);
          break;

        case "operation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Operation = new List<ConformanceRestOperation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConformanceRestOperation objOperation = new fhirCsR2.Models.ConformanceRestOperation();
            objOperation.DeserializeJson(ref reader, options);
            Operation.Add(objOperation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Operation.Count == 0)
          {
            Operation = null;
          }

          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Resource = new List<ConformanceRestResource>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConformanceRestResource objResource = new fhirCsR2.Models.ConformanceRestResource();
            objResource.DeserializeJson(ref reader, options);
            Resource.Add(objResource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Resource.Count == 0)
          {
            Resource = null;
          }

          break;

        case "searchParam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SearchParam = new List<ConformanceRestResourceSearchParam>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConformanceRestResourceSearchParam objSearchParam = new fhirCsR2.Models.ConformanceRestResourceSearchParam();
            objSearchParam.DeserializeJson(ref reader, options);
            SearchParam.Add(objSearchParam);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SearchParam.Count == 0)
          {
            SearchParam = null;
          }

          break;

        case "security":
          Security = new fhirCsR2.Models.ConformanceRestSecurity();
          Security.DeserializeJson(ref reader, options);
          break;

        case "transactionMode":
          TransactionMode = reader.GetString();
          break;

        case "_transactionMode":
          _TransactionMode = new fhirCsR2.Models.Element();
          _TransactionMode.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Conformance.rest.mode field
  /// </summary>
  public static class ConformanceRestModeCodes {
    public const string CLIENT = "client";
    public const string SERVER = "server";
    public static HashSet<string> Values = new HashSet<string>() {
      "client",
      "server",
    };
  }
  /// <summary>
  /// Code Values for the Conformance.rest.transactionMode field
  /// </summary>
  public static class ConformanceRestTransactionModeCodes {
    public const string NOT_SUPPORTED = "not-supported";
    public const string BATCH = "batch";
    public const string TRANSACTION = "transaction";
    public const string BOTH = "both";
    public static HashSet<string> Values = new HashSet<string>() {
      "not-supported",
      "batch",
      "transaction",
      "both",
    };
  }
  /// <summary>
  /// An endpoint (network accessible address) to which messages and/or replies are to be sent.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceMessagingEndpoint>))]
  public class ConformanceMessagingEndpoint : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The network address of the end-point. For solutions that do not use network addresses for routing, it can be just an identifier.
    /// </summary>
    public string Address { get; set; }
    /// <summary>
    /// Extension container element for Address
    /// </summary>
    public Element _Address { get; set; }
    /// <summary>
    /// A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
    /// </summary>
    public Coding Protocol { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Protocol != null)
      {
        writer.WritePropertyName("protocol");
        Protocol.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Address))
      {
        writer.WriteString("address", (string)Address!);
      }

      if (_Address != null)
      {
        writer.WritePropertyName("_address");
        _Address.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "address":
          Address = reader.GetString();
          break;

        case "_address":
          _Address = new fhirCsR2.Models.Element();
          _Address.DeserializeJson(ref reader, options);
          break;

        case "protocol":
          Protocol = new fhirCsR2.Models.Coding();
          Protocol.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A description of the solution's support for an event at this end-point.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceMessagingEvent>))]
  public class ConformanceMessagingEvent : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The impact of the content of the message.
    /// </summary>
    public string Category { get; set; }
    /// <summary>
    /// Extension container element for Category
    /// </summary>
    public Element _Category { get; set; }
    /// <summary>
    /// A coded identifier of a supported messaging event.
    /// </summary>
    public Coding Code { get; set; }
    /// <summary>
    /// Guidance on how this event is handled, such as internal system trigger points, business rules, etc.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// A resource associated with the event.  This is the resource that defines the event.
    /// </summary>
    public string Focus { get; set; }
    /// <summary>
    /// Extension container element for Focus
    /// </summary>
    public Element _Focus { get; set; }
    /// <summary>
    /// The mode of this event declaration - whether application is sender or receiver.
    /// </summary>
    public string Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public Element _Mode { get; set; }
    /// <summary>
    /// Information about the request for this event.
    /// </summary>
    public Reference Request { get; set; }
    /// <summary>
    /// Information about the response for this event.
    /// </summary>
    public Reference Response { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Category))
      {
        writer.WriteString("category", (string)Category!);
      }

      if (_Category != null)
      {
        writer.WritePropertyName("_category");
        _Category.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Mode))
      {
        writer.WriteString("mode", (string)Mode!);
      }

      if (_Mode != null)
      {
        writer.WritePropertyName("_mode");
        _Mode.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Focus))
      {
        writer.WriteString("focus", (string)Focus!);
      }

      if (_Focus != null)
      {
        writer.WritePropertyName("_focus");
        _Focus.SerializeJson(writer, options);
      }

      if (Request != null)
      {
        writer.WritePropertyName("request");
        Request.SerializeJson(writer, options);
      }

      if (Response != null)
      {
        writer.WritePropertyName("response");
        Response.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = reader.GetString();
          break;

        case "_category":
          _Category = new fhirCsR2.Models.Element();
          _Category.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR2.Models.Coding();
          Code.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR2.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "focus":
          Focus = reader.GetString();
          break;

        case "_focus":
          _Focus = new fhirCsR2.Models.Element();
          _Focus.DeserializeJson(ref reader, options);
          break;

        case "mode":
          Mode = reader.GetString();
          break;

        case "_mode":
          _Mode = new fhirCsR2.Models.Element();
          _Mode.DeserializeJson(ref reader, options);
          break;

        case "request":
          Request = new fhirCsR2.Models.Reference();
          Request.DeserializeJson(ref reader, options);
          break;

        case "response":
          Response = new fhirCsR2.Models.Reference();
          Response.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Conformance.messaging.event.category field
  /// </summary>
  public static class ConformanceMessagingEventCategoryCodes {
    public const string CONSEQUENCE = "Consequence";
    public const string CURRENCY = "Currency";
    public const string NOTIFICATION = "Notification";
    public static HashSet<string> Values = new HashSet<string>() {
      "Consequence",
      "Currency",
      "Notification",
    };
  }
  /// <summary>
  /// Code Values for the Conformance.messaging.event.mode field
  /// </summary>
  public static class ConformanceMessagingEventModeCodes {
    public const string SENDER = "sender";
    public const string RECEIVER = "receiver";
    public static HashSet<string> Values = new HashSet<string>() {
      "sender",
      "receiver",
    };
  }
  /// <summary>
  /// A description of the messaging capabilities of the solution.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceMessaging>))]
  public class ConformanceMessaging : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the conformance statement.  For example, process for becoming an authorized messaging exchange partner.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// An endpoint (network accessible address) to which messages and/or replies are to be sent.
    /// </summary>
    public List<ConformanceMessagingEndpoint> Endpoint { get; set; }
    /// <summary>
    /// A description of the solution's support for an event at this end-point.
    /// </summary>
    public List<ConformanceMessagingEvent> Event { get; set; }
    /// <summary>
    /// Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
    /// </summary>
    public uint? ReliableCache { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Endpoint != null) && (Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();

        foreach (ConformanceMessagingEndpoint valEndpoint in Endpoint)
        {
          valEndpoint.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ReliableCache != null)
      {
        writer.WriteNumber("reliableCache", (uint)ReliableCache!);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if ((Event != null) && (Event.Count != 0))
      {
        writer.WritePropertyName("event");
        writer.WriteStartArray();

        foreach (ConformanceMessagingEvent valEvent in Event)
        {
          valEvent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR2.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Endpoint = new List<ConformanceMessagingEndpoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConformanceMessagingEndpoint objEndpoint = new fhirCsR2.Models.ConformanceMessagingEndpoint();
            objEndpoint.DeserializeJson(ref reader, options);
            Endpoint.Add(objEndpoint);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Endpoint.Count == 0)
          {
            Endpoint = null;
          }

          break;

        case "event":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Event = new List<ConformanceMessagingEvent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConformanceMessagingEvent objEvent = new fhirCsR2.Models.ConformanceMessagingEvent();
            objEvent.DeserializeJson(ref reader, options);
            Event.Add(objEvent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Event.Count == 0)
          {
            Event = null;
          }

          break;

        case "reliableCache":
          ReliableCache = reader.GetUInt32();
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A document definition.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConformanceDocument>))]
  public class ConformanceDocument : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A description of how the application supports or uses the specified document profile.  For example, when are documents created, what action is taken with consumed documents, etc.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// Mode of this document declaration - whether application is producer or consumer.
    /// </summary>
    public string Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public Element _Mode { get; set; }
    /// <summary>
    /// A constraint on a resource used in the document.
    /// </summary>
    public Reference Profile { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Mode))
      {
        writer.WriteString("mode", (string)Mode!);
      }

      if (_Mode != null)
      {
        writer.WritePropertyName("_mode");
        _Mode.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if (Profile != null)
      {
        writer.WritePropertyName("profile");
        Profile.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR2.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "mode":
          Mode = reader.GetString();
          break;

        case "_mode":
          _Mode = new fhirCsR2.Models.Element();
          _Mode.DeserializeJson(ref reader, options);
          break;

        case "profile":
          Profile = new fhirCsR2.Models.Reference();
          Profile.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Conformance.document.mode field
  /// </summary>
  public static class ConformanceDocumentModeCodes {
    public const string PRODUCER = "producer";
    public const string CONSUMER = "consumer";
    public static HashSet<string> Values = new HashSet<string>() {
      "producer",
      "consumer",
    };
  }
  /// <summary>
  /// A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<Conformance>))]
  public class Conformance : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Conformance";
    /// <summary>
    /// A code that indicates whether the application accepts unknown elements or extensions when reading resources.
    /// </summary>
    public string AcceptUnknown { get; set; }
    /// <summary>
    /// Extension container element for AcceptUnknown
    /// </summary>
    public Element _AcceptUnknown { get; set; }
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    public List<ConformanceContact> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the conformance statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the system described by the conformance statement.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// The date  (and optionally time) when the conformance statement was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the conformance statement changes.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// A free text natural language description of the conformance statement and its use. Typically, this is used when the conformance statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// A document definition.
    /// </summary>
    public List<ConformanceDocument> Document { get; set; }
    /// <summary>
    /// A flag to indicate that this conformance statement is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Extension container element for Experimental
    /// </summary>
    public Element _Experimental { get; set; }
    /// <summary>
    /// The version of the FHIR specification on which this conformance statement is based.
    /// </summary>
    public string FhirVersion { get; set; }
    /// <summary>
    /// Extension container element for FhirVersion
    /// </summary>
    public Element _FhirVersion { get; set; }
    /// <summary>
    /// A list of the formats supported by this implementation using their content types.
    /// </summary>
    public List<string> Format { get; set; }
    /// <summary>
    /// Extension container element for Format
    /// </summary>
    public List<Element> _Format { get; set; }
    /// <summary>
    /// Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
    /// </summary>
    public ConformanceImplementation Implementation { get; set; }
    /// <summary>
    /// Allow searching the 3 modes.
    /// </summary>
    public string Kind { get; set; }
    /// <summary>
    /// Extension container element for Kind
    /// </summary>
    public Element _Kind { get; set; }
    /// <summary>
    /// A description of the messaging capabilities of the solution.
    /// </summary>
    public List<ConformanceMessaging> Messaging { get; set; }
    /// <summary>
    /// A free text natural language name identifying the conformance statement.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// A list of profiles that represent different use cases supported by the system. For a server, "supported by the system" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles]{profiling.html#profile-uses}.
    /// </summary>
    public List<Reference> Profile { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the conformance.  May also allow for contact.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// Explains why this conformance statement is needed and why it's been constrained as it has.
    /// </summary>
    public string Requirements { get; set; }
    /// <summary>
    /// Extension container element for Requirements
    /// </summary>
    public Element _Requirements { get; set; }
    /// <summary>
    /// A definition of the restful capabilities of the solution, if any.
    /// </summary>
    public List<ConformanceRest> Rest { get; set; }
    /// <summary>
    /// Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.
    /// </summary>
    public ConformanceSoftware Software { get; set; }
    /// <summary>
    /// The status of this conformance statement.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// An absolute URL that is used to identify this conformance statement when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this conformance statement is (or will be) published.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// The identifier that is used to identify this version of the conformance statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (_Experimental != null)
      {
        writer.WritePropertyName("_experimental");
        _Experimental.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ConformanceContact valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Requirements))
      {
        writer.WriteString("requirements", (string)Requirements!);
      }

      if (_Requirements != null)
      {
        writer.WritePropertyName("_requirements");
        _Requirements.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Kind))
      {
        writer.WriteString("kind", (string)Kind!);
      }

      if (_Kind != null)
      {
        writer.WritePropertyName("_kind");
        _Kind.SerializeJson(writer, options);
      }

      if (Software != null)
      {
        writer.WritePropertyName("software");
        Software.SerializeJson(writer, options);
      }

      if (Implementation != null)
      {
        writer.WritePropertyName("implementation");
        Implementation.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(FhirVersion))
      {
        writer.WriteString("fhirVersion", (string)FhirVersion!);
      }

      if (_FhirVersion != null)
      {
        writer.WritePropertyName("_fhirVersion");
        _FhirVersion.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AcceptUnknown))
      {
        writer.WriteString("acceptUnknown", (string)AcceptUnknown!);
      }

      if (_AcceptUnknown != null)
      {
        writer.WritePropertyName("_acceptUnknown");
        _AcceptUnknown.SerializeJson(writer, options);
      }

      if ((Format != null) && (Format.Count != 0))
      {
        writer.WritePropertyName("format");
        writer.WriteStartArray();

        foreach (string valFormat in Format)
        {
          writer.WriteStringValue(valFormat);
        }

        writer.WriteEndArray();
      }

      if ((_Format != null) && (_Format.Count != 0))
      {
        writer.WritePropertyName("_format");
        writer.WriteStartArray();

        foreach (Element val_Format in _Format)
        {
          val_Format.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Profile != null) && (Profile.Count != 0))
      {
        writer.WritePropertyName("profile");
        writer.WriteStartArray();

        foreach (Reference valProfile in Profile)
        {
          valProfile.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Rest != null) && (Rest.Count != 0))
      {
        writer.WritePropertyName("rest");
        writer.WriteStartArray();

        foreach (ConformanceRest valRest in Rest)
        {
          valRest.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Messaging != null) && (Messaging.Count != 0))
      {
        writer.WritePropertyName("messaging");
        writer.WriteStartArray();

        foreach (ConformanceMessaging valMessaging in Messaging)
        {
          valMessaging.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Document != null) && (Document.Count != 0))
      {
        writer.WritePropertyName("document");
        writer.WriteStartArray();

        foreach (ConformanceDocument valDocument in Document)
        {
          valDocument.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "acceptUnknown":
          AcceptUnknown = reader.GetString();
          break;

        case "_acceptUnknown":
          _AcceptUnknown = new fhirCsR2.Models.Element();
          _AcceptUnknown.DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ConformanceContact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConformanceContact objContact = new fhirCsR2.Models.ConformanceContact();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR2.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR2.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "document":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Document = new List<ConformanceDocument>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConformanceDocument objDocument = new fhirCsR2.Models.ConformanceDocument();
            objDocument.DeserializeJson(ref reader, options);
            Document.Add(objDocument);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Document.Count == 0)
          {
            Document = null;
          }

          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "_experimental":
          _Experimental = new fhirCsR2.Models.Element();
          _Experimental.DeserializeJson(ref reader, options);
          break;

        case "fhirVersion":
          FhirVersion = reader.GetString();
          break;

        case "_fhirVersion":
          _FhirVersion = new fhirCsR2.Models.Element();
          _FhirVersion.DeserializeJson(ref reader, options);
          break;

        case "format":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Format = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Format.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Format.Count == 0)
          {
            Format = null;
          }

          break;

        case "_format":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Format = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Format = new fhirCsR2.Models.Element();
            obj_Format.DeserializeJson(ref reader, options);
            _Format.Add(obj_Format);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Format.Count == 0)
          {
            _Format = null;
          }

          break;

        case "implementation":
          Implementation = new fhirCsR2.Models.ConformanceImplementation();
          Implementation.DeserializeJson(ref reader, options);
          break;

        case "kind":
          Kind = reader.GetString();
          break;

        case "_kind":
          _Kind = new fhirCsR2.Models.Element();
          _Kind.DeserializeJson(ref reader, options);
          break;

        case "messaging":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Messaging = new List<ConformanceMessaging>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConformanceMessaging objMessaging = new fhirCsR2.Models.ConformanceMessaging();
            objMessaging.DeserializeJson(ref reader, options);
            Messaging.Add(objMessaging);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Messaging.Count == 0)
          {
            Messaging = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "profile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Profile = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objProfile = new fhirCsR2.Models.Reference();
            objProfile.DeserializeJson(ref reader, options);
            Profile.Add(objProfile);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Profile.Count == 0)
          {
            Profile = null;
          }

          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR2.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "requirements":
          Requirements = reader.GetString();
          break;

        case "_requirements":
          _Requirements = new fhirCsR2.Models.Element();
          _Requirements.DeserializeJson(ref reader, options);
          break;

        case "rest":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Rest = new List<ConformanceRest>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConformanceRest objRest = new fhirCsR2.Models.ConformanceRest();
            objRest.DeserializeJson(ref reader, options);
            Rest.Add(objRest);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Rest.Count == 0)
          {
            Rest = null;
          }

          break;

        case "software":
          Software = new fhirCsR2.Models.ConformanceSoftware();
          Software.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR2.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Conformance.acceptUnknown field
  /// </summary>
  public static class ConformanceAcceptUnknownCodes {
    public const string NO = "no";
    public const string EXTENSIONS = "extensions";
    public const string ELEMENTS = "elements";
    public const string BOTH = "both";
    public static HashSet<string> Values = new HashSet<string>() {
      "no",
      "extensions",
      "elements",
      "both",
    };
  }
  /// <summary>
  /// Code Values for the Conformance.format field
  /// </summary>
  public static class ConformanceFormatCodes {
    public const string XML = "xml";
    public const string JSON = "json";
    public const string MIME = "MIME";
    public static HashSet<string> Values = new HashSet<string>() {
      "xml",
      "json",
      "MIME",
    };
  }
  /// <summary>
  /// Code Values for the Conformance.kind field
  /// </summary>
  public static class ConformanceKindCodes {
    public const string INSTANCE = "instance";
    public const string CAPABILITY = "capability";
    public const string REQUIREMENTS = "requirements";
    public static HashSet<string> Values = new HashSet<string>() {
      "instance",
      "capability",
      "requirements",
    };
  }
  /// <summary>
  /// Code Values for the Conformance.status field
  /// </summary>
  public static class ConformanceStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
    };
  }
}
