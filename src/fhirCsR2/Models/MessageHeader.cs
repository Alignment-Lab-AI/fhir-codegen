// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Information about the message that this message is a response to.  Only present if this message is a response.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<MessageHeaderResponse>))]
  public class MessageHeaderResponse : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Allows the sender of the acknowledge message to know if the request was successful or if action is needed.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// Allows the sender of the message to determine what the specific issues are.
    /// </summary>
    public Reference Details { get; set; }
    /// <summary>
    /// Allows receiver to know what message is being responded to.
    /// </summary>
    public string Identifier { get; set; }
    /// <summary>
    /// Extension container element for Identifier
    /// </summary>
    public Element _Identifier { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Identifier))
      {
        writer.WriteString("identifier", (string)Identifier!);
      }

      if (_Identifier != null)
      {
        writer.WritePropertyName("_identifier");
        _Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (Details != null)
      {
        writer.WritePropertyName("details");
        Details.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR2.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "details":
          Details = new fhirCsR2.Models.Reference();
          Details.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = reader.GetString();
          break;

        case "_identifier":
          _Identifier = new fhirCsR2.Models.Element();
          _Identifier.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MessageHeader.response.code field
  /// </summary>
  public static class MessageHeaderResponseCodeCodes {
    public const string OK = "ok";
    public const string TRANSIENT_ERROR = "transient-error";
    public const string FATAL_ERROR = "fatal-error";
  }
  /// <summary>
  /// Allows replies, supports audit.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<MessageHeaderSource>))]
  public class MessageHeaderSource : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Allows escalation of technical issues.
    /// </summary>
    public ContactPoint Contact { get; set; }
    /// <summary>
    /// Identifies where to send responses, may influence security permissions.
    /// </summary>
    public string Endpoint { get; set; }
    /// <summary>
    /// Extension container element for Endpoint
    /// </summary>
    public Element _Endpoint { get; set; }
    /// <summary>
    /// May be used to support audit.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Supports audit and possibly interface engine behavior.
    /// </summary>
    public string Software { get; set; }
    /// <summary>
    /// Extension container element for Software
    /// </summary>
    public Element _Software { get; set; }
    /// <summary>
    /// Supports audit and possibly interface engine behavior.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Software))
      {
        writer.WriteString("software", (string)Software!);
      }

      if (_Software != null)
      {
        writer.WritePropertyName("_software");
        _Software.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (Contact != null)
      {
        writer.WritePropertyName("contact");
        Contact.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Endpoint))
      {
        writer.WriteString("endpoint", (string)Endpoint!);
      }

      if (_Endpoint != null)
      {
        writer.WritePropertyName("_endpoint");
        _Endpoint.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contact":
          Contact = new fhirCsR2.Models.ContactPoint();
          Contact.DeserializeJson(ref reader, options);
          break;

        case "endpoint":
          Endpoint = reader.GetString();
          break;

        case "_endpoint":
          _Endpoint = new fhirCsR2.Models.Element();
          _Endpoint.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "software":
          Software = reader.GetString();
          break;

        case "_software":
          _Software = new fhirCsR2.Models.Element();
          _Software.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR2.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indicates where message is to be sent for routing purposes.  Allows verification of "am I the intended recipient".
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<MessageHeaderDestination>))]
  public class MessageHeaderDestination : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Identifies where to route the message.
    /// </summary>
    public string Endpoint { get; set; }
    /// <summary>
    /// Extension container element for Endpoint
    /// </summary>
    public Element _Endpoint { get; set; }
    /// <summary>
    /// May be used for routing of response and/or to support audit.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Supports multi-hop routing.
    /// </summary>
    public Reference Target { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (Target != null)
      {
        writer.WritePropertyName("target");
        Target.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Endpoint))
      {
        writer.WriteString("endpoint", (string)Endpoint!);
      }

      if (_Endpoint != null)
      {
        writer.WritePropertyName("_endpoint");
        _Endpoint.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "endpoint":
          Endpoint = reader.GetString();
          break;

        case "_endpoint":
          _Endpoint = new fhirCsR2.Models.Element();
          _Endpoint.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "target":
          Target = new fhirCsR2.Models.Reference();
          Target.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<MessageHeader>))]
  public class MessageHeader : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "MessageHeader";
    /// <summary>
    /// Need to know for audit/traceback requirements and possibly for authorization.
    /// </summary>
    public Reference Author { get; set; }
    /// <summary>
    /// Every message event is about actual data, a single resource, that is identified in the definition of the event, and perhaps some or all linked resources.
    /// </summary>
    public List<Reference> Data { get; set; }
    /// <summary>
    /// Indicates where message is to be sent for routing purposes.  Allows verification of "am I the intended recipient".
    /// </summary>
    public List<MessageHeaderDestination> Destination { get; set; }
    /// <summary>
    /// Need to know for audit/traceback requirements and possibly for authorization.
    /// </summary>
    public Reference Enterer { get; set; }
    /// <summary>
    /// Drives the behavior associated with this message.
    /// </summary>
    public Coding Event { get; set; }
    /// <summary>
    /// Need to be able to track why resources are being changed and report in the audit log/history of the resource.  May affect authorization.
    /// </summary>
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// Allows routing beyond just the application level.
    /// </summary>
    public Reference Receiver { get; set; }
    /// <summary>
    /// Information about the message that this message is a response to.  Only present if this message is a response.
    /// </summary>
    public MessageHeaderResponse Response { get; set; }
    /// <summary>
    /// Need to know for audit/traceback requirements and possibly for authorization.
    /// </summary>
    public Reference Responsible { get; set; }
    /// <summary>
    /// Allows replies, supports audit.
    /// </summary>
    public MessageHeaderSource Source { get; set; }
    /// <summary>
    /// Allows limited detection of out-of-order and delayed transmission.  Also supports audit.
    /// </summary>
    public string Timestamp { get; set; }
    /// <summary>
    /// Extension container element for Timestamp
    /// </summary>
    public Element _Timestamp { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Timestamp))
      {
        writer.WriteString("timestamp", (string)Timestamp!);
      }

      if (_Timestamp != null)
      {
        writer.WritePropertyName("_timestamp");
        _Timestamp.SerializeJson(writer, options);
      }

      if (Event != null)
      {
        writer.WritePropertyName("event");
        Event.SerializeJson(writer, options);
      }

      if (Response != null)
      {
        writer.WritePropertyName("response");
        Response.SerializeJson(writer, options);
      }

      if (Source != null)
      {
        writer.WritePropertyName("source");
        Source.SerializeJson(writer, options);
      }

      if ((Destination != null) && (Destination.Count != 0))
      {
        writer.WritePropertyName("destination");
        writer.WriteStartArray();

        foreach (MessageHeaderDestination valDestination in Destination)
        {
          valDestination.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Enterer != null)
      {
        writer.WritePropertyName("enterer");
        Enterer.SerializeJson(writer, options);
      }

      if (Author != null)
      {
        writer.WritePropertyName("author");
        Author.SerializeJson(writer, options);
      }

      if (Receiver != null)
      {
        writer.WritePropertyName("receiver");
        Receiver.SerializeJson(writer, options);
      }

      if (Responsible != null)
      {
        writer.WritePropertyName("responsible");
        Responsible.SerializeJson(writer, options);
      }

      if (Reason != null)
      {
        writer.WritePropertyName("reason");
        Reason.SerializeJson(writer, options);
      }

      if ((Data != null) && (Data.Count != 0))
      {
        writer.WritePropertyName("data");
        writer.WriteStartArray();

        foreach (Reference valData in Data)
        {
          valData.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "author":
          Author = new fhirCsR2.Models.Reference();
          Author.DeserializeJson(ref reader, options);
          break;

        case "data":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Data = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objData = new fhirCsR2.Models.Reference();
            objData.DeserializeJson(ref reader, options);
            Data.Add(objData);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Data.Count == 0)
          {
            Data = null;
          }

          break;

        case "destination":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Destination = new List<MessageHeaderDestination>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.MessageHeaderDestination objDestination = new fhirCsR2.Models.MessageHeaderDestination();
            objDestination.DeserializeJson(ref reader, options);
            Destination.Add(objDestination);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Destination.Count == 0)
          {
            Destination = null;
          }

          break;

        case "enterer":
          Enterer = new fhirCsR2.Models.Reference();
          Enterer.DeserializeJson(ref reader, options);
          break;

        case "event":
          Event = new fhirCsR2.Models.Coding();
          Event.DeserializeJson(ref reader, options);
          break;

        case "reason":
          Reason = new fhirCsR2.Models.CodeableConcept();
          Reason.DeserializeJson(ref reader, options);
          break;

        case "receiver":
          Receiver = new fhirCsR2.Models.Reference();
          Receiver.DeserializeJson(ref reader, options);
          break;

        case "response":
          Response = new fhirCsR2.Models.MessageHeaderResponse();
          Response.DeserializeJson(ref reader, options);
          break;

        case "responsible":
          Responsible = new fhirCsR2.Models.Reference();
          Responsible.DeserializeJson(ref reader, options);
          break;

        case "source":
          Source = new fhirCsR2.Models.MessageHeaderSource();
          Source.DeserializeJson(ref reader, options);
          break;

        case "timestamp":
          Timestamp = reader.GetString();
          break;

        case "_timestamp":
          _Timestamp = new fhirCsR2.Models.Element();
          _Timestamp.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
