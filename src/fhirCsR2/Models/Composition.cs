// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Identifies responsibility for the accuracy of the composition content.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<CompositionAttester>))]
  public class CompositionAttester : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates the level of authority of the attestation.
    /// </summary>
    public List<string> Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public List<Element> _Mode { get; set; }
    /// <summary>
    /// Identifies who has taken on the responsibility for accuracy of the composition content.
    /// </summary>
    public Reference Party { get; set; }
    /// <summary>
    /// Identifies when the information in the composition was deemed accurate.  (Things may have changed since then.).
    /// </summary>
    public string Time { get; set; }
    /// <summary>
    /// Extension container element for Time
    /// </summary>
    public Element _Time { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Mode != null) && (Mode.Count != 0))
      {
        writer.WritePropertyName("mode");
        writer.WriteStartArray();

        foreach (string valMode in Mode)
        {
          writer.WriteStringValue(valMode);
        }

        writer.WriteEndArray();
      }

      if ((_Mode != null) && (_Mode.Count != 0))
      {
        writer.WritePropertyName("_mode");
        writer.WriteStartArray();

        foreach (Element val_Mode in _Mode)
        {
          val_Mode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Time))
      {
        writer.WriteString("time", (string)Time!);
      }

      if (_Time != null)
      {
        writer.WritePropertyName("_time");
        _Time.SerializeJson(writer, options);
      }

      if (Party != null)
      {
        writer.WritePropertyName("party");
        Party.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Mode = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Mode.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Mode.Count == 0)
          {
            Mode = null;
          }

          break;

        case "_mode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Mode = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Mode = new fhirCsR2.Models.Element();
            obj_Mode.DeserializeJson(ref reader, options);
            _Mode.Add(obj_Mode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Mode.Count == 0)
          {
            _Mode = null;
          }

          break;

        case "party":
          Party = new fhirCsR2.Models.Reference();
          Party.DeserializeJson(ref reader, options);
          break;

        case "time":
          Time = reader.GetString();
          break;

        case "_time":
          _Time = new fhirCsR2.Models.Element();
          _Time.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Composition.attester.mode field
  /// </summary>
  public static class CompositionAttesterModeCodes {
    public const string PERSONAL = "personal";
    public const string PROFESSIONAL = "professional";
    public const string LEGAL = "legal";
    public const string OFFICIAL = "official";
    public static HashSet<string> Values = new HashSet<string>() {
      "personal",
      "professional",
      "legal",
      "official",
    };
  }
  /// <summary>
  /// Provides context for the composition and creates a linkage between a resource describing an event and the composition created describing the event.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<CompositionEvent>))]
  public class CompositionEvent : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
    /// </summary>
    public List<CodeableConcept> Code { get; set; }
    /// <summary>
    /// The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
    /// </summary>
    public List<Reference> Detail { get; set; }
    /// <summary>
    /// The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (CodeableConcept valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (Reference valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objCode = new fhirCsR2.Models.CodeableConcept();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objDetail = new fhirCsR2.Models.Reference();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "period":
          Period = new fhirCsR2.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The root of the sections that make up the composition.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<CompositionSection>))]
  public class CompositionSection : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Provides computable standardized labels to topics within the document.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Allows capturing things like "none exist" or "not asked" which can be important for most lists.
    /// </summary>
    public CodeableConcept EmptyReason { get; set; }
    /// <summary>
    /// A reference to the actual resource from which the narrative in the section is derived.
    /// </summary>
    public List<Reference> Entry { get; set; }
    /// <summary>
    /// Sections are used in various ways, and it must be known in what way it is safe to use the entries in them.
    /// </summary>
    public string Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public Element _Mode { get; set; }
    /// <summary>
    /// Important for presentation and rendering.  Lists may be sorted to place more important information first or to group related entries.
    /// </summary>
    public CodeableConcept OrderedBy { get; set; }
    /// <summary>
    /// A nested sub-section within this section.
    /// </summary>
    public List<CompositionSection> Section { get; set; }
    /// <summary>
    /// A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
    /// </summary>
    public Narrative Text { get; set; }
    /// <summary>
    /// Section headings are often standardized for different types of documents.  They give guidance to humans on how the document is organized.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Text != null)
      {
        writer.WritePropertyName("text");
        Text.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Mode))
      {
        writer.WriteString("mode", (string)Mode!);
      }

      if (_Mode != null)
      {
        writer.WritePropertyName("_mode");
        _Mode.SerializeJson(writer, options);
      }

      if (OrderedBy != null)
      {
        writer.WritePropertyName("orderedBy");
        OrderedBy.SerializeJson(writer, options);
      }

      if ((Entry != null) && (Entry.Count != 0))
      {
        writer.WritePropertyName("entry");
        writer.WriteStartArray();

        foreach (Reference valEntry in Entry)
        {
          valEntry.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (EmptyReason != null)
      {
        writer.WritePropertyName("emptyReason");
        EmptyReason.SerializeJson(writer, options);
      }

      if ((Section != null) && (Section.Count != 0))
      {
        writer.WritePropertyName("section");
        writer.WriteStartArray();

        foreach (CompositionSection valSection in Section)
        {
          valSection.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR2.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "emptyReason":
          EmptyReason = new fhirCsR2.Models.CodeableConcept();
          EmptyReason.DeserializeJson(ref reader, options);
          break;

        case "entry":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Entry = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objEntry = new fhirCsR2.Models.Reference();
            objEntry.DeserializeJson(ref reader, options);
            Entry.Add(objEntry);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Entry.Count == 0)
          {
            Entry = null;
          }

          break;

        case "mode":
          Mode = reader.GetString();
          break;

        case "_mode":
          _Mode = new fhirCsR2.Models.Element();
          _Mode.DeserializeJson(ref reader, options);
          break;

        case "orderedBy":
          OrderedBy = new fhirCsR2.Models.CodeableConcept();
          OrderedBy.DeserializeJson(ref reader, options);
          break;

        case "section":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Section = new List<CompositionSection>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CompositionSection objSection = new fhirCsR2.Models.CompositionSection();
            objSection.DeserializeJson(ref reader, options);
            Section.Add(objSection);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Section.Count == 0)
          {
            Section = null;
          }

          break;

        case "text":
          Text = new fhirCsR2.Models.Narrative();
          Text.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR2.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Composition.section.mode field
  /// </summary>
  public static class CompositionSectionModeCodes {
    public const string WORKING = "working";
    public const string SNAPSHOT = "snapshot";
    public const string CHANGES = "changes";
    public static HashSet<string> Values = new HashSet<string>() {
      "working",
      "snapshot",
      "changes",
    };
  }
  /// <summary>
  /// A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<Composition>))]
  public class Composition : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Composition";
    /// <summary>
    /// Identifies responsibility for the accuracy of the composition content.
    /// </summary>
    public List<CompositionAttester> Attester { get; set; }
    /// <summary>
    /// Identifies who is responsible for the content.
    /// </summary>
    public List<Reference> Author { get; set; }
    /// <summary>
    /// Helps humans to assess whether the composition is of interest when viewing an index of compositions or documents.
    /// </summary>
    public CodeableConcept Class { get; set; }
    /// <summary>
    /// The code specifying the level of confidentiality of the Composition.
    /// </summary>
    public string Confidentiality { get; set; }
    /// <summary>
    /// Extension container element for Confidentiality
    /// </summary>
    public Element _Confidentiality { get; set; }
    /// <summary>
    /// Identifies where to go to find the current version, where to report issues, etc.
    /// </summary>
    public Reference Custodian { get; set; }
    /// <summary>
    /// dateTime is used for tracking, organizing versions and searching.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Provides context for the composition and supports searching.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// Provides context for the composition and creates a linkage between a resource describing an event and the composition created describing the event.
    /// </summary>
    public List<CompositionEvent> Event { get; set; }
    /// <summary>
    /// Logical identifier for the composition, assigned when created. This identifier stays constant as the composition is changed over time.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// The root of the sections that make up the composition.
    /// </summary>
    public List<CompositionSection> Section { get; set; }
    /// <summary>
    /// Need to be able to mark interim, amended, or withdrawn compositions or documents.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Essential metadata for searching for the composition. Identifies who and/or what the composition/document is about.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Official human-readable label for the composition.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Key metadata element describing the composition, used in searching/filtering.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Class != null)
      {
        writer.WritePropertyName("class");
        Class.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Confidentiality))
      {
        writer.WriteString("confidentiality", (string)Confidentiality!);
      }

      if (_Confidentiality != null)
      {
        writer.WritePropertyName("_confidentiality");
        _Confidentiality.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if ((Author != null) && (Author.Count != 0))
      {
        writer.WritePropertyName("author");
        writer.WriteStartArray();

        foreach (Reference valAuthor in Author)
        {
          valAuthor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Attester != null) && (Attester.Count != 0))
      {
        writer.WritePropertyName("attester");
        writer.WriteStartArray();

        foreach (CompositionAttester valAttester in Attester)
        {
          valAttester.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Custodian != null)
      {
        writer.WritePropertyName("custodian");
        Custodian.SerializeJson(writer, options);
      }

      if ((Event != null) && (Event.Count != 0))
      {
        writer.WritePropertyName("event");
        writer.WriteStartArray();

        foreach (CompositionEvent valEvent in Event)
        {
          valEvent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if ((Section != null) && (Section.Count != 0))
      {
        writer.WritePropertyName("section");
        writer.WriteStartArray();

        foreach (CompositionSection valSection in Section)
        {
          valSection.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "attester":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Attester = new List<CompositionAttester>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CompositionAttester objAttester = new fhirCsR2.Models.CompositionAttester();
            objAttester.DeserializeJson(ref reader, options);
            Attester.Add(objAttester);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Attester.Count == 0)
          {
            Attester = null;
          }

          break;

        case "author":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Author = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objAuthor = new fhirCsR2.Models.Reference();
            objAuthor.DeserializeJson(ref reader, options);
            Author.Add(objAuthor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Author.Count == 0)
          {
            Author = null;
          }

          break;

        case "class":
          Class = new fhirCsR2.Models.CodeableConcept();
          Class.DeserializeJson(ref reader, options);
          break;

        case "confidentiality":
          Confidentiality = reader.GetString();
          break;

        case "_confidentiality":
          _Confidentiality = new fhirCsR2.Models.Element();
          _Confidentiality.DeserializeJson(ref reader, options);
          break;

        case "custodian":
          Custodian = new fhirCsR2.Models.Reference();
          Custodian.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR2.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new fhirCsR2.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "event":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Event = new List<CompositionEvent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CompositionEvent objEvent = new fhirCsR2.Models.CompositionEvent();
            objEvent.DeserializeJson(ref reader, options);
            Event.Add(objEvent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Event.Count == 0)
          {
            Event = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR2.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "section":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Section = new List<CompositionSection>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CompositionSection objSection = new fhirCsR2.Models.CompositionSection();
            objSection.DeserializeJson(ref reader, options);
            Section.Add(objSection);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Section.Count == 0)
          {
            Section = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR2.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR2.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR2.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Composition.status field
  /// </summary>
  public static class CompositionStatusCodes {
    public const string PRELIMINARY = "preliminary";
    public const string FINAL = "final";
    public const string AMENDED = "amended";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public static HashSet<string> Values = new HashSet<string>() {
      "preliminary",
      "final",
      "amended",
      "entered-in-error",
    };
  }
}
