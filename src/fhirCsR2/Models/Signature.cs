// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different Signature approaches have different utilities.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<Signature>))]
  public class Signature : Element,  IFhirJsonSerializable {
    /// <summary>
    /// The base64 encoding of the Signature content.
    /// </summary>
    public byte[] Blob { get; set; }
    /// <summary>
    /// A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jwt for JWT, and image/* for a graphical image of a signature.
    /// </summary>
    public string ContentType { get; set; }
    /// <summary>
    /// Extension container element for ContentType
    /// </summary>
    public Element _ContentType { get; set; }
    /// <summary>
    /// An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
    /// </summary>
    public List<Coding> Type { get; set; }
    /// <summary>
    /// When the digital signature was signed.
    /// </summary>
    public string When { get; set; }
    /// <summary>
    /// Extension container element for When
    /// </summary>
    public Element _When { get; set; }
    /// <summary>
    /// A reference to an application-usable description of the person that signed the certificate (e.g. the signature used their private key).
    /// </summary>
    public string WhoUri { get; set; }
    /// <summary>
    /// Extension container element for WhoUri
    /// </summary>
    public Element _WhoUri { get; set; }
    /// <summary>
    /// A reference to an application-usable description of the person that signed the certificate (e.g. the signature used their private key).
    /// </summary>
    public Reference WhoReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.Element)this).SerializeJson(writer, options, false);

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (Coding valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(When))
      {
        writer.WriteString("when", (string)When!);
      }

      if (_When != null)
      {
        writer.WritePropertyName("_when");
        _When.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(WhoUri))
      {
        writer.WriteString("whoUri", (string)WhoUri!);
      }

      if (_WhoUri != null)
      {
        writer.WritePropertyName("_whoUri");
        _WhoUri.SerializeJson(writer, options);
      }

      if (WhoReference != null)
      {
        writer.WritePropertyName("whoReference");
        WhoReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ContentType))
      {
        writer.WriteString("contentType", (string)ContentType!);
      }

      if (_ContentType != null)
      {
        writer.WritePropertyName("_contentType");
        _ContentType.SerializeJson(writer, options);
      }

      writer.WriteString("blob", System.Convert.ToBase64String(Blob));

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "blob":
          Blob = System.Convert.FromBase64String(reader.GetString());
          break;

        case "contentType":
          ContentType = reader.GetString();
          break;

        case "_contentType":
          _ContentType = new fhirCsR2.Models.Element();
          _ContentType.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objType = new fhirCsR2.Models.Coding();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        case "when":
          When = reader.GetString();
          break;

        case "_when":
          _When = new fhirCsR2.Models.Element();
          _When.DeserializeJson(ref reader, options);
          break;

        case "whoUri":
          WhoUri = reader.GetString();
          break;

        case "_whoUri":
          _WhoUri = new fhirCsR2.Models.Element();
          _WhoUri.DeserializeJson(ref reader, options);
          break;

        case "whoReference":
          WhoReference = new fhirCsR2.Models.Reference();
          WhoReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
