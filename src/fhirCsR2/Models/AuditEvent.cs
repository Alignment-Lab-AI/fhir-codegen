// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// The event must be identified.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<AuditEventEvent>))]
  public class AuditEventEvent : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This broadly indicates what kind of action was done on the Participant Object.
    /// </summary>
    public string Action { get; set; }
    /// <summary>
    /// Extension container element for Action
    /// </summary>
    public Element _Action { get; set; }
    /// <summary>
    /// This ties an event to a specific date and time. Security audits typically require a consistent time base (e.g. UTC), to eliminate time-zone issues arising from geographical distribution.
    /// </summary>
    public string DateTime { get; set; }
    /// <summary>
    /// Extension container element for DateTime
    /// </summary>
    public Element _DateTime { get; set; }
    /// <summary>
    /// Indicates whether the event succeeded or failed.
    /// </summary>
    public string Outcome { get; set; }
    /// <summary>
    /// Extension container element for Outcome
    /// </summary>
    public Element _Outcome { get; set; }
    /// <summary>
    /// A free text description of the outcome of the event.
    /// </summary>
    public string OutcomeDesc { get; set; }
    /// <summary>
    /// Extension container element for OutcomeDesc
    /// </summary>
    public Element _OutcomeDesc { get; set; }
    /// <summary>
    /// The purposeOfUse (reason) that was used during the event being recorded.
    /// </summary>
    public List<Coding> PurposeOfEvent { get; set; }
    /// <summary>
    /// This field enables queries of messages by implementation-defined event categories.
    /// </summary>
    public List<Coding> Subtype { get; set; }
    /// <summary>
    /// This identifies the performed function. For "Execute" Event Action Code audit records, this identifies the application function performed.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Subtype != null) && (Subtype.Count != 0))
      {
        writer.WritePropertyName("subtype");
        writer.WriteStartArray();

        foreach (Coding valSubtype in Subtype)
        {
          valSubtype.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Action))
      {
        writer.WriteString("action", (string)Action!);
      }

      if (_Action != null)
      {
        writer.WritePropertyName("_action");
        _Action.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DateTime))
      {
        writer.WriteString("dateTime", (string)DateTime!);
      }

      if (_DateTime != null)
      {
        writer.WritePropertyName("_dateTime");
        _DateTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Outcome))
      {
        writer.WriteString("outcome", (string)Outcome!);
      }

      if (_Outcome != null)
      {
        writer.WritePropertyName("_outcome");
        _Outcome.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(OutcomeDesc))
      {
        writer.WriteString("outcomeDesc", (string)OutcomeDesc!);
      }

      if (_OutcomeDesc != null)
      {
        writer.WritePropertyName("_outcomeDesc");
        _OutcomeDesc.SerializeJson(writer, options);
      }

      if ((PurposeOfEvent != null) && (PurposeOfEvent.Count != 0))
      {
        writer.WritePropertyName("purposeOfEvent");
        writer.WriteStartArray();

        foreach (Coding valPurposeOfEvent in PurposeOfEvent)
        {
          valPurposeOfEvent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          Action = reader.GetString();
          break;

        case "_action":
          _Action = new fhirCsR2.Models.Element();
          _Action.DeserializeJson(ref reader, options);
          break;

        case "dateTime":
          DateTime = reader.GetString();
          break;

        case "_dateTime":
          _DateTime = new fhirCsR2.Models.Element();
          _DateTime.DeserializeJson(ref reader, options);
          break;

        case "outcome":
          Outcome = reader.GetString();
          break;

        case "_outcome":
          _Outcome = new fhirCsR2.Models.Element();
          _Outcome.DeserializeJson(ref reader, options);
          break;

        case "outcomeDesc":
          OutcomeDesc = reader.GetString();
          break;

        case "_outcomeDesc":
          _OutcomeDesc = new fhirCsR2.Models.Element();
          _OutcomeDesc.DeserializeJson(ref reader, options);
          break;

        case "purposeOfEvent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PurposeOfEvent = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objPurposeOfEvent = new fhirCsR2.Models.Coding();
            objPurposeOfEvent.DeserializeJson(ref reader, options);
            PurposeOfEvent.Add(objPurposeOfEvent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PurposeOfEvent.Count == 0)
          {
            PurposeOfEvent = null;
          }

          break;

        case "subtype":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Subtype = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objSubtype = new fhirCsR2.Models.Coding();
            objSubtype.DeserializeJson(ref reader, options);
            Subtype.Add(objSubtype);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Subtype.Count == 0)
          {
            Subtype = null;
          }

          break;

        case "type":
          Type = new fhirCsR2.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Logical network location for application activity, if the activity has a network location.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<AuditEventParticipantNetwork>))]
  public class AuditEventParticipantNetwork : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This datum identifies the user's network access point, which may be distinct from the server that performed the action. It is an optional value that may be used to group events recorded on separate servers for analysis of a specific network access point's data access across all servers.
    /// </summary>
    public string Address { get; set; }
    /// <summary>
    /// Extension container element for Address
    /// </summary>
    public Element _Address { get; set; }
    /// <summary>
    /// This datum identifies the type of network access point identifier of the user device for the audit event. It is an optional value that may be used to group events recorded on separate servers for analysis of access according to a network access point's type.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Address))
      {
        writer.WriteString("address", (string)Address!);
      }

      if (_Address != null)
      {
        writer.WritePropertyName("_address");
        _Address.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "address":
          Address = reader.GetString();
          break;

        case "_address":
          _Address = new fhirCsR2.Models.Element();
          _Address.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR2.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The event has one or more active participants.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<AuditEventParticipant>))]
  public class AuditEventParticipant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// In some situations a human user may authenticate with one identity but, to access a specific application system, may use a synonymous identify. For example, some "single sign on" implementations will do this. The alternative identifier would then be the original identify  used for authentication, and the User ID is the one known to and used by the application.
    /// </summary>
    public string AltId { get; set; }
    /// <summary>
    /// Extension container element for AltId
    /// </summary>
    public Element _AltId { get; set; }
    /// <summary>
    /// Where the event occurred.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// Usually, this is used instead of specifying a network address. This field is not used for Media Id (i.e. the serial number of a CD).
    /// </summary>
    public Coding Media { get; set; }
    /// <summary>
    /// The User ID and Authorization User ID may be internal or otherwise obscure values. This field assists the auditor in identifying the actual user.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Logical network location for application activity, if the activity has a network location.
    /// </summary>
    public AuditEventParticipantNetwork Network { get; set; }
    /// <summary>
    /// This value is used retrospectively to determine the authorization policies.
    /// </summary>
    public List<string> Policy { get; set; }
    /// <summary>
    /// Extension container element for Policy
    /// </summary>
    public List<Element> _Policy { get; set; }
    /// <summary>
    /// The reason (purpose of use), specific to this participant, that was used during the event being recorded.
    /// </summary>
    public List<Coding> PurposeOfUse { get; set; }
    /// <summary>
    /// This field ties an audit event to a specific resource.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// This value is used to distinguish between requestor-users and recipient-users. For example, one person may initiate a report-output to be sent to another user.
    /// </summary>
    public bool Requestor { get; set; }
    /// <summary>
    /// Extension container element for Requestor
    /// </summary>
    public Element _Requestor { get; set; }
    /// <summary>
    /// This value ties an audited event to a user's role(s). It is an optional value that might be used to group events for analysis by user functional role categories.
    /// </summary>
    public List<CodeableConcept> Role { get; set; }
    /// <summary>
    /// This field ties an audit event to a specific user.
    /// </summary>
    public Identifier UserId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Role != null) && (Role.Count != 0))
      {
        writer.WritePropertyName("role");
        writer.WriteStartArray();

        foreach (CodeableConcept valRole in Role)
        {
          valRole.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (UserId != null)
      {
        writer.WritePropertyName("userId");
        UserId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AltId))
      {
        writer.WriteString("altId", (string)AltId!);
      }

      if (_AltId != null)
      {
        writer.WritePropertyName("_altId");
        _AltId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      writer.WriteBoolean("requestor", Requestor);

      if (_Requestor != null)
      {
        writer.WritePropertyName("_requestor");
        _Requestor.SerializeJson(writer, options);
      }

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if ((Policy != null) && (Policy.Count != 0))
      {
        writer.WritePropertyName("policy");
        writer.WriteStartArray();

        foreach (string valPolicy in Policy)
        {
          writer.WriteStringValue(valPolicy);
        }

        writer.WriteEndArray();
      }

      if ((_Policy != null) && (_Policy.Count != 0))
      {
        writer.WritePropertyName("_policy");
        writer.WriteStartArray();

        foreach (Element val_Policy in _Policy)
        {
          val_Policy.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Media != null)
      {
        writer.WritePropertyName("media");
        Media.SerializeJson(writer, options);
      }

      if (Network != null)
      {
        writer.WritePropertyName("network");
        Network.SerializeJson(writer, options);
      }

      if ((PurposeOfUse != null) && (PurposeOfUse.Count != 0))
      {
        writer.WritePropertyName("purposeOfUse");
        writer.WriteStartArray();

        foreach (Coding valPurposeOfUse in PurposeOfUse)
        {
          valPurposeOfUse.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "altId":
          AltId = reader.GetString();
          break;

        case "_altId":
          _AltId = new fhirCsR2.Models.Element();
          _AltId.DeserializeJson(ref reader, options);
          break;

        case "location":
          Location = new fhirCsR2.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "media":
          Media = new fhirCsR2.Models.Coding();
          Media.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "network":
          Network = new fhirCsR2.Models.AuditEventParticipantNetwork();
          Network.DeserializeJson(ref reader, options);
          break;

        case "policy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Policy = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Policy.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Policy.Count == 0)
          {
            Policy = null;
          }

          break;

        case "_policy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Policy = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Policy = new fhirCsR2.Models.Element();
            obj_Policy.DeserializeJson(ref reader, options);
            _Policy.Add(obj_Policy);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Policy.Count == 0)
          {
            _Policy = null;
          }

          break;

        case "purposeOfUse":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PurposeOfUse = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objPurposeOfUse = new fhirCsR2.Models.Coding();
            objPurposeOfUse.DeserializeJson(ref reader, options);
            PurposeOfUse.Add(objPurposeOfUse);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PurposeOfUse.Count == 0)
          {
            PurposeOfUse = null;
          }

          break;

        case "reference":
          Reference = new fhirCsR2.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        case "requestor":
          Requestor = reader.GetBoolean();
          break;

        case "_requestor":
          _Requestor = new fhirCsR2.Models.Element();
          _Requestor.DeserializeJson(ref reader, options);
          break;

        case "role":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Role = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objRole = new fhirCsR2.Models.CodeableConcept();
            objRole.DeserializeJson(ref reader, options);
            Role.Add(objRole);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Role.Count == 0)
          {
            Role = null;
          }

          break;

        case "userId":
          UserId = new fhirCsR2.Models.Identifier();
          UserId.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The event is reported by one source.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<AuditEventSource>))]
  public class AuditEventSource : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This field ties the event to a specific source system. It may be used to group events for analysis according to where the event was detected.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// This value differentiates among the sites in a multi-site enterprise health information system.
    /// </summary>
    public string Site { get; set; }
    /// <summary>
    /// Extension container element for Site
    /// </summary>
    public Element _Site { get; set; }
    /// <summary>
    /// This field indicates which type of source is identified by the Audit Source ID. It is an optional value that may be used to group events for analysis according to the type of source where the event occurred.
    /// </summary>
    public List<Coding> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Site))
      {
        writer.WriteString("site", (string)Site!);
      }

      if (_Site != null)
      {
        writer.WritePropertyName("_site");
        _Site.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (Coding valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          Identifier = new fhirCsR2.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "site":
          Site = reader.GetString();
          break;

        case "_site":
          _Site = new fhirCsR2.Models.Element();
          _Site.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objType = new fhirCsR2.Models.Coding();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Additional Information about the Object.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<AuditEventObjectDetail>))]
  public class AuditEventObjectDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Name of the property.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Property value.
    /// </summary>
    public byte[] Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      writer.WriteString("value", System.Convert.ToBase64String(Value));

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR2.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = System.Convert.FromBase64String(reader.GetString());
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The event may have other objects involved.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<AuditEventObject>))]
  public class AuditEventObject : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Text that describes the object in more detail.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Additional Information about the Object.
    /// </summary>
    public List<AuditEventObjectDetail> Detail { get; set; }
    /// <summary>
    /// Identifies a specific instance of the participant object. The reference should always be version specific.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Institutional policies for privacy and security may optionally fall under different accountability rules based on data life cycle. This provides a differentiating value for those cases.
    /// </summary>
    public Coding Lifecycle { get; set; }
    /// <summary>
    /// An instance-specific descriptor of the Participant Object ID audited, such as a person's name.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// For query events it may be necessary to capture the actual query input to the query process in order to identify the specific event. Because of differences among query implementations and data encoding for them, this is a base 64 encoded data blob. It may be subsequently decoded or interpreted by downstream audit analysis processing.
    /// </summary>
    public byte[] Query { get; set; }
    /// <summary>
    /// Identifies a specific instance of the participant object. The reference should always be version specific.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// For some detailed audit analysis it may be necessary to indicate a more granular type of participant, based on the application role it serves.
    /// </summary>
    public Coding Role { get; set; }
    /// <summary>
    /// This field identifies the security labels for a specific instance of an object, such as a patient, to detect/track privacy and security issues.
    /// </summary>
    public List<Coding> SecurityLabel { get; set; }
    /// <summary>
    /// To describe the object being acted upon. In addition to queries on the subject of the action in an auditable event, it is also important to be able to query on the object type for the action.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Lifecycle != null)
      {
        writer.WritePropertyName("lifecycle");
        Lifecycle.SerializeJson(writer, options);
      }

      if ((SecurityLabel != null) && (SecurityLabel.Count != 0))
      {
        writer.WritePropertyName("securityLabel");
        writer.WriteStartArray();

        foreach (Coding valSecurityLabel in SecurityLabel)
        {
          valSecurityLabel.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Query != null)
      {
        writer.WriteString("query", System.Convert.ToBase64String(Query));
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (AuditEventObjectDetail valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<AuditEventObjectDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.AuditEventObjectDetail objDetail = new fhirCsR2.Models.AuditEventObjectDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR2.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "lifecycle":
          Lifecycle = new fhirCsR2.Models.Coding();
          Lifecycle.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "query":
          Query = System.Convert.FromBase64String(reader.GetString());
          break;

        case "reference":
          Reference = new fhirCsR2.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = new fhirCsR2.Models.Coding();
          Role.DeserializeJson(ref reader, options);
          break;

        case "securityLabel":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SecurityLabel = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objSecurityLabel = new fhirCsR2.Models.Coding();
            objSecurityLabel.DeserializeJson(ref reader, options);
            SecurityLabel.Add(objSecurityLabel);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SecurityLabel.Count == 0)
          {
            SecurityLabel = null;
          }

          break;

        case "type":
          Type = new fhirCsR2.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<AuditEvent>))]
  public class AuditEvent : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "AuditEvent";
    /// <summary>
    /// The event must be identified.
    /// </summary>
    public AuditEventEvent Event { get; set; }
    /// <summary>
    /// The event may have other objects involved.
    /// </summary>
    public List<AuditEventObject> Object { get; set; }
    /// <summary>
    /// The event has one or more active participants.
    /// </summary>
    public List<AuditEventParticipant> Participant { get; set; }
    /// <summary>
    /// The event is reported by one source.
    /// </summary>
    public AuditEventSource Source { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (Event != null)
      {
        writer.WritePropertyName("event");
        Event.SerializeJson(writer, options);
      }

      if ((Participant != null) && (Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();

        foreach (AuditEventParticipant valParticipant in Participant)
        {
          valParticipant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Source != null)
      {
        writer.WritePropertyName("source");
        Source.SerializeJson(writer, options);
      }

      if ((Object != null) && (Object.Count != 0))
      {
        writer.WritePropertyName("object");
        writer.WriteStartArray();

        foreach (AuditEventObject valObject in Object)
        {
          valObject.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "event":
          Event = new fhirCsR2.Models.AuditEventEvent();
          Event.DeserializeJson(ref reader, options);
          break;

        case "object":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Object = new List<AuditEventObject>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.AuditEventObject objObject = new fhirCsR2.Models.AuditEventObject();
            objObject.DeserializeJson(ref reader, options);
            Object.Add(objObject);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Object.Count == 0)
          {
            Object = null;
          }

          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Participant = new List<AuditEventParticipant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.AuditEventParticipant objParticipant = new fhirCsR2.Models.AuditEventParticipant();
            objParticipant.DeserializeJson(ref reader, options);
            Participant.Add(objParticipant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Participant.Count == 0)
          {
            Participant = null;
          }

          break;

        case "source":
          Source = new fhirCsR2.Models.AuditEventSource();
          Source.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
