// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<FamilyMemberHistoryCondition>))]
  public class FamilyMemberHistoryCondition : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// An area where general notes can be placed about this specific condition.
    /// </summary>
    public Annotation Note { get; set; }
    /// <summary>
    /// Age of onset of a condition in relatives is predictive of risk for the patient.
    /// </summary>
    public Quantity OnsetQuantity { get; set; }
    /// <summary>
    /// Age of onset of a condition in relatives is predictive of risk for the patient.
    /// </summary>
    public Range OnsetRange { get; set; }
    /// <summary>
    /// Age of onset of a condition in relatives is predictive of risk for the patient.
    /// </summary>
    public Period OnsetPeriod { get; set; }
    /// <summary>
    /// Age of onset of a condition in relatives is predictive of risk for the patient.
    /// </summary>
    public string OnsetString { get; set; }
    /// <summary>
    /// Extension container element for OnsetString
    /// </summary>
    public Element _OnsetString { get; set; }
    /// <summary>
    /// Indicates what happened as a result of this condition.  If the condition resulted in death, deceased date is captured on the relation.
    /// </summary>
    public CodeableConcept Outcome { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Outcome != null)
      {
        writer.WritePropertyName("outcome");
        Outcome.SerializeJson(writer, options);
      }

      if (OnsetQuantity != null)
      {
        writer.WritePropertyName("onsetQuantity");
        OnsetQuantity.SerializeJson(writer, options);
      }

      if (OnsetRange != null)
      {
        writer.WritePropertyName("onsetRange");
        OnsetRange.SerializeJson(writer, options);
      }

      if (OnsetPeriod != null)
      {
        writer.WritePropertyName("onsetPeriod");
        OnsetPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(OnsetString))
      {
        writer.WriteString("onsetString", (string)OnsetString!);
      }

      if (_OnsetString != null)
      {
        writer.WritePropertyName("_onsetString");
        _OnsetString.SerializeJson(writer, options);
      }

      if (Note != null)
      {
        writer.WritePropertyName("note");
        Note.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR2.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "note":
          Note = new fhirCsR2.Models.Annotation();
          Note.DeserializeJson(ref reader, options);
          break;

        case "onsetQuantity":
          OnsetQuantity = new fhirCsR2.Models.Quantity();
          OnsetQuantity.DeserializeJson(ref reader, options);
          break;

        case "onsetRange":
          OnsetRange = new fhirCsR2.Models.Range();
          OnsetRange.DeserializeJson(ref reader, options);
          break;

        case "onsetPeriod":
          OnsetPeriod = new fhirCsR2.Models.Period();
          OnsetPeriod.DeserializeJson(ref reader, options);
          break;

        case "onsetString":
          OnsetString = reader.GetString();
          break;

        case "_onsetString":
          _OnsetString = new fhirCsR2.Models.Element();
          _OnsetString.DeserializeJson(ref reader, options);
          break;

        case "outcome":
          Outcome = new fhirCsR2.Models.CodeableConcept();
          Outcome.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<FamilyMemberHistory>))]
  public class FamilyMemberHistory : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "FamilyMemberHistory";
    /// <summary>
    /// While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
    /// </summary>
    public Quantity AgeQuantity { get; set; }
    /// <summary>
    /// While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
    /// </summary>
    public Range AgeRange { get; set; }
    /// <summary>
    /// While age can be calculated from date of birth, sometimes recording age directly is more natureal for clinicians.
    /// </summary>
    public string AgeString { get; set; }
    /// <summary>
    /// Extension container element for AgeString
    /// </summary>
    public Element _AgeString { get; set; }
    /// <summary>
    /// Allows calculation of the relative's age.
    /// </summary>
    public Period BornPeriod { get; set; }
    /// <summary>
    /// Allows calculation of the relative's age.
    /// </summary>
    public string BornDate { get; set; }
    /// <summary>
    /// Extension container element for BornDate
    /// </summary>
    public Element _BornDate { get; set; }
    /// <summary>
    /// Allows calculation of the relative's age.
    /// </summary>
    public string BornString { get; set; }
    /// <summary>
    /// Extension container element for BornString
    /// </summary>
    public Element _BornString { get; set; }
    /// <summary>
    /// The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
    /// </summary>
    public List<FamilyMemberHistoryCondition> Condition { get; set; }
    /// <summary>
    /// Allows determination of how current the summary is.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    public bool? DeceasedBoolean { get; set; }
    /// <summary>
    /// Extension container element for DeceasedBoolean
    /// </summary>
    public Element _DeceasedBoolean { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    public Quantity DeceasedQuantity { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    public Range DeceasedRange { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    public string DeceasedDate { get; set; }
    /// <summary>
    /// Extension container element for DeceasedDate
    /// </summary>
    public Element _DeceasedDate { get; set; }
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    public string DeceasedString { get; set; }
    /// <summary>
    /// Extension container element for DeceasedString
    /// </summary>
    public Element _DeceasedString { get; set; }
    /// <summary>
    /// Not all relationship codes imply gender and the relative's gender can be relevant for risk assessments.
    /// </summary>
    public string Gender { get; set; }
    /// <summary>
    /// Extension container element for Gender
    /// </summary>
    public Element _Gender { get; set; }
    /// <summary>
    /// Need to allow connection to a wider workflow.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Allows greater ease in ensuring the same person is being talked about.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
    /// </summary>
    public Annotation Note { get; set; }
    /// <summary>
    /// The person who this history concerns.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// The type of relationship this person has to the patient (father, mother, brother etc.).
    /// </summary>
    public CodeableConcept Relationship { get; set; }
    /// <summary>
    /// A code specifying a state of a Family Member History record.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (Relationship != null)
      {
        writer.WritePropertyName("relationship");
        Relationship.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Gender))
      {
        writer.WriteString("gender", (string)Gender!);
      }

      if (_Gender != null)
      {
        writer.WritePropertyName("_gender");
        _Gender.SerializeJson(writer, options);
      }

      if (BornPeriod != null)
      {
        writer.WritePropertyName("bornPeriod");
        BornPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(BornDate))
      {
        writer.WriteString("bornDate", (string)BornDate!);
      }

      if (_BornDate != null)
      {
        writer.WritePropertyName("_bornDate");
        _BornDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(BornString))
      {
        writer.WriteString("bornString", (string)BornString!);
      }

      if (_BornString != null)
      {
        writer.WritePropertyName("_bornString");
        _BornString.SerializeJson(writer, options);
      }

      if (AgeQuantity != null)
      {
        writer.WritePropertyName("ageQuantity");
        AgeQuantity.SerializeJson(writer, options);
      }

      if (AgeRange != null)
      {
        writer.WritePropertyName("ageRange");
        AgeRange.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AgeString))
      {
        writer.WriteString("ageString", (string)AgeString!);
      }

      if (_AgeString != null)
      {
        writer.WritePropertyName("_ageString");
        _AgeString.SerializeJson(writer, options);
      }

      if (DeceasedBoolean != null)
      {
        writer.WriteBoolean("deceasedBoolean", (bool)DeceasedBoolean!);
      }

      if (_DeceasedBoolean != null)
      {
        writer.WritePropertyName("_deceasedBoolean");
        _DeceasedBoolean.SerializeJson(writer, options);
      }

      if (DeceasedQuantity != null)
      {
        writer.WritePropertyName("deceasedQuantity");
        DeceasedQuantity.SerializeJson(writer, options);
      }

      if (DeceasedRange != null)
      {
        writer.WritePropertyName("deceasedRange");
        DeceasedRange.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DeceasedDate))
      {
        writer.WriteString("deceasedDate", (string)DeceasedDate!);
      }

      if (_DeceasedDate != null)
      {
        writer.WritePropertyName("_deceasedDate");
        _DeceasedDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DeceasedString))
      {
        writer.WriteString("deceasedString", (string)DeceasedString!);
      }

      if (_DeceasedString != null)
      {
        writer.WritePropertyName("_deceasedString");
        _DeceasedString.SerializeJson(writer, options);
      }

      if (Note != null)
      {
        writer.WritePropertyName("note");
        Note.SerializeJson(writer, options);
      }

      if ((Condition != null) && (Condition.Count != 0))
      {
        writer.WritePropertyName("condition");
        writer.WriteStartArray();

        foreach (FamilyMemberHistoryCondition valCondition in Condition)
        {
          valCondition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "ageQuantity":
          AgeQuantity = new fhirCsR2.Models.Quantity();
          AgeQuantity.DeserializeJson(ref reader, options);
          break;

        case "ageRange":
          AgeRange = new fhirCsR2.Models.Range();
          AgeRange.DeserializeJson(ref reader, options);
          break;

        case "ageString":
          AgeString = reader.GetString();
          break;

        case "_ageString":
          _AgeString = new fhirCsR2.Models.Element();
          _AgeString.DeserializeJson(ref reader, options);
          break;

        case "bornPeriod":
          BornPeriod = new fhirCsR2.Models.Period();
          BornPeriod.DeserializeJson(ref reader, options);
          break;

        case "bornDate":
          BornDate = reader.GetString();
          break;

        case "_bornDate":
          _BornDate = new fhirCsR2.Models.Element();
          _BornDate.DeserializeJson(ref reader, options);
          break;

        case "bornString":
          BornString = reader.GetString();
          break;

        case "_bornString":
          _BornString = new fhirCsR2.Models.Element();
          _BornString.DeserializeJson(ref reader, options);
          break;

        case "condition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Condition = new List<FamilyMemberHistoryCondition>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.FamilyMemberHistoryCondition objCondition = new fhirCsR2.Models.FamilyMemberHistoryCondition();
            objCondition.DeserializeJson(ref reader, options);
            Condition.Add(objCondition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Condition.Count == 0)
          {
            Condition = null;
          }

          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR2.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "deceasedBoolean":
          DeceasedBoolean = reader.GetBoolean();
          break;

        case "_deceasedBoolean":
          _DeceasedBoolean = new fhirCsR2.Models.Element();
          _DeceasedBoolean.DeserializeJson(ref reader, options);
          break;

        case "deceasedQuantity":
          DeceasedQuantity = new fhirCsR2.Models.Quantity();
          DeceasedQuantity.DeserializeJson(ref reader, options);
          break;

        case "deceasedRange":
          DeceasedRange = new fhirCsR2.Models.Range();
          DeceasedRange.DeserializeJson(ref reader, options);
          break;

        case "deceasedDate":
          DeceasedDate = reader.GetString();
          break;

        case "_deceasedDate":
          _DeceasedDate = new fhirCsR2.Models.Element();
          _DeceasedDate.DeserializeJson(ref reader, options);
          break;

        case "deceasedString":
          DeceasedString = reader.GetString();
          break;

        case "_deceasedString":
          _DeceasedString = new fhirCsR2.Models.Element();
          _DeceasedString.DeserializeJson(ref reader, options);
          break;

        case "gender":
          Gender = reader.GetString();
          break;

        case "_gender":
          _Gender = new fhirCsR2.Models.Element();
          _Gender.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Identifier objIdentifier = new fhirCsR2.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "note":
          Note = new fhirCsR2.Models.Annotation();
          Note.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR2.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "relationship":
          Relationship = new fhirCsR2.Models.CodeableConcept();
          Relationship.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the FamilyMemberHistory.gender field
  /// </summary>
  public static class FamilyMemberHistoryGenderCodes {
    public const string MALE = "male";
    public const string FEMALE = "female";
    public const string OTHER = "other";
    public const string UNKNOWN = "unknown";
  }
  /// <summary>
  /// Code Values for the FamilyMemberHistory.status field
  /// </summary>
  public static class FamilyMemberHistoryStatusCodes {
    public const string PARTIAL = "partial";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string HEALTH_UNKNOWN = "health-unknown";
  }
}
