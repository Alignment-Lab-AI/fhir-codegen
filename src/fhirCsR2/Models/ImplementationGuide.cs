// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ImplementationGuideContact>))]
  public class ImplementationGuideContact : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The name of an individual to contact regarding the implementation guide.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if ((Telecom != null) && (Telecom.Count != 0))
      {
        writer.WritePropertyName("telecom");
        writer.WriteStartArray();

        foreach (ContactPoint valTelecom in Telecom)
        {
          valTelecom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "telecom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Telecom = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContactPoint objTelecom = new fhirCsR2.Models.ContactPoint();
            objTelecom.DeserializeJson(ref reader, options);
            Telecom.Add(objTelecom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Telecom.Count == 0)
          {
            Telecom = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ImplementationGuideDependency>))]
  public class ImplementationGuideDependency : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// How the dependency is represented when the guide is published.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Where the dependency is located.
    /// </summary>
    public string Uri { get; set; }
    /// <summary>
    /// Extension container element for Uri
    /// </summary>
    public Element _Uri { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Uri))
      {
        writer.WriteString("uri", (string)Uri!);
      }

      if (_Uri != null)
      {
        writer.WritePropertyName("_uri");
        _Uri.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR2.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "uri":
          Uri = reader.GetString();
          break;

        case "_uri":
          _Uri = new fhirCsR2.Models.Element();
          _Uri.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ImplementationGuide.dependency.type field
  /// </summary>
  public static class ImplementationGuideDependencyTypeCodes {
    public const string REFERENCE = "reference";
    public const string INCLUSION = "inclusion";
    public static HashSet<string> Values = new HashSet<string>() {
      "reference",
      "inclusion",
    };
  }
  /// <summary>
  /// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, conformance statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ImplementationGuidePackageResource>))]
  public class ImplementationGuidePackageResource : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A short code that may be used to identify the resource throughout the implementation guide.
    /// </summary>
    public string Acronym { get; set; }
    /// <summary>
    /// Extension container element for Acronym
    /// </summary>
    public Element _Acronym { get; set; }
    /// <summary>
    /// A description of the reason that a resource has been included in the implementation guide.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Another resource that this resource is an example for. This is mostly used for resources that are included as examples of StructureDefinitions.
    /// </summary>
    public Reference ExampleFor { get; set; }
    /// <summary>
    /// A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// This element is provided so that implementation guide tooling does not have to guess the purpose of including a resource in the implementation guide based on the type or context.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// Where this resource is found.
    /// </summary>
    public string SourceUri { get; set; }
    /// <summary>
    /// Extension container element for SourceUri
    /// </summary>
    public Element _SourceUri { get; set; }
    /// <summary>
    /// Where this resource is found.
    /// </summary>
    public Reference SourceReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Acronym))
      {
        writer.WriteString("acronym", (string)Acronym!);
      }

      if (_Acronym != null)
      {
        writer.WritePropertyName("_acronym");
        _Acronym.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SourceUri))
      {
        writer.WriteString("sourceUri", (string)SourceUri!);
      }

      if (_SourceUri != null)
      {
        writer.WritePropertyName("_sourceUri");
        _SourceUri.SerializeJson(writer, options);
      }

      if (SourceReference != null)
      {
        writer.WritePropertyName("sourceReference");
        SourceReference.SerializeJson(writer, options);
      }

      if (ExampleFor != null)
      {
        writer.WritePropertyName("exampleFor");
        ExampleFor.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "acronym":
          Acronym = reader.GetString();
          break;

        case "_acronym":
          _Acronym = new fhirCsR2.Models.Element();
          _Acronym.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "exampleFor":
          ExampleFor = new fhirCsR2.Models.Reference();
          ExampleFor.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR2.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "sourceUri":
          SourceUri = reader.GetString();
          break;

        case "_sourceUri":
          _SourceUri = new fhirCsR2.Models.Element();
          _SourceUri.DeserializeJson(ref reader, options);
          break;

        case "sourceReference":
          SourceReference = new fhirCsR2.Models.Reference();
          SourceReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ImplementationGuide.package.resource.purpose field
  /// </summary>
  public static class ImplementationGuidePackageResourcePurposeCodes {
    public const string EXAMPLE = "example";
    public const string TERMINOLOGY = "terminology";
    public const string PROFILE = "profile";
    public const string EXTENSION = "extension";
    public const string DICTIONARY = "dictionary";
    public const string LOGICAL = "logical";
    public static HashSet<string> Values = new HashSet<string>() {
      "example",
      "terminology",
      "profile",
      "extension",
      "dictionary",
      "logical",
    };
  }
  /// <summary>
  /// A logical group of resources. Logical groups can be used when building pages.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ImplementationGuidePackage>))]
  public class ImplementationGuidePackage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Human readable text describing the package.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The name for the group, as used in page.package.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, conformance statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
    /// </summary>
    public List<ImplementationGuidePackageResource> Resource { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Resource != null) && (Resource.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();

        foreach (ImplementationGuidePackageResource valResource in Resource)
        {
          valResource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Resource = new List<ImplementationGuidePackageResource>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ImplementationGuidePackageResource objResource = new fhirCsR2.Models.ImplementationGuidePackageResource();
            objResource.DeserializeJson(ref reader, options);
            Resource.Add(objResource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Resource.Count == 0)
          {
            Resource = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A set of profiles that all resources covered by this implementation guide must conform to.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ImplementationGuideGlobal>))]
  public class ImplementationGuideGlobal : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A reference to the profile that all instances must conform to.
    /// </summary>
    public Reference Profile { get; set; }
    /// <summary>
    /// The type of resource that all instances must conform to.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (Profile != null)
      {
        writer.WritePropertyName("profile");
        Profile.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "profile":
          Profile = new fhirCsR2.Models.Reference();
          Profile.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR2.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A page / section in the implementation guide. The root page is the implementation guide home page.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ImplementationGuidePage>))]
  public class ImplementationGuidePage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The format of the page.
    /// </summary>
    public string Format { get; set; }
    /// <summary>
    /// Extension container element for Format
    /// </summary>
    public Element _Format { get; set; }
    /// <summary>
    /// The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
    /// </summary>
    public string Kind { get; set; }
    /// <summary>
    /// Extension container element for Kind
    /// </summary>
    public Element _Kind { get; set; }
    /// <summary>
    /// A short name used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// For constructed pages, a list of packages to include in the page (or else empty for everything).
    /// </summary>
    public List<string> Package { get; set; }
    /// <summary>
    /// Extension container element for Package
    /// </summary>
    public List<Element> _Package { get; set; }
    /// <summary>
    /// Nested Pages/Sections under this page.
    /// </summary>
    public List<ImplementationGuidePage> Page { get; set; }
    /// <summary>
    /// The source address for the page.
    /// </summary>
    public string Source { get; set; }
    /// <summary>
    /// Extension container element for Source
    /// </summary>
    public Element _Source { get; set; }
    /// <summary>
    /// For constructed pages, what kind of resources to include in the list.
    /// </summary>
    public List<string> Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public List<Element> _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Source))
      {
        writer.WriteString("source", (string)Source!);
      }

      if (_Source != null)
      {
        writer.WritePropertyName("_source");
        _Source.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Kind))
      {
        writer.WriteString("kind", (string)Kind!);
      }

      if (_Kind != null)
      {
        writer.WritePropertyName("_kind");
        _Kind.SerializeJson(writer, options);
      }

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (string valType in Type)
        {
          writer.WriteStringValue(valType);
        }

        writer.WriteEndArray();
      }

      if ((_Type != null) && (_Type.Count != 0))
      {
        writer.WritePropertyName("_type");
        writer.WriteStartArray();

        foreach (Element val_Type in _Type)
        {
          val_Type.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Package != null) && (Package.Count != 0))
      {
        writer.WritePropertyName("package");
        writer.WriteStartArray();

        foreach (string valPackage in Package)
        {
          writer.WriteStringValue(valPackage);
        }

        writer.WriteEndArray();
      }

      if ((_Package != null) && (_Package.Count != 0))
      {
        writer.WritePropertyName("_package");
        writer.WriteStartArray();

        foreach (Element val_Package in _Package)
        {
          val_Package.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Format))
      {
        writer.WriteString("format", (string)Format!);
      }

      if (_Format != null)
      {
        writer.WritePropertyName("_format");
        _Format.SerializeJson(writer, options);
      }

      if ((Page != null) && (Page.Count != 0))
      {
        writer.WritePropertyName("page");
        writer.WriteStartArray();

        foreach (ImplementationGuidePage valPage in Page)
        {
          valPage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "format":
          Format = reader.GetString();
          break;

        case "_format":
          _Format = new fhirCsR2.Models.Element();
          _Format.DeserializeJson(ref reader, options);
          break;

        case "kind":
          Kind = reader.GetString();
          break;

        case "_kind":
          _Kind = new fhirCsR2.Models.Element();
          _Kind.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "package":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Package = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Package.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Package.Count == 0)
          {
            Package = null;
          }

          break;

        case "_package":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Package = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Package = new fhirCsR2.Models.Element();
            obj_Package.DeserializeJson(ref reader, options);
            _Package.Add(obj_Package);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Package.Count == 0)
          {
            _Package = null;
          }

          break;

        case "page":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Page = new List<ImplementationGuidePage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ImplementationGuidePage objPage = new fhirCsR2.Models.ImplementationGuidePage();
            objPage.DeserializeJson(ref reader, options);
            Page.Add(objPage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Page.Count == 0)
          {
            Page = null;
          }

          break;

        case "source":
          Source = reader.GetString();
          break;

        case "_source":
          _Source = new fhirCsR2.Models.Element();
          _Source.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Type.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        case "_type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Type = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Type = new fhirCsR2.Models.Element();
            obj_Type.DeserializeJson(ref reader, options);
            _Type.Add(obj_Type);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Type.Count == 0)
          {
            _Type = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ImplementationGuide.page.kind field
  /// </summary>
  public static class ImplementationGuidePageKindCodes {
    public const string PAGE = "page";
    public const string EXAMPLE = "example";
    public const string LIST = "list";
    public const string INCLUDE = "include";
    public const string DIRECTORY = "directory";
    public const string DICTIONARY = "dictionary";
    public const string TOC = "toc";
    public const string RESOURCE = "resource";
    public static HashSet<string> Values = new HashSet<string>() {
      "page",
      "example",
      "list",
      "include",
      "directory",
      "dictionary",
      "toc",
      "resource",
    };
  }
  /// <summary>
  /// A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ImplementationGuide>))]
  public class ImplementationGuide : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ImplementationGuide";
    /// <summary>
    /// A binary file that is included in the  implementation guide when it is published.
    /// </summary>
    public List<string> Binary { get; set; }
    /// <summary>
    /// Extension container element for Binary
    /// </summary>
    public List<Element> _Binary { get; set; }
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    public List<ImplementationGuideContact> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// The date this version of the implementation guide was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
    /// </summary>
    public List<ImplementationGuideDependency> Dependency { get; set; }
    /// <summary>
    /// A free text natural language description of the Implementation Guide and its use.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Allows filtering of Implementation Guides that are appropriate for use vs. not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Extension container element for Experimental
    /// </summary>
    public Element _Experimental { get; set; }
    /// <summary>
    /// The version of the FHIR specification on which this ImplementationGuide is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 1.0.2 for this version.
    /// </summary>
    public string FhirVersion { get; set; }
    /// <summary>
    /// Extension container element for FhirVersion
    /// </summary>
    public Element _FhirVersion { get; set; }
    /// <summary>
    /// A set of profiles that all resources covered by this implementation guide must conform to.
    /// </summary>
    public List<ImplementationGuideGlobal> Global { get; set; }
    /// <summary>
    /// A free text natural language name identifying the Implementation Guide.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// A logical group of resources. Logical groups can be used when building pages.
    /// </summary>
    public List<ImplementationGuidePackage> Package { get; set; }
    /// <summary>
    /// A page / section in the implementation guide. The root page is the implementation guide home page.
    /// </summary>
    public ImplementationGuidePage Page { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the implementation guide.  May also allow for contact.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// Allows filtering of Implementation Guides that are appropriate for use vs. not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// This is required to allow hosting Implementation Guides on multiple different servers, and to allow for the editorial process.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Assist in searching for appropriate implementation guide.
    /// </summary>
    public List<CodeableConcept> UseContext { get; set; }
    /// <summary>
    /// There may be multiple resource versions of the Implementation Guide that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (_Experimental != null)
      {
        writer.WritePropertyName("_experimental");
        _Experimental.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ImplementationGuideContact valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (CodeableConcept valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(FhirVersion))
      {
        writer.WriteString("fhirVersion", (string)FhirVersion!);
      }

      if (_FhirVersion != null)
      {
        writer.WritePropertyName("_fhirVersion");
        _FhirVersion.SerializeJson(writer, options);
      }

      if ((Dependency != null) && (Dependency.Count != 0))
      {
        writer.WritePropertyName("dependency");
        writer.WriteStartArray();

        foreach (ImplementationGuideDependency valDependency in Dependency)
        {
          valDependency.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Package != null) && (Package.Count != 0))
      {
        writer.WritePropertyName("package");
        writer.WriteStartArray();

        foreach (ImplementationGuidePackage valPackage in Package)
        {
          valPackage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Global != null) && (Global.Count != 0))
      {
        writer.WritePropertyName("global");
        writer.WriteStartArray();

        foreach (ImplementationGuideGlobal valGlobal in Global)
        {
          valGlobal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Binary != null) && (Binary.Count != 0))
      {
        writer.WritePropertyName("binary");
        writer.WriteStartArray();

        foreach (string valBinary in Binary)
        {
          writer.WriteStringValue(valBinary);
        }

        writer.WriteEndArray();
      }

      if ((_Binary != null) && (_Binary.Count != 0))
      {
        writer.WritePropertyName("_binary");
        writer.WriteStartArray();

        foreach (Element val_Binary in _Binary)
        {
          val_Binary.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Page != null)
      {
        writer.WritePropertyName("page");
        Page.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "binary":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Binary = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Binary.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Binary.Count == 0)
          {
            Binary = null;
          }

          break;

        case "_binary":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Binary = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Binary = new fhirCsR2.Models.Element();
            obj_Binary.DeserializeJson(ref reader, options);
            _Binary.Add(obj_Binary);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Binary.Count == 0)
          {
            _Binary = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ImplementationGuideContact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ImplementationGuideContact objContact = new fhirCsR2.Models.ImplementationGuideContact();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR2.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR2.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "dependency":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Dependency = new List<ImplementationGuideDependency>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ImplementationGuideDependency objDependency = new fhirCsR2.Models.ImplementationGuideDependency();
            objDependency.DeserializeJson(ref reader, options);
            Dependency.Add(objDependency);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Dependency.Count == 0)
          {
            Dependency = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "_experimental":
          _Experimental = new fhirCsR2.Models.Element();
          _Experimental.DeserializeJson(ref reader, options);
          break;

        case "fhirVersion":
          FhirVersion = reader.GetString();
          break;

        case "_fhirVersion":
          _FhirVersion = new fhirCsR2.Models.Element();
          _FhirVersion.DeserializeJson(ref reader, options);
          break;

        case "global":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Global = new List<ImplementationGuideGlobal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ImplementationGuideGlobal objGlobal = new fhirCsR2.Models.ImplementationGuideGlobal();
            objGlobal.DeserializeJson(ref reader, options);
            Global.Add(objGlobal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Global.Count == 0)
          {
            Global = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "package":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Package = new List<ImplementationGuidePackage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ImplementationGuidePackage objPackage = new fhirCsR2.Models.ImplementationGuidePackage();
            objPackage.DeserializeJson(ref reader, options);
            Package.Add(objPackage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Package.Count == 0)
          {
            Package = null;
          }

          break;

        case "page":
          Page = new fhirCsR2.Models.ImplementationGuidePage();
          Page.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR2.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objUseContext = new fhirCsR2.Models.CodeableConcept();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR2.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ImplementationGuide.status field
  /// </summary>
  public static class ImplementationGuideStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
    };
  }
}
