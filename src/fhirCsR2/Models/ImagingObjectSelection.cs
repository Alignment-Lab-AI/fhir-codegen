// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// The specific set of frames referenced in this imaging object selection. The URL retrieves the pixel data, and is encapsulated in a multipart MIME response.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ImagingObjectSelectionStudySeriesInstanceFrames>))]
  public class ImagingObjectSelectionStudySeriesInstanceFrames : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// One or more non-duplicate frame numbers in the selected instance.
    /// </summary>
    public List<uint> FrameNumbers { get; set; }
    /// <summary>
    /// WADO-RS URL enables retrieval of the frames using DICOM WADO-RS API.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((FrameNumbers != null) && (FrameNumbers.Count != 0))
      {
        writer.WritePropertyName("frameNumbers");
        writer.WriteStartArray();

        foreach (uint valFrameNumbers in FrameNumbers)
        {
          writer.WriteNumberValue(valFrameNumbers);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "frameNumbers":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          FrameNumbers = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            FrameNumbers.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (FrameNumbers.Count == 0)
          {
            FrameNumbers = null;
          }

          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. This is the instance level identity of the instance in the selection.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ImagingObjectSelectionStudySeriesInstance>))]
  public class ImagingObjectSelectionStudySeriesInstance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The specific set of frames referenced in this imaging object selection. The URL retrieves the pixel data, and is encapsulated in a multipart MIME response.
    /// </summary>
    public List<ImagingObjectSelectionStudySeriesInstanceFrames> Frames { get; set; }
    /// <summary>
    /// DICOM SOP instances can be an image or other data object. The SOP class UID provide the accurate information about what type the instance is.
    /// </summary>
    public string SopClass { get; set; }
    /// <summary>
    /// Extension container element for SopClass
    /// </summary>
    public Element _SopClass { get; set; }
    /// <summary>
    /// SOP instance UID is required to fully identify the DICOM SOP instance in the selection.
    /// </summary>
    public string Uid { get; set; }
    /// <summary>
    /// Extension container element for Uid
    /// </summary>
    public Element _Uid { get; set; }
    /// <summary>
    /// WADO-RS URL enables retrieval of the SOP instance using DICOM WADO-RS API.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(SopClass))
      {
        writer.WriteString("sopClass", (string)SopClass!);
      }

      if (_SopClass != null)
      {
        writer.WritePropertyName("_sopClass");
        _SopClass.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Uid))
      {
        writer.WriteString("uid", (string)Uid!);
      }

      if (_Uid != null)
      {
        writer.WritePropertyName("_uid");
        _Uid.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Frames != null) && (Frames.Count != 0))
      {
        writer.WritePropertyName("frames");
        writer.WriteStartArray();

        foreach (ImagingObjectSelectionStudySeriesInstanceFrames valFrames in Frames)
        {
          valFrames.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "frames":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Frames = new List<ImagingObjectSelectionStudySeriesInstanceFrames>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ImagingObjectSelectionStudySeriesInstanceFrames objFrames = new fhirCsR2.Models.ImagingObjectSelectionStudySeriesInstanceFrames();
            objFrames.DeserializeJson(ref reader, options);
            Frames.Add(objFrames);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Frames.Count == 0)
          {
            Frames = null;
          }

          break;

        case "sopClass":
          SopClass = reader.GetString();
          break;

        case "_sopClass":
          _SopClass = new fhirCsR2.Models.Element();
          _SopClass.DeserializeJson(ref reader, options);
          break;

        case "uid":
          Uid = reader.GetString();
          break;

        case "_uid":
          _Uid = new fhirCsR2.Models.Element();
          _Uid.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the series level provide a means of retrieving the entire series.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ImagingObjectSelectionStudySeries>))]
  public class ImagingObjectSelectionStudySeries : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. This is the instance level identity of the instance in the selection.
    /// </summary>
    public List<ImagingObjectSelectionStudySeriesInstance> Instance { get; set; }
    /// <summary>
    /// Series instance UID is required to fully identify the DICOM SOP instances in the selection.
    /// </summary>
    public string Uid { get; set; }
    /// <summary>
    /// Extension container element for Uid
    /// </summary>
    public Element _Uid { get; set; }
    /// <summary>
    /// WADO-RS URL enables retrieval of the entire series using DICOM WADO-RS API.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Uid))
      {
        writer.WriteString("uid", (string)Uid!);
      }

      if (_Uid != null)
      {
        writer.WritePropertyName("_uid");
        _Uid.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Instance != null) && (Instance.Count != 0))
      {
        writer.WritePropertyName("instance");
        writer.WriteStartArray();

        foreach (ImagingObjectSelectionStudySeriesInstance valInstance in Instance)
        {
          valInstance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "instance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Instance = new List<ImagingObjectSelectionStudySeriesInstance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ImagingObjectSelectionStudySeriesInstance objInstance = new fhirCsR2.Models.ImagingObjectSelectionStudySeriesInstance();
            objInstance.DeserializeJson(ref reader, options);
            Instance.Add(objInstance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Instance.Count == 0)
          {
            Instance = null;
          }

          break;

        case "uid":
          Uid = reader.GetString();
          break;

        case "_uid":
          _Uid = new fhirCsR2.Models.Element();
          _Uid.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the study level provide a means of retrieving the entire study.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ImagingObjectSelectionStudy>))]
  public class ImagingObjectSelectionStudy : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Used to retrieve the ImagingStudy that contain the images referenced in the Imaging ObjectSelection.study.
    /// </summary>
    public Reference ImagingStudy { get; set; }
    /// <summary>
    /// DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the series level provide a means of retrieving the entire series.
    /// </summary>
    public List<ImagingObjectSelectionStudySeries> Series { get; set; }
    /// <summary>
    /// Study instance UID is required to fully identify the DICOM SOP instances in the selection.
    /// </summary>
    public string Uid { get; set; }
    /// <summary>
    /// Extension container element for Uid
    /// </summary>
    public Element _Uid { get; set; }
    /// <summary>
    /// WADO-RS URL enables retrieval of the entire study using DICOM WADO-RS API.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Uid))
      {
        writer.WriteString("uid", (string)Uid!);
      }

      if (_Uid != null)
      {
        writer.WritePropertyName("_uid");
        _Uid.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (ImagingStudy != null)
      {
        writer.WritePropertyName("imagingStudy");
        ImagingStudy.SerializeJson(writer, options);
      }

      if ((Series != null) && (Series.Count != 0))
      {
        writer.WritePropertyName("series");
        writer.WriteStartArray();

        foreach (ImagingObjectSelectionStudySeries valSeries in Series)
        {
          valSeries.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "imagingStudy":
          ImagingStudy = new fhirCsR2.Models.Reference();
          ImagingStudy.DeserializeJson(ref reader, options);
          break;

        case "series":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Series = new List<ImagingObjectSelectionStudySeries>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ImagingObjectSelectionStudySeries objSeries = new fhirCsR2.Models.ImagingObjectSelectionStudySeries();
            objSeries.DeserializeJson(ref reader, options);
            Series.Add(objSeries);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Series.Count == 0)
          {
            Series = null;
          }

          break;

        case "uid":
          Uid = reader.GetString();
          break;

        case "_uid":
          _Uid = new fhirCsR2.Models.Element();
          _Uid.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingObjectSelection resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance ("cine" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ImagingObjectSelection>))]
  public class ImagingObjectSelection : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ImagingObjectSelection";
    /// <summary>
    /// Track the selection decision maker.
    /// </summary>
    public Reference Author { get; set; }
    /// <summary>
    /// Date and time when the selection was made can be important to understand the content of selection.
    /// </summary>
    public string AuthoringTime { get; set; }
    /// <summary>
    /// Extension container element for AuthoringTime
    /// </summary>
    public Element _AuthoringTime { get; set; }
    /// <summary>
    /// Need to provide a narrative description of the SOP instances in the selection.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// SOP Instances in ImagingObjectSelection must be from the same patient.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// DICOM SOP instances are identified through the UIDs of the study - series - instance hierarchy. In addition, the locator at the study level provide a means of retrieving the entire study.
    /// </summary>
    public List<ImagingObjectSelectionStudy> Study { get; set; }
    /// <summary>
    /// Need to represent the application purpose that the SOP instances in ImagingObjectSelection are selected for.
    /// </summary>
    public CodeableConcept Title { get; set; }
    /// <summary>
    /// DICOM SOP Instance is always assigned with a unique identifier (UID).
    /// </summary>
    public string Uid { get; set; }
    /// <summary>
    /// Extension container element for Uid
    /// </summary>
    public Element _Uid { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Uid))
      {
        writer.WriteString("uid", (string)Uid!);
      }

      if (_Uid != null)
      {
        writer.WritePropertyName("_uid");
        _Uid.SerializeJson(writer, options);
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (Title != null)
      {
        writer.WritePropertyName("title");
        Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Author != null)
      {
        writer.WritePropertyName("author");
        Author.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AuthoringTime))
      {
        writer.WriteString("authoringTime", (string)AuthoringTime!);
      }

      if (_AuthoringTime != null)
      {
        writer.WritePropertyName("_authoringTime");
        _AuthoringTime.SerializeJson(writer, options);
      }

      if ((Study != null) && (Study.Count != 0))
      {
        writer.WritePropertyName("study");
        writer.WriteStartArray();

        foreach (ImagingObjectSelectionStudy valStudy in Study)
        {
          valStudy.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "author":
          Author = new fhirCsR2.Models.Reference();
          Author.DeserializeJson(ref reader, options);
          break;

        case "authoringTime":
          AuthoringTime = reader.GetString();
          break;

        case "_authoringTime":
          _AuthoringTime = new fhirCsR2.Models.Element();
          _AuthoringTime.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR2.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "study":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Study = new List<ImagingObjectSelectionStudy>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ImagingObjectSelectionStudy objStudy = new fhirCsR2.Models.ImagingObjectSelectionStudy();
            objStudy.DeserializeJson(ref reader, options);
            Study.Add(objStudy);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Study.Count == 0)
          {
            Study = null;
          }

          break;

        case "title":
          Title = new fhirCsR2.Models.CodeableConcept();
          Title.DeserializeJson(ref reader, options);
          break;

        case "uid":
          Uid = reader.GetString();
          break;

        case "_uid":
          _Uid = new fhirCsR2.Models.Element();
          _Uid.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
