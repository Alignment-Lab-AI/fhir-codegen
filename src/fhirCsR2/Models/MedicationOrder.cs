// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Indicates how the medication is to be used by the patient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<MedicationOrderDosageInstruction>))]
  public class MedicationOrderDosageInstruction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Additional instructions such as "Swallow with plenty of water" which may or may not be coded.
    /// </summary>
    public CodeableConcept AdditionalInstructions { get; set; }
    /// <summary>
    /// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
    /// </summary>
    public bool? AsNeededBoolean { get; set; }
    /// <summary>
    /// Extension container element for AsNeededBoolean
    /// </summary>
    public Element _AsNeededBoolean { get; set; }
    /// <summary>
    /// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
    /// </summary>
    public CodeableConcept AsNeededCodeableConcept { get; set; }
    /// <summary>
    /// The amount of therapeutic or other substance given at one administration event.
    /// </summary>
    public Range DoseRange { get; set; }
    /// <summary>
    /// The amount of therapeutic or other substance given at one administration event.
    /// </summary>
    public Quantity DoseQuantity { get; set; }
    /// <summary>
    /// The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time.  For example, 1000mg in 24 hours.
    /// </summary>
    public Ratio MaxDosePerPeriod { get; set; }
    /// <summary>
    /// A coded value indicating the method by which the medication is introduced into or onto the body. Most commonly used for injections.  For examples, Slow Push; Deep IV.
    /// </summary>
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    public Ratio RateRatio { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    public Range RateRange { get; set; }
    /// <summary>
    /// A code specifying the route or physiological path of administration of a therapeutic agent into or onto a patient's body.
    /// </summary>
    public CodeableConcept Route { get; set; }
    /// <summary>
    /// A coded specification of the anatomic site where the medication first enters the body.
    /// </summary>
    public CodeableConcept SiteCodeableConcept { get; set; }
    /// <summary>
    /// A coded specification of the anatomic site where the medication first enters the body.
    /// </summary>
    public Reference SiteReference { get; set; }
    /// <summary>
    /// Free text dosage instructions can be used for cases where the instructions are too complex to code.  The content of this attribute does not include the name or description of the medication. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication. It is expected that the text instructions will always be populated.  If the dosage.timing attribute is also populated, then the dosage.text should reflect the same information as the timing.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// The timing schedule for giving the medication to the patient. The Schedule data type allows many different expressions. For example: "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    public Timing Timing { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (AdditionalInstructions != null)
      {
        writer.WritePropertyName("additionalInstructions");
        AdditionalInstructions.SerializeJson(writer, options);
      }

      if (Timing != null)
      {
        writer.WritePropertyName("timing");
        Timing.SerializeJson(writer, options);
      }

      if (AsNeededBoolean != null)
      {
        writer.WriteBoolean("asNeededBoolean", (bool)AsNeededBoolean!);
      }

      if (_AsNeededBoolean != null)
      {
        writer.WritePropertyName("_asNeededBoolean");
        _AsNeededBoolean.SerializeJson(writer, options);
      }

      if (AsNeededCodeableConcept != null)
      {
        writer.WritePropertyName("asNeededCodeableConcept");
        AsNeededCodeableConcept.SerializeJson(writer, options);
      }

      if (SiteCodeableConcept != null)
      {
        writer.WritePropertyName("siteCodeableConcept");
        SiteCodeableConcept.SerializeJson(writer, options);
      }

      if (SiteReference != null)
      {
        writer.WritePropertyName("siteReference");
        SiteReference.SerializeJson(writer, options);
      }

      if (Route != null)
      {
        writer.WritePropertyName("route");
        Route.SerializeJson(writer, options);
      }

      if (Method != null)
      {
        writer.WritePropertyName("method");
        Method.SerializeJson(writer, options);
      }

      if (DoseRange != null)
      {
        writer.WritePropertyName("doseRange");
        DoseRange.SerializeJson(writer, options);
      }

      if (DoseQuantity != null)
      {
        writer.WritePropertyName("doseQuantity");
        DoseQuantity.SerializeJson(writer, options);
      }

      if (RateRatio != null)
      {
        writer.WritePropertyName("rateRatio");
        RateRatio.SerializeJson(writer, options);
      }

      if (RateRange != null)
      {
        writer.WritePropertyName("rateRange");
        RateRange.SerializeJson(writer, options);
      }

      if (MaxDosePerPeriod != null)
      {
        writer.WritePropertyName("maxDosePerPeriod");
        MaxDosePerPeriod.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "additionalInstructions":
          AdditionalInstructions = new fhirCsR2.Models.CodeableConcept();
          AdditionalInstructions.DeserializeJson(ref reader, options);
          break;

        case "asNeededBoolean":
          AsNeededBoolean = reader.GetBoolean();
          break;

        case "_asNeededBoolean":
          _AsNeededBoolean = new fhirCsR2.Models.Element();
          _AsNeededBoolean.DeserializeJson(ref reader, options);
          break;

        case "asNeededCodeableConcept":
          AsNeededCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          AsNeededCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "doseRange":
          DoseRange = new fhirCsR2.Models.Range();
          DoseRange.DeserializeJson(ref reader, options);
          break;

        case "doseQuantity":
          DoseQuantity = new fhirCsR2.Models.Quantity();
          DoseQuantity.DeserializeJson(ref reader, options);
          break;

        case "maxDosePerPeriod":
          MaxDosePerPeriod = new fhirCsR2.Models.Ratio();
          MaxDosePerPeriod.DeserializeJson(ref reader, options);
          break;

        case "method":
          Method = new fhirCsR2.Models.CodeableConcept();
          Method.DeserializeJson(ref reader, options);
          break;

        case "rateRatio":
          RateRatio = new fhirCsR2.Models.Ratio();
          RateRatio.DeserializeJson(ref reader, options);
          break;

        case "rateRange":
          RateRange = new fhirCsR2.Models.Range();
          RateRange.DeserializeJson(ref reader, options);
          break;

        case "route":
          Route = new fhirCsR2.Models.CodeableConcept();
          Route.DeserializeJson(ref reader, options);
          break;

        case "siteCodeableConcept":
          SiteCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          SiteCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "siteReference":
          SiteReference = new fhirCsR2.Models.Reference();
          SiteReference.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR2.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "timing":
          Timing = new fhirCsR2.Models.Timing();
          Timing.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indicates the specific details for the dispense or medication supply part of a medication order (also known as a Medication Prescription).  Note that this information is NOT always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<MedicationOrderDispenseRequest>))]
  public class MedicationOrderDispenseRequest : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
    /// </summary>
    public Quantity ExpectedSupplyDuration { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    public CodeableConcept MedicationCodeableConcept { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    public Reference MedicationReference { get; set; }
    /// <summary>
    /// An integer indicating the number of additional times (aka refills or repeats) the patient can receive the prescribed medication.   Usage Notes: This integer does NOT include the original order dispense.   This means that if an order indicates dispense 30 tablets plus  "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.
    /// </summary>
    public uint? NumberOfRepeatsAllowed { get; set; }
    /// <summary>
    /// The amount that is to be dispensed for one fill.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Indicates when the Prescription becomes valid, and when it ceases to be a dispensable Prescription.
    /// </summary>
    public Period ValidityPeriod { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (MedicationCodeableConcept != null)
      {
        writer.WritePropertyName("medicationCodeableConcept");
        MedicationCodeableConcept.SerializeJson(writer, options);
      }

      if (MedicationReference != null)
      {
        writer.WritePropertyName("medicationReference");
        MedicationReference.SerializeJson(writer, options);
      }

      if (ValidityPeriod != null)
      {
        writer.WritePropertyName("validityPeriod");
        ValidityPeriod.SerializeJson(writer, options);
      }

      if (NumberOfRepeatsAllowed != null)
      {
        writer.WriteNumber("numberOfRepeatsAllowed", (uint)NumberOfRepeatsAllowed!);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (ExpectedSupplyDuration != null)
      {
        writer.WritePropertyName("expectedSupplyDuration");
        ExpectedSupplyDuration.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "expectedSupplyDuration":
          ExpectedSupplyDuration = new fhirCsR2.Models.Quantity();
          ExpectedSupplyDuration.DeserializeJson(ref reader, options);
          break;

        case "medicationCodeableConcept":
          MedicationCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          MedicationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "medicationReference":
          MedicationReference = new fhirCsR2.Models.Reference();
          MedicationReference.DeserializeJson(ref reader, options);
          break;

        case "numberOfRepeatsAllowed":
          NumberOfRepeatsAllowed = reader.GetUInt32();
          break;

        case "quantity":
          Quantity = new fhirCsR2.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "validityPeriod":
          ValidityPeriod = new fhirCsR2.Models.Period();
          ValidityPeriod.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen, and in others it does not matter. This block explains the prescriber's intent. If nothing is specified substitution may be done.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<MedicationOrderSubstitution>))]
  public class MedicationOrderSubstitution : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates the reason for the substitution, or why substitution must or must not be performed.
    /// </summary>
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// A code signifying whether a different drug should be dispensed from what was prescribed.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Reason != null)
      {
        writer.WritePropertyName("reason");
        Reason.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reason":
          Reason = new fhirCsR2.Models.CodeableConcept();
          Reason.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR2.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationOrder" rather than "MedicationPrescription" to generalize the use across inpatient and outpatient settings as well as for care plans, etc.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<MedicationOrder>))]
  public class MedicationOrder : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "MedicationOrder";
    /// <summary>
    /// The date (and perhaps time) when the prescription was stopped.
    /// </summary>
    public string DateEnded { get; set; }
    /// <summary>
    /// Extension container element for DateEnded
    /// </summary>
    public Element _DateEnded { get; set; }
    /// <summary>
    /// The date (and perhaps time) when the prescription was written.
    /// </summary>
    public string DateWritten { get; set; }
    /// <summary>
    /// Extension container element for DateWritten
    /// </summary>
    public Element _DateWritten { get; set; }
    /// <summary>
    /// Indicates the specific details for the dispense or medication supply part of a medication order (also known as a Medication Prescription).  Note that this information is NOT always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
    /// </summary>
    public MedicationOrderDispenseRequest DispenseRequest { get; set; }
    /// <summary>
    /// Indicates how the medication is to be used by the patient.
    /// </summary>
    public List<MedicationOrderDosageInstruction> DosageInstruction { get; set; }
    /// <summary>
    /// A link to a resource that identifies the particular occurrence of contact between patient and health care provider.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// External identifier - one that would be used by another non-FHIR system - for example a re-imbursement system might issue its own id for each prescription that is created.  This is particularly important where FHIR only provides part of an entire workflow process where records have to be tracked through an entire system.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    public CodeableConcept MedicationCodeableConcept { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    public Reference MedicationReference { get; set; }
    /// <summary>
    /// Extra information about the prescription that could not be conveyed by the other attributes.
    /// </summary>
    public string Note { get; set; }
    /// <summary>
    /// Extension container element for Note
    /// </summary>
    public Element _Note { get; set; }
    /// <summary>
    /// A link to a resource representing the person to whom the medication will be given.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// The healthcare professional responsible for authorizing the prescription.
    /// </summary>
    public Reference Prescriber { get; set; }
    /// <summary>
    /// A link to a resource representing an earlier order or prescription that this order supersedes.
    /// </summary>
    public Reference PriorPrescription { get; set; }
    /// <summary>
    /// Can be the reason or the indication for writing the prescription.
    /// </summary>
    public CodeableConcept ReasonCodeableConcept { get; set; }
    /// <summary>
    /// Can be the reason or the indication for writing the prescription.
    /// </summary>
    public Reference ReasonReference { get; set; }
    /// <summary>
    /// The reason why the prescription was stopped, if it was.
    /// </summary>
    public CodeableConcept ReasonEnded { get; set; }
    /// <summary>
    /// A code specifying the state of the order.  Generally this will be active or completed state.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen, and in others it does not matter. This block explains the prescriber's intent. If nothing is specified substitution may be done.
    /// </summary>
    public MedicationOrderSubstitution Substitution { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(DateWritten))
      {
        writer.WriteString("dateWritten", (string)DateWritten!);
      }

      if (_DateWritten != null)
      {
        writer.WritePropertyName("_dateWritten");
        _DateWritten.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DateEnded))
      {
        writer.WriteString("dateEnded", (string)DateEnded!);
      }

      if (_DateEnded != null)
      {
        writer.WritePropertyName("_dateEnded");
        _DateEnded.SerializeJson(writer, options);
      }

      if (ReasonEnded != null)
      {
        writer.WritePropertyName("reasonEnded");
        ReasonEnded.SerializeJson(writer, options);
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (Prescriber != null)
      {
        writer.WritePropertyName("prescriber");
        Prescriber.SerializeJson(writer, options);
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if (ReasonCodeableConcept != null)
      {
        writer.WritePropertyName("reasonCodeableConcept");
        ReasonCodeableConcept.SerializeJson(writer, options);
      }

      if (ReasonReference != null)
      {
        writer.WritePropertyName("reasonReference");
        ReasonReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Note))
      {
        writer.WriteString("note", (string)Note!);
      }

      if (_Note != null)
      {
        writer.WritePropertyName("_note");
        _Note.SerializeJson(writer, options);
      }

      if (MedicationCodeableConcept != null)
      {
        writer.WritePropertyName("medicationCodeableConcept");
        MedicationCodeableConcept.SerializeJson(writer, options);
      }

      if (MedicationReference != null)
      {
        writer.WritePropertyName("medicationReference");
        MedicationReference.SerializeJson(writer, options);
      }

      if ((DosageInstruction != null) && (DosageInstruction.Count != 0))
      {
        writer.WritePropertyName("dosageInstruction");
        writer.WriteStartArray();

        foreach (MedicationOrderDosageInstruction valDosageInstruction in DosageInstruction)
        {
          valDosageInstruction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (DispenseRequest != null)
      {
        writer.WritePropertyName("dispenseRequest");
        DispenseRequest.SerializeJson(writer, options);
      }

      if (Substitution != null)
      {
        writer.WritePropertyName("substitution");
        Substitution.SerializeJson(writer, options);
      }

      if (PriorPrescription != null)
      {
        writer.WritePropertyName("priorPrescription");
        PriorPrescription.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dateEnded":
          DateEnded = reader.GetString();
          break;

        case "_dateEnded":
          _DateEnded = new fhirCsR2.Models.Element();
          _DateEnded.DeserializeJson(ref reader, options);
          break;

        case "dateWritten":
          DateWritten = reader.GetString();
          break;

        case "_dateWritten":
          _DateWritten = new fhirCsR2.Models.Element();
          _DateWritten.DeserializeJson(ref reader, options);
          break;

        case "dispenseRequest":
          DispenseRequest = new fhirCsR2.Models.MedicationOrderDispenseRequest();
          DispenseRequest.DeserializeJson(ref reader, options);
          break;

        case "dosageInstruction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DosageInstruction = new List<MedicationOrderDosageInstruction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.MedicationOrderDosageInstruction objDosageInstruction = new fhirCsR2.Models.MedicationOrderDosageInstruction();
            objDosageInstruction.DeserializeJson(ref reader, options);
            DosageInstruction.Add(objDosageInstruction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DosageInstruction.Count == 0)
          {
            DosageInstruction = null;
          }

          break;

        case "encounter":
          Encounter = new fhirCsR2.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Identifier objIdentifier = new fhirCsR2.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "medicationCodeableConcept":
          MedicationCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          MedicationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "medicationReference":
          MedicationReference = new fhirCsR2.Models.Reference();
          MedicationReference.DeserializeJson(ref reader, options);
          break;

        case "note":
          Note = reader.GetString();
          break;

        case "_note":
          _Note = new fhirCsR2.Models.Element();
          _Note.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR2.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "prescriber":
          Prescriber = new fhirCsR2.Models.Reference();
          Prescriber.DeserializeJson(ref reader, options);
          break;

        case "priorPrescription":
          PriorPrescription = new fhirCsR2.Models.Reference();
          PriorPrescription.DeserializeJson(ref reader, options);
          break;

        case "reasonCodeableConcept":
          ReasonCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          ReasonCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "reasonReference":
          ReasonReference = new fhirCsR2.Models.Reference();
          ReasonReference.DeserializeJson(ref reader, options);
          break;

        case "reasonEnded":
          ReasonEnded = new fhirCsR2.Models.CodeableConcept();
          ReasonEnded.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "substitution":
          Substitution = new fhirCsR2.Models.MedicationOrderSubstitution();
          Substitution.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MedicationOrder.status field
  /// </summary>
  public static class MedicationOrderStatusCodes {
    public const string ACTIVE = "active";
    public const string ON_HOLD = "on-hold";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string STOPPED = "stopped";
    public const string DRAFT = "draft";
  }
}
