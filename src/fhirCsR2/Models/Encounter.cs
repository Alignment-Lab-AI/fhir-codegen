// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<EncounterStatusHistory>))]
  public class EncounterStatusHistory : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The time that the episode was in the specified status.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// planned | arrived | in-progress | onleave | finished | cancelled.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "period":
          Period = new fhirCsR2.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Encounter.statusHistory.status field
  /// </summary>
  public static class EncounterStatusHistoryStatusCodes {
    public const string PLANNED = "planned";
    public const string ARRIVED = "arrived";
    public const string IN_PROGRESS = "in-progress";
    public const string ONLEAVE = "onleave";
    public const string FINISHED = "finished";
    public const string CANCELLED = "cancelled";
  }
  /// <summary>
  /// The list of people responsible for providing the service.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<EncounterParticipant>))]
  public class EncounterParticipant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Persons involved in the encounter other than the patient.
    /// </summary>
    public Reference Individual { get; set; }
    /// <summary>
    /// The period of time that the specified participant was present during the encounter. These can overlap or be sub-sets of the overall encounters period.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// Role of participant in encounter.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (Individual != null)
      {
        writer.WritePropertyName("individual");
        Individual.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "individual":
          Individual = new fhirCsR2.Models.Reference();
          Individual.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR2.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objType = new fhirCsR2.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Details about the admission to a healthcare service.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<EncounterHospitalization>))]
  public class EncounterHospitalization : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// From where patient was admitted (physician referral, transfer).
    /// </summary>
    public CodeableConcept AdmitSource { get; set; }
    /// <summary>
    /// The admitting diagnosis field is used to record the diagnosis codes as reported by admitting practitioner. This could be different or in addition to the conditions reported as reason-condition(s) for the encounter.
    /// </summary>
    public List<Reference> AdmittingDiagnosis { get; set; }
    /// <summary>
    /// Location to which the patient is discharged.
    /// </summary>
    public Reference Destination { get; set; }
    /// <summary>
    /// Used to track patient's diet restrictions and/or preference. For a complete description of the nutrition needs of a patient during their stay, one should use the nutritionOrder resource which links to Encounter.
    /// </summary>
    public List<CodeableConcept> DietPreference { get; set; }
    /// <summary>
    /// The final diagnosis given a patient before release from the hospital after all testing, surgery, and workup are complete.
    /// </summary>
    public List<Reference> DischargeDiagnosis { get; set; }
    /// <summary>
    /// Category or kind of location after discharge.
    /// </summary>
    public CodeableConcept DischargeDisposition { get; set; }
    /// <summary>
    /// The location from which the patient came before admission.
    /// </summary>
    public Reference Origin { get; set; }
    /// <summary>
    /// Pre-admission identifier.
    /// </summary>
    public Identifier PreAdmissionIdentifier { get; set; }
    /// <summary>
    /// Whether this hospitalization is a readmission and why if known.
    /// </summary>
    public CodeableConcept ReAdmission { get; set; }
    /// <summary>
    /// Wheelchair, translator, stretcher, etc.
    /// </summary>
    public List<CodeableConcept> SpecialArrangement { get; set; }
    /// <summary>
    /// Special courtesies (VIP, board member).
    /// </summary>
    public List<CodeableConcept> SpecialCourtesy { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (PreAdmissionIdentifier != null)
      {
        writer.WritePropertyName("preAdmissionIdentifier");
        PreAdmissionIdentifier.SerializeJson(writer, options);
      }

      if (Origin != null)
      {
        writer.WritePropertyName("origin");
        Origin.SerializeJson(writer, options);
      }

      if (AdmitSource != null)
      {
        writer.WritePropertyName("admitSource");
        AdmitSource.SerializeJson(writer, options);
      }

      if ((AdmittingDiagnosis != null) && (AdmittingDiagnosis.Count != 0))
      {
        writer.WritePropertyName("admittingDiagnosis");
        writer.WriteStartArray();

        foreach (Reference valAdmittingDiagnosis in AdmittingDiagnosis)
        {
          valAdmittingDiagnosis.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ReAdmission != null)
      {
        writer.WritePropertyName("reAdmission");
        ReAdmission.SerializeJson(writer, options);
      }

      if ((DietPreference != null) && (DietPreference.Count != 0))
      {
        writer.WritePropertyName("dietPreference");
        writer.WriteStartArray();

        foreach (CodeableConcept valDietPreference in DietPreference)
        {
          valDietPreference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SpecialCourtesy != null) && (SpecialCourtesy.Count != 0))
      {
        writer.WritePropertyName("specialCourtesy");
        writer.WriteStartArray();

        foreach (CodeableConcept valSpecialCourtesy in SpecialCourtesy)
        {
          valSpecialCourtesy.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SpecialArrangement != null) && (SpecialArrangement.Count != 0))
      {
        writer.WritePropertyName("specialArrangement");
        writer.WriteStartArray();

        foreach (CodeableConcept valSpecialArrangement in SpecialArrangement)
        {
          valSpecialArrangement.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Destination != null)
      {
        writer.WritePropertyName("destination");
        Destination.SerializeJson(writer, options);
      }

      if (DischargeDisposition != null)
      {
        writer.WritePropertyName("dischargeDisposition");
        DischargeDisposition.SerializeJson(writer, options);
      }

      if ((DischargeDiagnosis != null) && (DischargeDiagnosis.Count != 0))
      {
        writer.WritePropertyName("dischargeDiagnosis");
        writer.WriteStartArray();

        foreach (Reference valDischargeDiagnosis in DischargeDiagnosis)
        {
          valDischargeDiagnosis.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "admitSource":
          AdmitSource = new fhirCsR2.Models.CodeableConcept();
          AdmitSource.DeserializeJson(ref reader, options);
          break;

        case "admittingDiagnosis":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AdmittingDiagnosis = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objAdmittingDiagnosis = new fhirCsR2.Models.Reference();
            objAdmittingDiagnosis.DeserializeJson(ref reader, options);
            AdmittingDiagnosis.Add(objAdmittingDiagnosis);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AdmittingDiagnosis.Count == 0)
          {
            AdmittingDiagnosis = null;
          }

          break;

        case "destination":
          Destination = new fhirCsR2.Models.Reference();
          Destination.DeserializeJson(ref reader, options);
          break;

        case "dietPreference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DietPreference = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objDietPreference = new fhirCsR2.Models.CodeableConcept();
            objDietPreference.DeserializeJson(ref reader, options);
            DietPreference.Add(objDietPreference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DietPreference.Count == 0)
          {
            DietPreference = null;
          }

          break;

        case "dischargeDiagnosis":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DischargeDiagnosis = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objDischargeDiagnosis = new fhirCsR2.Models.Reference();
            objDischargeDiagnosis.DeserializeJson(ref reader, options);
            DischargeDiagnosis.Add(objDischargeDiagnosis);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DischargeDiagnosis.Count == 0)
          {
            DischargeDiagnosis = null;
          }

          break;

        case "dischargeDisposition":
          DischargeDisposition = new fhirCsR2.Models.CodeableConcept();
          DischargeDisposition.DeserializeJson(ref reader, options);
          break;

        case "origin":
          Origin = new fhirCsR2.Models.Reference();
          Origin.DeserializeJson(ref reader, options);
          break;

        case "preAdmissionIdentifier":
          PreAdmissionIdentifier = new fhirCsR2.Models.Identifier();
          PreAdmissionIdentifier.DeserializeJson(ref reader, options);
          break;

        case "reAdmission":
          ReAdmission = new fhirCsR2.Models.CodeableConcept();
          ReAdmission.DeserializeJson(ref reader, options);
          break;

        case "specialArrangement":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SpecialArrangement = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objSpecialArrangement = new fhirCsR2.Models.CodeableConcept();
            objSpecialArrangement.DeserializeJson(ref reader, options);
            SpecialArrangement.Add(objSpecialArrangement);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SpecialArrangement.Count == 0)
          {
            SpecialArrangement = null;
          }

          break;

        case "specialCourtesy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SpecialCourtesy = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objSpecialCourtesy = new fhirCsR2.Models.CodeableConcept();
            objSpecialCourtesy.DeserializeJson(ref reader, options);
            SpecialCourtesy.Add(objSpecialCourtesy);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SpecialCourtesy.Count == 0)
          {
            SpecialCourtesy = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// List of locations where  the patient has been during this encounter.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<EncounterLocation>))]
  public class EncounterLocation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The location where the encounter takes place.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// Time period during which the patient was present at the location.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// The status of the participants' presence at the specified location during the period specified. If the participant is is no longer at the location, then the period will have an end date/time.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "location":
          Location = new fhirCsR2.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR2.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Encounter.location.status field
  /// </summary>
  public static class EncounterLocationStatusCodes {
    public const string PLANNED = "planned";
    public const string ACTIVE = "active";
    public const string RESERVED = "reserved";
    public const string COMPLETED = "completed";
  }
  /// <summary>
  /// An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<Encounter>))]
  public class Encounter : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Encounter";
    /// <summary>
    /// The appointment that scheduled this encounter.
    /// </summary>
    public Reference Appointment { get; set; }
    /// <summary>
    /// inpatient | outpatient | ambulatory | emergency +.
    /// </summary>
    public string Class { get; set; }
    /// <summary>
    /// Extension container element for Class
    /// </summary>
    public Element _Class { get; set; }
    /// <summary>
    /// Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care, and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
    /// </summary>
    public List<Reference> EpisodeOfCare { get; set; }
    /// <summary>
    /// Details about the admission to a healthcare service.
    /// </summary>
    public EncounterHospitalization Hospitalization { get; set; }
    /// <summary>
    /// Identifier(s) by which this encounter is known.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The referral request this encounter satisfies (incoming referral).
    /// </summary>
    public List<Reference> IncomingReferral { get; set; }
    /// <summary>
    /// Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
    /// </summary>
    public List<Reference> Indication { get; set; }
    /// <summary>
    /// Quantity of time the encounter lasted. This excludes the time during leaves of absence.
    /// </summary>
    public Quantity Length { get; set; }
    /// <summary>
    /// List of locations where  the patient has been during this encounter.
    /// </summary>
    public List<EncounterLocation> Location { get; set; }
    /// <summary>
    /// The list of people responsible for providing the service.
    /// </summary>
    public List<EncounterParticipant> Participant { get; set; }
    /// <summary>
    /// Another Encounter of which this encounter is a part of (administratively or in time).
    /// </summary>
    public Reference PartOf { get; set; }
    /// <summary>
    /// The patient present at the encounter.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// The start and end time of the encounter.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// Indicates the urgency of the encounter.
    /// </summary>
    public CodeableConcept Priority { get; set; }
    /// <summary>
    /// Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
    /// </summary>
    public List<CodeableConcept> Reason { get; set; }
    /// <summary>
    /// An organization that is in charge of maintaining the information of this Encounter (e.g. who maintains the report or the master service catalog item, etc.). This MAY be the same as the organization on the Patient record, however it could be different. This MAY not be not the Service Delivery Location's Organization.
    /// </summary>
    public Reference ServiceProvider { get; set; }
    /// <summary>
    /// planned | arrived | in-progress | onleave | finished | cancelled.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
    /// </summary>
    public List<EncounterStatusHistory> StatusHistory { get; set; }
    /// <summary>
    /// Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if ((StatusHistory != null) && (StatusHistory.Count != 0))
      {
        writer.WritePropertyName("statusHistory");
        writer.WriteStartArray();

        foreach (EncounterStatusHistory valStatusHistory in StatusHistory)
        {
          valStatusHistory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Class))
      {
        writer.WriteString("class", (string)Class!);
      }

      if (_Class != null)
      {
        writer.WritePropertyName("_class");
        _Class.SerializeJson(writer, options);
      }

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Priority != null)
      {
        writer.WritePropertyName("priority");
        Priority.SerializeJson(writer, options);
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if ((EpisodeOfCare != null) && (EpisodeOfCare.Count != 0))
      {
        writer.WritePropertyName("episodeOfCare");
        writer.WriteStartArray();

        foreach (Reference valEpisodeOfCare in EpisodeOfCare)
        {
          valEpisodeOfCare.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((IncomingReferral != null) && (IncomingReferral.Count != 0))
      {
        writer.WritePropertyName("incomingReferral");
        writer.WriteStartArray();

        foreach (Reference valIncomingReferral in IncomingReferral)
        {
          valIncomingReferral.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Participant != null) && (Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();

        foreach (EncounterParticipant valParticipant in Participant)
        {
          valParticipant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Appointment != null)
      {
        writer.WritePropertyName("appointment");
        Appointment.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (Length != null)
      {
        writer.WritePropertyName("length");
        Length.SerializeJson(writer, options);
      }

      if ((Reason != null) && (Reason.Count != 0))
      {
        writer.WritePropertyName("reason");
        writer.WriteStartArray();

        foreach (CodeableConcept valReason in Reason)
        {
          valReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Indication != null) && (Indication.Count != 0))
      {
        writer.WritePropertyName("indication");
        writer.WriteStartArray();

        foreach (Reference valIndication in Indication)
        {
          valIndication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Hospitalization != null)
      {
        writer.WritePropertyName("hospitalization");
        Hospitalization.SerializeJson(writer, options);
      }

      if ((Location != null) && (Location.Count != 0))
      {
        writer.WritePropertyName("location");
        writer.WriteStartArray();

        foreach (EncounterLocation valLocation in Location)
        {
          valLocation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ServiceProvider != null)
      {
        writer.WritePropertyName("serviceProvider");
        ServiceProvider.SerializeJson(writer, options);
      }

      if (PartOf != null)
      {
        writer.WritePropertyName("partOf");
        PartOf.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "appointment":
          Appointment = new fhirCsR2.Models.Reference();
          Appointment.DeserializeJson(ref reader, options);
          break;

        case "class":
          Class = reader.GetString();
          break;

        case "_class":
          _Class = new fhirCsR2.Models.Element();
          _Class.DeserializeJson(ref reader, options);
          break;

        case "episodeOfCare":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          EpisodeOfCare = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objEpisodeOfCare = new fhirCsR2.Models.Reference();
            objEpisodeOfCare.DeserializeJson(ref reader, options);
            EpisodeOfCare.Add(objEpisodeOfCare);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (EpisodeOfCare.Count == 0)
          {
            EpisodeOfCare = null;
          }

          break;

        case "hospitalization":
          Hospitalization = new fhirCsR2.Models.EncounterHospitalization();
          Hospitalization.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Identifier objIdentifier = new fhirCsR2.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "incomingReferral":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          IncomingReferral = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objIncomingReferral = new fhirCsR2.Models.Reference();
            objIncomingReferral.DeserializeJson(ref reader, options);
            IncomingReferral.Add(objIncomingReferral);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (IncomingReferral.Count == 0)
          {
            IncomingReferral = null;
          }

          break;

        case "indication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Indication = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objIndication = new fhirCsR2.Models.Reference();
            objIndication.DeserializeJson(ref reader, options);
            Indication.Add(objIndication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Indication.Count == 0)
          {
            Indication = null;
          }

          break;

        case "length":
          Length = new fhirCsR2.Models.Quantity();
          Length.DeserializeJson(ref reader, options);
          break;

        case "location":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Location = new List<EncounterLocation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.EncounterLocation objLocation = new fhirCsR2.Models.EncounterLocation();
            objLocation.DeserializeJson(ref reader, options);
            Location.Add(objLocation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Location.Count == 0)
          {
            Location = null;
          }

          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Participant = new List<EncounterParticipant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.EncounterParticipant objParticipant = new fhirCsR2.Models.EncounterParticipant();
            objParticipant.DeserializeJson(ref reader, options);
            Participant.Add(objParticipant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Participant.Count == 0)
          {
            Participant = null;
          }

          break;

        case "partOf":
          PartOf = new fhirCsR2.Models.Reference();
          PartOf.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR2.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR2.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "priority":
          Priority = new fhirCsR2.Models.CodeableConcept();
          Priority.DeserializeJson(ref reader, options);
          break;

        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objReason = new fhirCsR2.Models.CodeableConcept();
            objReason.DeserializeJson(ref reader, options);
            Reason.Add(objReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reason.Count == 0)
          {
            Reason = null;
          }

          break;

        case "serviceProvider":
          ServiceProvider = new fhirCsR2.Models.Reference();
          ServiceProvider.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "statusHistory":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          StatusHistory = new List<EncounterStatusHistory>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.EncounterStatusHistory objStatusHistory = new fhirCsR2.Models.EncounterStatusHistory();
            objStatusHistory.DeserializeJson(ref reader, options);
            StatusHistory.Add(objStatusHistory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (StatusHistory.Count == 0)
          {
            StatusHistory = null;
          }

          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objType = new fhirCsR2.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Encounter.class field
  /// </summary>
  public static class EncounterClassCodes {
    public const string INPATIENT = "inpatient";
    public const string OUTPATIENT = "outpatient";
    public const string AMBULATORY = "ambulatory";
    public const string EMERGENCY = "emergency";
    public const string HOME = "home";
    public const string FIELD = "field";
    public const string DAYTIME = "daytime";
    public const string VAL_VIRTUAL = "virtual";
    public const string OTHER = "other";
  }
  /// <summary>
  /// Code Values for the Encounter.status field
  /// </summary>
  public static class EncounterStatusCodes {
    public const string PLANNED = "planned";
    public const string ARRIVED = "arrived";
    public const string IN_PROGRESS = "in-progress";
    public const string ONLEAVE = "onleave";
    public const string FINISHED = "finished";
    public const string CANCELLED = "cancelled";
  }
}
