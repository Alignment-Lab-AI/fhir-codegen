// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// For mobile applications and automated route-finding knowing the exact location of the Location is required.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<LocationPosition>))]
  public class LocationPosition : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).
    /// </summary>
    public decimal? Altitude { get; set; }
    /// <summary>
    /// Extension container element for Altitude
    /// </summary>
    public Element _Altitude { get; set; }
    /// <summary>
    /// Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below).
    /// </summary>
    public decimal Latitude { get; set; }
    /// <summary>
    /// Extension container element for Latitude
    /// </summary>
    public Element _Latitude { get; set; }
    /// <summary>
    /// Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below).
    /// </summary>
    public decimal Longitude { get; set; }
    /// <summary>
    /// Extension container element for Longitude
    /// </summary>
    public Element _Longitude { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("longitude", Longitude);

      if (_Longitude != null)
      {
        writer.WritePropertyName("_longitude");
        _Longitude.SerializeJson(writer, options);
      }

      writer.WriteNumber("latitude", Latitude);

      if (_Latitude != null)
      {
        writer.WritePropertyName("_latitude");
        _Latitude.SerializeJson(writer, options);
      }

      if (Altitude != null)
      {
        writer.WriteNumber("altitude", (decimal)Altitude!);
      }

      if (_Altitude != null)
      {
        writer.WritePropertyName("_altitude");
        _Altitude.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "altitude":
          Altitude = reader.GetDecimal();
          break;

        case "_altitude":
          _Altitude = new fhirCsR2.Models.Element();
          _Altitude.DeserializeJson(ref reader, options);
          break;

        case "latitude":
          Latitude = reader.GetDecimal();
          break;

        case "_latitude":
          _Latitude = new fhirCsR2.Models.Element();
          _Latitude.DeserializeJson(ref reader, options);
          break;

        case "longitude":
          Longitude = reader.GetDecimal();
          break;

        case "_longitude":
          _Longitude = new fhirCsR2.Models.Element();
          _Longitude.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<Location>))]
  public class Location : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Location";
    /// <summary>
    /// If locations can be visited, we need to keep track of their address.
    /// </summary>
    public Address Address { get; set; }
    /// <summary>
    /// Humans need additional information to verify a correct location has been identified.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Organization label locations in registries, need to keep track of those.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Need to know who manages the location.
    /// </summary>
    public Reference ManagingOrganization { get; set; }
    /// <summary>
    /// When using a Location resource for scheduling or orders, we need to be able to refer to a class of Locations instead of a specific Location.
    /// </summary>
    public string Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public Element _Mode { get; set; }
    /// <summary>
    /// Name of the location as used by humans. Does not need to be unique.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// For purposes of location, display and identification, knowing which locations are located within other locations is important.
    /// </summary>
    public Reference PartOf { get; set; }
    /// <summary>
    /// For purposes of showing relevant locations in queries, we need to categorize locations.
    /// </summary>
    public CodeableConcept PhysicalType { get; set; }
    /// <summary>
    /// For mobile applications and automated route-finding knowing the exact location of the Location is required.
    /// </summary>
    public LocationPosition Position { get; set; }
    /// <summary>
    /// active | suspended | inactive.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
    /// </summary>
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// Indicates the type of function performed at the location.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Mode))
      {
        writer.WriteString("mode", (string)Mode!);
      }

      if (_Mode != null)
      {
        writer.WritePropertyName("_mode");
        _Mode.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Telecom != null) && (Telecom.Count != 0))
      {
        writer.WritePropertyName("telecom");
        writer.WriteStartArray();

        foreach (ContactPoint valTelecom in Telecom)
        {
          valTelecom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Address != null)
      {
        writer.WritePropertyName("address");
        Address.SerializeJson(writer, options);
      }

      if (PhysicalType != null)
      {
        writer.WritePropertyName("physicalType");
        PhysicalType.SerializeJson(writer, options);
      }

      if (Position != null)
      {
        writer.WritePropertyName("position");
        Position.SerializeJson(writer, options);
      }

      if (ManagingOrganization != null)
      {
        writer.WritePropertyName("managingOrganization");
        ManagingOrganization.SerializeJson(writer, options);
      }

      if (PartOf != null)
      {
        writer.WritePropertyName("partOf");
        PartOf.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "address":
          Address = new fhirCsR2.Models.Address();
          Address.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Identifier objIdentifier = new fhirCsR2.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "managingOrganization":
          ManagingOrganization = new fhirCsR2.Models.Reference();
          ManagingOrganization.DeserializeJson(ref reader, options);
          break;

        case "mode":
          Mode = reader.GetString();
          break;

        case "_mode":
          _Mode = new fhirCsR2.Models.Element();
          _Mode.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "partOf":
          PartOf = new fhirCsR2.Models.Reference();
          PartOf.DeserializeJson(ref reader, options);
          break;

        case "physicalType":
          PhysicalType = new fhirCsR2.Models.CodeableConcept();
          PhysicalType.DeserializeJson(ref reader, options);
          break;

        case "position":
          Position = new fhirCsR2.Models.LocationPosition();
          Position.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "telecom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Telecom = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContactPoint objTelecom = new fhirCsR2.Models.ContactPoint();
            objTelecom.DeserializeJson(ref reader, options);
            Telecom.Add(objTelecom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Telecom.Count == 0)
          {
            Telecom = null;
          }

          break;

        case "type":
          Type = new fhirCsR2.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Location.mode field
  /// </summary>
  public static class LocationModeCodes {
    public const string INSTANCE = "instance";
    public const string KIND = "kind";
  }
  /// <summary>
  /// Code Values for the Location.status field
  /// </summary>
  public static class LocationStatusCodes {
    public const string ACTIVE = "active";
    public const string SUSPENDED = "suspended";
    public const string INACTIVE = "inactive";
  }
}
