// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// The adjudications results.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponseItemAdjudication>))]
  public class ClaimResponseItemAdjudication : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Monetary amount associated with the code.
    /// </summary>
    public Quantity Amount { get; set; }
    /// <summary>
    /// Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    public Coding Code { get; set; }
    /// <summary>
    /// A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
    /// </summary>
    public decimal? Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (Value != null)
      {
        writer.WriteNumber("value", (decimal)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new fhirCsR2.Models.Quantity();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR2.Models.Coding();
          Code.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetDecimal();
          break;

        case "_value":
          _Value = new fhirCsR2.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The adjudications results.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponseItemDetailAdjudication>))]
  public class ClaimResponseItemDetailAdjudication : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Monetary amount associated with the code.
    /// </summary>
    public Quantity Amount { get; set; }
    /// <summary>
    /// Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    public Coding Code { get; set; }
    /// <summary>
    /// A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
    /// </summary>
    public decimal? Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (Value != null)
      {
        writer.WriteNumber("value", (decimal)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new fhirCsR2.Models.Quantity();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR2.Models.Coding();
          Code.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetDecimal();
          break;

        case "_value":
          _Value = new fhirCsR2.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The adjudications results.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponseItemDetailSubDetailAdjudication>))]
  public class ClaimResponseItemDetailSubDetailAdjudication : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Monetary amount associated with the code.
    /// </summary>
    public Quantity Amount { get; set; }
    /// <summary>
    /// Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    public Coding Code { get; set; }
    /// <summary>
    /// A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
    /// </summary>
    public decimal? Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (Value != null)
      {
        writer.WriteNumber("value", (decimal)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new fhirCsR2.Models.Quantity();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR2.Models.Coding();
          Code.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetDecimal();
          break;

        case "_value":
          _Value = new fhirCsR2.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The third tier service adjudications for submitted services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponseItemDetailSubDetail>))]
  public class ClaimResponseItemDetailSubDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ClaimResponseItemDetailSubDetailAdjudication> Adjudication { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    public uint SequenceLinkId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequenceLinkId", SequenceLinkId);

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemDetailSubDetailAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemDetailSubDetailAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimResponseItemDetailSubDetailAdjudication objAdjudication = new fhirCsR2.Models.ClaimResponseItemDetailSubDetailAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "sequenceLinkId":
          SequenceLinkId = reader.GetUInt32();
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The second tier service adjudications for submitted services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponseItemDetail>))]
  public class ClaimResponseItemDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ClaimResponseItemDetailAdjudication> Adjudication { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    public uint SequenceLinkId { get; set; }
    /// <summary>
    /// The third tier service adjudications for submitted services.
    /// </summary>
    public List<ClaimResponseItemDetailSubDetail> SubDetail { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequenceLinkId", SequenceLinkId);

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemDetailAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SubDetail != null) && (SubDetail.Count != 0))
      {
        writer.WritePropertyName("subDetail");
        writer.WriteStartArray();

        foreach (ClaimResponseItemDetailSubDetail valSubDetail in SubDetail)
        {
          valSubDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemDetailAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimResponseItemDetailAdjudication objAdjudication = new fhirCsR2.Models.ClaimResponseItemDetailAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "sequenceLinkId":
          SequenceLinkId = reader.GetUInt32();
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubDetail = new List<ClaimResponseItemDetailSubDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimResponseItemDetailSubDetail objSubDetail = new fhirCsR2.Models.ClaimResponseItemDetailSubDetail();
            objSubDetail.DeserializeJson(ref reader, options);
            SubDetail.Add(objSubDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubDetail.Count == 0)
          {
            SubDetail = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The first tier service adjudications for submitted services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponseItem>))]
  public class ClaimResponseItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// The second tier service adjudications for submitted services.
    /// </summary>
    public List<ClaimResponseItemDetail> Detail { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    public uint SequenceLinkId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequenceLinkId", SequenceLinkId);

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (ClaimResponseItemDetail valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimResponseItemAdjudication objAdjudication = new fhirCsR2.Models.ClaimResponseItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<ClaimResponseItemDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimResponseItemDetail objDetail = new fhirCsR2.Models.ClaimResponseItemDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "sequenceLinkId":
          SequenceLinkId = reader.GetUInt32();
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The adjudications results.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponseAddItemAdjudication>))]
  public class ClaimResponseAddItemAdjudication : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Monetary amount associated with the code.
    /// </summary>
    public Quantity Amount { get; set; }
    /// <summary>
    /// Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    public Coding Code { get; set; }
    /// <summary>
    /// A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
    /// </summary>
    public decimal? Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (Value != null)
      {
        writer.WriteNumber("value", (decimal)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new fhirCsR2.Models.Quantity();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR2.Models.Coding();
          Code.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetDecimal();
          break;

        case "_value":
          _Value = new fhirCsR2.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The adjudications results.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponseAddItemDetailAdjudication>))]
  public class ClaimResponseAddItemDetailAdjudication : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Monetary amount associated with the code.
    /// </summary>
    public Quantity Amount { get; set; }
    /// <summary>
    /// Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    public Coding Code { get; set; }
    /// <summary>
    /// A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
    /// </summary>
    public decimal? Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (Value != null)
      {
        writer.WriteNumber("value", (decimal)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new fhirCsR2.Models.Quantity();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR2.Models.Coding();
          Code.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetDecimal();
          break;

        case "_value":
          _Value = new fhirCsR2.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The second tier service adjudications for payor added services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponseAddItemDetail>))]
  public class ClaimResponseAddItemDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ClaimResponseAddItemDetailAdjudication> Adjudication { get; set; }
    /// <summary>
    /// The fee charged for the professional service or product..
    /// </summary>
    public Quantity Fee { get; set; }
    /// <summary>
    /// A code to indicate the Professional Service or Product supplied.
    /// </summary>
    public Coding Service { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Service != null)
      {
        writer.WritePropertyName("service");
        Service.SerializeJson(writer, options);
      }

      if (Fee != null)
      {
        writer.WritePropertyName("fee");
        Fee.SerializeJson(writer, options);
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseAddItemDetailAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseAddItemDetailAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimResponseAddItemDetailAdjudication objAdjudication = new fhirCsR2.Models.ClaimResponseAddItemDetailAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "fee":
          Fee = new fhirCsR2.Models.Quantity();
          Fee.DeserializeJson(ref reader, options);
          break;

        case "service":
          Service = new fhirCsR2.Models.Coding();
          Service.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The first tier service adjudications for payor added services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponseAddItem>))]
  public class ClaimResponseAddItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudications results.
    /// </summary>
    public List<ClaimResponseAddItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// The second tier service adjudications for payor added services.
    /// </summary>
    public List<ClaimResponseAddItemDetail> Detail { get; set; }
    /// <summary>
    /// The fee charged for the professional service or product..
    /// </summary>
    public Quantity Fee { get; set; }
    /// <summary>
    /// A list of note references to the notes provided below.
    /// </summary>
    public List<uint> NoteNumberLinkId { get; set; }
    /// <summary>
    /// List of input service items which this service line is intended to replace.
    /// </summary>
    public List<uint> SequenceLinkId { get; set; }
    /// <summary>
    /// A code to indicate the Professional Service or Product supplied.
    /// </summary>
    public Coding Service { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((SequenceLinkId != null) && (SequenceLinkId.Count != 0))
      {
        writer.WritePropertyName("sequenceLinkId");
        writer.WriteStartArray();

        foreach (uint valSequenceLinkId in SequenceLinkId)
        {
          writer.WriteNumberValue(valSequenceLinkId);
        }

        writer.WriteEndArray();
      }

      if (Service != null)
      {
        writer.WritePropertyName("service");
        Service.SerializeJson(writer, options);
      }

      if (Fee != null)
      {
        writer.WritePropertyName("fee");
        Fee.SerializeJson(writer, options);
      }

      if ((NoteNumberLinkId != null) && (NoteNumberLinkId.Count != 0))
      {
        writer.WritePropertyName("noteNumberLinkId");
        writer.WriteStartArray();

        foreach (uint valNoteNumberLinkId in NoteNumberLinkId)
        {
          writer.WriteNumberValue(valNoteNumberLinkId);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseAddItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (ClaimResponseAddItemDetail valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseAddItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimResponseAddItemAdjudication objAdjudication = new fhirCsR2.Models.ClaimResponseAddItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<ClaimResponseAddItemDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimResponseAddItemDetail objDetail = new fhirCsR2.Models.ClaimResponseAddItemDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "fee":
          Fee = new fhirCsR2.Models.Quantity();
          Fee.DeserializeJson(ref reader, options);
          break;

        case "noteNumberLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumberLinkId = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumberLinkId.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumberLinkId.Count == 0)
          {
            NoteNumberLinkId = null;
          }

          break;

        case "sequenceLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SequenceLinkId = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SequenceLinkId.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SequenceLinkId.Count == 0)
          {
            SequenceLinkId = null;
          }

          break;

        case "service":
          Service = new fhirCsR2.Models.Coding();
          Service.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Mutually exclusive with Services Provided (Item).
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponseError>))]
  public class ClaimResponseError : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An error code,froma specified code system, which details why the claim could not be adjudicated.
    /// </summary>
    public Coding Code { get; set; }
    /// <summary>
    /// The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
    /// </summary>
    public uint? DetailSequenceLinkId { get; set; }
    /// <summary>
    /// The sequence number of the line item submitted which contains the error. This value is omitted when the error is elsewhere.
    /// </summary>
    public uint? SequenceLinkId { get; set; }
    /// <summary>
    /// The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
    /// </summary>
    public uint? SubdetailSequenceLinkId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (SequenceLinkId != null)
      {
        writer.WriteNumber("sequenceLinkId", (uint)SequenceLinkId!);
      }

      if (DetailSequenceLinkId != null)
      {
        writer.WriteNumber("detailSequenceLinkId", (uint)DetailSequenceLinkId!);
      }

      if (SubdetailSequenceLinkId != null)
      {
        writer.WriteNumber("subdetailSequenceLinkId", (uint)SubdetailSequenceLinkId!);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR2.Models.Coding();
          Code.DeserializeJson(ref reader, options);
          break;

        case "detailSequenceLinkId":
          DetailSequenceLinkId = reader.GetUInt32();
          break;

        case "sequenceLinkId":
          SequenceLinkId = reader.GetUInt32();
          break;

        case "subdetailSequenceLinkId":
          SubdetailSequenceLinkId = reader.GetUInt32();
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Note text.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponseNote>))]
  public class ClaimResponseNote : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An integer associated with each note which may be referred to from each service line item.
    /// </summary>
    public uint? Number { get; set; }
    /// <summary>
    /// The note text.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// The note purpose: Print/Display.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Number != null)
      {
        writer.WriteNumber("number", (uint)Number!);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "number":
          Number = reader.GetUInt32();
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR2.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR2.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Health care programs and insurers are significant payors of health service costs.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponseCoverage>))]
  public class ClaimResponseCoverage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The contract number of a business agreement which describes the terms and conditions.
    /// </summary>
    public string BusinessArrangement { get; set; }
    /// <summary>
    /// Extension container element for BusinessArrangement
    /// </summary>
    public Element _BusinessArrangement { get; set; }
    /// <summary>
    /// Used by downstream payers to determine what balance remains and the net payable.
    /// </summary>
    public Reference ClaimResponse { get; set; }
    /// <summary>
    /// Need to identify the issuer to target for processing and for coordination of benefit processing.
    /// </summary>
    public Reference Coverage { get; set; }
    /// <summary>
    /// To identify which coverage is being adjudicated.
    /// </summary>
    public bool Focal { get; set; }
    /// <summary>
    /// Extension container element for Focal
    /// </summary>
    public Element _Focal { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// To provide any pre-determination or prior authorization reference.
    /// </summary>
    public List<string> PreAuthRef { get; set; }
    /// <summary>
    /// Extension container element for PreAuthRef
    /// </summary>
    public List<Element> _PreAuthRef { get; set; }
    /// <summary>
    /// To determine the relationship between the patient and the subscriber.
    /// </summary>
    public Coding Relationship { get; set; }
    /// <summary>
    /// To maintain order of the coverages.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      writer.WriteBoolean("focal", Focal);

      if (_Focal != null)
      {
        writer.WritePropertyName("_focal");
        _Focal.SerializeJson(writer, options);
      }

      if (Coverage != null)
      {
        writer.WritePropertyName("coverage");
        Coverage.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(BusinessArrangement))
      {
        writer.WriteString("businessArrangement", (string)BusinessArrangement!);
      }

      if (_BusinessArrangement != null)
      {
        writer.WritePropertyName("_businessArrangement");
        _BusinessArrangement.SerializeJson(writer, options);
      }

      if (Relationship != null)
      {
        writer.WritePropertyName("relationship");
        Relationship.SerializeJson(writer, options);
      }

      if ((PreAuthRef != null) && (PreAuthRef.Count != 0))
      {
        writer.WritePropertyName("preAuthRef");
        writer.WriteStartArray();

        foreach (string valPreAuthRef in PreAuthRef)
        {
          writer.WriteStringValue(valPreAuthRef);
        }

        writer.WriteEndArray();
      }

      if ((_PreAuthRef != null) && (_PreAuthRef.Count != 0))
      {
        writer.WritePropertyName("_preAuthRef");
        writer.WriteStartArray();

        foreach (Element val_PreAuthRef in _PreAuthRef)
        {
          val_PreAuthRef.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ClaimResponse != null)
      {
        writer.WritePropertyName("claimResponse");
        ClaimResponse.SerializeJson(writer, options);
      }

      if (OriginalRuleset != null)
      {
        writer.WritePropertyName("originalRuleset");
        OriginalRuleset.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "businessArrangement":
          BusinessArrangement = reader.GetString();
          break;

        case "_businessArrangement":
          _BusinessArrangement = new fhirCsR2.Models.Element();
          _BusinessArrangement.DeserializeJson(ref reader, options);
          break;

        case "claimResponse":
          ClaimResponse = new fhirCsR2.Models.Reference();
          ClaimResponse.DeserializeJson(ref reader, options);
          break;

        case "coverage":
          Coverage = new fhirCsR2.Models.Reference();
          Coverage.DeserializeJson(ref reader, options);
          break;

        case "focal":
          Focal = reader.GetBoolean();
          break;

        case "_focal":
          _Focal = new fhirCsR2.Models.Element();
          _Focal.DeserializeJson(ref reader, options);
          break;

        case "originalRuleset":
          OriginalRuleset = new fhirCsR2.Models.Coding();
          OriginalRuleset.DeserializeJson(ref reader, options);
          break;

        case "preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PreAuthRef = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            PreAuthRef.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PreAuthRef.Count == 0)
          {
            PreAuthRef = null;
          }

          break;

        case "_preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _PreAuthRef = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_PreAuthRef = new fhirCsR2.Models.Element();
            obj_PreAuthRef.DeserializeJson(ref reader, options);
            _PreAuthRef.Add(obj_PreAuthRef);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_PreAuthRef.Count == 0)
          {
            _PreAuthRef = null;
          }

          break;

        case "relationship":
          Relationship = new fhirCsR2.Models.Coding();
          Relationship.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This resource provides the adjudication details from the processing of a Claim resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimResponse>))]
  public class ClaimResponse : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ClaimResponse";
    /// <summary>
    /// The first tier service adjudications for payor added services.
    /// </summary>
    public List<ClaimResponseAddItem> AddItem { get; set; }
    /// <summary>
    /// Health care programs and insurers are significant payors of health service costs.
    /// </summary>
    public List<ClaimResponseCoverage> Coverage { get; set; }
    /// <summary>
    /// The date when the enclosed suite of services were performed or completed.
    /// </summary>
    public string Created { get; set; }
    /// <summary>
    /// Extension container element for Created
    /// </summary>
    public Element _Created { get; set; }
    /// <summary>
    /// A description of the status of the adjudication.
    /// </summary>
    public string Disposition { get; set; }
    /// <summary>
    /// Extension container element for Disposition
    /// </summary>
    public Element _Disposition { get; set; }
    /// <summary>
    /// Mutually exclusive with Services Provided (Item).
    /// </summary>
    public List<ClaimResponseError> Error { get; set; }
    /// <summary>
    /// The form to be used for printing the content.
    /// </summary>
    public Coding Form { get; set; }
    /// <summary>
    /// The Response business identifier.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The first tier service adjudications for submitted services.
    /// </summary>
    public List<ClaimResponseItem> Item { get; set; }
    /// <summary>
    /// Note text.
    /// </summary>
    public List<ClaimResponseNote> Note { get; set; }
    /// <summary>
    /// The Insurer who produced this adjudicated response.
    /// </summary>
    public Reference Organization { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// Transaction status: error, complete.
    /// </summary>
    public string Outcome { get; set; }
    /// <summary>
    /// Extension container element for Outcome
    /// </summary>
    public Element _Outcome { get; set; }
    /// <summary>
    /// Party to be reimbursed: Subscriber, provider, other.
    /// </summary>
    public Coding PayeeType { get; set; }
    /// <summary>
    /// Adjustment to the payment of this transaction which is not related to adjudication of this transaction.
    /// </summary>
    public Quantity PaymentAdjustment { get; set; }
    /// <summary>
    /// Reason for the payment adjustment.
    /// </summary>
    public Coding PaymentAdjustmentReason { get; set; }
    /// <summary>
    /// Payable less any payment adjustment.
    /// </summary>
    public Quantity PaymentAmount { get; set; }
    /// <summary>
    /// Estimated payment data.
    /// </summary>
    public string PaymentDate { get; set; }
    /// <summary>
    /// Extension container element for PaymentDate
    /// </summary>
    public Element _PaymentDate { get; set; }
    /// <summary>
    /// Payment identifier.
    /// </summary>
    public Identifier PaymentRef { get; set; }
    /// <summary>
    /// Original request resource referrence.
    /// </summary>
    public Reference Request { get; set; }
    /// <summary>
    /// The organization which is responsible for the services rendered to the patient.
    /// </summary>
    public Reference RequestOrganization { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    public Reference RequestProvider { get; set; }
    /// <summary>
    /// Status of funds reservation (For provider, for Patient, None).
    /// </summary>
    public Coding Reserved { get; set; }
    /// <summary>
    /// The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
    /// </summary>
    public Coding Ruleset { get; set; }
    /// <summary>
    /// Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductible).
    /// </summary>
    public Quantity TotalBenefit { get; set; }
    /// <summary>
    /// This is a check value that the receiver calculates and returns.
    /// </summary>
    public Quantity TotalCost { get; set; }
    /// <summary>
    /// The amount of deductible applied which was not allocated to any particular service line.
    /// </summary>
    public Quantity UnallocDeductable { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Request != null)
      {
        writer.WritePropertyName("request");
        Request.SerializeJson(writer, options);
      }

      if (Ruleset != null)
      {
        writer.WritePropertyName("ruleset");
        Ruleset.SerializeJson(writer, options);
      }

      if (OriginalRuleset != null)
      {
        writer.WritePropertyName("originalRuleset");
        OriginalRuleset.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Created))
      {
        writer.WriteString("created", (string)Created!);
      }

      if (_Created != null)
      {
        writer.WritePropertyName("_created");
        _Created.SerializeJson(writer, options);
      }

      if (Organization != null)
      {
        writer.WritePropertyName("organization");
        Organization.SerializeJson(writer, options);
      }

      if (RequestProvider != null)
      {
        writer.WritePropertyName("requestProvider");
        RequestProvider.SerializeJson(writer, options);
      }

      if (RequestOrganization != null)
      {
        writer.WritePropertyName("requestOrganization");
        RequestOrganization.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Outcome))
      {
        writer.WriteString("outcome", (string)Outcome!);
      }

      if (_Outcome != null)
      {
        writer.WritePropertyName("_outcome");
        _Outcome.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Disposition))
      {
        writer.WriteString("disposition", (string)Disposition!);
      }

      if (_Disposition != null)
      {
        writer.WritePropertyName("_disposition");
        _Disposition.SerializeJson(writer, options);
      }

      if (PayeeType != null)
      {
        writer.WritePropertyName("payeeType");
        PayeeType.SerializeJson(writer, options);
      }

      if ((Item != null) && (Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();

        foreach (ClaimResponseItem valItem in Item)
        {
          valItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AddItem != null) && (AddItem.Count != 0))
      {
        writer.WritePropertyName("addItem");
        writer.WriteStartArray();

        foreach (ClaimResponseAddItem valAddItem in AddItem)
        {
          valAddItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Error != null) && (Error.Count != 0))
      {
        writer.WritePropertyName("error");
        writer.WriteStartArray();

        foreach (ClaimResponseError valError in Error)
        {
          valError.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (TotalCost != null)
      {
        writer.WritePropertyName("totalCost");
        TotalCost.SerializeJson(writer, options);
      }

      if (UnallocDeductable != null)
      {
        writer.WritePropertyName("unallocDeductable");
        UnallocDeductable.SerializeJson(writer, options);
      }

      if (TotalBenefit != null)
      {
        writer.WritePropertyName("totalBenefit");
        TotalBenefit.SerializeJson(writer, options);
      }

      if (PaymentAdjustment != null)
      {
        writer.WritePropertyName("paymentAdjustment");
        PaymentAdjustment.SerializeJson(writer, options);
      }

      if (PaymentAdjustmentReason != null)
      {
        writer.WritePropertyName("paymentAdjustmentReason");
        PaymentAdjustmentReason.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PaymentDate))
      {
        writer.WriteString("paymentDate", (string)PaymentDate!);
      }

      if (_PaymentDate != null)
      {
        writer.WritePropertyName("_paymentDate");
        _PaymentDate.SerializeJson(writer, options);
      }

      if (PaymentAmount != null)
      {
        writer.WritePropertyName("paymentAmount");
        PaymentAmount.SerializeJson(writer, options);
      }

      if (PaymentRef != null)
      {
        writer.WritePropertyName("paymentRef");
        PaymentRef.SerializeJson(writer, options);
      }

      if (Reserved != null)
      {
        writer.WritePropertyName("reserved");
        Reserved.SerializeJson(writer, options);
      }

      if (Form != null)
      {
        writer.WritePropertyName("form");
        Form.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (ClaimResponseNote valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Coverage != null) && (Coverage.Count != 0))
      {
        writer.WritePropertyName("coverage");
        writer.WriteStartArray();

        foreach (ClaimResponseCoverage valCoverage in Coverage)
        {
          valCoverage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "addItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AddItem = new List<ClaimResponseAddItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimResponseAddItem objAddItem = new fhirCsR2.Models.ClaimResponseAddItem();
            objAddItem.DeserializeJson(ref reader, options);
            AddItem.Add(objAddItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AddItem.Count == 0)
          {
            AddItem = null;
          }

          break;

        case "coverage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Coverage = new List<ClaimResponseCoverage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimResponseCoverage objCoverage = new fhirCsR2.Models.ClaimResponseCoverage();
            objCoverage.DeserializeJson(ref reader, options);
            Coverage.Add(objCoverage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Coverage.Count == 0)
          {
            Coverage = null;
          }

          break;

        case "created":
          Created = reader.GetString();
          break;

        case "_created":
          _Created = new fhirCsR2.Models.Element();
          _Created.DeserializeJson(ref reader, options);
          break;

        case "disposition":
          Disposition = reader.GetString();
          break;

        case "_disposition":
          _Disposition = new fhirCsR2.Models.Element();
          _Disposition.DeserializeJson(ref reader, options);
          break;

        case "error":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Error = new List<ClaimResponseError>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimResponseError objError = new fhirCsR2.Models.ClaimResponseError();
            objError.DeserializeJson(ref reader, options);
            Error.Add(objError);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Error.Count == 0)
          {
            Error = null;
          }

          break;

        case "form":
          Form = new fhirCsR2.Models.Coding();
          Form.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Identifier objIdentifier = new fhirCsR2.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Item = new List<ClaimResponseItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimResponseItem objItem = new fhirCsR2.Models.ClaimResponseItem();
            objItem.DeserializeJson(ref reader, options);
            Item.Add(objItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Item.Count == 0)
          {
            Item = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<ClaimResponseNote>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimResponseNote objNote = new fhirCsR2.Models.ClaimResponseNote();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "organization":
          Organization = new fhirCsR2.Models.Reference();
          Organization.DeserializeJson(ref reader, options);
          break;

        case "originalRuleset":
          OriginalRuleset = new fhirCsR2.Models.Coding();
          OriginalRuleset.DeserializeJson(ref reader, options);
          break;

        case "outcome":
          Outcome = reader.GetString();
          break;

        case "_outcome":
          _Outcome = new fhirCsR2.Models.Element();
          _Outcome.DeserializeJson(ref reader, options);
          break;

        case "payeeType":
          PayeeType = new fhirCsR2.Models.Coding();
          PayeeType.DeserializeJson(ref reader, options);
          break;

        case "paymentAdjustment":
          PaymentAdjustment = new fhirCsR2.Models.Quantity();
          PaymentAdjustment.DeserializeJson(ref reader, options);
          break;

        case "paymentAdjustmentReason":
          PaymentAdjustmentReason = new fhirCsR2.Models.Coding();
          PaymentAdjustmentReason.DeserializeJson(ref reader, options);
          break;

        case "paymentAmount":
          PaymentAmount = new fhirCsR2.Models.Quantity();
          PaymentAmount.DeserializeJson(ref reader, options);
          break;

        case "paymentDate":
          PaymentDate = reader.GetString();
          break;

        case "_paymentDate":
          _PaymentDate = new fhirCsR2.Models.Element();
          _PaymentDate.DeserializeJson(ref reader, options);
          break;

        case "paymentRef":
          PaymentRef = new fhirCsR2.Models.Identifier();
          PaymentRef.DeserializeJson(ref reader, options);
          break;

        case "request":
          Request = new fhirCsR2.Models.Reference();
          Request.DeserializeJson(ref reader, options);
          break;

        case "requestOrganization":
          RequestOrganization = new fhirCsR2.Models.Reference();
          RequestOrganization.DeserializeJson(ref reader, options);
          break;

        case "requestProvider":
          RequestProvider = new fhirCsR2.Models.Reference();
          RequestProvider.DeserializeJson(ref reader, options);
          break;

        case "reserved":
          Reserved = new fhirCsR2.Models.Coding();
          Reserved.DeserializeJson(ref reader, options);
          break;

        case "ruleset":
          Ruleset = new fhirCsR2.Models.Coding();
          Ruleset.DeserializeJson(ref reader, options);
          break;

        case "totalBenefit":
          TotalBenefit = new fhirCsR2.Models.Quantity();
          TotalBenefit.DeserializeJson(ref reader, options);
          break;

        case "totalCost":
          TotalCost = new fhirCsR2.Models.Quantity();
          TotalCost.DeserializeJson(ref reader, options);
          break;

        case "unallocDeductable":
          UnallocDeductable = new fhirCsR2.Models.Quantity();
          UnallocDeductable.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ClaimResponse.outcome field
  /// </summary>
  public static class ClaimResponseOutcomeCodes {
    public const string COMPLETE = "complete";
    public const string ERROR = "error";
    public static HashSet<string> Values = new HashSet<string>() {
      "complete",
      "error",
    };
  }
}
