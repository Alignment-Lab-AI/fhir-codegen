// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptContact>))]
  public class TestScriptContact : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The name of an individual to contact regarding the Test Script.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if ((Telecom != null) && (Telecom.Count != 0))
      {
        writer.WritePropertyName("telecom");
        writer.WriteStartArray();

        foreach (ContactPoint valTelecom in Telecom)
        {
          valTelecom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "telecom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Telecom = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContactPoint objTelecom = new fhirCsR2.Models.ContactPoint();
            objTelecom.DeserializeJson(ref reader, options);
            Telecom.Add(objTelecom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Telecom.Count == 0)
          {
            Telecom = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A link to the FHIR specification that this test is covering.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptMetadataLink>))]
  public class TestScriptMetadataLink : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Short description of the link.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// URL to a particular requirement or feature within the FHIR specification.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptMetadataCapability>))]
  public class TestScriptMetadataCapability : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Minimum conformance required of server for test script to execute successfully.   If server does not meet at a minimum the reference conformance definition, then all tests in this script are skipped.
    /// </summary>
    public Reference Conformance { get; set; }
    /// <summary>
    /// Description of the capabilities that this test script is requiring the server to support.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Which server these requirements apply to.
    /// </summary>
    public int? Destination { get; set; }
    /// <summary>
    /// Extension container element for Destination
    /// </summary>
    public Element _Destination { get; set; }
    /// <summary>
    /// Links to the FHIR specification that describes this interaction and the resources involved in more detail.
    /// </summary>
    public List<string> Link { get; set; }
    /// <summary>
    /// Extension container element for Link
    /// </summary>
    public List<Element> _Link { get; set; }
    /// <summary>
    /// Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
    /// </summary>
    public bool? Required { get; set; }
    /// <summary>
    /// Extension container element for Required
    /// </summary>
    public Element _Required { get; set; }
    /// <summary>
    /// Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
    /// </summary>
    public bool? Validated { get; set; }
    /// <summary>
    /// Extension container element for Validated
    /// </summary>
    public Element _Validated { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Required != null)
      {
        writer.WriteBoolean("required", (bool)Required!);
      }

      if (_Required != null)
      {
        writer.WritePropertyName("_required");
        _Required.SerializeJson(writer, options);
      }

      if (Validated != null)
      {
        writer.WriteBoolean("validated", (bool)Validated!);
      }

      if (_Validated != null)
      {
        writer.WritePropertyName("_validated");
        _Validated.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Destination != null)
      {
        writer.WriteNumber("destination", (int)Destination!);
      }

      if (_Destination != null)
      {
        writer.WritePropertyName("_destination");
        _Destination.SerializeJson(writer, options);
      }

      if ((Link != null) && (Link.Count != 0))
      {
        writer.WritePropertyName("link");
        writer.WriteStartArray();

        foreach (string valLink in Link)
        {
          writer.WriteStringValue(valLink);
        }

        writer.WriteEndArray();
      }

      if ((_Link != null) && (_Link.Count != 0))
      {
        writer.WritePropertyName("_link");
        writer.WriteStartArray();

        foreach (Element val_Link in _Link)
        {
          val_Link.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Conformance != null)
      {
        writer.WritePropertyName("conformance");
        Conformance.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "conformance":
          Conformance = new fhirCsR2.Models.Reference();
          Conformance.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "destination":
          Destination = reader.GetInt32();
          break;

        case "_destination":
          _Destination = new fhirCsR2.Models.Element();
          _Destination.DeserializeJson(ref reader, options);
          break;

        case "link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Link = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Link.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Link.Count == 0)
          {
            Link = null;
          }

          break;

        case "_link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Link = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Link = new fhirCsR2.Models.Element();
            obj_Link.DeserializeJson(ref reader, options);
            _Link.Add(obj_Link);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Link.Count == 0)
          {
            _Link = null;
          }

          break;

        case "required":
          Required = reader.GetBoolean();
          break;

        case "_required":
          _Required = new fhirCsR2.Models.Element();
          _Required.DeserializeJson(ref reader, options);
          break;

        case "validated":
          Validated = reader.GetBoolean();
          break;

        case "_validated":
          _Validated = new fhirCsR2.Models.Element();
          _Validated.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The required capability must exist and are assumed to function correctly on the FHIR server being tested.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptMetadata>))]
  public class TestScriptMetadata : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
    /// </summary>
    public List<TestScriptMetadataCapability> Capability { get; set; }
    /// <summary>
    /// A link to the FHIR specification that this test is covering.
    /// </summary>
    public List<TestScriptMetadataLink> Link { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Link != null) && (Link.Count != 0))
      {
        writer.WritePropertyName("link");
        writer.WriteStartArray();

        foreach (TestScriptMetadataLink valLink in Link)
        {
          valLink.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Capability != null) && (Capability.Count != 0))
      {
        writer.WritePropertyName("capability");
        writer.WriteStartArray();

        foreach (TestScriptMetadataCapability valCapability in Capability)
        {
          valCapability.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "capability":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Capability = new List<TestScriptMetadataCapability>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.TestScriptMetadataCapability objCapability = new fhirCsR2.Models.TestScriptMetadataCapability();
            objCapability.DeserializeJson(ref reader, options);
            Capability.Add(objCapability);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Capability.Count == 0)
          {
            Capability = null;
          }

          break;

        case "link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Link = new List<TestScriptMetadataLink>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.TestScriptMetadataLink objLink = new fhirCsR2.Models.TestScriptMetadataLink();
            objLink.DeserializeJson(ref reader, options);
            Link.Add(objLink);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Link.Count == 0)
          {
            Link = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptFixture>))]
  public class TestScriptFixture : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
    /// </summary>
    public bool? Autocreate { get; set; }
    /// <summary>
    /// Extension container element for Autocreate
    /// </summary>
    public Element _Autocreate { get; set; }
    /// <summary>
    /// Whether or not to implicitly delete the fixture during teardown If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
    /// </summary>
    public bool? Autodelete { get; set; }
    /// <summary>
    /// Extension container element for Autodelete
    /// </summary>
    public Element _Autodelete { get; set; }
    /// <summary>
    /// Reference to the resource (containing the contents of the resource needed for operations).
    /// </summary>
    public Reference Resource { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Autocreate != null)
      {
        writer.WriteBoolean("autocreate", (bool)Autocreate!);
      }

      if (_Autocreate != null)
      {
        writer.WritePropertyName("_autocreate");
        _Autocreate.SerializeJson(writer, options);
      }

      if (Autodelete != null)
      {
        writer.WriteBoolean("autodelete", (bool)Autodelete!);
      }

      if (_Autodelete != null)
      {
        writer.WritePropertyName("_autodelete");
        _Autodelete.SerializeJson(writer, options);
      }

      if (Resource != null)
      {
        writer.WritePropertyName("resource");
        Resource.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "autocreate":
          Autocreate = reader.GetBoolean();
          break;

        case "_autocreate":
          _Autocreate = new fhirCsR2.Models.Element();
          _Autocreate.DeserializeJson(ref reader, options);
          break;

        case "autodelete":
          Autodelete = reader.GetBoolean();
          break;

        case "_autodelete":
          _Autodelete = new fhirCsR2.Models.Element();
          _Autodelete.DeserializeJson(ref reader, options);
          break;

        case "resource":
          Resource = new fhirCsR2.Models.Reference();
          Resource.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Variable is set based either on element value in response body or on header field value in the response headers.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptVariable>))]
  public class TestScriptVariable : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
    /// </summary>
    public string HeaderField { get; set; }
    /// <summary>
    /// Extension container element for HeaderField
    /// </summary>
    public Element _HeaderField { get; set; }
    /// <summary>
    /// Descriptive name for this variable.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// XPath or JSONPath against the fixture body.  When variables are defined, either headerField must be specified or path, but not both.
    /// </summary>
    public string Path { get; set; }
    /// <summary>
    /// Extension container element for Path
    /// </summary>
    public Element _Path { get; set; }
    /// <summary>
    /// Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
    /// </summary>
    public string SourceId { get; set; }
    /// <summary>
    /// Extension container element for SourceId
    /// </summary>
    public Element _SourceId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(HeaderField))
      {
        writer.WriteString("headerField", (string)HeaderField!);
      }

      if (_HeaderField != null)
      {
        writer.WritePropertyName("_headerField");
        _HeaderField.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Path))
      {
        writer.WriteString("path", (string)Path!);
      }

      if (_Path != null)
      {
        writer.WritePropertyName("_path");
        _Path.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SourceId))
      {
        writer.WriteString("sourceId", (string)SourceId!);
      }

      if (_SourceId != null)
      {
        writer.WritePropertyName("_sourceId");
        _SourceId.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "headerField":
          HeaderField = reader.GetString();
          break;

        case "_headerField":
          _HeaderField = new fhirCsR2.Models.Element();
          _HeaderField.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "path":
          Path = reader.GetString();
          break;

        case "_path":
          _Path = new fhirCsR2.Models.Element();
          _Path.DeserializeJson(ref reader, options);
          break;

        case "sourceId":
          SourceId = reader.GetString();
          break;

        case "_sourceId":
          _SourceId = new fhirCsR2.Models.Element();
          _SourceId.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Header elements would be used to set HTTP headers.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptSetupActionOperationRequestHeader>))]
  public class TestScriptSetupActionOperationRequestHeader : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The HTTP header field e.g. "Accept".
    /// </summary>
    public string Field { get; set; }
    /// <summary>
    /// Extension container element for Field
    /// </summary>
    public Element _Field { get; set; }
    /// <summary>
    /// The value of the header e.g. "application/xml".
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Field))
      {
        writer.WriteString("field", (string)Field!);
      }

      if (_Field != null)
      {
        writer.WritePropertyName("_field");
        _Field.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "field":
          Field = reader.GetString();
          break;

        case "_field":
          _Field = new fhirCsR2.Models.Element();
          _Field.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR2.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The operation to perform.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptSetupActionOperation>))]
  public class TestScriptSetupActionOperation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The content-type or mime-type to use for RESTful operation in the 'Accept' header.
    /// </summary>
    public string Accept { get; set; }
    /// <summary>
    /// Extension container element for Accept
    /// </summary>
    public Element _Accept { get; set; }
    /// <summary>
    /// The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.
    /// </summary>
    public string ContentType { get; set; }
    /// <summary>
    /// Extension container element for ContentType
    /// </summary>
    public Element _ContentType { get; set; }
    /// <summary>
    /// The description would be used by test engines for tracking and reporting purposes.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Which server to perform the operation on.
    /// </summary>
    public int? Destination { get; set; }
    /// <summary>
    /// Extension container element for Destination
    /// </summary>
    public Element _Destination { get; set; }
    /// <summary>
    /// Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
    /// </summary>
    public bool? EncodeRequestUrl { get; set; }
    /// <summary>
    /// Extension container element for EncodeRequestUrl
    /// </summary>
    public Element _EncodeRequestUrl { get; set; }
    /// <summary>
    /// The label would be used for tracking/logging purposes by test engines.
    /// </summary>
    public string Label { get; set; }
    /// <summary>
    /// Extension container element for Label
    /// </summary>
    public Element _Label { get; set; }
    /// <summary>
    /// Path plus parameters after [type].  Used to set parts of the request URL explicitly.
    /// </summary>
    public string Params { get; set; }
    /// <summary>
    /// Extension container element for Params
    /// </summary>
    public Element _Params { get; set; }
    /// <summary>
    /// Header elements would be used to set HTTP headers.
    /// </summary>
    public List<TestScriptSetupActionOperationRequestHeader> RequestHeader { get; set; }
    /// <summary>
    /// The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.
    /// </summary>
    public string Resource { get; set; }
    /// <summary>
    /// Extension container element for Resource
    /// </summary>
    public Element _Resource { get; set; }
    /// <summary>
    /// The fixture id (maybe new) to map to the response.
    /// </summary>
    public string ResponseId { get; set; }
    /// <summary>
    /// Extension container element for ResponseId
    /// </summary>
    public Element _ResponseId { get; set; }
    /// <summary>
    /// The id of the fixture used as the body of a PUT or POST request.
    /// </summary>
    public string SourceId { get; set; }
    /// <summary>
    /// Extension container element for SourceId
    /// </summary>
    public Element _SourceId { get; set; }
    /// <summary>
    /// Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
    /// </summary>
    public string TargetId { get; set; }
    /// <summary>
    /// Extension container element for TargetId
    /// </summary>
    public Element _TargetId { get; set; }
    /// <summary>
    /// Server interaction or operation type.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Complete request URL.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Resource))
      {
        writer.WriteString("resource", (string)Resource!);
      }

      if (_Resource != null)
      {
        writer.WritePropertyName("_resource");
        _Resource.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Label))
      {
        writer.WriteString("label", (string)Label!);
      }

      if (_Label != null)
      {
        writer.WritePropertyName("_label");
        _Label.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Accept))
      {
        writer.WriteString("accept", (string)Accept!);
      }

      if (_Accept != null)
      {
        writer.WritePropertyName("_accept");
        _Accept.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ContentType))
      {
        writer.WriteString("contentType", (string)ContentType!);
      }

      if (_ContentType != null)
      {
        writer.WritePropertyName("_contentType");
        _ContentType.SerializeJson(writer, options);
      }

      if (Destination != null)
      {
        writer.WriteNumber("destination", (int)Destination!);
      }

      if (_Destination != null)
      {
        writer.WritePropertyName("_destination");
        _Destination.SerializeJson(writer, options);
      }

      if (EncodeRequestUrl != null)
      {
        writer.WriteBoolean("encodeRequestUrl", (bool)EncodeRequestUrl!);
      }

      if (_EncodeRequestUrl != null)
      {
        writer.WritePropertyName("_encodeRequestUrl");
        _EncodeRequestUrl.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Params))
      {
        writer.WriteString("params", (string)Params!);
      }

      if (_Params != null)
      {
        writer.WritePropertyName("_params");
        _Params.SerializeJson(writer, options);
      }

      if ((RequestHeader != null) && (RequestHeader.Count != 0))
      {
        writer.WritePropertyName("requestHeader");
        writer.WriteStartArray();

        foreach (TestScriptSetupActionOperationRequestHeader valRequestHeader in RequestHeader)
        {
          valRequestHeader.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ResponseId))
      {
        writer.WriteString("responseId", (string)ResponseId!);
      }

      if (_ResponseId != null)
      {
        writer.WritePropertyName("_responseId");
        _ResponseId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SourceId))
      {
        writer.WriteString("sourceId", (string)SourceId!);
      }

      if (_SourceId != null)
      {
        writer.WritePropertyName("_sourceId");
        _SourceId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TargetId))
      {
        writer.WriteString("targetId", (string)TargetId!);
      }

      if (_TargetId != null)
      {
        writer.WritePropertyName("_targetId");
        _TargetId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "accept":
          Accept = reader.GetString();
          break;

        case "_accept":
          _Accept = new fhirCsR2.Models.Element();
          _Accept.DeserializeJson(ref reader, options);
          break;

        case "contentType":
          ContentType = reader.GetString();
          break;

        case "_contentType":
          _ContentType = new fhirCsR2.Models.Element();
          _ContentType.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "destination":
          Destination = reader.GetInt32();
          break;

        case "_destination":
          _Destination = new fhirCsR2.Models.Element();
          _Destination.DeserializeJson(ref reader, options);
          break;

        case "encodeRequestUrl":
          EncodeRequestUrl = reader.GetBoolean();
          break;

        case "_encodeRequestUrl":
          _EncodeRequestUrl = new fhirCsR2.Models.Element();
          _EncodeRequestUrl.DeserializeJson(ref reader, options);
          break;

        case "label":
          Label = reader.GetString();
          break;

        case "_label":
          _Label = new fhirCsR2.Models.Element();
          _Label.DeserializeJson(ref reader, options);
          break;

        case "params":
          Params = reader.GetString();
          break;

        case "_params":
          _Params = new fhirCsR2.Models.Element();
          _Params.DeserializeJson(ref reader, options);
          break;

        case "requestHeader":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RequestHeader = new List<TestScriptSetupActionOperationRequestHeader>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.TestScriptSetupActionOperationRequestHeader objRequestHeader = new fhirCsR2.Models.TestScriptSetupActionOperationRequestHeader();
            objRequestHeader.DeserializeJson(ref reader, options);
            RequestHeader.Add(objRequestHeader);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RequestHeader.Count == 0)
          {
            RequestHeader = null;
          }

          break;

        case "resource":
          Resource = reader.GetString();
          break;

        case "_resource":
          _Resource = new fhirCsR2.Models.Element();
          _Resource.DeserializeJson(ref reader, options);
          break;

        case "responseId":
          ResponseId = reader.GetString();
          break;

        case "_responseId":
          _ResponseId = new fhirCsR2.Models.Element();
          _ResponseId.DeserializeJson(ref reader, options);
          break;

        case "sourceId":
          SourceId = reader.GetString();
          break;

        case "_sourceId":
          _SourceId = new fhirCsR2.Models.Element();
          _SourceId.DeserializeJson(ref reader, options);
          break;

        case "targetId":
          TargetId = reader.GetString();
          break;

        case "_targetId":
          _TargetId = new fhirCsR2.Models.Element();
          _TargetId.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR2.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.operation.accept field
  /// </summary>
  public static class TestScriptSetupActionOperationAcceptCodes {
    public const string XML = "xml";
    public const string JSON = "json";
    public static HashSet<string> Values = new HashSet<string>() {
      "xml",
      "json",
    };
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.operation.contentType field
  /// </summary>
  public static class TestScriptSetupActionOperationContentTypeCodes {
    public const string XML = "xml";
    public const string JSON = "json";
    public static HashSet<string> Values = new HashSet<string>() {
      "xml",
      "json",
    };
  }
  /// <summary>
  /// Evaluates the results of previous operations to determine if the server under test behaves appropriately.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptSetupActionAssert>))]
  public class TestScriptSetupActionAssert : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Id of fixture used to compare the "sourceId/path" evaluations to.
    /// </summary>
    public string CompareToSourceId { get; set; }
    /// <summary>
    /// Extension container element for CompareToSourceId
    /// </summary>
    public Element _CompareToSourceId { get; set; }
    /// <summary>
    /// XPath or JSONPath expression against fixture used to compare the "sourceId/path" evaluations to.
    /// </summary>
    public string CompareToSourcePath { get; set; }
    /// <summary>
    /// Extension container element for CompareToSourcePath
    /// </summary>
    public Element _CompareToSourcePath { get; set; }
    /// <summary>
    /// The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.
    /// </summary>
    public string ContentType { get; set; }
    /// <summary>
    /// Extension container element for ContentType
    /// </summary>
    public Element _ContentType { get; set; }
    /// <summary>
    /// The description would be used by test engines for tracking and reporting purposes.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The direction to use for the assertion.
    /// </summary>
    public string Direction { get; set; }
    /// <summary>
    /// Extension container element for Direction
    /// </summary>
    public Element _Direction { get; set; }
    /// <summary>
    /// The HTTP header field name e.g. 'Location'.
    /// </summary>
    public string HeaderField { get; set; }
    /// <summary>
    /// Extension container element for HeaderField
    /// </summary>
    public Element _HeaderField { get; set; }
    /// <summary>
    /// The label would be used for tracking/logging purposes by test engines.
    /// </summary>
    public string Label { get; set; }
    /// <summary>
    /// Extension container element for Label
    /// </summary>
    public Element _Label { get; set; }
    /// <summary>
    /// The ID of a fixture.  Asserts that the response contains at a minimumId the fixture specified by minimumId.
    /// </summary>
    public string MinimumId { get; set; }
    /// <summary>
    /// Extension container element for MinimumId
    /// </summary>
    public Element _MinimumId { get; set; }
    /// <summary>
    /// Whether or not the test execution performs validation on the bundle navigation links.
    /// </summary>
    public bool? NavigationLinks { get; set; }
    /// <summary>
    /// Extension container element for NavigationLinks
    /// </summary>
    public Element _NavigationLinks { get; set; }
    /// <summary>
    /// The operator type.
    /// </summary>
    public string Operator { get; set; }
    /// <summary>
    /// Extension container element for Operator
    /// </summary>
    public Element _Operator { get; set; }
    /// <summary>
    /// The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
    /// </summary>
    public string Path { get; set; }
    /// <summary>
    /// Extension container element for Path
    /// </summary>
    public Element _Path { get; set; }
    /// <summary>
    /// The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.
    /// </summary>
    public string Resource { get; set; }
    /// <summary>
    /// Extension container element for Resource
    /// </summary>
    public Element _Resource { get; set; }
    /// <summary>
    /// okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
    /// </summary>
    public string Response { get; set; }
    /// <summary>
    /// Extension container element for Response
    /// </summary>
    public Element _Response { get; set; }
    /// <summary>
    /// The value of the HTTP response code to be tested.
    /// </summary>
    public string ResponseCode { get; set; }
    /// <summary>
    /// Extension container element for ResponseCode
    /// </summary>
    public Element _ResponseCode { get; set; }
    /// <summary>
    /// Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
    /// </summary>
    public string SourceId { get; set; }
    /// <summary>
    /// Extension container element for SourceId
    /// </summary>
    public Element _SourceId { get; set; }
    /// <summary>
    /// The ID of the Profile to validate against.
    /// </summary>
    public string ValidateProfileId { get; set; }
    /// <summary>
    /// Extension container element for ValidateProfileId
    /// </summary>
    public Element _ValidateProfileId { get; set; }
    /// <summary>
    /// The value to compare to.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Whether or not the test execution will produce a warning only on error for this assert.
    /// </summary>
    public bool? WarningOnly { get; set; }
    /// <summary>
    /// Extension container element for WarningOnly
    /// </summary>
    public Element _WarningOnly { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Label))
      {
        writer.WriteString("label", (string)Label!);
      }

      if (_Label != null)
      {
        writer.WritePropertyName("_label");
        _Label.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Direction))
      {
        writer.WriteString("direction", (string)Direction!);
      }

      if (_Direction != null)
      {
        writer.WritePropertyName("_direction");
        _Direction.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CompareToSourceId))
      {
        writer.WriteString("compareToSourceId", (string)CompareToSourceId!);
      }

      if (_CompareToSourceId != null)
      {
        writer.WritePropertyName("_compareToSourceId");
        _CompareToSourceId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CompareToSourcePath))
      {
        writer.WriteString("compareToSourcePath", (string)CompareToSourcePath!);
      }

      if (_CompareToSourcePath != null)
      {
        writer.WritePropertyName("_compareToSourcePath");
        _CompareToSourcePath.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ContentType))
      {
        writer.WriteString("contentType", (string)ContentType!);
      }

      if (_ContentType != null)
      {
        writer.WritePropertyName("_contentType");
        _ContentType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(HeaderField))
      {
        writer.WriteString("headerField", (string)HeaderField!);
      }

      if (_HeaderField != null)
      {
        writer.WritePropertyName("_headerField");
        _HeaderField.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MinimumId))
      {
        writer.WriteString("minimumId", (string)MinimumId!);
      }

      if (_MinimumId != null)
      {
        writer.WritePropertyName("_minimumId");
        _MinimumId.SerializeJson(writer, options);
      }

      if (NavigationLinks != null)
      {
        writer.WriteBoolean("navigationLinks", (bool)NavigationLinks!);
      }

      if (_NavigationLinks != null)
      {
        writer.WritePropertyName("_navigationLinks");
        _NavigationLinks.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Operator))
      {
        writer.WriteString("operator", (string)Operator!);
      }

      if (_Operator != null)
      {
        writer.WritePropertyName("_operator");
        _Operator.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Path))
      {
        writer.WriteString("path", (string)Path!);
      }

      if (_Path != null)
      {
        writer.WritePropertyName("_path");
        _Path.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Resource))
      {
        writer.WriteString("resource", (string)Resource!);
      }

      if (_Resource != null)
      {
        writer.WritePropertyName("_resource");
        _Resource.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Response))
      {
        writer.WriteString("response", (string)Response!);
      }

      if (_Response != null)
      {
        writer.WritePropertyName("_response");
        _Response.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ResponseCode))
      {
        writer.WriteString("responseCode", (string)ResponseCode!);
      }

      if (_ResponseCode != null)
      {
        writer.WritePropertyName("_responseCode");
        _ResponseCode.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SourceId))
      {
        writer.WriteString("sourceId", (string)SourceId!);
      }

      if (_SourceId != null)
      {
        writer.WritePropertyName("_sourceId");
        _SourceId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValidateProfileId))
      {
        writer.WriteString("validateProfileId", (string)ValidateProfileId!);
      }

      if (_ValidateProfileId != null)
      {
        writer.WritePropertyName("_validateProfileId");
        _ValidateProfileId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (WarningOnly != null)
      {
        writer.WriteBoolean("warningOnly", (bool)WarningOnly!);
      }

      if (_WarningOnly != null)
      {
        writer.WritePropertyName("_warningOnly");
        _WarningOnly.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "compareToSourceId":
          CompareToSourceId = reader.GetString();
          break;

        case "_compareToSourceId":
          _CompareToSourceId = new fhirCsR2.Models.Element();
          _CompareToSourceId.DeserializeJson(ref reader, options);
          break;

        case "compareToSourcePath":
          CompareToSourcePath = reader.GetString();
          break;

        case "_compareToSourcePath":
          _CompareToSourcePath = new fhirCsR2.Models.Element();
          _CompareToSourcePath.DeserializeJson(ref reader, options);
          break;

        case "contentType":
          ContentType = reader.GetString();
          break;

        case "_contentType":
          _ContentType = new fhirCsR2.Models.Element();
          _ContentType.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "direction":
          Direction = reader.GetString();
          break;

        case "_direction":
          _Direction = new fhirCsR2.Models.Element();
          _Direction.DeserializeJson(ref reader, options);
          break;

        case "headerField":
          HeaderField = reader.GetString();
          break;

        case "_headerField":
          _HeaderField = new fhirCsR2.Models.Element();
          _HeaderField.DeserializeJson(ref reader, options);
          break;

        case "label":
          Label = reader.GetString();
          break;

        case "_label":
          _Label = new fhirCsR2.Models.Element();
          _Label.DeserializeJson(ref reader, options);
          break;

        case "minimumId":
          MinimumId = reader.GetString();
          break;

        case "_minimumId":
          _MinimumId = new fhirCsR2.Models.Element();
          _MinimumId.DeserializeJson(ref reader, options);
          break;

        case "navigationLinks":
          NavigationLinks = reader.GetBoolean();
          break;

        case "_navigationLinks":
          _NavigationLinks = new fhirCsR2.Models.Element();
          _NavigationLinks.DeserializeJson(ref reader, options);
          break;

        case "operator":
          Operator = reader.GetString();
          break;

        case "_operator":
          _Operator = new fhirCsR2.Models.Element();
          _Operator.DeserializeJson(ref reader, options);
          break;

        case "path":
          Path = reader.GetString();
          break;

        case "_path":
          _Path = new fhirCsR2.Models.Element();
          _Path.DeserializeJson(ref reader, options);
          break;

        case "resource":
          Resource = reader.GetString();
          break;

        case "_resource":
          _Resource = new fhirCsR2.Models.Element();
          _Resource.DeserializeJson(ref reader, options);
          break;

        case "response":
          Response = reader.GetString();
          break;

        case "_response":
          _Response = new fhirCsR2.Models.Element();
          _Response.DeserializeJson(ref reader, options);
          break;

        case "responseCode":
          ResponseCode = reader.GetString();
          break;

        case "_responseCode":
          _ResponseCode = new fhirCsR2.Models.Element();
          _ResponseCode.DeserializeJson(ref reader, options);
          break;

        case "sourceId":
          SourceId = reader.GetString();
          break;

        case "_sourceId":
          _SourceId = new fhirCsR2.Models.Element();
          _SourceId.DeserializeJson(ref reader, options);
          break;

        case "validateProfileId":
          ValidateProfileId = reader.GetString();
          break;

        case "_validateProfileId":
          _ValidateProfileId = new fhirCsR2.Models.Element();
          _ValidateProfileId.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR2.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        case "warningOnly":
          WarningOnly = reader.GetBoolean();
          break;

        case "_warningOnly":
          _WarningOnly = new fhirCsR2.Models.Element();
          _WarningOnly.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.assert.contentType field
  /// </summary>
  public static class TestScriptSetupActionAssertContentTypeCodes {
    public const string XML = "xml";
    public const string JSON = "json";
    public static HashSet<string> Values = new HashSet<string>() {
      "xml",
      "json",
    };
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.assert.direction field
  /// </summary>
  public static class TestScriptSetupActionAssertDirectionCodes {
    public const string RESPONSE = "response";
    public const string REQUEST = "request";
    public static HashSet<string> Values = new HashSet<string>() {
      "response",
      "request",
    };
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.assert.operator field
  /// </summary>
  public static class TestScriptSetupActionAssertOperatorCodes {
    public const string EQUALS = "equals";
    public const string NOTEQUALS = "notEquals";
    public const string VAL_IN = "in";
    public const string NOTIN = "notIn";
    public const string GREATERTHAN = "greaterThan";
    public const string LESSTHAN = "lessThan";
    public const string EMPTY = "empty";
    public const string NOTEMPTY = "notEmpty";
    public const string CONTAINS = "contains";
    public const string NOTCONTAINS = "notContains";
    public static HashSet<string> Values = new HashSet<string>() {
      "equals",
      "notEquals",
      "in",
      "notIn",
      "greaterThan",
      "lessThan",
      "empty",
      "notEmpty",
      "contains",
      "notContains",
    };
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.assert.response field
  /// </summary>
  public static class TestScriptSetupActionAssertResponseCodes {
    public const string OKAY = "okay";
    public const string CREATED = "created";
    public const string NOCONTENT = "noContent";
    public const string NOTMODIFIED = "notModified";
    public const string BAD = "bad";
    public const string FORBIDDEN = "forbidden";
    public const string NOTFOUND = "notFound";
    public const string METHODNOTALLOWED = "methodNotAllowed";
    public const string CONFLICT = "conflict";
    public const string GONE = "gone";
    public const string PRECONDITIONFAILED = "preconditionFailed";
    public const string UNPROCESSABLE = "unprocessable";
    public static HashSet<string> Values = new HashSet<string>() {
      "okay",
      "created",
      "noContent",
      "notModified",
      "bad",
      "forbidden",
      "notFound",
      "methodNotAllowed",
      "conflict",
      "gone",
      "preconditionFailed",
      "unprocessable",
    };
  }
  /// <summary>
  /// Action would contain either an operation or an assertion.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptSetupAction>))]
  public class TestScriptSetupAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Evaluates the results of previous operations to determine if the server under test behaves appropriately.
    /// </summary>
    public TestScriptSetupActionAssert Assert { get; set; }
    /// <summary>
    /// The operation to perform.
    /// </summary>
    public TestScriptSetupActionOperation Operation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Operation != null)
      {
        writer.WritePropertyName("operation");
        Operation.SerializeJson(writer, options);
      }

      if (Assert != null)
      {
        writer.WritePropertyName("assert");
        Assert.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "assert":
          Assert = new fhirCsR2.Models.TestScriptSetupActionAssert();
          Assert.DeserializeJson(ref reader, options);
          break;

        case "operation":
          Operation = new fhirCsR2.Models.TestScriptSetupActionOperation();
          Operation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A series of required setup operations before tests are executed.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptSetup>))]
  public class TestScriptSetup : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Action would contain either an operation or an assertion.
    /// </summary>
    public List<TestScriptSetupAction> Action { get; set; }
    /// <summary>
    /// Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
    /// </summary>
    public TestScriptMetadata Metadata { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Metadata != null)
      {
        writer.WritePropertyName("metadata");
        Metadata.SerializeJson(writer, options);
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (TestScriptSetupAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<TestScriptSetupAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.TestScriptSetupAction objAction = new fhirCsR2.Models.TestScriptSetupAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "metadata":
          Metadata = new fhirCsR2.Models.TestScriptMetadata();
          Metadata.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Action would contain either an operation or an assertion.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptTestAction>))]
  public class TestScriptTestAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Evaluates the results of previous operations to determine if the server under test behaves appropriately.
    /// </summary>
    public TestScriptSetupActionAssert Assert { get; set; }
    /// <summary>
    /// An operation would involve a REST request to a server.
    /// </summary>
    public TestScriptSetupActionOperation Operation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Operation != null)
      {
        writer.WritePropertyName("operation");
        Operation.SerializeJson(writer, options);
      }

      if (Assert != null)
      {
        writer.WritePropertyName("assert");
        Assert.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "assert":
          Assert = new fhirCsR2.Models.TestScriptSetupActionAssert();
          Assert.DeserializeJson(ref reader, options);
          break;

        case "operation":
          Operation = new fhirCsR2.Models.TestScriptSetupActionOperation();
          Operation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A test in this script.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptTest>))]
  public class TestScriptTest : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Action would contain either an operation or an assertion.
    /// </summary>
    public List<TestScriptTestAction> Action { get; set; }
    /// <summary>
    /// A short description of the test used by test engines for tracking and reporting purposes.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
    /// </summary>
    public TestScriptMetadata Metadata { get; set; }
    /// <summary>
    /// The name of this test used for tracking/logging purposes by test engines.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Metadata != null)
      {
        writer.WritePropertyName("metadata");
        Metadata.SerializeJson(writer, options);
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (TestScriptTestAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<TestScriptTestAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.TestScriptTestAction objAction = new fhirCsR2.Models.TestScriptTestAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "metadata":
          Metadata = new fhirCsR2.Models.TestScriptMetadata();
          Metadata.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The teardown action will only contain an operation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptTeardownAction>))]
  public class TestScriptTeardownAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An operation would involve a REST request to a server.
    /// </summary>
    public TestScriptSetupActionOperation Operation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Operation != null)
      {
        writer.WritePropertyName("operation");
        Operation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "operation":
          Operation = new fhirCsR2.Models.TestScriptSetupActionOperation();
          Operation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A series of operations required to clean up after the all the tests are executed (successfully or otherwise).
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScriptTeardown>))]
  public class TestScriptTeardown : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The teardown action will only contain an operation.
    /// </summary>
    public List<TestScriptTeardownAction> Action { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (TestScriptTeardownAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<TestScriptTeardownAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.TestScriptTeardownAction objAction = new fhirCsR2.Models.TestScriptTeardownAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<TestScript>))]
  public class TestScript : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "TestScript";
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    public List<TestScriptContact> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the Test Script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// The date this version of the test tcript was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the test cases change.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// A free text natural language description of the TestScript and its use.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Allows filtering of TestScripts that are appropriate for use vs. not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Extension container element for Experimental
    /// </summary>
    public Element _Experimental { get; set; }
    /// <summary>
    /// Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
    /// </summary>
    public List<TestScriptFixture> Fixture { get; set; }
    /// <summary>
    /// Identifier for the TestScript assigned for external purposes outside the context of FHIR.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// The required capability must exist and are assumed to function correctly on the FHIR server being tested.
    /// </summary>
    public TestScriptMetadata Metadata { get; set; }
    /// <summary>
    /// If the tests apply to more than one FHIR server (e.g. cross-server interoperability tests) then multiserver=true. Defaults to false if value is unspecified.
    /// </summary>
    public bool? Multiserver { get; set; }
    /// <summary>
    /// Extension container element for Multiserver
    /// </summary>
    public Element _Multiserver { get; set; }
    /// <summary>
    /// A free text natural language name identifying the TestScript.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Reference to the profile to be used for validation.
    /// </summary>
    public List<Reference> Profile { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the Test Script.  May also allow for contact.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// Explains why this Test Script is needed and why it's been constrained as it has.
    /// </summary>
    public string Requirements { get; set; }
    /// <summary>
    /// Extension container element for Requirements
    /// </summary>
    public Element _Requirements { get; set; }
    /// <summary>
    /// A series of required setup operations before tests are executed.
    /// </summary>
    public TestScriptSetup Setup { get; set; }
    /// <summary>
    /// Allows filtering of TestScripts that are appropriate for use vs. not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// A series of operations required to clean up after the all the tests are executed (successfully or otherwise).
    /// </summary>
    public TestScriptTeardown Teardown { get; set; }
    /// <summary>
    /// A test in this script.
    /// </summary>
    public List<TestScriptTest> Test { get; set; }
    /// <summary>
    /// An absolute URL that is used to identify this Test Script. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this Test Script is (or will be) published.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Assist in searching for appropriate content.
    /// </summary>
    public List<CodeableConcept> UseContext { get; set; }
    /// <summary>
    /// Variable is set based either on element value in response body or on header field value in the response headers.
    /// </summary>
    public List<TestScriptVariable> Variable { get; set; }
    /// <summary>
    /// There may be multiple resource versions of the TestScript that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (_Experimental != null)
      {
        writer.WritePropertyName("_experimental");
        _Experimental.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (TestScriptContact valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (CodeableConcept valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Requirements))
      {
        writer.WriteString("requirements", (string)Requirements!);
      }

      if (_Requirements != null)
      {
        writer.WritePropertyName("_requirements");
        _Requirements.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (Metadata != null)
      {
        writer.WritePropertyName("metadata");
        Metadata.SerializeJson(writer, options);
      }

      if (Multiserver != null)
      {
        writer.WriteBoolean("multiserver", (bool)Multiserver!);
      }

      if (_Multiserver != null)
      {
        writer.WritePropertyName("_multiserver");
        _Multiserver.SerializeJson(writer, options);
      }

      if ((Fixture != null) && (Fixture.Count != 0))
      {
        writer.WritePropertyName("fixture");
        writer.WriteStartArray();

        foreach (TestScriptFixture valFixture in Fixture)
        {
          valFixture.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Profile != null) && (Profile.Count != 0))
      {
        writer.WritePropertyName("profile");
        writer.WriteStartArray();

        foreach (Reference valProfile in Profile)
        {
          valProfile.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Variable != null) && (Variable.Count != 0))
      {
        writer.WritePropertyName("variable");
        writer.WriteStartArray();

        foreach (TestScriptVariable valVariable in Variable)
        {
          valVariable.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Setup != null)
      {
        writer.WritePropertyName("setup");
        Setup.SerializeJson(writer, options);
      }

      if ((Test != null) && (Test.Count != 0))
      {
        writer.WritePropertyName("test");
        writer.WriteStartArray();

        foreach (TestScriptTest valTest in Test)
        {
          valTest.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Teardown != null)
      {
        writer.WritePropertyName("teardown");
        Teardown.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<TestScriptContact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.TestScriptContact objContact = new fhirCsR2.Models.TestScriptContact();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR2.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR2.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "_experimental":
          _Experimental = new fhirCsR2.Models.Element();
          _Experimental.DeserializeJson(ref reader, options);
          break;

        case "fixture":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Fixture = new List<TestScriptFixture>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.TestScriptFixture objFixture = new fhirCsR2.Models.TestScriptFixture();
            objFixture.DeserializeJson(ref reader, options);
            Fixture.Add(objFixture);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Fixture.Count == 0)
          {
            Fixture = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR2.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "metadata":
          Metadata = new fhirCsR2.Models.TestScriptMetadata();
          Metadata.DeserializeJson(ref reader, options);
          break;

        case "multiserver":
          Multiserver = reader.GetBoolean();
          break;

        case "_multiserver":
          _Multiserver = new fhirCsR2.Models.Element();
          _Multiserver.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "profile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Profile = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objProfile = new fhirCsR2.Models.Reference();
            objProfile.DeserializeJson(ref reader, options);
            Profile.Add(objProfile);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Profile.Count == 0)
          {
            Profile = null;
          }

          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR2.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "requirements":
          Requirements = reader.GetString();
          break;

        case "_requirements":
          _Requirements = new fhirCsR2.Models.Element();
          _Requirements.DeserializeJson(ref reader, options);
          break;

        case "setup":
          Setup = new fhirCsR2.Models.TestScriptSetup();
          Setup.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "teardown":
          Teardown = new fhirCsR2.Models.TestScriptTeardown();
          Teardown.DeserializeJson(ref reader, options);
          break;

        case "test":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Test = new List<TestScriptTest>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.TestScriptTest objTest = new fhirCsR2.Models.TestScriptTest();
            objTest.DeserializeJson(ref reader, options);
            Test.Add(objTest);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Test.Count == 0)
          {
            Test = null;
          }

          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objUseContext = new fhirCsR2.Models.CodeableConcept();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "variable":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Variable = new List<TestScriptVariable>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.TestScriptVariable objVariable = new fhirCsR2.Models.TestScriptVariable();
            objVariable.DeserializeJson(ref reader, options);
            Variable.Add(objVariable);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Variable.Count == 0)
          {
            Variable = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR2.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the TestScript.status field
  /// </summary>
  public static class TestScriptStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
    };
  }
}
