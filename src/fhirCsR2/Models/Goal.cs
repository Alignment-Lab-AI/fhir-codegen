// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Outcome tracking is a key aspect of care planning.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<GoalOutcome>))]
  public class GoalOutcome : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Details of what's changed (or not changed).
    /// </summary>
    public CodeableConcept ResultCodeableConcept { get; set; }
    /// <summary>
    /// Details of what's changed (or not changed).
    /// </summary>
    public Reference ResultReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ResultCodeableConcept != null)
      {
        writer.WritePropertyName("resultCodeableConcept");
        ResultCodeableConcept.SerializeJson(writer, options);
      }

      if (ResultReference != null)
      {
        writer.WritePropertyName("resultReference");
        ResultReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "resultCodeableConcept":
          ResultCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          ResultCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "resultReference":
          ResultReference = new fhirCsR2.Models.Reference();
          ResultReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<Goal>))]
  public class Goal : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Goal";
    /// <summary>
    /// Allows specific goals to explicitly linked to the concerns they're dealing with - makes the goal more understandable.
    /// </summary>
    public List<Reference> Addresses { get; set; }
    /// <summary>
    /// Indicates whose goal this is - patient goal, practitioner goal, etc.
    /// </summary>
    public Reference Author { get; set; }
    /// <summary>
    /// Allows goals to be filtered and sorted.
    /// </summary>
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// Without a description of what's trying to be achieved, element has no purpose.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Need to allow connection to a wider workflow.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// There's a need to capture information about the goal that doesn't actually describe the goal.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Outcome tracking is a key aspect of care planning.
    /// </summary>
    public List<GoalOutcome> Outcome { get; set; }
    /// <summary>
    /// Used for sorting and presenting goals.
    /// </summary>
    public CodeableConcept Priority { get; set; }
    /// <summary>
    /// Goals can be established prior to there being an intention to start pursuing them; e.g. Goals for post-surgical recovery established prior to surgery.
    /// </summary>
    public string StartDate { get; set; }
    /// <summary>
    /// Extension container element for StartDate
    /// </summary>
    public Element _StartDate { get; set; }
    /// <summary>
    /// Goals can be established prior to there being an intention to start pursuing them; e.g. Goals for post-surgical recovery established prior to surgery.
    /// </summary>
    public CodeableConcept StartCodeableConcept { get; set; }
    /// <summary>
    /// Allows measuring outcome and whether goal needs to be further tracked.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
    /// </summary>
    public string StatusDate { get; set; }
    /// <summary>
    /// Extension container element for StatusDate
    /// </summary>
    public Element _StatusDate { get; set; }
    /// <summary>
    /// Captures the reason for the current status.
    /// </summary>
    public CodeableConcept StatusReason { get; set; }
    /// <summary>
    /// Subject is optional to support annonymized reporting.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Identifies when the goal should be evaluated.
    /// </summary>
    public string TargetDate { get; set; }
    /// <summary>
    /// Extension container element for TargetDate
    /// </summary>
    public Element _TargetDate { get; set; }
    /// <summary>
    /// Identifies when the goal should be evaluated.
    /// </summary>
    public Quantity TargetQuantity { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StartDate))
      {
        writer.WriteString("startDate", (string)StartDate!);
      }

      if (_StartDate != null)
      {
        writer.WritePropertyName("_startDate");
        _StartDate.SerializeJson(writer, options);
      }

      if (StartCodeableConcept != null)
      {
        writer.WritePropertyName("startCodeableConcept");
        StartCodeableConcept.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TargetDate))
      {
        writer.WriteString("targetDate", (string)TargetDate!);
      }

      if (_TargetDate != null)
      {
        writer.WritePropertyName("_targetDate");
        _TargetDate.SerializeJson(writer, options);
      }

      if (TargetQuantity != null)
      {
        writer.WritePropertyName("targetQuantity");
        TargetQuantity.SerializeJson(writer, options);
      }

      if ((Category != null) && (Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();

        foreach (CodeableConcept valCategory in Category)
        {
          valCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StatusDate))
      {
        writer.WriteString("statusDate", (string)StatusDate!);
      }

      if (_StatusDate != null)
      {
        writer.WritePropertyName("_statusDate");
        _StatusDate.SerializeJson(writer, options);
      }

      if (StatusReason != null)
      {
        writer.WritePropertyName("statusReason");
        StatusReason.SerializeJson(writer, options);
      }

      if (Author != null)
      {
        writer.WritePropertyName("author");
        Author.SerializeJson(writer, options);
      }

      if (Priority != null)
      {
        writer.WritePropertyName("priority");
        Priority.SerializeJson(writer, options);
      }

      if ((Addresses != null) && (Addresses.Count != 0))
      {
        writer.WritePropertyName("addresses");
        writer.WriteStartArray();

        foreach (Reference valAddresses in Addresses)
        {
          valAddresses.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Outcome != null) && (Outcome.Count != 0))
      {
        writer.WritePropertyName("outcome");
        writer.WriteStartArray();

        foreach (GoalOutcome valOutcome in Outcome)
        {
          valOutcome.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "addresses":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Addresses = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objAddresses = new fhirCsR2.Models.Reference();
            objAddresses.DeserializeJson(ref reader, options);
            Addresses.Add(objAddresses);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Addresses.Count == 0)
          {
            Addresses = null;
          }

          break;

        case "author":
          Author = new fhirCsR2.Models.Reference();
          Author.DeserializeJson(ref reader, options);
          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objCategory = new fhirCsR2.Models.CodeableConcept();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Identifier objIdentifier = new fhirCsR2.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Annotation objNote = new fhirCsR2.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "outcome":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Outcome = new List<GoalOutcome>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.GoalOutcome objOutcome = new fhirCsR2.Models.GoalOutcome();
            objOutcome.DeserializeJson(ref reader, options);
            Outcome.Add(objOutcome);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Outcome.Count == 0)
          {
            Outcome = null;
          }

          break;

        case "priority":
          Priority = new fhirCsR2.Models.CodeableConcept();
          Priority.DeserializeJson(ref reader, options);
          break;

        case "startDate":
          StartDate = reader.GetString();
          break;

        case "_startDate":
          _StartDate = new fhirCsR2.Models.Element();
          _StartDate.DeserializeJson(ref reader, options);
          break;

        case "startCodeableConcept":
          StartCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          StartCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "statusDate":
          StatusDate = reader.GetString();
          break;

        case "_statusDate":
          _StatusDate = new fhirCsR2.Models.Element();
          _StatusDate.DeserializeJson(ref reader, options);
          break;

        case "statusReason":
          StatusReason = new fhirCsR2.Models.CodeableConcept();
          StatusReason.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR2.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "targetDate":
          TargetDate = reader.GetString();
          break;

        case "_targetDate":
          _TargetDate = new fhirCsR2.Models.Element();
          _TargetDate.DeserializeJson(ref reader, options);
          break;

        case "targetQuantity":
          TargetQuantity = new fhirCsR2.Models.Quantity();
          TargetQuantity.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Goal.status field
  /// </summary>
  public static class GoalStatusCodes {
    public const string PROPOSED = "proposed";
    public const string PLANNED = "planned";
    public const string ACCEPTED = "accepted";
    public const string REJECTED = "rejected";
    public const string IN_PROGRESS = "in-progress";
    public const string ACHIEVED = "achieved";
    public const string SUSTAINING = "sustaining";
    public const string ON_HOLD = "on-hold";
    public const string CANCELLED = "cancelled";
    public static HashSet<string> Values = new HashSet<string>() {
      "proposed",
      "planned",
      "accepted",
      "rejected",
      "in-progress",
      "achieved",
      "sustaining",
      "on-hold",
      "cancelled",
    };
  }
}
