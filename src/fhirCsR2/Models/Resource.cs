// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// This is the base resource type for everything.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamResourceConverter))]
  public class Resource : IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public virtual string ResourceType => string.Empty;
    /// <summary>
    /// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
    /// </summary>
    public string Id { get; set; }
    /// <summary>
    /// Extension container element for Id
    /// </summary>
    public Element _Id { get; set; }
    /// <summary>
    /// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
    /// </summary>
    public string ImplicitRules { get; set; }
    /// <summary>
    /// Extension container element for ImplicitRules
    /// </summary>
    public Element _ImplicitRules { get; set; }
    /// <summary>
    /// The base language in which the resource is written.
    /// </summary>
    public string Language { get; set; }
    /// <summary>
    /// Extension container element for Language
    /// </summary>
    public Element _Language { get; set; }
    /// <summary>
    /// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
    /// </summary>
    public Meta Meta { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(Id))
      {
        writer.WriteString("id", (string)Id!);
      }

      if (_Id != null)
      {
        writer.WritePropertyName("_id");
        _Id.SerializeJson(writer, options);
      }

      if (Meta != null)
      {
        writer.WritePropertyName("meta");
        Meta.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ImplicitRules))
      {
        writer.WriteString("implicitRules", (string)ImplicitRules!);
      }

      if (_ImplicitRules != null)
      {
        writer.WritePropertyName("_implicitRules");
        _ImplicitRules.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Language))
      {
        writer.WriteString("language", (string)Language!);
      }

      if (_Language != null)
      {
        writer.WritePropertyName("_language");
        _Language.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "id":
          Id = reader.GetString();
          break;

        case "_id":
          _Id = new fhirCsR2.Models.Element();
          _Id.DeserializeJson(ref reader, options);
          break;

        case "implicitRules":
          ImplicitRules = reader.GetString();
          break;

        case "_implicitRules":
          _ImplicitRules = new fhirCsR2.Models.Element();
          _ImplicitRules.DeserializeJson(ref reader, options);
          break;

        case "language":
          Language = reader.GetString();
          break;

        case "_language":
          _Language = new fhirCsR2.Models.Element();
          _Language.DeserializeJson(ref reader, options);
          break;

        case "meta":
          Meta = new fhirCsR2.Models.Meta();
          Meta.DeserializeJson(ref reader, options);
          break;

      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
