// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Indicates how the medication is/was used by the patient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<MedicationStatementDosage>))]
  public class MedicationStatementDosage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
    /// </summary>
    public bool? AsNeededBoolean { get; set; }
    /// <summary>
    /// Extension container element for AsNeededBoolean
    /// </summary>
    public Element _AsNeededBoolean { get; set; }
    /// <summary>
    /// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
    /// </summary>
    public CodeableConcept AsNeededCodeableConcept { get; set; }
    /// <summary>
    /// The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time.  For example, 1000mg in 24 hours.
    /// </summary>
    public Ratio MaxDosePerPeriod { get; set; }
    /// <summary>
    /// A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
    /// </summary>
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// The amount of therapeutic or other substance given at one administration event.
    /// </summary>
    public Quantity QuantityQuantity { get; set; }
    /// <summary>
    /// The amount of therapeutic or other substance given at one administration event.
    /// </summary>
    public Range QuantityRange { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    public Ratio RateRatio { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    public Range RateRange { get; set; }
    /// <summary>
    /// A code specifying the route or physiological path of administration of a therapeutic agent into or onto a subject.
    /// </summary>
    public CodeableConcept Route { get; set; }
    /// <summary>
    /// A coded specification of or a reference to the anatomic site where the medication first enters the body.
    /// </summary>
    public CodeableConcept SiteCodeableConcept { get; set; }
    /// <summary>
    /// A coded specification of or a reference to the anatomic site where the medication first enters the body.
    /// </summary>
    public Reference SiteReference { get; set; }
    /// <summary>
    /// Free text dosage information as reported about a patient's medication use. When coded dosage information is present, the free text may still be present for display to humans.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// The timing schedule for giving the medication to the patient.  The Schedule data type allows many different expressions, for example.  "Every  8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:";  "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    public Timing Timing { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (Timing != null)
      {
        writer.WritePropertyName("timing");
        Timing.SerializeJson(writer, options);
      }

      if (AsNeededBoolean != null)
      {
        writer.WriteBoolean("asNeededBoolean", (bool)AsNeededBoolean!);
      }

      if (_AsNeededBoolean != null)
      {
        writer.WritePropertyName("_asNeededBoolean");
        _AsNeededBoolean.SerializeJson(writer, options);
      }

      if (AsNeededCodeableConcept != null)
      {
        writer.WritePropertyName("asNeededCodeableConcept");
        AsNeededCodeableConcept.SerializeJson(writer, options);
      }

      if (SiteCodeableConcept != null)
      {
        writer.WritePropertyName("siteCodeableConcept");
        SiteCodeableConcept.SerializeJson(writer, options);
      }

      if (SiteReference != null)
      {
        writer.WritePropertyName("siteReference");
        SiteReference.SerializeJson(writer, options);
      }

      if (Route != null)
      {
        writer.WritePropertyName("route");
        Route.SerializeJson(writer, options);
      }

      if (Method != null)
      {
        writer.WritePropertyName("method");
        Method.SerializeJson(writer, options);
      }

      if (QuantityQuantity != null)
      {
        writer.WritePropertyName("quantityQuantity");
        QuantityQuantity.SerializeJson(writer, options);
      }

      if (QuantityRange != null)
      {
        writer.WritePropertyName("quantityRange");
        QuantityRange.SerializeJson(writer, options);
      }

      if (RateRatio != null)
      {
        writer.WritePropertyName("rateRatio");
        RateRatio.SerializeJson(writer, options);
      }

      if (RateRange != null)
      {
        writer.WritePropertyName("rateRange");
        RateRange.SerializeJson(writer, options);
      }

      if (MaxDosePerPeriod != null)
      {
        writer.WritePropertyName("maxDosePerPeriod");
        MaxDosePerPeriod.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "asNeededBoolean":
          AsNeededBoolean = reader.GetBoolean();
          break;

        case "_asNeededBoolean":
          _AsNeededBoolean = new fhirCsR2.Models.Element();
          _AsNeededBoolean.DeserializeJson(ref reader, options);
          break;

        case "asNeededCodeableConcept":
          AsNeededCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          AsNeededCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "maxDosePerPeriod":
          MaxDosePerPeriod = new fhirCsR2.Models.Ratio();
          MaxDosePerPeriod.DeserializeJson(ref reader, options);
          break;

        case "method":
          Method = new fhirCsR2.Models.CodeableConcept();
          Method.DeserializeJson(ref reader, options);
          break;

        case "quantityQuantity":
          QuantityQuantity = new fhirCsR2.Models.Quantity();
          QuantityQuantity.DeserializeJson(ref reader, options);
          break;

        case "quantityRange":
          QuantityRange = new fhirCsR2.Models.Range();
          QuantityRange.DeserializeJson(ref reader, options);
          break;

        case "rateRatio":
          RateRatio = new fhirCsR2.Models.Ratio();
          RateRatio.DeserializeJson(ref reader, options);
          break;

        case "rateRange":
          RateRange = new fhirCsR2.Models.Range();
          RateRange.DeserializeJson(ref reader, options);
          break;

        case "route":
          Route = new fhirCsR2.Models.CodeableConcept();
          Route.DeserializeJson(ref reader, options);
          break;

        case "siteCodeableConcept":
          SiteCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          SiteCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "siteReference":
          SiteReference = new fhirCsR2.Models.Reference();
          SiteReference.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR2.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "timing":
          Timing = new fhirCsR2.Models.Timing();
          Timing.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from e.g. the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains   The primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<MedicationStatement>))]
  public class MedicationStatement : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "MedicationStatement";
    /// <summary>
    /// The date when the medication statement was asserted by the information source.
    /// </summary>
    public string DateAsserted { get; set; }
    /// <summary>
    /// Extension container element for DateAsserted
    /// </summary>
    public Element _DateAsserted { get; set; }
    /// <summary>
    /// Indicates how the medication is/was used by the patient.
    /// </summary>
    public List<MedicationStatementDosage> Dosage { get; set; }
    /// <summary>
    /// The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
    /// </summary>
    public string EffectiveDateTime { get; set; }
    /// <summary>
    /// Extension container element for EffectiveDateTime
    /// </summary>
    public Element _EffectiveDateTime { get; set; }
    /// <summary>
    /// The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
    /// </summary>
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The person who provided the information about the taking of this medication.
    /// </summary>
    public Reference InformationSource { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    public CodeableConcept MedicationCodeableConcept { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    public Reference MedicationReference { get; set; }
    /// <summary>
    /// Provides extra information about the medication statement that is not conveyed by the other attributes.
    /// </summary>
    public string Note { get; set; }
    /// <summary>
    /// Extension container element for Note
    /// </summary>
    public Element _Note { get; set; }
    /// <summary>
    /// The person or animal who is/was taking the medication.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// A reason for why the medication is being/was taken.
    /// </summary>
    public CodeableConcept ReasonForUseCodeableConcept { get; set; }
    /// <summary>
    /// A reason for why the medication is being/was taken.
    /// </summary>
    public Reference ReasonForUseReference { get; set; }
    /// <summary>
    /// A code indicating why the medication was not taken.
    /// </summary>
    public List<CodeableConcept> ReasonNotTaken { get; set; }
    /// <summary>
    /// A code representing the patient or other source's judgment about the state of the medication used that this statement is about.  Generally this will be active or completed.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Allows linking the MedicationStatement to the underlying MedicationOrder, or to other information that supports the MedicationStatement.
    /// </summary>
    public List<Reference> SupportingInformation { get; set; }
    /// <summary>
    /// Set this to true if the record is saying that the medication was NOT taken.
    /// </summary>
    public bool? WasNotTaken { get; set; }
    /// <summary>
    /// Extension container element for WasNotTaken
    /// </summary>
    public Element _WasNotTaken { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (InformationSource != null)
      {
        writer.WritePropertyName("informationSource");
        InformationSource.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DateAsserted))
      {
        writer.WriteString("dateAsserted", (string)DateAsserted!);
      }

      if (_DateAsserted != null)
      {
        writer.WritePropertyName("_dateAsserted");
        _DateAsserted.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (WasNotTaken != null)
      {
        writer.WriteBoolean("wasNotTaken", (bool)WasNotTaken!);
      }

      if (_WasNotTaken != null)
      {
        writer.WritePropertyName("_wasNotTaken");
        _WasNotTaken.SerializeJson(writer, options);
      }

      if ((ReasonNotTaken != null) && (ReasonNotTaken.Count != 0))
      {
        writer.WritePropertyName("reasonNotTaken");
        writer.WriteStartArray();

        foreach (CodeableConcept valReasonNotTaken in ReasonNotTaken)
        {
          valReasonNotTaken.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ReasonForUseCodeableConcept != null)
      {
        writer.WritePropertyName("reasonForUseCodeableConcept");
        ReasonForUseCodeableConcept.SerializeJson(writer, options);
      }

      if (ReasonForUseReference != null)
      {
        writer.WritePropertyName("reasonForUseReference");
        ReasonForUseReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EffectiveDateTime))
      {
        writer.WriteString("effectiveDateTime", (string)EffectiveDateTime!);
      }

      if (_EffectiveDateTime != null)
      {
        writer.WritePropertyName("_effectiveDateTime");
        _EffectiveDateTime.SerializeJson(writer, options);
      }

      if (EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        EffectivePeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Note))
      {
        writer.WriteString("note", (string)Note!);
      }

      if (_Note != null)
      {
        writer.WritePropertyName("_note");
        _Note.SerializeJson(writer, options);
      }

      if ((SupportingInformation != null) && (SupportingInformation.Count != 0))
      {
        writer.WritePropertyName("supportingInformation");
        writer.WriteStartArray();

        foreach (Reference valSupportingInformation in SupportingInformation)
        {
          valSupportingInformation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (MedicationCodeableConcept != null)
      {
        writer.WritePropertyName("medicationCodeableConcept");
        MedicationCodeableConcept.SerializeJson(writer, options);
      }

      if (MedicationReference != null)
      {
        writer.WritePropertyName("medicationReference");
        MedicationReference.SerializeJson(writer, options);
      }

      if ((Dosage != null) && (Dosage.Count != 0))
      {
        writer.WritePropertyName("dosage");
        writer.WriteStartArray();

        foreach (MedicationStatementDosage valDosage in Dosage)
        {
          valDosage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dateAsserted":
          DateAsserted = reader.GetString();
          break;

        case "_dateAsserted":
          _DateAsserted = new fhirCsR2.Models.Element();
          _DateAsserted.DeserializeJson(ref reader, options);
          break;

        case "dosage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Dosage = new List<MedicationStatementDosage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.MedicationStatementDosage objDosage = new fhirCsR2.Models.MedicationStatementDosage();
            objDosage.DeserializeJson(ref reader, options);
            Dosage.Add(objDosage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Dosage.Count == 0)
          {
            Dosage = null;
          }

          break;

        case "effectiveDateTime":
          EffectiveDateTime = reader.GetString();
          break;

        case "_effectiveDateTime":
          _EffectiveDateTime = new fhirCsR2.Models.Element();
          _EffectiveDateTime.DeserializeJson(ref reader, options);
          break;

        case "effectivePeriod":
          EffectivePeriod = new fhirCsR2.Models.Period();
          EffectivePeriod.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Identifier objIdentifier = new fhirCsR2.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "informationSource":
          InformationSource = new fhirCsR2.Models.Reference();
          InformationSource.DeserializeJson(ref reader, options);
          break;

        case "medicationCodeableConcept":
          MedicationCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          MedicationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "medicationReference":
          MedicationReference = new fhirCsR2.Models.Reference();
          MedicationReference.DeserializeJson(ref reader, options);
          break;

        case "note":
          Note = reader.GetString();
          break;

        case "_note":
          _Note = new fhirCsR2.Models.Element();
          _Note.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR2.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "reasonForUseCodeableConcept":
          ReasonForUseCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          ReasonForUseCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "reasonForUseReference":
          ReasonForUseReference = new fhirCsR2.Models.Reference();
          ReasonForUseReference.DeserializeJson(ref reader, options);
          break;

        case "reasonNotTaken":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonNotTaken = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objReasonNotTaken = new fhirCsR2.Models.CodeableConcept();
            objReasonNotTaken.DeserializeJson(ref reader, options);
            ReasonNotTaken.Add(objReasonNotTaken);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonNotTaken.Count == 0)
          {
            ReasonNotTaken = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "supportingInformation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportingInformation = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objSupportingInformation = new fhirCsR2.Models.Reference();
            objSupportingInformation.DeserializeJson(ref reader, options);
            SupportingInformation.Add(objSupportingInformation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportingInformation.Count == 0)
          {
            SupportingInformation = null;
          }

          break;

        case "wasNotTaken":
          WasNotTaken = reader.GetBoolean();
          break;

        case "_wasNotTaken":
          _WasNotTaken = new fhirCsR2.Models.Element();
          _WasNotTaken.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MedicationStatement.status field
  /// </summary>
  public static class MedicationStatementStatusCodes {
    public const string ACTIVE = "active";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string INTENDED = "intended";
  }
}
