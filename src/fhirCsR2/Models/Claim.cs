// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// The party to be reimbursed for the services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimPayee>))]
  public class ClaimPayee : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The organization who is to be reimbursed for the claim (the party to whom any benefit is assigned).
    /// </summary>
    public Reference Organization { get; set; }
    /// <summary>
    /// The person other than the subscriber who is to be reimbursed for the claim (the party to whom any benefit is assigned).
    /// </summary>
    public Reference Person { get; set; }
    /// <summary>
    /// The provider who is to be reimbursed for the claim (the party to whom any benefit is assigned).
    /// </summary>
    public Reference Provider { get; set; }
    /// <summary>
    /// Party to be reimbursed: Subscriber, provider, other.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Provider != null)
      {
        writer.WritePropertyName("provider");
        Provider.SerializeJson(writer, options);
      }

      if (Organization != null)
      {
        writer.WritePropertyName("organization");
        Organization.SerializeJson(writer, options);
      }

      if (Person != null)
      {
        writer.WritePropertyName("person");
        Person.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "organization":
          Organization = new fhirCsR2.Models.Reference();
          Organization.DeserializeJson(ref reader, options);
          break;

        case "person":
          Person = new fhirCsR2.Models.Reference();
          Person.DeserializeJson(ref reader, options);
          break;

        case "provider":
          Provider = new fhirCsR2.Models.Reference();
          Provider.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR2.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Ordered list of patient diagnosis for which care is sought.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimDiagnosis>))]
  public class ClaimDiagnosis : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Required to adjudicate services rendered to condition presented.
    /// </summary>
    public Coding Diagnosis { get; set; }
    /// <summary>
    /// Required to maintain order of the diagnoses.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (Diagnosis != null)
      {
        writer.WritePropertyName("diagnosis");
        Diagnosis.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "diagnosis":
          Diagnosis = new fhirCsR2.Models.Coding();
          Diagnosis.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Health care programs and insurers are significant payors of health service costs.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimCoverage>))]
  public class ClaimCoverage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The contract number of a business agreement which describes the terms and conditions.
    /// </summary>
    public string BusinessArrangement { get; set; }
    /// <summary>
    /// Extension container element for BusinessArrangement
    /// </summary>
    public Element _BusinessArrangement { get; set; }
    /// <summary>
    /// Used by downstream payers to determine what balance remains and the net payable.
    /// </summary>
    public Reference ClaimResponse { get; set; }
    /// <summary>
    /// Need to identify the issuer to target for processing and for coordination of benefit processing.
    /// </summary>
    public Reference Coverage { get; set; }
    /// <summary>
    /// To identify which coverage is being adjudicated.
    /// </summary>
    public bool Focal { get; set; }
    /// <summary>
    /// Extension container element for Focal
    /// </summary>
    public Element _Focal { get; set; }
    /// <summary>
    /// Knowledge of the original version can inform the processing of this instance so that information which is processable by the originating system may be generated.
    /// </summary>
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// To provide any pre=determination or prior authorization reference.
    /// </summary>
    public List<string> PreAuthRef { get; set; }
    /// <summary>
    /// Extension container element for PreAuthRef
    /// </summary>
    public List<Element> _PreAuthRef { get; set; }
    /// <summary>
    /// To determine the relationship between the patient and the subscriber.
    /// </summary>
    public Coding Relationship { get; set; }
    /// <summary>
    /// To maintain order of the coverages.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      writer.WriteBoolean("focal", Focal);

      if (_Focal != null)
      {
        writer.WritePropertyName("_focal");
        _Focal.SerializeJson(writer, options);
      }

      if (Coverage != null)
      {
        writer.WritePropertyName("coverage");
        Coverage.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(BusinessArrangement))
      {
        writer.WriteString("businessArrangement", (string)BusinessArrangement!);
      }

      if (_BusinessArrangement != null)
      {
        writer.WritePropertyName("_businessArrangement");
        _BusinessArrangement.SerializeJson(writer, options);
      }

      if (Relationship != null)
      {
        writer.WritePropertyName("relationship");
        Relationship.SerializeJson(writer, options);
      }

      if ((PreAuthRef != null) && (PreAuthRef.Count != 0))
      {
        writer.WritePropertyName("preAuthRef");
        writer.WriteStartArray();

        foreach (string valPreAuthRef in PreAuthRef)
        {
          writer.WriteStringValue(valPreAuthRef);
        }

        writer.WriteEndArray();
      }

      if ((_PreAuthRef != null) && (_PreAuthRef.Count != 0))
      {
        writer.WritePropertyName("_preAuthRef");
        writer.WriteStartArray();

        foreach (Element val_PreAuthRef in _PreAuthRef)
        {
          val_PreAuthRef.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ClaimResponse != null)
      {
        writer.WritePropertyName("claimResponse");
        ClaimResponse.SerializeJson(writer, options);
      }

      if (OriginalRuleset != null)
      {
        writer.WritePropertyName("originalRuleset");
        OriginalRuleset.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "businessArrangement":
          BusinessArrangement = reader.GetString();
          break;

        case "_businessArrangement":
          _BusinessArrangement = new fhirCsR2.Models.Element();
          _BusinessArrangement.DeserializeJson(ref reader, options);
          break;

        case "claimResponse":
          ClaimResponse = new fhirCsR2.Models.Reference();
          ClaimResponse.DeserializeJson(ref reader, options);
          break;

        case "coverage":
          Coverage = new fhirCsR2.Models.Reference();
          Coverage.DeserializeJson(ref reader, options);
          break;

        case "focal":
          Focal = reader.GetBoolean();
          break;

        case "_focal":
          _Focal = new fhirCsR2.Models.Element();
          _Focal.DeserializeJson(ref reader, options);
          break;

        case "originalRuleset":
          OriginalRuleset = new fhirCsR2.Models.Coding();
          OriginalRuleset.DeserializeJson(ref reader, options);
          break;

        case "preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PreAuthRef = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            PreAuthRef.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PreAuthRef.Count == 0)
          {
            PreAuthRef = null;
          }

          break;

        case "_preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _PreAuthRef = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_PreAuthRef = new fhirCsR2.Models.Element();
            obj_PreAuthRef.DeserializeJson(ref reader, options);
            _PreAuthRef.Add(obj_PreAuthRef);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_PreAuthRef.Count == 0)
          {
            _PreAuthRef = null;
          }

          break;

        case "relationship":
          Relationship = new fhirCsR2.Models.Coding();
          Relationship.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Third tier of goods and services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimItemDetailSubDetail>))]
  public class ClaimItemDetailSubDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    public Quantity Net { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    public decimal? Points { get; set; }
    /// <summary>
    /// Extension container element for Points
    /// </summary>
    public Element _Points { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// The fee for an additional  service or product or charge.
    /// </summary>
    public Coding Service { get; set; }
    /// <summary>
    /// The type of product or service.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// The UDI code and issuer if applicable for the supplied product.
    /// </summary>
    public Coding Udi { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    public Quantity UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Service != null)
      {
        writer.WritePropertyName("service");
        Service.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Points != null)
      {
        writer.WriteNumber("points", (decimal)Points!);
      }

      if (_Points != null)
      {
        writer.WritePropertyName("_points");
        _Points.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if (Udi != null)
      {
        writer.WritePropertyName("udi");
        Udi.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR2.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "net":
          Net = new fhirCsR2.Models.Quantity();
          Net.DeserializeJson(ref reader, options);
          break;

        case "points":
          Points = reader.GetDecimal();
          break;

        case "_points":
          _Points = new fhirCsR2.Models.Element();
          _Points.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR2.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "service":
          Service = new fhirCsR2.Models.Coding();
          Service.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR2.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        case "udi":
          Udi = new fhirCsR2.Models.Coding();
          Udi.DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          UnitPrice = new fhirCsR2.Models.Quantity();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Second tier of goods and services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimItemDetail>))]
  public class ClaimItemDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    public Quantity Net { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    public decimal? Points { get; set; }
    /// <summary>
    /// Extension container element for Points
    /// </summary>
    public Element _Points { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// If a grouping item then 'GROUP' otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.
    /// </summary>
    public Coding Service { get; set; }
    /// <summary>
    /// Third tier of goods and services.
    /// </summary>
    public List<ClaimItemDetailSubDetail> SubDetail { get; set; }
    /// <summary>
    /// The type of product or service.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// The UDI code and issuer if applicable for the supplied product.
    /// </summary>
    public Coding Udi { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    public Quantity UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Service != null)
      {
        writer.WritePropertyName("service");
        Service.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Points != null)
      {
        writer.WriteNumber("points", (decimal)Points!);
      }

      if (_Points != null)
      {
        writer.WritePropertyName("_points");
        _Points.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if (Udi != null)
      {
        writer.WritePropertyName("udi");
        Udi.SerializeJson(writer, options);
      }

      if ((SubDetail != null) && (SubDetail.Count != 0))
      {
        writer.WritePropertyName("subDetail");
        writer.WriteStartArray();

        foreach (ClaimItemDetailSubDetail valSubDetail in SubDetail)
        {
          valSubDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR2.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "net":
          Net = new fhirCsR2.Models.Quantity();
          Net.DeserializeJson(ref reader, options);
          break;

        case "points":
          Points = reader.GetDecimal();
          break;

        case "_points":
          _Points = new fhirCsR2.Models.Element();
          _Points.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR2.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "service":
          Service = new fhirCsR2.Models.Coding();
          Service.DeserializeJson(ref reader, options);
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubDetail = new List<ClaimItemDetailSubDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimItemDetailSubDetail objSubDetail = new fhirCsR2.Models.ClaimItemDetailSubDetail();
            objSubDetail.DeserializeJson(ref reader, options);
            SubDetail.Add(objSubDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubDetail.Count == 0)
          {
            SubDetail = null;
          }

          break;

        case "type":
          Type = new fhirCsR2.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        case "udi":
          Udi = new fhirCsR2.Models.Coding();
          Udi.DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          UnitPrice = new fhirCsR2.Models.Quantity();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The materials and placement date of prior fixed prosthesis.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimItemProsthesis>))]
  public class ClaimItemProsthesis : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// May impact on adjudication.
    /// </summary>
    public bool? Initial { get; set; }
    /// <summary>
    /// Extension container element for Initial
    /// </summary>
    public Element _Initial { get; set; }
    /// <summary>
    /// May impact on adjudication.
    /// </summary>
    public string PriorDate { get; set; }
    /// <summary>
    /// Extension container element for PriorDate
    /// </summary>
    public Element _PriorDate { get; set; }
    /// <summary>
    /// May impact on adjudication.
    /// </summary>
    public Coding PriorMaterial { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Initial != null)
      {
        writer.WriteBoolean("initial", (bool)Initial!);
      }

      if (_Initial != null)
      {
        writer.WritePropertyName("_initial");
        _Initial.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PriorDate))
      {
        writer.WriteString("priorDate", (string)PriorDate!);
      }

      if (_PriorDate != null)
      {
        writer.WritePropertyName("_priorDate");
        _PriorDate.SerializeJson(writer, options);
      }

      if (PriorMaterial != null)
      {
        writer.WritePropertyName("priorMaterial");
        PriorMaterial.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "initial":
          Initial = reader.GetBoolean();
          break;

        case "_initial":
          _Initial = new fhirCsR2.Models.Element();
          _Initial.DeserializeJson(ref reader, options);
          break;

        case "priorDate":
          PriorDate = reader.GetString();
          break;

        case "_priorDate":
          _PriorDate = new fhirCsR2.Models.Element();
          _PriorDate.DeserializeJson(ref reader, options);
          break;

        case "priorMaterial":
          PriorMaterial = new fhirCsR2.Models.Coding();
          PriorMaterial.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// First tier of goods and services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimItem>))]
  public class ClaimItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Physical service site on the patient (limb, tooth, etc.).
    /// </summary>
    public Coding BodySite { get; set; }
    /// <summary>
    /// Second tier of goods and services.
    /// </summary>
    public List<ClaimItemDetail> Detail { get; set; }
    /// <summary>
    /// Diagnosis applicable for this service or product line.
    /// </summary>
    public List<uint> DiagnosisLinkId { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// May impact on adjudication.
    /// </summary>
    public List<Coding> Modifier { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    public Quantity Net { get; set; }
    /// <summary>
    /// If a fee is present the associated product/service code must be present.
    /// </summary>
    public decimal? Points { get; set; }
    /// <summary>
    /// Extension container element for Points
    /// </summary>
    public Element _Points { get; set; }
    /// <summary>
    /// The materials and placement date of prior fixed prosthesis.
    /// </summary>
    public ClaimItemProsthesis Prosthesis { get; set; }
    /// <summary>
    /// The practitioner who is responsible for the services rendered to the patient.
    /// </summary>
    public Reference Provider { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// A service line number.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// If a grouping item then 'GROUP' otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.
    /// </summary>
    public Coding Service { get; set; }
    /// <summary>
    /// The date when the enclosed suite of services were performed or completed.
    /// </summary>
    public string ServiceDate { get; set; }
    /// <summary>
    /// Extension container element for ServiceDate
    /// </summary>
    public Element _ServiceDate { get; set; }
    /// <summary>
    /// A region or surface of the site, e.g. limb region or tooth surface(s).
    /// </summary>
    public List<Coding> SubSite { get; set; }
    /// <summary>
    /// The type of product or service.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// The UDI code and issuer if applicable for the supplied product.
    /// </summary>
    public Coding Udi { get; set; }
    /// <summary>
    /// If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
    /// </summary>
    public Quantity UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Provider != null)
      {
        writer.WritePropertyName("provider");
        Provider.SerializeJson(writer, options);
      }

      if ((DiagnosisLinkId != null) && (DiagnosisLinkId.Count != 0))
      {
        writer.WritePropertyName("diagnosisLinkId");
        writer.WriteStartArray();

        foreach (uint valDiagnosisLinkId in DiagnosisLinkId)
        {
          writer.WriteNumberValue(valDiagnosisLinkId);
        }

        writer.WriteEndArray();
      }

      if (Service != null)
      {
        writer.WritePropertyName("service");
        Service.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ServiceDate))
      {
        writer.WriteString("serviceDate", (string)ServiceDate!);
      }

      if (_ServiceDate != null)
      {
        writer.WritePropertyName("_serviceDate");
        _ServiceDate.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Points != null)
      {
        writer.WriteNumber("points", (decimal)Points!);
      }

      if (_Points != null)
      {
        writer.WritePropertyName("_points");
        _Points.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if (Udi != null)
      {
        writer.WritePropertyName("udi");
        Udi.SerializeJson(writer, options);
      }

      if (BodySite != null)
      {
        writer.WritePropertyName("bodySite");
        BodySite.SerializeJson(writer, options);
      }

      if ((SubSite != null) && (SubSite.Count != 0))
      {
        writer.WritePropertyName("subSite");
        writer.WriteStartArray();

        foreach (Coding valSubSite in SubSite)
        {
          valSubSite.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (Coding valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (ClaimItemDetail valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Prosthesis != null)
      {
        writer.WritePropertyName("prosthesis");
        Prosthesis.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "bodySite":
          BodySite = new fhirCsR2.Models.Coding();
          BodySite.DeserializeJson(ref reader, options);
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<ClaimItemDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimItemDetail objDetail = new fhirCsR2.Models.ClaimItemDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "diagnosisLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DiagnosisLinkId = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            DiagnosisLinkId.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DiagnosisLinkId.Count == 0)
          {
            DiagnosisLinkId = null;
          }

          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR2.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objModifier = new fhirCsR2.Models.Coding();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new fhirCsR2.Models.Quantity();
          Net.DeserializeJson(ref reader, options);
          break;

        case "points":
          Points = reader.GetDecimal();
          break;

        case "_points":
          _Points = new fhirCsR2.Models.Element();
          _Points.DeserializeJson(ref reader, options);
          break;

        case "prosthesis":
          Prosthesis = new fhirCsR2.Models.ClaimItemProsthesis();
          Prosthesis.DeserializeJson(ref reader, options);
          break;

        case "provider":
          Provider = new fhirCsR2.Models.Reference();
          Provider.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR2.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "service":
          Service = new fhirCsR2.Models.Coding();
          Service.DeserializeJson(ref reader, options);
          break;

        case "serviceDate":
          ServiceDate = reader.GetString();
          break;

        case "_serviceDate":
          _ServiceDate = new fhirCsR2.Models.Element();
          _ServiceDate.DeserializeJson(ref reader, options);
          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubSite = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objSubSite = new fhirCsR2.Models.Coding();
            objSubSite.DeserializeJson(ref reader, options);
            SubSite.Add(objSubSite);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubSite.Count == 0)
          {
            SubSite = null;
          }

          break;

        case "type":
          Type = new fhirCsR2.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        case "udi":
          Udi = new fhirCsR2.Models.Coding();
          Udi.DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          UnitPrice = new fhirCsR2.Models.Quantity();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The list of missing teeth may influence the adjudication of services for example with Bridges.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ClaimMissingTeeth>))]
  public class ClaimMissingTeeth : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Some services and adjudications require this information.
    /// </summary>
    public string ExtractionDate { get; set; }
    /// <summary>
    /// Extension container element for ExtractionDate
    /// </summary>
    public Element _ExtractionDate { get; set; }
    /// <summary>
    /// Provides the reason for the missing tooth.
    /// </summary>
    public Coding Reason { get; set; }
    /// <summary>
    /// Provides the tooth number of the missing tooth.
    /// </summary>
    public Coding Tooth { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Tooth != null)
      {
        writer.WritePropertyName("tooth");
        Tooth.SerializeJson(writer, options);
      }

      if (Reason != null)
      {
        writer.WritePropertyName("reason");
        Reason.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ExtractionDate))
      {
        writer.WriteString("extractionDate", (string)ExtractionDate!);
      }

      if (_ExtractionDate != null)
      {
        writer.WritePropertyName("_extractionDate");
        _ExtractionDate.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "extractionDate":
          ExtractionDate = reader.GetString();
          break;

        case "_extractionDate":
          _ExtractionDate = new fhirCsR2.Models.Element();
          _ExtractionDate.DeserializeJson(ref reader, options);
          break;

        case "reason":
          Reason = new fhirCsR2.Models.Coding();
          Reason.DeserializeJson(ref reader, options);
          break;

        case "tooth":
          Tooth = new fhirCsR2.Models.Coding();
          Tooth.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<Claim>))]
  public class Claim : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Claim";
    /// <summary>
    /// Coverage may be dependent on accidents.
    /// </summary>
    public string Accident { get; set; }
    /// <summary>
    /// Extension container element for Accident
    /// </summary>
    public Element _Accident { get; set; }
    /// <summary>
    /// Coverage may be dependent on the type of accident.
    /// </summary>
    public Coding AccidentType { get; set; }
    /// <summary>
    /// Code to indicate that Xrays, images, emails, documents, models or attachments are being sent in support of this submission.
    /// </summary>
    public List<Coding> AdditionalMaterials { get; set; }
    /// <summary>
    /// List of patient conditions for which care is sought.
    /// </summary>
    public List<Coding> Condition { get; set; }
    /// <summary>
    /// Health care programs and insurers are significant payors of health service costs.
    /// </summary>
    public List<ClaimCoverage> Coverage { get; set; }
    /// <summary>
    /// The date when the enclosed suite of services were performed or completed.
    /// </summary>
    public string Created { get; set; }
    /// <summary>
    /// Extension container element for Created
    /// </summary>
    public Element _Created { get; set; }
    /// <summary>
    /// Ordered list of patient diagnosis for which care is sought.
    /// </summary>
    public List<ClaimDiagnosis> Diagnosis { get; set; }
    /// <summary>
    /// Person who created the invoice/claim/pre-determination or pre-authorization.
    /// </summary>
    public Reference Enterer { get; set; }
    /// <summary>
    /// To determine extenuating circumstances for coverage.
    /// </summary>
    public List<Coding> Exception { get; set; }
    /// <summary>
    /// Facility where the services were provided.
    /// </summary>
    public Reference Facility { get; set; }
    /// <summary>
    /// In the case of a Pre-Determination/Pre-Authorization the provider may request that funds in the amount of the expected Benefit be reserved ('Patient' or 'Provider') to pay for the Benefits determined on the subsequent claim(s). 'None' explicitly indicates no funds reserving is requested.
    /// </summary>
    public Coding FundsReserve { get; set; }
    /// <summary>
    /// The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Coverage may be modified based on exception information provided.
    /// </summary>
    public List<Coding> InterventionException { get; set; }
    /// <summary>
    /// First tier of goods and services.
    /// </summary>
    public List<ClaimItem> Item { get; set; }
    /// <summary>
    /// The list of missing teeth may influence the adjudication of services for example with Bridges.
    /// </summary>
    public List<ClaimMissingTeeth> MissingTeeth { get; set; }
    /// <summary>
    /// The organization which is responsible for the bill, claim pre-determination, pre-authorization.
    /// </summary>
    public Reference Organization { get; set; }
    /// <summary>
    /// Original prescription to support the dispensing of pharmacy services, medications or products.
    /// </summary>
    public Reference OriginalPrescription { get; set; }
    /// <summary>
    /// The version of the specification from which the original instance was created.
    /// </summary>
    public Coding OriginalRuleset { get; set; }
    /// <summary>
    /// Patient Resource.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// The party to be reimbursed for the services.
    /// </summary>
    public ClaimPayee Payee { get; set; }
    /// <summary>
    /// For type=Pharmacy and Vision only.
    /// </summary>
    public Reference Prescription { get; set; }
    /// <summary>
    /// Immediate (stat), best effort (normal), deferred (deferred).
    /// </summary>
    public Coding Priority { get; set; }
    /// <summary>
    /// The provider which is responsible for the bill, claim pre-determination, pre-authorization.
    /// </summary>
    public Reference Provider { get; set; }
    /// <summary>
    /// The referral resource which lists the date, practitioner, reason and other supporting information.
    /// </summary>
    public Reference Referral { get; set; }
    /// <summary>
    /// The version of the specification on which this instance relies.
    /// </summary>
    public Coding Ruleset { get; set; }
    /// <summary>
    /// Often required for over-age dependents.
    /// </summary>
    public string School { get; set; }
    /// <summary>
    /// Extension container element for School
    /// </summary>
    public Element _School { get; set; }
    /// <summary>
    /// Insurer Identifier, typical BIN number (6 digit).
    /// </summary>
    public Reference Target { get; set; }
    /// <summary>
    /// The category of claim this is.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory (Pre-determination).
    /// </summary>
    public string Use { get; set; }
    /// <summary>
    /// Extension container element for Use
    /// </summary>
    public Element _Use { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Ruleset != null)
      {
        writer.WritePropertyName("ruleset");
        Ruleset.SerializeJson(writer, options);
      }

      if (OriginalRuleset != null)
      {
        writer.WritePropertyName("originalRuleset");
        OriginalRuleset.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Created))
      {
        writer.WriteString("created", (string)Created!);
      }

      if (_Created != null)
      {
        writer.WritePropertyName("_created");
        _Created.SerializeJson(writer, options);
      }

      if (Target != null)
      {
        writer.WritePropertyName("target");
        Target.SerializeJson(writer, options);
      }

      if (Provider != null)
      {
        writer.WritePropertyName("provider");
        Provider.SerializeJson(writer, options);
      }

      if (Organization != null)
      {
        writer.WritePropertyName("organization");
        Organization.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Use))
      {
        writer.WriteString("use", (string)Use!);
      }

      if (_Use != null)
      {
        writer.WritePropertyName("_use");
        _Use.SerializeJson(writer, options);
      }

      if (Priority != null)
      {
        writer.WritePropertyName("priority");
        Priority.SerializeJson(writer, options);
      }

      if (FundsReserve != null)
      {
        writer.WritePropertyName("fundsReserve");
        FundsReserve.SerializeJson(writer, options);
      }

      if (Enterer != null)
      {
        writer.WritePropertyName("enterer");
        Enterer.SerializeJson(writer, options);
      }

      if (Facility != null)
      {
        writer.WritePropertyName("facility");
        Facility.SerializeJson(writer, options);
      }

      if (Prescription != null)
      {
        writer.WritePropertyName("prescription");
        Prescription.SerializeJson(writer, options);
      }

      if (OriginalPrescription != null)
      {
        writer.WritePropertyName("originalPrescription");
        OriginalPrescription.SerializeJson(writer, options);
      }

      if (Payee != null)
      {
        writer.WritePropertyName("payee");
        Payee.SerializeJson(writer, options);
      }

      if (Referral != null)
      {
        writer.WritePropertyName("referral");
        Referral.SerializeJson(writer, options);
      }

      if ((Diagnosis != null) && (Diagnosis.Count != 0))
      {
        writer.WritePropertyName("diagnosis");
        writer.WriteStartArray();

        foreach (ClaimDiagnosis valDiagnosis in Diagnosis)
        {
          valDiagnosis.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Condition != null) && (Condition.Count != 0))
      {
        writer.WritePropertyName("condition");
        writer.WriteStartArray();

        foreach (Coding valCondition in Condition)
        {
          valCondition.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if ((Coverage != null) && (Coverage.Count != 0))
      {
        writer.WritePropertyName("coverage");
        writer.WriteStartArray();

        foreach (ClaimCoverage valCoverage in Coverage)
        {
          valCoverage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Exception != null) && (Exception.Count != 0))
      {
        writer.WritePropertyName("exception");
        writer.WriteStartArray();

        foreach (Coding valException in Exception)
        {
          valException.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(School))
      {
        writer.WriteString("school", (string)School!);
      }

      if (_School != null)
      {
        writer.WritePropertyName("_school");
        _School.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Accident))
      {
        writer.WriteString("accident", (string)Accident!);
      }

      if (_Accident != null)
      {
        writer.WritePropertyName("_accident");
        _Accident.SerializeJson(writer, options);
      }

      if (AccidentType != null)
      {
        writer.WritePropertyName("accidentType");
        AccidentType.SerializeJson(writer, options);
      }

      if ((InterventionException != null) && (InterventionException.Count != 0))
      {
        writer.WritePropertyName("interventionException");
        writer.WriteStartArray();

        foreach (Coding valInterventionException in InterventionException)
        {
          valInterventionException.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Item != null) && (Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();

        foreach (ClaimItem valItem in Item)
        {
          valItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AdditionalMaterials != null) && (AdditionalMaterials.Count != 0))
      {
        writer.WritePropertyName("additionalMaterials");
        writer.WriteStartArray();

        foreach (Coding valAdditionalMaterials in AdditionalMaterials)
        {
          valAdditionalMaterials.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((MissingTeeth != null) && (MissingTeeth.Count != 0))
      {
        writer.WritePropertyName("missingTeeth");
        writer.WriteStartArray();

        foreach (ClaimMissingTeeth valMissingTeeth in MissingTeeth)
        {
          valMissingTeeth.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "accident":
          Accident = reader.GetString();
          break;

        case "_accident":
          _Accident = new fhirCsR2.Models.Element();
          _Accident.DeserializeJson(ref reader, options);
          break;

        case "accidentType":
          AccidentType = new fhirCsR2.Models.Coding();
          AccidentType.DeserializeJson(ref reader, options);
          break;

        case "additionalMaterials":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AdditionalMaterials = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objAdditionalMaterials = new fhirCsR2.Models.Coding();
            objAdditionalMaterials.DeserializeJson(ref reader, options);
            AdditionalMaterials.Add(objAdditionalMaterials);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AdditionalMaterials.Count == 0)
          {
            AdditionalMaterials = null;
          }

          break;

        case "condition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Condition = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objCondition = new fhirCsR2.Models.Coding();
            objCondition.DeserializeJson(ref reader, options);
            Condition.Add(objCondition);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Condition.Count == 0)
          {
            Condition = null;
          }

          break;

        case "coverage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Coverage = new List<ClaimCoverage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimCoverage objCoverage = new fhirCsR2.Models.ClaimCoverage();
            objCoverage.DeserializeJson(ref reader, options);
            Coverage.Add(objCoverage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Coverage.Count == 0)
          {
            Coverage = null;
          }

          break;

        case "created":
          Created = reader.GetString();
          break;

        case "_created":
          _Created = new fhirCsR2.Models.Element();
          _Created.DeserializeJson(ref reader, options);
          break;

        case "diagnosis":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Diagnosis = new List<ClaimDiagnosis>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimDiagnosis objDiagnosis = new fhirCsR2.Models.ClaimDiagnosis();
            objDiagnosis.DeserializeJson(ref reader, options);
            Diagnosis.Add(objDiagnosis);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Diagnosis.Count == 0)
          {
            Diagnosis = null;
          }

          break;

        case "enterer":
          Enterer = new fhirCsR2.Models.Reference();
          Enterer.DeserializeJson(ref reader, options);
          break;

        case "exception":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Exception = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objException = new fhirCsR2.Models.Coding();
            objException.DeserializeJson(ref reader, options);
            Exception.Add(objException);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Exception.Count == 0)
          {
            Exception = null;
          }

          break;

        case "facility":
          Facility = new fhirCsR2.Models.Reference();
          Facility.DeserializeJson(ref reader, options);
          break;

        case "fundsReserve":
          FundsReserve = new fhirCsR2.Models.Coding();
          FundsReserve.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Identifier objIdentifier = new fhirCsR2.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "interventionException":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InterventionException = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objInterventionException = new fhirCsR2.Models.Coding();
            objInterventionException.DeserializeJson(ref reader, options);
            InterventionException.Add(objInterventionException);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InterventionException.Count == 0)
          {
            InterventionException = null;
          }

          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Item = new List<ClaimItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimItem objItem = new fhirCsR2.Models.ClaimItem();
            objItem.DeserializeJson(ref reader, options);
            Item.Add(objItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Item.Count == 0)
          {
            Item = null;
          }

          break;

        case "missingTeeth":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MissingTeeth = new List<ClaimMissingTeeth>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ClaimMissingTeeth objMissingTeeth = new fhirCsR2.Models.ClaimMissingTeeth();
            objMissingTeeth.DeserializeJson(ref reader, options);
            MissingTeeth.Add(objMissingTeeth);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MissingTeeth.Count == 0)
          {
            MissingTeeth = null;
          }

          break;

        case "organization":
          Organization = new fhirCsR2.Models.Reference();
          Organization.DeserializeJson(ref reader, options);
          break;

        case "originalPrescription":
          OriginalPrescription = new fhirCsR2.Models.Reference();
          OriginalPrescription.DeserializeJson(ref reader, options);
          break;

        case "originalRuleset":
          OriginalRuleset = new fhirCsR2.Models.Coding();
          OriginalRuleset.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR2.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "payee":
          Payee = new fhirCsR2.Models.ClaimPayee();
          Payee.DeserializeJson(ref reader, options);
          break;

        case "prescription":
          Prescription = new fhirCsR2.Models.Reference();
          Prescription.DeserializeJson(ref reader, options);
          break;

        case "priority":
          Priority = new fhirCsR2.Models.Coding();
          Priority.DeserializeJson(ref reader, options);
          break;

        case "provider":
          Provider = new fhirCsR2.Models.Reference();
          Provider.DeserializeJson(ref reader, options);
          break;

        case "referral":
          Referral = new fhirCsR2.Models.Reference();
          Referral.DeserializeJson(ref reader, options);
          break;

        case "ruleset":
          Ruleset = new fhirCsR2.Models.Coding();
          Ruleset.DeserializeJson(ref reader, options);
          break;

        case "school":
          School = reader.GetString();
          break;

        case "_school":
          _School = new fhirCsR2.Models.Element();
          _School.DeserializeJson(ref reader, options);
          break;

        case "target":
          Target = new fhirCsR2.Models.Reference();
          Target.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR2.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "use":
          Use = reader.GetString();
          break;

        case "_use":
          _Use = new fhirCsR2.Models.Element();
          _Use.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Claim.type field
  /// </summary>
  public static class ClaimTypeCodes {
    public const string INSTITUTIONAL = "institutional";
    public const string ORAL = "oral";
    public const string PHARMACY = "pharmacy";
    public const string PROFESSIONAL = "professional";
    public const string VISION = "vision";
  }
  /// <summary>
  /// Code Values for the Claim.use field
  /// </summary>
  public static class ClaimUseCodes {
    public const string COMPLETE = "complete";
    public const string PROPOSED = "proposed";
    public const string EXPLORATORY = "exploratory";
    public const string OTHER = "other";
  }
}
