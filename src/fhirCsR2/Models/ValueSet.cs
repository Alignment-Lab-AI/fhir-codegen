// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ValueSetContact>))]
  public class ValueSetContact : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The name of an individual to contact regarding the value set.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if ((Telecom != null) && (Telecom.Count != 0))
      {
        writer.WritePropertyName("telecom");
        writer.WriteStartArray();

        foreach (ContactPoint valTelecom in Telecom)
        {
          valTelecom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "telecom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Telecom = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContactPoint objTelecom = new fhirCsR2.Models.ContactPoint();
            objTelecom.DeserializeJson(ref reader, options);
            Telecom.Add(objTelecom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Telecom.Count == 0)
          {
            Telecom = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Many concept definition systems support multiple representations, in multiple languages, and for multiple purposes.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ValueSetCodeSystemConceptDesignation>))]
  public class ValueSetCodeSystemConceptDesignation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The language this designation is defined for.
    /// </summary>
    public string Language { get; set; }
    /// <summary>
    /// Extension container element for Language
    /// </summary>
    public Element _Language { get; set; }
    /// <summary>
    /// A code that details how this designation would be used.
    /// </summary>
    public Coding Use { get; set; }
    /// <summary>
    /// The text value for this designation.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Language))
      {
        writer.WriteString("language", (string)Language!);
      }

      if (_Language != null)
      {
        writer.WritePropertyName("_language");
        _Language.SerializeJson(writer, options);
      }

      if (Use != null)
      {
        writer.WritePropertyName("use");
        Use.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "language":
          Language = reader.GetString();
          break;

        case "_language":
          _Language = new fhirCsR2.Models.Element();
          _Language.DeserializeJson(ref reader, options);
          break;

        case "use":
          Use = new fhirCsR2.Models.Coding();
          Use.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR2.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ValueSetCodeSystemConcept>))]
  public class ValueSetCodeSystemConcept : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// If this code is not for use as a real concept.
    /// </summary>
    public bool? Abstract { get; set; }
    /// <summary>
    /// Extension container element for Abstract
    /// </summary>
    public Element _Abstract { get; set; }
    /// <summary>
    /// A code - a text symbol - that uniquely identifies the concept within the code system.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) and can only be determined by examining the definitions of the concepts.
    /// </summary>
    public List<ValueSetCodeSystemConcept> Concept { get; set; }
    /// <summary>
    /// The formal definition of the concept. The value set resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
    /// </summary>
    public string Definition { get; set; }
    /// <summary>
    /// Extension container element for Definition
    /// </summary>
    public Element _Definition { get; set; }
    /// <summary>
    /// Many concept definition systems support multiple representations, in multiple languages, and for multiple purposes.
    /// </summary>
    public List<ValueSetCodeSystemConceptDesignation> Designation { get; set; }
    /// <summary>
    /// A human readable string that is the recommended default way to present this concept to a user.
    /// </summary>
    public string Display { get; set; }
    /// <summary>
    /// Extension container element for Display
    /// </summary>
    public Element _Display { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (Abstract != null)
      {
        writer.WriteBoolean("abstract", (bool)Abstract!);
      }

      if (_Abstract != null)
      {
        writer.WritePropertyName("_abstract");
        _Abstract.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Display))
      {
        writer.WriteString("display", (string)Display!);
      }

      if (_Display != null)
      {
        writer.WritePropertyName("_display");
        _Display.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Definition))
      {
        writer.WriteString("definition", (string)Definition!);
      }

      if (_Definition != null)
      {
        writer.WritePropertyName("_definition");
        _Definition.SerializeJson(writer, options);
      }

      if ((Designation != null) && (Designation.Count != 0))
      {
        writer.WritePropertyName("designation");
        writer.WriteStartArray();

        foreach (ValueSetCodeSystemConceptDesignation valDesignation in Designation)
        {
          valDesignation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Concept != null) && (Concept.Count != 0))
      {
        writer.WritePropertyName("concept");
        writer.WriteStartArray();

        foreach (ValueSetCodeSystemConcept valConcept in Concept)
        {
          valConcept.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "abstract":
          Abstract = reader.GetBoolean();
          break;

        case "_abstract":
          _Abstract = new fhirCsR2.Models.Element();
          _Abstract.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR2.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "concept":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Concept = new List<ValueSetCodeSystemConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ValueSetCodeSystemConcept objConcept = new fhirCsR2.Models.ValueSetCodeSystemConcept();
            objConcept.DeserializeJson(ref reader, options);
            Concept.Add(objConcept);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Concept.Count == 0)
          {
            Concept = null;
          }

          break;

        case "definition":
          Definition = reader.GetString();
          break;

        case "_definition":
          _Definition = new fhirCsR2.Models.Element();
          _Definition.DeserializeJson(ref reader, options);
          break;

        case "designation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Designation = new List<ValueSetCodeSystemConceptDesignation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ValueSetCodeSystemConceptDesignation objDesignation = new fhirCsR2.Models.ValueSetCodeSystemConceptDesignation();
            objDesignation.DeserializeJson(ref reader, options);
            Designation.Add(objDesignation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Designation.Count == 0)
          {
            Designation = null;
          }

          break;

        case "display":
          Display = reader.GetString();
          break;

        case "_display":
          _Display = new fhirCsR2.Models.Element();
          _Display.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A definition of a code system, inlined into the value set (as a packaging convenience). Note that the inline code system may be used from other value sets by referring to its (codeSystem.system) directly.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ValueSetCodeSystem>))]
  public class ValueSetCodeSystem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// If code comparison is case sensitive when codes within this system are compared to each other.
    /// </summary>
    public bool? CaseSensitive { get; set; }
    /// <summary>
    /// Extension container element for CaseSensitive
    /// </summary>
    public Element _CaseSensitive { get; set; }
    /// <summary>
    /// Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.
    /// </summary>
    public List<ValueSetCodeSystemConcept> Concept { get; set; }
    /// <summary>
    /// An absolute URI that is used to reference this code system, including in [Coding]{datatypes.html#Coding}.system.
    /// </summary>
    public string System { get; set; }
    /// <summary>
    /// Extension container element for System
    /// </summary>
    public Element _System { get; set; }
    /// <summary>
    /// The version of this code system that defines the codes. Note that the version is optional because a well maintained code system does not suffer from versioning, and therefore the version does not need to be maintained. However many code systems are not well maintained, and the version needs to be defined and tracked.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(System))
      {
        writer.WriteString("system", (string)System!);
      }

      if (_System != null)
      {
        writer.WritePropertyName("_system");
        _System.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (CaseSensitive != null)
      {
        writer.WriteBoolean("caseSensitive", (bool)CaseSensitive!);
      }

      if (_CaseSensitive != null)
      {
        writer.WritePropertyName("_caseSensitive");
        _CaseSensitive.SerializeJson(writer, options);
      }

      if ((Concept != null) && (Concept.Count != 0))
      {
        writer.WritePropertyName("concept");
        writer.WriteStartArray();

        foreach (ValueSetCodeSystemConcept valConcept in Concept)
        {
          valConcept.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "caseSensitive":
          CaseSensitive = reader.GetBoolean();
          break;

        case "_caseSensitive":
          _CaseSensitive = new fhirCsR2.Models.Element();
          _CaseSensitive.DeserializeJson(ref reader, options);
          break;

        case "concept":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Concept = new List<ValueSetCodeSystemConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ValueSetCodeSystemConcept objConcept = new fhirCsR2.Models.ValueSetCodeSystemConcept();
            objConcept.DeserializeJson(ref reader, options);
            Concept.Add(objConcept);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Concept.Count == 0)
          {
            Concept = null;
          }

          break;

        case "system":
          System = reader.GetString();
          break;

        case "_system":
          _System = new fhirCsR2.Models.Element();
          _System.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR2.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Specifies a concept to be included or excluded.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ValueSetComposeIncludeConcept>))]
  public class ValueSetComposeIncludeConcept : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Specifies a code for the concept to be included or excluded.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
    /// </summary>
    public List<ValueSetCodeSystemConceptDesignation> Designation { get; set; }
    /// <summary>
    /// The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.
    /// </summary>
    public string Display { get; set; }
    /// <summary>
    /// Extension container element for Display
    /// </summary>
    public Element _Display { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Display))
      {
        writer.WriteString("display", (string)Display!);
      }

      if (_Display != null)
      {
        writer.WritePropertyName("_display");
        _Display.SerializeJson(writer, options);
      }

      if ((Designation != null) && (Designation.Count != 0))
      {
        writer.WritePropertyName("designation");
        writer.WriteStartArray();

        foreach (ValueSetCodeSystemConceptDesignation valDesignation in Designation)
        {
          valDesignation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR2.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "designation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Designation = new List<ValueSetCodeSystemConceptDesignation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ValueSetCodeSystemConceptDesignation objDesignation = new fhirCsR2.Models.ValueSetCodeSystemConceptDesignation();
            objDesignation.DeserializeJson(ref reader, options);
            Designation.Add(objDesignation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Designation.Count == 0)
          {
            Designation = null;
          }

          break;

        case "display":
          Display = reader.GetString();
          break;

        case "_display":
          _Display = new fhirCsR2.Models.Element();
          _Display.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ValueSetComposeIncludeFilter>))]
  public class ValueSetComposeIncludeFilter : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The kind of operation to perform as a part of the filter criteria.
    /// </summary>
    public string Op { get; set; }
    /// <summary>
    /// Extension container element for Op
    /// </summary>
    public Element _Op { get; set; }
    /// <summary>
    /// A code that identifies a property defined in the code system.
    /// </summary>
    public string Property { get; set; }
    /// <summary>
    /// Extension container element for Property
    /// </summary>
    public Element _Property { get; set; }
    /// <summary>
    /// The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Property))
      {
        writer.WriteString("property", (string)Property!);
      }

      if (_Property != null)
      {
        writer.WritePropertyName("_property");
        _Property.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Op))
      {
        writer.WriteString("op", (string)Op!);
      }

      if (_Op != null)
      {
        writer.WritePropertyName("_op");
        _Op.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "op":
          Op = reader.GetString();
          break;

        case "_op":
          _Op = new fhirCsR2.Models.Element();
          _Op.DeserializeJson(ref reader, options);
          break;

        case "property":
          Property = reader.GetString();
          break;

        case "_property":
          _Property = new fhirCsR2.Models.Element();
          _Property.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR2.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ValueSet.compose.include.filter.op field
  /// </summary>
  public static class ValueSetComposeIncludeFilterOpCodes {
    public const string EQUALS = "=";
    public const string IS_A = "is-a";
    public const string IS_NOT_A = "is-not-a";
    public const string REGEX = "regex";
    public const string VAL_IN = "in";
    public const string NOT_IN = "not-in";
  }
  /// <summary>
  /// Include one or more codes from a code system.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ValueSetComposeInclude>))]
  public class ValueSetComposeInclude : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Specifies a concept to be included or excluded.
    /// </summary>
    public List<ValueSetComposeIncludeConcept> Concept { get; set; }
    /// <summary>
    /// Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
    /// </summary>
    public List<ValueSetComposeIncludeFilter> Filter { get; set; }
    /// <summary>
    /// An absolute URI which is the code system from which the selected codes come from.
    /// </summary>
    public string System { get; set; }
    /// <summary>
    /// Extension container element for System
    /// </summary>
    public Element _System { get; set; }
    /// <summary>
    /// The version of the code system that the codes are selected from.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(System))
      {
        writer.WriteString("system", (string)System!);
      }

      if (_System != null)
      {
        writer.WritePropertyName("_system");
        _System.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if ((Concept != null) && (Concept.Count != 0))
      {
        writer.WritePropertyName("concept");
        writer.WriteStartArray();

        foreach (ValueSetComposeIncludeConcept valConcept in Concept)
        {
          valConcept.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Filter != null) && (Filter.Count != 0))
      {
        writer.WritePropertyName("filter");
        writer.WriteStartArray();

        foreach (ValueSetComposeIncludeFilter valFilter in Filter)
        {
          valFilter.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "concept":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Concept = new List<ValueSetComposeIncludeConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ValueSetComposeIncludeConcept objConcept = new fhirCsR2.Models.ValueSetComposeIncludeConcept();
            objConcept.DeserializeJson(ref reader, options);
            Concept.Add(objConcept);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Concept.Count == 0)
          {
            Concept = null;
          }

          break;

        case "filter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Filter = new List<ValueSetComposeIncludeFilter>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ValueSetComposeIncludeFilter objFilter = new fhirCsR2.Models.ValueSetComposeIncludeFilter();
            objFilter.DeserializeJson(ref reader, options);
            Filter.Add(objFilter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Filter.Count == 0)
          {
            Filter = null;
          }

          break;

        case "system":
          System = reader.GetString();
          break;

        case "_system":
          _System = new fhirCsR2.Models.Element();
          _System.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR2.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ValueSetCompose>))]
  public class ValueSetCompose : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Exclude one or more codes from the value set.
    /// </summary>
    public List<ValueSetComposeInclude> Exclude { get; set; }
    /// <summary>
    /// Includes the contents of the referenced value set as a part of the contents of this value set. This is an absolute URI that is a reference to ValueSet.uri.
    /// </summary>
    public List<string> Import { get; set; }
    /// <summary>
    /// Extension container element for Import
    /// </summary>
    public List<Element> _Import { get; set; }
    /// <summary>
    /// Include one or more codes from a code system.
    /// </summary>
    public List<ValueSetComposeInclude> Include { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Import != null) && (Import.Count != 0))
      {
        writer.WritePropertyName("import");
        writer.WriteStartArray();

        foreach (string valImport in Import)
        {
          writer.WriteStringValue(valImport);
        }

        writer.WriteEndArray();
      }

      if ((_Import != null) && (_Import.Count != 0))
      {
        writer.WritePropertyName("_import");
        writer.WriteStartArray();

        foreach (Element val_Import in _Import)
        {
          val_Import.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Include != null) && (Include.Count != 0))
      {
        writer.WritePropertyName("include");
        writer.WriteStartArray();

        foreach (ValueSetComposeInclude valInclude in Include)
        {
          valInclude.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Exclude != null) && (Exclude.Count != 0))
      {
        writer.WritePropertyName("exclude");
        writer.WriteStartArray();

        foreach (ValueSetComposeInclude valExclude in Exclude)
        {
          valExclude.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "exclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Exclude = new List<ValueSetComposeInclude>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ValueSetComposeInclude objExclude = new fhirCsR2.Models.ValueSetComposeInclude();
            objExclude.DeserializeJson(ref reader, options);
            Exclude.Add(objExclude);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Exclude.Count == 0)
          {
            Exclude = null;
          }

          break;

        case "import":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Import = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Import.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Import.Count == 0)
          {
            Import = null;
          }

          break;

        case "_import":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Import = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Import = new fhirCsR2.Models.Element();
            obj_Import.DeserializeJson(ref reader, options);
            _Import.Add(obj_Import);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Import.Count == 0)
          {
            _Import = null;
          }

          break;

        case "include":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Include = new List<ValueSetComposeInclude>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ValueSetComposeInclude objInclude = new fhirCsR2.Models.ValueSetComposeInclude();
            objInclude.DeserializeJson(ref reader, options);
            Include.Add(objInclude);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Include.Count == 0)
          {
            Include = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ValueSetExpansionParameter>))]
  public class ValueSetExpansionParameter : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The name of the parameter.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The value of the parameter.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// The value of the parameter.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// Extension container element for ValueBoolean
    /// </summary>
    public Element _ValueBoolean { get; set; }
    /// <summary>
    /// The value of the parameter.
    /// </summary>
    public int? ValueInteger { get; set; }
    /// <summary>
    /// Extension container element for ValueInteger
    /// </summary>
    public Element _ValueInteger { get; set; }
    /// <summary>
    /// The value of the parameter.
    /// </summary>
    public decimal? ValueDecimal { get; set; }
    /// <summary>
    /// Extension container element for ValueDecimal
    /// </summary>
    public Element _ValueDecimal { get; set; }
    /// <summary>
    /// The value of the parameter.
    /// </summary>
    public string ValueUri { get; set; }
    /// <summary>
    /// Extension container element for ValueUri
    /// </summary>
    public Element _ValueUri { get; set; }
    /// <summary>
    /// The value of the parameter.
    /// </summary>
    public string ValueCode { get; set; }
    /// <summary>
    /// Extension container element for ValueCode
    /// </summary>
    public Element _ValueCode { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (_ValueBoolean != null)
      {
        writer.WritePropertyName("_valueBoolean");
        _ValueBoolean.SerializeJson(writer, options);
      }

      if (ValueInteger != null)
      {
        writer.WriteNumber("valueInteger", (int)ValueInteger!);
      }

      if (_ValueInteger != null)
      {
        writer.WritePropertyName("_valueInteger");
        _ValueInteger.SerializeJson(writer, options);
      }

      if (ValueDecimal != null)
      {
        writer.WriteNumber("valueDecimal", (decimal)ValueDecimal!);
      }

      if (_ValueDecimal != null)
      {
        writer.WritePropertyName("_valueDecimal");
        _ValueDecimal.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueUri))
      {
        writer.WriteString("valueUri", (string)ValueUri!);
      }

      if (_ValueUri != null)
      {
        writer.WritePropertyName("_valueUri");
        _ValueUri.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueCode))
      {
        writer.WriteString("valueCode", (string)ValueCode!);
      }

      if (_ValueCode != null)
      {
        writer.WritePropertyName("_valueCode");
        _ValueCode.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR2.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "_valueBoolean":
          _ValueBoolean = new fhirCsR2.Models.Element();
          _ValueBoolean.DeserializeJson(ref reader, options);
          break;

        case "valueInteger":
          ValueInteger = reader.GetInt32();
          break;

        case "_valueInteger":
          _ValueInteger = new fhirCsR2.Models.Element();
          _ValueInteger.DeserializeJson(ref reader, options);
          break;

        case "valueDecimal":
          ValueDecimal = reader.GetDecimal();
          break;

        case "_valueDecimal":
          _ValueDecimal = new fhirCsR2.Models.Element();
          _ValueDecimal.DeserializeJson(ref reader, options);
          break;

        case "valueUri":
          ValueUri = reader.GetString();
          break;

        case "_valueUri":
          _ValueUri = new fhirCsR2.Models.Element();
          _ValueUri.DeserializeJson(ref reader, options);
          break;

        case "valueCode":
          ValueCode = reader.GetString();
          break;

        case "_valueCode":
          _ValueCode = new fhirCsR2.Models.Element();
          _ValueCode.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The codes that are contained in the value set expansion.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ValueSetExpansionContains>))]
  public class ValueSetExpansionContains : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.
    /// </summary>
    public bool? Abstract { get; set; }
    /// <summary>
    /// Extension container element for Abstract
    /// </summary>
    public Element _Abstract { get; set; }
    /// <summary>
    /// The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// Other codes and entries contained under this entry in the hierarchy.
    /// </summary>
    public List<ValueSetExpansionContains> Contains { get; set; }
    /// <summary>
    /// The recommended display for this item in the expansion.
    /// </summary>
    public string Display { get; set; }
    /// <summary>
    /// Extension container element for Display
    /// </summary>
    public Element _Display { get; set; }
    /// <summary>
    /// An absolute URI which is the code system in which the code for this item in the expansion is defined.
    /// </summary>
    public string System { get; set; }
    /// <summary>
    /// Extension container element for System
    /// </summary>
    public Element _System { get; set; }
    /// <summary>
    /// The version of this code system that defined this code and/or display. This should only be used with code systems that do not enforce concept permanence.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(System))
      {
        writer.WriteString("system", (string)System!);
      }

      if (_System != null)
      {
        writer.WritePropertyName("_system");
        _System.SerializeJson(writer, options);
      }

      if (Abstract != null)
      {
        writer.WriteBoolean("abstract", (bool)Abstract!);
      }

      if (_Abstract != null)
      {
        writer.WritePropertyName("_abstract");
        _Abstract.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Display))
      {
        writer.WriteString("display", (string)Display!);
      }

      if (_Display != null)
      {
        writer.WritePropertyName("_display");
        _Display.SerializeJson(writer, options);
      }

      if ((Contains != null) && (Contains.Count != 0))
      {
        writer.WritePropertyName("contains");
        writer.WriteStartArray();

        foreach (ValueSetExpansionContains valContains in Contains)
        {
          valContains.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "abstract":
          Abstract = reader.GetBoolean();
          break;

        case "_abstract":
          _Abstract = new fhirCsR2.Models.Element();
          _Abstract.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR2.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "contains":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contains = new List<ValueSetExpansionContains>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ValueSetExpansionContains objContains = new fhirCsR2.Models.ValueSetExpansionContains();
            objContains.DeserializeJson(ref reader, options);
            Contains.Add(objContains);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contains.Count == 0)
          {
            Contains = null;
          }

          break;

        case "display":
          Display = reader.GetString();
          break;

        case "_display":
          _Display = new fhirCsR2.Models.Element();
          _Display.DeserializeJson(ref reader, options);
          break;

        case "system":
          System = reader.GetString();
          break;

        case "_system":
          _System = new fhirCsR2.Models.Element();
          _System.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR2.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ValueSetExpansion>))]
  public class ValueSetExpansion : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The codes that are contained in the value set expansion.
    /// </summary>
    public List<ValueSetExpansionContains> Contains { get; set; }
    /// <summary>
    /// An identifier that uniquely identifies this expansion of the valueset. Systems may re-use the same identifier as long as the expansion and the definition remain the same, but are not required to do so.
    /// </summary>
    public string Identifier { get; set; }
    /// <summary>
    /// Extension container element for Identifier
    /// </summary>
    public Element _Identifier { get; set; }
    /// <summary>
    /// If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL not be present.
    /// </summary>
    public int? Offset { get; set; }
    /// <summary>
    /// Extension container element for Offset
    /// </summary>
    public Element _Offset { get; set; }
    /// <summary>
    /// A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
    /// </summary>
    public List<ValueSetExpansionParameter> Parameter { get; set; }
    /// <summary>
    /// The time at which the expansion was produced by the expanding system.
    /// </summary>
    public string Timestamp { get; set; }
    /// <summary>
    /// Extension container element for Timestamp
    /// </summary>
    public Element _Timestamp { get; set; }
    /// <summary>
    /// The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.
    /// </summary>
    public int? Total { get; set; }
    /// <summary>
    /// Extension container element for Total
    /// </summary>
    public Element _Total { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Identifier))
      {
        writer.WriteString("identifier", (string)Identifier!);
      }

      if (_Identifier != null)
      {
        writer.WritePropertyName("_identifier");
        _Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Timestamp))
      {
        writer.WriteString("timestamp", (string)Timestamp!);
      }

      if (_Timestamp != null)
      {
        writer.WritePropertyName("_timestamp");
        _Timestamp.SerializeJson(writer, options);
      }

      if (Total != null)
      {
        writer.WriteNumber("total", (int)Total!);
      }

      if (_Total != null)
      {
        writer.WritePropertyName("_total");
        _Total.SerializeJson(writer, options);
      }

      if (Offset != null)
      {
        writer.WriteNumber("offset", (int)Offset!);
      }

      if (_Offset != null)
      {
        writer.WritePropertyName("_offset");
        _Offset.SerializeJson(writer, options);
      }

      if ((Parameter != null) && (Parameter.Count != 0))
      {
        writer.WritePropertyName("parameter");
        writer.WriteStartArray();

        foreach (ValueSetExpansionParameter valParameter in Parameter)
        {
          valParameter.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Contains != null) && (Contains.Count != 0))
      {
        writer.WritePropertyName("contains");
        writer.WriteStartArray();

        foreach (ValueSetExpansionContains valContains in Contains)
        {
          valContains.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contains":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contains = new List<ValueSetExpansionContains>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ValueSetExpansionContains objContains = new fhirCsR2.Models.ValueSetExpansionContains();
            objContains.DeserializeJson(ref reader, options);
            Contains.Add(objContains);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contains.Count == 0)
          {
            Contains = null;
          }

          break;

        case "identifier":
          Identifier = reader.GetString();
          break;

        case "_identifier":
          _Identifier = new fhirCsR2.Models.Element();
          _Identifier.DeserializeJson(ref reader, options);
          break;

        case "offset":
          Offset = reader.GetInt32();
          break;

        case "_offset":
          _Offset = new fhirCsR2.Models.Element();
          _Offset.DeserializeJson(ref reader, options);
          break;

        case "parameter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Parameter = new List<ValueSetExpansionParameter>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ValueSetExpansionParameter objParameter = new fhirCsR2.Models.ValueSetExpansionParameter();
            objParameter.DeserializeJson(ref reader, options);
            Parameter.Add(objParameter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Parameter.Count == 0)
          {
            Parameter = null;
          }

          break;

        case "timestamp":
          Timestamp = reader.GetString();
          break;

        case "_timestamp":
          _Timestamp = new fhirCsR2.Models.Element();
          _Timestamp.DeserializeJson(ref reader, options);
          break;

        case "total":
          Total = reader.GetInt32();
          break;

        case "_total":
          _Total = new fhirCsR2.Models.Element();
          _Total.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A value set specifies a set of codes drawn from one or more code systems.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ValueSet>))]
  public class ValueSet : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ValueSet";
    /// <summary>
    /// A definition of a code system, inlined into the value set (as a packaging convenience). Note that the inline code system may be used from other value sets by referring to its (codeSystem.system) directly.
    /// </summary>
    public ValueSetCodeSystem CodeSystem { get; set; }
    /// <summary>
    /// A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.
    /// </summary>
    public ValueSetCompose Compose { get; set; }
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    public List<ValueSetContact> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Need to know when a value set was first legal for use or became withdrawn or replaced.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Human understandability.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
    /// </summary>
    public ValueSetExpansion Expansion { get; set; }
    /// <summary>
    /// This valueset was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Extension container element for Experimental
    /// </summary>
    public Element _Experimental { get; set; }
    /// <summary>
    /// It is not required to say whether this intent applies.
    /// </summary>
    public bool? Extensible { get; set; }
    /// <summary>
    /// Extension container element for Extensible
    /// </summary>
    public Element _Extensible { get; set; }
    /// <summary>
    /// Formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
    /// </summary>
    public bool? Immutable { get; set; }
    /// <summary>
    /// Extension container element for Immutable
    /// </summary>
    public Element _Immutable { get; set; }
    /// <summary>
    /// If a locked date is defined, then the Content Logical Definition must be evaluated using the current version of all referenced code system(s) and value set instances as of the locked date.
    /// </summary>
    public string LockedDate { get; set; }
    /// <summary>
    /// Extension container element for LockedDate
    /// </summary>
    public Element _LockedDate { get; set; }
    /// <summary>
    /// Support human navigation.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the value set.  May also allow for contact.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// Explains why this value set is needed and why it has been constrained as it has.
    /// </summary>
    public string Requirements { get; set; }
    /// <summary>
    /// Extension container element for Requirements
    /// </summary>
    public Element _Requirements { get; set; }
    /// <summary>
    /// Identify when/if the value set should be used.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// An absolute URL that is used to identify this value set when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this value set is (or will be) published.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Assist in searching for appropriate content.
    /// </summary>
    public List<CodeableConcept> UseContext { get; set; }
    /// <summary>
    /// Used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (_Experimental != null)
      {
        writer.WritePropertyName("_experimental");
        _Experimental.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ValueSetContact valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LockedDate))
      {
        writer.WriteString("lockedDate", (string)LockedDate!);
      }

      if (_LockedDate != null)
      {
        writer.WritePropertyName("_lockedDate");
        _LockedDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (CodeableConcept valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Immutable != null)
      {
        writer.WriteBoolean("immutable", (bool)Immutable!);
      }

      if (_Immutable != null)
      {
        writer.WritePropertyName("_immutable");
        _Immutable.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Requirements))
      {
        writer.WriteString("requirements", (string)Requirements!);
      }

      if (_Requirements != null)
      {
        writer.WritePropertyName("_requirements");
        _Requirements.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (Extensible != null)
      {
        writer.WriteBoolean("extensible", (bool)Extensible!);
      }

      if (_Extensible != null)
      {
        writer.WritePropertyName("_extensible");
        _Extensible.SerializeJson(writer, options);
      }

      if (CodeSystem != null)
      {
        writer.WritePropertyName("codeSystem");
        CodeSystem.SerializeJson(writer, options);
      }

      if (Compose != null)
      {
        writer.WritePropertyName("compose");
        Compose.SerializeJson(writer, options);
      }

      if (Expansion != null)
      {
        writer.WritePropertyName("expansion");
        Expansion.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "codeSystem":
          CodeSystem = new fhirCsR2.Models.ValueSetCodeSystem();
          CodeSystem.DeserializeJson(ref reader, options);
          break;

        case "compose":
          Compose = new fhirCsR2.Models.ValueSetCompose();
          Compose.DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ValueSetContact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ValueSetContact objContact = new fhirCsR2.Models.ValueSetContact();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR2.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR2.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "expansion":
          Expansion = new fhirCsR2.Models.ValueSetExpansion();
          Expansion.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "_experimental":
          _Experimental = new fhirCsR2.Models.Element();
          _Experimental.DeserializeJson(ref reader, options);
          break;

        case "extensible":
          Extensible = reader.GetBoolean();
          break;

        case "_extensible":
          _Extensible = new fhirCsR2.Models.Element();
          _Extensible.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR2.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "immutable":
          Immutable = reader.GetBoolean();
          break;

        case "_immutable":
          _Immutable = new fhirCsR2.Models.Element();
          _Immutable.DeserializeJson(ref reader, options);
          break;

        case "lockedDate":
          LockedDate = reader.GetString();
          break;

        case "_lockedDate":
          _LockedDate = new fhirCsR2.Models.Element();
          _LockedDate.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR2.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "requirements":
          Requirements = reader.GetString();
          break;

        case "_requirements":
          _Requirements = new fhirCsR2.Models.Element();
          _Requirements.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objUseContext = new fhirCsR2.Models.CodeableConcept();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR2.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ValueSet.status field
  /// </summary>
  public static class ValueSetStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
  }
}
