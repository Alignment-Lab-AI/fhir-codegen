// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<Meta>))]
  public class Meta : Element,  IFhirJsonSerializable {
    /// <summary>
    /// When the resource last changed - e.g. when the version changed.
    /// </summary>
    public string LastUpdated { get; set; }
    /// <summary>
    /// Extension container element for LastUpdated
    /// </summary>
    public Element _LastUpdated { get; set; }
    /// <summary>
    /// A list of profiles [[[StructureDefinition]]]s that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].
    /// </summary>
    public List<string> Profile { get; set; }
    /// <summary>
    /// Extension container element for Profile
    /// </summary>
    public List<Element> _Profile { get; set; }
    /// <summary>
    /// Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
    /// </summary>
    public List<Coding> Security { get; set; }
    /// <summary>
    /// Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.
    /// </summary>
    public List<Coding> Tag { get; set; }
    /// <summary>
    /// The version specific identifier, as it appears in the version portion of the URL. This values changes when the resource is created, updated, or deleted.
    /// </summary>
    public string VersionId { get; set; }
    /// <summary>
    /// Extension container element for VersionId
    /// </summary>
    public Element _VersionId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.Element)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(VersionId))
      {
        writer.WriteString("versionId", (string)VersionId!);
      }

      if (_VersionId != null)
      {
        writer.WritePropertyName("_versionId");
        _VersionId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastUpdated))
      {
        writer.WriteString("lastUpdated", (string)LastUpdated!);
      }

      if (_LastUpdated != null)
      {
        writer.WritePropertyName("_lastUpdated");
        _LastUpdated.SerializeJson(writer, options);
      }

      if ((Profile != null) && (Profile.Count != 0))
      {
        writer.WritePropertyName("profile");
        writer.WriteStartArray();

        foreach (string valProfile in Profile)
        {
          writer.WriteStringValue(valProfile);
        }

        writer.WriteEndArray();
      }

      if ((_Profile != null) && (_Profile.Count != 0))
      {
        writer.WritePropertyName("_profile");
        writer.WriteStartArray();

        foreach (Element val_Profile in _Profile)
        {
          val_Profile.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Security != null) && (Security.Count != 0))
      {
        writer.WritePropertyName("security");
        writer.WriteStartArray();

        foreach (Coding valSecurity in Security)
        {
          valSecurity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Tag != null) && (Tag.Count != 0))
      {
        writer.WritePropertyName("tag");
        writer.WriteStartArray();

        foreach (Coding valTag in Tag)
        {
          valTag.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "lastUpdated":
          LastUpdated = reader.GetString();
          break;

        case "_lastUpdated":
          _LastUpdated = new fhirCsR2.Models.Element();
          _LastUpdated.DeserializeJson(ref reader, options);
          break;

        case "profile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Profile = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Profile.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Profile.Count == 0)
          {
            Profile = null;
          }

          break;

        case "_profile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Profile = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Profile = new fhirCsR2.Models.Element();
            obj_Profile.DeserializeJson(ref reader, options);
            _Profile.Add(obj_Profile);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Profile.Count == 0)
          {
            _Profile = null;
          }

          break;

        case "security":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Security = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objSecurity = new fhirCsR2.Models.Coding();
            objSecurity.DeserializeJson(ref reader, options);
            Security.Add(objSecurity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Security.Count == 0)
          {
            Security = null;
          }

          break;

        case "tag":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Tag = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Coding objTag = new fhirCsR2.Models.Coding();
            objTag.DeserializeJson(ref reader, options);
            Tag.Add(objTag);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Tag.Count == 0)
          {
            Tag = null;
          }

          break;

        case "versionId":
          VersionId = reader.GetString();
          break;

        case "_versionId":
          _VersionId = new fhirCsR2.Models.Element();
          _VersionId.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
