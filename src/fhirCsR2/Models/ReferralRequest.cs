// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ReferralRequest>))]
  public class ReferralRequest : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ReferralRequest";
    /// <summary>
    /// Date/DateTime of creation for draft requests and date of activation for active requests.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Date/DateTime the request for referral or transfer of care is sent by the author.
    /// </summary>
    public string DateSent { get; set; }
    /// <summary>
    /// Extension container element for DateSent
    /// </summary>
    public Element _DateSent { get; set; }
    /// <summary>
    /// The reason element gives a short description of why the referral is being made, the description expands on this to support a more complete clinical summary.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The encounter at which the request for referral or transfer of care is initiated.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// Use cases: (1) to indicate that the requested service is not to happen before a specified date, and saving the start date in Period.start; (2) to indicate that the requested service must happen before a specified date, and saving the end date in Period.end; (3) to indicate that the requested service must happen during the specified dates ("start" and "end" values).
    /// </summary>
    public Period FulfillmentTime { get; set; }
    /// <summary>
    /// Business identifier that uniquely identifies the referral/care transfer request instance.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The patient who is the subject of a referral or transfer of care request.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// An indication of the urgency of referral (or where applicable the type of transfer of care) request.
    /// </summary>
    public CodeableConcept Priority { get; set; }
    /// <summary>
    /// Description of clinical condition indicating why referral/transfer of care is requested.  For example:  Pathological Anomalies, Disabled (physical or mental),  Behavioral Management.
    /// </summary>
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// The healthcare provider(s) or provider organization(s) who/which is to receive the referral/transfer of care request.
    /// </summary>
    public List<Reference> Recipient { get; set; }
    /// <summary>
    /// The healthcare provider or provider organization who/which initiated the referral/transfer of care request. Can also be  Patient (a self referral).
    /// </summary>
    public Reference Requester { get; set; }
    /// <summary>
    /// The service(s) that is/are requested to be provided to the patient.  For example: cardiac pacemaker insertion.
    /// </summary>
    public List<CodeableConcept> ServiceRequested { get; set; }
    /// <summary>
    /// Indication of the clinical domain or discipline to which the referral or transfer of care request is sent.  For example: Cardiology Gastroenterology Diabetology.
    /// </summary>
    public CodeableConcept Specialty { get; set; }
    /// <summary>
    /// The workflow status of the referral or transfer of care request.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Any additional (administrative, financial or clinical) information required to support request for referral or transfer of care.  For example: Presenting problems/chief complaints Medical History Family History Alerts Allergy/Intolerance and Adverse Reactions Medications Observations/Assessments (may include cognitive and fundtional assessments) Diagnostic Reports Care Plan.
    /// </summary>
    public List<Reference> SupportingInformation { get; set; }
    /// <summary>
    /// An indication of the type of referral (or where applicable the type of transfer of care) request.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Specialty != null)
      {
        writer.WritePropertyName("specialty");
        Specialty.SerializeJson(writer, options);
      }

      if (Priority != null)
      {
        writer.WritePropertyName("priority");
        Priority.SerializeJson(writer, options);
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (Requester != null)
      {
        writer.WritePropertyName("requester");
        Requester.SerializeJson(writer, options);
      }

      if ((Recipient != null) && (Recipient.Count != 0))
      {
        writer.WritePropertyName("recipient");
        writer.WriteStartArray();

        foreach (Reference valRecipient in Recipient)
        {
          valRecipient.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DateSent))
      {
        writer.WriteString("dateSent", (string)DateSent!);
      }

      if (_DateSent != null)
      {
        writer.WritePropertyName("_dateSent");
        _DateSent.SerializeJson(writer, options);
      }

      if (Reason != null)
      {
        writer.WritePropertyName("reason");
        Reason.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((ServiceRequested != null) && (ServiceRequested.Count != 0))
      {
        writer.WritePropertyName("serviceRequested");
        writer.WriteStartArray();

        foreach (CodeableConcept valServiceRequested in ServiceRequested)
        {
          valServiceRequested.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SupportingInformation != null) && (SupportingInformation.Count != 0))
      {
        writer.WritePropertyName("supportingInformation");
        writer.WriteStartArray();

        foreach (Reference valSupportingInformation in SupportingInformation)
        {
          valSupportingInformation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (FulfillmentTime != null)
      {
        writer.WritePropertyName("fulfillmentTime");
        FulfillmentTime.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR2.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "dateSent":
          DateSent = reader.GetString();
          break;

        case "_dateSent":
          _DateSent = new fhirCsR2.Models.Element();
          _DateSent.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new fhirCsR2.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "fulfillmentTime":
          FulfillmentTime = new fhirCsR2.Models.Period();
          FulfillmentTime.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Identifier objIdentifier = new fhirCsR2.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "patient":
          Patient = new fhirCsR2.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "priority":
          Priority = new fhirCsR2.Models.CodeableConcept();
          Priority.DeserializeJson(ref reader, options);
          break;

        case "reason":
          Reason = new fhirCsR2.Models.CodeableConcept();
          Reason.DeserializeJson(ref reader, options);
          break;

        case "recipient":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Recipient = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objRecipient = new fhirCsR2.Models.Reference();
            objRecipient.DeserializeJson(ref reader, options);
            Recipient.Add(objRecipient);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Recipient.Count == 0)
          {
            Recipient = null;
          }

          break;

        case "requester":
          Requester = new fhirCsR2.Models.Reference();
          Requester.DeserializeJson(ref reader, options);
          break;

        case "serviceRequested":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ServiceRequested = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objServiceRequested = new fhirCsR2.Models.CodeableConcept();
            objServiceRequested.DeserializeJson(ref reader, options);
            ServiceRequested.Add(objServiceRequested);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ServiceRequested.Count == 0)
          {
            ServiceRequested = null;
          }

          break;

        case "specialty":
          Specialty = new fhirCsR2.Models.CodeableConcept();
          Specialty.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "supportingInformation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportingInformation = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objSupportingInformation = new fhirCsR2.Models.Reference();
            objSupportingInformation.DeserializeJson(ref reader, options);
            SupportingInformation.Add(objSupportingInformation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportingInformation.Count == 0)
          {
            SupportingInformation = null;
          }

          break;

        case "type":
          Type = new fhirCsR2.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ReferralRequest.status field
  /// </summary>
  public static class ReferralRequestStatusCodes {
    public const string DRAFT = "draft";
    public const string REQUESTED = "requested";
    public const string ACTIVE = "active";
    public const string CANCELLED = "cancelled";
    public const string ACCEPTED = "accepted";
    public const string REJECTED = "rejected";
    public const string COMPLETED = "completed";
  }
}
