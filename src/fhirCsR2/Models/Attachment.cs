// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// For referring to data content defined in other formats.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<Attachment>))]
  public class Attachment : Element,  IFhirJsonSerializable {
    /// <summary>
    /// Processors of the data need to be able to know how to interpret the data.
    /// </summary>
    public string ContentType { get; set; }
    /// <summary>
    /// Extension container element for ContentType
    /// </summary>
    public Element _ContentType { get; set; }
    /// <summary>
    /// This is often tracked as an integrity issue for use of the attachment.
    /// </summary>
    public string Creation { get; set; }
    /// <summary>
    /// Extension container element for Creation
    /// </summary>
    public Element _Creation { get; set; }
    /// <summary>
    /// The data needs to able to be transmitted inline.
    /// </summary>
    public byte[] Data { get; set; }
    /// <summary>
    /// Included so that applications can verify that the contents of a location have not changed and so that a signature of the content can implicitly sign the content of an image without having to include the data in the instance or reference the url in the signature.
    /// </summary>
    public byte[] Hash { get; set; }
    /// <summary>
    /// Users need to be able to choose between the languages in a set of attachments.
    /// </summary>
    public string Language { get; set; }
    /// <summary>
    /// Extension container element for Language
    /// </summary>
    public Element _Language { get; set; }
    /// <summary>
    /// Representing the size allows applications to determine whether they should fetch the content automatically in advance, or refuse to fetch it at all.
    /// </summary>
    public uint? Size { get; set; }
    /// <summary>
    /// Applications need a label to display to a human user in place of the actual data if the data cannot be rendered or perceived by the viewer.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// The data needs to be transmitted by reference.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.Element)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(ContentType))
      {
        writer.WriteString("contentType", (string)ContentType!);
      }

      if (_ContentType != null)
      {
        writer.WritePropertyName("_contentType");
        _ContentType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Language))
      {
        writer.WriteString("language", (string)Language!);
      }

      if (_Language != null)
      {
        writer.WritePropertyName("_language");
        _Language.SerializeJson(writer, options);
      }

      if (Data != null)
      {
        writer.WriteString("data", System.Convert.ToBase64String(Data));
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (Size != null)
      {
        writer.WriteNumber("size", (uint)Size!);
      }

      if (Hash != null)
      {
        writer.WriteString("hash", System.Convert.ToBase64String(Hash));
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Creation))
      {
        writer.WriteString("creation", (string)Creation!);
      }

      if (_Creation != null)
      {
        writer.WritePropertyName("_creation");
        _Creation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentType":
          ContentType = reader.GetString();
          break;

        case "_contentType":
          _ContentType = new fhirCsR2.Models.Element();
          _ContentType.DeserializeJson(ref reader, options);
          break;

        case "creation":
          Creation = reader.GetString();
          break;

        case "_creation":
          _Creation = new fhirCsR2.Models.Element();
          _Creation.DeserializeJson(ref reader, options);
          break;

        case "data":
          Data = System.Convert.FromBase64String(reader.GetString());
          break;

        case "hash":
          Hash = System.Convert.FromBase64String(reader.GetString());
          break;

        case "language":
          Language = reader.GetString();
          break;

        case "_language":
          _Language = new fhirCsR2.Models.Element();
          _Language.DeserializeJson(ref reader, options);
          break;

        case "size":
          Size = reader.GetUInt32();
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR2.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
