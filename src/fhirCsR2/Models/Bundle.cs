// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// A series of links that provide context to this bundle.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<BundleLink>))]
  public class BundleLink : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A name which details the functional use for this link - see [[http://www.iana.org/assignments/link-relations/link-relations.xhtml]].
    /// </summary>
    public string Relation { get; set; }
    /// <summary>
    /// Extension container element for Relation
    /// </summary>
    public Element _Relation { get; set; }
    /// <summary>
    /// The reference details for the link.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Relation))
      {
        writer.WriteString("relation", (string)Relation!);
      }

      if (_Relation != null)
      {
        writer.WritePropertyName("_relation");
        _Relation.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "relation":
          Relation = reader.GetString();
          break;

        case "_relation":
          _Relation = new fhirCsR2.Models.Element();
          _Relation.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about the search process that lead to the creation of this entry.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<BundleEntrySearch>))]
  public class BundleEntrySearch : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Why this entry is in the result set - whether it's included as a match or because of an _include requirement.
    /// </summary>
    public string Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public Element _Mode { get; set; }
    /// <summary>
    /// When searching, the server's search ranking score for the entry.
    /// </summary>
    public decimal? Score { get; set; }
    /// <summary>
    /// Extension container element for Score
    /// </summary>
    public Element _Score { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Mode))
      {
        writer.WriteString("mode", (string)Mode!);
      }

      if (_Mode != null)
      {
        writer.WritePropertyName("_mode");
        _Mode.SerializeJson(writer, options);
      }

      if (Score != null)
      {
        writer.WriteNumber("score", (decimal)Score!);
      }

      if (_Score != null)
      {
        writer.WritePropertyName("_score");
        _Score.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          Mode = reader.GetString();
          break;

        case "_mode":
          _Mode = new fhirCsR2.Models.Element();
          _Mode.DeserializeJson(ref reader, options);
          break;

        case "score":
          Score = reader.GetDecimal();
          break;

        case "_score":
          _Score = new fhirCsR2.Models.Element();
          _Score.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Bundle.entry.search.mode field
  /// </summary>
  public static class BundleEntrySearchModeCodes {
    public const string MATCH = "match";
    public const string INCLUDE = "include";
    public const string OUTCOME = "outcome";
  }
  /// <summary>
  /// Additional information about how this entry should be processed as part of a transaction.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<BundleEntryRequest>))]
  public class BundleEntryRequest : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency).
    /// </summary>
    public string IfMatch { get; set; }
    /// <summary>
    /// Extension container element for IfMatch
    /// </summary>
    public Element _IfMatch { get; set; }
    /// <summary>
    /// Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread).
    /// </summary>
    public string IfModifiedSince { get; set; }
    /// <summary>
    /// Extension container element for IfModifiedSince
    /// </summary>
    public Element _IfModifiedSince { get; set; }
    /// <summary>
    /// Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL - what follows the "?" (not including the "?").
    /// </summary>
    public string IfNoneExist { get; set; }
    /// <summary>
    /// Extension container element for IfNoneExist
    /// </summary>
    public Element _IfNoneExist { get; set; }
    /// <summary>
    /// If the ETag values match, return a 304 Not modified status. See the API documentation for ["Conditional Read"](http.html#cread).
    /// </summary>
    public string IfNoneMatch { get; set; }
    /// <summary>
    /// Extension container element for IfNoneMatch
    /// </summary>
    public Element _IfNoneMatch { get; set; }
    /// <summary>
    /// The HTTP verb for this entry in either a update history, or a transaction/ transaction response.
    /// </summary>
    public string Method { get; set; }
    /// <summary>
    /// Extension container element for Method
    /// </summary>
    public Element _Method { get; set; }
    /// <summary>
    /// The URL for this entry, relative to the root (the address to which the request is posted).
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Method))
      {
        writer.WriteString("method", (string)Method!);
      }

      if (_Method != null)
      {
        writer.WritePropertyName("_method");
        _Method.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(IfNoneMatch))
      {
        writer.WriteString("ifNoneMatch", (string)IfNoneMatch!);
      }

      if (_IfNoneMatch != null)
      {
        writer.WritePropertyName("_ifNoneMatch");
        _IfNoneMatch.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(IfModifiedSince))
      {
        writer.WriteString("ifModifiedSince", (string)IfModifiedSince!);
      }

      if (_IfModifiedSince != null)
      {
        writer.WritePropertyName("_ifModifiedSince");
        _IfModifiedSince.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(IfMatch))
      {
        writer.WriteString("ifMatch", (string)IfMatch!);
      }

      if (_IfMatch != null)
      {
        writer.WritePropertyName("_ifMatch");
        _IfMatch.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(IfNoneExist))
      {
        writer.WriteString("ifNoneExist", (string)IfNoneExist!);
      }

      if (_IfNoneExist != null)
      {
        writer.WritePropertyName("_ifNoneExist");
        _IfNoneExist.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "ifMatch":
          IfMatch = reader.GetString();
          break;

        case "_ifMatch":
          _IfMatch = new fhirCsR2.Models.Element();
          _IfMatch.DeserializeJson(ref reader, options);
          break;

        case "ifModifiedSince":
          IfModifiedSince = reader.GetString();
          break;

        case "_ifModifiedSince":
          _IfModifiedSince = new fhirCsR2.Models.Element();
          _IfModifiedSince.DeserializeJson(ref reader, options);
          break;

        case "ifNoneExist":
          IfNoneExist = reader.GetString();
          break;

        case "_ifNoneExist":
          _IfNoneExist = new fhirCsR2.Models.Element();
          _IfNoneExist.DeserializeJson(ref reader, options);
          break;

        case "ifNoneMatch":
          IfNoneMatch = reader.GetString();
          break;

        case "_ifNoneMatch":
          _IfNoneMatch = new fhirCsR2.Models.Element();
          _IfNoneMatch.DeserializeJson(ref reader, options);
          break;

        case "method":
          Method = reader.GetString();
          break;

        case "_method":
          _Method = new fhirCsR2.Models.Element();
          _Method.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Bundle.entry.request.method field
  /// </summary>
  public static class BundleEntryRequestMethodCodes {
    public const string GET = "GET";
    public const string POST = "POST";
    public const string PUT = "PUT";
    public const string DELETE = "DELETE";
  }
  /// <summary>
  /// Additional information about how this entry should be processed as part of a transaction.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<BundleEntryResponse>))]
  public class BundleEntryResponse : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The etag for the resource, it the operation for the entry produced a versioned resource.
    /// </summary>
    public string Etag { get; set; }
    /// <summary>
    /// Extension container element for Etag
    /// </summary>
    public Element _Etag { get; set; }
    /// <summary>
    /// The date/time that the resource was modified on the server.
    /// </summary>
    public string LastModified { get; set; }
    /// <summary>
    /// Extension container element for LastModified
    /// </summary>
    public Element _LastModified { get; set; }
    /// <summary>
    /// The location header created by processing this operation.
    /// </summary>
    public string Location { get; set; }
    /// <summary>
    /// Extension container element for Location
    /// </summary>
    public Element _Location { get; set; }
    /// <summary>
    /// The status code returned by processing this entry.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Location))
      {
        writer.WriteString("location", (string)Location!);
      }

      if (_Location != null)
      {
        writer.WritePropertyName("_location");
        _Location.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Etag))
      {
        writer.WriteString("etag", (string)Etag!);
      }

      if (_Etag != null)
      {
        writer.WritePropertyName("_etag");
        _Etag.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastModified))
      {
        writer.WriteString("lastModified", (string)LastModified!);
      }

      if (_LastModified != null)
      {
        writer.WritePropertyName("_lastModified");
        _LastModified.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "etag":
          Etag = reader.GetString();
          break;

        case "_etag":
          _Etag = new fhirCsR2.Models.Element();
          _Etag.DeserializeJson(ref reader, options);
          break;

        case "lastModified":
          LastModified = reader.GetString();
          break;

        case "_lastModified":
          _LastModified = new fhirCsR2.Models.Element();
          _LastModified.DeserializeJson(ref reader, options);
          break;

        case "location":
          Location = reader.GetString();
          break;

        case "_location":
          _Location = new fhirCsR2.Models.Element();
          _Location.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<BundleEntry>))]
  public class BundleEntry : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The Absolute URL for the resource. This must be provided for all resources. The fullUrl SHALL not disagree with the id in the resource. The fullUrl is a version independent reference to the resource.
    /// </summary>
    public string FullUrl { get; set; }
    /// <summary>
    /// Extension container element for FullUrl
    /// </summary>
    public Element _FullUrl { get; set; }
    /// <summary>
    /// A series of links that provide context to this entry.
    /// </summary>
    public List<BundleLink> Link { get; set; }
    /// <summary>
    /// Additional information about how this entry should be processed as part of a transaction.
    /// </summary>
    public BundleEntryRequest Request { get; set; }
    /// <summary>
    /// The Resources for the entry.
    /// </summary>
    public Resource Resource { get; set; }
    /// <summary>
    /// Additional information about how this entry should be processed as part of a transaction.
    /// </summary>
    public BundleEntryResponse Response { get; set; }
    /// <summary>
    /// Information about the search process that lead to the creation of this entry.
    /// </summary>
    public BundleEntrySearch Search { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Link != null) && (Link.Count != 0))
      {
        writer.WritePropertyName("link");
        writer.WriteStartArray();

        foreach (BundleLink valLink in Link)
        {
          valLink.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(FullUrl))
      {
        writer.WriteString("fullUrl", (string)FullUrl!);
      }

      if (_FullUrl != null)
      {
        writer.WritePropertyName("_fullUrl");
        _FullUrl.SerializeJson(writer, options);
      }

      if (Resource != null)
      {
        writer.WritePropertyName("resource");
        JsonSerializer.Serialize<fhirCsR2.Models.Resource>(writer, (fhirCsR2.Models.Resource)Resource, options);
      }

      if (Search != null)
      {
        writer.WritePropertyName("search");
        Search.SerializeJson(writer, options);
      }

      if (Request != null)
      {
        writer.WritePropertyName("request");
        Request.SerializeJson(writer, options);
      }

      if (Response != null)
      {
        writer.WritePropertyName("response");
        Response.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "fullUrl":
          FullUrl = reader.GetString();
          break;

        case "_fullUrl":
          _FullUrl = new fhirCsR2.Models.Element();
          _FullUrl.DeserializeJson(ref reader, options);
          break;

        case "link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Link = new List<BundleLink>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.BundleLink objLink = new fhirCsR2.Models.BundleLink();
            objLink.DeserializeJson(ref reader, options);
            Link.Add(objLink);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Link.Count == 0)
          {
            Link = null;
          }

          break;

        case "request":
          Request = new fhirCsR2.Models.BundleEntryRequest();
          Request.DeserializeJson(ref reader, options);
          break;

        case "resource":
          Resource = JsonSerializer.Deserialize<fhirCsR2.Models.Resource>(ref reader, options);
          break;

        case "response":
          Response = new fhirCsR2.Models.BundleEntryResponse();
          Response.DeserializeJson(ref reader, options);
          break;

        case "search":
          Search = new fhirCsR2.Models.BundleEntrySearch();
          Search.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A container for a collection of resources.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<Bundle>))]
  public class Bundle : Resource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Bundle";
    /// <summary>
    /// An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).
    /// </summary>
    public List<BundleEntry> Entry { get; set; }
    /// <summary>
    /// A series of links that provide context to this bundle.
    /// </summary>
    public List<BundleLink> Link { get; set; }
    /// <summary>
    /// This element allows capturing signatures on documents. It also allows signatures on messages, transactions or even query responses. It may support content-authentication, non-repudiation or other business cases. This is primarily relevant where the bundle may travel through multiple hops or via other mechanisms where HTTPS non-repudiation is insufficient.
    /// </summary>
    public Signature Signature { get; set; }
    /// <summary>
    /// If a set of search matches, this is the total number of matches for the search (as opposed to the number of results in this bundle).
    /// </summary>
    public uint? Total { get; set; }
    /// <summary>
    /// Indicates the purpose of this bundle- how it was intended to be used.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.Resource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (Total != null)
      {
        writer.WriteNumber("total", (uint)Total!);
      }

      if ((Link != null) && (Link.Count != 0))
      {
        writer.WritePropertyName("link");
        writer.WriteStartArray();

        foreach (BundleLink valLink in Link)
        {
          valLink.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Entry != null) && (Entry.Count != 0))
      {
        writer.WritePropertyName("entry");
        writer.WriteStartArray();

        foreach (BundleEntry valEntry in Entry)
        {
          valEntry.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Signature != null)
      {
        writer.WritePropertyName("signature");
        Signature.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "entry":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Entry = new List<BundleEntry>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.BundleEntry objEntry = new fhirCsR2.Models.BundleEntry();
            objEntry.DeserializeJson(ref reader, options);
            Entry.Add(objEntry);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Entry.Count == 0)
          {
            Entry = null;
          }

          break;

        case "link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Link = new List<BundleLink>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.BundleLink objLink = new fhirCsR2.Models.BundleLink();
            objLink.DeserializeJson(ref reader, options);
            Link.Add(objLink);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Link.Count == 0)
          {
            Link = null;
          }

          break;

        case "signature":
          Signature = new fhirCsR2.Models.Signature();
          Signature.DeserializeJson(ref reader, options);
          break;

        case "total":
          Total = reader.GetUInt32();
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR2.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.Resource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Bundle.type field
  /// </summary>
  public static class BundleTypeCodes {
    public const string DOCUMENT = "document";
    public const string MESSAGE = "message";
    public const string TRANSACTION = "transaction";
    public const string TRANSACTION_RESPONSE = "transaction-response";
    public const string BATCH = "batch";
    public const string BATCH_RESPONSE = "batch-response";
    public const string HISTORY = "history";
    public const string SEARCHSET = "searchset";
    public const string COLLECTION = "collection";
  }
}
