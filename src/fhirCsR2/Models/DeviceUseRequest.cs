// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<DeviceUseRequest>))]
  public class DeviceUseRequest : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "DeviceUseRequest";
    /// <summary>
    /// Knowing where the device is targeted is important for tracking if multiple sites are possible.
    /// </summary>
    public CodeableConcept BodySiteCodeableConcept { get; set; }
    /// <summary>
    /// Knowing where the device is targeted is important for tracking if multiple sites are possible.
    /// </summary>
    public Reference BodySiteReference { get; set; }
    /// <summary>
    /// The details of the device  to be used.
    /// </summary>
    public Reference Device { get; set; }
    /// <summary>
    /// An encounter that provides additional context in which this request is made.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// Identifiers assigned to this order by the orderer or by the receiver.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Reason or justification for the use of this device.
    /// </summary>
    public List<CodeableConcept> Indication { get; set; }
    /// <summary>
    /// Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
    /// </summary>
    public List<string> Notes { get; set; }
    /// <summary>
    /// Extension container element for Notes
    /// </summary>
    public List<Element> _Notes { get; set; }
    /// <summary>
    /// The time when the request was made.
    /// </summary>
    public string OrderedOn { get; set; }
    /// <summary>
    /// Extension container element for OrderedOn
    /// </summary>
    public Element _OrderedOn { get; set; }
    /// <summary>
    /// Characterizes how quickly the  use of device must be initiated. Includes concepts such as stat, urgent, routine.
    /// </summary>
    public string Priority { get; set; }
    /// <summary>
    /// Extension container element for Priority
    /// </summary>
    public Element _Priority { get; set; }
    /// <summary>
    /// The proposed act must be performed if the indicated conditions occur, e.g.., shortness of breath, SpO2 less than x%.
    /// </summary>
    public List<CodeableConcept> PrnReason { get; set; }
    /// <summary>
    /// The time at which the request was made/recorded.
    /// </summary>
    public string RecordedOn { get; set; }
    /// <summary>
    /// Extension container element for RecordedOn
    /// </summary>
    public Element _RecordedOn { get; set; }
    /// <summary>
    /// The status of the request.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The patient who will use the device.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    public Timing TimingTiming { get; set; }
    /// <summary>
    /// The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    public Period TimingPeriod { get; set; }
    /// <summary>
    /// The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    public string TimingDateTime { get; set; }
    /// <summary>
    /// Extension container element for TimingDateTime
    /// </summary>
    public Element _TimingDateTime { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (BodySiteCodeableConcept != null)
      {
        writer.WritePropertyName("bodySiteCodeableConcept");
        BodySiteCodeableConcept.SerializeJson(writer, options);
      }

      if (BodySiteReference != null)
      {
        writer.WritePropertyName("bodySiteReference");
        BodySiteReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Device != null)
      {
        writer.WritePropertyName("device");
        Device.SerializeJson(writer, options);
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Indication != null) && (Indication.Count != 0))
      {
        writer.WritePropertyName("indication");
        writer.WriteStartArray();

        foreach (CodeableConcept valIndication in Indication)
        {
          valIndication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Notes != null) && (Notes.Count != 0))
      {
        writer.WritePropertyName("notes");
        writer.WriteStartArray();

        foreach (string valNotes in Notes)
        {
          writer.WriteStringValue(valNotes);
        }

        writer.WriteEndArray();
      }

      if ((_Notes != null) && (_Notes.Count != 0))
      {
        writer.WritePropertyName("_notes");
        writer.WriteStartArray();

        foreach (Element val_Notes in _Notes)
        {
          val_Notes.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PrnReason != null) && (PrnReason.Count != 0))
      {
        writer.WritePropertyName("prnReason");
        writer.WriteStartArray();

        foreach (CodeableConcept valPrnReason in PrnReason)
        {
          valPrnReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(OrderedOn))
      {
        writer.WriteString("orderedOn", (string)OrderedOn!);
      }

      if (_OrderedOn != null)
      {
        writer.WritePropertyName("_orderedOn");
        _OrderedOn.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RecordedOn))
      {
        writer.WriteString("recordedOn", (string)RecordedOn!);
      }

      if (_RecordedOn != null)
      {
        writer.WritePropertyName("_recordedOn");
        _RecordedOn.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (TimingTiming != null)
      {
        writer.WritePropertyName("timingTiming");
        TimingTiming.SerializeJson(writer, options);
      }

      if (TimingPeriod != null)
      {
        writer.WritePropertyName("timingPeriod");
        TimingPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TimingDateTime))
      {
        writer.WriteString("timingDateTime", (string)TimingDateTime!);
      }

      if (_TimingDateTime != null)
      {
        writer.WritePropertyName("_timingDateTime");
        _TimingDateTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Priority))
      {
        writer.WriteString("priority", (string)Priority!);
      }

      if (_Priority != null)
      {
        writer.WritePropertyName("_priority");
        _Priority.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "bodySiteCodeableConcept":
          BodySiteCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          BodySiteCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "bodySiteReference":
          BodySiteReference = new fhirCsR2.Models.Reference();
          BodySiteReference.DeserializeJson(ref reader, options);
          break;

        case "device":
          Device = new fhirCsR2.Models.Reference();
          Device.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new fhirCsR2.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Identifier objIdentifier = new fhirCsR2.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "indication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Indication = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objIndication = new fhirCsR2.Models.CodeableConcept();
            objIndication.DeserializeJson(ref reader, options);
            Indication.Add(objIndication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Indication.Count == 0)
          {
            Indication = null;
          }

          break;

        case "notes":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Notes = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Notes.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Notes.Count == 0)
          {
            Notes = null;
          }

          break;

        case "_notes":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Notes = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Notes = new fhirCsR2.Models.Element();
            obj_Notes.DeserializeJson(ref reader, options);
            _Notes.Add(obj_Notes);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Notes.Count == 0)
          {
            _Notes = null;
          }

          break;

        case "orderedOn":
          OrderedOn = reader.GetString();
          break;

        case "_orderedOn":
          _OrderedOn = new fhirCsR2.Models.Element();
          _OrderedOn.DeserializeJson(ref reader, options);
          break;

        case "priority":
          Priority = reader.GetString();
          break;

        case "_priority":
          _Priority = new fhirCsR2.Models.Element();
          _Priority.DeserializeJson(ref reader, options);
          break;

        case "prnReason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PrnReason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objPrnReason = new fhirCsR2.Models.CodeableConcept();
            objPrnReason.DeserializeJson(ref reader, options);
            PrnReason.Add(objPrnReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PrnReason.Count == 0)
          {
            PrnReason = null;
          }

          break;

        case "recordedOn":
          RecordedOn = reader.GetString();
          break;

        case "_recordedOn":
          _RecordedOn = new fhirCsR2.Models.Element();
          _RecordedOn.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR2.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "timingTiming":
          TimingTiming = new fhirCsR2.Models.Timing();
          TimingTiming.DeserializeJson(ref reader, options);
          break;

        case "timingPeriod":
          TimingPeriod = new fhirCsR2.Models.Period();
          TimingPeriod.DeserializeJson(ref reader, options);
          break;

        case "timingDateTime":
          TimingDateTime = reader.GetString();
          break;

        case "_timingDateTime":
          _TimingDateTime = new fhirCsR2.Models.Element();
          _TimingDateTime.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the DeviceUseRequest.priority field
  /// </summary>
  public static class DeviceUseRequestPriorityCodes {
    public const string ROUTINE = "routine";
    public const string URGENT = "urgent";
    public const string STAT = "stat";
    public const string ASAP = "asap";
    public static HashSet<string> Values = new HashSet<string>() {
      "routine",
      "urgent",
      "stat",
      "asap",
    };
  }
  /// <summary>
  /// Code Values for the DeviceUseRequest.status field
  /// </summary>
  public static class DeviceUseRequestStatusCodes {
    public const string PROPOSED = "proposed";
    public const string PLANNED = "planned";
    public const string REQUESTED = "requested";
    public const string RECEIVED = "received";
    public const string ACCEPTED = "accepted";
    public const string IN_PROGRESS = "in-progress";
    public const string COMPLETED = "completed";
    public const string SUSPENDED = "suspended";
    public const string REJECTED = "rejected";
    public const string ABORTED = "aborted";
    public static HashSet<string> Values = new HashSet<string>() {
      "proposed",
      "planned",
      "requested",
      "received",
      "accepted",
      "in-progress",
      "completed",
      "suspended",
      "rejected",
      "aborted",
    };
  }
}
