// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Base definition for all elements in a resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<Element>))]
  public class Element : IFhirJsonSerializable {
    /// <summary>
    /// May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
    /// </summary>
    public List<Extension> Extension { get; set; }
    /// <summary>
    /// JSON Serialization Comments - not an actual element
    /// </summary>
    public List<string> Fhir_comments { get; set; }
    /// <summary>
    /// Extension container element for Fhir_comments
    /// </summary>
    public List<Element> _Fhir_comments { get; set; }
    /// <summary>
    /// unique id for the element within a resource (for internal references).
    /// </summary>
    public string Id { get; set; }
    /// <summary>
    /// Extension container element for Id
    /// </summary>
    public Element _Id { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(Id))
      {
        writer.WriteString("id", (string)Id!);
      }

      if (_Id != null)
      {
        writer.WritePropertyName("_id");
        _Id.SerializeJson(writer, options);
      }

      if ((Extension != null) && (Extension.Count != 0))
      {
        writer.WritePropertyName("extension");
        writer.WriteStartArray();

        foreach (Extension valExtension in Extension)
        {
          valExtension.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Fhir_comments != null) && (Fhir_comments.Count != 0))
      {
        writer.WritePropertyName("fhir_comments");
        writer.WriteStartArray();

        foreach (string valFhir_comments in Fhir_comments)
        {
          writer.WriteStringValue(valFhir_comments);
        }

        writer.WriteEndArray();
      }

      if ((_Fhir_comments != null) && (_Fhir_comments.Count != 0))
      {
        writer.WritePropertyName("_fhir_comments");
        writer.WriteStartArray();

        foreach (Element val_Fhir_comments in _Fhir_comments)
        {
          val_Fhir_comments.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "extension":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Extension = new List<Extension>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Extension objExtension = new fhirCsR2.Models.Extension();
            objExtension.DeserializeJson(ref reader, options);
            Extension.Add(objExtension);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Extension.Count == 0)
          {
            Extension = null;
          }

          break;

        case "fhir_comments":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Fhir_comments = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Fhir_comments.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Fhir_comments.Count == 0)
          {
            Fhir_comments = null;
          }

          break;

        case "_fhir_comments":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Fhir_comments = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Fhir_comments = new fhirCsR2.Models.Element();
            obj_Fhir_comments.DeserializeJson(ref reader, options);
            _Fhir_comments.Add(obj_Fhir_comments);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Fhir_comments.Count == 0)
          {
            _Fhir_comments = null;
          }

          break;

        case "id":
          Id = reader.GetString();
          break;

        case "_id":
          _Id = new fhirCsR2.Models.Element();
          _Id.DeserializeJson(ref reader, options);
          break;

      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
