// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// A request for a procedure to be performed. May be a proposal or an order.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ProcedureRequest>))]
  public class ProcedureRequest : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ProcedureRequest";
    /// <summary>
    /// If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.
    /// </summary>
    public bool? AsNeededBoolean { get; set; }
    /// <summary>
    /// Extension container element for AsNeededBoolean
    /// </summary>
    public Element _AsNeededBoolean { get; set; }
    /// <summary>
    /// If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.
    /// </summary>
    public CodeableConcept AsNeededCodeableConcept { get; set; }
    /// <summary>
    /// Knowing where the procedure is made is important for tracking if multiple sites are possible.
    /// </summary>
    public List<CodeableConcept> BodySite { get; set; }
    /// <summary>
    /// The specific procedure that is ordered. Use text if the exact nature of the procedure cannot be coded.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The encounter within which the procedure proposal or request was created.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// Identifiers assigned to this order by the order or by the receiver.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Any other notes associated with this proposal or order - e.g. provider instructions.
    /// </summary>
    public List<Annotation> Notes { get; set; }
    /// <summary>
    /// The time when the request was made.
    /// </summary>
    public string OrderedOn { get; set; }
    /// <summary>
    /// Extension container element for OrderedOn
    /// </summary>
    public Element _OrderedOn { get; set; }
    /// <summary>
    /// The healthcare professional responsible for proposing or ordering the procedure.
    /// </summary>
    public Reference Orderer { get; set; }
    /// <summary>
    /// For example, the surgeon, anaethetist, endoscopist, etc.
    /// </summary>
    public Reference Performer { get; set; }
    /// <summary>
    /// The clinical priority associated with this order.
    /// </summary>
    public string Priority { get; set; }
    /// <summary>
    /// Extension container element for Priority
    /// </summary>
    public Element _Priority { get; set; }
    /// <summary>
    /// The reason why the procedure is being proposed or ordered. This procedure request may be motivated by a Condition for instance.
    /// </summary>
    public CodeableConcept ReasonCodeableConcept { get; set; }
    /// <summary>
    /// The reason why the procedure is being proposed or ordered. This procedure request may be motivated by a Condition for instance.
    /// </summary>
    public Reference ReasonReference { get; set; }
    /// <summary>
    /// The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    public string ScheduledDateTime { get; set; }
    /// <summary>
    /// Extension container element for ScheduledDateTime
    /// </summary>
    public Element _ScheduledDateTime { get; set; }
    /// <summary>
    /// The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    public Period ScheduledPeriod { get; set; }
    /// <summary>
    /// The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    public Timing ScheduledTiming { get; set; }
    /// <summary>
    /// The status of the order.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The person, animal or group that should receive the procedure.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if ((BodySite != null) && (BodySite.Count != 0))
      {
        writer.WritePropertyName("bodySite");
        writer.WriteStartArray();

        foreach (CodeableConcept valBodySite in BodySite)
        {
          valBodySite.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ReasonCodeableConcept != null)
      {
        writer.WritePropertyName("reasonCodeableConcept");
        ReasonCodeableConcept.SerializeJson(writer, options);
      }

      if (ReasonReference != null)
      {
        writer.WritePropertyName("reasonReference");
        ReasonReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ScheduledDateTime))
      {
        writer.WriteString("scheduledDateTime", (string)ScheduledDateTime!);
      }

      if (_ScheduledDateTime != null)
      {
        writer.WritePropertyName("_scheduledDateTime");
        _ScheduledDateTime.SerializeJson(writer, options);
      }

      if (ScheduledPeriod != null)
      {
        writer.WritePropertyName("scheduledPeriod");
        ScheduledPeriod.SerializeJson(writer, options);
      }

      if (ScheduledTiming != null)
      {
        writer.WritePropertyName("scheduledTiming");
        ScheduledTiming.SerializeJson(writer, options);
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if (Performer != null)
      {
        writer.WritePropertyName("performer");
        Performer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if ((Notes != null) && (Notes.Count != 0))
      {
        writer.WritePropertyName("notes");
        writer.WriteStartArray();

        foreach (Annotation valNotes in Notes)
        {
          valNotes.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (AsNeededBoolean != null)
      {
        writer.WriteBoolean("asNeededBoolean", (bool)AsNeededBoolean!);
      }

      if (_AsNeededBoolean != null)
      {
        writer.WritePropertyName("_asNeededBoolean");
        _AsNeededBoolean.SerializeJson(writer, options);
      }

      if (AsNeededCodeableConcept != null)
      {
        writer.WritePropertyName("asNeededCodeableConcept");
        AsNeededCodeableConcept.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(OrderedOn))
      {
        writer.WriteString("orderedOn", (string)OrderedOn!);
      }

      if (_OrderedOn != null)
      {
        writer.WritePropertyName("_orderedOn");
        _OrderedOn.SerializeJson(writer, options);
      }

      if (Orderer != null)
      {
        writer.WritePropertyName("orderer");
        Orderer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Priority))
      {
        writer.WriteString("priority", (string)Priority!);
      }

      if (_Priority != null)
      {
        writer.WritePropertyName("_priority");
        _Priority.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "asNeededBoolean":
          AsNeededBoolean = reader.GetBoolean();
          break;

        case "_asNeededBoolean":
          _AsNeededBoolean = new fhirCsR2.Models.Element();
          _AsNeededBoolean.DeserializeJson(ref reader, options);
          break;

        case "asNeededCodeableConcept":
          AsNeededCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          AsNeededCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "bodySite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BodySite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objBodySite = new fhirCsR2.Models.CodeableConcept();
            objBodySite.DeserializeJson(ref reader, options);
            BodySite.Add(objBodySite);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BodySite.Count == 0)
          {
            BodySite = null;
          }

          break;

        case "code":
          Code = new fhirCsR2.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new fhirCsR2.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Identifier objIdentifier = new fhirCsR2.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "notes":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Notes = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Annotation objNotes = new fhirCsR2.Models.Annotation();
            objNotes.DeserializeJson(ref reader, options);
            Notes.Add(objNotes);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Notes.Count == 0)
          {
            Notes = null;
          }

          break;

        case "orderedOn":
          OrderedOn = reader.GetString();
          break;

        case "_orderedOn":
          _OrderedOn = new fhirCsR2.Models.Element();
          _OrderedOn.DeserializeJson(ref reader, options);
          break;

        case "orderer":
          Orderer = new fhirCsR2.Models.Reference();
          Orderer.DeserializeJson(ref reader, options);
          break;

        case "performer":
          Performer = new fhirCsR2.Models.Reference();
          Performer.DeserializeJson(ref reader, options);
          break;

        case "priority":
          Priority = reader.GetString();
          break;

        case "_priority":
          _Priority = new fhirCsR2.Models.Element();
          _Priority.DeserializeJson(ref reader, options);
          break;

        case "reasonCodeableConcept":
          ReasonCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          ReasonCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "reasonReference":
          ReasonReference = new fhirCsR2.Models.Reference();
          ReasonReference.DeserializeJson(ref reader, options);
          break;

        case "scheduledDateTime":
          ScheduledDateTime = reader.GetString();
          break;

        case "_scheduledDateTime":
          _ScheduledDateTime = new fhirCsR2.Models.Element();
          _ScheduledDateTime.DeserializeJson(ref reader, options);
          break;

        case "scheduledPeriod":
          ScheduledPeriod = new fhirCsR2.Models.Period();
          ScheduledPeriod.DeserializeJson(ref reader, options);
          break;

        case "scheduledTiming":
          ScheduledTiming = new fhirCsR2.Models.Timing();
          ScheduledTiming.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR2.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ProcedureRequest.priority field
  /// </summary>
  public static class ProcedureRequestPriorityCodes {
    public const string ROUTINE = "routine";
    public const string URGENT = "urgent";
    public const string STAT = "stat";
    public const string ASAP = "asap";
    public static HashSet<string> Values = new HashSet<string>() {
      "routine",
      "urgent",
      "stat",
      "asap",
    };
  }
  /// <summary>
  /// Code Values for the ProcedureRequest.status field
  /// </summary>
  public static class ProcedureRequestStatusCodes {
    public const string PROPOSED = "proposed";
    public const string DRAFT = "draft";
    public const string REQUESTED = "requested";
    public const string RECEIVED = "received";
    public const string ACCEPTED = "accepted";
    public const string IN_PROGRESS = "in-progress";
    public const string COMPLETED = "completed";
    public const string SUSPENDED = "suspended";
    public const string REJECTED = "rejected";
    public const string ABORTED = "aborted";
    public static HashSet<string> Values = new HashSet<string>() {
      "proposed",
      "draft",
      "requested",
      "received",
      "accepted",
      "in-progress",
      "completed",
      "suspended",
      "rejected",
      "aborted",
    };
  }
}
