// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Indicates how the medication is to be used by the patient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<MedicationDispenseDosageInstruction>))]
  public class MedicationDispenseDosageInstruction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Additional instructions such as "Swallow with plenty of water" which may or may not be coded.
    /// </summary>
    public CodeableConcept AdditionalInstructions { get; set; }
    /// <summary>
    /// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
    /// </summary>
    public bool? AsNeededBoolean { get; set; }
    /// <summary>
    /// Extension container element for AsNeededBoolean
    /// </summary>
    public Element _AsNeededBoolean { get; set; }
    /// <summary>
    /// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
    /// </summary>
    public CodeableConcept AsNeededCodeableConcept { get; set; }
    /// <summary>
    /// The amount of therapeutic or other substance given at one administration event.
    /// </summary>
    public Range DoseRange { get; set; }
    /// <summary>
    /// The amount of therapeutic or other substance given at one administration event.
    /// </summary>
    public Quantity DoseQuantity { get; set; }
    /// <summary>
    /// The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time,  e.g. 1000mg in 24 hours.
    /// </summary>
    public Ratio MaxDosePerPeriod { get; set; }
    /// <summary>
    /// A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.
    /// </summary>
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    public Ratio RateRatio { get; set; }
    /// <summary>
    /// Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
    /// </summary>
    public Range RateRange { get; set; }
    /// <summary>
    /// A code specifying the route or physiological path of administration of a therapeutic agent into or onto a subject.
    /// </summary>
    public CodeableConcept Route { get; set; }
    /// <summary>
    /// A coded specification of the anatomic site where the medication first enters the body.
    /// </summary>
    public CodeableConcept SiteCodeableConcept { get; set; }
    /// <summary>
    /// A coded specification of the anatomic site where the medication first enters the body.
    /// </summary>
    public Reference SiteReference { get; set; }
    /// <summary>
    /// Free text dosage instructions can be used for cases where the instructions are too complex to code. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// The timing schedule for giving the medication to the patient.  The Schedule data type allows many different expressions.  For example, "Every  8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:";  "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
    /// </summary>
    public Timing Timing { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (AdditionalInstructions != null)
      {
        writer.WritePropertyName("additionalInstructions");
        AdditionalInstructions.SerializeJson(writer, options);
      }

      if (Timing != null)
      {
        writer.WritePropertyName("timing");
        Timing.SerializeJson(writer, options);
      }

      if (AsNeededBoolean != null)
      {
        writer.WriteBoolean("asNeededBoolean", (bool)AsNeededBoolean!);
      }

      if (_AsNeededBoolean != null)
      {
        writer.WritePropertyName("_asNeededBoolean");
        _AsNeededBoolean.SerializeJson(writer, options);
      }

      if (AsNeededCodeableConcept != null)
      {
        writer.WritePropertyName("asNeededCodeableConcept");
        AsNeededCodeableConcept.SerializeJson(writer, options);
      }

      if (SiteCodeableConcept != null)
      {
        writer.WritePropertyName("siteCodeableConcept");
        SiteCodeableConcept.SerializeJson(writer, options);
      }

      if (SiteReference != null)
      {
        writer.WritePropertyName("siteReference");
        SiteReference.SerializeJson(writer, options);
      }

      if (Route != null)
      {
        writer.WritePropertyName("route");
        Route.SerializeJson(writer, options);
      }

      if (Method != null)
      {
        writer.WritePropertyName("method");
        Method.SerializeJson(writer, options);
      }

      if (DoseRange != null)
      {
        writer.WritePropertyName("doseRange");
        DoseRange.SerializeJson(writer, options);
      }

      if (DoseQuantity != null)
      {
        writer.WritePropertyName("doseQuantity");
        DoseQuantity.SerializeJson(writer, options);
      }

      if (RateRatio != null)
      {
        writer.WritePropertyName("rateRatio");
        RateRatio.SerializeJson(writer, options);
      }

      if (RateRange != null)
      {
        writer.WritePropertyName("rateRange");
        RateRange.SerializeJson(writer, options);
      }

      if (MaxDosePerPeriod != null)
      {
        writer.WritePropertyName("maxDosePerPeriod");
        MaxDosePerPeriod.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "additionalInstructions":
          AdditionalInstructions = new fhirCsR2.Models.CodeableConcept();
          AdditionalInstructions.DeserializeJson(ref reader, options);
          break;

        case "asNeededBoolean":
          AsNeededBoolean = reader.GetBoolean();
          break;

        case "_asNeededBoolean":
          _AsNeededBoolean = new fhirCsR2.Models.Element();
          _AsNeededBoolean.DeserializeJson(ref reader, options);
          break;

        case "asNeededCodeableConcept":
          AsNeededCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          AsNeededCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "doseRange":
          DoseRange = new fhirCsR2.Models.Range();
          DoseRange.DeserializeJson(ref reader, options);
          break;

        case "doseQuantity":
          DoseQuantity = new fhirCsR2.Models.Quantity();
          DoseQuantity.DeserializeJson(ref reader, options);
          break;

        case "maxDosePerPeriod":
          MaxDosePerPeriod = new fhirCsR2.Models.Ratio();
          MaxDosePerPeriod.DeserializeJson(ref reader, options);
          break;

        case "method":
          Method = new fhirCsR2.Models.CodeableConcept();
          Method.DeserializeJson(ref reader, options);
          break;

        case "rateRatio":
          RateRatio = new fhirCsR2.Models.Ratio();
          RateRatio.DeserializeJson(ref reader, options);
          break;

        case "rateRange":
          RateRange = new fhirCsR2.Models.Range();
          RateRange.DeserializeJson(ref reader, options);
          break;

        case "route":
          Route = new fhirCsR2.Models.CodeableConcept();
          Route.DeserializeJson(ref reader, options);
          break;

        case "siteCodeableConcept":
          SiteCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          SiteCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "siteReference":
          SiteReference = new fhirCsR2.Models.Reference();
          SiteReference.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR2.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "timing":
          Timing = new fhirCsR2.Models.Timing();
          Timing.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<MedicationDispenseSubstitution>))]
  public class MedicationDispenseSubstitution : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates the reason for the substitution of (or lack of substitution) from what was prescribed.
    /// </summary>
    public List<CodeableConcept> Reason { get; set; }
    /// <summary>
    /// The person or organization that has primary responsibility for the substitution.
    /// </summary>
    public List<Reference> ResponsibleParty { get; set; }
    /// <summary>
    /// A code signifying whether a different drug was dispensed from what was prescribed.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Reason != null) && (Reason.Count != 0))
      {
        writer.WritePropertyName("reason");
        writer.WriteStartArray();

        foreach (CodeableConcept valReason in Reason)
        {
          valReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ResponsibleParty != null) && (ResponsibleParty.Count != 0))
      {
        writer.WritePropertyName("responsibleParty");
        writer.WriteStartArray();

        foreach (Reference valResponsibleParty in ResponsibleParty)
        {
          valResponsibleParty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objReason = new fhirCsR2.Models.CodeableConcept();
            objReason.DeserializeJson(ref reader, options);
            Reason.Add(objReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reason.Count == 0)
          {
            Reason = null;
          }

          break;

        case "responsibleParty":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ResponsibleParty = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objResponsibleParty = new fhirCsR2.Models.Reference();
            objResponsibleParty.DeserializeJson(ref reader, options);
            ResponsibleParty.Add(objResponsibleParty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ResponsibleParty.Count == 0)
          {
            ResponsibleParty = null;
          }

          break;

        case "type":
          Type = new fhirCsR2.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<MedicationDispense>))]
  public class MedicationDispense : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "MedicationDispense";
    /// <summary>
    /// Indicates the medication order that is being dispensed against.
    /// </summary>
    public List<Reference> AuthorizingPrescription { get; set; }
    /// <summary>
    /// The amount of medication expressed as a timing amount.
    /// </summary>
    public Quantity DaysSupply { get; set; }
    /// <summary>
    /// Identification of the facility/location where the medication was shipped to, as part of the dispense event.
    /// </summary>
    public Reference Destination { get; set; }
    /// <summary>
    /// The individual responsible for dispensing the medication.
    /// </summary>
    public Reference Dispenser { get; set; }
    /// <summary>
    /// Indicates how the medication is to be used by the patient.
    /// </summary>
    public List<MedicationDispenseDosageInstruction> DosageInstruction { get; set; }
    /// <summary>
    /// Identifier assigned by the dispensing facility - this is an identifier assigned outside FHIR.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    public CodeableConcept MedicationCodeableConcept { get; set; }
    /// <summary>
    /// Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
    /// </summary>
    public Reference MedicationReference { get; set; }
    /// <summary>
    /// Extra information about the dispense that could not be conveyed in the other attributes.
    /// </summary>
    public string Note { get; set; }
    /// <summary>
    /// Extension container element for Note
    /// </summary>
    public Element _Note { get; set; }
    /// <summary>
    /// A link to a resource representing the person to whom the medication will be given.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// The amount of medication that has been dispensed. Includes unit of measure.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
    /// </summary>
    public List<Reference> Receiver { get; set; }
    /// <summary>
    /// A code specifying the state of the set of dispense events.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.
    /// </summary>
    public MedicationDispenseSubstitution Substitution { get; set; }
    /// <summary>
    /// Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The time the dispensed product was provided to the patient or their representative.
    /// </summary>
    public string WhenHandedOver { get; set; }
    /// <summary>
    /// Extension container element for WhenHandedOver
    /// </summary>
    public Element _WhenHandedOver { get; set; }
    /// <summary>
    /// The time when the dispensed product was packaged and reviewed.
    /// </summary>
    public string WhenPrepared { get; set; }
    /// <summary>
    /// Extension container element for WhenPrepared
    /// </summary>
    public Element _WhenPrepared { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (Dispenser != null)
      {
        writer.WritePropertyName("dispenser");
        Dispenser.SerializeJson(writer, options);
      }

      if ((AuthorizingPrescription != null) && (AuthorizingPrescription.Count != 0))
      {
        writer.WritePropertyName("authorizingPrescription");
        writer.WriteStartArray();

        foreach (Reference valAuthorizingPrescription in AuthorizingPrescription)
        {
          valAuthorizingPrescription.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (DaysSupply != null)
      {
        writer.WritePropertyName("daysSupply");
        DaysSupply.SerializeJson(writer, options);
      }

      if (MedicationCodeableConcept != null)
      {
        writer.WritePropertyName("medicationCodeableConcept");
        MedicationCodeableConcept.SerializeJson(writer, options);
      }

      if (MedicationReference != null)
      {
        writer.WritePropertyName("medicationReference");
        MedicationReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(WhenPrepared))
      {
        writer.WriteString("whenPrepared", (string)WhenPrepared!);
      }

      if (_WhenPrepared != null)
      {
        writer.WritePropertyName("_whenPrepared");
        _WhenPrepared.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(WhenHandedOver))
      {
        writer.WriteString("whenHandedOver", (string)WhenHandedOver!);
      }

      if (_WhenHandedOver != null)
      {
        writer.WritePropertyName("_whenHandedOver");
        _WhenHandedOver.SerializeJson(writer, options);
      }

      if (Destination != null)
      {
        writer.WritePropertyName("destination");
        Destination.SerializeJson(writer, options);
      }

      if ((Receiver != null) && (Receiver.Count != 0))
      {
        writer.WritePropertyName("receiver");
        writer.WriteStartArray();

        foreach (Reference valReceiver in Receiver)
        {
          valReceiver.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Note))
      {
        writer.WriteString("note", (string)Note!);
      }

      if (_Note != null)
      {
        writer.WritePropertyName("_note");
        _Note.SerializeJson(writer, options);
      }

      if ((DosageInstruction != null) && (DosageInstruction.Count != 0))
      {
        writer.WritePropertyName("dosageInstruction");
        writer.WriteStartArray();

        foreach (MedicationDispenseDosageInstruction valDosageInstruction in DosageInstruction)
        {
          valDosageInstruction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Substitution != null)
      {
        writer.WritePropertyName("substitution");
        Substitution.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authorizingPrescription":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AuthorizingPrescription = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objAuthorizingPrescription = new fhirCsR2.Models.Reference();
            objAuthorizingPrescription.DeserializeJson(ref reader, options);
            AuthorizingPrescription.Add(objAuthorizingPrescription);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AuthorizingPrescription.Count == 0)
          {
            AuthorizingPrescription = null;
          }

          break;

        case "daysSupply":
          DaysSupply = new fhirCsR2.Models.Quantity();
          DaysSupply.DeserializeJson(ref reader, options);
          break;

        case "destination":
          Destination = new fhirCsR2.Models.Reference();
          Destination.DeserializeJson(ref reader, options);
          break;

        case "dispenser":
          Dispenser = new fhirCsR2.Models.Reference();
          Dispenser.DeserializeJson(ref reader, options);
          break;

        case "dosageInstruction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DosageInstruction = new List<MedicationDispenseDosageInstruction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.MedicationDispenseDosageInstruction objDosageInstruction = new fhirCsR2.Models.MedicationDispenseDosageInstruction();
            objDosageInstruction.DeserializeJson(ref reader, options);
            DosageInstruction.Add(objDosageInstruction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DosageInstruction.Count == 0)
          {
            DosageInstruction = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR2.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "medicationCodeableConcept":
          MedicationCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          MedicationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "medicationReference":
          MedicationReference = new fhirCsR2.Models.Reference();
          MedicationReference.DeserializeJson(ref reader, options);
          break;

        case "note":
          Note = reader.GetString();
          break;

        case "_note":
          _Note = new fhirCsR2.Models.Element();
          _Note.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR2.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR2.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "receiver":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Receiver = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objReceiver = new fhirCsR2.Models.Reference();
            objReceiver.DeserializeJson(ref reader, options);
            Receiver.Add(objReceiver);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Receiver.Count == 0)
          {
            Receiver = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "substitution":
          Substitution = new fhirCsR2.Models.MedicationDispenseSubstitution();
          Substitution.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR2.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "whenHandedOver":
          WhenHandedOver = reader.GetString();
          break;

        case "_whenHandedOver":
          _WhenHandedOver = new fhirCsR2.Models.Element();
          _WhenHandedOver.DeserializeJson(ref reader, options);
          break;

        case "whenPrepared":
          WhenPrepared = reader.GetString();
          break;

        case "_whenPrepared":
          _WhenPrepared = new fhirCsR2.Models.Element();
          _WhenPrepared.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MedicationDispense.status field
  /// </summary>
  public static class MedicationDispenseStatusCodes {
    public const string IN_PROGRESS = "in-progress";
    public const string ON_HOLD = "on-hold";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string STOPPED = "stopped";
    public static HashSet<string> Values = new HashSet<string>() {
      "in-progress",
      "on-hold",
      "completed",
      "entered-in-error",
      "stopped",
    };
  }
}
