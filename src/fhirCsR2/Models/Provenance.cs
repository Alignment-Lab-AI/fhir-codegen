// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// A relationship between two the agents referenced in this resource. This is defined to allow for explicit description of the delegation between agents.  For example, this human author used this device, or one person acted on another's behest.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ProvenanceAgentRelatedAgent>))]
  public class ProvenanceAgentRelatedAgent : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An internal reference to another agent listed in this provenance by its identifier.
    /// </summary>
    public string Target { get; set; }
    /// <summary>
    /// Extension container element for Target
    /// </summary>
    public Element _Target { get; set; }
    /// <summary>
    /// The type of relationship between agents.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Target))
      {
        writer.WriteString("target", (string)Target!);
      }

      if (_Target != null)
      {
        writer.WritePropertyName("_target");
        _Target.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "target":
          Target = reader.GetString();
          break;

        case "_target":
          _Target = new fhirCsR2.Models.Element();
          _Target.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR2.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An agent takes a role in an activity such that the agent can be assigned some degree of responsibility for the activity taking place. An agent can be a person, an organization, software, or other entities that may be ascribed responsibility.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ProvenanceAgent>))]
  public class ProvenanceAgent : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The individual, device or organization that participated in the event.
    /// </summary>
    public Reference Actor { get; set; }
    /// <summary>
    /// A relationship between two the agents referenced in this resource. This is defined to allow for explicit description of the delegation between agents.  For example, this human author used this device, or one person acted on another's behest.
    /// </summary>
    public List<ProvenanceAgentRelatedAgent> RelatedAgent { get; set; }
    /// <summary>
    /// The function of the agent with respect to the activity.
    /// </summary>
    public Coding Role { get; set; }
    /// <summary>
    /// The identity of the agent as known by the authorization system.
    /// </summary>
    public Identifier UserId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Actor != null)
      {
        writer.WritePropertyName("actor");
        Actor.SerializeJson(writer, options);
      }

      if (UserId != null)
      {
        writer.WritePropertyName("userId");
        UserId.SerializeJson(writer, options);
      }

      if ((RelatedAgent != null) && (RelatedAgent.Count != 0))
      {
        writer.WritePropertyName("relatedAgent");
        writer.WriteStartArray();

        foreach (ProvenanceAgentRelatedAgent valRelatedAgent in RelatedAgent)
        {
          valRelatedAgent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actor":
          Actor = new fhirCsR2.Models.Reference();
          Actor.DeserializeJson(ref reader, options);
          break;

        case "relatedAgent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedAgent = new List<ProvenanceAgentRelatedAgent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ProvenanceAgentRelatedAgent objRelatedAgent = new fhirCsR2.Models.ProvenanceAgentRelatedAgent();
            objRelatedAgent.DeserializeJson(ref reader, options);
            RelatedAgent.Add(objRelatedAgent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedAgent.Count == 0)
          {
            RelatedAgent = null;
          }

          break;

        case "role":
          Role = new fhirCsR2.Models.Coding();
          Role.DeserializeJson(ref reader, options);
          break;

        case "userId":
          UserId = new fhirCsR2.Models.Identifier();
          UserId.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An entity used in this activity.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ProvenanceEntity>))]
  public class ProvenanceEntity : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity.
    /// </summary>
    public ProvenanceAgent Agent { get; set; }
    /// <summary>
    /// Human-readable description of the entity.
    /// </summary>
    public string Display { get; set; }
    /// <summary>
    /// Extension container element for Display
    /// </summary>
    public Element _Display { get; set; }
    /// <summary>
    /// Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
    /// </summary>
    public string Reference { get; set; }
    /// <summary>
    /// Extension container element for Reference
    /// </summary>
    public Element _Reference { get; set; }
    /// <summary>
    /// How the entity was used during the activity.
    /// </summary>
    public string Role { get; set; }
    /// <summary>
    /// Extension container element for Role
    /// </summary>
    public Element _Role { get; set; }
    /// <summary>
    /// If the type is "resource" then the resource itself was the participant. If the type is a type of resource, then the entity identified by the resource is the participant.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Role))
      {
        writer.WriteString("role", (string)Role!);
      }

      if (_Role != null)
      {
        writer.WritePropertyName("_role");
        _Role.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Reference))
      {
        writer.WriteString("reference", (string)Reference!);
      }

      if (_Reference != null)
      {
        writer.WritePropertyName("_reference");
        _Reference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Display))
      {
        writer.WriteString("display", (string)Display!);
      }

      if (_Display != null)
      {
        writer.WritePropertyName("_display");
        _Display.SerializeJson(writer, options);
      }

      if (Agent != null)
      {
        writer.WritePropertyName("agent");
        Agent.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "agent":
          Agent = new fhirCsR2.Models.ProvenanceAgent();
          Agent.DeserializeJson(ref reader, options);
          break;

        case "display":
          Display = reader.GetString();
          break;

        case "_display":
          _Display = new fhirCsR2.Models.Element();
          _Display.DeserializeJson(ref reader, options);
          break;

        case "reference":
          Reference = reader.GetString();
          break;

        case "_reference":
          _Reference = new fhirCsR2.Models.Element();
          _Reference.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = reader.GetString();
          break;

        case "_role":
          _Role = new fhirCsR2.Models.Element();
          _Role.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR2.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Provenance.entity.role field
  /// </summary>
  public static class ProvenanceEntityRoleCodes {
    public const string DERIVATION = "derivation";
    public const string REVISION = "revision";
    public const string QUOTATION = "quotation";
    public const string SOURCE = "source";
  }
  /// <summary>
  /// Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<Provenance>))]
  public class Provenance : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Provenance";
    /// <summary>
    /// An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
    /// </summary>
    public CodeableConcept Activity { get; set; }
    /// <summary>
    /// An agent takes a role in an activity such that the agent can be assigned some degree of responsibility for the activity taking place. An agent can be a person, an organization, software, or other entities that may be ascribed responsibility.
    /// </summary>
    public List<ProvenanceAgent> Agent { get; set; }
    /// <summary>
    /// An entity used in this activity.
    /// </summary>
    public List<ProvenanceEntity> Entity { get; set; }
    /// <summary>
    /// Where the activity occurred, if relevant.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// The period during which the activity occurred.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
    /// </summary>
    public List<string> Policy { get; set; }
    /// <summary>
    /// Extension container element for Policy
    /// </summary>
    public List<Element> _Policy { get; set; }
    /// <summary>
    /// The reason that the activity was taking place.
    /// </summary>
    public List<CodeableConcept> Reason { get; set; }
    /// <summary>
    /// The instant of time at which the activity was recorded.
    /// </summary>
    public string Recorded { get; set; }
    /// <summary>
    /// Extension container element for Recorded
    /// </summary>
    public Element _Recorded { get; set; }
    /// <summary>
    /// A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
    /// </summary>
    public List<Signature> Signature { get; set; }
    /// <summary>
    /// The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.
    /// </summary>
    public List<Reference> Target { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Target != null) && (Target.Count != 0))
      {
        writer.WritePropertyName("target");
        writer.WriteStartArray();

        foreach (Reference valTarget in Target)
        {
          valTarget.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Recorded))
      {
        writer.WriteString("recorded", (string)Recorded!);
      }

      if (_Recorded != null)
      {
        writer.WritePropertyName("_recorded");
        _Recorded.SerializeJson(writer, options);
      }

      if ((Reason != null) && (Reason.Count != 0))
      {
        writer.WritePropertyName("reason");
        writer.WriteStartArray();

        foreach (CodeableConcept valReason in Reason)
        {
          valReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Activity != null)
      {
        writer.WritePropertyName("activity");
        Activity.SerializeJson(writer, options);
      }

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if ((Policy != null) && (Policy.Count != 0))
      {
        writer.WritePropertyName("policy");
        writer.WriteStartArray();

        foreach (string valPolicy in Policy)
        {
          writer.WriteStringValue(valPolicy);
        }

        writer.WriteEndArray();
      }

      if ((_Policy != null) && (_Policy.Count != 0))
      {
        writer.WritePropertyName("_policy");
        writer.WriteStartArray();

        foreach (Element val_Policy in _Policy)
        {
          val_Policy.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Agent != null) && (Agent.Count != 0))
      {
        writer.WritePropertyName("agent");
        writer.WriteStartArray();

        foreach (ProvenanceAgent valAgent in Agent)
        {
          valAgent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Entity != null) && (Entity.Count != 0))
      {
        writer.WritePropertyName("entity");
        writer.WriteStartArray();

        foreach (ProvenanceEntity valEntity in Entity)
        {
          valEntity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Signature != null) && (Signature.Count != 0))
      {
        writer.WritePropertyName("signature");
        writer.WriteStartArray();

        foreach (Signature valSignature in Signature)
        {
          valSignature.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "activity":
          Activity = new fhirCsR2.Models.CodeableConcept();
          Activity.DeserializeJson(ref reader, options);
          break;

        case "agent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Agent = new List<ProvenanceAgent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ProvenanceAgent objAgent = new fhirCsR2.Models.ProvenanceAgent();
            objAgent.DeserializeJson(ref reader, options);
            Agent.Add(objAgent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Agent.Count == 0)
          {
            Agent = null;
          }

          break;

        case "entity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Entity = new List<ProvenanceEntity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ProvenanceEntity objEntity = new fhirCsR2.Models.ProvenanceEntity();
            objEntity.DeserializeJson(ref reader, options);
            Entity.Add(objEntity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Entity.Count == 0)
          {
            Entity = null;
          }

          break;

        case "location":
          Location = new fhirCsR2.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR2.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "policy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Policy = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Policy.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Policy.Count == 0)
          {
            Policy = null;
          }

          break;

        case "_policy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Policy = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_Policy = new fhirCsR2.Models.Element();
            obj_Policy.DeserializeJson(ref reader, options);
            _Policy.Add(obj_Policy);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Policy.Count == 0)
          {
            _Policy = null;
          }

          break;

        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objReason = new fhirCsR2.Models.CodeableConcept();
            objReason.DeserializeJson(ref reader, options);
            Reason.Add(objReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reason.Count == 0)
          {
            Reason = null;
          }

          break;

        case "recorded":
          Recorded = reader.GetString();
          break;

        case "_recorded":
          _Recorded = new fhirCsR2.Models.Element();
          _Recorded.DeserializeJson(ref reader, options);
          break;

        case "signature":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Signature = new List<Signature>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Signature objSignature = new fhirCsR2.Models.Signature();
            objSignature.DeserializeJson(ref reader, options);
            Signature.Add(objSignature);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Signature.Count == 0)
          {
            Signature = null;
          }

          break;

        case "target":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Target = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objTarget = new fhirCsR2.Models.Reference();
            objTarget.DeserializeJson(ref reader, options);
            Target.Add(objTarget);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Target.Count == 0)
          {
            Target = null;
          }

          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
