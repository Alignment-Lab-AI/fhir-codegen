// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Contacts to assist a user in finding and communicating with the publisher.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConceptMapContact>))]
  public class ConceptMapContact : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The name of an individual to contact regarding the concept map.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Contact details for individual (if a name was provided) or the publisher.
    /// </summary>
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if ((Telecom != null) && (Telecom.Count != 0))
      {
        writer.WritePropertyName("telecom");
        writer.WriteStartArray();

        foreach (ContactPoint valTelecom in Telecom)
        {
          valTelecom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "telecom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Telecom = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContactPoint objTelecom = new fhirCsR2.Models.ContactPoint();
            objTelecom.DeserializeJson(ref reader, options);
            Telecom.Add(objTelecom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Telecom.Count == 0)
          {
            Telecom = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConceptMapElementTargetDependsOn>))]
  public class ConceptMapElementTargetDependsOn : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Identity (code or path) or the element/item/ValueSet that the map depends on / refers to.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).
    /// </summary>
    public string CodeSystem { get; set; }
    /// <summary>
    /// Extension container element for CodeSystem
    /// </summary>
    public Element _CodeSystem { get; set; }
    /// <summary>
    /// A reference to a specific concept that holds a coded value. This can be an element in a FHIR resource, or a specific reference to a data element in a different specification (e.g. HL7 v2) or a general reference to a kind of data field, or a reference to a value set with an appropriately narrow definition.
    /// </summary>
    public string Element { get; set; }
    /// <summary>
    /// Extension container element for Element
    /// </summary>
    public Element _Element { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Element))
      {
        writer.WriteString("element", (string)Element!);
      }

      if (_Element != null)
      {
        writer.WritePropertyName("_element");
        _Element.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CodeSystem))
      {
        writer.WriteString("codeSystem", (string)CodeSystem!);
      }

      if (_CodeSystem != null)
      {
        writer.WritePropertyName("_codeSystem");
        _CodeSystem.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR2.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "codeSystem":
          CodeSystem = reader.GetString();
          break;

        case "_codeSystem":
          _CodeSystem = new fhirCsR2.Models.Element();
          _CodeSystem.DeserializeJson(ref reader, options);
          break;

        case "element":
          Element = reader.GetString();
          break;

        case "_element":
          _Element = new fhirCsR2.Models.Element();
          _Element.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A concept from the target value set that this concept maps to.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConceptMapElementTarget>))]
  public class ConceptMapElementTarget : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Identity (code or path) or the element/item that the map refers to.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// An absolute URI that identifies the code system of the target code (if the target is a value set that cross code systems).
    /// </summary>
    public string CodeSystem { get; set; }
    /// <summary>
    /// Extension container element for CodeSystem
    /// </summary>
    public Element _CodeSystem { get; set; }
    /// <summary>
    /// A description of status/issues in mapping that conveys additional information not represented in  the structured data.
    /// </summary>
    public string Comments { get; set; }
    /// <summary>
    /// Extension container element for Comments
    /// </summary>
    public Element _Comments { get; set; }
    /// <summary>
    /// A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
    /// </summary>
    public List<ConceptMapElementTargetDependsOn> DependsOn { get; set; }
    /// <summary>
    /// The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source).
    /// </summary>
    public string Equivalence { get; set; }
    /// <summary>
    /// Extension container element for Equivalence
    /// </summary>
    public Element _Equivalence { get; set; }
    /// <summary>
    /// A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.
    /// </summary>
    public List<ConceptMapElementTargetDependsOn> Product { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(CodeSystem))
      {
        writer.WriteString("codeSystem", (string)CodeSystem!);
      }

      if (_CodeSystem != null)
      {
        writer.WritePropertyName("_codeSystem");
        _CodeSystem.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Equivalence))
      {
        writer.WriteString("equivalence", (string)Equivalence!);
      }

      if (_Equivalence != null)
      {
        writer.WritePropertyName("_equivalence");
        _Equivalence.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Comments))
      {
        writer.WriteString("comments", (string)Comments!);
      }

      if (_Comments != null)
      {
        writer.WritePropertyName("_comments");
        _Comments.SerializeJson(writer, options);
      }

      if ((DependsOn != null) && (DependsOn.Count != 0))
      {
        writer.WritePropertyName("dependsOn");
        writer.WriteStartArray();

        foreach (ConceptMapElementTargetDependsOn valDependsOn in DependsOn)
        {
          valDependsOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Product != null) && (Product.Count != 0))
      {
        writer.WritePropertyName("product");
        writer.WriteStartArray();

        foreach (ConceptMapElementTargetDependsOn valProduct in Product)
        {
          valProduct.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR2.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "codeSystem":
          CodeSystem = reader.GetString();
          break;

        case "_codeSystem":
          _CodeSystem = new fhirCsR2.Models.Element();
          _CodeSystem.DeserializeJson(ref reader, options);
          break;

        case "comments":
          Comments = reader.GetString();
          break;

        case "_comments":
          _Comments = new fhirCsR2.Models.Element();
          _Comments.DeserializeJson(ref reader, options);
          break;

        case "dependsOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DependsOn = new List<ConceptMapElementTargetDependsOn>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConceptMapElementTargetDependsOn objDependsOn = new fhirCsR2.Models.ConceptMapElementTargetDependsOn();
            objDependsOn.DeserializeJson(ref reader, options);
            DependsOn.Add(objDependsOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DependsOn.Count == 0)
          {
            DependsOn = null;
          }

          break;

        case "equivalence":
          Equivalence = reader.GetString();
          break;

        case "_equivalence":
          _Equivalence = new fhirCsR2.Models.Element();
          _Equivalence.DeserializeJson(ref reader, options);
          break;

        case "product":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Product = new List<ConceptMapElementTargetDependsOn>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConceptMapElementTargetDependsOn objProduct = new fhirCsR2.Models.ConceptMapElementTargetDependsOn();
            objProduct.DeserializeJson(ref reader, options);
            Product.Add(objProduct);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Product.Count == 0)
          {
            Product = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ConceptMap.element.target.equivalence field
  /// </summary>
  public static class ConceptMapElementTargetEquivalenceCodes {
    public const string EQUIVALENT = "equivalent";
    public const string EQUAL = "equal";
    public const string WIDER = "wider";
    public const string SUBSUMES = "subsumes";
    public const string NARROWER = "narrower";
    public const string SPECIALIZES = "specializes";
    public const string INEXACT = "inexact";
    public const string UNMATCHED = "unmatched";
    public const string DISJOINT = "disjoint";
    public static HashSet<string> Values = new HashSet<string>() {
      "equivalent",
      "equal",
      "wider",
      "subsumes",
      "narrower",
      "specializes",
      "inexact",
      "unmatched",
      "disjoint",
    };
  }
  /// <summary>
  /// Mappings for an individual concept in the source to one or more concepts in the target.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConceptMapElement>))]
  public class ConceptMapElement : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Identity (code or path) or the element/item being mapped.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// An absolute URI that identifies the Code System (if the source is a value set that crosses more than one code system).
    /// </summary>
    public string CodeSystem { get; set; }
    /// <summary>
    /// Extension container element for CodeSystem
    /// </summary>
    public Element _CodeSystem { get; set; }
    /// <summary>
    /// A concept from the target value set that this concept maps to.
    /// </summary>
    public List<ConceptMapElementTarget> Target { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(CodeSystem))
      {
        writer.WriteString("codeSystem", (string)CodeSystem!);
      }

      if (_CodeSystem != null)
      {
        writer.WritePropertyName("_codeSystem");
        _CodeSystem.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if ((Target != null) && (Target.Count != 0))
      {
        writer.WritePropertyName("target");
        writer.WriteStartArray();

        foreach (ConceptMapElementTarget valTarget in Target)
        {
          valTarget.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR2.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "codeSystem":
          CodeSystem = reader.GetString();
          break;

        case "_codeSystem":
          _CodeSystem = new fhirCsR2.Models.Element();
          _CodeSystem.DeserializeJson(ref reader, options);
          break;

        case "target":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Target = new List<ConceptMapElementTarget>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConceptMapElementTarget objTarget = new fhirCsR2.Models.ConceptMapElementTarget();
            objTarget.DeserializeJson(ref reader, options);
            Target.Add(objTarget);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Target.Count == 0)
          {
            Target = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ConceptMap>))]
  public class ConceptMap : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ConceptMap";
    /// <summary>
    /// Contacts to assist a user in finding and communicating with the publisher.
    /// </summary>
    public List<ConceptMapContact> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the concept map and/or its contents.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Need to know when a concept map was first legal for use or became withdrawn or replaced.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Human understandability.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Mappings for an individual concept in the source to one or more concepts in the target.
    /// </summary>
    public List<ConceptMapElement> Element { get; set; }
    /// <summary>
    /// This ConceptMap was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Extension container element for Experimental
    /// </summary>
    public Element _Experimental { get; set; }
    /// <summary>
    /// Formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Support human navigation.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Helps establish the "authority/credibility" of the concept map.  May also allow for contact.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// Explains why this concept map is needed and why it has been constrained as it has.
    /// </summary>
    public string Requirements { get; set; }
    /// <summary>
    /// Extension container element for Requirements
    /// </summary>
    public Element _Requirements { get; set; }
    /// <summary>
    /// The source value set that specifies the concepts that are being mapped.
    /// </summary>
    public string SourceUri { get; set; }
    /// <summary>
    /// Extension container element for SourceUri
    /// </summary>
    public Element _SourceUri { get; set; }
    /// <summary>
    /// The source value set that specifies the concepts that are being mapped.
    /// </summary>
    public Reference SourceReference { get; set; }
    /// <summary>
    /// Identify when/if the concept map should be used.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
    /// </summary>
    public string TargetUri { get; set; }
    /// <summary>
    /// Extension container element for TargetUri
    /// </summary>
    public Element _TargetUri { get; set; }
    /// <summary>
    /// The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
    /// </summary>
    public Reference TargetReference { get; set; }
    /// <summary>
    /// An absolute URL that is used to identify this concept map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this concept map is (or will be) published.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Assist in searching for appropriate concept map instances.
    /// </summary>
    public List<CodeableConcept> UseContext { get; set; }
    /// <summary>
    /// The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (_Experimental != null)
      {
        writer.WritePropertyName("_experimental");
        _Experimental.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ConceptMapContact valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (CodeableConcept valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Requirements))
      {
        writer.WriteString("requirements", (string)Requirements!);
      }

      if (_Requirements != null)
      {
        writer.WritePropertyName("_requirements");
        _Requirements.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SourceUri))
      {
        writer.WriteString("sourceUri", (string)SourceUri!);
      }

      if (_SourceUri != null)
      {
        writer.WritePropertyName("_sourceUri");
        _SourceUri.SerializeJson(writer, options);
      }

      if (SourceReference != null)
      {
        writer.WritePropertyName("sourceReference");
        SourceReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TargetUri))
      {
        writer.WriteString("targetUri", (string)TargetUri!);
      }

      if (_TargetUri != null)
      {
        writer.WritePropertyName("_targetUri");
        _TargetUri.SerializeJson(writer, options);
      }

      if (TargetReference != null)
      {
        writer.WritePropertyName("targetReference");
        TargetReference.SerializeJson(writer, options);
      }

      if ((Element != null) && (Element.Count != 0))
      {
        writer.WritePropertyName("element");
        writer.WriteStartArray();

        foreach (ConceptMapElement valElement in Element)
        {
          valElement.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ConceptMapContact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConceptMapContact objContact = new fhirCsR2.Models.ConceptMapContact();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR2.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR2.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "element":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Element = new List<ConceptMapElement>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ConceptMapElement objElement = new fhirCsR2.Models.ConceptMapElement();
            objElement.DeserializeJson(ref reader, options);
            Element.Add(objElement);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Element.Count == 0)
          {
            Element = null;
          }

          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "_experimental":
          _Experimental = new fhirCsR2.Models.Element();
          _Experimental.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR2.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR2.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR2.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "requirements":
          Requirements = reader.GetString();
          break;

        case "_requirements":
          _Requirements = new fhirCsR2.Models.Element();
          _Requirements.DeserializeJson(ref reader, options);
          break;

        case "sourceUri":
          SourceUri = reader.GetString();
          break;

        case "_sourceUri":
          _SourceUri = new fhirCsR2.Models.Element();
          _SourceUri.DeserializeJson(ref reader, options);
          break;

        case "sourceReference":
          SourceReference = new fhirCsR2.Models.Reference();
          SourceReference.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "targetUri":
          TargetUri = reader.GetString();
          break;

        case "_targetUri":
          _TargetUri = new fhirCsR2.Models.Element();
          _TargetUri.DeserializeJson(ref reader, options);
          break;

        case "targetReference":
          TargetReference = new fhirCsR2.Models.Reference();
          TargetReference.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR2.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objUseContext = new fhirCsR2.Models.CodeableConcept();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR2.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ConceptMap.status field
  /// </summary>
  public static class ConceptMapStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public static HashSet<string> Values = new HashSet<string>() {
      "draft",
      "active",
      "retired",
    };
  }
}
