// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// A specific type of service that may be delivered or performed.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<HealthcareServiceServiceType>))]
  public class HealthcareServiceServiceType : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Collection of specialties handled by the service site. This is more of a medical term.
    /// </summary>
    public List<CodeableConcept> Specialty { get; set; }
    /// <summary>
    /// The specific type of service being delivered or performed.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Specialty != null) && (Specialty.Count != 0))
      {
        writer.WritePropertyName("specialty");
        writer.WriteStartArray();

        foreach (CodeableConcept valSpecialty in Specialty)
        {
          valSpecialty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "specialty":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Specialty = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objSpecialty = new fhirCsR2.Models.CodeableConcept();
            objSpecialty.DeserializeJson(ref reader, options);
            Specialty.Add(objSpecialty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Specialty.Count == 0)
          {
            Specialty = null;
          }

          break;

        case "type":
          Type = new fhirCsR2.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A collection of times that the Service Site is available.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<HealthcareServiceAvailableTime>))]
  public class HealthcareServiceAvailableTime : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Is this always available? (hence times are irrelevant) e.g. 24 hour service.
    /// </summary>
    public bool? AllDay { get; set; }
    /// <summary>
    /// Extension container element for AllDay
    /// </summary>
    public Element _AllDay { get; set; }
    /// <summary>
    /// The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
    /// </summary>
    public string AvailableEndTime { get; set; }
    /// <summary>
    /// Extension container element for AvailableEndTime
    /// </summary>
    public Element _AvailableEndTime { get; set; }
    /// <summary>
    /// The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
    /// </summary>
    public string AvailableStartTime { get; set; }
    /// <summary>
    /// Extension container element for AvailableStartTime
    /// </summary>
    public Element _AvailableStartTime { get; set; }
    /// <summary>
    /// Indicates which days of the week are available between the start and end Times.
    /// </summary>
    public List<string> DaysOfWeek { get; set; }
    /// <summary>
    /// Extension container element for DaysOfWeek
    /// </summary>
    public List<Element> _DaysOfWeek { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((DaysOfWeek != null) && (DaysOfWeek.Count != 0))
      {
        writer.WritePropertyName("daysOfWeek");
        writer.WriteStartArray();

        foreach (string valDaysOfWeek in DaysOfWeek)
        {
          writer.WriteStringValue(valDaysOfWeek);
        }

        writer.WriteEndArray();
      }

      if ((_DaysOfWeek != null) && (_DaysOfWeek.Count != 0))
      {
        writer.WritePropertyName("_daysOfWeek");
        writer.WriteStartArray();

        foreach (Element val_DaysOfWeek in _DaysOfWeek)
        {
          val_DaysOfWeek.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (AllDay != null)
      {
        writer.WriteBoolean("allDay", (bool)AllDay!);
      }

      if (_AllDay != null)
      {
        writer.WritePropertyName("_allDay");
        _AllDay.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AvailableStartTime))
      {
        writer.WriteString("availableStartTime", (string)AvailableStartTime!);
      }

      if (_AvailableStartTime != null)
      {
        writer.WritePropertyName("_availableStartTime");
        _AvailableStartTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AvailableEndTime))
      {
        writer.WriteString("availableEndTime", (string)AvailableEndTime!);
      }

      if (_AvailableEndTime != null)
      {
        writer.WritePropertyName("_availableEndTime");
        _AvailableEndTime.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allDay":
          AllDay = reader.GetBoolean();
          break;

        case "_allDay":
          _AllDay = new fhirCsR2.Models.Element();
          _AllDay.DeserializeJson(ref reader, options);
          break;

        case "availableEndTime":
          AvailableEndTime = reader.GetString();
          break;

        case "_availableEndTime":
          _AvailableEndTime = new fhirCsR2.Models.Element();
          _AvailableEndTime.DeserializeJson(ref reader, options);
          break;

        case "availableStartTime":
          AvailableStartTime = reader.GetString();
          break;

        case "_availableStartTime":
          _AvailableStartTime = new fhirCsR2.Models.Element();
          _AvailableStartTime.DeserializeJson(ref reader, options);
          break;

        case "daysOfWeek":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DaysOfWeek = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            DaysOfWeek.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DaysOfWeek.Count == 0)
          {
            DaysOfWeek = null;
          }

          break;

        case "_daysOfWeek":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _DaysOfWeek = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_DaysOfWeek = new fhirCsR2.Models.Element();
            obj_DaysOfWeek.DeserializeJson(ref reader, options);
            _DaysOfWeek.Add(obj_DaysOfWeek);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_DaysOfWeek.Count == 0)
          {
            _DaysOfWeek = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the HealthcareService.availableTime.daysOfWeek field
  /// </summary>
  public static class HealthcareServiceAvailableTimeDaysOfWeekCodes {
    public const string MON = "mon";
    public const string TUE = "tue";
    public const string WED = "wed";
    public const string THU = "thu";
    public const string FRI = "fri";
    public const string SAT = "sat";
    public const string SUN = "sun";
  }
  /// <summary>
  /// The HealthcareService is not available during this period of time due to the provided reason.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<HealthcareServiceNotAvailable>))]
  public class HealthcareServiceNotAvailable : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The reason that can be presented to the user as to why this time is not available.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Service is not available (seasonally or for a public holiday) from this date.
    /// </summary>
    public Period During { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (During != null)
      {
        writer.WritePropertyName("during");
        During.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "during":
          During = new fhirCsR2.Models.Period();
          During.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The details of a healthcare service available at a location.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<HealthcareService>))]
  public class HealthcareService : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "HealthcareService";
    /// <summary>
    /// Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
    /// </summary>
    public bool? AppointmentRequired { get; set; }
    /// <summary>
    /// Extension container element for AppointmentRequired
    /// </summary>
    public Element _AppointmentRequired { get; set; }
    /// <summary>
    /// A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
    /// </summary>
    public string AvailabilityExceptions { get; set; }
    /// <summary>
    /// Extension container element for AvailabilityExceptions
    /// </summary>
    public Element _AvailabilityExceptions { get; set; }
    /// <summary>
    /// A collection of times that the Service Site is available.
    /// </summary>
    public List<HealthcareServiceAvailableTime> AvailableTime { get; set; }
    /// <summary>
    /// Collection of characteristics (attributes).
    /// </summary>
    public List<CodeableConcept> Characteristic { get; set; }
    /// <summary>
    /// Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.
    /// </summary>
    public string Comment { get; set; }
    /// <summary>
    /// Extension container element for Comment
    /// </summary>
    public Element _Comment { get; set; }
    /// <summary>
    /// The location(s) that this service is available to (not where the service is provided).
    /// </summary>
    public List<Reference> CoverageArea { get; set; }
    /// <summary>
    /// Does this service have specific eligibility requirements that need to be met in order to use the service?
    /// </summary>
    public CodeableConcept Eligibility { get; set; }
    /// <summary>
    /// Describes the eligibility conditions for the service.
    /// </summary>
    public string EligibilityNote { get; set; }
    /// <summary>
    /// Extension container element for EligibilityNote
    /// </summary>
    public Element _EligibilityNote { get; set; }
    /// <summary>
    /// Extra details about the service that can't be placed in the other fields.
    /// </summary>
    public string ExtraDetails { get; set; }
    /// <summary>
    /// Extension container element for ExtraDetails
    /// </summary>
    public Element _ExtraDetails { get; set; }
    /// <summary>
    /// External identifiers for this item.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The location where this healthcare service may be provided.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// The HealthcareService is not available during this period of time due to the provided reason.
    /// </summary>
    public List<HealthcareServiceNotAvailable> NotAvailable { get; set; }
    /// <summary>
    /// If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
    /// </summary>
    public Attachment Photo { get; set; }
    /// <summary>
    /// Program Names that can be used to categorize the service.
    /// </summary>
    public List<string> ProgramName { get; set; }
    /// <summary>
    /// Extension container element for ProgramName
    /// </summary>
    public List<Element> _ProgramName { get; set; }
    /// <summary>
    /// The organization that provides this healthcare service.
    /// </summary>
    public Reference ProvidedBy { get; set; }
    /// <summary>
    /// The public part of the 'keys' allocated to an Organization by an accredited body to support secure exchange of data over the internet. To be provided by the Organization, where available.
    /// </summary>
    public string PublicKey { get; set; }
    /// <summary>
    /// Extension container element for PublicKey
    /// </summary>
    public Element _PublicKey { get; set; }
    /// <summary>
    /// Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
    /// </summary>
    public List<CodeableConcept> ReferralMethod { get; set; }
    /// <summary>
    /// Identifies the broad category of service being performed or delivered.
    /// </summary>
    public CodeableConcept ServiceCategory { get; set; }
    /// <summary>
    /// Further description of the service as it would be presented to a consumer while searching.
    /// </summary>
    public string ServiceName { get; set; }
    /// <summary>
    /// Extension container element for ServiceName
    /// </summary>
    public Element _ServiceName { get; set; }
    /// <summary>
    /// The code(s) that detail the conditions under which the healthcare service is available/offered.
    /// </summary>
    public List<CodeableConcept> ServiceProvisionCode { get; set; }
    /// <summary>
    /// A specific type of service that may be delivered or performed.
    /// </summary>
    public List<HealthcareServiceServiceType> ServiceType { get; set; }
    /// <summary>
    /// List of contacts related to this specific healthcare service.
    /// </summary>
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ProvidedBy != null)
      {
        writer.WritePropertyName("providedBy");
        ProvidedBy.SerializeJson(writer, options);
      }

      if (ServiceCategory != null)
      {
        writer.WritePropertyName("serviceCategory");
        ServiceCategory.SerializeJson(writer, options);
      }

      if ((ServiceType != null) && (ServiceType.Count != 0))
      {
        writer.WritePropertyName("serviceType");
        writer.WriteStartArray();

        foreach (HealthcareServiceServiceType valServiceType in ServiceType)
        {
          valServiceType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ServiceName))
      {
        writer.WriteString("serviceName", (string)ServiceName!);
      }

      if (_ServiceName != null)
      {
        writer.WritePropertyName("_serviceName");
        _ServiceName.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Comment))
      {
        writer.WriteString("comment", (string)Comment!);
      }

      if (_Comment != null)
      {
        writer.WritePropertyName("_comment");
        _Comment.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ExtraDetails))
      {
        writer.WriteString("extraDetails", (string)ExtraDetails!);
      }

      if (_ExtraDetails != null)
      {
        writer.WritePropertyName("_extraDetails");
        _ExtraDetails.SerializeJson(writer, options);
      }

      if (Photo != null)
      {
        writer.WritePropertyName("photo");
        Photo.SerializeJson(writer, options);
      }

      if ((Telecom != null) && (Telecom.Count != 0))
      {
        writer.WritePropertyName("telecom");
        writer.WriteStartArray();

        foreach (ContactPoint valTelecom in Telecom)
        {
          valTelecom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((CoverageArea != null) && (CoverageArea.Count != 0))
      {
        writer.WritePropertyName("coverageArea");
        writer.WriteStartArray();

        foreach (Reference valCoverageArea in CoverageArea)
        {
          valCoverageArea.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ServiceProvisionCode != null) && (ServiceProvisionCode.Count != 0))
      {
        writer.WritePropertyName("serviceProvisionCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valServiceProvisionCode in ServiceProvisionCode)
        {
          valServiceProvisionCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Eligibility != null)
      {
        writer.WritePropertyName("eligibility");
        Eligibility.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EligibilityNote))
      {
        writer.WriteString("eligibilityNote", (string)EligibilityNote!);
      }

      if (_EligibilityNote != null)
      {
        writer.WritePropertyName("_eligibilityNote");
        _EligibilityNote.SerializeJson(writer, options);
      }

      if ((ProgramName != null) && (ProgramName.Count != 0))
      {
        writer.WritePropertyName("programName");
        writer.WriteStartArray();

        foreach (string valProgramName in ProgramName)
        {
          writer.WriteStringValue(valProgramName);
        }

        writer.WriteEndArray();
      }

      if ((_ProgramName != null) && (_ProgramName.Count != 0))
      {
        writer.WritePropertyName("_programName");
        writer.WriteStartArray();

        foreach (Element val_ProgramName in _ProgramName)
        {
          val_ProgramName.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Characteristic != null) && (Characteristic.Count != 0))
      {
        writer.WritePropertyName("characteristic");
        writer.WriteStartArray();

        foreach (CodeableConcept valCharacteristic in Characteristic)
        {
          valCharacteristic.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ReferralMethod != null) && (ReferralMethod.Count != 0))
      {
        writer.WritePropertyName("referralMethod");
        writer.WriteStartArray();

        foreach (CodeableConcept valReferralMethod in ReferralMethod)
        {
          valReferralMethod.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(PublicKey))
      {
        writer.WriteString("publicKey", (string)PublicKey!);
      }

      if (_PublicKey != null)
      {
        writer.WritePropertyName("_publicKey");
        _PublicKey.SerializeJson(writer, options);
      }

      if (AppointmentRequired != null)
      {
        writer.WriteBoolean("appointmentRequired", (bool)AppointmentRequired!);
      }

      if (_AppointmentRequired != null)
      {
        writer.WritePropertyName("_appointmentRequired");
        _AppointmentRequired.SerializeJson(writer, options);
      }

      if ((AvailableTime != null) && (AvailableTime.Count != 0))
      {
        writer.WritePropertyName("availableTime");
        writer.WriteStartArray();

        foreach (HealthcareServiceAvailableTime valAvailableTime in AvailableTime)
        {
          valAvailableTime.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((NotAvailable != null) && (NotAvailable.Count != 0))
      {
        writer.WritePropertyName("notAvailable");
        writer.WriteStartArray();

        foreach (HealthcareServiceNotAvailable valNotAvailable in NotAvailable)
        {
          valNotAvailable.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(AvailabilityExceptions))
      {
        writer.WriteString("availabilityExceptions", (string)AvailabilityExceptions!);
      }

      if (_AvailabilityExceptions != null)
      {
        writer.WritePropertyName("_availabilityExceptions");
        _AvailabilityExceptions.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "appointmentRequired":
          AppointmentRequired = reader.GetBoolean();
          break;

        case "_appointmentRequired":
          _AppointmentRequired = new fhirCsR2.Models.Element();
          _AppointmentRequired.DeserializeJson(ref reader, options);
          break;

        case "availabilityExceptions":
          AvailabilityExceptions = reader.GetString();
          break;

        case "_availabilityExceptions":
          _AvailabilityExceptions = new fhirCsR2.Models.Element();
          _AvailabilityExceptions.DeserializeJson(ref reader, options);
          break;

        case "availableTime":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AvailableTime = new List<HealthcareServiceAvailableTime>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.HealthcareServiceAvailableTime objAvailableTime = new fhirCsR2.Models.HealthcareServiceAvailableTime();
            objAvailableTime.DeserializeJson(ref reader, options);
            AvailableTime.Add(objAvailableTime);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AvailableTime.Count == 0)
          {
            AvailableTime = null;
          }

          break;

        case "characteristic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Characteristic = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objCharacteristic = new fhirCsR2.Models.CodeableConcept();
            objCharacteristic.DeserializeJson(ref reader, options);
            Characteristic.Add(objCharacteristic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Characteristic.Count == 0)
          {
            Characteristic = null;
          }

          break;

        case "comment":
          Comment = reader.GetString();
          break;

        case "_comment":
          _Comment = new fhirCsR2.Models.Element();
          _Comment.DeserializeJson(ref reader, options);
          break;

        case "coverageArea":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CoverageArea = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objCoverageArea = new fhirCsR2.Models.Reference();
            objCoverageArea.DeserializeJson(ref reader, options);
            CoverageArea.Add(objCoverageArea);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CoverageArea.Count == 0)
          {
            CoverageArea = null;
          }

          break;

        case "eligibility":
          Eligibility = new fhirCsR2.Models.CodeableConcept();
          Eligibility.DeserializeJson(ref reader, options);
          break;

        case "eligibilityNote":
          EligibilityNote = reader.GetString();
          break;

        case "_eligibilityNote":
          _EligibilityNote = new fhirCsR2.Models.Element();
          _EligibilityNote.DeserializeJson(ref reader, options);
          break;

        case "extraDetails":
          ExtraDetails = reader.GetString();
          break;

        case "_extraDetails":
          _ExtraDetails = new fhirCsR2.Models.Element();
          _ExtraDetails.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Identifier objIdentifier = new fhirCsR2.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "location":
          Location = new fhirCsR2.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "notAvailable":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NotAvailable = new List<HealthcareServiceNotAvailable>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.HealthcareServiceNotAvailable objNotAvailable = new fhirCsR2.Models.HealthcareServiceNotAvailable();
            objNotAvailable.DeserializeJson(ref reader, options);
            NotAvailable.Add(objNotAvailable);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NotAvailable.Count == 0)
          {
            NotAvailable = null;
          }

          break;

        case "photo":
          Photo = new fhirCsR2.Models.Attachment();
          Photo.DeserializeJson(ref reader, options);
          break;

        case "programName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProgramName = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ProgramName.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProgramName.Count == 0)
          {
            ProgramName = null;
          }

          break;

        case "_programName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _ProgramName = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Element obj_ProgramName = new fhirCsR2.Models.Element();
            obj_ProgramName.DeserializeJson(ref reader, options);
            _ProgramName.Add(obj_ProgramName);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_ProgramName.Count == 0)
          {
            _ProgramName = null;
          }

          break;

        case "providedBy":
          ProvidedBy = new fhirCsR2.Models.Reference();
          ProvidedBy.DeserializeJson(ref reader, options);
          break;

        case "publicKey":
          PublicKey = reader.GetString();
          break;

        case "_publicKey":
          _PublicKey = new fhirCsR2.Models.Element();
          _PublicKey.DeserializeJson(ref reader, options);
          break;

        case "referralMethod":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReferralMethod = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objReferralMethod = new fhirCsR2.Models.CodeableConcept();
            objReferralMethod.DeserializeJson(ref reader, options);
            ReferralMethod.Add(objReferralMethod);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReferralMethod.Count == 0)
          {
            ReferralMethod = null;
          }

          break;

        case "serviceCategory":
          ServiceCategory = new fhirCsR2.Models.CodeableConcept();
          ServiceCategory.DeserializeJson(ref reader, options);
          break;

        case "serviceName":
          ServiceName = reader.GetString();
          break;

        case "_serviceName":
          _ServiceName = new fhirCsR2.Models.Element();
          _ServiceName.DeserializeJson(ref reader, options);
          break;

        case "serviceProvisionCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ServiceProvisionCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objServiceProvisionCode = new fhirCsR2.Models.CodeableConcept();
            objServiceProvisionCode.DeserializeJson(ref reader, options);
            ServiceProvisionCode.Add(objServiceProvisionCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ServiceProvisionCode.Count == 0)
          {
            ServiceProvisionCode = null;
          }

          break;

        case "serviceType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ServiceType = new List<HealthcareServiceServiceType>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.HealthcareServiceServiceType objServiceType = new fhirCsR2.Models.HealthcareServiceServiceType();
            objServiceType.DeserializeJson(ref reader, options);
            ServiceType.Add(objServiceType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ServiceType.Count == 0)
          {
            ServiceType = null;
          }

          break;

        case "telecom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Telecom = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContactPoint objTelecom = new fhirCsR2.Models.ContactPoint();
            objTelecom.DeserializeJson(ref reader, options);
            Telecom.Add(objTelecom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Telecom.Count == 0)
          {
            Telecom = null;
          }

          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
