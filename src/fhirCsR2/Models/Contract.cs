// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// List of Contract actors.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ContractActor>))]
  public class ContractActor : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Who or what actors are assigned roles in this Contract.
    /// </summary>
    public Reference Entity { get; set; }
    /// <summary>
    /// Role type of actors assigned roles in this Contract.
    /// </summary>
    public List<CodeableConcept> Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Entity != null)
      {
        writer.WritePropertyName("entity");
        Entity.SerializeJson(writer, options);
      }

      if ((Role != null) && (Role.Count != 0))
      {
        writer.WritePropertyName("role");
        writer.WriteStartArray();

        foreach (CodeableConcept valRole in Role)
        {
          valRole.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "entity":
          Entity = new fhirCsR2.Models.Reference();
          Entity.DeserializeJson(ref reader, options);
          break;

        case "role":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Role = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objRole = new fhirCsR2.Models.CodeableConcept();
            objRole.DeserializeJson(ref reader, options);
            Role.Add(objRole);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Role.Count == 0)
          {
            Role = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Contract Valued Item List.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ContractValuedItem>))]
  public class ContractValuedItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates the time during which this Contract ValuedItem information is effective.
    /// </summary>
    public string EffectiveTime { get; set; }
    /// <summary>
    /// Extension container element for EffectiveTime
    /// </summary>
    public Element _EffectiveTime { get; set; }
    /// <summary>
    /// Specific type of Contract Valued Item that may be priced.
    /// </summary>
    public CodeableConcept EntityCodeableConcept { get; set; }
    /// <summary>
    /// Specific type of Contract Valued Item that may be priced.
    /// </summary>
    public Reference EntityReference { get; set; }
    /// <summary>
    /// A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// Identifies a Contract Valued Item instance.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
    /// </summary>
    public Quantity Net { get; set; }
    /// <summary>
    /// An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
    /// </summary>
    public decimal? Points { get; set; }
    /// <summary>
    /// Extension container element for Points
    /// </summary>
    public Element _Points { get; set; }
    /// <summary>
    /// Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// A Contract Valued Item unit valuation measure.
    /// </summary>
    public Quantity UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (EntityCodeableConcept != null)
      {
        writer.WritePropertyName("entityCodeableConcept");
        EntityCodeableConcept.SerializeJson(writer, options);
      }

      if (EntityReference != null)
      {
        writer.WritePropertyName("entityReference");
        EntityReference.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EffectiveTime))
      {
        writer.WriteString("effectiveTime", (string)EffectiveTime!);
      }

      if (_EffectiveTime != null)
      {
        writer.WritePropertyName("_effectiveTime");
        _EffectiveTime.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Points != null)
      {
        writer.WriteNumber("points", (decimal)Points!);
      }

      if (_Points != null)
      {
        writer.WritePropertyName("_points");
        _Points.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "effectiveTime":
          EffectiveTime = reader.GetString();
          break;

        case "_effectiveTime":
          _EffectiveTime = new fhirCsR2.Models.Element();
          _EffectiveTime.DeserializeJson(ref reader, options);
          break;

        case "entityCodeableConcept":
          EntityCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          EntityCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "entityReference":
          EntityReference = new fhirCsR2.Models.Reference();
          EntityReference.DeserializeJson(ref reader, options);
          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR2.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR2.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "net":
          Net = new fhirCsR2.Models.Quantity();
          Net.DeserializeJson(ref reader, options);
          break;

        case "points":
          Points = reader.GetDecimal();
          break;

        case "_points":
          _Points = new fhirCsR2.Models.Element();
          _Points.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR2.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          UnitPrice = new fhirCsR2.Models.Quantity();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Party signing this Contract.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ContractSigner>))]
  public class ContractSigner : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Party which is a signator to this Contract.
    /// </summary>
    public Reference Party { get; set; }
    /// <summary>
    /// Legally binding Contract DSIG signature contents in Base64.
    /// </summary>
    public string Signature { get; set; }
    /// <summary>
    /// Extension container element for Signature
    /// </summary>
    public Element _Signature { get; set; }
    /// <summary>
    /// Role of this Contract signer, e.g. notary, grantee.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Party != null)
      {
        writer.WritePropertyName("party");
        Party.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Signature))
      {
        writer.WriteString("signature", (string)Signature!);
      }

      if (_Signature != null)
      {
        writer.WritePropertyName("_signature");
        _Signature.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "party":
          Party = new fhirCsR2.Models.Reference();
          Party.DeserializeJson(ref reader, options);
          break;

        case "signature":
          Signature = reader.GetString();
          break;

        case "_signature":
          _Signature = new fhirCsR2.Models.Element();
          _Signature.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR2.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// List of actors participating in this Contract Provision.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ContractTermActor>))]
  public class ContractTermActor : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The actor assigned a role in this Contract Provision.
    /// </summary>
    public Reference Entity { get; set; }
    /// <summary>
    /// Role played by the actor assigned this role in this Contract Provision.
    /// </summary>
    public List<CodeableConcept> Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Entity != null)
      {
        writer.WritePropertyName("entity");
        Entity.SerializeJson(writer, options);
      }

      if ((Role != null) && (Role.Count != 0))
      {
        writer.WritePropertyName("role");
        writer.WriteStartArray();

        foreach (CodeableConcept valRole in Role)
        {
          valRole.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "entity":
          Entity = new fhirCsR2.Models.Reference();
          Entity.DeserializeJson(ref reader, options);
          break;

        case "role":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Role = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objRole = new fhirCsR2.Models.CodeableConcept();
            objRole.DeserializeJson(ref reader, options);
            Role.Add(objRole);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Role.Count == 0)
          {
            Role = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Contract Provision Valued Item List.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ContractTermValuedItem>))]
  public class ContractTermValuedItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates the time during which this Contract Term ValuedItem information is effective.
    /// </summary>
    public string EffectiveTime { get; set; }
    /// <summary>
    /// Extension container element for EffectiveTime
    /// </summary>
    public Element _EffectiveTime { get; set; }
    /// <summary>
    /// Specific type of Contract Provision Valued Item that may be priced.
    /// </summary>
    public CodeableConcept EntityCodeableConcept { get; set; }
    /// <summary>
    /// Specific type of Contract Provision Valued Item that may be priced.
    /// </summary>
    public Reference EntityReference { get; set; }
    /// <summary>
    /// A real number that represents a multiplier used in determining the overall value of the Contract Provision Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// Identifies a Contract Provision Valued Item instance.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Expresses the product of the Contract Provision Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
    /// </summary>
    public Quantity Net { get; set; }
    /// <summary>
    /// An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Provision Valued Item delivered. The concept of Points allows for assignment of point values for a Contract ProvisionValued Item, such that a monetary amount can be assigned to each point.
    /// </summary>
    public decimal? Points { get; set; }
    /// <summary>
    /// Extension container element for Points
    /// </summary>
    public Element _Points { get; set; }
    /// <summary>
    /// Specifies the units by which the Contract Provision Valued Item is measured or counted, and quantifies the countable or measurable Contract Term Valued Item instances.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// A Contract Provision Valued Item unit valuation measure.
    /// </summary>
    public Quantity UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (EntityCodeableConcept != null)
      {
        writer.WritePropertyName("entityCodeableConcept");
        EntityCodeableConcept.SerializeJson(writer, options);
      }

      if (EntityReference != null)
      {
        writer.WritePropertyName("entityReference");
        EntityReference.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EffectiveTime))
      {
        writer.WriteString("effectiveTime", (string)EffectiveTime!);
      }

      if (_EffectiveTime != null)
      {
        writer.WritePropertyName("_effectiveTime");
        _EffectiveTime.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Points != null)
      {
        writer.WriteNumber("points", (decimal)Points!);
      }

      if (_Points != null)
      {
        writer.WritePropertyName("_points");
        _Points.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "effectiveTime":
          EffectiveTime = reader.GetString();
          break;

        case "_effectiveTime":
          _EffectiveTime = new fhirCsR2.Models.Element();
          _EffectiveTime.DeserializeJson(ref reader, options);
          break;

        case "entityCodeableConcept":
          EntityCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          EntityCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "entityReference":
          EntityReference = new fhirCsR2.Models.Reference();
          EntityReference.DeserializeJson(ref reader, options);
          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR2.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR2.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "net":
          Net = new fhirCsR2.Models.Quantity();
          Net.DeserializeJson(ref reader, options);
          break;

        case "points":
          Points = reader.GetDecimal();
          break;

        case "_points":
          _Points = new fhirCsR2.Models.Element();
          _Points.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR2.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          UnitPrice = new fhirCsR2.Models.Quantity();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ContractTerm>))]
  public class ContractTerm : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Action stipulated by this Contract Provision.
    /// </summary>
    public List<CodeableConcept> Action { get; set; }
    /// <summary>
    /// Reason or purpose for the action stipulated by this Contract Provision.
    /// </summary>
    public List<CodeableConcept> ActionReason { get; set; }
    /// <summary>
    /// List of actors participating in this Contract Provision.
    /// </summary>
    public List<ContractTermActor> Actor { get; set; }
    /// <summary>
    /// Relevant time or time-period when this Contract Provision is applicable.
    /// </summary>
    public Period Applies { get; set; }
    /// <summary>
    /// Nested group of Contract Provisions.
    /// </summary>
    public List<ContractTerm> Group { get; set; }
    /// <summary>
    /// Unique identifier for this particular Contract Provision.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// When this Contract Provision was issued.
    /// </summary>
    public string Issued { get; set; }
    /// <summary>
    /// Extension container element for Issued
    /// </summary>
    public Element _Issued { get; set; }
    /// <summary>
    /// Who or what this Contract Provision is about.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Subtype of this Contract Provision, e.g. life time maximum payment for a contract term for specific valued item, e.g. disability payment.
    /// </summary>
    public CodeableConcept SubType { get; set; }
    /// <summary>
    /// Human readable form of this Contract Provision.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Contract Provision Valued Item List.
    /// </summary>
    public List<ContractTermValuedItem> ValuedItem { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issued))
      {
        writer.WriteString("issued", (string)Issued!);
      }

      if (_Issued != null)
      {
        writer.WritePropertyName("_issued");
        _Issued.SerializeJson(writer, options);
      }

      if (Applies != null)
      {
        writer.WritePropertyName("applies");
        Applies.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (SubType != null)
      {
        writer.WritePropertyName("subType");
        SubType.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (CodeableConcept valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ActionReason != null) && (ActionReason.Count != 0))
      {
        writer.WritePropertyName("actionReason");
        writer.WriteStartArray();

        foreach (CodeableConcept valActionReason in ActionReason)
        {
          valActionReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Actor != null) && (Actor.Count != 0))
      {
        writer.WritePropertyName("actor");
        writer.WriteStartArray();

        foreach (ContractTermActor valActor in Actor)
        {
          valActor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if ((ValuedItem != null) && (ValuedItem.Count != 0))
      {
        writer.WritePropertyName("valuedItem");
        writer.WriteStartArray();

        foreach (ContractTermValuedItem valValuedItem in ValuedItem)
        {
          valValuedItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Group != null) && (Group.Count != 0))
      {
        writer.WritePropertyName("group");
        writer.WriteStartArray();

        foreach (ContractTerm valGroup in Group)
        {
          valGroup.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objAction = new fhirCsR2.Models.CodeableConcept();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "actionReason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ActionReason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objActionReason = new fhirCsR2.Models.CodeableConcept();
            objActionReason.DeserializeJson(ref reader, options);
            ActionReason.Add(objActionReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ActionReason.Count == 0)
          {
            ActionReason = null;
          }

          break;

        case "actor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Actor = new List<ContractTermActor>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContractTermActor objActor = new fhirCsR2.Models.ContractTermActor();
            objActor.DeserializeJson(ref reader, options);
            Actor.Add(objActor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Actor.Count == 0)
          {
            Actor = null;
          }

          break;

        case "applies":
          Applies = new fhirCsR2.Models.Period();
          Applies.DeserializeJson(ref reader, options);
          break;

        case "group":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Group = new List<ContractTerm>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContractTerm objGroup = new fhirCsR2.Models.ContractTerm();
            objGroup.DeserializeJson(ref reader, options);
            Group.Add(objGroup);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Group.Count == 0)
          {
            Group = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR2.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "issued":
          Issued = reader.GetString();
          break;

        case "_issued":
          _Issued = new fhirCsR2.Models.Element();
          _Issued.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR2.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "subType":
          SubType = new fhirCsR2.Models.CodeableConcept();
          SubType.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR2.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR2.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valuedItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValuedItem = new List<ContractTermValuedItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContractTermValuedItem objValuedItem = new fhirCsR2.Models.ContractTermValuedItem();
            objValuedItem.DeserializeJson(ref reader, options);
            ValuedItem.Add(objValuedItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValuedItem.Count == 0)
          {
            ValuedItem = null;
          }

          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ContractFriendly>))]
  public class ContractFriendly : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
    /// </summary>
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
    /// </summary>
    public Reference ContentReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ContentAttachment != null)
      {
        writer.WritePropertyName("contentAttachment");
        ContentAttachment.SerializeJson(writer, options);
      }

      if (ContentReference != null)
      {
        writer.WritePropertyName("contentReference");
        ContentReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          ContentAttachment = new fhirCsR2.Models.Attachment();
          ContentAttachment.DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          ContentReference = new fhirCsR2.Models.Reference();
          ContentReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// List of Legal expressions or representations of this Contract.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ContractLegal>))]
  public class ContractLegal : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Contract legal text in human renderable form.
    /// </summary>
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// Contract legal text in human renderable form.
    /// </summary>
    public Reference ContentReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ContentAttachment != null)
      {
        writer.WritePropertyName("contentAttachment");
        ContentAttachment.SerializeJson(writer, options);
      }

      if (ContentReference != null)
      {
        writer.WritePropertyName("contentReference");
        ContentReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          ContentAttachment = new fhirCsR2.Models.Attachment();
          ContentAttachment.DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          ContentReference = new fhirCsR2.Models.Reference();
          ContentReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// List of Computable Policy Rule Language Representations of this Contract.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<ContractRule>))]
  public class ContractRule : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
    /// </summary>
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
    /// </summary>
    public Reference ContentReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ContentAttachment != null)
      {
        writer.WritePropertyName("contentAttachment");
        ContentAttachment.SerializeJson(writer, options);
      }

      if (ContentReference != null)
      {
        writer.WritePropertyName("contentReference");
        ContentReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          ContentAttachment = new fhirCsR2.Models.Attachment();
          ContentAttachment.DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          ContentReference = new fhirCsR2.Models.Reference();
          ContentReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A formal agreement between parties regarding the conduct of business, exchange of information or other matters.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<Contract>))]
  public class Contract : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Contract";
    /// <summary>
    /// Action stipulated by this Contract.
    /// </summary>
    public List<CodeableConcept> Action { get; set; }
    /// <summary>
    /// Reason for action stipulated by this Contract.
    /// </summary>
    public List<CodeableConcept> ActionReason { get; set; }
    /// <summary>
    /// List of Contract actors.
    /// </summary>
    public List<ContractActor> Actor { get; set; }
    /// <summary>
    /// Relevant time or time-period when this Contract is applicable.
    /// </summary>
    public Period Applies { get; set; }
    /// <summary>
    /// A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
    /// </summary>
    public List<Reference> Authority { get; set; }
    /// <summary>
    /// Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
    /// </summary>
    public Attachment BindingAttachment { get; set; }
    /// <summary>
    /// Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
    /// </summary>
    public Reference BindingReference { get; set; }
    /// <summary>
    /// Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
    /// </summary>
    public List<Reference> Domain { get; set; }
    /// <summary>
    /// The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
    /// </summary>
    public List<ContractFriendly> Friendly { get; set; }
    /// <summary>
    /// Unique identifier for this Contract.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// When this  Contract was issued.
    /// </summary>
    public string Issued { get; set; }
    /// <summary>
    /// Extension container element for Issued
    /// </summary>
    public Element _Issued { get; set; }
    /// <summary>
    /// List of Legal expressions or representations of this Contract.
    /// </summary>
    public List<ContractLegal> Legal { get; set; }
    /// <summary>
    /// List of Computable Policy Rule Language Representations of this Contract.
    /// </summary>
    public List<ContractRule> Rule { get; set; }
    /// <summary>
    /// Party signing this Contract.
    /// </summary>
    public List<ContractSigner> Signer { get; set; }
    /// <summary>
    /// Who and/or what this Contract is about: typically a Patient, Organization, or valued items such as goods and services.
    /// </summary>
    public List<Reference> Subject { get; set; }
    /// <summary>
    /// More specific type or specialization of an overarching or more general contract such as auto insurance, home owner  insurance, prenupial agreement, Advanced-Directive, or privacy consent.
    /// </summary>
    public List<CodeableConcept> SubType { get; set; }
    /// <summary>
    /// One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
    /// </summary>
    public List<ContractTerm> Term { get; set; }
    /// <summary>
    /// Type of Contract such as an insurance policy, real estate contract, a will, power of attorny, Privacy or Security policy , trust framework agreement, etc.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Contract Valued Item List.
    /// </summary>
    public List<ContractValuedItem> ValuedItem { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issued))
      {
        writer.WriteString("issued", (string)Issued!);
      }

      if (_Issued != null)
      {
        writer.WritePropertyName("_issued");
        _Issued.SerializeJson(writer, options);
      }

      if (Applies != null)
      {
        writer.WritePropertyName("applies");
        Applies.SerializeJson(writer, options);
      }

      if ((Subject != null) && (Subject.Count != 0))
      {
        writer.WritePropertyName("subject");
        writer.WriteStartArray();

        foreach (Reference valSubject in Subject)
        {
          valSubject.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Authority != null) && (Authority.Count != 0))
      {
        writer.WritePropertyName("authority");
        writer.WriteStartArray();

        foreach (Reference valAuthority in Authority)
        {
          valAuthority.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Domain != null) && (Domain.Count != 0))
      {
        writer.WritePropertyName("domain");
        writer.WriteStartArray();

        foreach (Reference valDomain in Domain)
        {
          valDomain.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((SubType != null) && (SubType.Count != 0))
      {
        writer.WritePropertyName("subType");
        writer.WriteStartArray();

        foreach (CodeableConcept valSubType in SubType)
        {
          valSubType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (CodeableConcept valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ActionReason != null) && (ActionReason.Count != 0))
      {
        writer.WritePropertyName("actionReason");
        writer.WriteStartArray();

        foreach (CodeableConcept valActionReason in ActionReason)
        {
          valActionReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Actor != null) && (Actor.Count != 0))
      {
        writer.WritePropertyName("actor");
        writer.WriteStartArray();

        foreach (ContractActor valActor in Actor)
        {
          valActor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ValuedItem != null) && (ValuedItem.Count != 0))
      {
        writer.WritePropertyName("valuedItem");
        writer.WriteStartArray();

        foreach (ContractValuedItem valValuedItem in ValuedItem)
        {
          valValuedItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Signer != null) && (Signer.Count != 0))
      {
        writer.WritePropertyName("signer");
        writer.WriteStartArray();

        foreach (ContractSigner valSigner in Signer)
        {
          valSigner.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Term != null) && (Term.Count != 0))
      {
        writer.WritePropertyName("term");
        writer.WriteStartArray();

        foreach (ContractTerm valTerm in Term)
        {
          valTerm.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (BindingAttachment != null)
      {
        writer.WritePropertyName("bindingAttachment");
        BindingAttachment.SerializeJson(writer, options);
      }

      if (BindingReference != null)
      {
        writer.WritePropertyName("bindingReference");
        BindingReference.SerializeJson(writer, options);
      }

      if ((Friendly != null) && (Friendly.Count != 0))
      {
        writer.WritePropertyName("friendly");
        writer.WriteStartArray();

        foreach (ContractFriendly valFriendly in Friendly)
        {
          valFriendly.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Legal != null) && (Legal.Count != 0))
      {
        writer.WritePropertyName("legal");
        writer.WriteStartArray();

        foreach (ContractLegal valLegal in Legal)
        {
          valLegal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Rule != null) && (Rule.Count != 0))
      {
        writer.WritePropertyName("rule");
        writer.WriteStartArray();

        foreach (ContractRule valRule in Rule)
        {
          valRule.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objAction = new fhirCsR2.Models.CodeableConcept();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "actionReason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ActionReason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objActionReason = new fhirCsR2.Models.CodeableConcept();
            objActionReason.DeserializeJson(ref reader, options);
            ActionReason.Add(objActionReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ActionReason.Count == 0)
          {
            ActionReason = null;
          }

          break;

        case "actor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Actor = new List<ContractActor>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContractActor objActor = new fhirCsR2.Models.ContractActor();
            objActor.DeserializeJson(ref reader, options);
            Actor.Add(objActor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Actor.Count == 0)
          {
            Actor = null;
          }

          break;

        case "applies":
          Applies = new fhirCsR2.Models.Period();
          Applies.DeserializeJson(ref reader, options);
          break;

        case "authority":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Authority = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objAuthority = new fhirCsR2.Models.Reference();
            objAuthority.DeserializeJson(ref reader, options);
            Authority.Add(objAuthority);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Authority.Count == 0)
          {
            Authority = null;
          }

          break;

        case "bindingAttachment":
          BindingAttachment = new fhirCsR2.Models.Attachment();
          BindingAttachment.DeserializeJson(ref reader, options);
          break;

        case "bindingReference":
          BindingReference = new fhirCsR2.Models.Reference();
          BindingReference.DeserializeJson(ref reader, options);
          break;

        case "domain":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Domain = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objDomain = new fhirCsR2.Models.Reference();
            objDomain.DeserializeJson(ref reader, options);
            Domain.Add(objDomain);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Domain.Count == 0)
          {
            Domain = null;
          }

          break;

        case "friendly":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Friendly = new List<ContractFriendly>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContractFriendly objFriendly = new fhirCsR2.Models.ContractFriendly();
            objFriendly.DeserializeJson(ref reader, options);
            Friendly.Add(objFriendly);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Friendly.Count == 0)
          {
            Friendly = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR2.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "issued":
          Issued = reader.GetString();
          break;

        case "_issued":
          _Issued = new fhirCsR2.Models.Element();
          _Issued.DeserializeJson(ref reader, options);
          break;

        case "legal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Legal = new List<ContractLegal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContractLegal objLegal = new fhirCsR2.Models.ContractLegal();
            objLegal.DeserializeJson(ref reader, options);
            Legal.Add(objLegal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Legal.Count == 0)
          {
            Legal = null;
          }

          break;

        case "rule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Rule = new List<ContractRule>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContractRule objRule = new fhirCsR2.Models.ContractRule();
            objRule.DeserializeJson(ref reader, options);
            Rule.Add(objRule);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Rule.Count == 0)
          {
            Rule = null;
          }

          break;

        case "signer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Signer = new List<ContractSigner>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContractSigner objSigner = new fhirCsR2.Models.ContractSigner();
            objSigner.DeserializeJson(ref reader, options);
            Signer.Add(objSigner);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Signer.Count == 0)
          {
            Signer = null;
          }

          break;

        case "subject":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Subject = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objSubject = new fhirCsR2.Models.Reference();
            objSubject.DeserializeJson(ref reader, options);
            Subject.Add(objSubject);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Subject.Count == 0)
          {
            Subject = null;
          }

          break;

        case "subType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objSubType = new fhirCsR2.Models.CodeableConcept();
            objSubType.DeserializeJson(ref reader, options);
            SubType.Add(objSubType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubType.Count == 0)
          {
            SubType = null;
          }

          break;

        case "term":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Term = new List<ContractTerm>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContractTerm objTerm = new fhirCsR2.Models.ContractTerm();
            objTerm.DeserializeJson(ref reader, options);
            Term.Add(objTerm);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Term.Count == 0)
          {
            Term = null;
          }

          break;

        case "type":
          Type = new fhirCsR2.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valuedItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValuedItem = new List<ContractValuedItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.ContractValuedItem objValuedItem = new fhirCsR2.Models.ContractValuedItem();
            objValuedItem.DeserializeJson(ref reader, options);
            ValuedItem.Add(objValuedItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValuedItem.Count == 0)
          {
            ValuedItem = null;
          }

          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
