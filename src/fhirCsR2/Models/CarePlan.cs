// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// Identifies CarePlans with some sort of formal relationship to the current plan.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<CarePlanRelatedPlan>))]
  public class CarePlanRelatedPlan : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Identifies the type of relationship this plan has to the target plan.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// A reference to the plan to which a relationship is asserted.
    /// </summary>
    public Reference Plan { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (Plan != null)
      {
        writer.WritePropertyName("plan");
        Plan.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR2.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "plan":
          Plan = new fhirCsR2.Models.Reference();
          Plan.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CarePlan.relatedPlan.code field
  /// </summary>
  public static class CarePlanRelatedPlanCodeCodes {
    public const string INCLUDES = "includes";
    public const string REPLACES = "replaces";
    public const string FULFILLS = "fulfills";
    public static HashSet<string> Values = new HashSet<string>() {
      "includes",
      "replaces",
      "fulfills",
    };
  }
  /// <summary>
  /// Allows representation of care teams, helps scope care plan.  In some cases may be a determiner of access permissions.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<CarePlanParticipant>))]
  public class CarePlanParticipant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The specific person or organization who is participating/expected to participate in the care plan.
    /// </summary>
    public Reference Member { get; set; }
    /// <summary>
    /// Indicates specific responsibility of an individual within the care plan; e.g. "Primary physician", "Team coordinator", "Caregiver", etc.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Member != null)
      {
        writer.WritePropertyName("member");
        Member.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "member":
          Member = new fhirCsR2.Models.Reference();
          Member.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = new fhirCsR2.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Details in a simple form for generic care plan systems.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<CarePlanActivityDetail>))]
  public class CarePlanActivityDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// May determine what types of extensions are permitted.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// Allows matching performed to planned as well as validation against protocols.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Allows rough dose checking.
    /// </summary>
    public Quantity DailyAmount { get; set; }
    /// <summary>
    /// This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// So that participants know the link explicitly.
    /// </summary>
    public List<Reference> Goal { get; set; }
    /// <summary>
    /// Helps in planning of activity.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// Helps in planning of activity.
    /// </summary>
    public List<Reference> Performer { get; set; }
    /// <summary>
    /// Identifies the food, drug or other product to be consumed or supplied in the activity.
    /// </summary>
    public CodeableConcept ProductCodeableConcept { get; set; }
    /// <summary>
    /// Identifies the food, drug or other product to be consumed or supplied in the activity.
    /// </summary>
    public Reference ProductReference { get; set; }
    /// <summary>
    /// Captures intention to not do something that may have been previously typical.
    /// </summary>
    public bool Prohibited { get; set; }
    /// <summary>
    /// Extension container element for Prohibited
    /// </summary>
    public Element _Prohibited { get; set; }
    /// <summary>
    /// Identifies the quantity expected to be supplied, administered or consumed by the subject.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Provides the rationale that drove the inclusion of this particular activity as part of the plan.
    /// </summary>
    public List<CodeableConcept> ReasonCode { get; set; }
    /// <summary>
    /// Provides the health condition(s) that drove the inclusion of this particular activity as part of the plan.
    /// </summary>
    public List<Reference> ReasonReference { get; set; }
    /// <summary>
    /// Allows prompting for activities and detection of missed planned activities.
    /// </summary>
    public Timing ScheduledTiming { get; set; }
    /// <summary>
    /// Allows prompting for activities and detection of missed planned activities.
    /// </summary>
    public Period ScheduledPeriod { get; set; }
    /// <summary>
    /// Allows prompting for activities and detection of missed planned activities.
    /// </summary>
    public string ScheduledString { get; set; }
    /// <summary>
    /// Extension container element for ScheduledString
    /// </summary>
    public Element _ScheduledString { get; set; }
    /// <summary>
    /// Indicates progress against the plan, whether the activity is still relevant for the plan.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Provides reason why the activity isn't yet started, is on hold, was cancelled, etc.
    /// </summary>
    public CodeableConcept StatusReason { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if ((ReasonCode != null) && (ReasonCode.Count != 0))
      {
        writer.WritePropertyName("reasonCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valReasonCode in ReasonCode)
        {
          valReasonCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ReasonReference != null) && (ReasonReference.Count != 0))
      {
        writer.WritePropertyName("reasonReference");
        writer.WriteStartArray();

        foreach (Reference valReasonReference in ReasonReference)
        {
          valReasonReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Goal != null) && (Goal.Count != 0))
      {
        writer.WritePropertyName("goal");
        writer.WriteStartArray();

        foreach (Reference valGoal in Goal)
        {
          valGoal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (StatusReason != null)
      {
        writer.WritePropertyName("statusReason");
        StatusReason.SerializeJson(writer, options);
      }

      writer.WriteBoolean("prohibited", Prohibited);

      if (_Prohibited != null)
      {
        writer.WritePropertyName("_prohibited");
        _Prohibited.SerializeJson(writer, options);
      }

      if (ScheduledTiming != null)
      {
        writer.WritePropertyName("scheduledTiming");
        ScheduledTiming.SerializeJson(writer, options);
      }

      if (ScheduledPeriod != null)
      {
        writer.WritePropertyName("scheduledPeriod");
        ScheduledPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ScheduledString))
      {
        writer.WriteString("scheduledString", (string)ScheduledString!);
      }

      if (_ScheduledString != null)
      {
        writer.WritePropertyName("_scheduledString");
        _ScheduledString.SerializeJson(writer, options);
      }

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if ((Performer != null) && (Performer.Count != 0))
      {
        writer.WritePropertyName("performer");
        writer.WriteStartArray();

        foreach (Reference valPerformer in Performer)
        {
          valPerformer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ProductCodeableConcept != null)
      {
        writer.WritePropertyName("productCodeableConcept");
        ProductCodeableConcept.SerializeJson(writer, options);
      }

      if (ProductReference != null)
      {
        writer.WritePropertyName("productReference");
        ProductReference.SerializeJson(writer, options);
      }

      if (DailyAmount != null)
      {
        writer.WritePropertyName("dailyAmount");
        DailyAmount.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = new fhirCsR2.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR2.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "dailyAmount":
          DailyAmount = new fhirCsR2.Models.Quantity();
          DailyAmount.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "goal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Goal = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objGoal = new fhirCsR2.Models.Reference();
            objGoal.DeserializeJson(ref reader, options);
            Goal.Add(objGoal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Goal.Count == 0)
          {
            Goal = null;
          }

          break;

        case "location":
          Location = new fhirCsR2.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "performer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Performer = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objPerformer = new fhirCsR2.Models.Reference();
            objPerformer.DeserializeJson(ref reader, options);
            Performer.Add(objPerformer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Performer.Count == 0)
          {
            Performer = null;
          }

          break;

        case "productCodeableConcept":
          ProductCodeableConcept = new fhirCsR2.Models.CodeableConcept();
          ProductCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "productReference":
          ProductReference = new fhirCsR2.Models.Reference();
          ProductReference.DeserializeJson(ref reader, options);
          break;

        case "prohibited":
          Prohibited = reader.GetBoolean();
          break;

        case "_prohibited":
          _Prohibited = new fhirCsR2.Models.Element();
          _Prohibited.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR2.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "reasonCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objReasonCode = new fhirCsR2.Models.CodeableConcept();
            objReasonCode.DeserializeJson(ref reader, options);
            ReasonCode.Add(objReasonCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonCode.Count == 0)
          {
            ReasonCode = null;
          }

          break;

        case "reasonReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonReference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objReasonReference = new fhirCsR2.Models.Reference();
            objReasonReference.DeserializeJson(ref reader, options);
            ReasonReference.Add(objReasonReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonReference.Count == 0)
          {
            ReasonReference = null;
          }

          break;

        case "scheduledTiming":
          ScheduledTiming = new fhirCsR2.Models.Timing();
          ScheduledTiming.DeserializeJson(ref reader, options);
          break;

        case "scheduledPeriod":
          ScheduledPeriod = new fhirCsR2.Models.Period();
          ScheduledPeriod.DeserializeJson(ref reader, options);
          break;

        case "scheduledString":
          ScheduledString = reader.GetString();
          break;

        case "_scheduledString":
          _ScheduledString = new fhirCsR2.Models.Element();
          _ScheduledString.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "statusReason":
          StatusReason = new fhirCsR2.Models.CodeableConcept();
          StatusReason.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CarePlan.activity.detail.status field
  /// </summary>
  public static class CarePlanActivityDetailStatusCodes {
    public const string NOT_STARTED = "not-started";
    public const string SCHEDULED = "scheduled";
    public const string IN_PROGRESS = "in-progress";
    public const string ON_HOLD = "on-hold";
    public const string COMPLETED = "completed";
    public const string CANCELLED = "cancelled";
    public static HashSet<string> Values = new HashSet<string>() {
      "not-started",
      "scheduled",
      "in-progress",
      "on-hold",
      "completed",
      "cancelled",
    };
  }
  /// <summary>
  /// Allows systems to prompt for performance of planned activities, and validate plans against best practice.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<CarePlanActivity>))]
  public class CarePlanActivity : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Links plan to resulting actions.
    /// </summary>
    public List<Reference> ActionResulting { get; set; }
    /// <summary>
    /// Details in a simple form for generic care plan systems.
    /// </summary>
    public CarePlanActivityDetail Detail { get; set; }
    /// <summary>
    /// Can be used to capture information about adherence, progress, concerns, etc.
    /// </summary>
    public List<Annotation> Progress { get; set; }
    /// <summary>
    /// Details in a form consistent with other applications and contexts of use.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((ActionResulting != null) && (ActionResulting.Count != 0))
      {
        writer.WritePropertyName("actionResulting");
        writer.WriteStartArray();

        foreach (Reference valActionResulting in ActionResulting)
        {
          valActionResulting.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Progress != null) && (Progress.Count != 0))
      {
        writer.WritePropertyName("progress");
        writer.WriteStartArray();

        foreach (Annotation valProgress in Progress)
        {
          valProgress.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (Detail != null)
      {
        writer.WritePropertyName("detail");
        Detail.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actionResulting":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ActionResulting = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objActionResulting = new fhirCsR2.Models.Reference();
            objActionResulting.DeserializeJson(ref reader, options);
            ActionResulting.Add(objActionResulting);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ActionResulting.Count == 0)
          {
            ActionResulting = null;
          }

          break;

        case "detail":
          Detail = new fhirCsR2.Models.CarePlanActivityDetail();
          Detail.DeserializeJson(ref reader, options);
          break;

        case "progress":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Progress = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Annotation objProgress = new fhirCsR2.Models.Annotation();
            objProgress.DeserializeJson(ref reader, options);
            Progress.Add(objProgress);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Progress.Count == 0)
          {
            Progress = null;
          }

          break;

        case "reference":
          Reference = new fhirCsR2.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamComponentConverter<CarePlan>))]
  public class CarePlan : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "CarePlan";
    /// <summary>
    /// Allows systems to prompt for performance of planned activities, and validate plans against best practice.
    /// </summary>
    public List<CarePlanActivity> Activity { get; set; }
    /// <summary>
    /// Links plan to the conditions it manages.  Also scopes plans - multiple plans may exist addressing different concerns.
    /// </summary>
    public List<Reference> Addresses { get; set; }
    /// <summary>
    /// Identifies the individual(s) or ogranization who is responsible for the content of the care plan.
    /// </summary>
    public List<Reference> Author { get; set; }
    /// <summary>
    /// Used for filtering what plan(s) are retrieved and displayed to different types of users.
    /// </summary>
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// Identifies the context in which this particular CarePlan is defined.
    /// </summary>
    public Reference Context { get; set; }
    /// <summary>
    /// Provides more detail than conveyed by category.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Provides context for plan.  Allows plan effectiveness to be evaluated by clinicians.
    /// </summary>
    public List<Reference> Goal { get; set; }
    /// <summary>
    /// Need to allow connection to a wider workflow.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Indicates how current the plan is.
    /// </summary>
    public string Modified { get; set; }
    /// <summary>
    /// Extension container element for Modified
    /// </summary>
    public Element _Modified { get; set; }
    /// <summary>
    /// Used to capture information that applies to the plan as a whole that doesn't fit into discrete elements.
    /// </summary>
    public Annotation Note { get; set; }
    /// <summary>
    /// Allows representation of care teams, helps scope care plan.  In some cases may be a determiner of access permissions.
    /// </summary>
    public List<CarePlanParticipant> Participant { get; set; }
    /// <summary>
    /// Allows tracking what plan(s) are in effect at a particular time.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// Identifies CarePlans with some sort of formal relationship to the current plan.
    /// </summary>
    public List<CarePlanRelatedPlan> RelatedPlan { get; set; }
    /// <summary>
    /// Allows clinicians to determine whether the plan is actionable or not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Identifies the patient or group whose intended care is described by the plan.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Identifies barriers and other considerations associated with the care plan.
    /// </summary>
    public List<Reference> Support { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR2.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Context != null)
      {
        writer.WritePropertyName("context");
        Context.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if ((Author != null) && (Author.Count != 0))
      {
        writer.WritePropertyName("author");
        writer.WriteStartArray();

        foreach (Reference valAuthor in Author)
        {
          valAuthor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Modified))
      {
        writer.WriteString("modified", (string)Modified!);
      }

      if (_Modified != null)
      {
        writer.WritePropertyName("_modified");
        _Modified.SerializeJson(writer, options);
      }

      if ((Category != null) && (Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();

        foreach (CodeableConcept valCategory in Category)
        {
          valCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Addresses != null) && (Addresses.Count != 0))
      {
        writer.WritePropertyName("addresses");
        writer.WriteStartArray();

        foreach (Reference valAddresses in Addresses)
        {
          valAddresses.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Support != null) && (Support.Count != 0))
      {
        writer.WritePropertyName("support");
        writer.WriteStartArray();

        foreach (Reference valSupport in Support)
        {
          valSupport.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelatedPlan != null) && (RelatedPlan.Count != 0))
      {
        writer.WritePropertyName("relatedPlan");
        writer.WriteStartArray();

        foreach (CarePlanRelatedPlan valRelatedPlan in RelatedPlan)
        {
          valRelatedPlan.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Participant != null) && (Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();

        foreach (CarePlanParticipant valParticipant in Participant)
        {
          valParticipant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Goal != null) && (Goal.Count != 0))
      {
        writer.WritePropertyName("goal");
        writer.WriteStartArray();

        foreach (Reference valGoal in Goal)
        {
          valGoal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Activity != null) && (Activity.Count != 0))
      {
        writer.WritePropertyName("activity");
        writer.WriteStartArray();

        foreach (CarePlanActivity valActivity in Activity)
        {
          valActivity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Note != null)
      {
        writer.WritePropertyName("note");
        Note.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "activity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Activity = new List<CarePlanActivity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CarePlanActivity objActivity = new fhirCsR2.Models.CarePlanActivity();
            objActivity.DeserializeJson(ref reader, options);
            Activity.Add(objActivity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Activity.Count == 0)
          {
            Activity = null;
          }

          break;

        case "addresses":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Addresses = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objAddresses = new fhirCsR2.Models.Reference();
            objAddresses.DeserializeJson(ref reader, options);
            Addresses.Add(objAddresses);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Addresses.Count == 0)
          {
            Addresses = null;
          }

          break;

        case "author":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Author = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objAuthor = new fhirCsR2.Models.Reference();
            objAuthor.DeserializeJson(ref reader, options);
            Author.Add(objAuthor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Author.Count == 0)
          {
            Author = null;
          }

          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CodeableConcept objCategory = new fhirCsR2.Models.CodeableConcept();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "context":
          Context = new fhirCsR2.Models.Reference();
          Context.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR2.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "goal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Goal = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objGoal = new fhirCsR2.Models.Reference();
            objGoal.DeserializeJson(ref reader, options);
            Goal.Add(objGoal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Goal.Count == 0)
          {
            Goal = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Identifier objIdentifier = new fhirCsR2.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "modified":
          Modified = reader.GetString();
          break;

        case "_modified":
          _Modified = new fhirCsR2.Models.Element();
          _Modified.DeserializeJson(ref reader, options);
          break;

        case "note":
          Note = new fhirCsR2.Models.Annotation();
          Note.DeserializeJson(ref reader, options);
          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Participant = new List<CarePlanParticipant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CarePlanParticipant objParticipant = new fhirCsR2.Models.CarePlanParticipant();
            objParticipant.DeserializeJson(ref reader, options);
            Participant.Add(objParticipant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Participant.Count == 0)
          {
            Participant = null;
          }

          break;

        case "period":
          Period = new fhirCsR2.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "relatedPlan":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedPlan = new List<CarePlanRelatedPlan>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.CarePlanRelatedPlan objRelatedPlan = new fhirCsR2.Models.CarePlanRelatedPlan();
            objRelatedPlan.DeserializeJson(ref reader, options);
            RelatedPlan.Add(objRelatedPlan);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedPlan.Count == 0)
          {
            RelatedPlan = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR2.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR2.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "support":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Support = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Reference objSupport = new fhirCsR2.Models.Reference();
            objSupport.DeserializeJson(ref reader, options);
            Support.Add(objSupport);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Support.Count == 0)
          {
            Support = null;
          }

          break;

        default:
          ((fhirCsR2.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CarePlan.status field
  /// </summary>
  public static class CarePlanStatusCodes {
    public const string PROPOSED = "proposed";
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string COMPLETED = "completed";
    public const string CANCELLED = "cancelled";
    public static HashSet<string> Values = new HashSet<string>() {
      "proposed",
      "draft",
      "active",
      "completed",
      "cancelled",
    };
  }
}
