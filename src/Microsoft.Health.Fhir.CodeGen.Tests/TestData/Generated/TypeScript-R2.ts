// <auto-generated/>
// Contents of: hl7.fhir.r2.core#1.0.2, hl7.fhir.r2.expansions#1.0.2
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Option: "Namespace" = "fhir{VersionNumber}"
  // Option: "MinTsVersion" = "3.7"
  // Option: "ExportKeys" = ""
  // Option: "IncludeExperimental" = "False"
  // Option: "FhirCacheDirectory" = "~/.fhir"
  // Option: "OutputDirectory" = "./generated"
  // Option: "Packages" = ""
  // Option: "OfflineMode" = "False"
// Minimum TypeScript Version: 3.7
export interface Address extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Quantity {
  /**
   * A computer processable form of the unit in some unit representation system.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
   */
  comparator?: ('<'|'<='|'>='|'>') | undefined;
  _comparator?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * The identification of the system that provides the coded form of the unit.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * A human-readable form of the unit.
   */
  unit?: string | undefined;
  _unit?: Element | undefined;
  /**
   * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
   */
  value?: number | undefined;
}
export interface Annotation extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Attachment extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface BackboneElement extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface CodeableConcept extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Coding extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface ContactPoint extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Quantity {
  /**
   * A computer processable form of the unit in some unit representation system.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
   */
  comparator?: ('<'|'<='|'>='|'>') | undefined;
  _comparator?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * The identification of the system that provides the coded form of the unit.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * A human-readable form of the unit.
   */
  unit?: string | undefined;
  _unit?: Element | undefined;
  /**
   * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
   */
  value?: number | undefined;
}
export interface Quantity {
  /**
   * A computer processable form of the unit in some unit representation system.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
   */
  comparator?: ('<'|'<='|'>='|'>') | undefined;
  _comparator?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * The identification of the system that provides the coded form of the unit.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * A human-readable form of the unit.
   */
  unit?: string | undefined;
  _unit?: Element | undefined;
  /**
   * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
   */
  value?: number | undefined;
}
export interface Quantity {
  /**
   * A computer processable form of the unit in some unit representation system.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
   */
  comparator?: ('<'|'<='|'>='|'>') | undefined;
  _comparator?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * The identification of the system that provides the coded form of the unit.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * A human-readable form of the unit.
   */
  unit?: string | undefined;
  _unit?: Element | undefined;
  /**
   * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
   */
  value?: number | undefined;
}
export interface Element {
}
/**
 * Base definition information for tools
 */
export interface ElementDefinitionBase extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
/**
 * ValueSet details if this is coded
 */
export interface ElementDefinitionBinding extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
/**
 * Condition that must evaluate to true
 */
export interface ElementDefinitionConstraint extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
/**
 * Map element to another set of definitions
 */
export interface ElementDefinitionMapping extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
/**
 * This element is sliced - slices follow
 */
export interface ElementDefinitionSlicing extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
/**
 * Data type and Profile for this element
 */
export interface ElementDefinitionType extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface ElementDefinition extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Extension extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface HumanName extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Identifier extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Meta extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Quantity {
  /**
   * A computer processable form of the unit in some unit representation system.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
   */
  comparator?: ('<'|'<='|'>='|'>') | undefined;
  _comparator?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * The identification of the system that provides the coded form of the unit.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * A human-readable form of the unit.
   */
  unit?: string | undefined;
  _unit?: Element | undefined;
  /**
   * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
   */
  value?: number | undefined;
}
export interface Narrative extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Period extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Quantity extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Range extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Ratio extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Reference extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface SampledData extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Signature extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Quantity {
  /**
   * A computer processable form of the unit in some unit representation system.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * Not allowed to be used in this context
   */
  comparator?: ('<'|'<='|'>='|'>') | undefined;
  _comparator?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * The identification of the system that provides the coded form of the unit.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * A human-readable form of the unit.
   */
  unit?: string | undefined;
  _unit?: Element | undefined;
  /**
   * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
   */
  value?: number | undefined;
}
/**
 * When the event is to occur
 */
export interface TimingRepeat extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Timing extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
export interface Account extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Account';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Adverse Reaction Events linked to exposure to substance
 */
export interface AllergyIntoleranceReaction extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface AllergyIntolerance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AllergyIntolerance';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Participants involved in appointment
 */
export interface AppointmentParticipant extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Appointment extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Appointment';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface AppointmentResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AppointmentResponse';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * What was done
 */
export interface AuditEventEvent extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Additional Information about the Object
 */
export interface AuditEventObjectDetail extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Specific instances of data or objects that have been accessed
 */
export interface AuditEventObject extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Logical network location for application activity
 */
export interface AuditEventParticipantNetwork extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * A person, a hardware device or software process
 */
export interface AuditEventParticipant extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Application systems and processes
 */
export interface AuditEventSource extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface AuditEvent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AuditEvent';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface Basic extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Basic';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface Binary extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Binary';
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
}
export interface BodySite extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'BodySite';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Transaction Related Information
 */
export interface BundleEntryRequest extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Transaction Related Information
 */
export interface BundleEntryResponse extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Search related information
 */
export interface BundleEntrySearch extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Entry in the bundle - will have a resource, or information
 */
export interface BundleEntry<BundleContentType = FhirResource> extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Bundle<BundleContentType = FhirResource> extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Bundle';
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
}
/**
 * In-line definition of activity
 */
export interface CarePlanActivityDetail extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Action to occur as part of plan
 */
export interface CarePlanActivity extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Who's involved in plan?
 */
export interface CarePlanParticipant extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Plans related to this one
 */
export interface CarePlanRelatedPlan extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface CarePlan extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CarePlan';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Insurance or medical plan
 */
export interface ClaimCoverage extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Diagnosis
 */
export interface ClaimDiagnosis extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Additional items
 */
export interface ClaimItemDetailSubDetail extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Additional items
 */
export interface ClaimItemDetail extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Prosthetic details
 */
export interface ClaimItemProsthesis extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Goods and Services
 */
export interface ClaimItem extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Only if type = oral
 */
export interface ClaimMissingTeeth extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Payee
 */
export interface ClaimPayee extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Claim extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Claim';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Added items adjudication
 */
export interface ClaimResponseAddItemAdjudication extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Added items detail adjudication
 */
export interface ClaimResponseAddItemDetailAdjudication extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Added items details
 */
export interface ClaimResponseAddItemDetail extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Insurer added line items
 */
export interface ClaimResponseAddItem extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Insurance or medical plan
 */
export interface ClaimResponseCoverage extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Processing errors
 */
export interface ClaimResponseError extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Adjudication details
 */
export interface ClaimResponseItemAdjudication extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Detail adjudication
 */
export interface ClaimResponseItemDetailAdjudication extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Subdetail adjudication
 */
export interface ClaimResponseItemDetailSubDetailAdjudication extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Subdetail line items
 */
export interface ClaimResponseItemDetailSubDetail extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Detail line items
 */
export interface ClaimResponseItemDetail extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Line items
 */
export interface ClaimResponseItem extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Processing notes
 */
export interface ClaimResponseNote extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface ClaimResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ClaimResponse';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Possible or likely findings and diagnoses
 */
export interface ClinicalImpressionFinding extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * One or more sets of investigations (signs, symptions, etc.)
 */
export interface ClinicalImpressionInvestigations extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Diagnosis considered not possible
 */
export interface ClinicalImpressionRuledOut extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface ClinicalImpression extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ClinicalImpression';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Message payload
 */
export interface CommunicationPayload extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Communication extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Communication';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Message payload
 */
export interface CommunicationRequestPayload extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface CommunicationRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CommunicationRequest';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Attests to accuracy of composition
 */
export interface CompositionAttester extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * The clinical service(s) being documented
 */
export interface CompositionEvent extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Composition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Composition';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Contact details of the publisher
 */
export interface ConceptMapContact extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Concept in target system for element
 */
export interface ConceptMapElementTarget extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Mappings for a concept from the source set
 */
export interface ConceptMapElement extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface ConceptMap extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ConceptMap';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Supporting evidence
 */
export interface ConditionEvidence extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Stage/grade, usually assessed formally
 */
export interface ConditionStage extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Condition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Condition';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Contact details of the publisher
 */
export interface ConformanceContact extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Document definition
 */
export interface ConformanceDocument extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * If this describes a specific instance
 */
export interface ConformanceImplementation extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * A messaging service end-point
 */
export interface ConformanceMessagingEndpoint extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Declare support for this event
 */
export interface ConformanceMessagingEvent extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * If messaging is supported
 */
export interface ConformanceMessaging extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * What operations are supported?
 */
export interface ConformanceRestInteraction extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Definition of an operation or a custom query
 */
export interface ConformanceRestOperation extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * What operations are supported?
 */
export interface ConformanceRestResourceInteraction extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Resource served on the REST interface
 */
export interface ConformanceRestResource extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Certificates associated with security profiles
 */
export interface ConformanceRestSecurityCertificate extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Information about security of implementation
 */
export interface ConformanceRestSecurity extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * If the endpoint is a RESTful one
 */
export interface ConformanceRest extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Software that is covered by this conformance statement
 */
export interface ConformanceSoftware extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Conformance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Conformance';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Contract Actor
 */
export interface ContractActor extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Contract Friendly Language
 */
export interface ContractFriendly extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Contract Legal Language
 */
export interface ContractLegal extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Computable Contract Language
 */
export interface ContractRule extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Contract Signer
 */
export interface ContractSigner extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Contract Valued Item
 */
export interface ContractValuedItem extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Contract extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Contract';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface Coverage extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Coverage';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Contact details of the publisher
 */
export interface DataElementContact extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * External specification mapped to
 */
export interface DataElementMapping extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface DataElement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DataElement';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Step taken to address
 */
export interface DetectedIssueMitigation extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface DetectedIssue extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DetectedIssue';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface Device extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Device';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Production specification of the component
 */
export interface DeviceComponentProductionSpecification extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface DeviceComponent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceComponent';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Describes the calibrations that have been performed or that are required to be performed
 */
export interface DeviceMetricCalibration extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface DeviceMetric extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceMetric';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface DeviceUseRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceUseRequest';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface DeviceUseStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceUseStatement';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * The items the orderer requested
 */
export interface DiagnosticOrderItem extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface DiagnosticOrder extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DiagnosticOrder';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Key images associated with this report
 */
export interface DiagnosticReportImage extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface DiagnosticReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DiagnosticReport';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * The items included
 */
export interface DocumentManifestContent extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Related things
 */
export interface DocumentManifestRelated extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface DocumentManifest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DocumentManifest';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Document referenced
 */
export interface DocumentReferenceContent extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Related identifiers or resources
 */
export interface DocumentReferenceContextRelated extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Clinical context of document
 */
export interface DocumentReferenceContext extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Relationships to other documents
 */
export interface DocumentReferenceRelatesTo extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface DocumentReference extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DocumentReference';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface DomainResource extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: string;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
}
export interface EligibilityRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EligibilityRequest';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface EligibilityResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EligibilityResponse';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Details about the admission to a healthcare service
 */
export interface EncounterHospitalization extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * List of locations where the patient has been
 */
export interface EncounterLocation extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * List of participants involved in the encounter
 */
export interface EncounterParticipant extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * List of past encounter statuses
 */
export interface EncounterStatusHistory extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Encounter extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Encounter';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface EnrollmentRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EnrollmentRequest';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface EnrollmentResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EnrollmentResponse';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Other practitioners facilitating this episode of care
 */
export interface EpisodeOfCareCareTeam extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Past list of status codes
 */
export interface EpisodeOfCareStatusHistory extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface EpisodeOfCare extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EpisodeOfCare';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface ExplanationOfBenefit extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ExplanationOfBenefit';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Condition that the related person had
 */
export interface FamilyMemberHistoryCondition extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface FamilyMemberHistory extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'FamilyMemberHistory';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface Flag extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Flag';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * What was end result of goal?
 */
export interface GoalOutcome extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Goal extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Goal';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Trait of group members
 */
export interface GroupCharacteristic extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Who or what is in group
 */
export interface GroupMember extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Group extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Group';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Times the Service Site is available
 */
export interface HealthcareServiceAvailableTime extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Not available during this time due to provided reason
 */
export interface HealthcareServiceNotAvailable extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Specific service delivered or performed
 */
export interface HealthcareServiceServiceType extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface HealthcareService extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'HealthcareService';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * The frame set
 */
export interface ImagingObjectSelectionStudySeriesInstanceFrames extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * The selected instance
 */
export interface ImagingObjectSelectionStudySeriesInstance extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Series identity of the selected instances
 */
export interface ImagingObjectSelectionStudySeries extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Study identity of the selected instances
 */
export interface ImagingObjectSelectionStudy extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface ImagingObjectSelection extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImagingObjectSelection';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * A single SOP instance from the series
 */
export interface ImagingStudySeriesInstance extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Each study has one or more series of instances
 */
export interface ImagingStudySeries extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface ImagingStudy extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImagingStudy';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Administration/non-administration reasons
 */
export interface ImmunizationExplanation extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Details of a reaction that follows immunization
 */
export interface ImmunizationReaction extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * What protocol was followed
 */
export interface ImmunizationVaccinationProtocol extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Immunization extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Immunization';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Dates governing proposed immunization
 */
export interface ImmunizationRecommendationRecommendationDateCriterion extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Protocol used by recommendation
 */
export interface ImmunizationRecommendationRecommendationProtocol extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Vaccine administration recommendations
 */
export interface ImmunizationRecommendationRecommendation extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface ImmunizationRecommendation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImmunizationRecommendation';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Contact details of the publisher
 */
export interface ImplementationGuideContact extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Another Implementation guide this depends on
 */
export interface ImplementationGuideDependency extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Profiles that apply globally
 */
export interface ImplementationGuideGlobal extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Resource in the implementation guide
 */
export interface ImplementationGuidePackageResource extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Group of resources as used in .page.package
 */
export interface ImplementationGuidePackage extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface ImplementationGuide extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImplementationGuide';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Entries in the list
 */
export interface ListEntry extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface List extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'List';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * The absolute geographic location
 */
export interface LocationPosition extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Location extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Location';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface Media extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Media';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * What is  in the package
 */
export interface MedicationPackageContent extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Details about packaged medications
 */
export interface MedicationPackage extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface MedicationProductBatch extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Active or inactive ingredient
 */
export interface MedicationProductIngredient extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Administrable medication details
 */
export interface MedicationProduct extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Medication extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Medication';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Details of how medication was taken
 */
export interface MedicationAdministrationDosage extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface MedicationAdministration extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationAdministration';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Medicine administration instructions to the patient/caregiver
 */
export interface MedicationDispenseDosageInstruction extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Deals with substitution of one medicine for another
 */
export interface MedicationDispenseSubstitution extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface MedicationDispense extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationDispense';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Medication supply authorization
 */
export interface MedicationOrderDispenseRequest extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * How medication should be taken
 */
export interface MedicationOrderDosageInstruction extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Any restrictions on medication substitution
 */
export interface MedicationOrderSubstitution extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface MedicationOrder extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationOrder';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Details of how medication was taken
 */
export interface MedicationStatementDosage extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface MedicationStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationStatement';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Message Destination Application(s)
 */
export interface MessageHeaderDestination extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * If this is a reply to prior message
 */
export interface MessageHeaderResponse extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Message Source Application
 */
export interface MessageHeaderSource extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface MessageHeader extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MessageHeader';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Contact details of the publisher
 */
export interface NamingSystemContact extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Unique identifiers used for system
 */
export interface NamingSystemUniqueId extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface NamingSystem extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'NamingSystem';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Formula feeding instruction as structured data
 */
export interface NutritionOrderEnteralFormulaAdministration extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Enteral formula components
 */
export interface NutritionOrderEnteralFormula extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Required  nutrient modifications
 */
export interface NutritionOrderOralDietNutrient extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Required  texture modifications
 */
export interface NutritionOrderOralDietTexture extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Oral diet components
 */
export interface NutritionOrderOralDiet extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Supplement components
 */
export interface NutritionOrderSupplement extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface NutritionOrder extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'NutritionOrder';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Component results
 */
export interface ObservationComponent extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Resource related to this observation
 */
export interface ObservationRelated extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Observation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Observation';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Contact details of the publisher
 */
export interface OperationDefinitionContact extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface OperationDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'OperationDefinition';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * A single issue associated with the action
 */
export interface OperationOutcomeIssue extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface OperationOutcome extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'OperationOutcome';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * When order should be fulfilled
 */
export interface OrderWhen extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Order extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Order';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface OrderResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'OrderResponse';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Contact for the organization for a certain purpose
 */
export interface OrganizationContact extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Organization extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Organization';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface Parameters extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Parameters';
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
}
/**
 * This patient is known to be an animal (non-human)
 */
export interface PatientAnimal extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * A list of Languages which may be used to communicate with the patient about his or her health
 */
export interface PatientCommunication extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * A contact party (e.g. guardian, partner, friend) for the patient
 */
export interface PatientContact extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Link to another patient resource that concerns the same actual person
 */
export interface PatientLink extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Patient extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Patient';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface PaymentNotice extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PaymentNotice';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Details
 */
export interface PaymentReconciliationDetail extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Note text
 */
export interface PaymentReconciliationNote extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface PaymentReconciliation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PaymentReconciliation';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Link to a resource that concerns the same actual person
 */
export interface PersonLink extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Person extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Person';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Roles/organizations the practitioner is associated with
 */
export interface PractitionerPractitionerRole extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Qualifications obtained by training and certification
 */
export interface PractitionerQualification extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Practitioner extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Practitioner';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Device changed in procedure
 */
export interface ProcedureFocalDevice extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * The people who performed the procedure
 */
export interface ProcedurePerformer extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Procedure extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Procedure';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface ProcedureRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ProcedureRequest';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Items to re-adjudicate
 */
export interface ProcessRequestItem extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface ProcessRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ProcessRequest';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Notes
 */
export interface ProcessResponseNotes extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface ProcessResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ProcessResponse';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * An entity used in this activity
 */
export interface ProvenanceEntity extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Provenance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Provenance';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface Questionnaire extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Questionnaire';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface QuestionnaireResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'QuestionnaireResponse';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface ReferralRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ReferralRequest';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface RelatedPerson extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RelatedPerson';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: string;
}
/**
 * Outcome predicted
 */
export interface RiskAssessmentPrediction extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface RiskAssessment extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RiskAssessment';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface Schedule extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Schedule';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Contact details of the publisher
 */
export interface SearchParameterContact extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface SearchParameter extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SearchParameter';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface Slot extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Slot';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Collection details
 */
export interface SpecimenCollection extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Direct container of specimen (tube/slide, etc.)
 */
export interface SpecimenContainer extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Treatment and processing step details
 */
export interface SpecimenTreatment extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Specimen extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Specimen';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Contact details of the publisher
 */
export interface StructureDefinitionContact extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Differential view of the structure
 */
export interface StructureDefinitionDifferential extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * External specification that the content is mapped to
 */
export interface StructureDefinitionMapping extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Snapshot view of the structure
 */
export interface StructureDefinitionSnapshot extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface StructureDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'StructureDefinition';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * The channel on which to report matches to the criteria
 */
export interface SubscriptionChannel extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Subscription extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Subscription';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Composition information about the substance
 */
export interface SubstanceIngredient extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * If this describes a specific package/container of the substance
 */
export interface SubstanceInstance extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Substance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Substance';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface SupplyDelivery extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SupplyDelivery';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * When the request should be fulfilled
 */
export interface SupplyRequestWhen extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface SupplyRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SupplyRequest';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Contact details of the publisher
 */
export interface TestScriptContact extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Fixture in the test script - by reference (uri)
 */
export interface TestScriptFixture extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * A setup operation or assert to perform
 */
export interface TestScriptSetupAction extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * A series of required setup operations before tests are executed
 */
export interface TestScriptSetup extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * One or more teardown operations to perform
 */
export interface TestScriptTeardownAction extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * A series of required clean up steps
 */
export interface TestScriptTeardown extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * A test operation or assert to perform
 */
export interface TestScriptTestAction extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * A test in this script
 */
export interface TestScriptTest extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Placeholder for evaluated elements
 */
export interface TestScriptVariable extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface TestScript extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'TestScript';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * An inline code system, which is part of this value set
 */
export interface ValueSetCodeSystem extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * When value set includes codes from elsewhere
 */
export interface ValueSetCompose extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Contact details of the publisher
 */
export interface ValueSetContact extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Parameter that controlled the expansion process
 */
export interface ValueSetExpansionParameter extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Used when the value set is "expanded"
 */
export interface ValueSetExpansion extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface ValueSet extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ValueSet';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Vision supply authorization
 */
export interface VisionPrescriptionDispense extends BackboneElement {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface VisionPrescription extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'VisionPrescription';
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
/**
 * Resource binding for generic use.
 */
export type FhirResource = 
  Account
  |AllergyIntolerance
  |Appointment
  |AppointmentResponse
  |AuditEvent
  |Basic
  |Binary
  |BodySite
  |Bundle
  |CarePlan
  |Claim
  |ClaimResponse
  |ClinicalImpression
  |Communication
  |CommunicationRequest
  |Composition
  |ConceptMap
  |Condition
  |Conformance
  |Contract
  |Coverage
  |DataElement
  |DetectedIssue
  |Device
  |DeviceComponent
  |DeviceMetric
  |DeviceUseRequest
  |DeviceUseStatement
  |DiagnosticOrder
  |DiagnosticReport
  |DocumentManifest
  |DocumentReference
  |EligibilityRequest
  |EligibilityResponse
  |Encounter
  |EnrollmentRequest
  |EnrollmentResponse
  |EpisodeOfCare
  |ExplanationOfBenefit
  |FamilyMemberHistory
  |Flag
  |Goal
  |Group
  |HealthcareService
  |ImagingObjectSelection
  |ImagingStudy
  |Immunization
  |ImmunizationRecommendation
  |ImplementationGuide
  |List
  |Location
  |Media
  |Medication
  |MedicationAdministration
  |MedicationDispense
  |MedicationOrder
  |MedicationStatement
  |MessageHeader
  |NamingSystem
  |NutritionOrder
  |Observation
  |OperationDefinition
  |OperationOutcome
  |Order
  |OrderResponse
  |Organization
  |Parameters
  |Patient
  |PaymentNotice
  |PaymentReconciliation
  |Person
  |Practitioner
  |Procedure
  |ProcedureRequest
  |ProcessRequest
  |ProcessResponse
  |Provenance
  |Questionnaire
  |QuestionnaireResponse
  |ReferralRequest
  |RelatedPerson
  |RiskAssessment
  |Schedule
  |SearchParameter
  |Slot
  |Specimen
  |StructureDefinition
  |Subscription
  |Substance
  |SupplyDelivery
  |SupplyRequest
  |TestScript
  |ValueSet
  |VisionPrescription;
