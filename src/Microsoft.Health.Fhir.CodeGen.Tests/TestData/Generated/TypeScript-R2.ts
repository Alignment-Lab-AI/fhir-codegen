// <auto-generated/>
// Contents of: hl7.fhir.r2.core#1.0.2, hl7.fhir.r2.expansions#1.0.2
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Export structures: PrimitiveType|ComplexType|Resource|Extension|Operation|SearchParameter|CodeSystem|ValueSet|Profile|LogicalModel|Compartment
  // Option: "Namespace" = "fhir{VersionNumber}"
  // Option: "MinTsVersion" = "3.7"
  // Option: "InlineEnums" = "True"
  // Option: "ExportKeys" = ""
  // Option: "IncludeExperimental" = "False"
  // Option: "FhirCacheDirectory" = "~/.fhir"
  // Option: "OutputDirectory" = "./generated"
  // Option: "Packages" = ""
  // Option: "OfflineMode" = "False"
// Minimum TypeScript Version: 3.7
export interface Address extends Element {
  /**
   * The name of the city, town, village or other community or delivery center.
   */
  city?: string | undefined;
  _city?: Element | undefined;
  /**
   * Country - a nation as commonly understood or generally accepted.
   */
  country?: string | undefined;
  _country?: Element | undefined;
  /**
   * The name of the administrative area (county).
   */
  district?: string | undefined;
  _district?: Element | undefined;
  /**
   * This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
   */
  line?: string[] | undefined;
  _line?: Element[] | undefined;
  /**
   * Time period when address was/is in use.
   */
  period?: Period | undefined;
  /**
   * A postal code designating a region defined by the postal service.
   */
  postalCode?: string | undefined;
  _postalCode?: Element | undefined;
  /**
   * Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes).
   */
  state?: string | undefined;
  _state?: Element | undefined;
  /**
   * A full text representation of the address.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
   */
  type?: ('postal'|'physical'|'both') | undefined;
  _type?: Element | undefined;
  /**
   * The purpose of this address.
   */
  use?: ('home'|'work'|'temp'|'old') | undefined;
  _use?: Element | undefined;
}
export interface Age {
}
export interface Annotation extends Element {
  /**
   * The individual responsible for making the annotation.
   */
  authorReference?: Reference | undefined;
  /**
   * The individual responsible for making the annotation.
   */
  authorString?: string | undefined;
  _authorString?: Element | undefined;
  /**
   * The text of the annotation.
   */
  text: string;
  _text?: Element | undefined;
  /**
   * Indicates when this particular annotation was made.
   */
  time?: string | undefined;
  _time?: Element | undefined;
}
export interface Attachment extends Element {
  /**
   * Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
   */
  contentType?: string | undefined;
  _contentType?: Element | undefined;
  /**
   * The date that the attachment was first created.
   */
  creation?: string | undefined;
  _creation?: Element | undefined;
  /**
   * The actual data of the attachment - a sequence of bytes. In XML, represented using base64.
   */
  data?: string | undefined;
  _data?: Element | undefined;
  /**
   * The calculated hash of the data using SHA-1. Represented using base64.
   */
  hash?: string | undefined;
  _hash?: Element | undefined;
  /**
   * The human language of the content. The value can be any valid value according to BCP 47.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The number of bytes of data that make up this attachment.
   */
  size?: number | undefined;
  /**
   * A label or set of text to display in place of the data.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An alternative location where the data can be accessed.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
export interface BackboneElement extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface CodeableConcept extends Element {
  /**
   * A reference to a code defined by a terminology system.
   */
  coding?: Coding[] | undefined;
  /**
   * A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
   */
  text?: string | undefined;
  _text?: Element | undefined;
}
export interface Coding extends Element {
  /**
   * A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * A representation of the meaning of the code in the system, following the rules of the system.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * The identification of the code system that defines the meaning of the symbol in the code.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * Indicates that this coding was chosen by a user directly - i.e. off a pick list of available items (codes or displays).
   */
  userSelected?: boolean | undefined;
  _userSelected?: Element | undefined;
  /**
   * The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured. and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
export interface ContactPoint extends Element {
  /**
   * Time period when the contact point was/is in use.
   */
  period?: Period | undefined;
  /**
   * Specifies a preferred order in which to use a set of contacts. Contacts are ranked with lower values coming before higher values.
   */
  rank?: number | undefined;
  /**
   * Telecommunications form for contact point - what communications system is required to make use of the contact.
   */
  system?: ('phone'|'fax'|'email'|'pager'|'other') | undefined;
  _system?: Element | undefined;
  /**
   * Identifies the purpose for the contact point.
   */
  use?: ('home'|'work'|'temp'|'old'|'mobile') | undefined;
  _use?: Element | undefined;
  /**
   * The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
   */
  value?: string | undefined;
  _value?: Element | undefined;
}
export interface Count {
}
export interface Distance {
}
export interface Duration {
}
export interface Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references).
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
/**
 * Base definition information for tools
 */
export interface ElementDefinitionBase extends Element {
  /**
   * Maximum cardinality of the base element identified by the path.
   */
  max: string;
  _max?: Element | undefined;
  /**
   * Minimum cardinality of the base element identified by the path.
   */
  min: number;
  /**
   * The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [[[StructureDefinition]]] without a StructureDefinition.base.
   */
  path: string;
  _path?: Element | undefined;
}
/**
 * ValueSet details if this is coded
 */
export interface ElementDefinitionBinding extends Element {
  /**
   * Describes the intended use of this particular set of codes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
   */
  strength: ('required'|'extensible'|'preferred'|'example');
  _strength?: Element | undefined;
  /**
   * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
   */
  valueSetReference?: Reference | undefined;
  /**
   * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
   */
  valueSetString?: string | undefined;
  _valueSetString?: Element | undefined;
}
/**
 * Condition that must evaluate to true
 */
export interface ElementDefinitionConstraint extends Element {
  /**
   * Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
   */
  human: string;
  _human?: Element | undefined;
  /**
   * Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
   */
  key: string;
  _key?: Element | undefined;
  /**
   * Description of why this constraint is necessary or appropriate.
   */
  requirements?: string | undefined;
  _requirements?: Element | undefined;
  /**
   * Identifies the impact constraint violation has on the conformance of the instance.
   */
  severity: ('error'|'warning');
  _severity?: Element | undefined;
  /**
   * An XPath expression of constraint that can be executed to see if this constraint is met.
   */
  xpath: string;
  _xpath?: Element | undefined;
}
/**
 * Map element to another set of definitions
 */
export interface ElementDefinitionMapping extends Element {
  /**
   * An internal reference to the definition of a mapping.
   */
  identity: string;
  _identity?: Element | undefined;
  /**
   * Identifies the computable language in which mapping.map is expressed.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * Expresses what part of the target specification corresponds to this element.
   */
  map: string;
  _map?: Element | undefined;
}
/**
 * This element is sliced - slices follow
 */
export interface ElementDefinitionSlicing extends Element {
  /**
   * A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
   */
  discriminator?: string[] | undefined;
  _discriminator?: Element[] | undefined;
  /**
   * If the matching elements have to occur in the same order as defined in the profile.
   */
  ordered?: boolean | undefined;
  _ordered?: Element | undefined;
  /**
   * Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
   */
  rules: ('closed'|'open'|'openAtEnd');
  _rules?: Element | undefined;
}
/**
 * Data type and Profile for this element
 */
export interface ElementDefinitionType extends Element {
  /**
   * If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
   */
  aggregation?: ('contained'|'referenced'|'bundled')[] | undefined;
  _aggregation?: Element[] | undefined;
  /**
   * Name of Data type or Resource that is a(or the) type used for this element.
   */
  code: ('Address'|'Age'|'Annotation'|'Attachment'|'BackboneElement'|'CodeableConcept'|'Coding'|'ContactPoint'|'Count'|'Distance'|'Duration'|'Element'|'ElementDefinition'|'Extension'|'HumanName'|'Identifier'|'Meta'|'Money'|'Narrative'|'Period'|'Quantity'|'Range'|'Ratio'|'Reference'|'SampledData'|'Signature'|'SimpleQuantity'|'Timing'|'base64Binary'|'boolean'|'code'|'date'|'dateTime'|'decimal'|'id'|'instant'|'integer'|'markdown'|'oid'|'positiveInt'|'string'|'time'|'unsignedInt'|'uri'|'uuid'|'xhtml'|'Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription');
  _code?: Element | undefined;
  /**
   * Identifies a profile structure or implementation Guide that SHALL hold for resources or datatypes referenced as the type of this element. Can be a local reference - to another structure in this profile, or a reference to a structure in another profile. When more than one profile is specified, the content must conform to all of them. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.
   */
  profile?: string[] | undefined;
  _profile?: Element[] | undefined;
}
export interface ElementDefinition extends Element {
  /**
   * Identifies additional names by which this element might also be known.
   */
  alias?: string[] | undefined;
  _alias?: Element[] | undefined;
  /**
   * Information about the base definition of the element, provided to make it unncessary for tools to trace the deviation of the element through the derived and related profiles. This information is only provided where the element definition represents a constraint on another element definition, and must be present if there is a base element definition.
   */
  base?: ElementDefinitionBase | undefined;
  /**
   * Binds to a value set if this element is coded (code, Coding, CodeableConcept).
   */
  binding?: ElementDefinitionBinding | undefined;
  /**
   * A code that provides the meaning for the element according to a particular terminology.
   */
  code?: Coding[] | undefined;
  /**
   * Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc.
   */
  comments?: string | undefined;
  _comments?: Element | undefined;
  /**
   * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
   */
  condition?: string[] | undefined;
  _condition?: Element[] | undefined;
  /**
   * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
   */
  constraint?: ElementDefinitionConstraint[] | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueAddress?: Address | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueAnnotation?: Annotation | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueAttachment?: Attachment | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueString?: string | undefined;
  _defaultValueString?: Element | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueBoolean?: boolean | undefined;
  _defaultValueBoolean?: Element | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueCoding?: Coding | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueContactPoint?: ContactPoint | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueNumber?: number | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueHumanName?: HumanName | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueIdentifier?: Identifier | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueMeta?: Meta | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValuePeriod?: Period | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueQuantity?: Quantity | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueRange?: Range | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueRatio?: Ratio | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueReference?: Reference | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueSampledData?: SampledData | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueSignature?: Signature | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   */
  defaultValueTiming?: Timing | undefined;
  /**
   * Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleAddress?: Address | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleAnnotation?: Annotation | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleAttachment?: Attachment | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleString?: string | undefined;
  _exampleString?: Element | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleBoolean?: boolean | undefined;
  _exampleBoolean?: Element | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleCodeableConcept?: CodeableConcept | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleCoding?: Coding | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleContactPoint?: ContactPoint | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleNumber?: number | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleHumanName?: HumanName | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleIdentifier?: Identifier | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleMeta?: Meta | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  examplePeriod?: Period | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleQuantity?: Quantity | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleRange?: Range | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleRatio?: Ratio | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleReference?: Reference | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleSampledData?: SampledData | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleSignature?: Signature | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be captured.
   */
  exampleTiming?: Timing | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedAddress?: Address | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedAnnotation?: Annotation | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedAttachment?: Attachment | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedString?: string | undefined;
  _fixedString?: Element | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedBoolean?: boolean | undefined;
  _fixedBoolean?: Element | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedCoding?: Coding | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedContactPoint?: ContactPoint | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedNumber?: number | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedHumanName?: HumanName | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedIdentifier?: Identifier | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedMeta?: Meta | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedPeriod?: Period | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedQuantity?: Quantity | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedRange?: Range | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedRatio?: Ratio | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedReference?: Reference | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedSampledData?: SampledData | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedSignature?: Signature | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   */
  fixedTiming?: Timing | undefined;
  /**
   * If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
   */
  isModifier?: boolean | undefined;
  _isModifier?: Element | undefined;
  /**
   * Whether the element should be included if a client requests a search with the parameter _summary=true.
   */
  isSummary?: boolean | undefined;
  _isSummary?: Element | undefined;
  /**
   * The text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * Identifies a concept from an external specification that roughly corresponds to this element.
   */
  mapping?: ElementDefinitionMapping[] | undefined;
  /**
   * The maximum number of times this element is permitted to appear in the instance.
   */
  max?: string | undefined;
  _max?: Element | undefined;
  /**
   * Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
   */
  maxLength?: number | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueAddress?: Address | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueAnnotation?: Annotation | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueAttachment?: Attachment | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueString?: string | undefined;
  _maxValueString?: Element | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueBoolean?: boolean | undefined;
  _maxValueBoolean?: Element | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueCoding?: Coding | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueContactPoint?: ContactPoint | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueNumber?: number | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueHumanName?: HumanName | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueIdentifier?: Identifier | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueMeta?: Meta | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValuePeriod?: Period | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueQuantity?: Quantity | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueRange?: Range | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueRatio?: Ratio | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueReference?: Reference | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueSampledData?: SampledData | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueSignature?: Signature | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  maxValueTiming?: Timing | undefined;
  /**
   * The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'.
   */
  meaningWhenMissing?: string | undefined;
  _meaningWhenMissing?: Element | undefined;
  /**
   * The minimum number of times this element SHALL appear in the instance.
   */
  min?: number | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueAddress?: Address | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueAnnotation?: Annotation | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueAttachment?: Attachment | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueString?: string | undefined;
  _minValueString?: Element | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueBoolean?: boolean | undefined;
  _minValueBoolean?: Element | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueCoding?: Coding | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueContactPoint?: ContactPoint | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueNumber?: number | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueHumanName?: HumanName | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueIdentifier?: Identifier | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueMeta?: Meta | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValuePeriod?: Period | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueQuantity?: Quantity | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueRange?: Range | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueRatio?: Ratio | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueReference?: Reference | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueSampledData?: SampledData | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueSignature?: Signature | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   */
  minValueTiming?: Timing | undefined;
  /**
   * If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported.
   */
  mustSupport?: boolean | undefined;
  _mustSupport?: Element | undefined;
  /**
   * The name of this element definition (to refer to it from other element definitions using ElementDefinition.nameReference). This is a unique name referring to a specific set of constraints applied to this element. One use of this is to provide a name to different slices of the same element.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Identifies the name of a slice defined elsewhere in the profile whose constraints should be applied to the current element.
   */
  nameReference?: string | undefined;
  _nameReference?: Element | undefined;
  /**
   * The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
   */
  path: string;
  _path?: Element | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternAddress?: Address | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternAnnotation?: Annotation | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternAttachment?: Attachment | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternString?: string | undefined;
  _patternString?: Element | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternBoolean?: boolean | undefined;
  _patternBoolean?: Element | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternCoding?: Coding | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternContactPoint?: ContactPoint | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternNumber?: number | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternHumanName?: HumanName | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternIdentifier?: Identifier | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternMeta?: Meta | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternPeriod?: Period | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternQuantity?: Quantity | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternRange?: Range | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternRatio?: Ratio | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternReference?: Reference | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternSampledData?: SampledData | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternSignature?: Signature | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   */
  patternTiming?: Timing | undefined;
  /**
   * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
   */
  representation?: ('xmlAttr')[] | undefined;
  _representation?: Element[] | undefined;
  /**
   * This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
   */
  requirements?: string | undefined;
  _requirements?: Element | undefined;
  /**
   * A concise description of what this element means (e.g. for use in autogenerated summaries).
   */
  short?: string | undefined;
  _short?: Element | undefined;
  /**
   * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
   */
  slicing?: ElementDefinitionSlicing | undefined;
  /**
   * The data type or resource that the value of this element is permitted to be.
   */
  type?: ElementDefinitionType[] | undefined;
}
export interface Extension extends Element {
  /**
   * Source of the definition for the extension code - a logical name or a URL.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueAddress?: Address | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueAttachment?: Attachment | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueCoding?: Coding | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueNumber?: number | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueHumanName?: HumanName | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueMeta?: Meta | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valuePeriod?: Period | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueRange?: Range | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueRatio?: Ratio | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueReference?: Reference | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueSampledData?: SampledData | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueSignature?: Signature | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueTiming?: Timing | undefined;
}
export interface HumanName extends Element {
  /**
   * The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
   */
  family?: string[] | undefined;
  _family?: Element[] | undefined;
  /**
   * Given name.
   */
  given?: string[] | undefined;
  _given?: Element[] | undefined;
  /**
   * Indicates the period of time when this name was valid for the named person.
   */
  period?: Period | undefined;
  /**
   * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
   */
  prefix?: string[] | undefined;
  _prefix?: Element[] | undefined;
  /**
   * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
   */
  suffix?: string[] | undefined;
  _suffix?: Element[] | undefined;
  /**
   * A full text representation of the name.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * Identifies the purpose for this name.
   */
  use?: ('usual'|'official'|'temp'|'nickname'|'anonymous'|'old'|'maiden') | undefined;
  _use?: Element | undefined;
}
export interface Identifier extends Element {
  /**
   * Organization that issued/manages the identifier.
   */
  assigner?: Reference | undefined;
  /**
   * Time period during which identifier is/was valid for use.
   */
  period?: Period | undefined;
  /**
   * Establishes the namespace in which set of possible id values is unique.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
   */
  type?: CodeableConcept | undefined;
  /**
   * The purpose of this identifier.
   */
  use?: ('usual'|'official'|'temp'|'secondary') | undefined;
  _use?: Element | undefined;
  /**
   * The portion of the identifier typically displayed to the user and which is unique within the context of the system.
   */
  value?: string | undefined;
  _value?: Element | undefined;
}
export interface Meta extends Element {
  /**
   * When the resource last changed - e.g. when the version changed.
   */
  lastUpdated?: string | undefined;
  _lastUpdated?: Element | undefined;
  /**
   * A list of profiles [[[StructureDefinition]]]s that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].
   */
  profile?: string[] | undefined;
  _profile?: Element[] | undefined;
  /**
   * Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
   */
  security?: Coding[] | undefined;
  /**
   * Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.
   */
  tag?: Coding[] | undefined;
  /**
   * The version specific identifier, as it appears in the version portion of the URL. This values changes when the resource is created, updated, or deleted.
   */
  versionId?: string | undefined;
  _versionId?: Element | undefined;
}
export interface Money {
}
export interface Narrative extends Element {
  /**
   * The actual narrative content, a stripped down version of XHTML.
   */
  div: string;
  _div?: Element | undefined;
  /**
   * The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
   */
  status: ('generated'|'extensions'|'additional'|'empty');
  _status?: Element | undefined;
}
export interface Period extends Element {
  /**
   * The end of the period. If the end of the period is missing, it means that the period is ongoing. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
   */
  end?: string | undefined;
  _end?: Element | undefined;
  /**
   * The start of the period. The boundary is inclusive.
   */
  start?: string | undefined;
  _start?: Element | undefined;
}
export interface Quantity extends Element {
  /**
   * A computer processable form of the unit in some unit representation system.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
   */
  comparator?: ('<'|'<='|'>='|'>') | undefined;
  _comparator?: Element | undefined;
  /**
   * The identification of the system that provides the coded form of the unit.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * A human-readable form of the unit.
   */
  unit?: string | undefined;
  _unit?: Element | undefined;
  /**
   * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
   */
  value?: number | undefined;
}
export interface Range extends Element {
  /**
   * The high limit. The boundary is inclusive.
   */
  high?: Quantity | undefined;
  /**
   * The low limit. The boundary is inclusive.
   */
  low?: Quantity | undefined;
}
export interface Ratio extends Element {
  /**
   * The value of the denominator.
   */
  denominator?: Quantity | undefined;
  /**
   * The value of the numerator.
   */
  numerator?: Quantity | undefined;
}
export interface Reference extends Element {
  /**
   * Plain text narrative that identifies the resource in addition to the resource reference.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
   */
  reference?: string | undefined;
  _reference?: Element | undefined;
}
export interface SampledData extends Element {
  /**
   * A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
   */
  data: string;
  _data?: Element | undefined;
  /**
   * The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
   */
  dimensions: number;
  /**
   * A correction factor that is applied to the sampled data points before they are added to the origin.
   */
  factor?: number | undefined;
  /**
   * The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
   */
  lowerLimit?: number | undefined;
  /**
   * The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
   */
  origin: Quantity;
  /**
   * The length of time between sampling times, measured in milliseconds.
   */
  period: number;
  /**
   * The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
   */
  upperLimit?: number | undefined;
}
export interface Signature extends Element {
  /**
   * The base64 encoding of the Signature content.
   */
  blob: string;
  _blob?: Element | undefined;
  /**
   * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jwt for JWT, and image/* for a graphical image of a signature.
   */
  contentType: string;
  _contentType?: Element | undefined;
  /**
   * An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
   */
  type: Coding[];
  /**
   * When the digital signature was signed.
   */
  when: string;
  _when?: Element | undefined;
  /**
   * A reference to an application-usable description of the person that signed the certificate (e.g. the signature used their private key).
   */
  whoReference?: Reference | undefined;
  /**
   * A reference to an application-usable description of the person that signed the certificate (e.g. the signature used their private key).
   */
  whoString?: string | undefined;
  _whoString?: Element | undefined;
}
export interface SimpleQuantity {
}
/**
 * When the event is to occur
 */
export interface TimingRepeat extends Element {
  /**
   * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
   */
  boundsPeriod?: Period | undefined;
  /**
   * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
   */
  boundsQuantity?: Quantity | undefined;
  /**
   * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
   */
  boundsRange?: Range | undefined;
  /**
   * A total count of the desired number of repetitions.
   */
  count?: number | undefined;
  /**
   * How long this thing happens for when it happens.
   */
  duration?: number | undefined;
  /**
   * The upper limit of how long this thing happens for when it happens.
   */
  durationMax?: number | undefined;
  /**
   * The units of time for the duration, in UCUM units.
   */
  durationUnits?: ('s'|'min'|'h'|'d'|'wk'|'mo'|'a') | undefined;
  _durationUnits?: Element | undefined;
  /**
   * The number of times to repeat the action within the specified period / period range (i.e. both period and periodMax provided).
   */
  frequency?: number | undefined;
  /**
   * If present, indicates that the frequency is a range - so repeat between [frequency] and [frequencyMax] times within the period or period range.
   */
  frequencyMax?: number | undefined;
  /**
   * Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period.
   */
  period?: number | undefined;
  /**
   * If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
   */
  periodMax?: number | undefined;
  /**
   * The units of time for the period in UCUM units.
   */
  periodUnits?: ('s'|'min'|'h'|'d'|'wk'|'mo'|'a') | undefined;
  _periodUnits?: Element | undefined;
  /**
   * A real world event that the occurrence of the event should be tied to.
   */
  when?: ('HS'|'WAKE'|'C'|'CM'|'CD'|'CV'|'AC'|'ACM'|'ACD'|'ACV'|'PC'|'PCM'|'PCD'|'PCV') | undefined;
  _when?: Element | undefined;
}
export interface Timing extends Element {
  /**
   * A code for the timing pattern. Some codes such as BID are ubiquitous, but many institutions define their own additional codes.
   */
  code?: CodeableConcept | undefined;
  /**
   * Identifies specific times when the event occurs.
   */
  event?: string[] | undefined;
  _event?: Element[] | undefined;
  /**
   * A set of rules that describe when the event should occur.
   */
  repeat?: TimingRepeat | undefined;
}
export interface Account extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Account';
  /**
   * Indicates the period of time over which the account is allowed.
   */
  activePeriod?: Period | undefined;
  /**
   * Represents the sum of all credits less all debits associated with the account.  Might be positive, zero or negative.
   */
  balance?: Quantity | undefined;
  /**
   * Identifies the period of time the account applies to; e.g. accounts created per fiscal year, quarter, etc.
   */
  coveragePeriod?: Period | undefined;
  /**
   * Identifies the currency to which transactions must be converted when crediting or debiting the account.
   */
  currency?: Coding | undefined;
  /**
   * Provides additional information about what the account tracks and how it is used.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Unique identifier used to reference the account.  May or may not be intended for human use (e.g. credit card number).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Name used for the account when displaying it to humans in reports, etc.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Indicates the organization, department, etc. with responsibility for the account.
   */
  owner?: Reference | undefined;
  /**
   * Indicates whether the account is presently used/useable or not.
   */
  status?: string | undefined;
  _status?: Element | undefined;
  /**
   * Identifies the patient, device, practitioner, location or other object the account is associated with.
   */
  subject?: Reference | undefined;
  /**
   * Categorizes the account for reporting and searching purposes.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Adverse Reaction Events linked to exposure to substance
 */
export interface AllergyIntoleranceReaction extends BackboneElement {
  /**
   * Statement about the degree of clinical certainty that the specific substance was the cause of the manifestation in this reaction event.
   */
  certainty?: ('unlikely'|'likely'|'confirmed') | undefined;
  _certainty?: Element | undefined;
  /**
   * Text description about the reaction as a whole, including details of the manifestation if required.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Identification of the route by which the subject was exposed to the substance.
   */
  exposureRoute?: CodeableConcept | undefined;
  /**
   * Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
   */
  manifestation: CodeableConcept[];
  /**
   * Additional text about the adverse reaction event not captured in other fields.
   */
  note?: Annotation | undefined;
  /**
   * Record of the date and/or time of the onset of the Reaction.
   */
  onset?: string | undefined;
  _onset?: Element | undefined;
  /**
   * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
   */
  severity?: ('mild'|'moderate'|'severe') | undefined;
  _severity?: Element | undefined;
  /**
   * Identification of the specific substance considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different to the substance identified as the cause of the risk, but must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite substance that includes the identified substance. It must be clinically safe to only process the AllergyIntolerance.substance and ignore the AllergyIntolerance.event.substance.
   */
  substance?: CodeableConcept | undefined;
}
export interface AllergyIntolerance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AllergyIntolerance';
  /**
   * Category of the identified Substance.
   */
  category?: ('food'|'medication'|'environment'|'other') | undefined;
  _category?: Element | undefined;
  /**
   * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified Substance.
   */
  criticality?: ('CRITL'|'CRITH'|'CRITU') | undefined;
  _criticality?: Element | undefined;
  /**
   * This records identifiers associated with this allergy/intolerance concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Represents the date and/or time of the last known occurrence of a reaction event.
   */
  lastOccurence?: string | undefined;
  _lastOccurence?: Element | undefined;
  /**
   * Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
   */
  note?: Annotation | undefined;
  /**
   * Record of the date and/or time of the onset of the Allergy or Intolerance.
   */
  onset?: string | undefined;
  _onset?: Element | undefined;
  /**
   * The patient who has the allergy or intolerance.
   */
  patient: Reference;
  /**
   * Details about each adverse reaction event linked to exposure to the identified Substance.
   */
  reaction?: AllergyIntoleranceReaction[] | undefined;
  /**
   * Date when the sensitivity was recorded.
   */
  recordedDate?: string | undefined;
  _recordedDate?: Element | undefined;
  /**
   * Individual who recorded the record and takes responsibility for its conten.
   */
  recorder?: Reference | undefined;
  /**
   * The source of the information about the allergy that is recorded.
   */
  reporter?: Reference | undefined;
  /**
   * Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified Substance.
   */
  status?: ('active'|'unconfirmed'|'confirmed'|'inactive'|'resolved'|'refuted'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * Identification of a substance, or a class of substances, that is considered to be responsible for the adverse reaction risk.
   */
  substance: CodeableConcept;
  /**
   * Identification of the underlying physiological mechanism for the reaction risk.
   */
  type?: ('allergy'|'intolerance') | undefined;
  _type?: Element | undefined;
}
/**
 * Participants involved in appointment
 */
export interface AppointmentParticipant extends BackboneElement {
  /**
   * A Person, Location/HealthcareService or Device that is participating in the appointment.
   */
  actor?: Reference | undefined;
  /**
   * Is this participant required to be present at the meeting. This covers a use-case where 2 doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.
   */
  required?: ('required'|'optional'|'information-only') | undefined;
  _required?: Element | undefined;
  /**
   * Participation status of the Patient.
   */
  status: ('accepted'|'declined'|'tentative'|'needs-action');
  _status?: Element | undefined;
  /**
   * Role of participant in the appointment.
   */
  type?: CodeableConcept[] | undefined;
}
export interface Appointment extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Appointment';
  /**
   * Additional comments about the appointment.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Date/Time that the appointment is to conclude.
   */
  end?: string | undefined;
  _end?: Element | undefined;
  /**
   * This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Number of minutes that the appointment is to take. This can be less than the duration between the start and end times (where actual time of appointment is only an estimate or is a planned appointment request).
   */
  minutesDuration?: number | undefined;
  /**
   * List of participants involved in the appointment.
   */
  participant: AppointmentParticipant[];
  /**
   * The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).
   */
  priority?: number | undefined;
  /**
   * The reason that this appointment is being scheduled. This is more clinical than administrative.
   */
  reason?: CodeableConcept | undefined;
  /**
   * The slot that this appointment is filling. If provided then the schedule will not be provided as slots are not recursive, and the start/end values MUST be the same as from the slot.
   */
  slot?: Reference[] | undefined;
  /**
   * Date/Time that the appointment is to take place.
   */
  start?: string | undefined;
  _start?: Element | undefined;
  /**
   * The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
   */
  status: ('proposed'|'pending'|'booked'|'arrived'|'fulfilled'|'cancelled'|'noshow');
  _status?: Element | undefined;
  /**
   * The type of appointment that is being booked (This may also be associated with participants for location, and/or a HealthcareService).
   */
  type?: CodeableConcept | undefined;
}
export interface AppointmentResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AppointmentResponse';
  /**
   * A Person, Location/HealthcareService or Device that is participating in the appointment.
   */
  actor?: Reference | undefined;
  /**
   * Appointment that this response is replying to.
   */
  appointment: Reference;
  /**
   * Additional comments about the appointment.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
   */
  end?: string | undefined;
  _end?: Element | undefined;
  /**
   * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
   */
  participantStatus: ('accepted'|'declined'|'tentative'|'in-process'|'completed'|'needs-action');
  _participantStatus?: Element | undefined;
  /**
   * Role of participant in the appointment.
   */
  participantType?: CodeableConcept[] | undefined;
  /**
   * Date/Time that the appointment is to take place, or requested new start time.
   */
  start?: string | undefined;
  _start?: Element | undefined;
}
/**
 * What was done
 */
export interface AuditEventEvent extends BackboneElement {
  /**
   * Indicator for type of action performed during the event that generated the audit.
   */
  action?: ('C'|'R'|'U'|'D'|'E') | undefined;
  _action?: Element | undefined;
  /**
   * The time when the event occurred on the source.
   */
  dateTime: string;
  _dateTime?: Element | undefined;
  /**
   * Indicates whether the event succeeded or failed.
   */
  outcome?: ('0'|'4'|'8'|'12') | undefined;
  _outcome?: Element | undefined;
  /**
   * A free text description of the outcome of the event.
   */
  outcomeDesc?: string | undefined;
  _outcomeDesc?: Element | undefined;
  /**
   * The purposeOfUse (reason) that was used during the event being recorded.
   */
  purposeOfEvent?: Coding[] | undefined;
  /**
   * Identifier for the category of event.
   */
  subtype?: Coding[] | undefined;
  /**
   * Identifier for a family of the event.  For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function.
   */
  type: Coding;
}
/**
 * Additional Information about the Object
 */
export interface AuditEventObjectDetail extends BackboneElement {
  /**
   * Name of the property.
   */
  type: string;
  _type?: Element | undefined;
  /**
   * Property value.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Specific instances of data or objects that have been accessed
 */
export interface AuditEventObject extends BackboneElement {
  /**
   * Text that describes the object in more detail.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Additional Information about the Object.
   */
  detail?: AuditEventObjectDetail[] | undefined;
  /**
   * Identifies a specific instance of the participant object. The reference should always be version specific.
   */
  identifier?: Identifier | undefined;
  /**
   * Identifier for the data life-cycle stage for the participant object.
   */
  lifecycle?: Coding | undefined;
  /**
   * An instance-specific descriptor of the Participant Object ID audited, such as a person's name.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The actual query for a query-type participant object.
   */
  query?: string | undefined;
  _query?: Element | undefined;
  /**
   * Identifies a specific instance of the participant object. The reference should always be version specific.
   */
  reference?: Reference | undefined;
  /**
   * Code representing the functional application role of Participant Object being audited.
   */
  role?: Coding | undefined;
  /**
   * Denotes security labels for the identified object.
   */
  securityLabel?: Coding[] | undefined;
  /**
   * The type of the object that was involved in this audit event.
   */
  type?: Coding | undefined;
}
/**
 * Logical network location for application activity
 */
export interface AuditEventParticipantNetwork extends BackboneElement {
  /**
   * An identifier for the network access point of the user device for the audit event.
   */
  address?: string | undefined;
  _address?: Element | undefined;
  /**
   * An identifier for the type of network access point that originated the audit event.
   */
  type?: ('1'|'2'|'3'|'4'|'5') | undefined;
  _type?: Element | undefined;
}
/**
 * A person, a hardware device or software process
 */
export interface AuditEventParticipant extends BackboneElement {
  /**
   * Alternative Participant Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign-on), if available.
   */
  altId?: string | undefined;
  _altId?: Element | undefined;
  /**
   * Where the event occurred.
   */
  location?: Reference | undefined;
  /**
   * Type of media involved. Used when the event is about exporting/importing onto media.
   */
  media?: Coding | undefined;
  /**
   * Human-meaningful name for the user.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Logical network location for application activity, if the activity has a network location.
   */
  network?: AuditEventParticipantNetwork | undefined;
  /**
   * The policy or plan that authorized the activity being recorded. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.
   */
  policy?: string[] | undefined;
  _policy?: Element[] | undefined;
  /**
   * The reason (purpose of use), specific to this participant, that was used during the event being recorded.
   */
  purposeOfUse?: Coding[] | undefined;
  /**
   * Direct reference to a resource that identifies the participant.
   */
  reference?: Reference | undefined;
  /**
   * Indicator that the user is or is not the requestor, or initiator, for the event being audited.
   */
  requestor: boolean;
  _requestor?: Element | undefined;
  /**
   * Specification of the role(s) the user plays when performing the event. Usually the codes used in this element are local codes defined by the role-based access control security system used in the local context.
   */
  role?: CodeableConcept[] | undefined;
  /**
   * Unique identifier for the user actively participating in the event.
   */
  userId?: Identifier | undefined;
}
/**
 * Application systems and processes
 */
export interface AuditEventSource extends BackboneElement {
  /**
   * Identifier of the source where the event was detected.
   */
  identifier: Identifier;
  /**
   * Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.
   */
  site?: string | undefined;
  _site?: Element | undefined;
  /**
   * Code specifying the type of source where event originated.
   */
  type?: Coding[] | undefined;
}
export interface AuditEvent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AuditEvent';
  /**
   * Identifies the name, action type, time, and disposition of the audited event.
   */
  event: AuditEventEvent;
  /**
   * Specific instances of data or objects that have been accessed.
   */
  object?: AuditEventObject[] | undefined;
  /**
   * A person, a hardware device or software process.
   */
  participant: AuditEventParticipant[];
  /**
   * Application systems and processes.
   */
  source: AuditEventSource;
}
export interface Basic extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Basic';
  /**
   * Indicates who was responsible for creating the resource instance.
   */
  author?: Reference | undefined;
  /**
   * Identifies the 'type' of resource - equivalent to the resource name for other resources.
   */
  code: CodeableConcept;
  /**
   * Identifies when the resource was first created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * Identifier assigned to the resource for business purposes, outside the context of FHIR.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource.
   */
  subject?: Reference | undefined;
}
export interface Binary extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Binary';
  /**
   * The actual content, base64 encoded.
   */
  content: string;
  _content?: Element | undefined;
  /**
   * MimeType of the binary content represented as a standard MimeType (BCP 13).
   */
  contentType: string;
  _contentType?: Element | undefined;
}
export interface BodySite extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'BodySite';
  /**
   * Named anatomical location - ideally coded where possible.
   */
  code?: CodeableConcept | undefined;
  /**
   * Description of anatomical location.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Identifier for this instance of the anatomical location.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Image or images used to identify a location.
   */
  image?: Attachment[] | undefined;
  /**
   * Modifier to refine the anatomical location.  These include modifiers for laterality, relative location, directionality, number, and plane.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The person to which the body site belongs.
   */
  patient: Reference;
}
/**
 * Transaction Related Information
 */
export interface BundleEntryRequest extends BackboneElement {
  /**
   * Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency).
   */
  ifMatch?: string | undefined;
  _ifMatch?: Element | undefined;
  /**
   * Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread).
   */
  ifModifiedSince?: string | undefined;
  _ifModifiedSince?: Element | undefined;
  /**
   * Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL - what follows the "?" (not including the "?").
   */
  ifNoneExist?: string | undefined;
  _ifNoneExist?: Element | undefined;
  /**
   * If the ETag values match, return a 304 Not modified status. See the API documentation for ["Conditional Read"](http.html#cread).
   */
  ifNoneMatch?: string | undefined;
  _ifNoneMatch?: Element | undefined;
  /**
   * The HTTP verb for this entry in either a update history, or a transaction/ transaction response.
   */
  method: ('GET'|'POST'|'PUT'|'DELETE');
  _method?: Element | undefined;
  /**
   * The URL for this entry, relative to the root (the address to which the request is posted).
   */
  url: string;
  _url?: Element | undefined;
}
/**
 * Transaction Related Information
 */
export interface BundleEntryResponse extends BackboneElement {
  /**
   * The etag for the resource, it the operation for the entry produced a versioned resource.
   */
  etag?: string | undefined;
  _etag?: Element | undefined;
  /**
   * The date/time that the resource was modified on the server.
   */
  lastModified?: string | undefined;
  _lastModified?: Element | undefined;
  /**
   * The location header created by processing this operation.
   */
  location?: string | undefined;
  _location?: Element | undefined;
  /**
   * The status code returned by processing this entry.
   */
  status: string;
  _status?: Element | undefined;
}
/**
 * Search related information
 */
export interface BundleEntrySearch extends BackboneElement {
  /**
   * Why this entry is in the result set - whether it's included as a match or because of an _include requirement.
   */
  mode?: ('match'|'include'|'outcome') | undefined;
  _mode?: Element | undefined;
  /**
   * When searching, the server's search ranking score for the entry.
   */
  score?: number | undefined;
}
/**
 * Entry in the bundle - will have a resource, or information
 */
export interface BundleEntry<BundleContentType = FhirResource> extends BackboneElement {
  /**
   * The Absolute URL for the resource. This must be provided for all resources. The fullUrl SHALL not disagree with the id in the resource. The fullUrl is a version independent reference to the resource.
   */
  fullUrl?: string | undefined;
  _fullUrl?: Element | undefined;
  /**
   * A series of links that provide context to this entry.
   */
  link?: BundleLink[] | undefined;
  /**
   * Additional information about how this entry should be processed as part of a transaction.
   */
  request?: BundleEntryRequest | undefined;
  /**
   * The Resources for the entry.
   */
  resource?: BundleContentType | undefined;
  /**
   * Additional information about how this entry should be processed as part of a transaction.
   */
  response?: BundleEntryResponse | undefined;
  /**
   * Information about the search process that lead to the creation of this entry.
   */
  search?: BundleEntrySearch | undefined;
}
/**
 * Links related to this Bundle
 */
export interface BundleLink extends BackboneElement {
  /**
   * A name which details the functional use for this link - see [[http://www.iana.org/assignments/link-relations/link-relations.xhtml]].
   */
  relation: string;
  _relation?: Element | undefined;
  /**
   * The reference details for the link.
   */
  url: string;
  _url?: Element | undefined;
}
export interface Bundle<BundleContentType = FhirResource> extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Bundle';
  /**
   * An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).
   */
  entry?: BundleEntry<BundleContentType>[] | undefined;
  /**
   * A series of links that provide context to this bundle.
   */
  link?: BundleLink[] | undefined;
  /**
   * Digital Signature - base64 encoded. XML DigSIg or a JWT.
   */
  signature?: Signature | undefined;
  /**
   * If a set of search matches, this is the total number of matches for the search (as opposed to the number of results in this bundle).
   */
  total?: number | undefined;
  /**
   * Indicates the purpose of this bundle- how it was intended to be used.
   */
  type: ('document'|'message'|'transaction'|'transaction-response'|'batch'|'batch-response'|'history'|'searchset'|'collection');
  _type?: Element | undefined;
}
/**
 * In-line definition of activity
 */
export interface CarePlanActivityDetail extends BackboneElement {
  /**
   * High-level categorization of the type of activity in a care plan.
   */
  category?: CodeableConcept | undefined;
  /**
   * Detailed description of the type of planned activity; e.g. What lab test, what procedure, what kind of encounter.
   */
  code?: CodeableConcept | undefined;
  /**
   * Identifies the quantity expected to be consumed in a given day.
   */
  dailyAmount?: Quantity | undefined;
  /**
   * This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Internal reference that identifies the goals that this activity is intended to contribute towards meeting.
   */
  goal?: Reference[] | undefined;
  /**
   * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
   */
  location?: Reference | undefined;
  /**
   * Identifies who's expected to be involved in the activity.
   */
  performer?: Reference[] | undefined;
  /**
   * Identifies the food, drug or other product to be consumed or supplied in the activity.
   */
  productCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the food, drug or other product to be consumed or supplied in the activity.
   */
  productReference?: Reference | undefined;
  /**
   * If true, indicates that the described activity is one that must NOT be engaged in when following the plan.
   */
  prohibited: boolean;
  _prohibited?: Element | undefined;
  /**
   * Identifies the quantity expected to be supplied, administered or consumed by the subject.
   */
  quantity?: Quantity | undefined;
  /**
   * Provides the rationale that drove the inclusion of this particular activity as part of the plan.
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * Provides the health condition(s) that drove the inclusion of this particular activity as part of the plan.
   */
  reasonReference?: Reference[] | undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  scheduledPeriod?: Period | undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  scheduledString?: string | undefined;
  _scheduledString?: Element | undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  scheduledTiming?: Timing | undefined;
  /**
   * Identifies what progress is being made for the specific activity.
   */
  status?: ('not-started'|'scheduled'|'in-progress'|'on-hold'|'completed'|'cancelled') | undefined;
  _status?: Element | undefined;
  /**
   * Provides reason why the activity isn't yet started, is on hold, was cancelled, etc.
   */
  statusReason?: CodeableConcept | undefined;
}
/**
 * Action to occur as part of plan
 */
export interface CarePlanActivity extends BackboneElement {
  /**
   * Resources that describe follow-on actions resulting from the plan, such as drug prescriptions, encounter records, appointments, etc.
   */
  actionResulting?: Reference[] | undefined;
  /**
   * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
   */
  detail?: CarePlanActivityDetail | undefined;
  /**
   * Notes about the adherence/status/progress of the activity.
   */
  progress?: Annotation[] | undefined;
  /**
   * The details of the proposed activity represented in a specific resource.
   */
  reference?: Reference | undefined;
}
/**
 * Who's involved in plan?
 */
export interface CarePlanParticipant extends BackboneElement {
  /**
   * The specific person or organization who is participating/expected to participate in the care plan.
   */
  member?: Reference | undefined;
  /**
   * Indicates specific responsibility of an individual within the care plan; e.g. "Primary physician", "Team coordinator", "Caregiver", etc.
   */
  role?: CodeableConcept | undefined;
}
/**
 * Plans related to this one
 */
export interface CarePlanRelatedPlan extends BackboneElement {
  /**
   * Identifies the type of relationship this plan has to the target plan.
   */
  code?: ('includes'|'replaces'|'fulfills') | undefined;
  _code?: Element | undefined;
  /**
   * A reference to the plan to which a relationship is asserted.
   */
  plan: Reference;
}
export interface CarePlan extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CarePlan';
  /**
   * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
   */
  activity?: CarePlanActivity[] | undefined;
  /**
   * Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
   */
  addresses?: Reference[] | undefined;
  /**
   * Identifies the individual(s) or ogranization who is responsible for the content of the care plan.
   */
  author?: Reference[] | undefined;
  /**
   * Identifies what "kind" of plan this is to support differentiation between multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Identifies the context in which this particular CarePlan is defined.
   */
  context?: Reference | undefined;
  /**
   * A description of the scope and nature of the plan.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Describes the intended objective(s) of carrying out the care plan.
   */
  goal?: Reference[] | undefined;
  /**
   * This records identifiers associated with this care plan that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies the most recent date on which the plan has been revised.
   */
  modified?: string | undefined;
  _modified?: Element | undefined;
  /**
   * General notes about the care plan not covered elsewhere.
   */
  note?: Annotation | undefined;
  /**
   * Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
   */
  participant?: CarePlanParticipant[] | undefined;
  /**
   * Indicates when the plan did (or is intended to) come into effect and end.
   */
  period?: Period | undefined;
  /**
   * Identifies CarePlans with some sort of formal relationship to the current plan.
   */
  relatedPlan?: CarePlanRelatedPlan[] | undefined;
  /**
   * Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
   */
  status: ('proposed'|'draft'|'active'|'completed'|'cancelled');
  _status?: Element | undefined;
  /**
   * Identifies the patient or group whose intended care is described by the plan.
   */
  subject?: Reference | undefined;
  /**
   * Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include co-morbidities, recent procedures, limitations, recent assessments, etc.
   */
  support?: Reference[] | undefined;
}
/**
 * Insurance or medical plan
 */
export interface ClaimCoverage extends BackboneElement {
  /**
   * The contract number of a business agreement which describes the terms and conditions.
   */
  businessArrangement?: string | undefined;
  _businessArrangement?: Element | undefined;
  /**
   * The Coverages adjudication details.
   */
  claimResponse?: Reference | undefined;
  /**
   * Reference to the program or plan identification, underwriter or payor.
   */
  coverage: Reference;
  /**
   * The instance number of the Coverage which is the focus for adjudication. The Coverage against which the claim is to be adjudicated.
   */
  focal: boolean;
  _focal?: Element | undefined;
  /**
   * The style (standard) and version of the original material which was converted into this resource.
   */
  originalRuleset?: Coding | undefined;
  /**
   * A list of references from the Insurer to which these services pertain.
   */
  preAuthRef?: string[] | undefined;
  _preAuthRef?: Element[] | undefined;
  /**
   * The relationship of the patient to the subscriber.
   */
  relationship: Coding;
  /**
   * A service line item.
   */
  sequence: number;
}
/**
 * Diagnosis
 */
export interface ClaimDiagnosis extends BackboneElement {
  /**
   * The diagnosis.
   */
  diagnosis: Coding;
  /**
   * Sequence of diagnosis which serves to order and provide a link.
   */
  sequence: number;
}
/**
 * Additional items
 */
export interface ClaimItemDetailSubDetail extends BackboneElement {
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * The quantity times the unit price for an additional  service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Quantity | undefined;
  /**
   * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the good or service delivered. The concept of Points allows for assignment of point values for services and/or goods, such that a monetary amount can be assigned to each point.
   */
  points?: number | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * A service line number.
   */
  sequence: number;
  /**
   * The fee for an additional  service or product or charge.
   */
  service: Coding;
  /**
   * The type of product or service.
   */
  type: Coding;
  /**
   * List of Unique Device Identifiers associated with this line item.
   */
  udi?: Coding | undefined;
  /**
   * The fee for an additional  service or product or charge.
   */
  unitPrice?: Quantity | undefined;
}
/**
 * Additional items
 */
export interface ClaimItemDetail extends BackboneElement {
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * The quantity times the unit price for an additional  service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Quantity | undefined;
  /**
   * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the good or service delivered. The concept of Points allows for assignment of point values for services and/or goods, such that a monetary amount can be assigned to each point.
   */
  points?: number | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * A service line number.
   */
  sequence: number;
  /**
   * If a grouping item then 'GROUP' otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.
   */
  service: Coding;
  /**
   * Third tier of goods and services.
   */
  subDetail?: ClaimItemDetailSubDetail[] | undefined;
  /**
   * The type of product or service.
   */
  type: Coding;
  /**
   * List of Unique Device Identifiers associated with this line item.
   */
  udi?: Coding | undefined;
  /**
   * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
   */
  unitPrice?: Quantity | undefined;
}
/**
 * Prosthetic details
 */
export interface ClaimItemProsthesis extends BackboneElement {
  /**
   * Indicates whether this is the initial placement of a fixed prosthesis.
   */
  initial?: boolean | undefined;
  _initial?: Element | undefined;
  /**
   * Date of the initial placement.
   */
  priorDate?: string | undefined;
  _priorDate?: Element | undefined;
  /**
   * Material of the prior denture or bridge prosthesis. (Oral).
   */
  priorMaterial?: Coding | undefined;
}
/**
 * Goods and Services
 */
export interface ClaimItem extends BackboneElement {
  /**
   * Physical service site on the patient (limb, tooth, etc.).
   */
  bodySite?: Coding | undefined;
  /**
   * Second tier of goods and services.
   */
  detail?: ClaimItemDetail[] | undefined;
  /**
   * Diagnosis applicable for this service or product line.
   */
  diagnosisLinkId?: number[] | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * Item typification or modifiers codes, e.g. for Oral whether the treatment is cosmetic or associated with TMJ, or an appliance was lost or stolen.
   */
  modifier?: Coding[] | undefined;
  /**
   * The quantity times the unit price for an additional  service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Quantity | undefined;
  /**
   * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the good or service delivered. The concept of Points allows for assignment of point values for services and/or goods, such that a monetary amount can be assigned to each point.
   */
  points?: number | undefined;
  /**
   * The materials and placement date of prior fixed prosthesis.
   */
  prosthesis?: ClaimItemProsthesis | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: Reference | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * A service line number.
   */
  sequence: number;
  /**
   * If a grouping item then 'GROUP' otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.
   */
  service: Coding;
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  serviceDate?: string | undefined;
  _serviceDate?: Element | undefined;
  /**
   * A region or surface of the site, e.g. limb region or tooth surface(s).
   */
  subSite?: Coding[] | undefined;
  /**
   * The type of product or service.
   */
  type: Coding;
  /**
   * List of Unique Device Identifiers associated with this line item.
   */
  udi?: Coding | undefined;
  /**
   * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
   */
  unitPrice?: Quantity | undefined;
}
/**
 * Only if type = oral
 */
export interface ClaimMissingTeeth extends BackboneElement {
  /**
   * The date of the extraction either known from records or patient reported estimate.
   */
  extractionDate?: string | undefined;
  _extractionDate?: Element | undefined;
  /**
   * Missing reason may be: E-extraction, O-other.
   */
  reason?: Coding | undefined;
  /**
   * The code identifying which tooth is missing.
   */
  tooth: Coding;
}
/**
 * Payee
 */
export interface ClaimPayee extends BackboneElement {
  /**
   * The organization who is to be reimbursed for the claim (the party to whom any benefit is assigned).
   */
  organization?: Reference | undefined;
  /**
   * The person other than the subscriber who is to be reimbursed for the claim (the party to whom any benefit is assigned).
   */
  person?: Reference | undefined;
  /**
   * The provider who is to be reimbursed for the claim (the party to whom any benefit is assigned).
   */
  provider?: Reference | undefined;
  /**
   * Party to be reimbursed: Subscriber, provider, other.
   */
  type?: Coding | undefined;
}
export interface Claim extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Claim';
  /**
   * Date of an accident which these services are addressing.
   */
  accident?: string | undefined;
  _accident?: Element | undefined;
  /**
   * Type of accident: work, auto, etc.
   */
  accidentType?: Coding | undefined;
  /**
   * Code to indicate that Xrays, images, emails, documents, models or attachments are being sent in support of this submission.
   */
  additionalMaterials?: Coding[] | undefined;
  /**
   * List of patient conditions for which care is sought.
   */
  condition?: Coding[] | undefined;
  /**
   * Financial instrument by which payment information for health care.
   */
  coverage?: ClaimCoverage[] | undefined;
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * Ordered list of patient diagnosis for which care is sought.
   */
  diagnosis?: ClaimDiagnosis[] | undefined;
  /**
   * Person who created the invoice/claim/pre-determination or pre-authorization.
   */
  enterer?: Reference | undefined;
  /**
   * Factors which may influence the applicability of coverage.
   */
  exception?: Coding[] | undefined;
  /**
   * Facility where the services were provided.
   */
  facility?: Reference | undefined;
  /**
   * In the case of a Pre-Determination/Pre-Authorization the provider may request that funds in the amount of the expected Benefit be reserved ('Patient' or 'Provider') to pay for the Benefits determined on the subsequent claim(s). 'None' explicitly indicates no funds reserving is requested.
   */
  fundsReserve?: Coding | undefined;
  /**
   * The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A list of intervention and exception codes which may influence the adjudication of the claim.
   */
  interventionException?: Coding[] | undefined;
  /**
   * First tier of goods and services.
   */
  item?: ClaimItem[] | undefined;
  /**
   * A list of teeth which would be expected but are not found due to having been previously  extracted or for other reasons.
   */
  missingTeeth?: ClaimMissingTeeth[] | undefined;
  /**
   * The organization which is responsible for the bill, claim pre-determination, pre-authorization.
   */
  organization?: Reference | undefined;
  /**
   * Original prescription to support the dispensing of pharmacy services, medications or products.
   */
  originalPrescription?: Reference | undefined;
  /**
   * The version of the specification from which the original instance was created.
   */
  originalRuleset?: Coding | undefined;
  /**
   * Patient Resource.
   */
  patient: Reference;
  /**
   * The party to be reimbursed for the services.
   */
  payee?: ClaimPayee | undefined;
  /**
   * Prescription to support the dispensing of Pharmacy or Vision products.
   */
  prescription?: Reference | undefined;
  /**
   * Immediate (stat), best effort (normal), deferred (deferred).
   */
  priority?: Coding | undefined;
  /**
   * The provider which is responsible for the bill, claim pre-determination, pre-authorization.
   */
  provider?: Reference | undefined;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  referral?: Reference | undefined;
  /**
   * The version of the specification on which this instance relies.
   */
  ruleset?: Coding | undefined;
  /**
   * Name of school for over-aged dependents.
   */
  school?: string | undefined;
  _school?: Element | undefined;
  /**
   * Insurer Identifier, typical BIN number (6 digit).
   */
  target?: Reference | undefined;
  /**
   * The category of claim this is.
   */
  type: ('institutional'|'oral'|'pharmacy'|'professional'|'vision');
  _type?: Element | undefined;
  /**
   * Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory (Pre-determination).
   */
  use?: ('complete'|'proposed'|'exploratory'|'other') | undefined;
  _use?: Element | undefined;
}
/**
 * Added items adjudication
 */
export interface ClaimResponseAddItemAdjudication extends BackboneElement {
  /**
   * Monetary amount associated with the code.
   */
  amount?: Quantity | undefined;
  /**
   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  code: Coding;
  /**
   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
   */
  value?: number | undefined;
}
/**
 * Added items detail adjudication
 */
export interface ClaimResponseAddItemDetailAdjudication extends BackboneElement {
  /**
   * Monetary amount associated with the code.
   */
  amount?: Quantity | undefined;
  /**
   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  code: Coding;
  /**
   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
   */
  value?: number | undefined;
}
/**
 * Added items details
 */
export interface ClaimResponseAddItemDetail extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseAddItemDetailAdjudication[] | undefined;
  /**
   * The fee charged for the professional service or product..
   */
  fee?: Quantity | undefined;
  /**
   * A code to indicate the Professional Service or Product supplied.
   */
  service: Coding;
}
/**
 * Insurer added line items
 */
export interface ClaimResponseAddItem extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseAddItemAdjudication[] | undefined;
  /**
   * The second tier service adjudications for payor added services.
   */
  detail?: ClaimResponseAddItemDetail[] | undefined;
  /**
   * The fee charged for the professional service or product..
   */
  fee?: Quantity | undefined;
  /**
   * A list of note references to the notes provided below.
   */
  noteNumberLinkId?: number[] | undefined;
  /**
   * List of input service items which this service line is intended to replace.
   */
  sequenceLinkId?: number[] | undefined;
  /**
   * A code to indicate the Professional Service or Product supplied.
   */
  service: Coding;
}
/**
 * Insurance or medical plan
 */
export interface ClaimResponseCoverage extends BackboneElement {
  /**
   * The contract number of a business agreement which describes the terms and conditions.
   */
  businessArrangement?: string | undefined;
  _businessArrangement?: Element | undefined;
  /**
   * The Coverages adjudication details.
   */
  claimResponse?: Reference | undefined;
  /**
   * Reference to the program or plan identification, underwriter or payor.
   */
  coverage: Reference;
  /**
   * The instance number of the Coverage which is the focus for adjudication. The Coverage against which the claim is to be adjudicated.
   */
  focal: boolean;
  _focal?: Element | undefined;
  /**
   * The style (standard) and version of the original material which was converted into this resource.
   */
  originalRuleset?: Coding | undefined;
  /**
   * A list of references from the Insurer to which these services pertain.
   */
  preAuthRef?: string[] | undefined;
  _preAuthRef?: Element[] | undefined;
  /**
   * The relationship of the patient to the subscriber.
   */
  relationship: Coding;
  /**
   * A service line item.
   */
  sequence: number;
}
/**
 * Processing errors
 */
export interface ClaimResponseError extends BackboneElement {
  /**
   * An error code,froma specified code system, which details why the claim could not be adjudicated.
   */
  code: Coding;
  /**
   * The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
   */
  detailSequenceLinkId?: number | undefined;
  /**
   * The sequence number of the line item submitted which contains the error. This value is omitted when the error is elsewhere.
   */
  sequenceLinkId?: number | undefined;
  /**
   * The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
   */
  subdetailSequenceLinkId?: number | undefined;
}
/**
 * Adjudication details
 */
export interface ClaimResponseItemAdjudication extends BackboneElement {
  /**
   * Monetary amount associated with the code.
   */
  amount?: Quantity | undefined;
  /**
   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  code: Coding;
  /**
   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
   */
  value?: number | undefined;
}
/**
 * Detail adjudication
 */
export interface ClaimResponseItemDetailAdjudication extends BackboneElement {
  /**
   * Monetary amount associated with the code.
   */
  amount?: Quantity | undefined;
  /**
   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  code: Coding;
  /**
   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
   */
  value?: number | undefined;
}
/**
 * Subdetail adjudication
 */
export interface ClaimResponseItemDetailSubDetailAdjudication extends BackboneElement {
  /**
   * Monetary amount associated with the code.
   */
  amount?: Quantity | undefined;
  /**
   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  code: Coding;
  /**
   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
   */
  value?: number | undefined;
}
/**
 * Subdetail line items
 */
export interface ClaimResponseItemDetailSubDetail extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseItemDetailSubDetailAdjudication[] | undefined;
  /**
   * A service line number.
   */
  sequenceLinkId: number;
}
/**
 * Detail line items
 */
export interface ClaimResponseItemDetail extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseItemDetailAdjudication[] | undefined;
  /**
   * A service line number.
   */
  sequenceLinkId: number;
  /**
   * The third tier service adjudications for submitted services.
   */
  subDetail?: ClaimResponseItemDetailSubDetail[] | undefined;
}
/**
 * Line items
 */
export interface ClaimResponseItem extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseItemAdjudication[] | undefined;
  /**
   * The second tier service adjudications for submitted services.
   */
  detail?: ClaimResponseItemDetail[] | undefined;
  /**
   * A list of note references to the notes provided below.
   */
  noteNumber?: number[] | undefined;
  /**
   * A service line number.
   */
  sequenceLinkId: number;
}
/**
 * Processing notes
 */
export interface ClaimResponseNote extends BackboneElement {
  /**
   * An integer associated with each note which may be referred to from each service line item.
   */
  number?: number | undefined;
  /**
   * The note text.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The note purpose: Print/Display.
   */
  type?: Coding | undefined;
}
export interface ClaimResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ClaimResponse';
  /**
   * The first tier service adjudications for payor added services.
   */
  addItem?: ClaimResponseAddItem[] | undefined;
  /**
   * Financial instrument by which payment information for health care.
   */
  coverage?: ClaimResponseCoverage[] | undefined;
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * Mutually exclusive with Services Provided (Item).
   */
  error?: ClaimResponseError[] | undefined;
  /**
   * The form to be used for printing the content.
   */
  form?: Coding | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The first tier service adjudications for submitted services.
   */
  item?: ClaimResponseItem[] | undefined;
  /**
   * Note text.
   */
  note?: ClaimResponseNote[] | undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: Reference | undefined;
  /**
   * The style (standard) and version of the original material which was converted into this resource.
   */
  originalRuleset?: Coding | undefined;
  /**
   * Transaction status: error, complete.
   */
  outcome?: ('complete'|'error') | undefined;
  _outcome?: Element | undefined;
  /**
   * Party to be reimbursed: Subscriber, provider, other.
   */
  payeeType?: Coding | undefined;
  /**
   * Adjustment to the payment of this transaction which is not related to adjudication of this transaction.
   */
  paymentAdjustment?: Quantity | undefined;
  /**
   * Reason for the payment adjustment.
   */
  paymentAdjustmentReason?: Coding | undefined;
  /**
   * Payable less any payment adjustment.
   */
  paymentAmount?: Quantity | undefined;
  /**
   * Estimated payment data.
   */
  paymentDate?: string | undefined;
  _paymentDate?: Element | undefined;
  /**
   * Payment identifier.
   */
  paymentRef?: Identifier | undefined;
  /**
   * Original request resource referrence.
   */
  request?: Reference | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference | undefined;
  /**
   * Status of funds reservation (For provider, for Patient, None).
   */
  reserved?: Coding | undefined;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding | undefined;
  /**
   * Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductible).
   */
  totalBenefit?: Quantity | undefined;
  /**
   * The total cost of the services reported.
   */
  totalCost?: Quantity | undefined;
  /**
   * The amount of deductible applied which was not allocated to any particular service line.
   */
  unallocDeductable?: Quantity | undefined;
}
/**
 * Possible or likely findings and diagnoses
 */
export interface ClinicalImpressionFinding extends BackboneElement {
  /**
   * Which investigations support finding or diagnosis.
   */
  cause?: string | undefined;
  _cause?: Element | undefined;
  /**
   * Specific text of code for finding or diagnosis.
   */
  item: CodeableConcept;
}
/**
 * One or more sets of investigations (signs, symptions, etc.)
 */
export interface ClinicalImpressionInvestigations extends BackboneElement {
  /**
   * A name/code for the group ("set") of investigations. Typically, this will be something like "signs", "symptoms", "clinical", "diagnostic", but the list is not constrained, and others such groups such as (exposure|family|travel|nutitirional) history may be used.
   */
  code: CodeableConcept;
  /**
   * A record of a specific investigation that was undertaken.
   */
  item?: Reference[] | undefined;
}
/**
 * Diagnosis considered not possible
 */
export interface ClinicalImpressionRuledOut extends BackboneElement {
  /**
   * Specific text of code for diagnosis.
   */
  item: CodeableConcept;
  /**
   * Grounds for elimination.
   */
  reason?: string | undefined;
  _reason?: Element | undefined;
}
export interface ClinicalImpression extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ClinicalImpression';
  /**
   * Actions taken during assessment.
   */
  action?: Reference[] | undefined;
  /**
   * The clinician performing the assessment.
   */
  assessor?: Reference | undefined;
  /**
   * The point in time at which the assessment was concluded (not when it was recorded).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A summary of the context and/or cause of the assessment - why / where was it peformed, and what patient events/sstatus prompted it.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Specific findings or diagnoses that was considered likely or relevant to ongoing treatment.
   */
  finding?: ClinicalImpressionFinding[] | undefined;
  /**
   * One or more sets of investigations (signs, symptions, etc.). The actual grouping of investigations vary greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
   */
  investigations?: ClinicalImpressionInvestigations[] | undefined;
  /**
   * The patient being assessed.
   */
  patient: Reference;
  /**
   * Plan of action after assessment.
   */
  plan?: Reference[] | undefined;
  /**
   * A reference to the last assesment that was conducted bon this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes.
   */
  previous?: Reference | undefined;
  /**
   * This a list of the general problems/conditions for a patient.
   */
  problem?: Reference[] | undefined;
  /**
   * Estimate of likely outcome.
   */
  prognosis?: string | undefined;
  _prognosis?: Element | undefined;
  /**
   * Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.
   */
  protocol?: string | undefined;
  _protocol?: Element | undefined;
  /**
   * Diagnoses/conditions resolved since the last assessment.
   */
  resolved?: CodeableConcept[] | undefined;
  /**
   * Diagnosis considered not possible.
   */
  ruledOut?: ClinicalImpressionRuledOut[] | undefined;
  /**
   * Identifies the workflow status of the assessment.
   */
  status: ('in-progress'|'completed'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * A text summary of the investigations and the diagnosis.
   */
  summary?: string | undefined;
  _summary?: Element | undefined;
  /**
   * The request or event that necessitated this assessment. This may be a diagnosis, a Care Plan, a Request Referral, or some other resource.
   */
  triggerCodeableConcept?: CodeableConcept | undefined;
  /**
   * The request or event that necessitated this assessment. This may be a diagnosis, a Care Plan, a Request Referral, or some other resource.
   */
  triggerReference?: Reference | undefined;
}
/**
 * Message payload
 */
export interface CommunicationPayload extends BackboneElement {
  /**
   * A communicated content (or for multi-part communications, one portion of the communication).
   */
  contentAttachment?: Attachment | undefined;
  /**
   * A communicated content (or for multi-part communications, one portion of the communication).
   */
  contentReference?: Reference | undefined;
  /**
   * A communicated content (or for multi-part communications, one portion of the communication).
   */
  contentString?: string | undefined;
  _contentString?: Element | undefined;
}
export interface Communication extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Communication';
  /**
   * The type of message conveyed such as alert, notification, reminder, instruction, etc.
   */
  category?: CodeableConcept | undefined;
  /**
   * The encounter within which the communication was sent.
   */
  encounter?: Reference | undefined;
  /**
   * Identifiers associated with this Communication that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * A channel that was used for this communication (e.g. email, fax).
   */
  medium?: CodeableConcept[] | undefined;
  /**
   * Text, attachment(s), or resource(s) that was communicated to the recipient.
   */
  payload?: CommunicationPayload[] | undefined;
  /**
   * The reason or justification for the communication.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * The time when this communication arrived at the destination.
   */
  received?: string | undefined;
  _received?: Element | undefined;
  /**
   * The entity (e.g. person, organization, clinical information system, or device) which was the target of the communication. If receipts need to be tracked by individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either a receipt(s) is not tracked (e.g. a mass mail-out) or is captured in aggregate (all emails confirmed received by a particular time).
   */
  recipient?: Reference[] | undefined;
  /**
   * The communication request that was responsible for producing this communication.
   */
  requestDetail?: Reference | undefined;
  /**
   * The entity (e.g. person, organization, clinical information system, or device) which was the source of the communication.
   */
  sender?: Reference | undefined;
  /**
   * The time when this communication was sent.
   */
  sent?: string | undefined;
  _sent?: Element | undefined;
  /**
   * The status of the transmission.
   */
  status?: ('in-progress'|'completed'|'suspended'|'rejected'|'failed') | undefined;
  _status?: Element | undefined;
  /**
   * The patient who was the focus of this communication.
   */
  subject?: Reference | undefined;
}
/**
 * Message payload
 */
export interface CommunicationRequestPayload extends BackboneElement {
  /**
   * The communicated content (or for multi-part communications, one portion of the communication).
   */
  contentAttachment?: Attachment | undefined;
  /**
   * The communicated content (or for multi-part communications, one portion of the communication).
   */
  contentReference?: Reference | undefined;
  /**
   * The communicated content (or for multi-part communications, one portion of the communication).
   */
  contentString?: string | undefined;
  _contentString?: Element | undefined;
}
export interface CommunicationRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CommunicationRequest';
  /**
   * The type of message to be sent such as alert, notification, reminder, instruction, etc.
   */
  category?: CodeableConcept | undefined;
  /**
   * The encounter within which the communication request was created.
   */
  encounter?: Reference | undefined;
  /**
   * A unique ID of this request for reference purposes. It must be provided if user wants it returned as part of any output, otherwise it will be autogenerated, if needed, by CDS system. Does not need to be the actual ID of the source system.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A channel that was used for this communication (e.g. email, fax).
   */
  medium?: CodeableConcept[] | undefined;
  /**
   * Text, attachment(s), or resource(s) to be communicated to the recipient.
   */
  payload?: CommunicationRequestPayload[] | undefined;
  /**
   * Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
   */
  priority?: CodeableConcept | undefined;
  /**
   * The reason or justification for the communication request.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * The entity (e.g. person, organization, clinical information system, or device) which is the intended target of the communication.
   */
  recipient?: Reference[] | undefined;
  /**
   * The time when the request was made.
   */
  requestedOn?: string | undefined;
  _requestedOn?: Element | undefined;
  /**
   * The responsible person who authorizes this order, e.g. physician. This may be different than the author of the order statement, e.g. clerk, who may have entered the statement into the order entry application.
   */
  requester?: Reference | undefined;
  /**
   * The time when this communication is to occur.
   */
  scheduledString?: string | undefined;
  _scheduledString?: Element | undefined;
  /**
   * The time when this communication is to occur.
   */
  scheduledPeriod?: Period | undefined;
  /**
   * The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
   */
  sender?: Reference | undefined;
  /**
   * The status of the proposal or order.
   */
  status?: ('proposed'|'planned'|'requested'|'received'|'accepted'|'in-progress'|'completed'|'suspended'|'rejected'|'failed') | undefined;
  _status?: Element | undefined;
  /**
   * The patient who is the focus of this communication request.
   */
  subject?: Reference | undefined;
}
/**
 * Attests to accuracy of composition
 */
export interface CompositionAttester extends BackboneElement {
  /**
   * The type of attestation the authenticator offers.
   */
  mode: ('personal'|'professional'|'legal'|'official')[];
  _mode?: Element[] | undefined;
  /**
   * Who attested the composition in the specified way.
   */
  party?: Reference | undefined;
  /**
   * When composition was attested by the party.
   */
  time?: string | undefined;
  _time?: Element | undefined;
}
/**
 * The clinical service(s) being documented
 */
export interface CompositionEvent extends BackboneElement {
  /**
   * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
   */
  code?: CodeableConcept[] | undefined;
  /**
   * The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
   */
  detail?: Reference[] | undefined;
  /**
   * The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
   */
  period?: Period | undefined;
}
/**
 * Composition is broken into sections
 */
export interface CompositionSection extends BackboneElement {
  /**
   * A code identifying the kind of content contained within the section. This must be consistent with the section title.
   */
  code?: CodeableConcept | undefined;
  /**
   * If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
   */
  emptyReason?: CodeableConcept | undefined;
  /**
   * A reference to the actual resource from which the narrative in the section is derived.
   */
  entry?: Reference[] | undefined;
  /**
   * How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
   */
  mode?: ('working'|'snapshot'|'changes') | undefined;
  _mode?: Element | undefined;
  /**
   * Specifies the order applied to the items in the section entries.
   */
  orderedBy?: CodeableConcept | undefined;
  /**
   * A nested sub-section within this section.
   */
  section?: CompositionSection[] | undefined;
  /**
   * A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
   */
  text?: Narrative | undefined;
  /**
   * The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
export interface Composition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Composition';
  /**
   * A participant who has attested to the accuracy of the composition/document.
   */
  attester?: CompositionAttester[] | undefined;
  /**
   * Identifies who is responsible for the information in the composition, not necessarily who typed it in.
   */
  author: Reference[];
  /**
   * A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
   */
  class?: CodeableConcept | undefined;
  /**
   * The code specifying the level of confidentiality of the Composition.
   */
  confidentiality?: ('_Confidentiality'|'L'|'M'|'N'|'R'|'U'|'V') | undefined;
  _confidentiality?: Element | undefined;
  /**
   * Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
   */
  custodian?: Reference | undefined;
  /**
   * The composition editing time, when the composition was last logically changed by the author.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * Describes the clinical encounter or type of care this documentation is associated with.
   */
  encounter?: Reference | undefined;
  /**
   * The clinical service, such as a colonoscopy or an appendectomy, being documented.
   */
  event?: CompositionEvent[] | undefined;
  /**
   * Logical identifier for the composition, assigned when created. This identifier stays constant as the composition is changed over time.
   */
  identifier?: Identifier | undefined;
  /**
   * The root of the sections that make up the composition.
   */
  section?: CompositionSection[] | undefined;
  /**
   * The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
   */
  status: ('preliminary'|'final'|'amended'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
   */
  subject: Reference;
  /**
   * Official human-readable label for the composition.
   */
  title: string;
  _title?: Element | undefined;
  /**
   * Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
   */
  type: CodeableConcept;
}
/**
 * Contact details of the publisher
 */
export interface ConceptMapContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the concept map.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Other elements required for this mapping (from context)
 */
export interface ConceptMapElementTargetDependsOn extends BackboneElement {
  /**
   * Identity (code or path) or the element/item/ValueSet that the map depends on / refers to.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).
   */
  codeSystem: string;
  _codeSystem?: Element | undefined;
  /**
   * A reference to a specific concept that holds a coded value. This can be an element in a FHIR resource, or a specific reference to a data element in a different specification (e.g. HL7 v2) or a general reference to a kind of data field, or a reference to a value set with an appropriately narrow definition.
   */
  element: string;
  _element?: Element | undefined;
}
/**
 * Concept in target system for element
 */
export interface ConceptMapElementTarget extends BackboneElement {
  /**
   * Identity (code or path) or the element/item that the map refers to.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * An absolute URI that identifies the code system of the target code (if the target is a value set that cross code systems).
   */
  codeSystem?: string | undefined;
  _codeSystem?: Element | undefined;
  /**
   * A description of status/issues in mapping that conveys additional information not represented in  the structured data.
   */
  comments?: string | undefined;
  _comments?: Element | undefined;
  /**
   * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
   */
  dependsOn?: ConceptMapElementTargetDependsOn[] | undefined;
  /**
   * The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source).
   */
  equivalence: ('equivalent'|'equal'|'wider'|'subsumes'|'narrower'|'specializes'|'inexact'|'unmatched'|'disjoint');
  _equivalence?: Element | undefined;
  /**
   * A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.
   */
  product?: ConceptMapElementTargetDependsOn[] | undefined;
}
/**
 * Mappings for a concept from the source set
 */
export interface ConceptMapElement extends BackboneElement {
  /**
   * Identity (code or path) or the element/item being mapped.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * An absolute URI that identifies the Code System (if the source is a value set that crosses more than one code system).
   */
  codeSystem?: string | undefined;
  _codeSystem?: Element | undefined;
  /**
   * A concept from the target value set that this concept maps to.
   */
  target?: ConceptMapElementTarget[] | undefined;
}
export interface ConceptMap extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ConceptMap';
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: ConceptMapContact[] | undefined;
  /**
   * A copyright statement relating to the concept map and/or its contents.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date this version of the concept map was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the use of the concept map - reason for definition, conditions of use, etc.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Mappings for an individual concept in the source to one or more concepts in the target.
   */
  element?: ConceptMapElement[] | undefined;
  /**
   * This ConceptMap was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier | undefined;
  /**
   * A free text natural language name describing the concept map.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the concept map.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explains why this concept map is needed and why it has been constrained as it has.
   */
  requirements?: string | undefined;
  _requirements?: Element | undefined;
  /**
   * The source value set that specifies the concepts that are being mapped.
   */
  sourceReference?: Reference | undefined;
  /**
   * The source value set that specifies the concepts that are being mapped.
   */
  sourceString?: string | undefined;
  _sourceString?: Element | undefined;
  /**
   * The status of the concept map.
   */
  status: ('draft'|'active'|'retired');
  _status?: Element | undefined;
  /**
   * The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
   */
  targetReference?: Reference | undefined;
  /**
   * The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
   */
  targetString?: string | undefined;
  _targetString?: Element | undefined;
  /**
   * An absolute URL that is used to identify this concept map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this concept map is (or will be) published.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of concept map instances.
   */
  useContext?: CodeableConcept[] | undefined;
  /**
   * The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Supporting evidence
 */
export interface ConditionEvidence extends BackboneElement {
  /**
   * A manifestation or symptom that led to the recording of this condition.
   */
  code?: CodeableConcept | undefined;
  /**
   * Links to other relevant information, including pathology reports.
   */
  detail?: Reference[] | undefined;
}
/**
 * Stage/grade, usually assessed formally
 */
export interface ConditionStage extends BackboneElement {
  /**
   * Reference to a formal record of the evidence on which the staging assessment is based.
   */
  assessment?: Reference[] | undefined;
  /**
   * A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
   */
  summary?: CodeableConcept | undefined;
}
export interface Condition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Condition';
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementBoolean?: boolean | undefined;
  _abatementBoolean?: Element | undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementString?: string | undefined;
  _abatementString?: Element | undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementPeriod?: Period | undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementQuantity?: Quantity | undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   */
  abatementRange?: Range | undefined;
  /**
   * Individual who is making the condition statement.
   */
  asserter?: Reference | undefined;
  /**
   * The anatomical location where this condition manifests itself.
   */
  bodySite?: CodeableConcept[] | undefined;
  /**
   * A category assigned to the condition.
   */
  category?: CodeableConcept | undefined;
  /**
   * The clinical status of the condition.
   */
  clinicalStatus?: string | undefined;
  _clinicalStatus?: Element | undefined;
  /**
   * Identification of the condition, problem or diagnosis.
   */
  code: CodeableConcept;
  /**
   * A date, when  the Condition statement was documented.
   */
  dateRecorded?: string | undefined;
  _dateRecorded?: Element | undefined;
  /**
   * Encounter during which the condition was first asserted.
   */
  encounter?: Reference | undefined;
  /**
   * Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
   */
  evidence?: ConditionEvidence[] | undefined;
  /**
   * This records identifiers associated with this condition that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
   */
  notes?: string | undefined;
  _notes?: Element | undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetString?: string | undefined;
  _onsetString?: Element | undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetPeriod?: Period | undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetQuantity?: Quantity | undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   */
  onsetRange?: Range | undefined;
  /**
   * Indicates the patient who the condition record is associated with.
   */
  patient: Reference;
  /**
   * A subjective assessment of the severity of the condition as evaluated by the clinician.
   */
  severity?: CodeableConcept | undefined;
  /**
   * Clinical stage or grade of a condition. May include formal severity assessments.
   */
  stage?: ConditionStage | undefined;
  /**
   * The verification status to support the clinical status of the condition.
   */
  verificationStatus: ('provisional'|'differential'|'confirmed'|'refuted'|'entered-in-error'|'unknown');
  _verificationStatus?: Element | undefined;
}
/**
 * Contact details of the publisher
 */
export interface ConformanceContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the conformance.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Document definition
 */
export interface ConformanceDocument extends BackboneElement {
  /**
   * A description of how the application supports or uses the specified document profile.  For example, when are documents created, what action is taken with consumed documents, etc.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * Mode of this document declaration - whether application is producer or consumer.
   */
  mode: ('producer'|'consumer');
  _mode?: Element | undefined;
  /**
   * A constraint on a resource used in the document.
   */
  profile: Reference;
}
/**
 * If this describes a specific instance
 */
export interface ConformanceImplementation extends BackboneElement {
  /**
   * Information about the specific installation that this conformance statement relates to.
   */
  description: string;
  _description?: Element | undefined;
  /**
   * An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * A messaging service end-point
 */
export interface ConformanceMessagingEndpoint extends BackboneElement {
  /**
   * The network address of the end-point. For solutions that do not use network addresses for routing, it can be just an identifier.
   */
  address: string;
  _address?: Element | undefined;
  /**
   * A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
   */
  protocol: Coding;
}
/**
 * Declare support for this event
 */
export interface ConformanceMessagingEvent extends BackboneElement {
  /**
   * The impact of the content of the message.
   */
  category?: ('Consequence'|'Currency'|'Notification') | undefined;
  _category?: Element | undefined;
  /**
   * A coded identifier of a supported messaging event.
   */
  code: Coding;
  /**
   * Guidance on how this event is handled, such as internal system trigger points, business rules, etc.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * A resource associated with the event.  This is the resource that defines the event.
   */
  focus: ('Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription');
  _focus?: Element | undefined;
  /**
   * The mode of this event declaration - whether application is sender or receiver.
   */
  mode: ('sender'|'receiver');
  _mode?: Element | undefined;
  /**
   * Information about the request for this event.
   */
  request: Reference;
  /**
   * Information about the response for this event.
   */
  response: Reference;
}
/**
 * If messaging is supported
 */
export interface ConformanceMessaging extends BackboneElement {
  /**
   * Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the conformance statement.  For example, process for becoming an authorized messaging exchange partner.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * An endpoint (network accessible address) to which messages and/or replies are to be sent.
   */
  endpoint?: ConformanceMessagingEndpoint[] | undefined;
  /**
   * A description of the solution's support for an event at this end-point.
   */
  event: ConformanceMessagingEvent[];
  /**
   * Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
   */
  reliableCache?: number | undefined;
}
/**
 * What operations are supported?
 */
export interface ConformanceRestInteraction extends BackboneElement {
  /**
   * A coded identifier of the operation, supported by the system.
   */
  code: ('transaction'|'search-system'|'history-system');
  _code?: Element | undefined;
  /**
   * Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
}
/**
 * Definition of an operation or a custom query
 */
export interface ConformanceRestOperation extends BackboneElement {
  /**
   * Where the formal definition can be found.
   */
  definition: Reference;
  /**
   * The name of a query, which is used in the _query parameter when the query is called.
   */
  name: string;
  _name?: Element | undefined;
}
/**
 * What operations are supported?
 */
export interface ConformanceRestResourceInteraction extends BackboneElement {
  /**
   * Coded identifier of the operation, supported by the system resource.
   */
  code: ('read'|'vread'|'update'|'delete'|'history-instance'|'validate'|'history-type'|'create'|'search-type');
  _code?: Element | undefined;
  /**
   * Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
}
/**
 * Search params supported by implementation
 */
export interface ConformanceRestResourceSearchParam extends BackboneElement {
  /**
   * Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference, and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from Conformance.rest.resource.searchParam.name on the target resource type.
   */
  chain?: string[] | undefined;
  _chain?: Element[] | undefined;
  /**
   * An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [[[SearchParameter.url]]]).
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * A modifier supported for the search parameter.
   */
  modifier?: ('missing'|'exact'|'contains'|'not'|'text'|'in'|'not-in'|'below'|'above'|'type')[] | undefined;
  _modifier?: Element[] | undefined;
  /**
   * The name of the search parameter used in the interface.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Types of resource (if a resource is referenced).
   */
  target?: ('Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription')[] | undefined;
  _target?: Element[] | undefined;
  /**
   * The type of value a search parameter refers to, and how the content is interpreted.
   */
  type: ('number'|'date'|'string'|'token'|'reference'|'composite'|'quantity'|'uri');
  _type?: Element | undefined;
}
/**
 * Resource served on the REST interface
 */
export interface ConformanceRestResource extends BackboneElement {
  /**
   * A flag that indicates that the server supports conditional create.
   */
  conditionalCreate?: boolean | undefined;
  _conditionalCreate?: Element | undefined;
  /**
   * A code that indicates how the server supports conditional delete.
   */
  conditionalDelete?: ('not-supported'|'single'|'multiple') | undefined;
  _conditionalDelete?: Element | undefined;
  /**
   * A flag that indicates that the server supports conditional update.
   */
  conditionalUpdate?: boolean | undefined;
  _conditionalUpdate?: Element | undefined;
  /**
   * Identifies a restful operation supported by the solution.
   */
  interaction: ConformanceRestResourceInteraction[];
  /**
   * A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles]{profiling.html#profile-uses}.
   */
  profile?: Reference | undefined;
  /**
   * A flag for whether the server is able to return past versions as part of the vRead operation.
   */
  readHistory?: boolean | undefined;
  _readHistory?: Element | undefined;
  /**
   * A list of _include values supported by the server.
   */
  searchInclude?: string[] | undefined;
  _searchInclude?: Element[] | undefined;
  /**
   * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
   */
  searchParam?: ConformanceRestResourceSearchParam[] | undefined;
  /**
   * A list of _revinclude (reverse include) values supported by the server.
   */
  searchRevInclude?: string[] | undefined;
  _searchRevInclude?: Element[] | undefined;
  /**
   * A type of resource exposed via the restful interface.
   */
  type: ('Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription');
  _type?: Element | undefined;
  /**
   * A flag to indicate that the server allows or needs to allow the client to create new identities on the server (e.g. that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
   */
  updateCreate?: boolean | undefined;
  _updateCreate?: Element | undefined;
  /**
   * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
   */
  versioning?: ('no-version'|'versioned'|'versioned-update') | undefined;
  _versioning?: Element | undefined;
}
/**
 * Certificates associated with security profiles
 */
export interface ConformanceRestSecurityCertificate extends BackboneElement {
  /**
   * Actual certificate.
   */
  blob?: string | undefined;
  _blob?: Element | undefined;
  /**
   * Mime type for certificate.
   */
  type?: string | undefined;
  _type?: Element | undefined;
}
/**
 * Information about security of implementation
 */
export interface ConformanceRestSecurity extends BackboneElement {
  /**
   * Certificates associated with security profiles.
   */
  certificate?: ConformanceRestSecurityCertificate[] | undefined;
  /**
   * Server adds CORS headers when responding to requests - this enables javascript applications to use the server.
   */
  cors?: boolean | undefined;
  _cors?: Element | undefined;
  /**
   * General description of how security works.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Types of security services are supported/required by the system.
   */
  service?: CodeableConcept[] | undefined;
}
/**
 * If the endpoint is a RESTful one
 */
export interface ConformanceRest extends BackboneElement {
  /**
   * An absolute URI which is a reference to the definition of a compartment hosted by the system.
   */
  compartment?: string[] | undefined;
  _compartment?: Element[] | undefined;
  /**
   * Information about the system's restful capabilities that apply across all applications, such as security.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * A specification of restful operations supported by the system.
   */
  interaction?: ConformanceRestInteraction[] | undefined;
  /**
   * Identifies whether this portion of the statement is describing ability to initiate or receive restful operations.
   */
  mode: ('client'|'server');
  _mode?: Element | undefined;
  /**
   * Definition of an operation or a named query and with its parameters and their meaning and type.
   */
  operation?: ConformanceRestOperation[] | undefined;
  /**
   * A specification of the restful capabilities of the solution for a specific resource type.
   */
  resource: ConformanceRestResource[];
  /**
   * Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
   */
  searchParam?: ConformanceRestResourceSearchParam[] | undefined;
  /**
   * Information about security implementation from an interface perspective - what a client needs to know.
   */
  security?: ConformanceRestSecurity | undefined;
  /**
   * A code that indicates how transactions are supported.
   */
  transactionMode?: ('not-supported'|'batch'|'transaction'|'both') | undefined;
  _transactionMode?: Element | undefined;
}
/**
 * Software that is covered by this conformance statement
 */
export interface ConformanceSoftware extends BackboneElement {
  /**
   * Name software is known by.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Date this version of the software released.
   */
  releaseDate?: string | undefined;
  _releaseDate?: Element | undefined;
  /**
   * The version identifier for the software covered by this statement.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
export interface Conformance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Conformance';
  /**
   * A code that indicates whether the application accepts unknown elements or extensions when reading resources.
   */
  acceptUnknown: ('no'|'extensions'|'elements'|'both');
  _acceptUnknown?: Element | undefined;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: ConformanceContact[] | undefined;
  /**
   * A copyright statement relating to the conformance statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the system described by the conformance statement.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the conformance statement was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the conformance statement changes.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the conformance statement and its use. Typically, this is used when the conformance statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A document definition.
   */
  document?: ConformanceDocument[] | undefined;
  /**
   * A flag to indicate that this conformance statement is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * The version of the FHIR specification on which this conformance statement is based.
   */
  fhirVersion: string;
  _fhirVersion?: Element | undefined;
  /**
   * A list of the formats supported by this implementation using their content types.
   */
  format: string[];
  _format?: Element[] | undefined;
  /**
   * Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.
   */
  implementation?: ConformanceImplementation | undefined;
  /**
   * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind not instance of software) or a class of implementation (e.g. a desired purchase).
   */
  kind: ('instance'|'capability'|'requirements');
  _kind?: Element | undefined;
  /**
   * A description of the messaging capabilities of the solution.
   */
  messaging?: ConformanceMessaging[] | undefined;
  /**
   * A free text natural language name identifying the conformance statement.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A list of profiles that represent different use cases supported by the system. For a server, "supported by the system" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles]{profiling.html#profile-uses}.
   */
  profile?: Reference[] | undefined;
  /**
   * The name of the individual or organization that published the conformance.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explains why this conformance statement is needed and why it's been constrained as it has.
   */
  requirements?: string | undefined;
  _requirements?: Element | undefined;
  /**
   * A definition of the restful capabilities of the solution, if any.
   */
  rest?: ConformanceRest[] | undefined;
  /**
   * Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.
   */
  software?: ConformanceSoftware | undefined;
  /**
   * The status of this conformance statement.
   */
  status?: ('draft'|'active'|'retired') | undefined;
  _status?: Element | undefined;
  /**
   * An absolute URL that is used to identify this conformance statement when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this conformance statement is (or will be) published.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The identifier that is used to identify this version of the conformance statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Contract Actor
 */
export interface ContractActor extends BackboneElement {
  /**
   * Who or what actors are assigned roles in this Contract.
   */
  entity: Reference;
  /**
   * Role type of actors assigned roles in this Contract.
   */
  role?: CodeableConcept[] | undefined;
}
/**
 * Contract Friendly Language
 */
export interface ContractFriendly extends BackboneElement {
  /**
   * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
   */
  contentAttachment?: Attachment | undefined;
  /**
   * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
   */
  contentReference?: Reference | undefined;
}
/**
 * Contract Legal Language
 */
export interface ContractLegal extends BackboneElement {
  /**
   * Contract legal text in human renderable form.
   */
  contentAttachment?: Attachment | undefined;
  /**
   * Contract legal text in human renderable form.
   */
  contentReference?: Reference | undefined;
}
/**
 * Computable Contract Language
 */
export interface ContractRule extends BackboneElement {
  /**
   * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
   */
  contentAttachment?: Attachment | undefined;
  /**
   * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
   */
  contentReference?: Reference | undefined;
}
/**
 * Contract Signer
 */
export interface ContractSigner extends BackboneElement {
  /**
   * Party which is a signator to this Contract.
   */
  party: Reference;
  /**
   * Legally binding Contract DSIG signature contents in Base64.
   */
  signature: string;
  _signature?: Element | undefined;
  /**
   * Role of this Contract signer, e.g. notary, grantee.
   */
  type: Coding;
}
/**
 * Contract Term Actor List
 */
export interface ContractTermActor extends BackboneElement {
  /**
   * The actor assigned a role in this Contract Provision.
   */
  entity: Reference;
  /**
   * Role played by the actor assigned this role in this Contract Provision.
   */
  role?: CodeableConcept[] | undefined;
}
/**
 * Contract Term Valued Item
 */
export interface ContractTermValuedItem extends BackboneElement {
  /**
   * Indicates the time during which this Contract Term ValuedItem information is effective.
   */
  effectiveTime?: string | undefined;
  _effectiveTime?: Element | undefined;
  /**
   * Specific type of Contract Provision Valued Item that may be priced.
   */
  entityCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specific type of Contract Provision Valued Item that may be priced.
   */
  entityReference?: Reference | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of the Contract Provision Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * Identifies a Contract Provision Valued Item instance.
   */
  identifier?: Identifier | undefined;
  /**
   * Expresses the product of the Contract Provision Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Quantity | undefined;
  /**
   * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Provision Valued Item delivered. The concept of Points allows for assignment of point values for a Contract ProvisionValued Item, such that a monetary amount can be assigned to each point.
   */
  points?: number | undefined;
  /**
   * Specifies the units by which the Contract Provision Valued Item is measured or counted, and quantifies the countable or measurable Contract Term Valued Item instances.
   */
  quantity?: Quantity | undefined;
  /**
   * A Contract Provision Valued Item unit valuation measure.
   */
  unitPrice?: Quantity | undefined;
}
/**
 * Contract Term List
 */
export interface ContractTerm extends BackboneElement {
  /**
   * Action stipulated by this Contract Provision.
   */
  action?: CodeableConcept[] | undefined;
  /**
   * Reason or purpose for the action stipulated by this Contract Provision.
   */
  actionReason?: CodeableConcept[] | undefined;
  /**
   * List of actors participating in this Contract Provision.
   */
  actor?: ContractTermActor[] | undefined;
  /**
   * Relevant time or time-period when this Contract Provision is applicable.
   */
  applies?: Period | undefined;
  /**
   * Nested group of Contract Provisions.
   */
  group?: ContractTerm[] | undefined;
  /**
   * Unique identifier for this particular Contract Provision.
   */
  identifier?: Identifier | undefined;
  /**
   * When this Contract Provision was issued.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * Who or what this Contract Provision is about.
   */
  subject?: Reference | undefined;
  /**
   * Subtype of this Contract Provision, e.g. life time maximum payment for a contract term for specific valued item, e.g. disability payment.
   */
  subType?: CodeableConcept | undefined;
  /**
   * Human readable form of this Contract Provision.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
   */
  type?: CodeableConcept | undefined;
  /**
   * Contract Provision Valued Item List.
   */
  valuedItem?: ContractTermValuedItem[] | undefined;
}
/**
 * Contract Valued Item
 */
export interface ContractValuedItem extends BackboneElement {
  /**
   * Indicates the time during which this Contract ValuedItem information is effective.
   */
  effectiveTime?: string | undefined;
  _effectiveTime?: Element | undefined;
  /**
   * Specific type of Contract Valued Item that may be priced.
   */
  entityCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specific type of Contract Valued Item that may be priced.
   */
  entityReference?: Reference | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * Identifies a Contract Valued Item instance.
   */
  identifier?: Identifier | undefined;
  /**
   * Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Quantity | undefined;
  /**
   * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
   */
  points?: number | undefined;
  /**
   * Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
   */
  quantity?: Quantity | undefined;
  /**
   * A Contract Valued Item unit valuation measure.
   */
  unitPrice?: Quantity | undefined;
}
export interface Contract extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Contract';
  /**
   * Action stipulated by this Contract.
   */
  action?: CodeableConcept[] | undefined;
  /**
   * Reason for action stipulated by this Contract.
   */
  actionReason?: CodeableConcept[] | undefined;
  /**
   * List of Contract actors.
   */
  actor?: ContractActor[] | undefined;
  /**
   * Relevant time or time-period when this Contract is applicable.
   */
  applies?: Period | undefined;
  /**
   * A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
   */
  authority?: Reference[] | undefined;
  /**
   * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
   */
  bindingAttachment?: Attachment | undefined;
  /**
   * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
   */
  bindingReference?: Reference | undefined;
  /**
   * Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
   */
  domain?: Reference[] | undefined;
  /**
   * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
   */
  friendly?: ContractFriendly[] | undefined;
  /**
   * Unique identifier for this Contract.
   */
  identifier?: Identifier | undefined;
  /**
   * When this  Contract was issued.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * List of Legal expressions or representations of this Contract.
   */
  legal?: ContractLegal[] | undefined;
  /**
   * List of Computable Policy Rule Language Representations of this Contract.
   */
  rule?: ContractRule[] | undefined;
  /**
   * Party signing this Contract.
   */
  signer?: ContractSigner[] | undefined;
  /**
   * Who and/or what this Contract is about: typically a Patient, Organization, or valued items such as goods and services.
   */
  subject?: Reference[] | undefined;
  /**
   * More specific type or specialization of an overarching or more general contract such as auto insurance, home owner  insurance, prenupial agreement, Advanced-Directive, or privacy consent.
   */
  subType?: CodeableConcept[] | undefined;
  /**
   * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
   */
  term?: ContractTerm[] | undefined;
  /**
   * Type of Contract such as an insurance policy, real estate contract, a will, power of attorny, Privacy or Security policy , trust framework agreement, etc.
   */
  type?: CodeableConcept | undefined;
  /**
   * Contract Valued Item List.
   */
  valuedItem?: ContractValuedItem[] | undefined;
}
export interface Coverage extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Coverage';
  /**
   * Business Identification Number (BIN number) used to identify the routing  of eclaims if the insurer themselves don't have a BIN number for all of their business.
   */
  bin?: Identifier | undefined;
  /**
   * The policy(s) which constitute this insurance coverage.
   */
  contract?: Reference[] | undefined;
  /**
   * A unique identifier for a dependent under the coverage.
   */
  dependent?: number | undefined;
  /**
   * Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.
   */
  group?: string | undefined;
  _group?: Element | undefined;
  /**
   * The main (and possibly only) identifier for the coverage - often referred to as a Member Id, Subscriber Id, Certificate number or Personal Health Number or Case ID.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The program or plan underwriter or payor.
   */
  issuer?: Reference | undefined;
  /**
   * The identifier for a community of providers.
   */
  network?: Identifier | undefined;
  /**
   * Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
   */
  period?: Period | undefined;
  /**
   * Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.
   */
  plan?: string | undefined;
  _plan?: Element | undefined;
  /**
   * An optional counter for a particular instance of the identified coverage which increments upon each renewal.
   */
  sequence?: number | undefined;
  /**
   * Identifies a sub-style or sub-collective of coverage issues by the underwriter, for example may be used to identify a specific employer group within a class of employers. May be referred to as a Section or Division ID.
   */
  subPlan?: string | undefined;
  _subPlan?: Element | undefined;
  /**
   * The party who 'owns' the insurance contractual relationship to the policy or to whom the benefit of the policy is due.
   */
  subscriber?: Reference | undefined;
  /**
   * The id issued to the subscriber.
   */
  subscriberId?: Identifier | undefined;
  /**
   * The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health.
   */
  type?: Coding | undefined;
}
/**
 * Contact details of the publisher
 */
export interface DataElementContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the data element.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * External specification mapped to
 */
export interface DataElementMapping extends BackboneElement {
  /**
   * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
   */
  comments?: string | undefined;
  _comments?: Element | undefined;
  /**
   * An internal id that is used to identify this mapping set when specific mappings are made on a per-element basis.
   */
  identity: string;
  _identity?: Element | undefined;
  /**
   * A name for the specification that is being mapped to.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * An absolute URI that identifies the specification that this mapping is expressed to.
   */
  uri?: string | undefined;
  _uri?: Element | undefined;
}
export interface DataElement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DataElement';
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: DataElementContact[] | undefined;
  /**
   * A copyright statement relating to the definition of the data element. Copyright statements are generally legal restrictions on the use and publishing of the details of the definition of the data element.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date this version of the data element was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the data element  changes.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Defines the structure, type, allowed values and other constraining characteristics of the data element.
   */
  element: ElementDefinition[];
  /**
   * A flag to indicate that this search data element definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Formal identifier that is used to identify this data element when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies a specification (other than a terminology) that the elements which make up the DataElement have some correspondence with.
   */
  mapping?: DataElementMapping[] | undefined;
  /**
   * The term used by humans to refer to the data element.  Should ideally be unique within the context in which the data element is expected to be used.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the data element.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * The status of the data element.
   */
  status: ('draft'|'active'|'retired');
  _status?: Element | undefined;
  /**
   * Identifies how precise the data element is in its definition.
   */
  stringency?: ('comparable'|'fully-specified'|'equivalent'|'convertable'|'scaleable'|'flexible') | undefined;
  _stringency?: Element | undefined;
  /**
   * An absolute URL that is used to identify this data element when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this data element is (or will be) published.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of data element definitions.
   */
  useContext?: CodeableConcept[] | undefined;
  /**
   * The identifier that is used to identify this version of the data element when it is referenced in a StructureDefinition, Questionnaire or instance. This is an arbitrary value managed by the definition author manually.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Step taken to address
 */
export interface DetectedIssueMitigation extends BackboneElement {
  /**
   * Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.
   */
  action: CodeableConcept;
  /**
   * Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
   */
  author?: Reference | undefined;
  /**
   * Indicates when the mitigating action was documented.
   */
  date?: string | undefined;
  _date?: Element | undefined;
}
export interface DetectedIssue extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DetectedIssue';
  /**
   * Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
   */
  author?: Reference | undefined;
  /**
   * Identifies the general type of issue identified.
   */
  category?: CodeableConcept | undefined;
  /**
   * The date or date-time when the detected issue was initially identified.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A textual explanation of the detected issue.
   */
  detail?: string | undefined;
  _detail?: Element | undefined;
  /**
   * Business identifier associated with the detected issue record.
   */
  identifier?: Identifier | undefined;
  /**
   * Indicates the resource representing the current activity or proposed activity that is potentially problematic.
   */
  implicated?: Reference[] | undefined;
  /**
   * Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
   */
  mitigation?: DetectedIssueMitigation[] | undefined;
  /**
   * Indicates the patient whose record the detected issue is associated with.
   */
  patient?: Reference | undefined;
  /**
   * The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
   */
  reference?: string | undefined;
  _reference?: Element | undefined;
  /**
   * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
   */
  severity?: ('high'|'moderate'|'low') | undefined;
  _severity?: Element | undefined;
}
export interface Device extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Device';
  /**
   * Contact details for an organization or a particular human that is responsible for the device.
   */
  contact?: ContactPoint[] | undefined;
  /**
   * The date and time beyond which this device is no longer valid or should not be used (if applicable).
   */
  expiry?: string | undefined;
  _expiry?: Element | undefined;
  /**
   * Unique instance identifiers assigned to a device by organizations like manufacturers or owners. If the identifier identifies the type of device, Device.type should be used.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The place where the device can be found.
   */
  location?: Reference | undefined;
  /**
   * Lot number assigned by the manufacturer.
   */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;
  /**
   * The date and time when the device was manufactured.
   */
  manufactureDate?: string | undefined;
  _manufactureDate?: Element | undefined;
  /**
   * A name of the manufacturer.
   */
  manufacturer?: string | undefined;
  _manufacturer?: Element | undefined;
  /**
   * The "model" is an identifier assigned by the manufacturer to identify the product by its type. This number is shared by the all devices sold as the same type.
   */
  model?: string | undefined;
  _model?: Element | undefined;
  /**
   * Descriptive information, usage information or implantation information that is not captured in an existing element.
   */
  note?: Annotation[] | undefined;
  /**
   * An organization that is responsible for the provision and ongoing maintenance of the device.
   */
  owner?: Reference | undefined;
  /**
   * Patient information, if the resource is affixed to a person.
   */
  patient?: Reference | undefined;
  /**
   * Status of the Device availability.
   */
  status?: ('available'|'not-available'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * Code or identifier to identify a kind of device.
   */
  type: CodeableConcept;
  /**
   * United States Food and Drug Administration mandated Unique Device Identifier (UDI). Use the human readable information (the content that the user sees, which is sometimes different to the exact syntax represented in the barcode)  - see http://www.fda.gov/MedicalDevices/DeviceRegulationandGuidance/UniqueDeviceIdentification/default.htm.
   */
  udi?: string | undefined;
  _udi?: Element | undefined;
  /**
   * A network address on which the device may be contacted directly.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The version of the device, if the device has multiple releases under the same model, or if the device is software or carries firmware.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Production specification of the component
 */
export interface DeviceComponentProductionSpecification extends BackboneElement {
  /**
   * Describes the internal component unique identification. This is a provision for manufacture specific standard components using a private OID. 11073-10101 has a partition for private OID semantic that the manufacture can make use of.
   */
  componentId?: Identifier | undefined;
  /**
   * Describes the printable string defining the component.
   */
  productionSpec?: string | undefined;
  _productionSpec?: Element | undefined;
  /**
   * Describes the specification type, such as, serial number, part number, hardware revision, software revision, etc.
   */
  specType?: CodeableConcept | undefined;
}
export interface DeviceComponent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceComponent';
  /**
   * Describes the local assigned unique identification by the software. For example: handle ID.
   */
  identifier: Identifier;
  /**
   * Describes the language code for the human-readable text string produced by the device. This language code will follow the IETF language tag. Example: en-US.
   */
  languageCode?: CodeableConcept | undefined;
  /**
   * Describes the timestamp for the most recent system change which includes device configuration or setting change.
   */
  lastSystemChange: string;
  _lastSystemChange?: Element | undefined;
  /**
   * Describes the physical principle of the measurement. For example: thermal, chemical, acoustical, etc.
   */
  measurementPrinciple?: ('other'|'chemical'|'electrical'|'impedance'|'nuclear'|'optical'|'thermal'|'biological'|'mechanical'|'acoustical'|'manual') | undefined;
  _measurementPrinciple?: Element | undefined;
  /**
   * Indicates current operational status of the device. For example: On, Off, Standby, etc.
   */
  operationalStatus?: CodeableConcept[] | undefined;
  /**
   * Describes the parameter group supported by the current device component that is based on some nomenclature, e.g. cardiovascular.
   */
  parameterGroup?: CodeableConcept | undefined;
  /**
   * Describes the link to the parent resource. For example: Channel is linked to its VMD parent.
   */
  parent?: Reference | undefined;
  /**
   * Describes the production specification such as component revision, serial number, etc.
   */
  productionSpecification?: DeviceComponentProductionSpecification[] | undefined;
  /**
   * Describes the link to the source Device that contains administrative device information such as manufacture, serial number, etc.
   */
  source?: Reference | undefined;
  /**
   * Describes the specific component type as defined in the object-oriented or metric nomenclature partition.
   */
  type: CodeableConcept;
}
/**
 * Describes the calibrations that have been performed or that are required to be performed
 */
export interface DeviceMetricCalibration extends BackboneElement {
  /**
   * Describes the state of the calibration.
   */
  state?: ('not-calibrated'|'calibration-required'|'calibrated'|'unspecified') | undefined;
  _state?: Element | undefined;
  /**
   * Describes the time last calibration has been performed.
   */
  time?: string | undefined;
  _time?: Element | undefined;
  /**
   * Describes the type of the calibration method.
   */
  type?: ('unspecified'|'offset'|'gain'|'two-point') | undefined;
  _type?: Element | undefined;
}
export interface DeviceMetric extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceMetric';
  /**
   * Describes the calibrations that have been performed or that are required to be performed.
   */
  calibration?: DeviceMetricCalibration[] | undefined;
  /**
   * Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
   */
  category: ('measurement'|'setting'|'calculation'|'unspecified');
  _category?: Element | undefined;
  /**
   * Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta.
   */
  color?: ('black'|'red'|'green'|'yellow'|'blue'|'magenta'|'cyan'|'white') | undefined;
  _color?: Element | undefined;
  /**
   * Describes the unique identification of this metric that has been assigned by the device or gateway software. For example: handle ID.  It should be noted that in order to make the identifier unique, the system element of the identifier should be set to the unique identifier of the device.
   */
  identifier: Identifier;
  /**
   * Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured.
   */
  measurementPeriod?: Timing | undefined;
  /**
   * Indicates current operational state of the device. For example: On, Off, Standby, etc.
   */
  operationalStatus?: ('on'|'off'|'standby') | undefined;
  _operationalStatus?: Element | undefined;
  /**
   * Describes the link to the  DeviceComponent that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a DeviceComponent that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location.
   */
  parent?: Reference | undefined;
  /**
   * Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacture, serial number, etc.
   */
  source?: Reference | undefined;
  /**
   * Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
   */
  type: CodeableConcept;
  /**
   * Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.
   */
  unit?: CodeableConcept | undefined;
}
export interface DeviceUseRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceUseRequest';
  /**
   * Indicates the site on the subject's body where the device should be used ( i.e. the target site).
   */
  bodySiteCodeableConcept?: CodeableConcept | undefined;
  /**
   * Indicates the site on the subject's body where the device should be used ( i.e. the target site).
   */
  bodySiteReference?: Reference | undefined;
  /**
   * The details of the device  to be used.
   */
  device: Reference;
  /**
   * An encounter that provides additional context in which this request is made.
   */
  encounter?: Reference | undefined;
  /**
   * Identifiers assigned to this order by the orderer or by the receiver.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Reason or justification for the use of this device.
   */
  indication?: CodeableConcept[] | undefined;
  /**
   * Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
   */
  notes?: string[] | undefined;
  _notes?: Element[] | undefined;
  /**
   * The time when the request was made.
   */
  orderedOn?: string | undefined;
  _orderedOn?: Element | undefined;
  /**
   * Characterizes how quickly the  use of device must be initiated. Includes concepts such as stat, urgent, routine.
   */
  priority?: ('routine'|'urgent'|'stat'|'asap') | undefined;
  _priority?: Element | undefined;
  /**
   * The proposed act must be performed if the indicated conditions occur, e.g.., shortness of breath, SpO2 less than x%.
   */
  prnReason?: CodeableConcept[] | undefined;
  /**
   * The time at which the request was made/recorded.
   */
  recordedOn?: string | undefined;
  _recordedOn?: Element | undefined;
  /**
   * The status of the request.
   */
  status?: ('proposed'|'planned'|'requested'|'received'|'accepted'|'in-progress'|'completed'|'suspended'|'rejected'|'aborted') | undefined;
  _status?: Element | undefined;
  /**
   * The patient who will use the device.
   */
  subject: Reference;
  /**
   * The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  timingString?: string | undefined;
  _timingString?: Element | undefined;
  /**
   * The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  timingPeriod?: Period | undefined;
  /**
   * The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  timingTiming?: Timing | undefined;
}
export interface DeviceUseStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceUseStatement';
  /**
   * Indicates the site on the subject's body where the device was used ( i.e. the target site).
   */
  bodySiteCodeableConcept?: CodeableConcept | undefined;
  /**
   * Indicates the site on the subject's body where the device was used ( i.e. the target site).
   */
  bodySiteReference?: Reference | undefined;
  /**
   * The details of the device used.
   */
  device: Reference;
  /**
   * An external identifier for this statement such as an IRI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Reason or justification for the use of the device.
   */
  indication?: CodeableConcept[] | undefined;
  /**
   * Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
   */
  notes?: string[] | undefined;
  _notes?: Element[] | undefined;
  /**
   * The time at which the statement was made/recorded.
   */
  recordedOn?: string | undefined;
  _recordedOn?: Element | undefined;
  /**
   * The patient who used the device.
   */
  subject: Reference;
  /**
   * How often the device was used.
   */
  timingString?: string | undefined;
  _timingString?: Element | undefined;
  /**
   * How often the device was used.
   */
  timingPeriod?: Period | undefined;
  /**
   * How often the device was used.
   */
  timingTiming?: Timing | undefined;
  /**
   * The time period over which the device was used.
   */
  whenUsed?: Period | undefined;
}
/**
 * A list of events of interest in the lifecycle
 */
export interface DiagnosticOrderEvent extends BackboneElement {
  /**
   * The person responsible for performing or recording the action.
   */
  actor?: Reference | undefined;
  /**
   * The date/time at which the event occurred.
   */
  dateTime: string;
  _dateTime?: Element | undefined;
  /**
   * Additional information about the event that occurred - e.g. if the status remained unchanged.
   */
  description?: CodeableConcept | undefined;
  /**
   * The status for the event.
   */
  status: ('proposed'|'draft'|'planned'|'requested'|'received'|'accepted'|'in-progress'|'review'|'completed'|'cancelled'|'suspended'|'rejected'|'failed');
  _status?: Element | undefined;
}
/**
 * The items the orderer requested
 */
export interface DiagnosticOrderItem extends BackboneElement {
  /**
   * Anatomical location where the request test should be performed.  This is the target site.
   */
  bodySite?: CodeableConcept | undefined;
  /**
   * A code that identifies a particular diagnostic investigation, or panel of investigations, that have been requested.
   */
  code: CodeableConcept;
  /**
   * A summary of the events of interest that have occurred as this item of the request is processed.
   */
  event?: DiagnosticOrderEvent[] | undefined;
  /**
   * If the item is related to a specific specimen.
   */
  specimen?: Reference[] | undefined;
  /**
   * The status of this individual item within the order.
   */
  status?: ('proposed'|'draft'|'planned'|'requested'|'received'|'accepted'|'in-progress'|'review'|'completed'|'cancelled'|'suspended'|'rejected'|'failed') | undefined;
  _status?: Element | undefined;
}
export interface DiagnosticOrder extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DiagnosticOrder';
  /**
   * An encounter that provides additional information about the healthcare context in which this request is made.
   */
  encounter?: Reference | undefined;
  /**
   * A summary of the events of interest that have occurred as the request is processed; e.g. when the order was made, various processing steps (specimens received), when it was completed.
   */
  event?: DiagnosticOrderEvent[] | undefined;
  /**
   * Identifiers assigned to this order instance by the orderer and/or  the receiver and/or order fulfiller.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The specific diagnostic investigations that are requested as part of this request. Sometimes, there can only be one item per request, but in most contexts, more than one investigation can be requested.
   */
  item?: DiagnosticOrderItem[] | undefined;
  /**
   * Any other notes associated with this patient, specimen or order (e.g. "patient hates needles").
   */
  note?: Annotation[] | undefined;
  /**
   * The practitioner that holds legal responsibility for ordering the investigation.
   */
  orderer?: Reference | undefined;
  /**
   * The clinical priority associated with this order.
   */
  priority?: ('routine'|'urgent'|'stat'|'asap') | undefined;
  _priority?: Element | undefined;
  /**
   * An explanation or justification for why this diagnostic investigation is being requested.   This is often for billing purposes.  May relate to the resources referred to in supportingInformation.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * One or more specimens that the diagnostic investigation is about.
   */
  specimen?: Reference[] | undefined;
  /**
   * The status of the order.
   */
  status?: ('proposed'|'draft'|'planned'|'requested'|'received'|'accepted'|'in-progress'|'review'|'completed'|'cancelled'|'suspended'|'rejected'|'failed') | undefined;
  _status?: Element | undefined;
  /**
   * Who or what the investigation is to be performed on. This is usually a human patient, but diagnostic tests can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
   */
  subject: Reference;
  /**
   * Additional clinical information about the patient or specimen that may influence test interpretations.  This includes observations explicitly requested by the producer(filler) to provide context or supporting information needed to complete the order.
   */
  supportingInformation?: Reference[] | undefined;
}
/**
 * Key images associated with this report
 */
export interface DiagnosticReportImage extends BackboneElement {
  /**
   * A comment about the image. Typically, this is used to provide an explanation for why the image is included, or to draw the viewer's attention to important features.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Reference to the image source.
   */
  link: Reference;
}
export interface DiagnosticReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DiagnosticReport';
  /**
   * A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.
   */
  category?: CodeableConcept | undefined;
  /**
   * A code or name that describes this diagnostic report.
   */
  code: CodeableConcept;
  /**
   * Codes for the conclusion.
   */
  codedDiagnosis?: CodeableConcept[] | undefined;
  /**
   * Concise and clinically contextualized narrative interpretation of the diagnostic report.
   */
  conclusion?: string | undefined;
  _conclusion?: Element | undefined;
  /**
   * The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
   */
  effectiveString?: string | undefined;
  _effectiveString?: Element | undefined;
  /**
   * The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
   */
  effectivePeriod?: Period | undefined;
  /**
   * The link to the health care event (encounter) when the order was made.
   */
  encounter?: Reference | undefined;
  /**
   * The local ID assigned to the report by the order filler, usually by the Information System of the diagnostic service provider.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
   */
  image?: DiagnosticReportImage[] | undefined;
  /**
   * One or more links to full details of any imaging performed during the diagnostic investigation. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images.
   */
  imagingStudy?: Reference[] | undefined;
  /**
   * The date and time that this version of the report was released from the source diagnostic service.
   */
  issued: string;
  _issued?: Element | undefined;
  /**
   * The diagnostic service that is responsible for issuing the report.
   */
  performer: Reference;
  /**
   * Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent.
   */
  presentedForm?: Attachment[] | undefined;
  /**
   * Details concerning a test or procedure requested.
   */
  request?: Reference[] | undefined;
  /**
   * Observations that are part of this diagnostic report. Observations can be simple name/value pairs (e.g. "atomic" results), or they can be grouping observations that include references to other members of the group (e.g. "panels").
   */
  result?: Reference[] | undefined;
  /**
   * Details about the specimens on which this diagnostic report is based.
   */
  specimen?: Reference[] | undefined;
  /**
   * The status of the diagnostic report as a whole.
   */
  status: ('registered'|'partial'|'final'|'corrected'|'appended'|'cancelled'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The subject of the report. Usually, but not always, this is a patient. However diagnostic services also perform analyses on specimens collected from a variety of other sources.
   */
  subject: Reference;
}
/**
 * The items included
 */
export interface DocumentManifestContent extends BackboneElement {
  /**
   * The list of references to document content, or Attachment that consist of the parts of this document manifest. Usually, these would be document references, but direct references to Media or Attachments are also allowed.
   */
  pAttachment?: Attachment | undefined;
  /**
   * The list of references to document content, or Attachment that consist of the parts of this document manifest. Usually, these would be document references, but direct references to Media or Attachments are also allowed.
   */
  pReference?: Reference | undefined;
}
/**
 * Related things
 */
export interface DocumentManifestRelated extends BackboneElement {
  /**
   * Related identifier to this DocumentManifest.  For example, Order numbers, accession numbers, XDW workflow numbers.
   */
  identifier?: Identifier | undefined;
  /**
   * Related Resource to this DocumentManifest. For example, Order, DiagnosticOrder,  Procedure, EligibilityRequest, etc.
   */
  ref?: Reference | undefined;
}
export interface DocumentManifest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DocumentManifest';
  /**
   * Identifies who is responsible for creating the manifest, and adding  documents to it.
   */
  author?: Reference[] | undefined;
  /**
   * The list of Documents included in the manifest.
   */
  content: DocumentManifestContent[];
  /**
   * When the document manifest was created for submission to the server (not necessarily the same thing as the actual resource last modified time, since it may be modified, replicated, etc.).
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * Human-readable description of the source document. This is sometimes known as the "title".
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Other identifiers associated with the document manifest, including version independent  identifiers.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts.
   */
  masterIdentifier?: Identifier | undefined;
  /**
   * A patient, practitioner, or organization for which this set of documents is intended.
   */
  recipient?: Reference[] | undefined;
  /**
   * Related identifiers or resources associated with the DocumentManifest.
   */
  related?: DocumentManifestRelated[] | undefined;
  /**
   * Identifies the source system, application, or software that produced the document manifest.
   */
  source?: string | undefined;
  _source?: Element | undefined;
  /**
   * The status of this document manifest.
   */
  status: ('current'|'superseded'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).
   */
  subject?: Reference | undefined;
  /**
   * Specifies the kind of this set of documents (e.g. Patient Summary, Discharge Summary, Prescription, etc.). The type of a set of documents may be the same as one of the documents in it - especially if there is only one - but it may be wider.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Document referenced
 */
export interface DocumentReferenceContent extends BackboneElement {
  /**
   * The document or url of the document along with critical metadata to prove content has integrity.
   */
  attachment: Attachment;
  /**
   * An identifier of the document encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.
   */
  format?: Coding[] | undefined;
}
/**
 * Related identifiers or resources
 */
export interface DocumentReferenceContextRelated extends BackboneElement {
  /**
   * Related identifier to this DocumentReference. If both id and ref are present they shall refer to the same thing.
   */
  identifier?: Identifier | undefined;
  /**
   * Related Resource to this DocumentReference. If both id and ref are present they shall refer to the same thing.
   */
  ref?: Reference | undefined;
}
/**
 * Clinical context of document
 */
export interface DocumentReferenceContext extends BackboneElement {
  /**
   * Describes the clinical encounter or type of care that the document content is associated with.
   */
  encounter?: Reference | undefined;
  /**
   * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
   */
  event?: CodeableConcept[] | undefined;
  /**
   * The kind of facility where the patient was seen.
   */
  facilityType?: CodeableConcept | undefined;
  /**
   * The time period over which the service that is described by the document was provided.
   */
  period?: Period | undefined;
  /**
   * This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty.
   */
  practiceSetting?: CodeableConcept | undefined;
  /**
   * Related identifiers or resources associated with the DocumentReference.
   */
  related?: DocumentReferenceContextRelated[] | undefined;
  /**
   * The Patient Information as known when the document was published. May be a reference to a version specific, or contained.
   */
  sourcePatientInfo?: Reference | undefined;
}
/**
 * Relationships to other documents
 */
export interface DocumentReferenceRelatesTo extends BackboneElement {
  /**
   * The type of relationship that this document has with anther document.
   */
  code: ('replaces'|'transforms'|'signs'|'appends');
  _code?: Element | undefined;
  /**
   * The target document of this relationship.
   */
  target: Reference;
}
export interface DocumentReference extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DocumentReference';
  /**
   * Which person or organization authenticates that this document is valid.
   */
  authenticator?: Reference | undefined;
  /**
   * Identifies who is responsible for adding the information to the document.
   */
  author?: Reference[] | undefined;
  /**
   * A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.
   */
  class?: CodeableConcept | undefined;
  /**
   * The document and format referenced. There may be multiple content element repetitions, each with a different format.
   */
  content: DocumentReferenceContent[];
  /**
   * The clinical context in which the document was prepared.
   */
  context?: DocumentReferenceContext | undefined;
  /**
   * When the document was created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
   */
  custodian?: Reference | undefined;
  /**
   * Human-readable description of the source document. This is sometimes known as the "title".
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The status of the underlying document.
   */
  docStatus?: CodeableConcept | undefined;
  /**
   * Other identifiers associated with the document, including version independent identifiers.
   */
  identifier?: Identifier[] | undefined;
  /**
   * When the document reference was created.
   */
  indexed: string;
  _indexed?: Element | undefined;
  /**
   * Document identifier as assigned by the source of the document. This identifier is specific to this version of the document. This unique identifier may be used elsewhere to identify this version of the document.
   */
  masterIdentifier?: Identifier | undefined;
  /**
   * Relationships that this document has with other document references that already exist.
   */
  relatesTo?: DocumentReferenceRelatesTo[] | undefined;
  /**
   * A set of Security-Tag codes specifying the level of privacy/security of the Document. Note that DocumentReference.meta.security contains the security labels of the "reference" to the document, while DocumentReference.securityLabel contains a snapshot of the security labels on the document the reference refers to.
   */
  securityLabel?: CodeableConcept[] | undefined;
  /**
   * The status of this document reference.
   */
  status: ('current'|'superseded'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
   */
  subject?: Reference | undefined;
  /**
   * Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
   */
  type: CodeableConcept;
}
export interface DomainResource extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: string;
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   */
  extension?: Extension[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
}
export interface EligibilityRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EligibilityRequest';
  /**
   * The date when this resource was created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  organization?: Reference | undefined;
  /**
   * The style (standard) and version of the original material which was converted into this resource.
   */
  originalRuleset?: Coding | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: Reference | undefined;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding | undefined;
  /**
   * The Insurer who is target  of the request.
   */
  target?: Reference | undefined;
}
export interface EligibilityResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EligibilityResponse';
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: Reference | undefined;
  /**
   * The style (standard) and version of the original material which was converted into this resource.
   */
  originalRuleset?: Coding | undefined;
  /**
   * Transaction status: error, complete.
   */
  outcome?: ('complete'|'error') | undefined;
  _outcome?: Element | undefined;
  /**
   * Original request resource reference.
   */
  request?: Reference | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference | undefined;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding | undefined;
}
/**
 * Details about the admission to a healthcare service
 */
export interface EncounterHospitalization extends BackboneElement {
  /**
   * From where patient was admitted (physician referral, transfer).
   */
  admitSource?: CodeableConcept | undefined;
  /**
   * The admitting diagnosis field is used to record the diagnosis codes as reported by admitting practitioner. This could be different or in addition to the conditions reported as reason-condition(s) for the encounter.
   */
  admittingDiagnosis?: Reference[] | undefined;
  /**
   * Location to which the patient is discharged.
   */
  destination?: Reference | undefined;
  /**
   * Diet preferences reported by the patient.
   */
  dietPreference?: CodeableConcept[] | undefined;
  /**
   * The final diagnosis given a patient before release from the hospital after all testing, surgery, and workup are complete.
   */
  dischargeDiagnosis?: Reference[] | undefined;
  /**
   * Category or kind of location after discharge.
   */
  dischargeDisposition?: CodeableConcept | undefined;
  /**
   * The location from which the patient came before admission.
   */
  origin?: Reference | undefined;
  /**
   * Pre-admission identifier.
   */
  preAdmissionIdentifier?: Identifier | undefined;
  /**
   * Whether this hospitalization is a readmission and why if known.
   */
  reAdmission?: CodeableConcept | undefined;
  /**
   * Wheelchair, translator, stretcher, etc.
   */
  specialArrangement?: CodeableConcept[] | undefined;
  /**
   * Special courtesies (VIP, board member).
   */
  specialCourtesy?: CodeableConcept[] | undefined;
}
/**
 * List of locations where the patient has been
 */
export interface EncounterLocation extends BackboneElement {
  /**
   * The location where the encounter takes place.
   */
  location: Reference;
  /**
   * Time period during which the patient was present at the location.
   */
  period?: Period | undefined;
  /**
   * The status of the participants' presence at the specified location during the period specified. If the participant is is no longer at the location, then the period will have an end date/time.
   */
  status?: ('planned'|'active'|'reserved'|'completed') | undefined;
  _status?: Element | undefined;
}
/**
 * List of participants involved in the encounter
 */
export interface EncounterParticipant extends BackboneElement {
  /**
   * Persons involved in the encounter other than the patient.
   */
  individual?: Reference | undefined;
  /**
   * The period of time that the specified participant was present during the encounter. These can overlap or be sub-sets of the overall encounters period.
   */
  period?: Period | undefined;
  /**
   * Role of participant in encounter.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * List of past encounter statuses
 */
export interface EncounterStatusHistory extends BackboneElement {
  /**
   * The time that the episode was in the specified status.
   */
  period: Period;
  /**
   * planned | arrived | in-progress | onleave | finished | cancelled.
   */
  status: ('planned'|'arrived'|'in-progress'|'onleave'|'finished'|'cancelled');
  _status?: Element | undefined;
}
export interface Encounter extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Encounter';
  /**
   * The appointment that scheduled this encounter.
   */
  appointment?: Reference | undefined;
  /**
   * inpatient | outpatient | ambulatory | emergency +.
   */
  class?: ('inpatient'|'outpatient'|'ambulatory'|'emergency'|'home'|'field'|'daytime'|'virtual'|'other') | undefined;
  _class?: Element | undefined;
  /**
   * Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care, and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
   */
  episodeOfCare?: Reference[] | undefined;
  /**
   * Details about the admission to a healthcare service.
   */
  hospitalization?: EncounterHospitalization | undefined;
  /**
   * Identifier(s) by which this encounter is known.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The referral request this encounter satisfies (incoming referral).
   */
  incomingReferral?: Reference[] | undefined;
  /**
   * Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
   */
  indication?: Reference[] | undefined;
  /**
   * Quantity of time the encounter lasted. This excludes the time during leaves of absence.
   */
  length?: Quantity | undefined;
  /**
   * List of locations where  the patient has been during this encounter.
   */
  location?: EncounterLocation[] | undefined;
  /**
   * The list of people responsible for providing the service.
   */
  participant?: EncounterParticipant[] | undefined;
  /**
   * Another Encounter of which this encounter is a part of (administratively or in time).
   */
  partOf?: Reference | undefined;
  /**
   * The patient present at the encounter.
   */
  patient?: Reference | undefined;
  /**
   * The start and end time of the encounter.
   */
  period?: Period | undefined;
  /**
   * Indicates the urgency of the encounter.
   */
  priority?: CodeableConcept | undefined;
  /**
   * Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * An organization that is in charge of maintaining the information of this Encounter (e.g. who maintains the report or the master service catalog item, etc.). This MAY be the same as the organization on the Patient record, however it could be different. This MAY not be not the Service Delivery Location's Organization.
   */
  serviceProvider?: Reference | undefined;
  /**
   * planned | arrived | in-progress | onleave | finished | cancelled.
   */
  status: ('planned'|'arrived'|'in-progress'|'onleave'|'finished'|'cancelled');
  _status?: Element | undefined;
  /**
   * The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
   */
  statusHistory?: EncounterStatusHistory[] | undefined;
  /**
   * Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
   */
  type?: CodeableConcept[] | undefined;
}
export interface EnrollmentRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EnrollmentRequest';
  /**
   * Reference to the program or plan identification, underwriter or payor.
   */
  coverage: Reference;
  /**
   * The date when this resource was created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  organization?: Reference | undefined;
  /**
   * The style (standard) and version of the original material which was converted into this resource.
   */
  originalRuleset?: Coding | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: Reference | undefined;
  /**
   * The relationship of the patient to the subscriber.
   */
  relationship: Coding;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding | undefined;
  /**
   * Patient Resource.
   */
  subject: Reference;
  /**
   * The Insurer who is target  of the request.
   */
  target?: Reference | undefined;
}
export interface EnrollmentResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EnrollmentResponse';
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: Reference | undefined;
  /**
   * The style (standard) and version of the original material which was converted into this resource.
   */
  originalRuleset?: Coding | undefined;
  /**
   * Transaction status: error, complete.
   */
  outcome?: ('complete'|'error') | undefined;
  _outcome?: Element | undefined;
  /**
   * Original request resource reference.
   */
  request?: Reference | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference | undefined;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding | undefined;
}
/**
 * Other practitioners facilitating this episode of care
 */
export interface EpisodeOfCareCareTeam extends BackboneElement {
  /**
   * The practitioner (or Organization) within the team.
   */
  member?: Reference | undefined;
  /**
   * The period of time this practitioner is performing some role within the episode of care.
   */
  period?: Period | undefined;
  /**
   * The role this team member is taking within this episode of care.
   */
  role?: CodeableConcept[] | undefined;
}
/**
 * Past list of status codes
 */
export interface EpisodeOfCareStatusHistory extends BackboneElement {
  /**
   * The period during this EpisodeOfCare that the specific status applied.
   */
  period: Period;
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   */
  status: ('planned'|'waitlist'|'active'|'onhold'|'finished'|'cancelled');
  _status?: Element | undefined;
}
export interface EpisodeOfCare extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EpisodeOfCare';
  /**
   * The practitioner that is the care manager/care co-ordinator for this patient.
   */
  careManager?: Reference | undefined;
  /**
   * The list of practitioners that may be facilitating this episode of care for specific purposes.
   */
  careTeam?: EpisodeOfCareCareTeam[] | undefined;
  /**
   * A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
   */
  condition?: Reference[] | undefined;
  /**
   * Identifier(s) by which this EpisodeOfCare is known.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization that has assumed the specific responsibilities for the specified duration.
   */
  managingOrganization?: Reference | undefined;
  /**
   * The patient that this EpisodeOfCare applies to.
   */
  patient: Reference;
  /**
   * The interval during which the managing organization assumes the defined responsibility.
   */
  period?: Period | undefined;
  /**
   * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
   */
  referralRequest?: Reference[] | undefined;
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   */
  status: ('planned'|'waitlist'|'active'|'onhold'|'finished'|'cancelled');
  _status?: Element | undefined;
  /**
   * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
   */
  statusHistory?: EpisodeOfCareStatusHistory[] | undefined;
  /**
   * A classification of the type of encounter; e.g. specialist referral, disease management, type of funded care.
   */
  type?: CodeableConcept[] | undefined;
}
export interface ExplanationOfBenefit extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ExplanationOfBenefit';
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: Reference | undefined;
  /**
   * The style (standard) and version of the original material which was converted into this resource.
   */
  originalRuleset?: Coding | undefined;
  /**
   * Transaction status: error, complete.
   */
  outcome?: ('complete'|'error') | undefined;
  _outcome?: Element | undefined;
  /**
   * Original request resource reference.
   */
  request?: Reference | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference | undefined;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding | undefined;
}
/**
 * Condition that the related person had
 */
export interface FamilyMemberHistoryCondition extends BackboneElement {
  /**
   * The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
   */
  code: CodeableConcept;
  /**
   * An area where general notes can be placed about this specific condition.
   */
  note?: Annotation | undefined;
  /**
   * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
   */
  onsetPeriod?: Period | undefined;
  /**
   * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
   */
  onsetQuantity?: Quantity | undefined;
  /**
   * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
   */
  onsetRange?: Range | undefined;
  /**
   * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
   */
  onsetString?: string | undefined;
  _onsetString?: Element | undefined;
  /**
   * Indicates what happened as a result of this condition.  If the condition resulted in death, deceased date is captured on the relation.
   */
  outcome?: CodeableConcept | undefined;
}
export interface FamilyMemberHistory extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'FamilyMemberHistory';
  /**
   * The actual or approximate age of the relative at the time the family member history is recorded.
   */
  ageQuantity?: Quantity | undefined;
  /**
   * The actual or approximate age of the relative at the time the family member history is recorded.
   */
  ageRange?: Range | undefined;
  /**
   * The actual or approximate age of the relative at the time the family member history is recorded.
   */
  ageString?: string | undefined;
  _ageString?: Element | undefined;
  /**
   * The actual or approximate date of birth of the relative.
   */
  bornString?: string | undefined;
  _bornString?: Element | undefined;
  /**
   * The actual or approximate date of birth of the relative.
   */
  bornPeriod?: Period | undefined;
  /**
   * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
   */
  condition?: FamilyMemberHistoryCondition[] | undefined;
  /**
   * The date (and possibly time) when the family member history was taken.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedBoolean?: boolean | undefined;
  _deceasedBoolean?: Element | undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedString?: string | undefined;
  _deceasedString?: Element | undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedQuantity?: Quantity | undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedRange?: Range | undefined;
  /**
   * Administrative Gender - the gender that the relative is considered to have for administration and record keeping purposes.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * This records identifiers associated with this family member history record that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair".
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
   */
  note?: Annotation | undefined;
  /**
   * The person who this history concerns.
   */
  patient: Reference;
  /**
   * The type of relationship this person has to the patient (father, mother, brother etc.).
   */
  relationship: CodeableConcept;
  /**
   * A code specifying a state of a Family Member History record.
   */
  status: ('partial'|'completed'|'entered-in-error'|'health-unknown');
  _status?: Element | undefined;
}
export interface Flag extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Flag';
  /**
   * The person, organization or device that created the flag.
   */
  author?: Reference | undefined;
  /**
   * Allows an flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.
   */
  category?: CodeableConcept | undefined;
  /**
   * The coded value or textual component of the flag to display to the user.
   */
  code: CodeableConcept;
  /**
   * This alert is only relevant during the encounter.
   */
  encounter?: Reference | undefined;
  /**
   * Identifier assigned to the flag for external use (outside the FHIR environment).
   */
  identifier?: Identifier[] | undefined;
  /**
   * The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
   */
  period?: Period | undefined;
  /**
   * Supports basic workflow.
   */
  status: ('active'|'inactive'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The patient, location, group , organization , or practitioner this is about record this flag is associated with.
   */
  subject: Reference;
}
/**
 * What was end result of goal?
 */
export interface GoalOutcome extends BackboneElement {
  /**
   * Details of what's changed (or not changed).
   */
  resultCodeableConcept?: CodeableConcept | undefined;
  /**
   * Details of what's changed (or not changed).
   */
  resultReference?: Reference | undefined;
}
export interface Goal extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Goal';
  /**
   * The identified conditions and other health record elements that are intended to be addressed by the goal.
   */
  addresses?: Reference[] | undefined;
  /**
   * Indicates whose goal this is - patient goal, practitioner goal, etc.
   */
  author?: Reference | undefined;
  /**
   * Indicates a category the goal falls within.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Human-readable description of a specific desired objective of care.
   */
  description: string;
  _description?: Element | undefined;
  /**
   * This records identifiers associated with this care plan that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Any comments related to the goal.
   */
  note?: Annotation[] | undefined;
  /**
   * Identifies the change (or lack of change) at the point where the goal was deepmed to be cancelled or achieved.
   */
  outcome?: GoalOutcome[] | undefined;
  /**
   * Identifies the mutually agreed level of importance associated with reaching/sustaining the goal.
   */
  priority?: CodeableConcept | undefined;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  startCodeableConcept?: CodeableConcept | undefined;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  startString?: string | undefined;
  _startString?: Element | undefined;
  /**
   * Indicates whether the goal has been reached and is still considered relevant.
   */
  status: ('proposed'|'planned'|'accepted'|'rejected'|'in-progress'|'achieved'|'sustaining'|'on-hold'|'cancelled');
  _status?: Element | undefined;
  /**
   * Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
   */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;
  /**
   * Captures the reason for the current status.
   */
  statusReason?: CodeableConcept | undefined;
  /**
   * Identifies the patient, group or organization for whom the goal is being established.
   */
  subject?: Reference | undefined;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  targetString?: string | undefined;
  _targetString?: Element | undefined;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  targetQuantity?: Quantity | undefined;
}
/**
 * Trait of group members
 */
export interface GroupCharacteristic extends BackboneElement {
  /**
   * A code that identifies the kind of trait being asserted.
   */
  code: CodeableConcept;
  /**
   * If true, indicates the characteristic is one that is NOT held by members of the group.
   */
  exclude: boolean;
  _exclude?: Element | undefined;
  /**
   * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
   */
  period?: Period | undefined;
  /**
   * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
   */
  valueRange?: Range | undefined;
}
/**
 * Who or what is in group
 */
export interface GroupMember extends BackboneElement {
  /**
   * A reference to the entity that is a member of the group. Must be consistent with Group.type.
   */
  entity: Reference;
  /**
   * A flag to indicate that the member is no longer in the group, but previously may have been a member.
   */
  inactive?: boolean | undefined;
  _inactive?: Element | undefined;
  /**
   * The period that the member was in the group, if known.
   */
  period?: Period | undefined;
}
export interface Group extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Group';
  /**
   * If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
   */
  actual: boolean;
  _actual?: Element | undefined;
  /**
   * Identifies the traits shared by members of the group.
   */
  characteristic?: GroupCharacteristic[] | undefined;
  /**
   * Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
   */
  code?: CodeableConcept | undefined;
  /**
   * A unique business identifier for this group.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies the resource instances that are members of the group.
   */
  member?: GroupMember[] | undefined;
  /**
   * A label assigned to the group for human identification and communication.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A count of the number of resource instances that are part of the group.
   */
  quantity?: number | undefined;
  /**
   * Identifies the broad classification of the kind of resources the group includes.
   */
  type: ('person'|'animal'|'practitioner'|'device'|'medication'|'substance');
  _type?: Element | undefined;
}
/**
 * Times the Service Site is available
 */
export interface HealthcareServiceAvailableTime extends BackboneElement {
  /**
   * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
   */
  allDay?: boolean | undefined;
  _allDay?: Element | undefined;
  /**
   * The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
   */
  availableEndTime?: string | undefined;
  _availableEndTime?: Element | undefined;
  /**
   * The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
   */
  availableStartTime?: string | undefined;
  _availableStartTime?: Element | undefined;
  /**
   * Indicates which days of the week are available between the start and end Times.
   */
  daysOfWeek?: ('mon'|'tue'|'wed'|'thu'|'fri'|'sat'|'sun')[] | undefined;
  _daysOfWeek?: Element[] | undefined;
}
/**
 * Not available during this time due to provided reason
 */
export interface HealthcareServiceNotAvailable extends BackboneElement {
  /**
   * The reason that can be presented to the user as to why this time is not available.
   */
  description: string;
  _description?: Element | undefined;
  /**
   * Service is not available (seasonally or for a public holiday) from this date.
   */
  during?: Period | undefined;
}
/**
 * Specific service delivered or performed
 */
export interface HealthcareServiceServiceType extends BackboneElement {
  /**
   * Collection of specialties handled by the service site. This is more of a medical term.
   */
  specialty?: CodeableConcept[] | undefined;
  /**
   * The specific type of service being delivered or performed.
   */
  type: CodeableConcept;
}
export interface HealthcareService extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'HealthcareService';
  /**
   * Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
   */
  appointmentRequired?: boolean | undefined;
  _appointmentRequired?: Element | undefined;
  /**
   * A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
   */
  availabilityExceptions?: string | undefined;
  _availabilityExceptions?: Element | undefined;
  /**
   * A collection of times that the Service Site is available.
   */
  availableTime?: HealthcareServiceAvailableTime[] | undefined;
  /**
   * Collection of characteristics (attributes).
   */
  characteristic?: CodeableConcept[] | undefined;
  /**
   * Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * The location(s) that this service is available to (not where the service is provided).
   */
  coverageArea?: Reference[] | undefined;
  /**
   * Does this service have specific eligibility requirements that need to be met in order to use the service?
   */
  eligibility?: CodeableConcept | undefined;
  /**
   * Describes the eligibility conditions for the service.
   */
  eligibilityNote?: string | undefined;
  _eligibilityNote?: Element | undefined;
  /**
   * Extra details about the service that can't be placed in the other fields.
   */
  extraDetails?: string | undefined;
  _extraDetails?: Element | undefined;
  /**
   * External identifiers for this item.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The location where this healthcare service may be provided.
   */
  location: Reference;
  /**
   * The HealthcareService is not available during this period of time due to the provided reason.
   */
  notAvailable?: HealthcareServiceNotAvailable[] | undefined;
  /**
   * If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
   */
  photo?: Attachment | undefined;
  /**
   * Program Names that can be used to categorize the service.
   */
  programName?: string[] | undefined;
  _programName?: Element[] | undefined;
  /**
   * The organization that provides this healthcare service.
   */
  providedBy?: Reference | undefined;
  /**
   * The public part of the 'keys' allocated to an Organization by an accredited body to support secure exchange of data over the internet. To be provided by the Organization, where available.
   */
  publicKey?: string | undefined;
  _publicKey?: Element | undefined;
  /**
   * Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
   */
  referralMethod?: CodeableConcept[] | undefined;
  /**
   * Identifies the broad category of service being performed or delivered.
   */
  serviceCategory?: CodeableConcept | undefined;
  /**
   * Further description of the service as it would be presented to a consumer while searching.
   */
  serviceName?: string | undefined;
  _serviceName?: Element | undefined;
  /**
   * The code(s) that detail the conditions under which the healthcare service is available/offered.
   */
  serviceProvisionCode?: CodeableConcept[] | undefined;
  /**
   * A specific type of service that may be delivered or performed.
   */
  serviceType?: HealthcareServiceServiceType[] | undefined;
  /**
   * List of contacts related to this specific healthcare service.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * The frame set
 */
export interface ImagingObjectSelectionStudySeriesInstanceFrames extends BackboneElement {
  /**
   * The frame numbers in the frame set.
   */
  frameNumbers: number[];
  /**
   * WADO-RS URL to retrieve the DICOM frames.
   */
  url: string;
  _url?: Element | undefined;
}
/**
 * The selected instance
 */
export interface ImagingObjectSelectionStudySeriesInstance extends BackboneElement {
  /**
   * Identity and location information of the frames in the selected instance.
   */
  frames?: ImagingObjectSelectionStudySeriesInstanceFrames[] | undefined;
  /**
   * SOP class UID of the selected instance.
   */
  sopClass: string;
  _sopClass?: Element | undefined;
  /**
   * SOP Instance UID of the selected instance.
   */
  uid: string;
  _uid?: Element | undefined;
  /**
   * WADO-RS URL to retrieve the DICOM SOP Instance.
   */
  url: string;
  _url?: Element | undefined;
}
/**
 * Series identity of the selected instances
 */
export interface ImagingObjectSelectionStudySeries extends BackboneElement {
  /**
   * Identity and locating information of the selected DICOM SOP instances.
   */
  instance: ImagingObjectSelectionStudySeriesInstance[];
  /**
   * Series instance UID of the SOP instances in the selection.
   */
  uid?: string | undefined;
  _uid?: Element | undefined;
  /**
   * WADO-RS URL to retrieve the series. Note that this URL retrieves all SOP instances of the series not only those in the selection.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * Study identity of the selected instances
 */
export interface ImagingObjectSelectionStudy extends BackboneElement {
  /**
   * Reference to the Imaging Study in FHIR form.
   */
  imagingStudy?: Reference | undefined;
  /**
   * Series identity and locating information of the DICOM SOP instances in the selection.
   */
  series: ImagingObjectSelectionStudySeries[];
  /**
   * Study instance UID of the SOP instances in the selection.
   */
  uid: string;
  _uid?: Element | undefined;
  /**
   * WADO-RS URL to retrieve the study. Note that this URL retrieves all SOP instances of the study, not only those in the selection.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
export interface ImagingObjectSelection extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImagingObjectSelection';
  /**
   * Author of ImagingObjectSelection. It can be a human author or a device which made the decision of the SOP instances selected. For example, a radiologist selected a set of imaging SOP instances to attach in a diagnostic report, and a CAD application may author a selection to describe SOP instances it used to generate a detection conclusion.
   */
  author?: Reference | undefined;
  /**
   * Date and time when the selection of the referenced instances were made. It is (typically) different from the creation date of the selection resource, and from dates associated with the referenced instances (e.g. capture time of the referenced image).
   */
  authoringTime?: string | undefined;
  _authoringTime?: Element | undefined;
  /**
   * Text description of the DICOM SOP instances selected in the ImagingObjectSelection. This should be aligned with the content of the title element, and can provide further explanation of the SOP instances in the selection.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A patient resource reference which is the patient subject of all DICOM SOP Instances in this ImagingObjectSelection.
   */
  patient: Reference;
  /**
   * Study identity and locating information of the DICOM SOP instances in the selection.
   */
  study: ImagingObjectSelectionStudy[];
  /**
   * The reason for, or significance of, the selection of objects referenced in the resource.
   */
  title: CodeableConcept;
  /**
   * Instance UID of the DICOM KOS SOP Instances represented in this resource.
   */
  uid: string;
  _uid?: Element | undefined;
}
/**
 * A single SOP instance from the series
 */
export interface ImagingStudySeriesInstance extends BackboneElement {
  /**
   * Content of the instance or a rendering thereof (e.g. a JPEG of an image, or an XML of a structured report). May be represented for example by inline encoding; by a URL reference to a WADO-RS service that makes the instance available; or to a FHIR Resource (e.g. Media, Document, etc.). Multiple content attachments may be used for alternate representations of the instance.
   */
  content?: Attachment[] | undefined;
  /**
   * The number of instance in the series.
   */
  number?: number | undefined;
  /**
   * DICOM instance  type.
   */
  sopClass: string;
  _sopClass?: Element | undefined;
  /**
   * The description of the instance.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * A human-friendly SOP Class name.
   */
  type?: string | undefined;
  _type?: Element | undefined;
  /**
   * Formal identifier for this image or other content.
   */
  uid: string;
  _uid?: Element | undefined;
}
/**
 * Each study has one or more series of instances
 */
export interface ImagingStudySeries extends BackboneElement {
  /**
   * Availability of series (online, offline or nearline).
   */
  availability?: ('ONLINE'|'OFFLINE'|'NEARLINE'|'UNAVAILABLE') | undefined;
  _availability?: Element | undefined;
  /**
   * Body part examined. See  DICOM Part 16 Annex L for the mapping from DICOM to Snomed CT.
   */
  bodySite?: Coding | undefined;
  /**
   * A description of the series.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A single SOP Instance within the series, e.g. an image, or presentation state.
   */
  instance?: ImagingStudySeriesInstance[] | undefined;
  /**
   * Laterality if body site is paired anatomic structure and laterality is not pre-coordinated in body site code.
   */
  laterality?: Coding | undefined;
  /**
   * The modality of this series sequence.
   */
  modality: Coding;
  /**
   * The Numeric identifier of this series in the study.
   */
  number?: number | undefined;
  /**
   * Number of SOP Instances in Series.
   */
  numberOfInstances: number;
  /**
   * The date and time the series was started.
   */
  started?: string | undefined;
  _started?: Element | undefined;
  /**
   * Formal identifier for this series.
   */
  uid: string;
  _uid?: Element | undefined;
  /**
   * URI/URL specifying the location of the referenced series using WADO-RS.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
export interface ImagingStudy extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImagingStudy';
  /**
   * Accession Number is an identifier related to some aspect of imaging workflow and data management. Usage may vary across different institutions.  See for instance [IHE Radiology Technical Framework Volume 1 Appendix A](http://www.ihe.net/uploadedFiles/Documents/Radiology/IHE_RAD_TF_Rev13.0_Vol1_FT_2014-07-30.pdf).
   */
  accession?: Identifier | undefined;
  /**
   * Availability of study (online, offline or nearline).
   */
  availability?: ('ONLINE'|'OFFLINE'|'NEARLINE'|'UNAVAILABLE') | undefined;
  _availability?: Element | undefined;
  /**
   * Institution-generated description or classification of the Study performed.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Other identifiers for the study.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Who read the study and interpreted the images or other content.
   */
  interpreter?: Reference | undefined;
  /**
   * A list of all the Series.ImageModality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
   */
  modalityList?: Coding[] | undefined;
  /**
   * Number of SOP Instances in Study.
   */
  numberOfInstances: number;
  /**
   * Number of Series in Study.
   */
  numberOfSeries: number;
  /**
   * A list of the diagnostic orders that resulted in this imaging study being performed.
   */
  order?: Reference[] | undefined;
  /**
   * The patient imaged in the study.
   */
  patient: Reference;
  /**
   * Type of procedure performed.
   */
  procedure?: Reference[] | undefined;
  /**
   * The requesting/referring physician.
   */
  referrer?: Reference | undefined;
  /**
   * Each study has one or more series of images or other content.
   */
  series?: ImagingStudySeries[] | undefined;
  /**
   * Date and Time the study started.
   */
  started?: string | undefined;
  _started?: Element | undefined;
  /**
   * Formal identifier for the study.
   */
  uid: string;
  _uid?: Element | undefined;
  /**
   * WADO-RS resource where Study is available.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * Administration/non-administration reasons
 */
export interface ImmunizationExplanation extends BackboneElement {
  /**
   * Reasons why a vaccine was administered.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * Reason why a vaccine was not administered.
   */
  reasonNotGiven?: CodeableConcept[] | undefined;
}
/**
 * Details of a reaction that follows immunization
 */
export interface ImmunizationReaction extends BackboneElement {
  /**
   * Date of reaction to the immunization.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Details of the reaction.
   */
  detail?: Reference | undefined;
  /**
   * Self-reported indicator.
   */
  reported?: boolean | undefined;
  _reported?: Element | undefined;
}
/**
 * What protocol was followed
 */
export interface ImmunizationVaccinationProtocol extends BackboneElement {
  /**
   * Indicates the authority who published the protocol.  E.g. ACIP.
   */
  authority?: Reference | undefined;
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Nominal position in a series.
   */
  doseSequence: number;
  /**
   * Indicates if the immunization event should "count" against  the protocol.
   */
  doseStatus: CodeableConcept;
  /**
   * Provides an explanation as to why an immunization event should or should not count against the protocol.
   */
  doseStatusReason?: CodeableConcept | undefined;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string | undefined;
  _series?: Element | undefined;
  /**
   * The recommended number of doses to achieve immunity.
   */
  seriesDoses?: number | undefined;
  /**
   * The targeted disease.
   */
  targetDisease: CodeableConcept[];
}
export interface Immunization extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Immunization';
  /**
   * Date vaccine administered or was to be administered.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The quantity of vaccine product that was administered.
   */
  doseQuantity?: Quantity | undefined;
  /**
   * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
   */
  encounter?: Reference | undefined;
  /**
   * Date vaccine batch expires.
   */
  expirationDate?: string | undefined;
  _expirationDate?: Element | undefined;
  /**
   * Reasons why a vaccine was or was not administered.
   */
  explanation?: ImmunizationExplanation | undefined;
  /**
   * A unique identifier assigned to this immunization record.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The service delivery location where the vaccine administration occurred.
   */
  location?: Reference | undefined;
  /**
   * Lot number of the  vaccine product.
   */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;
  /**
   * Name of vaccine manufacturer.
   */
  manufacturer?: Reference | undefined;
  /**
   * Extra information about the immunization that is not conveyed by the other attributes.
   */
  note?: Annotation[] | undefined;
  /**
   * The patient who either received or did not receive the immunization.
   */
  patient: Reference;
  /**
   * Clinician who administered the vaccine.
   */
  performer?: Reference | undefined;
  /**
   * Categorical data indicating that an adverse event is associated in time to an immunization.
   */
  reaction?: ImmunizationReaction[] | undefined;
  /**
   * True if this administration was reported rather than directly administered.
   */
  reported: boolean;
  _reported?: Element | undefined;
  /**
   * Clinician who ordered the vaccination.
   */
  requester?: Reference | undefined;
  /**
   * The path by which the vaccine product is taken into the body.
   */
  route?: CodeableConcept | undefined;
  /**
   * Body site where vaccine was administered.
   */
  site?: CodeableConcept | undefined;
  /**
   * Indicates the current status of the vaccination event.
   */
  status: ('in-progress'|'on-hold'|'completed'|'entered-in-error'|'stopped');
  _status?: Element | undefined;
  /**
   * Contains information about the protocol(s) under which the vaccine was administered.
   */
  vaccinationProtocol?: ImmunizationVaccinationProtocol[] | undefined;
  /**
   * Vaccine that was administered or was to be administered.
   */
  vaccineCode: CodeableConcept;
  /**
   * Indicates if the vaccination was or was not given.
   */
  wasNotGiven: boolean;
  _wasNotGiven?: Element | undefined;
}
/**
 * Dates governing proposed immunization
 */
export interface ImmunizationRecommendationRecommendationDateCriterion extends BackboneElement {
  /**
   * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
   */
  code: CodeableConcept;
  /**
   * The date whose meaning is specified by dateCriterion.code.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Protocol used by recommendation
 */
export interface ImmunizationRecommendationRecommendationProtocol extends BackboneElement {
  /**
   * Indicates the authority who published the protocol.  For example, ACIP.
   */
  authority?: Reference | undefined;
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Indicates the nominal position in a series of the next dose.  This is the recommended dose number as per a specified protocol.
   */
  doseSequence?: number | undefined;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string | undefined;
  _series?: Element | undefined;
}
/**
 * Vaccine administration recommendations
 */
export interface ImmunizationRecommendationRecommendation extends BackboneElement {
  /**
   * The date the immunization recommendation was created.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
   */
  dateCriterion?: ImmunizationRecommendationRecommendationDateCriterion[] | undefined;
  /**
   * This indicates the next recommended dose number (e.g. dose 2 is the next recommended dose).
   */
  doseNumber?: number | undefined;
  /**
   * Vaccine administration status.
   */
  forecastStatus: CodeableConcept;
  /**
   * Contains information about the protocol under which the vaccine was administered.
   */
  protocol?: ImmunizationRecommendationRecommendationProtocol | undefined;
  /**
   * Immunization event history that supports the status and recommendation.
   */
  supportingImmunization?: Reference[] | undefined;
  /**
   * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
   */
  supportingPatientInformation?: Reference[] | undefined;
  /**
   * Vaccine that pertains to the recommendation.
   */
  vaccineCode: CodeableConcept;
}
export interface ImmunizationRecommendation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImmunizationRecommendation';
  /**
   * A unique identifier assigned to this particular recommendation record.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The patient for whom the recommendations are for.
   */
  patient: Reference;
  /**
   * Vaccine administration recommendations.
   */
  recommendation: ImmunizationRecommendationRecommendation[];
}
/**
 * Contact details of the publisher
 */
export interface ImplementationGuideContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the implementation guide.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Another Implementation guide this depends on
 */
export interface ImplementationGuideDependency extends BackboneElement {
  /**
   * How the dependency is represented when the guide is published.
   */
  type: ('reference'|'inclusion');
  _type?: Element | undefined;
  /**
   * Where the dependency is located.
   */
  uri: string;
  _uri?: Element | undefined;
}
/**
 * Profiles that apply globally
 */
export interface ImplementationGuideGlobal extends BackboneElement {
  /**
   * A reference to the profile that all instances must conform to.
   */
  profile: Reference;
  /**
   * The type of resource that all instances must conform to.
   */
  type: ('Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription');
  _type?: Element | undefined;
}
/**
 * Resource in the implementation guide
 */
export interface ImplementationGuidePackageResource extends BackboneElement {
  /**
   * A short code that may be used to identify the resource throughout the implementation guide.
   */
  acronym?: string | undefined;
  _acronym?: Element | undefined;
  /**
   * A description of the reason that a resource has been included in the implementation guide.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Another resource that this resource is an example for. This is mostly used for resources that are included as examples of StructureDefinitions.
   */
  exampleFor?: Reference | undefined;
  /**
   * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Why the resource is included in the guide.
   */
  purpose: ('example'|'terminology'|'profile'|'extension'|'dictionary'|'logical');
  _purpose?: Element | undefined;
  /**
   * Where this resource is found.
   */
  sourceReference?: Reference | undefined;
  /**
   * Where this resource is found.
   */
  sourceString?: string | undefined;
  _sourceString?: Element | undefined;
}
/**
 * Group of resources as used in .page.package
 */
export interface ImplementationGuidePackage extends BackboneElement {
  /**
   * Human readable text describing the package.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The name for the group, as used in page.package.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, conformance statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
   */
  resource: ImplementationGuidePackageResource[];
}
/**
 * Page/Section in the Guide
 */
export interface ImplementationGuidePage extends BackboneElement {
  /**
   * The format of the page.
   */
  format?: string | undefined;
  _format?: Element | undefined;
  /**
   * The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
   */
  kind: ('page'|'example'|'list'|'include'|'directory'|'dictionary'|'toc'|'resource');
  _kind?: Element | undefined;
  /**
   * A short name used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * For constructed pages, a list of packages to include in the page (or else empty for everything).
   */
  package?: string[] | undefined;
  _package?: Element[] | undefined;
  /**
   * Nested Pages/Sections under this page.
   */
  page?: ImplementationGuidePage[] | undefined;
  /**
   * The source address for the page.
   */
  source: string;
  _source?: Element | undefined;
  /**
   * For constructed pages, what kind of resources to include in the list.
   */
  type?: ('Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription')[] | undefined;
  _type?: Element[] | undefined;
}
export interface ImplementationGuide extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImplementationGuide';
  /**
   * A binary file that is included in the  implementation guide when it is published.
   */
  binary?: string[] | undefined;
  _binary?: Element[] | undefined;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: ImplementationGuideContact[] | undefined;
  /**
   * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date this version of the implementation guide was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
   */
  dependency?: ImplementationGuideDependency[] | undefined;
  /**
   * A free text natural language description of the Implementation Guide and its use.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * This Implementation Guide was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * The version of the FHIR specification on which this ImplementationGuide is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 1.0.2 for this version.
   */
  fhirVersion?: string | undefined;
  _fhirVersion?: Element | undefined;
  /**
   * A set of profiles that all resources covered by this implementation guide must conform to.
   */
  global?: ImplementationGuideGlobal[] | undefined;
  /**
   * A free text natural language name identifying the Implementation Guide.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * A logical group of resources. Logical groups can be used when building pages.
   */
  package: ImplementationGuidePackage[];
  /**
   * A page / section in the implementation guide. The root page is the implementation guide home page.
   */
  page: ImplementationGuidePage;
  /**
   * The name of the individual or organization that published the implementation guide.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * The status of the Implementation Guide.
   */
  status: ('draft'|'active'|'retired');
  _status?: Element | undefined;
  /**
   * An absolute URL that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this implementation guide is (or will be) published.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of implementation guides. The most common use of this element is to represent the country / jurisdiction for which this implementation guide was defined.
   */
  useContext?: CodeableConcept[] | undefined;
  /**
   * The identifier that is used to identify this version of the Implementation Guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Implementation Guide author manually.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Entries in the list
 */
export interface ListEntry extends BackboneElement {
  /**
   * When this item was added to the list.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * True if this item is marked as deleted in the list.
   */
  deleted?: boolean | undefined;
  _deleted?: Element | undefined;
  /**
   * The flag allows the system constructing the list to indicate the role and significance of the item in the list.
   */
  flag?: CodeableConcept | undefined;
  /**
   * A reference to the actual resource from which data was derived.
   */
  item: Reference;
}
export interface List extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'List';
  /**
   * This code defines the purpose of the list - why it was created.
   */
  code?: CodeableConcept | undefined;
  /**
   * The date that the list was prepared.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * If the list is empty, why the list is empty.
   */
  emptyReason?: CodeableConcept | undefined;
  /**
   * The encounter that is the context in which this list was created.
   */
  encounter?: Reference | undefined;
  /**
   * Entries in this list.
   */
  entry?: ListEntry[] | undefined;
  /**
   * Identifier for the List assigned for business purposes outside the context of FHIR.
   */
  identifier?: Identifier[] | undefined;
  /**
   * How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
   */
  mode: ('working'|'snapshot'|'changes');
  _mode?: Element | undefined;
  /**
   * Comments that apply to the overall list.
   */
  note?: string | undefined;
  _note?: Element | undefined;
  /**
   * What order applies to the items in the list.
   */
  orderedBy?: CodeableConcept | undefined;
  /**
   * The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list.
   */
  source?: Reference | undefined;
  /**
   * Indicates the current state of this list.
   */
  status: ('current'|'retired'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The common subject (or patient) of the resources that are in the list, if there is one.
   */
  subject?: Reference | undefined;
  /**
   * A label for the list assigned by the author.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * The absolute geographic location
 */
export interface LocationPosition extends BackboneElement {
  /**
   * Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).
   */
  altitude?: number | undefined;
  /**
   * Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below).
   */
  latitude: number;
  /**
   * Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below).
   */
  longitude: number;
}
export interface Location extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Location';
  /**
   * Physical location.
   */
  address?: Address | undefined;
  /**
   * Description of the Location, which helps in finding or referencing the place.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Unique code or number identifying the location to its users.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization responsible for the provisioning and upkeep of the location.
   */
  managingOrganization?: Reference | undefined;
  /**
   * Indicates whether a resource instance represents a specific location or a class of locations.
   */
  mode?: ('instance'|'kind') | undefined;
  _mode?: Element | undefined;
  /**
   * Name of the location as used by humans. Does not need to be unique.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Another Location which this Location is physically part of.
   */
  partOf?: Reference | undefined;
  /**
   * Physical form of the location, e.g. building, room, vehicle, road.
   */
  physicalType?: CodeableConcept | undefined;
  /**
   * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
   */
  position?: LocationPosition | undefined;
  /**
   * active | suspended | inactive.
   */
  status?: ('active'|'suspended'|'inactive') | undefined;
  _status?: Element | undefined;
  /**
   * The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
   */
  telecom?: ContactPoint[] | undefined;
  /**
   * Indicates the type of function performed at the location.
   */
  type?: CodeableConcept | undefined;
}
export interface Media extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Media';
  /**
   * The actual content of the media - inline or by direct reference to the media source file.
   */
  content: Attachment;
  /**
   * The name of the device / manufacturer of the device  that was used to make the recording.
   */
  deviceName?: string | undefined;
  _deviceName?: Element | undefined;
  /**
   * The duration of the recording in seconds - for audio and video.
   */
  duration?: number | undefined;
  /**
   * The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
   */
  frames?: number | undefined;
  /**
   * Height of the image in pixels (photo/video).
   */
  height?: number | undefined;
  /**
   * Identifiers associated with the image - these may include identifiers for the image itself, identifiers for the context of its collection (e.g. series ids) and context ids such as accession numbers or other workflow identifiers.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The person who administered the collection of the image.
   */
  operator?: Reference | undefined;
  /**
   * Who/What this Media is a record of.
   */
  subject?: Reference | undefined;
  /**
   * Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
   */
  subtype?: CodeableConcept | undefined;
  /**
   * Whether the media is a photo (still image), an audio recording, or a video recording.
   */
  type: ('photo'|'video'|'audio');
  _type?: Element | undefined;
  /**
   * The name of the imaging view e.g. Lateral or Antero-posterior (AP).
   */
  view?: CodeableConcept | undefined;
  /**
   * Width of the image in pixels (photo/video).
   */
  width?: number | undefined;
}
/**
 * What is  in the package
 */
export interface MedicationPackageContent extends BackboneElement {
  /**
   * The amount of the product that is in the package.
   */
  amount?: Quantity | undefined;
  /**
   * Identifies one of the items in the package.
   */
  item: Reference;
}
/**
 * Details about packaged medications
 */
export interface MedicationPackage extends BackboneElement {
  /**
   * The kind of container that this package comes as.
   */
  container?: CodeableConcept | undefined;
  /**
   * A set of components that go to make up the described item.
   */
  content?: MedicationPackageContent[] | undefined;
}
export interface MedicationProductBatch extends BackboneElement {
  /**
   * When this specific batch of product will expire.
   */
  expirationDate?: string | undefined;
  _expirationDate?: Element | undefined;
  /**
   * The assigned lot number of a batch of the specified product.
   */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;
}
/**
 * Active or inactive ingredient
 */
export interface MedicationProductIngredient extends BackboneElement {
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.
   */
  amount?: Ratio | undefined;
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication.
   */
  item: Reference;
}
/**
 * Administrable medication details
 */
export interface MedicationProduct extends BackboneElement {
  /**
   * Information about a group of medication produced or packaged from one production run.
   */
  batch?: MedicationProductBatch[] | undefined;
  /**
   * Describes the form of the item.  Powder; tablets; carton.
   */
  form?: CodeableConcept | undefined;
  /**
   * Identifies a particular constituent of interest in the product.
   */
  ingredient?: MedicationProductIngredient[] | undefined;
}
export interface Medication extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Medication';
  /**
   * A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
   */
  code?: CodeableConcept | undefined;
  /**
   * Set to true if the item is attributable to a specific manufacturer.
   */
  isBrand?: boolean | undefined;
  _isBrand?: Element | undefined;
  /**
   * Describes the details of the manufacturer.
   */
  manufacturer?: Reference | undefined;
  /**
   * Information that only applies to packages (not products).
   */
  package?: MedicationPackage | undefined;
  /**
   * Information that only applies to products (not packages).
   */
  product?: MedicationProduct | undefined;
}
/**
 * Details of how medication was taken
 */
export interface MedicationAdministrationDosage extends BackboneElement {
  /**
   * A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
   */
  method?: CodeableConcept | undefined;
  /**
   * The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.
   */
  quantity?: Quantity | undefined;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Currently we do not specify a default of '1' in the denominator, but this is being discussed.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRange?: Range | undefined;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Currently we do not specify a default of '1' in the denominator, but this is being discussed.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRatio?: Ratio | undefined;
  /**
   * A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.
   */
  route?: CodeableConcept | undefined;
  /**
   * A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
   */
  siteCodeableConcept?: CodeableConcept | undefined;
  /**
   * A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
   */
  siteReference?: Reference | undefined;
  /**
   * Free text dosage instructions can be used for cases where the instructions are too complex to code. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication.
   */
  text?: string | undefined;
  _text?: Element | undefined;
}
export interface MedicationAdministration extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationAdministration';
  /**
   * The device used in administering the medication to the patient.  For example, a particular infusion pump.
   */
  device?: Reference[] | undefined;
  /**
   * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
   */
  dosage?: MedicationAdministrationDosage | undefined;
  /**
   * A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
   */
  effectiveTimeString?: string | undefined;
  _effectiveTimeString?: Element | undefined;
  /**
   * A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
   */
  effectiveTimePeriod?: Period | undefined;
  /**
   * The visit, admission or other contact between patient and health care provider the medication administration was performed as part of.
   */
  encounter?: Reference | undefined;
  /**
   * External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationReference?: Reference | undefined;
  /**
   * Extra information about the medication administration that is not conveyed by the other attributes.
   */
  note?: string | undefined;
  _note?: Element | undefined;
  /**
   * The person or animal receiving the medication.
   */
  patient: Reference;
  /**
   * The individual who was responsible for giving the medication to the patient.
   */
  practitioner?: Reference | undefined;
  /**
   * The original request, instruction or authority to perform the administration.
   */
  prescription?: Reference | undefined;
  /**
   * A code indicating why the medication was given.
   */
  reasonGiven?: CodeableConcept[] | undefined;
  /**
   * A code indicating why the administration was not performed.
   */
  reasonNotGiven?: CodeableConcept[] | undefined;
  /**
   * Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions it is possible for an administration to be started but not completed or it may be paused while some other process is under way.
   */
  status: ('in-progress'|'on-hold'|'completed'|'entered-in-error'|'stopped');
  _status?: Element | undefined;
  /**
   * Set this to true if the record is saying that the medication was NOT administered.
   */
  wasNotGiven?: boolean | undefined;
  _wasNotGiven?: Element | undefined;
}
/**
 * Medicine administration instructions to the patient/caregiver
 */
export interface MedicationDispenseDosageInstruction extends BackboneElement {
  /**
   * Additional instructions such as "Swallow with plenty of water" which may or may not be coded.
   */
  additionalInstructions?: CodeableConcept | undefined;
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
   */
  asNeededBoolean?: boolean | undefined;
  _asNeededBoolean?: Element | undefined;
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
   */
  asNeededCodeableConcept?: CodeableConcept | undefined;
  /**
   * The amount of therapeutic or other substance given at one administration event.
   */
  doseQuantity?: Quantity | undefined;
  /**
   * The amount of therapeutic or other substance given at one administration event.
   */
  doseRange?: Range | undefined;
  /**
   * The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time,  e.g. 1000mg in 24 hours.
   */
  maxDosePerPeriod?: Ratio | undefined;
  /**
   * A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.
   */
  method?: CodeableConcept | undefined;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRange?: Range | undefined;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRatio?: Ratio | undefined;
  /**
   * A code specifying the route or physiological path of administration of a therapeutic agent into or onto a subject.
   */
  route?: CodeableConcept | undefined;
  /**
   * A coded specification of the anatomic site where the medication first enters the body.
   */
  siteCodeableConcept?: CodeableConcept | undefined;
  /**
   * A coded specification of the anatomic site where the medication first enters the body.
   */
  siteReference?: Reference | undefined;
  /**
   * Free text dosage instructions can be used for cases where the instructions are too complex to code. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The timing schedule for giving the medication to the patient.  The Schedule data type allows many different expressions.  For example, "Every  8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:";  "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  timing?: Timing | undefined;
}
/**
 * Deals with substitution of one medicine for another
 */
export interface MedicationDispenseSubstitution extends BackboneElement {
  /**
   * Indicates the reason for the substitution of (or lack of substitution) from what was prescribed.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * The person or organization that has primary responsibility for the substitution.
   */
  responsibleParty?: Reference[] | undefined;
  /**
   * A code signifying whether a different drug was dispensed from what was prescribed.
   */
  type: CodeableConcept;
}
export interface MedicationDispense extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationDispense';
  /**
   * Indicates the medication order that is being dispensed against.
   */
  authorizingPrescription?: Reference[] | undefined;
  /**
   * The amount of medication expressed as a timing amount.
   */
  daysSupply?: Quantity | undefined;
  /**
   * Identification of the facility/location where the medication was shipped to, as part of the dispense event.
   */
  destination?: Reference | undefined;
  /**
   * The individual responsible for dispensing the medication.
   */
  dispenser?: Reference | undefined;
  /**
   * Indicates how the medication is to be used by the patient.
   */
  dosageInstruction?: MedicationDispenseDosageInstruction[] | undefined;
  /**
   * Identifier assigned by the dispensing facility - this is an identifier assigned outside FHIR.
   */
  identifier?: Identifier | undefined;
  /**
   * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationReference?: Reference | undefined;
  /**
   * Extra information about the dispense that could not be conveyed in the other attributes.
   */
  note?: string | undefined;
  _note?: Element | undefined;
  /**
   * A link to a resource representing the person to whom the medication will be given.
   */
  patient?: Reference | undefined;
  /**
   * The amount of medication that has been dispensed. Includes unit of measure.
   */
  quantity?: Quantity | undefined;
  /**
   * Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
   */
  receiver?: Reference[] | undefined;
  /**
   * A code specifying the state of the set of dispense events.
   */
  status?: ('in-progress'|'on-hold'|'completed'|'entered-in-error'|'stopped') | undefined;
  _status?: Element | undefined;
  /**
   * Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.
   */
  substitution?: MedicationDispenseSubstitution | undefined;
  /**
   * Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  type?: CodeableConcept | undefined;
  /**
   * The time the dispensed product was provided to the patient or their representative.
   */
  whenHandedOver?: string | undefined;
  _whenHandedOver?: Element | undefined;
  /**
   * The time when the dispensed product was packaged and reviewed.
   */
  whenPrepared?: string | undefined;
  _whenPrepared?: Element | undefined;
}
/**
 * Medication supply authorization
 */
export interface MedicationOrderDispenseRequest extends BackboneElement {
  /**
   * Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
   */
  expectedSupplyDuration?: Quantity | undefined;
  /**
   * Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationReference?: Reference | undefined;
  /**
   * An integer indicating the number of additional times (aka refills or repeats) the patient can receive the prescribed medication.   Usage Notes: This integer does NOT include the original order dispense.   This means that if an order indicates dispense 30 tablets plus  "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.
   */
  numberOfRepeatsAllowed?: number | undefined;
  /**
   * The amount that is to be dispensed for one fill.
   */
  quantity?: Quantity | undefined;
  /**
   * This indicates the validity period of a prescription (stale dating the Prescription).
   */
  validityPeriod?: Period | undefined;
}
/**
 * How medication should be taken
 */
export interface MedicationOrderDosageInstruction extends BackboneElement {
  /**
   * Additional instructions such as "Swallow with plenty of water" which may or may not be coded.
   */
  additionalInstructions?: CodeableConcept | undefined;
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
   */
  asNeededBoolean?: boolean | undefined;
  _asNeededBoolean?: Element | undefined;
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
   */
  asNeededCodeableConcept?: CodeableConcept | undefined;
  /**
   * The amount of therapeutic or other substance given at one administration event.
   */
  doseQuantity?: Quantity | undefined;
  /**
   * The amount of therapeutic or other substance given at one administration event.
   */
  doseRange?: Range | undefined;
  /**
   * The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time.  For example, 1000mg in 24 hours.
   */
  maxDosePerPeriod?: Ratio | undefined;
  /**
   * A coded value indicating the method by which the medication is introduced into or onto the body. Most commonly used for injections.  For examples, Slow Push; Deep IV.
   */
  method?: CodeableConcept | undefined;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRange?: Range | undefined;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRatio?: Ratio | undefined;
  /**
   * A code specifying the route or physiological path of administration of a therapeutic agent into or onto a patient's body.
   */
  route?: CodeableConcept | undefined;
  /**
   * A coded specification of the anatomic site where the medication first enters the body.
   */
  siteCodeableConcept?: CodeableConcept | undefined;
  /**
   * A coded specification of the anatomic site where the medication first enters the body.
   */
  siteReference?: Reference | undefined;
  /**
   * Free text dosage instructions can be used for cases where the instructions are too complex to code.  The content of this attribute does not include the name or description of the medication. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication. It is expected that the text instructions will always be populated.  If the dosage.timing attribute is also populated, then the dosage.text should reflect the same information as the timing.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The timing schedule for giving the medication to the patient. The Schedule data type allows many different expressions. For example: "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  timing?: Timing | undefined;
}
/**
 * Any restrictions on medication substitution
 */
export interface MedicationOrderSubstitution extends BackboneElement {
  /**
   * Indicates the reason for the substitution, or why substitution must or must not be performed.
   */
  reason?: CodeableConcept | undefined;
  /**
   * A code signifying whether a different drug should be dispensed from what was prescribed.
   */
  type: CodeableConcept;
}
export interface MedicationOrder extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationOrder';
  /**
   * The date (and perhaps time) when the prescription was stopped.
   */
  dateEnded?: string | undefined;
  _dateEnded?: Element | undefined;
  /**
   * The date (and perhaps time) when the prescription was written.
   */
  dateWritten?: string | undefined;
  _dateWritten?: Element | undefined;
  /**
   * Indicates the specific details for the dispense or medication supply part of a medication order (also known as a Medication Prescription).  Note that this information is NOT always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
   */
  dispenseRequest?: MedicationOrderDispenseRequest | undefined;
  /**
   * Indicates how the medication is to be used by the patient.
   */
  dosageInstruction?: MedicationOrderDosageInstruction[] | undefined;
  /**
   * A link to a resource that identifies the particular occurrence of contact between patient and health care provider.
   */
  encounter?: Reference | undefined;
  /**
   * External identifier - one that would be used by another non-FHIR system - for example a re-imbursement system might issue its own id for each prescription that is created.  This is particularly important where FHIR only provides part of an entire workflow process where records have to be tracked through an entire system.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationReference?: Reference | undefined;
  /**
   * Extra information about the prescription that could not be conveyed by the other attributes.
   */
  note?: string | undefined;
  _note?: Element | undefined;
  /**
   * A link to a resource representing the person to whom the medication will be given.
   */
  patient?: Reference | undefined;
  /**
   * The healthcare professional responsible for authorizing the prescription.
   */
  prescriber?: Reference | undefined;
  /**
   * A link to a resource representing an earlier order or prescription that this order supersedes.
   */
  priorPrescription?: Reference | undefined;
  /**
   * Can be the reason or the indication for writing the prescription.
   */
  reasonCodeableConcept?: CodeableConcept | undefined;
  /**
   * Can be the reason or the indication for writing the prescription.
   */
  reasonReference?: Reference | undefined;
  /**
   * The reason why the prescription was stopped, if it was.
   */
  reasonEnded?: CodeableConcept | undefined;
  /**
   * A code specifying the state of the order.  Generally this will be active or completed state.
   */
  status?: ('active'|'on-hold'|'completed'|'entered-in-error'|'stopped'|'draft') | undefined;
  _status?: Element | undefined;
  /**
   * Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen, and in others it does not matter. This block explains the prescriber's intent. If nothing is specified substitution may be done.
   */
  substitution?: MedicationOrderSubstitution | undefined;
}
/**
 * Details of how medication was taken
 */
export interface MedicationStatementDosage extends BackboneElement {
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
   */
  asNeededBoolean?: boolean | undefined;
  _asNeededBoolean?: Element | undefined;
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).    Specifically if 'boolean' datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.
   */
  asNeededCodeableConcept?: CodeableConcept | undefined;
  /**
   * The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time.  For example, 1000mg in 24 hours.
   */
  maxDosePerPeriod?: Ratio | undefined;
  /**
   * A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
   */
  method?: CodeableConcept | undefined;
  /**
   * The amount of therapeutic or other substance given at one administration event.
   */
  quantityQuantity?: Quantity | undefined;
  /**
   * The amount of therapeutic or other substance given at one administration event.
   */
  quantityRange?: Range | undefined;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRange?: Range | undefined;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Currently we do not specify a default of '1' in the denominator, but this is being discussed. Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   */
  rateRatio?: Ratio | undefined;
  /**
   * A code specifying the route or physiological path of administration of a therapeutic agent into or onto a subject.
   */
  route?: CodeableConcept | undefined;
  /**
   * A coded specification of or a reference to the anatomic site where the medication first enters the body.
   */
  siteCodeableConcept?: CodeableConcept | undefined;
  /**
   * A coded specification of or a reference to the anatomic site where the medication first enters the body.
   */
  siteReference?: Reference | undefined;
  /**
   * Free text dosage information as reported about a patient's medication use. When coded dosage information is present, the free text may still be present for display to humans.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The timing schedule for giving the medication to the patient.  The Schedule data type allows many different expressions, for example.  "Every  8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:";  "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  timing?: Timing | undefined;
}
export interface MedicationStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationStatement';
  /**
   * The date when the medication statement was asserted by the information source.
   */
  dateAsserted?: string | undefined;
  _dateAsserted?: Element | undefined;
  /**
   * Indicates how the medication is/was used by the patient.
   */
  dosage?: MedicationStatementDosage[] | undefined;
  /**
   * The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
   */
  effectiveString?: string | undefined;
  _effectiveString?: Element | undefined;
  /**
   * The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
   */
  effectivePeriod?: Period | undefined;
  /**
   * External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The person who provided the information about the taking of this medication.
   */
  informationSource?: Reference | undefined;
  /**
   * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   */
  medicationReference?: Reference | undefined;
  /**
   * Provides extra information about the medication statement that is not conveyed by the other attributes.
   */
  note?: string | undefined;
  _note?: Element | undefined;
  /**
   * The person or animal who is/was taking the medication.
   */
  patient: Reference;
  /**
   * A reason for why the medication is being/was taken.
   */
  reasonForUseCodeableConcept?: CodeableConcept | undefined;
  /**
   * A reason for why the medication is being/was taken.
   */
  reasonForUseReference?: Reference | undefined;
  /**
   * A code indicating why the medication was not taken.
   */
  reasonNotTaken?: CodeableConcept[] | undefined;
  /**
   * A code representing the patient or other source's judgment about the state of the medication used that this statement is about.  Generally this will be active or completed.
   */
  status: ('active'|'completed'|'entered-in-error'|'intended');
  _status?: Element | undefined;
  /**
   * Allows linking the MedicationStatement to the underlying MedicationOrder, or to other information that supports the MedicationStatement.
   */
  supportingInformation?: Reference[] | undefined;
  /**
   * Set this to true if the record is saying that the medication was NOT taken.
   */
  wasNotTaken?: boolean | undefined;
  _wasNotTaken?: Element | undefined;
}
/**
 * Message Destination Application(s)
 */
export interface MessageHeaderDestination extends BackboneElement {
  /**
   * Indicates where the message should be routed to.
   */
  endpoint: string;
  _endpoint?: Element | undefined;
  /**
   * Human-readable name for the target system.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Identifies the target end system in situations where the initial message transmission is to an intermediary system.
   */
  target?: Reference | undefined;
}
/**
 * If this is a reply to prior message
 */
export interface MessageHeaderResponse extends BackboneElement {
  /**
   * Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.
   */
  code: ('ok'|'transient-error'|'fatal-error');
  _code?: Element | undefined;
  /**
   * Full details of any issues found in the message.
   */
  details?: Reference | undefined;
  /**
   * The id of the message that this message is a response to.
   */
  identifier: string;
  _identifier?: Element | undefined;
}
/**
 * Message Source Application
 */
export interface MessageHeaderSource extends BackboneElement {
  /**
   * An e-mail, phone, website or other contact point to use to resolve issues with message communications.
   */
  contact?: ContactPoint | undefined;
  /**
   * Identifies the routing target to send acknowledgements to.
   */
  endpoint: string;
  _endpoint?: Element | undefined;
  /**
   * Human-readable name for the source system.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * May include configuration or other information useful in debugging.
   */
  software?: string | undefined;
  _software?: Element | undefined;
  /**
   * Can convey versions of multiple systems in situations where a message passes through multiple hands.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
export interface MessageHeader extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MessageHeader';
  /**
   * The logical author of the message - the person or device that decided the described event should happen. Where there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.
   */
  author?: Reference | undefined;
  /**
   * The actual data of the message - a reference to the root/focus class of the event.
   */
  data?: Reference[] | undefined;
  /**
   * The destination application which the message is intended for.
   */
  destination?: MessageHeaderDestination[] | undefined;
  /**
   * The person or device that performed the data entry leading to this message. Where there is more than one candidate, pick the most proximal to the message. Can provide other enterers in extensions.
   */
  enterer?: Reference | undefined;
  /**
   * Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value "http://hl7.org/fhir/message-events".
   */
  event: Coding;
  /**
   * Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.
   */
  reason?: CodeableConcept | undefined;
  /**
   * Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.
   */
  receiver?: Reference | undefined;
  /**
   * Information about the message that this message is a response to.  Only present if this message is a response.
   */
  response?: MessageHeaderResponse | undefined;
  /**
   * The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.
   */
  responsible?: Reference | undefined;
  /**
   * The source application from which this message originated.
   */
  source: MessageHeaderSource;
  /**
   * The time that the message was sent.
   */
  timestamp: string;
  _timestamp?: Element | undefined;
}
/**
 * Contact details of the publisher
 */
export interface NamingSystemContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the naming system.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Unique identifiers used for system
 */
export interface NamingSystemUniqueId extends BackboneElement {
  /**
   * Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic.
   */
  period?: Period | undefined;
  /**
   * Indicates whether this identifier is the "preferred" identifier of this type.
   */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;
  /**
   * Identifies the unique identifier scheme used for this particular identifier.
   */
  type: ('oid'|'uuid'|'uri'|'other');
  _type?: Element | undefined;
  /**
   * The string that should be sent over the wire to identify the code system or identifier system.
   */
  value: string;
  _value?: Element | undefined;
}
export interface NamingSystem extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'NamingSystem';
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: NamingSystemContact[] | undefined;
  /**
   * The date  (and optionally time) when the system was registered or published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the registration changes.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * Details about what the namespace identifies including scope, granularity, version labeling, etc.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Indicates the purpose for the naming system - what kinds of things does it make unique?
   */
  kind: ('codesystem'|'identifier'|'root');
  _kind?: Element | undefined;
  /**
   * The descriptive name of this particular identifier type or code system.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the naming system.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * For naming systems that are retired, indicates the naming system that should be used in their place (if any).
   */
  replacedBy?: Reference | undefined;
  /**
   * The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.
   */
  responsible?: string | undefined;
  _responsible?: Element | undefined;
  /**
   * Indicates whether the naming system is "ready for use" or not.
   */
  status: ('draft'|'active'|'retired');
  _status?: Element | undefined;
  /**
   * Categorizes a naming system for easier search by grouping related naming systems.
   */
  type?: CodeableConcept | undefined;
  /**
   * Indicates how the system may be identified when referenced in electronic exchange.
   */
  uniqueId: NamingSystemUniqueId[];
  /**
   * Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
   */
  usage?: string | undefined;
  _usage?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of naming systems.
   */
  useContext?: CodeableConcept[] | undefined;
}
/**
 * Formula feeding instruction as structured data
 */
export interface NutritionOrderEnteralFormulaAdministration extends BackboneElement {
  /**
   * The volume of formula to provide to the patient per the specified administration schedule.
   */
  quantity?: Quantity | undefined;
  /**
   * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
   */
  rateQuantity?: Quantity | undefined;
  /**
   * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
   */
  rateRatio?: Ratio | undefined;
  /**
   * The time period and frequency at which the enteral formula should be delivered to the patient.
   */
  schedule?: Timing | undefined;
}
/**
 * Enteral formula components
 */
export interface NutritionOrderEnteralFormula extends BackboneElement {
  /**
   * The product or brand name of the type of modular component to be added to the formula.
   */
  additiveProductName?: string | undefined;
  _additiveProductName?: Element | undefined;
  /**
   * Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
   */
  additiveType?: CodeableConcept | undefined;
  /**
   * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
   */
  administration?: NutritionOrderEnteralFormulaAdministration[] | undefined;
  /**
   * Free text formula administration, feeding instructions or additional instructions or information.
   */
  administrationInstruction?: string | undefined;
  _administrationInstruction?: Element | undefined;
  /**
   * The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula".
   */
  baseFormulaProductName?: string | undefined;
  _baseFormulaProductName?: Element | undefined;
  /**
   * The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.
   */
  baseFormulaType?: CodeableConcept | undefined;
  /**
   * The amount of energy (Calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 Calories per fluid ounce or an adult may require an enteral formula that provides 1.5 Calorie/mL.
   */
  caloricDensity?: Quantity | undefined;
  /**
   * The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
   */
  maxVolumeToDeliver?: Quantity | undefined;
  /**
   * The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
   */
  routeofAdministration?: CodeableConcept | undefined;
}
/**
 * Required  nutrient modifications
 */
export interface NutritionOrderOralDietNutrient extends BackboneElement {
  /**
   * The quantity of the specified nutrient to include in diet.
   */
  amount?: Quantity | undefined;
  /**
   * The nutrient that is being modified such as carbohydrate or sodium.
   */
  modifier?: CodeableConcept | undefined;
}
/**
 * Required  texture modifications
 */
export interface NutritionOrderOralDietTexture extends BackboneElement {
  /**
   * The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types.
   */
  foodType?: CodeableConcept | undefined;
  /**
   * Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed.
   */
  modifier?: CodeableConcept | undefined;
}
/**
 * Oral diet components
 */
export interface NutritionOrderOralDiet extends BackboneElement {
  /**
   * The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.
   */
  fluidConsistencyType?: CodeableConcept[] | undefined;
  /**
   * Free text or additional instructions or information pertaining to the oral diet.
   */
  instruction?: string | undefined;
  _instruction?: Element | undefined;
  /**
   * Class that defines the quantity and type of nutrient modifications required for the oral diet.
   */
  nutrient?: NutritionOrderOralDietNutrient[] | undefined;
  /**
   * The time period and frequency at which the diet should be given.
   */
  schedule?: Timing[] | undefined;
  /**
   * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
   */
  texture?: NutritionOrderOralDietTexture[] | undefined;
  /**
   * The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Supplement components
 */
export interface NutritionOrderSupplement extends BackboneElement {
  /**
   * Free text or additional instructions or information pertaining to the oral supplement.
   */
  instruction?: string | undefined;
  _instruction?: Element | undefined;
  /**
   * The product or brand name of the nutritional supplement such as "Acme Protein Shake".
   */
  productName?: string | undefined;
  _productName?: Element | undefined;
  /**
   * The amount of the nutritional supplement to be given.
   */
  quantity?: Quantity | undefined;
  /**
   * The time period and frequency at which the supplement(s) should be given.
   */
  schedule?: Timing[] | undefined;
  /**
   * The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
   */
  type?: CodeableConcept | undefined;
}
export interface NutritionOrder extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'NutritionOrder';
  /**
   * A link to a record of allergies or intolerances  which should be included in the nutrition order.
   */
  allergyIntolerance?: Reference[] | undefined;
  /**
   * The date and time that this nutrition order was requested.
   */
  dateTime: string;
  _dateTime?: Element | undefined;
  /**
   * An encounter that provides additional information about the healthcare context in which this request is made.
   */
  encounter?: Reference | undefined;
  /**
   * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
   */
  enteralFormula?: NutritionOrderEnteralFormula | undefined;
  /**
   * This modifier is used to convey order-specific modifiers about the type of food that should NOT be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced allergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
   */
  excludeFoodModifier?: CodeableConcept[] | undefined;
  /**
   * This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
   */
  foodPreferenceModifier?: CodeableConcept[] | undefined;
  /**
   * Identifiers assigned to this order by the order sender or by the order receiver.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Diet given orally in contrast to enteral (tube) feeding.
   */
  oralDiet?: NutritionOrderOralDiet | undefined;
  /**
   * The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
   */
  orderer?: Reference | undefined;
  /**
   * The person (patient) who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
   */
  patient: Reference;
  /**
   * The workflow status of the nutrition order/request.
   */
  status?: ('proposed'|'draft'|'planned'|'requested'|'active'|'on-hold'|'completed'|'cancelled') | undefined;
  _status?: Element | undefined;
  /**
   * Oral nutritional products given in order to add further nutritional value to the patient's diet.
   */
  supplement?: NutritionOrderSupplement[] | undefined;
}
/**
 * Component results
 */
export interface ObservationComponent extends BackboneElement {
  /**
   * Describes what was observed. Sometimes this is called the observation "code".
   */
  code: CodeableConcept;
  /**
   * Provides a reason why the expected value in the element Observation.value[x] is missing.
   */
  dataAbsentReason?: CodeableConcept | undefined;
  /**
   * Guidance on how to interpret the value by comparison to a normal or recommended range.
   */
  referenceRange?: ObservationReferenceRange[] | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valuePeriod?: Period | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueRange?: Range | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueRatio?: Ratio | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueSampledData?: SampledData | undefined;
}
/**
 * Provides guide for interpretation
 */
export interface ObservationReferenceRange extends BackboneElement {
  /**
   * The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
   */
  age?: Range | undefined;
  /**
   * The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9).   If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
   */
  high?: Quantity | undefined;
  /**
   * The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9).   If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
   */
  low?: Quantity | undefined;
  /**
   * Code for the meaning of the reference range.
   */
  meaning?: CodeableConcept | undefined;
  /**
   * Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of 'normals'.
   */
  text?: string | undefined;
  _text?: Element | undefined;
}
/**
 * Resource related to this observation
 */
export interface ObservationRelated extends BackboneElement {
  /**
   * A reference to the observation or [[[QuestionnaireResponse]]] resource that is related to this observation.
   */
  target: Reference;
  /**
   * A code specifying the kind of relationship that exists with the target resource.
   */
  type?: ('has-member'|'derived-from'|'sequel-to'|'replaces'|'qualified-by'|'interfered-by') | undefined;
  _type?: Element | undefined;
}
export interface Observation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Observation';
  /**
   * Indicates the site on the subject's body where the observation was made (i.e. the target site).
   */
  bodySite?: CodeableConcept | undefined;
  /**
   * A code that classifies the general type of observation being made.  This is used  for searching, sorting and display purposes.
   */
  category?: CodeableConcept | undefined;
  /**
   * Describes what was observed. Sometimes this is called the observation "name".
   */
  code: CodeableConcept;
  /**
   * May include statements about significant, unexpected or unreliable values, or information about the source of the value where this may be relevant to the interpretation of the result.
   */
  comments?: string | undefined;
  _comments?: Element | undefined;
  /**
   * Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
   */
  component?: ObservationComponent[] | undefined;
  /**
   * Provides a reason why the expected value in the element Observation.value[x] is missing.
   */
  dataAbsentReason?: CodeableConcept | undefined;
  /**
   * The device used to generate the observation data.
   */
  device?: Reference | undefined;
  /**
   * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
   */
  effectiveString?: string | undefined;
  _effectiveString?: Element | undefined;
  /**
   * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
   */
  effectivePeriod?: Period | undefined;
  /**
   * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
   */
  encounter?: Reference | undefined;
  /**
   * A unique identifier for the simple observation instance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The assessment made based on the result of the observation.  Intended as a simple compact code often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result. Otherwise known as abnormal flag.
   */
  interpretation?: CodeableConcept | undefined;
  /**
   * The date and time this observation was made available to providers, typically after the results have been reviewed and verified.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * Indicates the mechanism used to perform the observation.
   */
  method?: CodeableConcept | undefined;
  /**
   * Who was responsible for asserting the observed value as "true".
   */
  performer?: Reference[] | undefined;
  /**
   * Guidance on how to interpret the value by comparison to a normal or recommended range.
   */
  referenceRange?: ObservationReferenceRange[] | undefined;
  /**
   * A  reference to another resource (usually another Observation but could  also be a QuestionnaireAnswer) whose relationship is defined by the relationship type code.
   */
  related?: ObservationRelated[] | undefined;
  /**
   * The specimen that was used when this observation was made.
   */
  specimen?: Reference | undefined;
  /**
   * The status of the result value.
   */
  status: ('registered'|'preliminary'|'final'|'amended'|'cancelled'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The patient, or group of patients, location, or device whose characteristics (direct or indirect) are described by the observation and into whose record the observation is placed.  Comments: Indirect characteristics may be those of a specimen, fetus, donor,  other observer (for example a relative or EMT), or any observation made about the subject.
   */
  subject?: Reference | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valuePeriod?: Period | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueRange?: Range | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueRatio?: Ratio | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   */
  valueSampledData?: SampledData | undefined;
}
/**
 * Contact details of the publisher
 */
export interface OperationDefinitionContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the operation definition.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * ValueSet details if this is coded
 */
export interface OperationDefinitionParameterBinding extends BackboneElement {
  /**
   * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
   */
  strength: ('required'|'extensible'|'preferred'|'example');
  _strength?: Element | undefined;
  /**
   * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
   */
  valueSetReference?: Reference | undefined;
  /**
   * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
   */
  valueSetString?: string | undefined;
  _valueSetString?: Element | undefined;
}
/**
 * Parameters for the operation/query
 */
export interface OperationDefinitionParameter extends BackboneElement {
  /**
   * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
   */
  binding?: OperationDefinitionParameterBinding | undefined;
  /**
   * Describes the meaning or use of this parameter.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * The maximum number of times this element is permitted to appear in the request or response.
   */
  max: string;
  _max?: Element | undefined;
  /**
   * The minimum number of times this parameter SHALL appear in the request or response.
   */
  min: number;
  /**
   * The name of used to identify the parameter.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The parts of a Tuple Parameter.
   */
  part?: OperationDefinitionParameter[] | undefined;
  /**
   * A profile the specifies the rules that this parameter must conform to.
   */
  profile?: Reference | undefined;
  /**
   * The type for this parameter.
   */
  type?: ('number'|'date'|'string'|'token'|'reference'|'composite'|'quantity'|'uri'|'Address'|'Age'|'Annotation'|'Attachment'|'BackboneElement'|'CodeableConcept'|'Coding'|'ContactPoint'|'Count'|'Distance'|'Duration'|'Element'|'ElementDefinition'|'Extension'|'HumanName'|'Identifier'|'Meta'|'Money'|'Narrative'|'Period'|'Quantity'|'Range'|'Ratio'|'Reference'|'SampledData'|'Signature'|'SimpleQuantity'|'Timing'|'base64Binary'|'boolean'|'code'|'date'|'dateTime'|'decimal'|'id'|'instant'|'integer'|'markdown'|'oid'|'positiveInt'|'string'|'time'|'unsignedInt'|'uri'|'uuid'|'xhtml'|'Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription') | undefined;
  _type?: Element | undefined;
  /**
   * Whether this is an input or an output parameter.
   */
  use: ('in'|'out');
  _use?: Element | undefined;
}
export interface OperationDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'OperationDefinition';
  /**
   * Indicates that this operation definition is a constraining profile on the base.
   */
  base?: Reference | undefined;
  /**
   * The name used to invoke the operation.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: OperationDefinitionContact[] | undefined;
  /**
   * The date this version of the operation definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the Operation Definition changes.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the profile and its use.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * This profile was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Operations that are idempotent (see [HTTP specification definition of idempotent](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)) may be invoked by performing an HTTP GET operation instead of a POST.
   */
  idempotent?: boolean | undefined;
  _idempotent?: Element | undefined;
  /**
   * Indicates whether this operation can be invoked on a particular instance of one of the given types.
   */
  instance: boolean;
  _instance?: Element | undefined;
  /**
   * Whether this is an operation or a named query.
   */
  kind: ('operation'|'query');
  _kind?: Element | undefined;
  /**
   * A free text natural language name identifying the operation.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Additional information about how to use this operation or named query.
   */
  notes?: string | undefined;
  _notes?: Element | undefined;
  /**
   * The parameters for the operation/query.
   */
  parameter?: OperationDefinitionParameter[] | undefined;
  /**
   * The name of the individual or organization that published the operation definition.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explains why this operation definition is needed and why it's been constrained as it has.
   */
  requirements?: string | undefined;
  _requirements?: Element | undefined;
  /**
   * The status of the profile.
   */
  status: ('draft'|'active'|'retired');
  _status?: Element | undefined;
  /**
   * Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
   */
  system: boolean;
  _system?: Element | undefined;
  /**
   * Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a resource type for the context).
   */
  type?: ('Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription')[] | undefined;
  _type?: Element[] | undefined;
  /**
   * An absolute URL that is used to identify this operation definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this operation definition is (or will be) published.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The identifier that is used to identify this version of the profile when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * A single issue associated with the action
 */
export interface OperationOutcomeIssue extends BackboneElement {
  /**
   * Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.
   */
  code: ('invalid'|'structure'|'required'|'value'|'invariant'|'security'|'login'|'unknown'|'expired'|'forbidden'|'suppressed'|'processing'|'not-supported'|'duplicate'|'not-found'|'too-long'|'code-invalid'|'extension'|'too-costly'|'business-rule'|'conflict'|'incomplete'|'transient'|'lock-error'|'no-store'|'exception'|'timeout'|'throttled'|'informational');
  _code?: Element | undefined;
  /**
   * Additional details about the error. This may be a text description of the error, or a system code that identifies the error.
   */
  details?: CodeableConcept | undefined;
  /**
   * Additional diagnostic information about the issue.  Typically, this may be a description of how a value is erroneous, or a stack dump to help trace the issue.
   */
  diagnostics?: string | undefined;
  _diagnostics?: Element | undefined;
  /**
   * A simple XPath limited to element names, repetition indicators and the default child access that identifies one of the elements in the resource that caused this issue to be raised.
   */
  location?: string[] | undefined;
  _location?: Element[] | undefined;
  /**
   * Indicates whether the issue indicates a variation from successful processing.
   */
  severity: ('fatal'|'error'|'warning'|'information');
  _severity?: Element | undefined;
}
export interface OperationOutcome extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'OperationOutcome';
  /**
   * An error, warning or information message that results from a system action.
   */
  issue: OperationOutcomeIssue[];
}
/**
 * When order should be fulfilled
 */
export interface OrderWhen extends BackboneElement {
  /**
   * Code specifies when request should be done. The code may simply be a priority code.
   */
  code?: CodeableConcept | undefined;
  /**
   * A formal schedule.
   */
  schedule?: Timing | undefined;
}
export interface Order extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Order';
  /**
   * When the order was made.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * What action is being ordered.
   */
  detail: Reference[];
  /**
   * Identifiers assigned to this order by the orderer or by the receiver.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Text - why the order was made.
   */
  reasonCodeableConcept?: CodeableConcept | undefined;
  /**
   * Text - why the order was made.
   */
  reasonReference?: Reference | undefined;
  /**
   * Who initiated the order.
   */
  source?: Reference | undefined;
  /**
   * Patient this order is about.
   */
  subject?: Reference | undefined;
  /**
   * Who is intended to fulfill the order.
   */
  target?: Reference | undefined;
  /**
   * When order should be fulfilled.
   */
  when?: OrderWhen | undefined;
}
export interface OrderResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'OrderResponse';
  /**
   * The date and time at which this order response was made (created/posted).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Additional description about the response - e.g. a text description provided by a human user when making decisions about the order.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Links to resources that provide details of the outcome of performing the order; e.g. Diagnostic Reports in a response that is made to an order that referenced a diagnostic order.
   */
  fulfillment?: Reference[] | undefined;
  /**
   * Identifiers assigned to this order. The identifiers are usually assigned by the system responding to the order, but they may be provided or added to by other systems.
   */
  identifier?: Identifier[] | undefined;
  /**
   * What this response says about the status of the original order.
   */
  orderStatus: ('pending'|'review'|'rejected'|'error'|'accepted'|'cancelled'|'replaced'|'aborted'|'completed');
  _orderStatus?: Element | undefined;
  /**
   * A reference to the order that this is in response to.
   */
  request: Reference;
  /**
   * The person, organization, or device credited with making the response.
   */
  who?: Reference | undefined;
}
/**
 * Contact for the organization for a certain purpose
 */
export interface OrganizationContact extends BackboneElement {
  /**
   * Visiting or postal addresses for the contact.
   */
  address?: Address | undefined;
  /**
   * A name associated with the contact.
   */
  name?: HumanName | undefined;
  /**
   * Indicates a purpose for which the contact can be reached.
   */
  purpose?: CodeableConcept | undefined;
  /**
   * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
   */
  telecom?: ContactPoint[] | undefined;
}
export interface Organization extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Organization';
  /**
   * Whether the organization's record is still in active use.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * An address for the organization.
   */
  address?: Address[] | undefined;
  /**
   * Contact for the organization for a certain purpose.
   */
  contact?: OrganizationContact[] | undefined;
  /**
   * Identifier for the organization that is used to identify the organization across multiple disparate systems.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A name associated with the organization.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The organization of which this organization forms a part.
   */
  partOf?: Reference | undefined;
  /**
   * A contact detail for the organization.
   */
  telecom?: ContactPoint[] | undefined;
  /**
   * The kind of organization that this is.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Operation Parameter
 */
export interface ParametersParameter extends BackboneElement {
  /**
   * The name of the parameter (reference to the operation definition).
   */
  name: string;
  _name?: Element | undefined;
  /**
   * A named part of a parameter. In many implementation context, a set of named parts is known as a "Tuple".
   */
  part?: ParametersParameter[] | undefined;
  /**
   * If the parameter is a whole resource.
   */
  resource?: FhirResource | undefined;
  /**
   * If the parameter is a data type.
   */
  valueAddress?: Address | undefined;
  /**
   * If the parameter is a data type.
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * If the parameter is a data type.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * If the parameter is a data type.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * If the parameter is a data type.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * If the parameter is a data type.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * If the parameter is a data type.
   */
  valueCoding?: Coding | undefined;
  /**
   * If the parameter is a data type.
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * If the parameter is a data type.
   */
  valueNumber?: number | undefined;
  /**
   * If the parameter is a data type.
   */
  valueHumanName?: HumanName | undefined;
  /**
   * If the parameter is a data type.
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * If the parameter is a data type.
   */
  valueMeta?: Meta | undefined;
  /**
   * If the parameter is a data type.
   */
  valuePeriod?: Period | undefined;
  /**
   * If the parameter is a data type.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * If the parameter is a data type.
   */
  valueRange?: Range | undefined;
  /**
   * If the parameter is a data type.
   */
  valueRatio?: Ratio | undefined;
  /**
   * If the parameter is a data type.
   */
  valueReference?: Reference | undefined;
  /**
   * If the parameter is a data type.
   */
  valueSampledData?: SampledData | undefined;
  /**
   * If the parameter is a data type.
   */
  valueSignature?: Signature | undefined;
  /**
   * If the parameter is a data type.
   */
  valueTiming?: Timing | undefined;
}
export interface Parameters extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Parameters';
  /**
   * A parameter passed to or received from the operation.
   */
  parameter?: ParametersParameter[] | undefined;
}
/**
 * This patient is known to be an animal (non-human)
 */
export interface PatientAnimal extends BackboneElement {
  /**
   * Identifies the detailed categorization of the kind of animal.
   */
  breed?: CodeableConcept | undefined;
  /**
   * Indicates the current state of the animal's reproductive organs.
   */
  genderStatus?: CodeableConcept | undefined;
  /**
   * Identifies the high level taxonomic categorization of the kind of animal.
   */
  species: CodeableConcept;
}
/**
 * A list of Languages which may be used to communicate with the patient about his or her health
 */
export interface PatientCommunication extends BackboneElement {
  /**
   * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
   */
  language: CodeableConcept;
  /**
   * Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
   */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;
}
/**
 * A contact party (e.g. guardian, partner, friend) for the patient
 */
export interface PatientContact extends BackboneElement {
  /**
   * Address for the contact person.
   */
  address?: Address | undefined;
  /**
   * Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * A name associated with the contact person.
   */
  name?: HumanName | undefined;
  /**
   * Organization on behalf of which the contact is acting or for which the contact is working.
   */
  organization?: Reference | undefined;
  /**
   * The period during which this contact person or organization is valid to be contacted relating to this patient.
   */
  period?: Period | undefined;
  /**
   * The nature of the relationship between the patient and the contact person.
   */
  relationship?: CodeableConcept[] | undefined;
  /**
   * A contact detail for the person, e.g. a telephone number or an email address.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Link to another patient resource that concerns the same actual person
 */
export interface PatientLink extends BackboneElement {
  /**
   * The other patient resource that the link refers to.
   */
  other: Reference;
  /**
   * The type of link between this patient resource and another patient resource.
   */
  type: ('replace'|'refer'|'seealso');
  _type?: Element | undefined;
}
export interface Patient extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Patient';
  /**
   * Whether this patient record is in active use.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Addresses for the individual.
   */
  address?: Address[] | undefined;
  /**
   * This patient is known to be an animal.
   */
  animal?: PatientAnimal | undefined;
  /**
   * The date of birth for the individual.
   */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;
  /**
   * Patient's nominated care provider.
   */
  careProvider?: Reference[] | undefined;
  /**
   * Languages which may be used to communicate with the patient about his or her health.
   */
  communication?: PatientCommunication[] | undefined;
  /**
   * A contact party (e.g. guardian, partner, friend) for the patient.
   */
  contact?: PatientContact[] | undefined;
  /**
   * Indicates if the individual is deceased or not.
   */
  deceasedBoolean?: boolean | undefined;
  _deceasedBoolean?: Element | undefined;
  /**
   * Indicates if the individual is deceased or not.
   */
  deceasedString?: string | undefined;
  _deceasedString?: Element | undefined;
  /**
   * Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * An identifier for this patient.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Link to another patient resource that concerns the same actual patient.
   */
  link?: PatientLink[] | undefined;
  /**
   * Organization that is the custodian of the patient record.
   */
  managingOrganization?: Reference | undefined;
  /**
   * This field contains a patient's most recent marital (civil) status.
   */
  maritalStatus?: CodeableConcept | undefined;
  /**
   * Indicates whether the patient is part of a multiple or indicates the actual birth order.
   */
  multipleBirthBoolean?: boolean | undefined;
  _multipleBirthBoolean?: Element | undefined;
  /**
   * Indicates whether the patient is part of a multiple or indicates the actual birth order.
   */
  multipleBirthNumber?: number | undefined;
  /**
   * A name associated with the individual.
   */
  name?: HumanName[] | undefined;
  /**
   * Image of the patient.
   */
  photo?: Attachment[] | undefined;
  /**
   * A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
   */
  telecom?: ContactPoint[] | undefined;
}
export interface PaymentNotice extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PaymentNotice';
  /**
   * The date when this resource was created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  organization?: Reference | undefined;
  /**
   * The style (standard) and version of the original material which was converted into this resource.
   */
  originalRuleset?: Coding | undefined;
  /**
   * The payment status, typically paid: payment sent, cleared: payment received.
   */
  paymentStatus: Coding;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: Reference | undefined;
  /**
   * Reference of resource to reverse.
   */
  request?: Reference | undefined;
  /**
   * Reference of response to resource to reverse.
   */
  response?: Reference | undefined;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding | undefined;
  /**
   * The Insurer who is target  of the request.
   */
  target?: Reference | undefined;
}
/**
 * Details
 */
export interface PaymentReconciliationDetail extends BackboneElement {
  /**
   * Amount paid for this detail.
   */
  amount?: Quantity | undefined;
  /**
   * The date of the invoice or financial resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The organization which is receiving the payment.
   */
  payee?: Reference | undefined;
  /**
   * The claim or financial resource.
   */
  request?: Reference | undefined;
  /**
   * The claim response resource.
   */
  responce?: Reference | undefined;
  /**
   * The Organization which submitted the invoice or financial transaction.
   */
  submitter?: Reference | undefined;
  /**
   * Code to indicate the nature of the payment, adjustment, funds advance, etc.
   */
  type: Coding;
}
/**
 * Note text
 */
export interface PaymentReconciliationNote extends BackboneElement {
  /**
   * The note text.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The note purpose: Print/Display.
   */
  type?: Coding | undefined;
}
export interface PaymentReconciliation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PaymentReconciliation';
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * List of individual settlement amounts and the corresponding transaction.
   */
  detail?: PaymentReconciliationDetail[] | undefined;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * The form to be used for printing the content.
   */
  form?: Coding | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Suite of notes.
   */
  note?: PaymentReconciliationNote[] | undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: Reference | undefined;
  /**
   * The style (standard) and version of the original material which was converted into this resource.
   */
  originalRuleset?: Coding | undefined;
  /**
   * Transaction status: error, complete.
   */
  outcome?: ('complete'|'error') | undefined;
  _outcome?: Element | undefined;
  /**
   * The period of time for which payments have been gathered into this bulk payment for settlement.
   */
  period?: Period | undefined;
  /**
   * Original request resource reference.
   */
  request?: Reference | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference | undefined;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding | undefined;
  /**
   * Total payment amount.
   */
  total: Quantity;
}
/**
 * Link to a resource that concerns the same actual person
 */
export interface PersonLink extends BackboneElement {
  /**
   * Level of assurance that this link is actually associated with the target resource.
   */
  assurance?: ('level1'|'level2'|'level3'|'level4') | undefined;
  _assurance?: Element | undefined;
  /**
   * The resource to which this actual person is associated.
   */
  target: Reference;
}
export interface Person extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Person';
  /**
   * Whether this person's record is in active use.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * One or more addresses for the person.
   */
  address?: Address[] | undefined;
  /**
   * The birth date for the person.
   */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;
  /**
   * Administrative Gender.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * Identifier for a person within a particular scope.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Link to a resource that concerns the same actual person.
   */
  link?: PersonLink[] | undefined;
  /**
   * The organization that is the custodian of the person record.
   */
  managingOrganization?: Reference | undefined;
  /**
   * A name associated with the person.
   */
  name?: HumanName[] | undefined;
  /**
   * An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
   */
  photo?: Attachment | undefined;
  /**
   * A contact detail for the person, e.g. a telephone number or an email address.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Roles/organizations the practitioner is associated with
 */
export interface PractitionerPractitionerRole extends BackboneElement {
  /**
   * The list of healthcare services that this worker provides for this role's Organization/Location(s).
   */
  healthcareService?: Reference[] | undefined;
  /**
   * The location(s) at which this practitioner provides care.
   */
  location?: Reference[] | undefined;
  /**
   * The organization where the Practitioner performs the roles associated.
   */
  managingOrganization?: Reference | undefined;
  /**
   * The period during which the person is authorized to act as a practitioner in these role(s) for the organization.
   */
  period?: Period | undefined;
  /**
   * Roles which this practitioner is authorized to perform for the organization.
   */
  role?: CodeableConcept | undefined;
  /**
   * Specific specialty of the practitioner.
   */
  specialty?: CodeableConcept[] | undefined;
}
/**
 * Qualifications obtained by training and certification
 */
export interface PractitionerQualification extends BackboneElement {
  /**
   * Coded representation of the qualification.
   */
  code: CodeableConcept;
  /**
   * An identifier that applies to this person's qualification in this role.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Organization that regulates and issues the qualification.
   */
  issuer?: Reference | undefined;
  /**
   * Period during which the qualification is valid.
   */
  period?: Period | undefined;
}
export interface Practitioner extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Practitioner';
  /**
   * Whether this practitioner's record is in active use.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * The postal address where the practitioner can be found or visited or to which mail can be delivered.
   */
  address?: Address[] | undefined;
  /**
   * The date of birth for the practitioner.
   */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;
  /**
   * A language the practitioner is able to use in patient communication.
   */
  communication?: CodeableConcept[] | undefined;
  /**
   * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * An identifier that applies to this person in this role.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A name associated with the person.
   */
  name?: HumanName | undefined;
  /**
   * Image of the person.
   */
  photo?: Attachment[] | undefined;
  /**
   * The list of roles/organizations that the practitioner is associated with.
   */
  practitionerRole?: PractitionerPractitionerRole[] | undefined;
  /**
   * Qualifications obtained by training and certification.
   */
  qualification?: PractitionerQualification[] | undefined;
  /**
   * A contact detail for the practitioner, e.g. a telephone number or an email address.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Device changed in procedure
 */
export interface ProcedureFocalDevice extends BackboneElement {
  /**
   * The kind of change that happened to the device during the procedure.
   */
  action?: CodeableConcept | undefined;
  /**
   * The device that was manipulated (changed) during the procedure.
   */
  manipulated: Reference;
}
/**
 * The people who performed the procedure
 */
export interface ProcedurePerformer extends BackboneElement {
  /**
   * The practitioner who was involved in the procedure.
   */
  actor?: Reference | undefined;
  /**
   * For example: surgeon, anaethetist, endoscopist.
   */
  role?: CodeableConcept | undefined;
}
export interface Procedure extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Procedure';
  /**
   * Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
   */
  bodySite?: CodeableConcept[] | undefined;
  /**
   * A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
   */
  category?: CodeableConcept | undefined;
  /**
   * The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
   */
  code: CodeableConcept;
  /**
   * Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.
   */
  complication?: CodeableConcept[] | undefined;
  /**
   * The encounter during which the procedure was performed.
   */
  encounter?: Reference | undefined;
  /**
   * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
   */
  focalDevice?: ProcedureFocalDevice[] | undefined;
  /**
   * If the procedure required specific follow up - e.g. removal of sutures. The followup may be represented as a simple note, or could potentially be more complex in which case the CarePlan resource can be used.
   */
  followUp?: CodeableConcept[] | undefined;
  /**
   * This records identifiers associated with this procedure that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.
   */
  location?: Reference | undefined;
  /**
   * Any other notes about the procedure.  E.g. the operative notes.
   */
  notes?: Annotation[] | undefined;
  /**
   * Set this to true if the record is saying that the procedure was NOT performed.
   */
  notPerformed?: boolean | undefined;
  _notPerformed?: Element | undefined;
  /**
   * The outcome of the procedure - did it resolve reasons for the procedure being performed?
   */
  outcome?: CodeableConcept | undefined;
  /**
   * The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   */
  performedString?: string | undefined;
  _performedString?: Element | undefined;
  /**
   * The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   */
  performedPeriod?: Period | undefined;
  /**
   * Limited to 'real' people rather than equipment.
   */
  performer?: ProcedurePerformer[] | undefined;
  /**
   * The reason why the procedure was performed. This may be due to a Condition, may be coded entity of some type, or may simply be present as text.
   */
  reasonCodeableConcept?: CodeableConcept | undefined;
  /**
   * The reason why the procedure was performed. This may be due to a Condition, may be coded entity of some type, or may simply be present as text.
   */
  reasonReference?: Reference | undefined;
  /**
   * A code indicating why the procedure was not performed.
   */
  reasonNotPerformed?: CodeableConcept[] | undefined;
  /**
   * This could be a histology result, pathology report, surgical report, etc..
   */
  report?: Reference[] | undefined;
  /**
   * A reference to a resource that contains details of the request for this procedure.
   */
  request?: Reference | undefined;
  /**
   * A code specifying the state of the procedure. Generally this will be in-progress or completed state.
   */
  status: ('in-progress'|'aborted'|'completed'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The person, animal or group on which the procedure was performed.
   */
  subject: Reference;
  /**
   * Identifies medications, devices and any other substance used as part of the procedure.
   */
  used?: Reference[] | undefined;
}
export interface ProcedureRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ProcedureRequest';
  /**
   * If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.
   */
  asNeededBoolean?: boolean | undefined;
  _asNeededBoolean?: Element | undefined;
  /**
   * If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.
   */
  asNeededCodeableConcept?: CodeableConcept | undefined;
  /**
   * Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites).
   */
  bodySite?: CodeableConcept[] | undefined;
  /**
   * The specific procedure that is ordered. Use text if the exact nature of the procedure cannot be coded.
   */
  code: CodeableConcept;
  /**
   * The encounter within which the procedure proposal or request was created.
   */
  encounter?: Reference | undefined;
  /**
   * Identifiers assigned to this order by the order or by the receiver.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Any other notes associated with this proposal or order - e.g. provider instructions.
   */
  notes?: Annotation[] | undefined;
  /**
   * The time when the request was made.
   */
  orderedOn?: string | undefined;
  _orderedOn?: Element | undefined;
  /**
   * The healthcare professional responsible for proposing or ordering the procedure.
   */
  orderer?: Reference | undefined;
  /**
   * For example, the surgeon, anaethetist, endoscopist, etc.
   */
  performer?: Reference | undefined;
  /**
   * The clinical priority associated with this order.
   */
  priority?: ('routine'|'urgent'|'stat'|'asap') | undefined;
  _priority?: Element | undefined;
  /**
   * The reason why the procedure is being proposed or ordered. This procedure request may be motivated by a Condition for instance.
   */
  reasonCodeableConcept?: CodeableConcept | undefined;
  /**
   * The reason why the procedure is being proposed or ordered. This procedure request may be motivated by a Condition for instance.
   */
  reasonReference?: Reference | undefined;
  /**
   * The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  scheduledString?: string | undefined;
  _scheduledString?: Element | undefined;
  /**
   * The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  scheduledPeriod?: Period | undefined;
  /**
   * The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  scheduledTiming?: Timing | undefined;
  /**
   * The status of the order.
   */
  status?: ('proposed'|'draft'|'requested'|'received'|'accepted'|'in-progress'|'completed'|'suspended'|'rejected'|'aborted') | undefined;
  _status?: Element | undefined;
  /**
   * The person, animal or group that should receive the procedure.
   */
  subject: Reference;
}
/**
 * Items to re-adjudicate
 */
export interface ProcessRequestItem extends BackboneElement {
  /**
   * A service line number.
   */
  sequenceLinkId: number;
}
export interface ProcessRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ProcessRequest';
  /**
   * The type of processing action being requested, for example Reversal, Readjudication, StatusRequest,PendedRequest.
   */
  action: ('cancel'|'poll'|'reprocess'|'status');
  _action?: Element | undefined;
  /**
   * The date when this resource was created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * Names of resource types to exclude.
   */
  exclude?: string[] | undefined;
  _exclude?: Element[] | undefined;
  /**
   * The ProcessRequest business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Names of resource types to include.
   */
  include?: string[] | undefined;
  _include?: Element[] | undefined;
  /**
   * List of top level items to be re-adjudicated, if none specified then the entire submission is re-adjudicated.
   */
  item?: ProcessRequestItem[] | undefined;
  /**
   * If true remove all history excluding audit.
   */
  nullify?: boolean | undefined;
  _nullify?: Element | undefined;
  /**
   * The organization which is responsible for the action speccified in thise request.
   */
  organization?: Reference | undefined;
  /**
   * The style (standard) and version of the original material which was converted into this resource.
   */
  originalRuleset?: Coding | undefined;
  /**
   * A period of time during which the fulfilling resources would have been created.
   */
  period?: Period | undefined;
  /**
   * The practitioner who is responsible for the action specified in thise request.
   */
  provider?: Reference | undefined;
  /**
   * A reference to supply which authenticates the process.
   */
  reference?: string | undefined;
  _reference?: Element | undefined;
  /**
   * Reference of resource which is the target or subject of this action.
   */
  request?: Reference | undefined;
  /**
   * Reference of a prior response to resource which is the target or subject of this action.
   */
  response?: Reference | undefined;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding | undefined;
  /**
   * The organization which is the target of the request.
   */
  target?: Reference | undefined;
}
/**
 * Notes
 */
export interface ProcessResponseNotes extends BackboneElement {
  /**
   * The note text.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The note purpose: Print/Display.
   */
  type?: Coding | undefined;
}
export interface ProcessResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ProcessResponse';
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * A description of the status of the adjudication or processing.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * Processing errors.
   */
  error?: Coding[] | undefined;
  /**
   * The form to be used for printing the content.
   */
  form?: Coding | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Suite of processing note or additional requirements is the processing has been held.
   */
  notes?: ProcessResponseNotes[] | undefined;
  /**
   * The organization who produced this adjudicated response.
   */
  organization?: Reference | undefined;
  /**
   * The style (standard) and version of the original material which was converted into this resource.
   */
  originalRuleset?: Coding | undefined;
  /**
   * Transaction status: error, complete, held.
   */
  outcome?: Coding | undefined;
  /**
   * Original request resource reference.
   */
  request?: Reference | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference | undefined;
  /**
   * The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.
   */
  ruleset?: Coding | undefined;
}
/**
 * Track delegation between agents
 */
export interface ProvenanceAgentRelatedAgent extends BackboneElement {
  /**
   * An internal reference to another agent listed in this provenance by its identifier.
   */
  target: string;
  _target?: Element | undefined;
  /**
   * The type of relationship between agents.
   */
  type: CodeableConcept;
}
/**
 * Agents involved in creating resource
 */
export interface ProvenanceAgent extends BackboneElement {
  /**
   * The individual, device or organization that participated in the event.
   */
  actor?: Reference | undefined;
  /**
   * A relationship between two the agents referenced in this resource. This is defined to allow for explicit description of the delegation between agents.  For example, this human author used this device, or one person acted on another's behest.
   */
  relatedAgent?: ProvenanceAgentRelatedAgent[] | undefined;
  /**
   * The function of the agent with respect to the activity.
   */
  role: Coding;
  /**
   * The identity of the agent as known by the authorization system.
   */
  userId?: Identifier | undefined;
}
/**
 * An entity used in this activity
 */
export interface ProvenanceEntity extends BackboneElement {
  /**
   * The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity.
   */
  agent?: ProvenanceAgent | undefined;
  /**
   * Human-readable description of the entity.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
   */
  reference: string;
  _reference?: Element | undefined;
  /**
   * How the entity was used during the activity.
   */
  role: ('derivation'|'revision'|'quotation'|'source');
  _role?: Element | undefined;
  /**
   * The type of the entity. If the entity is a resource, then this is a resource type.
   */
  type: Coding;
}
export interface Provenance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Provenance';
  /**
   * An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
   */
  activity?: CodeableConcept | undefined;
  /**
   * An agent takes a role in an activity such that the agent can be assigned some degree of responsibility for the activity taking place. An agent can be a person, an organization, software, or other entities that may be ascribed responsibility.
   */
  agent?: ProvenanceAgent[] | undefined;
  /**
   * An entity used in this activity.
   */
  entity?: ProvenanceEntity[] | undefined;
  /**
   * Where the activity occurred, if relevant.
   */
  location?: Reference | undefined;
  /**
   * The period during which the activity occurred.
   */
  period?: Period | undefined;
  /**
   * Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
   */
  policy?: string[] | undefined;
  _policy?: Element[] | undefined;
  /**
   * The reason that the activity was taking place.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * The instant of time at which the activity was recorded.
   */
  recorded: string;
  _recorded?: Element | undefined;
  /**
   * A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
   */
  signature?: Signature[] | undefined;
  /**
   * The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.
   */
  target: Reference[];
}
/**
 * Questions in this group
 */
export interface QuestionnaireGroupQuestion extends BackboneElement {
  /**
   * Identifies a how this question is known in a particular terminology such as LOINC.
   */
  concept?: Coding[] | undefined;
  /**
   * Nested group, containing nested question for this question. The order of groups within the question is relevant.
   */
  group?: QuestionnaireGroup[] | undefined;
  /**
   * An identifier that is unique within the questionnaire allowing linkage to the equivalent group in a [[[QuestionnaireResponse]]] resource.
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * For a "choice" question, identifies one of the permitted answers for the question.
   */
  option?: Coding[] | undefined;
  /**
   * Reference to a value set containing a list of codes representing permitted answers for the question.
   */
  options?: Reference | undefined;
  /**
   * If true, the question may have more than one answer.
   */
  repeats?: boolean | undefined;
  _repeats?: Element | undefined;
  /**
   * If true, indicates that the question must be answered and have required groups within it also present.  If false, the question and any contained groups may be skipped when answering the questionnaire.
   */
  required?: boolean | undefined;
  _required?: Element | undefined;
  /**
   * The actual question as shown to the user to prompt them for an answer.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The expected format of the answer, e.g. the type of input (string, integer) or whether a (multiple) choice is expected.
   */
  type?: ('boolean'|'decimal'|'integer'|'date'|'dateTime'|'instant'|'time'|'string'|'text'|'url'|'choice'|'open-choice'|'attachment'|'reference'|'quantity') | undefined;
  _type?: Element | undefined;
}
/**
 * Grouped questions
 */
export interface QuestionnaireGroup extends BackboneElement {
  /**
   * Identifies a how this group of questions is known in a particular terminology such as LOINC.
   */
  concept?: Coding[] | undefined;
  /**
   * A sub-group within a group. The ordering of groups within this group is relevant.
   */
  group?: QuestionnaireGroup[] | undefined;
  /**
   * An identifier that is unique within the Questionnaire allowing linkage to the equivalent group in a QuestionnaireResponse resource.
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * Set of questions within this group. The order of questions within the group is relevant.
   */
  question?: QuestionnaireGroupQuestion[] | undefined;
  /**
   * Whether the group may occur multiple times in the instance, containing multiple sets of answers.
   */
  repeats?: boolean | undefined;
  _repeats?: Element | undefined;
  /**
   * If true, indicates that the group must be present and have required questions within it answered.  If false, the group may be skipped when answering the questionnaire.
   */
  required?: boolean | undefined;
  _required?: Element | undefined;
  /**
   * Additional text for the group, used for display purposes.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The human-readable name for this section of the questionnaire.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
export interface Questionnaire extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Questionnaire';
  /**
   * The date that this questionnaire was last changed.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A collection of related questions (or further groupings of questions).
   */
  group: QuestionnaireGroup;
  /**
   * This records identifiers associated with this question set that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Organization or person responsible for developing and maintaining the questionnaire.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * The lifecycle status of the questionnaire as a whole.
   */
  status: ('draft'|'published'|'retired');
  _status?: Element | undefined;
  /**
   * Identifies the types of subjects that can be the subject of the questionnaire.
   */
  subjectType?: ('Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription')[] | undefined;
  _subjectType?: Element[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   */
  telecom?: ContactPoint[] | undefined;
  /**
   * The version number assigned by the publisher for business reasons.  It may remain the same when the resource is updated.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * The response(s) to the question
 */
export interface QuestionnaireResponseGroupQuestionAnswer extends BackboneElement {
  /**
   * Nested group, containing nested question for this question. The order of groups within the question is relevant.
   */
  group?: QuestionnaireResponseGroup[] | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   */
  valueCoding?: Coding | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   */
  valueNumber?: number | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   */
  valueReference?: Reference | undefined;
}
/**
 * Questions in this group
 */
export interface QuestionnaireResponseGroupQuestion extends BackboneElement {
  /**
   * The respondent's answer(s) to the question.
   */
  answer?: QuestionnaireResponseGroupQuestionAnswer[] | undefined;
  /**
   * Identifies the question from the Questionnaire that corresponds to this question in the QuestionnaireResponse resource.
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * The actual question as shown to the user to prompt them for an answer.
   */
  text?: string | undefined;
  _text?: Element | undefined;
}
/**
 * Grouped questions
 */
export interface QuestionnaireResponseGroup extends BackboneElement {
  /**
   * A sub-group within a group. The ordering of groups within this group is relevant.
   */
  group?: QuestionnaireResponseGroup[] | undefined;
  /**
   * Identifies the group from the Questionnaire that corresponds to this group in the QuestionnaireResponse resource.
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * Set of questions within this group. The order of questions within the group is relevant.
   */
  question?: QuestionnaireResponseGroupQuestion[] | undefined;
  /**
   * More specific subject this section's answers are about, details the subject given in QuestionnaireResponse.
   */
  subject?: Reference | undefined;
  /**
   * Additional text for the group, used for display purposes.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * Text that is displayed above the contents of the group.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
export interface QuestionnaireResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'QuestionnaireResponse';
  /**
   * Person who received the answers to the questions in the QuestionnaireResponse and recorded them in the system.
   */
  author?: Reference | undefined;
  /**
   * The date and/or time that this version of the questionnaire response was authored.
   */
  authored?: string | undefined;
  _authored?: Element | undefined;
  /**
   * Encounter during which this set of questionnaire response were collected. When there were multiple encounters, this is the one considered most relevant to the context of the answers.
   */
  encounter?: Reference | undefined;
  /**
   * A group of questions to a possibly similarly grouped set of questions in the questionnaire response.
   */
  group?: QuestionnaireResponseGroup | undefined;
  /**
   * A business identifier assigned to a particular completed (or partially completed) questionnaire.
   */
  identifier?: Identifier | undefined;
  /**
   * Indicates the Questionnaire resource that defines the form for which answers are being provided.
   */
  questionnaire?: Reference | undefined;
  /**
   * The person who answered the questions about the subject.
   */
  source?: Reference | undefined;
  /**
   * The lifecycle status of the questionnaire response as a whole.
   */
  status: ('in-progress'|'completed'|'amended');
  _status?: Element | undefined;
  /**
   * The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.
   */
  subject?: Reference | undefined;
}
export interface ReferralRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ReferralRequest';
  /**
   * Date/DateTime of creation for draft requests and date of activation for active requests.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Date/DateTime the request for referral or transfer of care is sent by the author.
   */
  dateSent?: string | undefined;
  _dateSent?: Element | undefined;
  /**
   * The reason element gives a short description of why the referral is being made, the description expands on this to support a more complete clinical summary.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The encounter at which the request for referral or transfer of care is initiated.
   */
  encounter?: Reference | undefined;
  /**
   * The period of time within which the services identified in the referral/transfer of care is specified or required to occur.
   */
  fulfillmentTime?: Period | undefined;
  /**
   * Business identifier that uniquely identifies the referral/care transfer request instance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The patient who is the subject of a referral or transfer of care request.
   */
  patient?: Reference | undefined;
  /**
   * An indication of the urgency of referral (or where applicable the type of transfer of care) request.
   */
  priority?: CodeableConcept | undefined;
  /**
   * Description of clinical condition indicating why referral/transfer of care is requested.  For example:  Pathological Anomalies, Disabled (physical or mental),  Behavioral Management.
   */
  reason?: CodeableConcept | undefined;
  /**
   * The healthcare provider(s) or provider organization(s) who/which is to receive the referral/transfer of care request.
   */
  recipient?: Reference[] | undefined;
  /**
   * The healthcare provider or provider organization who/which initiated the referral/transfer of care request. Can also be  Patient (a self referral).
   */
  requester?: Reference | undefined;
  /**
   * The service(s) that is/are requested to be provided to the patient.  For example: cardiac pacemaker insertion.
   */
  serviceRequested?: CodeableConcept[] | undefined;
  /**
   * Indication of the clinical domain or discipline to which the referral or transfer of care request is sent.  For example: Cardiology Gastroenterology Diabetology.
   */
  specialty?: CodeableConcept | undefined;
  /**
   * The workflow status of the referral or transfer of care request.
   */
  status: ('draft'|'requested'|'active'|'cancelled'|'accepted'|'rejected'|'completed');
  _status?: Element | undefined;
  /**
   * Any additional (administrative, financial or clinical) information required to support request for referral or transfer of care.  For example: Presenting problems/chief complaints Medical History Family History Alerts Allergy/Intolerance and Adverse Reactions Medications Observations/Assessments (may include cognitive and fundtional assessments) Diagnostic Reports Care Plan.
   */
  supportingInformation?: Reference[] | undefined;
  /**
   * An indication of the type of referral (or where applicable the type of transfer of care) request.
   */
  type?: CodeableConcept | undefined;
}
export interface RelatedPerson extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RelatedPerson';
  /**
   * Address where the related person can be contacted or visited.
   */
  address?: Address[] | undefined;
  /**
   * The date on which the related person was born.
   */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;
  /**
   * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * Identifier for a person within a particular scope.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A name associated with the person.
   */
  name?: HumanName | undefined;
  /**
   * The patient this person is related to.
   */
  patient: Reference;
  /**
   * The period of time that this relationship is considered to be valid. If there are no dates defined, then the interval is unknown.
   */
  period?: Period | undefined;
  /**
   * Image of the person.
   */
  photo?: Attachment[] | undefined;
  /**
   * The nature of the relationship between a patient and the related person.
   */
  relationship?: CodeableConcept | undefined;
  /**
   * A contact detail for the person, e.g. a telephone number or an email address.
   */
  telecom?: ContactPoint[] | undefined;
}
export interface Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: string;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
}
/**
 * Outcome predicted
 */
export interface RiskAssessmentPrediction extends BackboneElement {
  /**
   * One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
   */
  outcome: CodeableConcept;
  /**
   * How likely is the outcome (in the specified timeframe).
   */
  probabilityCodeableConcept?: CodeableConcept | undefined;
  /**
   * How likely is the outcome (in the specified timeframe).
   */
  probabilityNumber?: number | undefined;
  /**
   * How likely is the outcome (in the specified timeframe).
   */
  probabilityRange?: Range | undefined;
  /**
   * Additional information explaining the basis for the prediction.
   */
  rationale?: string | undefined;
  _rationale?: Element | undefined;
  /**
   * Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.).
   */
  relativeRisk?: number | undefined;
  /**
   * Indicates the period of time or age range of the subject to which the specified probability applies.
   */
  whenPeriod?: Period | undefined;
  /**
   * Indicates the period of time or age range of the subject to which the specified probability applies.
   */
  whenRange?: Range | undefined;
}
export interface RiskAssessment extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RiskAssessment';
  /**
   * Indicates the source data considered as part of the assessment (FamilyHistory, Observations, Procedures, Conditions, etc.).
   */
  basis?: Reference[] | undefined;
  /**
   * For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
   */
  condition?: Reference | undefined;
  /**
   * The date (and possibly time) the risk assessment was performed.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The encounter where the assessment was performed.
   */
  encounter?: Reference | undefined;
  /**
   * Business identifier assigned to the risk assessment.
   */
  identifier?: Identifier | undefined;
  /**
   * The algorithm, process or mechanism used to evaluate the risk.
   */
  method?: CodeableConcept | undefined;
  /**
   * A description of the steps that might be taken to reduce the identified risk(s).
   */
  mitigation?: string | undefined;
  _mitigation?: Element | undefined;
  /**
   * The provider or software application that performed the assessment.
   */
  performer?: Reference | undefined;
  /**
   * Describes the expected outcome for the subject.
   */
  prediction?: RiskAssessmentPrediction[] | undefined;
  /**
   * The patient or group the risk assessment applies to.
   */
  subject?: Reference | undefined;
}
export interface Schedule extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Schedule';
  /**
   * The resource this Schedule resource is providing availability information for. These are expected to usually be one of HealthcareService, Location, Practitioner, Device, Patient or RelatedPerson.
   */
  actor: Reference;
  /**
   * Comments on the availability to describe any extended information. Such as custom constraints on the slot(s) that may be associated.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * External Ids for this item.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The period of time that the slots that are attached to this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
   */
  planningHorizon?: Period | undefined;
  /**
   * The schedule type can be used for the categorization of healthcare services or other appointment types.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Contact details of the publisher
 */
export interface SearchParameterContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the search parameter.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[] | undefined;
}
export interface SearchParameter extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SearchParameter';
  /**
   * The base resource type that this search parameter refers to.
   */
  base: ('Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription');
  _base?: Element | undefined;
  /**
   * The code used in the URL or the parameter name in a parameters resource for this search parameter.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: SearchParameterContact[] | undefined;
  /**
   * The date  (and optionally time) when the search parameter definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A description of the search parameters and how it used.
   */
  description: string;
  _description?: Element | undefined;
  /**
   * A flag to indicate that this search parameter definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A free text natural language name identifying the search parameter.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the search parameter.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * The Scope and Usage that this search parameter was created to meet.
   */
  requirements?: string | undefined;
  _requirements?: Element | undefined;
  /**
   * The status of this search parameter definition.
   */
  status?: ('draft'|'active'|'retired') | undefined;
  _status?: Element | undefined;
  /**
   * Types of resource (if a resource is referenced).
   */
  target?: ('Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription')[] | undefined;
  _target?: Element[] | undefined;
  /**
   * The type of value a search parameter refers to, and how the content is interpreted.
   */
  type: ('number'|'date'|'string'|'token'|'reference'|'composite'|'quantity'|'uri');
  _type?: Element | undefined;
  /**
   * An absolute URL that is used to identify this search parameter when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this search parameter is (or will be) published.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * An XPath expression that returns a set of elements for the search parameter.
   */
  xpath?: string | undefined;
  _xpath?: Element | undefined;
  /**
   * How the search parameter relates to the set of elements returned by evaluating the xpath query.
   */
  xpathUsage?: ('normal'|'phonetic'|'nearby'|'distance'|'other') | undefined;
  _xpathUsage?: Element | undefined;
}
export interface Slot extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Slot';
  /**
   * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Date/Time that the slot is to conclude.
   */
  end: string;
  _end?: Element | undefined;
  /**
   * busy | free | busy-unavailable | busy-tentative.
   */
  freeBusyType: ('busy'|'free'|'busy-unavailable'|'busy-tentative');
  _freeBusyType?: Element | undefined;
  /**
   * External Ids for this item.
   */
  identifier?: Identifier[] | undefined;
  /**
   * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
   */
  overbooked?: boolean | undefined;
  _overbooked?: Element | undefined;
  /**
   * The schedule resource that this slot defines an interval of status information.
   */
  schedule: Reference;
  /**
   * Date/Time that the slot is to begin.
   */
  start: string;
  _start?: Element | undefined;
  /**
   * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Collection details
 */
export interface SpecimenCollection extends BackboneElement {
  /**
   * Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.
   */
  bodySite?: CodeableConcept | undefined;
  /**
   * Time when specimen was collected from subject - the physiologically relevant time.
   */
  collectedString?: string | undefined;
  _collectedString?: Element | undefined;
  /**
   * Time when specimen was collected from subject - the physiologically relevant time.
   */
  collectedPeriod?: Period | undefined;
  /**
   * Person who collected the specimen.
   */
  collector?: Reference | undefined;
  /**
   * To communicate any details or issues encountered during the specimen collection procedure.
   */
  comment?: string[] | undefined;
  _comment?: Element[] | undefined;
  /**
   * A coded value specifying the technique that is used to perform the procedure.
   */
  method?: CodeableConcept | undefined;
  /**
   * The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
   */
  quantity?: Quantity | undefined;
}
/**
 * Direct container of specimen (tube/slide, etc.)
 */
export interface SpecimenContainer extends BackboneElement {
  /**
   * Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  additiveCodeableConcept?: CodeableConcept | undefined;
  /**
   * Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  additiveReference?: Reference | undefined;
  /**
   * The capacity (volume or other measure) the container may contain.
   */
  capacity?: Quantity | undefined;
  /**
   * Textual description of the container.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Id for container. There may be multiple; a manufacturer's bar code, lab assigned identifier, etc. The container ID may differ from the specimen id in some circumstances.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
   */
  specimenQuantity?: Quantity | undefined;
  /**
   * The type of container associated with the specimen (e.g. slide, aliquot, etc.).
   */
  type?: CodeableConcept | undefined;
}
/**
 * Treatment and processing step details
 */
export interface SpecimenTreatment extends BackboneElement {
  /**
   * Material used in the processing step.
   */
  additive?: Reference[] | undefined;
  /**
   * Textual description of procedure.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A coded value specifying the procedure used to process the specimen.
   */
  procedure?: CodeableConcept | undefined;
}
export interface Specimen extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Specimen';
  /**
   * The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
   */
  accessionIdentifier?: Identifier | undefined;
  /**
   * Details concerning the specimen collection.
   */
  collection?: SpecimenCollection | undefined;
  /**
   * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
   */
  container?: SpecimenContainer[] | undefined;
  /**
   * Id for specimen.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.
   */
  parent?: Reference[] | undefined;
  /**
   * Time when specimen was received for processing or testing.
   */
  receivedTime?: string | undefined;
  _receivedTime?: Element | undefined;
  /**
   * The availability of the specimen.
   */
  status?: ('available'|'unavailable'|'unsatisfactory'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * Where the specimen came from. This may be from the patient(s) or from the environment or a device.
   */
  subject: Reference;
  /**
   * Details concerning treatment and processing steps for the specimen.
   */
  treatment?: SpecimenTreatment[] | undefined;
  /**
   * The kind of material that forms the specimen.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Contact details of the publisher
 */
export interface StructureDefinitionContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the structure definition.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Differential view of the structure
 */
export interface StructureDefinitionDifferential extends BackboneElement {
  /**
   * Captures constraints on each element within the resource.
   */
  element: ElementDefinition[];
}
/**
 * External specification that the content is mapped to
 */
export interface StructureDefinitionMapping extends BackboneElement {
  /**
   * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
   */
  comments?: string | undefined;
  _comments?: Element | undefined;
  /**
   * An Internal id that is used to identify this mapping set when specific mappings are made.
   */
  identity: string;
  _identity?: Element | undefined;
  /**
   * A name for the specification that is being mapped to.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * An absolute URI that identifies the specification that this mapping is expressed to.
   */
  uri?: string | undefined;
  _uri?: Element | undefined;
}
/**
 * Snapshot view of the structure
 */
export interface StructureDefinitionSnapshot extends BackboneElement {
  /**
   * Captures constraints on each element within the resource.
   */
  element: ElementDefinition[];
}
export interface StructureDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'StructureDefinition';
  /**
   * Whether structure this definition describes is abstract or not  - that is, whether an actual exchanged item can ever be of this type.
   */
  abstract: boolean;
  _abstract?: Element | undefined;
  /**
   * An absolute URI that is the base structure from which this set of constraints is derived.
   */
  base?: string | undefined;
  _base?: Element | undefined;
  /**
   * A set of terms from external terminologies that may be used to assist with indexing and searching of templates.
   */
  code?: Coding[] | undefined;
  /**
   * The type of type that is being constrained - a data type, an extension, a resource, including abstract ones. If this field is present, it indicates that the structure definition is a constraint. If it is not present, then the structure definition is the definition of a base structure.
   */
  constrainedType?: ('Address'|'Age'|'Annotation'|'Attachment'|'BackboneElement'|'CodeableConcept'|'Coding'|'ContactPoint'|'Count'|'Distance'|'Duration'|'Element'|'ElementDefinition'|'Extension'|'HumanName'|'Identifier'|'Meta'|'Money'|'Narrative'|'Period'|'Quantity'|'Range'|'Ratio'|'Reference'|'SampledData'|'Signature'|'SimpleQuantity'|'Timing'|'base64Binary'|'boolean'|'code'|'date'|'dateTime'|'decimal'|'id'|'instant'|'integer'|'markdown'|'oid'|'positiveInt'|'string'|'time'|'unsignedInt'|'uri'|'uuid'|'xhtml'|'Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription') | undefined;
  _constrainedType?: Element | undefined;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: StructureDefinitionContact[] | undefined;
  /**
   * Identifies the types of resource or data type elements to which the extension can be applied.
   */
  context?: string[] | undefined;
  _context?: Element[] | undefined;
  /**
   * If this is an extension, Identifies the context within FHIR resources where the extension can be used.
   */
  contextType?: ('resource'|'datatype'|'mapping'|'extension') | undefined;
  _contextType?: Element | undefined;
  /**
   * A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date this version of the structure definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the StructureDefinition and its use.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
   */
  differential?: StructureDefinitionDifferential | undefined;
  /**
   * Defined so that applications can use this name when displaying the value of the extension to the user.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * This StructureDefinition was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 1.0.2 for this version.
   */
  fhirVersion?: string | undefined;
  _fhirVersion?: Element | undefined;
  /**
   * Formal identifier that is used to identify this StructureDefinition when it is represented in other formats, or referenced in a specification, model, design or an instance  (should be globally unique OID, UUID, or URI), (if it's not possible to use the literal URI).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Defines the kind of structure that this definition is describing.
   */
  kind: ('datatype'|'resource'|'logical');
  _kind?: Element | undefined;
  /**
   * An external specification that the content is mapped to.
   */
  mapping?: StructureDefinitionMapping[] | undefined;
  /**
   * A free text natural language name identifying the StructureDefinition.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the structure definition.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explains why this structure definition is needed and why it's been constrained as it has.
   */
  requirements?: string | undefined;
  _requirements?: Element | undefined;
  /**
   * A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.
   */
  snapshot?: StructureDefinitionSnapshot | undefined;
  /**
   * The status of the StructureDefinition.
   */
  status: ('draft'|'active'|'retired');
  _status?: Element | undefined;
  /**
   * An absolute URL that is used to identify this structure definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this structure definition is (or will be) published.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of structure definitions.
   */
  useContext?: CodeableConcept[] | undefined;
  /**
   * The identifier that is used to identify this version of the StructureDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the StructureDefinition author manually.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * The channel on which to report matches to the criteria
 */
export interface SubscriptionChannel extends BackboneElement {
  /**
   * The uri that describes the actual end-point to send messages to.
   */
  endpoint?: string | undefined;
  _endpoint?: Element | undefined;
  /**
   * Additional headers / information to send as part of the notification.
   */
  header?: string | undefined;
  _header?: Element | undefined;
  /**
   * The mime type to send the payload in - either application/xml+fhir, or application/json+fhir. If the mime type is blank, then there is no payload in the notification, just a notification.
   */
  payload: string;
  _payload?: Element | undefined;
  /**
   * The type of channel to send notifications on.
   */
  type: ('rest-hook'|'websocket'|'email'|'sms'|'message');
  _type?: Element | undefined;
}
export interface Subscription extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Subscription';
  /**
   * Details where to send notifications when resources are received that meet the criteria.
   */
  channel: SubscriptionChannel;
  /**
   * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
   */
  contact?: ContactPoint[] | undefined;
  /**
   * The rules that the server should use to determine when to generate notifications for this subscription.
   */
  criteria: string;
  _criteria?: Element | undefined;
  /**
   * The time for the server to turn the subscription off.
   */
  end?: string | undefined;
  _end?: Element | undefined;
  /**
   * A record of the last error that occurred when the server processed a notification.
   */
  error?: string | undefined;
  _error?: Element | undefined;
  /**
   * A description of why this subscription is defined.
   */
  reason: string;
  _reason?: Element | undefined;
  /**
   * The status of the subscription, which marks the server state for managing the subscription.
   */
  status: ('requested'|'active'|'error'|'off');
  _status?: Element | undefined;
  /**
   * A tag to add to any resource that matches the criteria, after the subscription is processed.
   */
  tag?: Coding[] | undefined;
}
/**
 * Composition information about the substance
 */
export interface SubstanceIngredient extends BackboneElement {
  /**
   * The amount of the ingredient in the substance - a concentration ratio.
   */
  quantity?: Ratio | undefined;
  /**
   * Another substance that is a component of this substance.
   */
  substance: Reference;
}
/**
 * If this describes a specific package/container of the substance
 */
export interface SubstanceInstance extends BackboneElement {
  /**
   * When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
   */
  expiry?: string | undefined;
  _expiry?: Element | undefined;
  /**
   * Identifier associated with the package/container (usually a label affixed directly).
   */
  identifier?: Identifier | undefined;
  /**
   * The amount of the substance.
   */
  quantity?: Quantity | undefined;
}
export interface Substance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Substance';
  /**
   * A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * A code (or set of codes) that identify this substance.
   */
  code: CodeableConcept;
  /**
   * A description of the substance - its appearance, handling requirements, and other usage notes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Unique identifier for the substance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A substance can be composed of other substances.
   */
  ingredient?: SubstanceIngredient[] | undefined;
  /**
   * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
   */
  instance?: SubstanceInstance[] | undefined;
}
export interface SupplyDelivery extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SupplyDelivery';
  /**
   * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
   */
  destination?: Reference | undefined;
  /**
   * Identifier assigned by the dispensing facility when the item(s) is dispensed.
   */
  identifier?: Identifier | undefined;
  /**
   * A link to a resource representing the person whom the delivered item is for.
   */
  patient?: Reference | undefined;
  /**
   * The amount of supply that has been dispensed. Includes unit of measure.
   */
  quantity?: Quantity | undefined;
  /**
   * Identifies the person who picked up the Supply.
   */
  receiver?: Reference[] | undefined;
  /**
   * A code specifying the state of the dispense event.
   */
  status?: ('in-progress'|'completed'|'abandoned') | undefined;
  _status?: Element | undefined;
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a simple attribute carrying a code that identifies the item from a known list.
   */
  suppliedItem?: Reference | undefined;
  /**
   * The individual responsible for dispensing the medication, supplier or device.
   */
  supplier?: Reference | undefined;
  /**
   * The time the dispensed item was sent or handed to the patient (or agent).
   */
  time?: string | undefined;
  _time?: Element | undefined;
  /**
   * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  type?: CodeableConcept | undefined;
  /**
   * The time the dispense event occurred.
   */
  whenPrepared?: Period | undefined;
}
/**
 * When the request should be fulfilled
 */
export interface SupplyRequestWhen extends BackboneElement {
  /**
   * Code indicating when the request should be fulfilled.
   */
  code?: CodeableConcept | undefined;
  /**
   * Formal fulfillment schedule.
   */
  schedule?: Timing | undefined;
}
export interface SupplyRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SupplyRequest';
  /**
   * When the request was made.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Unique identifier for this supply request.
   */
  identifier?: Identifier | undefined;
  /**
   * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
   */
  kind?: CodeableConcept | undefined;
  /**
   * The item that is requested to be supplied.
   */
  orderedItem?: Reference | undefined;
  /**
   * A link to a resource representing the person whom the ordered item is for.
   */
  patient?: Reference | undefined;
  /**
   * Why the supply item was requested.
   */
  reasonCodeableConcept?: CodeableConcept | undefined;
  /**
   * Why the supply item was requested.
   */
  reasonReference?: Reference | undefined;
  /**
   * The Practitioner , Organization or Patient who initiated this order for the supply.
   */
  source?: Reference | undefined;
  /**
   * Status of the supply request.
   */
  status?: ('requested'|'completed'|'failed'|'cancelled') | undefined;
  _status?: Element | undefined;
  /**
   * Who is intended to fulfill the request.
   */
  supplier?: Reference[] | undefined;
  /**
   * When the request should be fulfilled.
   */
  when?: SupplyRequestWhen | undefined;
}
/**
 * Contact details of the publisher
 */
export interface TestScriptContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the Test Script.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Fixture in the test script - by reference (uri)
 */
export interface TestScriptFixture extends BackboneElement {
  /**
   * Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
   */
  autocreate?: boolean | undefined;
  _autocreate?: Element | undefined;
  /**
   * Whether or not to implicitly delete the fixture during teardown If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
   */
  autodelete?: boolean | undefined;
  _autodelete?: Element | undefined;
  /**
   * Reference to the resource (containing the contents of the resource needed for operations).
   */
  resource?: Reference | undefined;
}
/**
 * Capabilities  that are assumed to function correctly on the FHIR server being tested
 */
export interface TestScriptMetadataCapability extends BackboneElement {
  /**
   * Minimum conformance required of server for test script to execute successfully.   If server does not meet at a minimum the reference conformance definition, then all tests in this script are skipped.
   */
  conformance: Reference;
  /**
   * Description of the capabilities that this test script is requiring the server to support.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Which server these requirements apply to.
   */
  destination?: number | undefined;
  /**
   * Links to the FHIR specification that describes this interaction and the resources involved in more detail.
   */
  link?: string[] | undefined;
  _link?: Element[] | undefined;
  /**
   * Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
   */
  required?: boolean | undefined;
  _required?: Element | undefined;
  /**
   * Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
   */
  validated?: boolean | undefined;
  _validated?: Element | undefined;
}
/**
 * Links to the FHIR specification
 */
export interface TestScriptMetadataLink extends BackboneElement {
  /**
   * Short description of the link.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * URL to a particular requirement or feature within the FHIR specification.
   */
  url: string;
  _url?: Element | undefined;
}
/**
 * Required capability that is assumed to function correctly on the FHIR server being tested
 */
export interface TestScriptMetadata extends BackboneElement {
  /**
   * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
   */
  capability: TestScriptMetadataCapability[];
  /**
   * A link to the FHIR specification that this test is covering.
   */
  link?: TestScriptMetadataLink[] | undefined;
}
/**
 * The assertion to perform
 */
export interface TestScriptSetupActionAssert extends BackboneElement {
  /**
   * Id of fixture used to compare the "sourceId/path" evaluations to.
   */
  compareToSourceId?: string | undefined;
  _compareToSourceId?: Element | undefined;
  /**
   * XPath or JSONPath expression against fixture used to compare the "sourceId/path" evaluations to.
   */
  compareToSourcePath?: string | undefined;
  _compareToSourcePath?: Element | undefined;
  /**
   * The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.
   */
  contentType?: ('xml'|'json') | undefined;
  _contentType?: Element | undefined;
  /**
   * The description would be used by test engines for tracking and reporting purposes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The direction to use for the assertion.
   */
  direction?: ('response'|'request') | undefined;
  _direction?: Element | undefined;
  /**
   * The HTTP header field name e.g. 'Location'.
   */
  headerField?: string | undefined;
  _headerField?: Element | undefined;
  /**
   * The label would be used for tracking/logging purposes by test engines.
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * The ID of a fixture.  Asserts that the response contains at a minimumId the fixture specified by minimumId.
   */
  minimumId?: string | undefined;
  _minimumId?: Element | undefined;
  /**
   * Whether or not the test execution performs validation on the bundle navigation links.
   */
  navigationLinks?: boolean | undefined;
  _navigationLinks?: Element | undefined;
  /**
   * The operator type.
   */
  operator?: ('equals'|'notEquals'|'in'|'notIn'|'greaterThan'|'lessThan'|'empty'|'notEmpty'|'contains'|'notContains') | undefined;
  _operator?: Element | undefined;
  /**
   * The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
   */
  path?: string | undefined;
  _path?: Element | undefined;
  /**
   * The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.
   */
  resource?: ('Address'|'Age'|'Annotation'|'Attachment'|'BackboneElement'|'CodeableConcept'|'Coding'|'ContactPoint'|'Count'|'Distance'|'Duration'|'Element'|'ElementDefinition'|'Extension'|'HumanName'|'Identifier'|'Meta'|'Money'|'Narrative'|'Period'|'Quantity'|'Range'|'Ratio'|'Reference'|'SampledData'|'Signature'|'SimpleQuantity'|'Timing'|'base64Binary'|'boolean'|'code'|'date'|'dateTime'|'decimal'|'id'|'instant'|'integer'|'markdown'|'oid'|'positiveInt'|'string'|'time'|'unsignedInt'|'uri'|'uuid'|'xhtml'|'Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription') | undefined;
  _resource?: Element | undefined;
  /**
   * okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
   */
  response?: ('okay'|'created'|'noContent'|'notModified'|'bad'|'forbidden'|'notFound'|'methodNotAllowed'|'conflict'|'gone'|'preconditionFailed'|'unprocessable') | undefined;
  _response?: Element | undefined;
  /**
   * The value of the HTTP response code to be tested.
   */
  responseCode?: string | undefined;
  _responseCode?: Element | undefined;
  /**
   * Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
   */
  sourceId?: string | undefined;
  _sourceId?: Element | undefined;
  /**
   * The ID of the Profile to validate against.
   */
  validateProfileId?: string | undefined;
  _validateProfileId?: Element | undefined;
  /**
   * The value to compare to.
   */
  value?: string | undefined;
  _value?: Element | undefined;
  /**
   * Whether or not the test execution will produce a warning only on error for this assert.
   */
  warningOnly?: boolean | undefined;
  _warningOnly?: Element | undefined;
}
/**
 * Each operation can have one ore more header elements
 */
export interface TestScriptSetupActionOperationRequestHeader extends BackboneElement {
  /**
   * The HTTP header field e.g. "Accept".
   */
  field: string;
  _field?: Element | undefined;
  /**
   * The value of the header e.g. "application/xml".
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * The setup operation to perform
 */
export interface TestScriptSetupActionOperation extends BackboneElement {
  /**
   * The content-type or mime-type to use for RESTful operation in the 'Accept' header.
   */
  accept?: ('xml'|'json') | undefined;
  _accept?: Element | undefined;
  /**
   * The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.
   */
  contentType?: ('xml'|'json') | undefined;
  _contentType?: Element | undefined;
  /**
   * The description would be used by test engines for tracking and reporting purposes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Which server to perform the operation on.
   */
  destination?: number | undefined;
  /**
   * Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
   */
  encodeRequestUrl?: boolean | undefined;
  _encodeRequestUrl?: Element | undefined;
  /**
   * The label would be used for tracking/logging purposes by test engines.
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * Path plus parameters after [type].  Used to set parts of the request URL explicitly.
   */
  params?: string | undefined;
  _params?: Element | undefined;
  /**
   * Header elements would be used to set HTTP headers.
   */
  requestHeader?: TestScriptSetupActionOperationRequestHeader[] | undefined;
  /**
   * The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.
   */
  resource?: ('Address'|'Age'|'Annotation'|'Attachment'|'BackboneElement'|'CodeableConcept'|'Coding'|'ContactPoint'|'Count'|'Distance'|'Duration'|'Element'|'ElementDefinition'|'Extension'|'HumanName'|'Identifier'|'Meta'|'Money'|'Narrative'|'Period'|'Quantity'|'Range'|'Ratio'|'Reference'|'SampledData'|'Signature'|'SimpleQuantity'|'Timing'|'base64Binary'|'boolean'|'code'|'date'|'dateTime'|'decimal'|'id'|'instant'|'integer'|'markdown'|'oid'|'positiveInt'|'string'|'time'|'unsignedInt'|'uri'|'uuid'|'xhtml'|'Account'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CarePlan'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'Communication'|'CommunicationRequest'|'Composition'|'ConceptMap'|'Condition'|'Conformance'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'Group'|'HealthcareService'|'ImagingObjectSelection'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'List'|'Location'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationOrder'|'MedicationStatement'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Order'|'OrderResponse'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'Practitioner'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Slot'|'Specimen'|'StructureDefinition'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'TestScript'|'ValueSet'|'VisionPrescription') | undefined;
  _resource?: Element | undefined;
  /**
   * The fixture id (maybe new) to map to the response.
   */
  responseId?: string | undefined;
  _responseId?: Element | undefined;
  /**
   * The id of the fixture used as the body of a PUT or POST request.
   */
  sourceId?: string | undefined;
  _sourceId?: Element | undefined;
  /**
   * Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
   */
  targetId?: string | undefined;
  _targetId?: Element | undefined;
  /**
   * Server interaction or operation type.
   */
  type?: Coding | undefined;
  /**
   * Complete request URL.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * A setup operation or assert to perform
 */
export interface TestScriptSetupAction extends BackboneElement {
  /**
   * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
   */
  assert?: TestScriptSetupActionAssert | undefined;
  /**
   * The operation to perform.
   */
  operation?: TestScriptSetupActionOperation | undefined;
}
/**
 * A series of required setup operations before tests are executed
 */
export interface TestScriptSetup extends BackboneElement {
  /**
   * Action would contain either an operation or an assertion.
   */
  action: TestScriptSetupAction[];
  /**
   * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
   */
  metadata?: TestScriptMetadata | undefined;
}
/**
 * One or more teardown operations to perform
 */
export interface TestScriptTeardownAction extends BackboneElement {
  /**
   * An operation would involve a REST request to a server.
   */
  operation?: TestScriptSetupActionOperation | undefined;
}
/**
 * A series of required clean up steps
 */
export interface TestScriptTeardown extends BackboneElement {
  /**
   * The teardown action will only contain an operation.
   */
  action: TestScriptTeardownAction[];
}
/**
 * A test operation or assert to perform
 */
export interface TestScriptTestAction extends BackboneElement {
  /**
   * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
   */
  assert?: TestScriptSetupActionAssert | undefined;
  /**
   * An operation would involve a REST request to a server.
   */
  operation?: TestScriptSetupActionOperation | undefined;
}
/**
 * A test in this script
 */
export interface TestScriptTest extends BackboneElement {
  /**
   * Action would contain either an operation or an assertion.
   */
  action: TestScriptTestAction[];
  /**
   * A short description of the test used by test engines for tracking and reporting purposes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
   */
  metadata?: TestScriptMetadata | undefined;
  /**
   * The name of this test used for tracking/logging purposes by test engines.
   */
  name?: string | undefined;
  _name?: Element | undefined;
}
/**
 * Placeholder for evaluated elements
 */
export interface TestScriptVariable extends BackboneElement {
  /**
   * Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
   */
  headerField?: string | undefined;
  _headerField?: Element | undefined;
  /**
   * Descriptive name for this variable.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * XPath or JSONPath against the fixture body.  When variables are defined, either headerField must be specified or path, but not both.
   */
  path?: string | undefined;
  _path?: Element | undefined;
  /**
   * Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
   */
  sourceId?: string | undefined;
  _sourceId?: Element | undefined;
}
export interface TestScript extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'TestScript';
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: TestScriptContact[] | undefined;
  /**
   * A copyright statement relating to the Test Script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date this version of the test tcript was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the test cases change.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the TestScript and its use.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * This TestScript was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
   */
  fixture?: TestScriptFixture[] | undefined;
  /**
   * Identifier for the TestScript assigned for external purposes outside the context of FHIR.
   */
  identifier?: Identifier | undefined;
  /**
   * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
   */
  metadata?: TestScriptMetadata | undefined;
  /**
   * If the tests apply to more than one FHIR server (e.g. cross-server interoperability tests) then multiserver=true. Defaults to false if value is unspecified.
   */
  multiserver?: boolean | undefined;
  _multiserver?: Element | undefined;
  /**
   * A free text natural language name identifying the TestScript.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Reference to the profile to be used for validation.
   */
  profile?: Reference[] | undefined;
  /**
   * The name of the individual or organization that published the Test Script.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explains why this Test Script is needed and why it's been constrained as it has.
   */
  requirements?: string | undefined;
  _requirements?: Element | undefined;
  /**
   * A series of required setup operations before tests are executed.
   */
  setup?: TestScriptSetup | undefined;
  /**
   * The status of the TestScript.
   */
  status: ('draft'|'active'|'retired');
  _status?: Element | undefined;
  /**
   * A series of operations required to clean up after the all the tests are executed (successfully or otherwise).
   */
  teardown?: TestScriptTeardown | undefined;
  /**
   * A test in this script.
   */
  test?: TestScriptTest[] | undefined;
  /**
   * An absolute URL that is used to identify this Test Script. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this Test Script is (or will be) published.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of Test Scripts.
   */
  useContext?: CodeableConcept[] | undefined;
  /**
   * Variable is set based either on element value in response body or on header field value in the response headers.
   */
  variable?: TestScriptVariable[] | undefined;
  /**
   * The identifier that is used to identify this version of the TestScript. This is an arbitrary value managed by the TestScript author manually.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Additional representations for the concept
 */
export interface ValueSetCodeSystemConceptDesignation extends BackboneElement {
  /**
   * The language this designation is defined for.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * A code that details how this designation would be used.
   */
  use?: Coding | undefined;
  /**
   * The text value for this designation.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Concepts in the code system
 */
export interface ValueSetCodeSystemConcept extends BackboneElement {
  /**
   * If this code is not for use as a real concept.
   */
  abstract?: boolean | undefined;
  _abstract?: Element | undefined;
  /**
   * A code - a text symbol - that uniquely identifies the concept within the code system.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) and can only be determined by examining the definitions of the concepts.
   */
  concept?: ValueSetCodeSystemConcept[] | undefined;
  /**
   * The formal definition of the concept. The value set resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
   */
  designation?: ValueSetCodeSystemConceptDesignation[] | undefined;
  /**
   * A human readable string that is the recommended default way to present this concept to a user.
   */
  display?: string | undefined;
  _display?: Element | undefined;
}
/**
 * An inline code system, which is part of this value set
 */
export interface ValueSetCodeSystem extends BackboneElement {
  /**
   * If code comparison is case sensitive when codes within this system are compared to each other.
   */
  caseSensitive?: boolean | undefined;
  _caseSensitive?: Element | undefined;
  /**
   * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.
   */
  concept: ValueSetCodeSystemConcept[];
  /**
   * An absolute URI that is used to reference this code system, including in [Coding]{datatypes.html#Coding}.system.
   */
  system: string;
  _system?: Element | undefined;
  /**
   * The version of this code system that defines the codes. Note that the version is optional because a well maintained code system does not suffer from versioning, and therefore the version does not need to be maintained. However many code systems are not well maintained, and the version needs to be defined and tracked.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * A concept defined in the system
 */
export interface ValueSetComposeIncludeConcept extends BackboneElement {
  /**
   * Specifies a code for the concept to be included or excluded.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
   */
  designation?: ValueSetCodeSystemConceptDesignation[] | undefined;
  /**
   * The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.
   */
  display?: string | undefined;
  _display?: Element | undefined;
}
/**
 * Select codes/concepts by their properties (including relationships)
 */
export interface ValueSetComposeIncludeFilter extends BackboneElement {
  /**
   * The kind of operation to perform as a part of the filter criteria.
   */
  op: ('='|'is-a'|'is-not-a'|'regex'|'in'|'not-in');
  _op?: Element | undefined;
  /**
   * A code that identifies a property defined in the code system.
   */
  property: string;
  _property?: Element | undefined;
  /**
   * The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Include one or more codes from a code system
 */
export interface ValueSetComposeInclude extends BackboneElement {
  /**
   * Specifies a concept to be included or excluded.
   */
  concept?: ValueSetComposeIncludeConcept[] | undefined;
  /**
   * Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
   */
  filter?: ValueSetComposeIncludeFilter[] | undefined;
  /**
   * An absolute URI which is the code system from which the selected codes come from.
   */
  system: string;
  _system?: Element | undefined;
  /**
   * The version of the code system that the codes are selected from.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * When value set includes codes from elsewhere
 */
export interface ValueSetCompose extends BackboneElement {
  /**
   * Exclude one or more codes from the value set.
   */
  exclude?: ValueSetComposeInclude[] | undefined;
  /**
   * Includes the contents of the referenced value set as a part of the contents of this value set. This is an absolute URI that is a reference to ValueSet.uri.
   */
  import?: string[] | undefined;
  _import?: Element[] | undefined;
  /**
   * Include one or more codes from a code system.
   */
  include?: ValueSetComposeInclude[] | undefined;
}
/**
 * Contact details of the publisher
 */
export interface ValueSetContact extends BackboneElement {
  /**
   * The name of an individual to contact regarding the value set.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Contact details for individual (if a name was provided) or the publisher.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Codes in the value set
 */
export interface ValueSetExpansionContains extends BackboneElement {
  /**
   * If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.
   */
  abstract?: boolean | undefined;
  _abstract?: Element | undefined;
  /**
   * The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * Other codes and entries contained under this entry in the hierarchy.
   */
  contains?: ValueSetExpansionContains[] | undefined;
  /**
   * The recommended display for this item in the expansion.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * An absolute URI which is the code system in which the code for this item in the expansion is defined.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * The version of this code system that defined this code and/or display. This should only be used with code systems that do not enforce concept permanence.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Parameter that controlled the expansion process
 */
export interface ValueSetExpansionParameter extends BackboneElement {
  /**
   * The name of the parameter.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The value of the parameter.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * The value of the parameter.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * The value of the parameter.
   */
  valueNumber?: number | undefined;
}
/**
 * Used when the value set is "expanded"
 */
export interface ValueSetExpansion extends BackboneElement {
  /**
   * The codes that are contained in the value set expansion.
   */
  contains?: ValueSetExpansionContains[] | undefined;
  /**
   * An identifier that uniquely identifies this expansion of the valueset. Systems may re-use the same identifier as long as the expansion and the definition remain the same, but are not required to do so.
   */
  identifier: string;
  _identifier?: Element | undefined;
  /**
   * If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL not be present.
   */
  offset?: number | undefined;
  /**
   * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
   */
  parameter?: ValueSetExpansionParameter[] | undefined;
  /**
   * The time at which the expansion was produced by the expanding system.
   */
  timestamp: string;
  _timestamp?: Element | undefined;
  /**
   * The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.
   */
  total?: number | undefined;
}
export interface ValueSet extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ValueSet';
  /**
   * A definition of a code system, inlined into the value set (as a packaging convenience). Note that the inline code system may be used from other value sets by referring to its (codeSystem.system) directly.
   */
  codeSystem?: ValueSetCodeSystem | undefined;
  /**
   * A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.
   */
  compose?: ValueSetCompose | undefined;
  /**
   * Contacts to assist a user in finding and communicating with the publisher.
   */
  contact?: ValueSetContact[] | undefined;
  /**
   * A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date that the value set status was last changed. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes (e.g. the 'content logical definition').
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the use of the value set - reason for definition, "the semantic space" to be included in the value set, conditions of use, etc. The description may include a list of expected usages for the value set and can also describe the approach taken to build the value set.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
   */
  expansion?: ValueSetExpansion | undefined;
  /**
   * This valueset was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Whether this is intended to be used with an extensible binding or not.
   */
  extensible?: boolean | undefined;
  _extensible?: Element | undefined;
  /**
   * Formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier | undefined;
  /**
   * If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
   */
  immutable?: boolean | undefined;
  _immutable?: Element | undefined;
  /**
   * If a locked date is defined, then the Content Logical Definition must be evaluated using the current version of all referenced code system(s) and value set instances as of the locked date.
   */
  lockedDate?: string | undefined;
  _lockedDate?: Element | undefined;
  /**
   * A free text natural language name describing the value set.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the value set.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explains why this value set is needed and why it has been constrained as it has.
   */
  requirements?: string | undefined;
  _requirements?: Element | undefined;
  /**
   * The status of the value set.
   */
  status: ('draft'|'active'|'retired');
  _status?: Element | undefined;
  /**
   * An absolute URL that is used to identify this value set when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this value set is (or will be) published.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of value set definitions.
   */
  useContext?: CodeableConcept[] | undefined;
  /**
   * Used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Vision supply authorization
 */
export interface VisionPrescriptionDispense extends BackboneElement {
  /**
   * Power adjustment for multifocal lenses measured in diopters (0.25 units).
   */
  add?: number | undefined;
  /**
   * Adjustment for astigmatism measured in integer degrees.
   */
  axis?: number | undefined;
  /**
   * Back curvature measured in millimeters.
   */
  backCurve?: number | undefined;
  /**
   * The relative base, or reference lens edge, for the prism.
   */
  base?: ('up'|'down'|'in'|'out') | undefined;
  _base?: Element | undefined;
  /**
   * Brand recommendations or restrictions.
   */
  brand?: string | undefined;
  _brand?: Element | undefined;
  /**
   * Special color or pattern.
   */
  color?: string | undefined;
  _color?: Element | undefined;
  /**
   * Power adjustment for astigmatism measured in diopters (0.25 units).
   */
  cylinder?: number | undefined;
  /**
   * Contact lens diameter measured in millimeters.
   */
  diameter?: number | undefined;
  /**
   * The recommended maximum wear period for the lens.
   */
  duration?: Quantity | undefined;
  /**
   * The eye for which the lens applies.
   */
  eye?: ('right'|'left') | undefined;
  _eye?: Element | undefined;
  /**
   * Notes for special requirements such as coatings and lens materials.
   */
  notes?: string | undefined;
  _notes?: Element | undefined;
  /**
   * Contact lens power measured in diopters (0.25 units).
   */
  power?: number | undefined;
  /**
   * Amount of prism to compensate for eye alignment in fractional units.
   */
  prism?: number | undefined;
  /**
   * Identifies the type of vision correction product which is required for the patient.
   */
  product: Coding;
  /**
   * Lens power measured in diopters (0.25 units).
   */
  sphere?: number | undefined;
}
export interface VisionPrescription extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'VisionPrescription';
  /**
   * The date (and perhaps time) when the prescription was written.
   */
  dateWritten?: string | undefined;
  _dateWritten?: Element | undefined;
  /**
   * Deals with details of the dispense part of the supply specification.
   */
  dispense?: VisionPrescriptionDispense[] | undefined;
  /**
   * A link to a resource that identifies the particular occurrence of contact between patient and health care provider.
   */
  encounter?: Reference | undefined;
  /**
   * Business identifier which may be used by other parties to reference or identify the prescription.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A link to a resource representing the person to whom the vision products will be supplied.
   */
  patient?: Reference | undefined;
  /**
   * The healthcare professional responsible for authorizing the prescription.
   */
  prescriber?: Reference | undefined;
  /**
   * Can be the reason or the indication for writing the prescription.
   */
  reasonCodeableConcept?: CodeableConcept | undefined;
  /**
   * Can be the reason or the indication for writing the prescription.
   */
  reasonReference?: Reference | undefined;
}
/**
 * Resource binding for generic use.
 */
export type FhirResource = 
  Account
  |AllergyIntolerance
  |Appointment
  |AppointmentResponse
  |AuditEvent
  |Basic
  |Binary
  |BodySite
  |Bundle
  |CarePlan
  |Claim
  |ClaimResponse
  |ClinicalImpression
  |Communication
  |CommunicationRequest
  |Composition
  |ConceptMap
  |Condition
  |Conformance
  |Contract
  |Coverage
  |DataElement
  |DetectedIssue
  |Device
  |DeviceComponent
  |DeviceMetric
  |DeviceUseRequest
  |DeviceUseStatement
  |DiagnosticOrder
  |DiagnosticReport
  |DocumentManifest
  |DocumentReference
  |EligibilityRequest
  |EligibilityResponse
  |Encounter
  |EnrollmentRequest
  |EnrollmentResponse
  |EpisodeOfCare
  |ExplanationOfBenefit
  |FamilyMemberHistory
  |Flag
  |Goal
  |Group
  |HealthcareService
  |ImagingObjectSelection
  |ImagingStudy
  |Immunization
  |ImmunizationRecommendation
  |ImplementationGuide
  |List
  |Location
  |Media
  |Medication
  |MedicationAdministration
  |MedicationDispense
  |MedicationOrder
  |MedicationStatement
  |MessageHeader
  |NamingSystem
  |NutritionOrder
  |Observation
  |OperationDefinition
  |OperationOutcome
  |Order
  |OrderResponse
  |Organization
  |Parameters
  |Patient
  |PaymentNotice
  |PaymentReconciliation
  |Person
  |Practitioner
  |Procedure
  |ProcedureRequest
  |ProcessRequest
  |ProcessResponse
  |Provenance
  |Questionnaire
  |QuestionnaireResponse
  |ReferralRequest
  |RelatedPerson
  |RiskAssessment
  |Schedule
  |SearchParameter
  |Slot
  |Specimen
  |StructureDefinition
  |Subscription
  |Substance
  |SupplyDelivery
  |SupplyRequest
  |TestScript
  |ValueSet
  |VisionPrescription;
