// <auto-generated/>
// Contents of: hl7.fhir.r5.core#5.0.0, hl7.fhir.r5.expansions#5.0.0, hl7.fhir.uv.extensions#1.0.0
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Option: "Namespace" = "fhir{VersionNumber}"
  // Option: "MinTsVersion" = "3.7"
  // Option: "ExportKeys" = ""
  // Option: "IncludeExperimental" = "False"
  // Option: "FhirCacheDirectory" = "~/.fhir"
  // Option: "OutputDirectory" = "./generated"
  // Option: "Packages" = ""
  // Option: "OfflineMode" = "False"
// Minimum TypeScript Version: 3.7
/**
 * Note: address is intended to describe postal addresses for administrative purposes, not to describe absolute geographical coordinates.  Postal addresses are often used as proxies for physical locations (also see the [Location](location.html#) resource).
 */
export interface Address extends DataType {
  /**
   * The name of the city, town, suburb, village or other community or delivery center.
   */
  city?: string | undefined;
  _city?: Element | undefined;
  /**
   * Country - a nation as commonly understood or generally accepted.
   * ISO 3166 2- or 3- letter codes MAY be used in place of a human readable country name.
   */
  country?: string | undefined;
  _country?: Element | undefined;
  /**
   * The name of the administrative area (county).
   * District is sometimes known as county, but in some regions 'county' is used in place of city (municipality), so county name should be conveyed in city instead.
   */
  district?: string | undefined;
  _district?: Element | undefined;
  /**
   * This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
   */
  line?: string[] | undefined;
  _line?: Element[] | undefined;
  /**
   * Time period when address was/is in use.
   */
  period?: Period | undefined;
  /**
   * A postal code designating a region defined by the postal service.
   */
  postalCode?: string | undefined;
  _postalCode?: Element | undefined;
  /**
   * Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
   */
  state?: string | undefined;
  _state?: Element | undefined;
  /**
   * Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.
   * Can provide both a text representation and parts. Applications updating an address SHALL ensure that  when both text and parts are present,  no content is included in the text that isn't found in a part.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
   * The definition of Address states that "address is intended to describe postal addresses, not physical locations". However, many applications track whether an address has a dual purpose of being a location that can be visited as well as being a valid delivery destination, and Postal addresses are often used as proxies for physical locations (also see the [Location](location.html#) resource).
   */
  type?: ('postal'|'physical'|'both') | undefined;
  _type?: Element | undefined;
  /**
   * The purpose of this address.
   * Applications can assume that an address is current unless it explicitly says that it is temporary or old.
   */
  use?: ('home'|'work'|'temp'|'old'|'billing') | undefined;
  _use?: Element | undefined;
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Age extends Quantity {
}
/**
 * For systems that do not have structured annotations, they can simply communicate a single annotation with no author or time.  This element may need to be included in narrative because of the potential for modifying information.  *Annotations SHOULD NOT* be used to communicate "modifying" information that could be computable. (This is a SHOULD because enforcing user behavior is nearly impossible).
 */
export interface Annotation extends DataType {
  /**
   * The individual responsible for making the annotation.
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  authorReference?: Reference | undefined;
  /**
   * The individual responsible for making the annotation.
   * Organization is used when there's no need for specific attribution as to who made the comment.
   */
  authorstring?: string | undefined;
  _authorstring?: Element | undefined;
  /**
   * The text of the annotation in markdown format.
   */
  text: string;
  _text?: Element | undefined;
  /**
   * Indicates when this particular annotation was made.
   */
  time?: string | undefined;
  _time?: Element | undefined;
}
/**
 * When providing a summary view (for example with Observation.value[x]) Attachment should be represented with a brief display text such as "Signed Procedure Consent".
 */
export interface Attachment extends DataType {
  /**
   * Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
   */
  contentType?: string | undefined;
  _contentType?: Element | undefined;
  /**
   * The date that the attachment was first created.
   */
  creation?: string | undefined;
  _creation?: Element | undefined;
  /**
   * The actual data of the attachment - a sequence of bytes, base64 encoded.
   * The base64-encoded data SHALL be expressed in the same character set as the base resource XML or JSON.
   */
  data?: string | undefined;
  _data?: Element | undefined;
  /**
   * The duration of the recording in seconds - for audio and video.
   * The duration might differ from occurrencePeriod if recording was paused.
   */
  duration?: number | undefined;
  /**
   * The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
   * if the number of frames is not supplied, the value may be unknown. Applications should not assume that there is only one frame unless it is explicitly stated.
   */
  frames?: number | undefined;
  /**
   * The calculated hash of the data using SHA-1. Represented using base64.
   * The hash is calculated on the data prior to base64 encoding, if the data is based64 encoded. The hash is not intended to support digital signatures. Where protection against malicious threats a digital signature should be considered, see [Provenance.signature](provenance-definitions.html#Provenance.signature) for mechanism to protect a resource with a digital signature.
   */
  hash?: string | undefined;
  _hash?: Element | undefined;
  /**
   * Height of the image in pixels (photo/video).
   */
  height?: number | undefined;
  /**
   * The human language of the content. The value can be any valid value according to BCP 47.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The number of pages when printed.
   */
  pages?: number | undefined;
  /**
   * The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
   * The number of bytes is redundant if the data is provided as a base64binary, but is useful if the data is provided as a url reference.
   */
  size?: string | undefined;
  _size?: Element | undefined;
  /**
   * A label or set of text to display in place of the data.
   * May sometimes be derived from the source filename.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * A location where the data can be accessed.
   * If both data and url are provided, the url SHALL point to the same content as the data contains. Urls may be relative references or may reference transient locations such as a wrapping envelope using cid: though this has ramifications for using signatures. Relative URLs are interpreted relative to the service url, like a resource reference, rather than relative to the resource itself. If a URL is provided, it SHALL resolve to actual data.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * Width of the image in pixels (photo/video).
   */
  width?: number | undefined;
}
/**
 * Times the {item} is available
 */
export interface AvailabilityAvailableTime extends Element {
  /**
   * Always available? i.e. 24 hour service.
   */
  allDay?: boolean | undefined;
  _allDay?: Element | undefined;
  /**
   * Closing time of day (ignored if allDay = true).
   * The timezone is expected to be specified or implied by the context this datatype is used.
   */
  availableEndTime?: string | undefined;
  _availableEndTime?: Element | undefined;
  /**
   * Opening time of day (ignored if allDay = true).
   * The timezone is expected to be specified or implied by the context this datatype is used.
   */
  availableStartTime?: string | undefined;
  _availableStartTime?: Element | undefined;
  /**
   * mon | tue | wed | thu | fri | sat | sun.
   */
  daysOfWeek?: ('mon'|'tue'|'wed'|'thu'|'fri'|'sat'|'sun')[] | undefined;
  _daysOfWeek?: Element[] | undefined;
}
/**
 * Not available during this time due to provided reason
 */
export interface AvailabilityNotAvailableTime extends Element {
  /**
   * Reason presented to the user explaining why time not available.
   * The reason will generally be provided to give the textual reason for displaying when the {item} is not available, e.g. 'Closed public holidays' or 'Independence Day'. In cases such as this, the `during` might not be included and local knowledge would be required in such cases (as don't desire to keep updating when the holiday occurs each year).
   * e.g.2: 'Closed for maintenance over the summer' for this example you would want to include the `during` period, unless this was a university hospital and the "summer" period was well known, but would recommend its inclusion anyway.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Service not available during this period.
   */
  during?: Period | undefined;
}
export interface Availability extends DataType {
  /**
   * Times the {item} is available.
   */
  availableTime?: Element[] | undefined;
  /**
   * Not available during this time due to provided reason.
   */
  notAvailableTime?: Element[] | undefined;
}
export interface BackboneElement extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface BackboneType extends DataType {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  modifierExtension?: Extension[] | undefined;
}
export interface Base {
}
/**
 * Not all terminology uses fit this general pattern. In some cases, models should not use CodeableConcept and use Coding directly and provide their own structure for managing text, codings, translations and the relationship between elements and pre- and post-coordination.
 */
export interface CodeableConcept extends DataType {
  /**
   * A reference to a code defined by a terminology system.
   * Codes may be defined very casually in enumerations, or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.  Ordering of codings is undefined and SHALL NOT be used to infer meaning. Generally, at most only one of the coding values will be labeled as UserSelected = true.
   */
  coding?: Coding[] | undefined;
  /**
   * A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
   * Very often the text is the same as a displayName of one of the codings.
   */
  text?: string | undefined;
  _text?: Element | undefined;
}
export interface CodeableReference extends DataType {
  /**
   * A reference to a concept - e.g. the information is identified by its general class to the degree of precision found in the terminology.
   */
  concept?: CodeableConcept | undefined;
  /**
   * A reference to a resource the provides exact details about the information being referenced.
   */
  reference?: Reference | undefined;
}
/**
 * Codes may be defined very casually in enumerations or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.
 */
export interface Coding extends DataType {
  /**
   * A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * A representation of the meaning of the code in the system, following the rules of the system.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * The identification of the code system that defines the meaning of the symbol in the code.
   * The URI may be an OID (urn:oid:...) or a UUID (urn:uuid:...).  OIDs and UUIDs SHALL be references to the HL7 OID registry. Otherwise, the URI should come from HL7's list of FHIR defined special URIs or it should be an absolute reference to some definition that establishes the system clearly and unambiguously.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
   * Amongst a set of alternatives, a directly chosen code is the most appropriate starting point for new translations. There is some ambiguity about what exactly 'directly chosen' implies, and trading partner agreement may be needed to clarify the use of this element and its consequences more completely.
   */
  userSelected?: boolean | undefined;
  _userSelected?: Element | undefined;
  /**
   * The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
   * Where the terminology does not clearly define what string should be used to identify code system versions, the recommendation is to use the date (expressed in FHIR date format) on which that version was officially published as the version date.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
export interface ContactDetail extends DataType {
  /**
   * The name of an individual to contact.
   * If there is no named individual, the telecom information is for the organization as a whole.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The contact details for the individual (if a name was provided) or the organization.
   */
  telecom?: ContactPoint[] | undefined;
}
export interface ContactPoint extends DataType {
  /**
   * Time period when the contact point was/is in use.
   */
  period?: Period | undefined;
  /**
   * Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
   * Note that rank does not necessarily follow the order in which the contacts are represented in the instance.
   * Ranks need not be unique.  E.g. it's possible to have multiple contacts with rank=1.  If the ranks have different systems or uses, this would be interpreted to mean "X is my most preferred phone number, Y is my most preferred email address" or "X is my preferred home email and Y is my preferred work email".  If the system and use for equally-ranked contacts are the same, then the level of preference is equivalent for both repetitions. 
   * Ranks need not be sequential and not all repetitions must have a rank.  For example, it's possible to have 4 contacts with ranks of 2, 5 and two with no rank specified.  That would be interpreted to mean the first is preferred over the second and no preference stated for the remaining contacts.
   */
  rank?: number | undefined;
  /**
   * Telecommunications form for contact point - what communications system is required to make use of the contact.
   */
  system?: ('phone'|'fax'|'email'|'pager'|'url'|'sms'|'other') | undefined;
  _system?: Element | undefined;
  /**
   * Identifies the purpose for the contact point.
   * Applications can assume that a contact is current unless it explicitly says that it is temporary or old.
   */
  use?: ('home'|'work'|'temp'|'old'|'mobile') | undefined;
  _use?: Element | undefined;
  /**
   * The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
   * Additional text data such as phone extension numbers, or notes about use of the contact are sometimes included in the value.
   */
  value?: string | undefined;
  _value?: Element | undefined;
}
export interface Contributor extends DataType {
  /**
   * Contact details to assist a user in finding and communicating with the contributor.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * The name of the individual or organization responsible for the contribution.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The type of contributor.
   */
  type: ('author'|'editor'|'reviewer'|'endorser');
  _type?: Element | undefined;
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Count extends Quantity {
}
/**
 * What codes are expected
 */
export interface DataRequirementCodeFilter extends Element {
  /**
   * The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.
   */
  code?: Coding[] | undefined;
  /**
   * The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.
   * The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
   */
  path?: string | undefined;
  _path?: Element | undefined;
  /**
   * A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.
   */
  searchParam?: string | undefined;
  _searchParam?: Element | undefined;
  /**
   * The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.
   */
  valueSet?: string | undefined;
  _valueSet?: Element | undefined;
}
/**
 * What dates/date ranges are expected
 */
export interface DataRequirementDateFilter extends Element {
  /**
   * The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.
   * The path attribute contains a [Simple FHIR Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
   */
  path?: string | undefined;
  _path?: Element | undefined;
  /**
   * A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.
   */
  searchParam?: string | undefined;
  _searchParam?: Element | undefined;
  /**
   * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
   */
  valueDuration?: Duration | undefined;
  /**
   * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
   */
  valuePeriod?: Period | undefined;
}
/**
 * Order of the results
 * This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5". When multiple sorts are specified, they are applied in the order they appear in the resource.
 */
export interface DataRequirementSort extends Element {
  /**
   * The direction of the sort, ascending or descending.
   */
  direction: ('ascending'|'descending');
  _direction?: Element | undefined;
  /**
   * The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.
   */
  path: string;
  _path?: Element | undefined;
}
/**
 * What values are expected
 */
export interface DataRequirementValueFilter extends Element {
  /**
   * The comparator to be used to determine whether the value is matching.
   */
  comparator?: ('eq'|'gt'|'lt'|'ge'|'le'|'sa'|'eb') | undefined;
  _comparator?: Element | undefined;
  /**
   * The attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of a type that is comparable to the valueFilter.value[x] element for the filter.
   * The path attribute contains a [Simple FHIR Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
   */
  path?: string | undefined;
  _path?: Element | undefined;
  /**
   * A search parameter defined on the specified type of the DataRequirement, and which searches on elements of a type compatible with the type of the valueFilter.value[x] for the filter.
   */
  searchParam?: string | undefined;
  _searchParam?: Element | undefined;
  /**
   * The value of the filter.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The value of the filter.
   */
  valueDuration?: Duration | undefined;
  /**
   * The value of the filter.
   */
  valuePeriod?: Period | undefined;
}
export interface DataRequirement extends DataType {
  /**
   * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
   */
  codeFilter?: Element[] | undefined;
  /**
   * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
   */
  dateFilter?: Element[] | undefined;
  /**
   * Specifies a maximum number of results that are required (uses the _count search parameter).
   * This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5".
   */
  limit?: number | undefined;
  /**
   * Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. 
   * The value of mustSupport SHALL be a FHIRPath resolvable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
   */
  mustSupport?: string[] | undefined;
  _mustSupport?: Element[] | undefined;
  /**
   * The profile of the required data, specified as the uri of the profile definition.
   */
  profile?: string[] | undefined;
  _profile?: Element[] | undefined;
  /**
   * Specifies the order of the results to be returned.
   * This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5". When multiple sorts are specified, they are applied in the order they appear in the resource.
   */
  sort?: Element[] | undefined;
  /**
   * The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.
   * The subject of a data requirement is critical, as the data being specified is determined with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what data is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
   */
  subjectCodeableConcept?: CodeableConcept | undefined;
  /**
   * The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.
   * The subject of a data requirement is critical, as the data being specified is determined with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what data is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
   */
  subjectReference?: Reference | undefined;
  /**
   * The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.
   */
  type: ('Base'|'Element'|'BackboneElement'|'DataType'|'Address'|'Annotation'|'Attachment'|'Availability'|'BackboneType'|'Dosage'|'ElementDefinition'|'MarketingStatus'|'ProductShelfLife'|'Timing'|'CodeableConcept'|'CodeableReference'|'Coding'|'ContactDetail'|'ContactPoint'|'Contributor'|'DataRequirement'|'Expression'|'ExtendedContactDetail'|'Extension'|'HumanName'|'Identifier'|'Meta'|'MonetaryComponent'|'Money'|'Narrative'|'ParameterDefinition'|'Period'|'PrimitiveType'|'base64Binary'|'boolean'|'date'|'dateTime'|'decimal'|'instant'|'integer'|'positiveInt'|'unsignedInt'|'integer64'|'string'|'code'|'id'|'markdown'|'time'|'uri'|'canonical'|'oid'|'url'|'uuid'|'Quantity'|'Age'|'Count'|'Distance'|'Duration'|'Range'|'Ratio'|'RatioRange'|'Reference'|'RelatedArtifact'|'SampledData'|'Signature'|'TriggerDefinition'|'UsageContext'|'VirtualServiceDetail'|'xhtml'|'Resource'|'Binary'|'Bundle'|'DomainResource'|'Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'CanonicalResource'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MetadataResource'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription'|'Parameters');
  _type?: Element | undefined;
  /**
   * Value filters specify additional constraints on the data for elements other than code-valued or date-valued. Each value filter specifies an additional constraint on the data (i.e. valueFilters are AND'ed, not OR'ed).
   */
  valueFilter?: Element[] | undefined;
}
export interface DataType extends Element {
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Distance extends Quantity {
}
/**
 * Amount of medication administered, to be administered or typical amount to be administered
 */
export interface DosageDoseAndRate extends Element {
  /**
   * Amount of medication per dose.
   * Note that this specifies the quantity of the specified medication, not the quantity for each active ingredient(s). Each ingredient amount can be communicated in the Medication resource. For example, if one wants to communicate that a tablet was 375 mg, where the dose was one tablet, you can use the Medication resource to document that the tablet was comprised of 375 mg of drug XYZ. Alternatively if the dose was 375 mg, then you may only need to use the Medication resource to indicate this was a tablet. If the example were an IV such as dopamine and you wanted to communicate that 400mg of dopamine was mixed in 500 ml of some IV solution, then this would all be communicated in the Medication resource. If the administration is not intended to be instantaneous (rate is present or timing has a duration), this can be specified to convey the total amount to be administered over the period of time as indicated by the schedule e.g. 500 ml in dose, with timing used to convey that this should be done over 4 hours.
   */
  doseQuantity?: Quantity | undefined;
  /**
   * Amount of medication per dose.
   * Note that this specifies the quantity of the specified medication, not the quantity for each active ingredient(s). Each ingredient amount can be communicated in the Medication resource. For example, if one wants to communicate that a tablet was 375 mg, where the dose was one tablet, you can use the Medication resource to document that the tablet was comprised of 375 mg of drug XYZ. Alternatively if the dose was 375 mg, then you may only need to use the Medication resource to indicate this was a tablet. If the example were an IV such as dopamine and you wanted to communicate that 400mg of dopamine was mixed in 500 ml of some IV solution, then this would all be communicated in the Medication resource. If the administration is not intended to be instantaneous (rate is present or timing has a duration), this can be specified to convey the total amount to be administered over the period of time as indicated by the schedule e.g. 500 ml in dose, with timing used to convey that this should be done over 4 hours.
   */
  doseRange?: Range | undefined;
  /**
   * Amount of medication per unit of time.
   * It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.
   * It is possible to specify a rate over time (for example, 100 ml/hour) using either the rateRatio and rateQuantity.  The rateQuantity approach requires systems to have the capability to parse UCUM grammar where ml/hour is included rather than a specific ratio where the time is specified as the denominator.  Where a rate such as 500ml over 2 hours is specified, the use of rateRatio may be more semantically correct than specifying using a rateQuantity of 250 mg/hour.
   */
  rateQuantity?: Quantity | undefined;
  /**
   * Amount of medication per unit of time.
   * It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.
   * It is possible to specify a rate over time (for example, 100 ml/hour) using either the rateRatio and rateQuantity.  The rateQuantity approach requires systems to have the capability to parse UCUM grammar where ml/hour is included rather than a specific ratio where the time is specified as the denominator.  Where a rate such as 500ml over 2 hours is specified, the use of rateRatio may be more semantically correct than specifying using a rateQuantity of 250 mg/hour.
   */
  rateRange?: Range | undefined;
  /**
   * Amount of medication per unit of time.
   * It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.
   * It is possible to specify a rate over time (for example, 100 ml/hour) using either the rateRatio and rateQuantity.  The rateQuantity approach requires systems to have the capability to parse UCUM grammar where ml/hour is included rather than a specific ratio where the time is specified as the denominator.  Where a rate such as 500ml over 2 hours is specified, the use of rateRatio may be more semantically correct than specifying using a rateQuantity of 250 mg/hour.
   */
  rateRatio?: Ratio | undefined;
  /**
   * The kind of dose or rate specified, for example, ordered or calculated.
   */
  type?: CodeableConcept | undefined;
}
export interface Dosage extends BackboneType {
  /**
   * Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
   * Information about administration or preparation of the medication (e.g. "infuse as rapidly as possibly via intraperitoneal port" or take "immediately following drug x") should be populated in dosage.text.
   */
  additionalInstruction?: CodeableConcept[] | undefined;
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option).
   * Can express "as needed" without a reason by setting the Boolean = True.  In this case the CodeableConcept is not populated.
   */
  asNeeded?: boolean | undefined;
  _asNeeded?: Element | undefined;
  /**
   * Indicates whether the Medication is only taken based on a precondition for taking the Medication (CodeableConcept).
   * Can express "as needed" with a reason by including the CodeableConcept.  In this case the Boolean is assumed to be False, then the dose is given according to the schedule and is not "prn" or "as needed".
   */
  asNeededFor?: CodeableConcept[] | undefined;
  /**
   * Depending on the resource,this is the amount of medication administered, to  be administered or typical amount to be administered.
   */
  doseAndRate?: Element[] | undefined;
  /**
   * Upper limit on medication per administration.
   * This is intended for use as an adjunct to the dosage when there is an upper cap.  For example, a body surface area related dose with a maximum amount, such as 1.5 mg/m2 (maximum 2 mg) IV over 5 – 10 minutes would have doseQuantity of 1.5 mg/m2 and maxDosePerAdministration of 2 mg.
   */
  maxDosePerAdministration?: Quantity | undefined;
  /**
   * Upper limit on medication per lifetime of the patient.
   */
  maxDosePerLifetime?: Quantity | undefined;
  /**
   * Upper limit on medication per unit of time.
   * This is intended for use as an adjunct to the dosage when there is an upper cap.  For example "2 tablets every 4 hours to a maximum of 8/day".
   */
  maxDosePerPeriod?: Ratio[] | undefined;
  /**
   * Technique for administering medication.
   * Terminologies used often pre-coordinate this term with the route and or form of administration.
   */
  method?: CodeableConcept | undefined;
  /**
   * Instructions in terms that are understood by the patient or consumer.
   */
  patientInstruction?: string | undefined;
  _patientInstruction?: Element | undefined;
  /**
   * How drug should enter body.
   */
  route?: CodeableConcept | undefined;
  /**
   * Indicates the order in which the dosage instructions should be applied or interpreted.
   */
  sequence?: number | undefined;
  /**
   * Body site to administer to.
   * If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [http://hl7.org/fhir/StructureDefinition/bodySite](http://hl7.org/fhir/extensions/StructureDefinition-bodySite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
   */
  site?: CodeableConcept | undefined;
  /**
   * Free text dosage instructions e.g. SIG.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * When medication should be administered.
   * This attribute might not always be populated while the Dosage.text is expected to be populated.  If both are populated, then the Dosage.text should reflect the content of the Dosage.timing.
   */
  timing?: Timing | undefined;
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Duration extends Quantity {
}
export interface Element extends Base {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  extension?: Extension[] | undefined;
  /**
   * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
/**
 * Base definition information for tools
 * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.
 */
export interface ElementDefinitionBase extends Element {
  /**
   * Maximum cardinality of the base element identified by the path.
   * This is provided to code generation, since the serialization representation in JSON differs depending on whether the base element has max > 1. Also, some forms of code generation may differ.
   */
  max: string;
  _max?: Element | undefined;
  /**
   * Minimum cardinality of the base element identified by the path.
   * This is provided for consistency with max, and may affect code generation of mandatory elements of the base resource are generated differently (some reference implementations have done this).
   */
  min: number;
  /**
   * The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.
   */
  path: string;
  _path?: Element | undefined;
}
/**
 * Additional Bindings - more rules about the binding
 */
export interface ElementDefinitionBindingAdditional extends Element {
  /**
   * Whether the binding applies to all repeats, or just to any one of them. This is only relevant for elements that can repeat.
   * A common pattern is to make a conformance binding to all repeats, and then make a binding that one of the repeats must conform to.
   */
  any?: boolean | undefined;
  _any?: Element | undefined;
  /**
   * Documentation of the purpose of use of the bindingproviding additional information about how it is intended to be used.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * The use of this additional binding.
   * Conformance bindings are in addition to the base binding, not instead of it.
   */
  purpose: ('maximum'|'minimum'|'required'|'extensible'|'candidate'|'current'|'preferred'|'ui'|'starter'|'component');
  _purpose?: Element | undefined;
  /**
   * Concise documentation - for summary tables.
   */
  shortDoco?: string | undefined;
  _shortDoco?: Element | undefined;
  /**
   * Qualifies the usage of the binding. Typically bindings are qualified by jurisdiction, but they may also be qualified by gender, workflow status, clinical domain etc. The information to decide whether a usege context applies is usually outside the resource, determined by context, and this might present challenges for validation tooling.
   * This specification does not define exactly how the context is determined for the usage; typically, this will be described in implementation guides.
   */
  usage?: UsageContext[] | undefined;
  /**
   * The valueSet that is being bound for the purpose.
   */
  valueSet: string;
  _valueSet?: Element | undefined;
}
/**
 * ValueSet details if this is coded
 * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
 */
export interface ElementDefinitionBinding extends Element {
  /**
   * Additional bindings that help applications implementing this element. Additional bindings do not replace the main binding but provide more information and/or context.
   */
  additional?: Element[] | undefined;
  /**
   * Describes the intended use of this particular set of codes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
   * For further discussion, see [Using Terminologies](terminologies.html).
   */
  strength: ('required'|'extensible'|'preferred'|'example');
  _strength?: Element | undefined;
  /**
   * Refers to the value set that identifies the set of codes the binding refers to.
   * The reference may be version-specific or not (e.g. have a |[version] at the end of the canonical URL).
   */
  valueSet?: string | undefined;
  _valueSet?: Element | undefined;
}
/**
 * Condition that must evaluate to true
 * Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
 */
export interface ElementDefinitionConstraint extends Element {
  /**
   * A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.
   * In the absense of an expression, the expression is likely not enforceable by validators, and might be missed by many systems.
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
   * Should be expressed in business terms as much as possible.
   */
  human: string;
  _human?: Element | undefined;
  /**
   * Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
   */
  key: string;
  _key?: Element | undefined;
  /**
   * Description of why this constraint is necessary or appropriate.
   * To be used if the reason for the constraint might not be intuitive to all implementers.
   */
  requirements?: string | undefined;
  _requirements?: Element | undefined;
  /**
   * Identifies the impact constraint violation has on the conformance of the instance.
   * This allows constraints to be asserted as "shall" (error) and "should" (warning).
   */
  severity: ('error'|'warning');
  _severity?: Element | undefined;
  /**
   * A reference to the original source of the constraint, for traceability purposes.
   * This is used when, e.g. rendering, where it is not useful to present inherited constraints when rendering the snapshot.
   */
  source?: string | undefined;
  _source?: Element | undefined;
  /**
   * If true, indicates that the warning or best practice guideline should be suppressed.
   * This element should only be present in a derived profile where a warning or hint has been determined to be spurious/incorrect. E.g. a warning encouraging the inclusion of an element that the profile explicitly prohibits.
   */
  suppress?: boolean | undefined;
  _suppress?: Element | undefined;
}
/**
 * Example value (as defined for type)
 * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
 */
export interface ElementDefinitionExample extends Element {
  /**
   * Describes the purpose of this example among the set of examples.
   */
  label: string;
  _label?: Element | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueAddress?: Address | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueAge?: Age | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueAvailability?: Availability | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueCodeableReference?: CodeableReference | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueCoding?: Coding | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueContactDetail?: ContactDetail | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueCount?: Count | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueDataRequirement?: DataRequirement | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valuenumber?: number | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueDistance?: Distance | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueDosage?: Dosage | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueDuration?: Duration | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueExpression?: Expression | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueExtendedContactDetail?: ExtendedContactDetail | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueHumanName?: HumanName | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueMeta?: Meta | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueMoney?: Money | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueParameterDefinition?: ParameterDefinition | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valuePeriod?: Period | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueRange?: Range | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueRatio?: Ratio | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueRatioRange?: RatioRange | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueReference?: Reference | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueRelatedArtifact?: RelatedArtifact | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueSampledData?: SampledData | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueSignature?: Signature | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueTiming?: Timing | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueTriggerDefinition?: TriggerDefinition | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueUsageContext?: UsageContext | undefined;
}
/**
 * Map element to another set of definitions
 * Mappings are not necessarily specific enough for safe translation.
 */
export interface ElementDefinitionMapping extends Element {
  /**
   * Comments that provide information about the mapping or its use.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * An internal reference to the definition of a mapping.
   */
  identity: string;
  _identity?: Element | undefined;
  /**
   * Identifies the computable language in which mapping.map is expressed.
   * If omitted, then there can be no expectation of computational interpretation of the mapping.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * Expresses what part of the target specification corresponds to this element.
   * For most mappings, the syntax is undefined.  Syntax will be provided for mappings to the RIM.  Multiple mappings may be possible and may include constraints on other resource elements that identify when a particular mapping applies.
   */
  map: string;
  _map?: Element | undefined;
}
/**
 * Element values that are used to distinguish the slices
 * If there is no discriminator, the content is hard to process, so this should be avoided.
 */
export interface ElementDefinitionSlicingDiscriminator extends Element {
  /**
   * A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.
   */
  path: string;
  _path?: Element | undefined;
  /**
   * How the element value is interpreted when discrimination is evaluated.
   * 'pattern' is deprecated - it works exactly the same as 'value'.
   */
  type: ('value'|'exists'|'pattern'|'type'|'profile'|'position');
  _type?: Element | undefined;
}
/**
 * This element is sliced - slices follow
 * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
 */
export interface ElementDefinitionSlicing extends Element {
  /**
   * A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
   * If it's really not possible to differentiate them, the design should be re-evaluated to make the content usable.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
   * If there is no discriminator, the content is hard to process, so this should be avoided.
   */
  discriminator?: Element[] | undefined;
  /**
   * If the matching elements have to occur in the same order as defined in the profile.
   * Order should only be required when it is a pressing concern for presentation. Profile authors should consider making the order a feature of the rules about the narrative, not the rules about the data - requiring ordered data makes the profile much less re-usable.
   */
  ordered?: boolean | undefined;
  _ordered?: Element | undefined;
  /**
   * Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
   * Allowing additional elements makes for a much for flexible template - it's open for use in wider contexts, but also means that the content of the resource is not closed, and applications have to decide how to handle content not described by the profile.
   */
  rules: ('closed'|'open'|'openAtEnd');
  _rules?: Element | undefined;
}
/**
 * Data type and Profile for this element
 * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
 */
export interface ElementDefinitionType extends Element {
  /**
   * If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
   * See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.
   */
  aggregation?: ('contained'|'referenced'|'bundled')[] | undefined;
  _aggregation?: Element[] | undefined;
  /**
   * URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.
   * If the element is a reference to another resource, this element contains "Reference", and the targetProfile element defines what resources can be referenced. The targetProfile may be a reference to the general definition of a resource (e.g. http://hl7.org/fhir/StructureDefinition/Patient).
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.
   * It is possible to profile  backbone element (e.g. part of a resource), using the [http://hl7.org/fhir/StructureDefinition/elementdefinition-profile-element](http://hl7.org/fhir/extensions/StructureDefinition-elementdefinition-profile-element.html) extension.
   */
  profile?: string[] | undefined;
  _profile?: Element[] | undefined;
  /**
   * Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
   */
  targetProfile?: string[] | undefined;
  _targetProfile?: Element[] | undefined;
  /**
   * Whether this reference needs to be version specific or version independent, or whether either can be used.
   * The base specification never makes a rule as to which form is allowed, but implementation guides may do this. See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.
   */
  versioning?: ('either'|'independent'|'specific') | undefined;
  _versioning?: Element | undefined;
}
export interface ElementDefinition extends BackboneType {
  /**
   * Identifies additional names by which this element might also be known.
   */
  alias?: string[] | undefined;
  _alias?: Element[] | undefined;
  /**
   * Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - e.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
   * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.
   */
  base?: Element | undefined;
  /**
   * Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
   * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
   */
  elementDefinitionBinding?: Element | undefined;
  /**
   * A code that has the same meaning as the element in a particular terminology.
   * The concept SHALL be properly aligned with the data element definition and other constraints, as defined in the code system, including relationships, of any code listed here.  Where multiple codes exist in a terminology that could correspond to the data element, the most granular code(s) should be selected, so long as they are not more restrictive than the data element itself. The mappings may be used to provide more or less granular or structured equivalences in the code system.
   */
  code?: Coding[] | undefined;
  /**
   * Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).
   * If it is possible to capture usage rules using constraints, that mechanism should be used in preference to this element.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
   */
  condition?: string[] | undefined;
  _condition?: Element[] | undefined;
  /**
   * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
   * Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
   */
  constraint?: Element[] | undefined;
  /**
   * Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.
   * ContentReferences can only be defined in specializations, not constrained types, and they cannot be changed and always reference the non-constrained definition.
   */
  contentReference?: string | undefined;
  _contentReference?: Element | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueAddress?: Address | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueAge?: Age | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueAnnotation?: Annotation | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueAttachment?: Attachment | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueAvailability?: Availability | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValuestring?: string | undefined;
  _defaultValuestring?: Element | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueboolean?: boolean | undefined;
  _defaultValueboolean?: Element | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueCodeableReference?: CodeableReference | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueCoding?: Coding | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueContactDetail?: ContactDetail | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueContactPoint?: ContactPoint | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueCount?: Count | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueDataRequirement?: DataRequirement | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValuenumber?: number | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueDistance?: Distance | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueDosage?: Dosage | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueDuration?: Duration | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueExpression?: Expression | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueExtendedContactDetail?: ExtendedContactDetail | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueHumanName?: HumanName | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueIdentifier?: Identifier | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueMeta?: Meta | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueMoney?: Money | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueParameterDefinition?: ParameterDefinition | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValuePeriod?: Period | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueQuantity?: Quantity | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueRange?: Range | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueRatio?: Ratio | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueRatioRange?: RatioRange | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueReference?: Reference | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueRelatedArtifact?: RelatedArtifact | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueSampledData?: SampledData | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueSignature?: Signature | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueTiming?: Timing | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueTriggerDefinition?: TriggerDefinition | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
   * No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
   */
  defaultValueUsageContext?: UsageContext | undefined;
  /**
   * Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).
   * It is easy for a different definition to change the meaning of an element and this can have nasty downstream consequences. Please be careful when providing definitions in a profile.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be found in the element.
   * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
   */
  example?: Element[] | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedAddress?: Address | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedAge?: Age | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedAnnotation?: Annotation | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedAttachment?: Attachment | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedAvailability?: Availability | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedstring?: string | undefined;
  _fixedstring?: Element | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedboolean?: boolean | undefined;
  _fixedboolean?: Element | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedCodeableReference?: CodeableReference | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedCoding?: Coding | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedContactDetail?: ContactDetail | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedContactPoint?: ContactPoint | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedCount?: Count | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedDataRequirement?: DataRequirement | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixednumber?: number | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedDistance?: Distance | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedDosage?: Dosage | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedDuration?: Duration | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedExpression?: Expression | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedExtendedContactDetail?: ExtendedContactDetail | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedHumanName?: HumanName | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedIdentifier?: Identifier | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedMeta?: Meta | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedMoney?: Money | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedParameterDefinition?: ParameterDefinition | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedPeriod?: Period | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedQuantity?: Quantity | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedRange?: Range | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedRatio?: Ratio | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedRatioRange?: RatioRange | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedReference?: Reference | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedRelatedArtifact?: RelatedArtifact | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedSampledData?: SampledData | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedSignature?: Signature | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedTiming?: Timing | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedTriggerDefinition?: TriggerDefinition | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedUsageContext?: UsageContext | undefined;
  /**
   * If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system. When used on the root element in an extension definition, this indicates whether or not the extension is a modifier extension.
   * Only the definition of an element can set IsModifier true - either the specification itself or where an extension is originally defined. Once set, it cannot be changed in derived profiles (except in the special case of the defining a new extension). An element/extension that has isModifier=true SHOULD also have a minimum cardinality of 1, so that there is no lack of clarity about what to do if it is missing. If it can be missing, the definition SHALL make the meaning of a missing element clear.
   */
  isModifier?: boolean | undefined;
  _isModifier?: Element | undefined;
  /**
   * Explains how that element affects the interpretation of the resource or element that contains it.
   */
  isModifierReason?: string | undefined;
  _isModifierReason?: Element | undefined;
  /**
   * Whether the element should be included if a client requests a search with the parameter _summary=true.
   * Some resources include a set of simple metadata, and some very large data. This element is used to reduce the quantity of data returned in searches. Note that servers may pre-cache summarized resources for optimal performance. When a request is made with _summary=true, serializers only include elements marked as 'isSummary = true'. With a few exceptions (listed below), all datatype properties are included in the summary form. In resource and datatype definitions, if an element has a descendant marked as isSummary=true or if it satisfies both of the following conditions, it must be marked as isSummary=true:
   * * is at the root or has a parent that is 'mustSupport'
   * * has a minimum cardinality of 1 or is a modifier element
   * The following datatype properties are exceptions, and are not marked as isSummary:
   * * Attachment.data
   * * Signature.data, Signature.targetFormat, Signature.sigFormat
   * * Narrative.status, Narrative.div
   * * SampledData.data.
   */
  isSummary?: boolean | undefined;
  _isSummary?: Element | undefined;
  /**
   * A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
   * See also the extension [http://hl7.org/fhir/StructureDefinition/elementdefinition-question](http://hl7.org/fhir/extensions/StructureDefinition-elementdefinition-question.html).
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * Identifies a concept from an external specification that roughly corresponds to this element.
   * Mappings are not necessarily specific enough for safe translation.
   */
  mapping?: Element[] | undefined;
  /**
   * The maximum number of times this element is permitted to appear in the instance.
   */
  max?: string | undefined;
  _max?: Element | undefined;
  /**
   * Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element. ```maxLength``` SHOULD only be used on primitive data types that have a string representation (see [http://hl7.org/fhir/StructureDefinition/structuredefinition-type-characteristics](http://hl7.org/fhir/extensions/StructureDefinition-structuredefinition-type-characteristics.html)).
   * Receivers are not required to reject instances that exceed the maximum length.  The full length could be stored.  In some cases, data might be truncated, though truncation should be undertaken with care and an understanding of the consequences of doing so. If not specified, there is no conformance expectation for length support.
   */
  maxLength?: number | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as a canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
   */
  maxValuestring?: string | undefined;
  _maxValuestring?: Element | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as a canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
   */
  maxValuenumber?: number | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as a canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
   */
  maxValueQuantity?: Quantity | undefined;
  /**
   * The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').
   * Implicit meanings for missing values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. An implicit meaning for a missing value can never be changed, and specifying one has the consequence that constraining its use in profiles eliminates use cases as possibilities, not merely moving them out of scope.
   */
  meaningWhenMissing?: string | undefined;
  _meaningWhenMissing?: Element | undefined;
  /**
   * The minimum number of times this element SHALL appear in the instance.
   */
  min?: number | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as a canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
   */
  minValuestring?: string | undefined;
  _minValuestring?: Element | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as a canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
   */
  minValuenumber?: number | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as a canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
   */
  minValueQuantity?: Quantity | undefined;
  /**
   * Specifies for a primitive data type that the value of the data type cannot be replaced by an extension.
   * Typical extensions that can be provided in place of a the value are [http://hl7.org/fhir/StructureDefinition/data-absent-reason](http://hl7.org/fhir/extensions/StructureDefinition-data-absent-reason.html),  [http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor](http://hl7.org/fhir/extensions/StructureDefinition-iso21090-nullFlavor.html),  [http://hl7.org/fhir/StructureDefinition/originalText](http://hl7.org/fhir/extensions/StructureDefinition-originalText.html), and [http://hl7.org/fhir/StructureDefinition/cqf-expression](http://hl7.org/fhir/extensions/StructureDefinition-cqf-expression.html). Note that this element has no meaning when a value is provided, and extensions can be provided in addition to a value.
   */
  mustHaveValue?: boolean | undefined;
  _mustHaveValue?: Element | undefined;
  /**
   * If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way. Note that this is being phased out and replaced by obligations (see below).  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.
   * "Something meaningful" is context dependent and impossible to describe in the base FHIR specification. For this reason, the mustSupport flag is never set to true by the FHIR specification itself - it is only set to true in profiles.  A profile on a type can always make mustSupport = true if it is false in the base type but cannot make mustSupport = false if it is true in the base type.   This is done in [Resource Profiles](profiling.html#mustsupport), where the profile labels an element as mustSupport=true. When a profile does this, it SHALL also make clear exactly what kind of "support" is required, as this can mean many things.    Note that an element that has the property IsModifier is not necessarily a "key" element (e.g. one of the important elements to make use of the resource), nor is it automatically mustSupport - however both of these things are more likely to be true for IsModifier elements than for other elements.
   */
  mustSupport?: boolean | undefined;
  _mustSupport?: Element | undefined;
  /**
   * If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
   * This element can only be asserted on repeating elements and can only be introduced when defining resources or data types.  It can be further refined profiled elements but if absent in the base type, a profile cannot assert meaning.
   */
  orderMeaning?: string | undefined;
  _orderMeaning?: Element | undefined;
  /**
   * The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
   */
  path: string;
  _path?: Element | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternAddress?: Address | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternAge?: Age | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternAnnotation?: Annotation | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternAttachment?: Attachment | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternAvailability?: Availability | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternstring?: string | undefined;
  _patternstring?: Element | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternboolean?: boolean | undefined;
  _patternboolean?: Element | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternCodeableReference?: CodeableReference | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternCoding?: Coding | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternContactDetail?: ContactDetail | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternContactPoint?: ContactPoint | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternCount?: Count | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternDataRequirement?: DataRequirement | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternnumber?: number | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternDistance?: Distance | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternDosage?: Dosage | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternDuration?: Duration | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternExpression?: Expression | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternExtendedContactDetail?: ExtendedContactDetail | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternHumanName?: HumanName | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternIdentifier?: Identifier | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternMeta?: Meta | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternMoney?: Money | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternParameterDefinition?: ParameterDefinition | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternPeriod?: Period | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternQuantity?: Quantity | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternRange?: Range | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternRatio?: Ratio | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternRatioRange?: RatioRange | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternReference?: Reference | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternRelatedArtifact?: RelatedArtifact | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternSampledData?: SampledData | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternSignature?: Signature | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternTiming?: Timing | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternTriggerDefinition?: TriggerDefinition | undefined;
  /**
   * Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  
   * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
   * When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.
   * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
   * 1. If primitive: it must match exactly the pattern value
   * 2. If a complex object: it must match (recursively) the pattern value
   * 3. If an array: it must match (recursively) the pattern value
   * If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have.
   * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
   */
  patternUsageContext?: UsageContext | undefined;
  /**
   * Codes that define how this element is represented in instances, when the deviation varies from the normal case. No extensions are allowed on elements with a representation of 'xmlAttr', no matter what FHIR serialization format is used.
   * In resources, this is rarely used except for special cases where the representation deviates from the normal, and can only be done in the base standard (and profiles must reproduce what the base standard does). This element is used quite commonly in Logical models when the logical models represent a specific serialization format (e.g. CDA, v2 etc.).
   */
  representation?: ('xmlAttr'|'xmlText'|'typeAttr'|'cdaText'|'xhtml')[] | undefined;
  _representation?: Element[] | undefined;
  /**
   * This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
   * This element does not describe the usage of the element (that's done in comments), rather it's for traceability of *why* the element is either needed or why the constraints exist as they do.  This may be used to point to source materials or specifications that drove the structure of this data element.
   */
  requirements?: string | undefined;
  _requirements?: Element | undefined;
  /**
   * A concise description of what this element means (e.g. for use in autogenerated summaries).
   * It is easy for a different short definition to change the meaning of an element and this can have nasty downstream consequences. Please be careful when providing short definitions in a profile.
   */
  short?: string | undefined;
  _short?: Element | undefined;
  /**
   * If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.
   * If set to true, an ancestor profile SHALL have a slicing definition with this name.  If set to false, no ancestor profile is permitted to have a slicing definition with this name.
   */
  sliceIsConstraining?: boolean | undefined;
  _sliceIsConstraining?: Element | undefined;
  /**
   * The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
   * The name SHALL be unique within the structure within the context of the constrained resource element.  (Though to avoid confusion, uniqueness across all elements is recommended.).
   */
  sliceName?: string | undefined;
  _sliceName?: Element | undefined;
  /**
   * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
   * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
   */
  slicing?: Element | undefined;
  /**
   * The data type or resource that the value of this element is permitted to be.
   * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
   */
  typeRef?: Element[] | undefined;
  /**
   * Specifies a list of extensions that can appear in place of a primitive value.
   * if mustHaveValue is true, then this element should not be present, since no extensions are allowed in place of the value. Note that this element has no impact if the value is present.
   */
  valueAlternatives?: string[] | undefined;
  _valueAlternatives?: Element[] | undefined;
}
export interface Expression extends DataType {
  /**
   * A brief, natural language description of the condition that effectively communicates the intended semantics.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An expression in the specified language that returns a value.
   * If Expression.expression and Expression.reference are both present, the Expression.expression might just be a name pointing something within the referenced content.
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * The media type of the language for the expression.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A URI that defines where the expression is found.
   * If both a reference and an expression is found, the reference SHALL point to the same expression.
   */
  reference?: string | undefined;
  _reference?: Element | undefined;
}
/**
 * This datatype may be sparsely populated, i.e. only contain a purpose and phone number or address, but other cases could be completed filled out.
 */
export interface ExtendedContactDetail extends DataType {
  /**
   * Address for the contact.
   * More than 1 address would be for different purposes, and thus should be entered as a different entry,.
   */
  address?: Address | undefined;
  /**
   * The name of an individual to contact, some types of contact detail are usually blank.
   * If there is no named individual, the telecom/address information is not generally monitored by a specific individual.
   */
  name?: HumanName[] | undefined;
  /**
   * This contact detail is handled/monitored by a specific organization. If the name is provided in the contact, then it is referring to the named individual within this organization.
   */
  organization?: Reference | undefined;
  /**
   * Period that this contact was valid for usage.
   * If the details have multiple periods, then enter in a new ExtendedContact with the new period.
   */
  period?: Period | undefined;
  /**
   * The purpose/type of contact.
   * If no purpose is defined, then these contact details may be used for any purpose.
   */
  purpose?: CodeableConcept | undefined;
  /**
   * The contact details application for the purpose defined.
   */
  telecom?: ContactPoint[] | undefined;
}
export interface Extension extends DataType {
  /**
   * Source of the definition for the extension code - a logical name or a URL.
   * The definition may point directly to a computable or human-readable definition of the extensibility codes, or it may be a logical URI as declared in some other specification. The definition SHALL be a URI for the Structure Definition defining the extension.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueAddress?: Address | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueAge?: Age | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueAttachment?: Attachment | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueAvailability?: Availability | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueCodeableReference?: CodeableReference | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueCoding?: Coding | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueContactDetail?: ContactDetail | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueCount?: Count | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueDataRequirement?: DataRequirement | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valuenumber?: number | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueDistance?: Distance | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueDosage?: Dosage | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueDuration?: Duration | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueExpression?: Expression | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueExtendedContactDetail?: ExtendedContactDetail | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueHumanName?: HumanName | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueMeta?: Meta | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueMoney?: Money | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueParameterDefinition?: ParameterDefinition | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valuePeriod?: Period | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueRange?: Range | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueRatio?: Ratio | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueRatioRange?: RatioRange | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueReference?: Reference | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueRelatedArtifact?: RelatedArtifact | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueSampledData?: SampledData | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueSignature?: Signature | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueTiming?: Timing | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueTriggerDefinition?: TriggerDefinition | undefined;
  /**
   * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
   */
  valueUsageContext?: UsageContext | undefined;
}
/**
 * Names may be changed, or repudiated, or people may have different names in different contexts. Names may be divided into parts of different type that have variable significance depending on context, though the division into parts does not always matter. With personal names, the different parts might or might not be imbued with some implicit meaning; various cultures associate different importance with the name parts and the degree to which systems must care about name parts around the world varies widely.
 */
export interface HumanName extends DataType {
  /**
   * The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
   * Family Name may be decomposed into specific parts using extensions (de, nl, es related cultures).
   */
  family?: string | undefined;
  _family?: Element | undefined;
  /**
   * Given name.
   * If only initials are recorded, they may be used in place of the full name parts. Initials may be separated into multiple given names but often aren't due to paractical limitations.  This element is not called "first name" since given names do not always come first.
   */
  given?: string[] | undefined;
  _given?: Element[] | undefined;
  /**
   * Indicates the period of time when this name was valid for the named person.
   */
  period?: Period | undefined;
  /**
   * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
   */
  prefix?: string[] | undefined;
  _prefix?: Element[] | undefined;
  /**
   * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
   */
  suffix?: string[] | undefined;
  _suffix?: Element[] | undefined;
  /**
   * Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.
   * Can provide both a text representation and parts. Applications updating a name SHALL ensure that when both text and parts are present,  no content is included in the text that isn't found in a part.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * Identifies the purpose for this name.
   * Applications can assume that a name is current unless it explicitly says that it is temporary or old.
   */
  use?: ('usual'|'official'|'temp'|'nickname'|'anonymous'|'old'|'maiden') | undefined;
  _use?: Element | undefined;
}
/**
 * The rules of the identifier.type  determine if a check digit is part of the ID value or sent separately, such as through the checkDigit extension.
 */
export interface Identifier extends DataType {
  /**
   * Organization that issued/manages the identifier.
   * The Identifier.assigner may omit the .reference element and only contain a .display element reflecting the name or other textual information about the assigning organization.
   */
  assigner?: Reference | undefined;
  /**
   * Time period during which identifier is/was valid for use.
   */
  period?: Period | undefined;
  /**
   * Establishes the namespace for the value - that is, an absolute URL that describes a set values that are unique.
   * Identifier.system is always case sensitive.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
   * This element deals only with general categories of identifiers.  It SHOULD not be used for codes that correspond 1..1 with the Identifier.system. Some identifiers may fall into multiple categories due to common usage.   Where the system is known, a type is unnecessary because the type is always part of the system definition. However systems often need to handle identifiers where the system is not known. There is not a 1:1 relationship between type and system, since many different systems have the same type.
   */
  type?: CodeableConcept | undefined;
  /**
   * The purpose of this identifier.
   * Applications can assume that an identifier is permanent unless it explicitly says that it is temporary.
   */
  use?: ('usual'|'official'|'temp'|'secondary'|'old') | undefined;
  _use?: Element | undefined;
  /**
   * The portion of the identifier typically relevant to the user and which is unique within the context of the system.
   * If the value is a full URI, then the system SHALL be urn:ietf:rfc:3986.  The value's primary purpose is computational mapping.  As a result, it may be normalized for comparison purposes (e.g. removing non-significant whitespace, dashes, etc.)  A value formatted for human display can be conveyed using the [http://hl7.org/fhir/StructureDefinition/rendered-value](http://hl7.org/fhir/extensions/StructureDefinition-rendered-value.html)). Identifier.value is to be treated as case sensitive unless knowledge of the Identifier.system allows the processer to be confident that non-case-sensitive processing is safe.
   */
  value?: string | undefined;
  _value?: Element | undefined;
}
export interface MarketingStatus extends BackboneType {
  /**
   * The country in which the marketing authorization has been granted shall be specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements.
   */
  country?: CodeableConcept | undefined;
  /**
   * The date when the Medicinal Product is placed on the market by the Marketing Authorization Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.
   */
  dateRange?: Period | undefined;
  /**
   * Where a Medicines Regulatory Agency has granted a marketing authorization for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified.
   */
  jurisdiction?: CodeableConcept | undefined;
  /**
   * The date when the Medicinal Product is placed on the market by the Marketing Authorization Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.
   */
  restoreDate?: string | undefined;
  _restoreDate?: Element | undefined;
  /**
   * This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples.
   */
  status: CodeableConcept;
}
export interface Meta extends DataType {
  /**
   * When the resource last changed - e.g. when the version changed.
   * This element is generally omitted in instances submitted in a PUT or POST. Instead, it is populated in the response instance and when retrieving information using a GET. The server / resource manager sets this value; what a client provides is irrelevant. This is equivalent to the HTTP Last-Modified and SHOULD have the same value on a [read](http.html#read) interaction.
   */
  lastUpdated?: string | undefined;
  _lastUpdated?: Element | undefined;
  /**
   * A list of profiles (references to [StructureDefinition](structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url](structuredefinition-definitions.html#StructureDefinition.url).
   * It is up to the server and/or other infrastructure of policy to determine whether/how these claims are verified and/or updated over time.  The list of profile URLs is a set.
   */
  profile?: string[] | undefined;
  _profile?: Element[] | undefined;
  /**
   * Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
   * The security labels can be updated without changing the stated version of the resource. The list of security labels is a set. Uniqueness is based the system/code, and version and display are ignored.
   */
  security?: Coding[] | undefined;
  /**
   * A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.
   * The exact use of the source (and the possible implied Provenance.entity.role and agent.role) is left to implementer discretion. Only one nominated source is allowed; for additional provenance details, a full Provenance resource should be used. The source may correspond to Provenance.entity.what[x] or Provenance.agent.who[x], though it may be a more general or abstract reference. 
   * This element can be used to indicate where the current master source of a resource that has a canonical URL if the resource is no longer hosted at the canonical URL.
   */
  source?: string | undefined;
  _source?: Element | undefined;
  /**
   * Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.
   * The tags can be updated without changing the stated version of the resource. The list of tags is a set. Uniqueness is based the system/code, and version and display are ignored.
   */
  tag?: Coding[] | undefined;
  /**
   * The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.
   * The server assigns this value, and ignores what the client specifies, except in the case that the server is imposing version integrity on updates/deletes.
   */
  versionId?: string | undefined;
  _versionId?: Element | undefined;
}
export interface MonetaryComponent extends DataType {
  /**
   * Explicit value amount to be used.
   */
  amount?: Money | undefined;
  /**
   * Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
   */
  code?: CodeableConcept | undefined;
  /**
   * Factor used for calculating this component.
   */
  factor?: number | undefined;
  /**
   * base | surcharge | deduction | discount | tax | informational.
   */
  type: ('base'|'surcharge'|'deduction'|'discount'|'tax'|'informational');
  _type?: Element | undefined;
}
export interface Money extends DataType {
  /**
   * ISO 4217 Currency Code.
   */
  currency?: ('AED'|'AFN'|'ALL'|'AMD'|'ANG'|'AOA'|'ARS'|'AUD'|'AWG'|'AZN'|'BAM'|'BBD'|'BDT'|'BGN'|'BHD'|'BIF'|'BMD'|'BND'|'BOB'|'BOV'|'BRL'|'BSD'|'BTN'|'BWP'|'BYN'|'BZD'|'CAD'|'CDF'|'CHE'|'CHF'|'CHW'|'CLF'|'CLP'|'CNY'|'COP'|'COU'|'CRC'|'CUC'|'CUP'|'CVE'|'CZK'|'DJF'|'DKK'|'DOP'|'DZD'|'EGP'|'ERN'|'ETB'|'EUR'|'FJD'|'FKP'|'GBP'|'GEL'|'GGP'|'GHS'|'GIP'|'GMD'|'GNF'|'GTQ'|'GYD'|'HKD'|'HNL'|'HRK'|'HTG'|'HUF'|'IDR'|'ILS'|'IMP'|'INR'|'IQD'|'IRR'|'ISK'|'JEP'|'JMD'|'JOD'|'JPY'|'KES'|'KGS'|'KHR'|'KMF'|'KPW'|'KRW'|'KWD'|'KYD'|'KZT'|'LAK'|'LBP'|'LKR'|'LRD'|'LSL'|'LYD'|'MAD'|'MDL'|'MGA'|'MKD'|'MMK'|'MNT'|'MOP'|'MRU'|'MUR'|'MVR'|'MWK'|'MXN'|'MXV'|'MYR'|'MZN'|'NAD'|'NGN'|'NIO'|'NOK'|'NPR'|'NZD'|'OMR'|'PAB'|'PEN'|'PGK'|'PHP'|'PKR'|'PLN'|'PYG'|'QAR'|'RON'|'RSD'|'RUB'|'RWF'|'SAR'|'SBD'|'SCR'|'SDG'|'SEK'|'SGD'|'SHP'|'SLL'|'SOS'|'SRD'|'SSP'|'STN'|'SVC'|'SYP'|'SZL'|'THB'|'TJS'|'TMT'|'TND'|'TOP'|'TRY'|'TTD'|'TVD'|'TWD'|'TZS'|'UAH'|'UGX'|'USD'|'USN'|'UYI'|'UYU'|'UZS'|'VEF'|'VND'|'VUV'|'WST'|'XAF'|'XAG'|'XAU'|'XBA'|'XBB'|'XBC'|'XBD'|'XCD'|'XDR'|'XOF'|'XPD'|'XPF'|'XPT'|'XSU'|'XTS'|'XUA'|'XXX'|'YER'|'ZAR'|'ZMW'|'ZWL') | undefined;
  _currency?: Element | undefined;
  /**
   * Numerical value (with implicit precision).
   * Monetary values have their own rules for handling precision (refer to standard accounting text books).
   */
  value?: number | undefined;
}
export interface Narrative extends DataType {
  /**
   * The actual narrative content, a stripped down version of XHTML.
   * The contents of the html element are an XHTML fragment containing only the basic html formatting elements described in chapters 7-11 and 15 of the HTML 4.0 standard, <a> elements (either name or href), images and internally contained stylesheets. The XHTML content SHALL NOT contain a head, a body, external stylesheet references, scripts, forms, base/link/xlink, frames, iframes and objects.
   */
  div: string;
  _div?: Element | undefined;
  /**
   * The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
   */
  status: ('generated'|'extensions'|'additional'|'empty');
  _status?: Element | undefined;
}
export interface ParameterDefinition extends DataType {
  /**
   * A brief discussion of what the parameter is for and how it is used by the module.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * The maximum number of times this element is permitted to appear in the request or response.
   */
  max?: string | undefined;
  _max?: Element | undefined;
  /**
   * The minimum number of times this parameter SHALL appear in the request or response.
   */
  min?: number | undefined;
  /**
   * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
   */
  profile?: string | undefined;
  _profile?: Element | undefined;
  /**
   * The type of the parameter.
   */
  type: ('Base'|'Element'|'BackboneElement'|'DataType'|'Address'|'Annotation'|'Attachment'|'Availability'|'BackboneType'|'Dosage'|'ElementDefinition'|'MarketingStatus'|'ProductShelfLife'|'Timing'|'CodeableConcept'|'CodeableReference'|'Coding'|'ContactDetail'|'ContactPoint'|'Contributor'|'DataRequirement'|'Expression'|'ExtendedContactDetail'|'Extension'|'HumanName'|'Identifier'|'Meta'|'MonetaryComponent'|'Money'|'Narrative'|'ParameterDefinition'|'Period'|'PrimitiveType'|'base64Binary'|'boolean'|'date'|'dateTime'|'decimal'|'instant'|'integer'|'positiveInt'|'unsignedInt'|'integer64'|'string'|'code'|'id'|'markdown'|'time'|'uri'|'canonical'|'oid'|'url'|'uuid'|'Quantity'|'Age'|'Count'|'Distance'|'Duration'|'Range'|'Ratio'|'RatioRange'|'Reference'|'RelatedArtifact'|'SampledData'|'Signature'|'TriggerDefinition'|'UsageContext'|'VirtualServiceDetail'|'xhtml'|'Resource'|'Binary'|'Bundle'|'DomainResource'|'Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'CanonicalResource'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MetadataResource'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription'|'Parameters');
  _type?: Element | undefined;
  /**
   * Whether the parameter is input or output for the module.
   */
  use: ('in'|'out');
  _use?: Element | undefined;
}
/**
 * A Period specifies a range of time; the context of use will specify whether the entire range applies (e.g. "the patient was an inpatient of the hospital for this time range") or one value from the range applies (e.g. "give to the patient between these two times").
 * Period is not used for a duration (a measure of elapsed time). See [Duration](datatypes.html#Duration).
 */
export interface Period extends DataType {
  /**
   * The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
   * The end value includes any matching date/time. i.e. 2012-02-03T10:00:00 is in a period that has an end value of 2012-02-03.
   */
  end?: string | undefined;
  _end?: Element | undefined;
  /**
   * The start of the period. The boundary is inclusive.
   * If the low element is missing, the meaning is that the low boundary is not known.
   */
  start?: string | undefined;
  _start?: Element | undefined;
}
export interface PrimitiveType extends DataType {
}
export interface ProductShelfLife extends BackboneType {
  /**
   * The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  periodDuration?: Duration | undefined;
  /**
   * The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
   */
  periodstring?: string | undefined;
  _periodstring?: Element | undefined;
  /**
   * Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
   */
  specialPrecautionsForStorage?: CodeableConcept[] | undefined;
  /**
   * This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
   */
  type?: CodeableConcept | undefined;
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Quantity extends DataType {
  /**
   * A computer processable form of the unit in some unit representation system.
   * The preferred system is UCUM, but SNOMED CT can also be used (for customary units) or ISO 4217 for currency.  The context of use may additionally require a code from a particular system.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
   */
  comparator?: ('<'|'<='|'>='|'>'|'ad') | undefined;
  _comparator?: Element | undefined;
  /**
   * The identification of the system that provides the coded form of the unit.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * A human-readable form of the unit.
   */
  unit?: string | undefined;
  _unit?: Element | undefined;
  /**
   * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
   * The implicit precision in the value should always be honored. Monetary values have their own rules for handling precision (refer to standard accounting text books).
   */
  value?: number | undefined;
}
/**
 * The stated low and high value are assumed to have arbitrarily high precision when it comes to determining which values are in the range. I.e. 1.99 is not in the range 2 -> 3.
 */
export interface Range extends DataType {
  /**
   * The high limit. The boundary is inclusive.
   * If the high element is missing, the high boundary is not known.
   */
  high?: Quantity | undefined;
  /**
   * The low limit. The boundary is inclusive.
   * If the low element is missing, the low boundary is not known.
   */
  low?: Quantity | undefined;
}
/**
 * The Ratio datatype should only be used to express a relationship of two numbers if the relationship cannot be suitably expressed using a Quantity and a common unit.  Where the denominator value is known to be fixed to "1", Quantity should be used instead of Ratio.
 */
export interface Ratio extends DataType {
  /**
   * The value of the denominator.
   */
  denominator?: Quantity | undefined;
  /**
   * The value of the numerator.
   */
  numerator?: Quantity | undefined;
}
/**
 * The stated low and high value are assumed to have arbitrarily high precision when it comes to determining which values are in the range. I.e. 1.99 is not in the range 2 -> 3.
 */
export interface RatioRange extends DataType {
  /**
   * The value of the denominator.
   */
  denominator?: Quantity | undefined;
  /**
   * The value of the high limit numerator.
   * If the high element is missing, the high boundary is not known.
   */
  highNumerator?: Quantity | undefined;
  /**
   * The value of the low limit numerator.
   * If the low element is missing, the low boundary is not known.
   */
  lowNumerator?: Quantity | undefined;
}
/**
 * References SHALL be a reference to an actual FHIR resource, and SHALL be resolvable (allowing for access control, temporary unavailability, etc.). Resolution can be either by retrieval from the URL, or, where applicable by resource type, by treating an absolute reference as a canonical URL and looking it up in a local registry/repository.
 */
export interface Reference extends DataType {
  /**
   * Plain text narrative that identifies the resource in addition to the resource reference.
   * This is generally not the same as the Resource.text of the referenced resource.  The purpose is to identify what's being referenced, not to fully describe it.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
   * When an identifier is provided in place of a reference, any system processing the reference will only be able to resolve the identifier to a reference if it understands the business context in which the identifier is used. Sometimes this is global (e.g. a national identifier) but often it is not. For this reason, none of the useful mechanisms described for working with references (e.g. chaining, includes) are possible, nor should servers be expected to be able resolve the reference. Servers may accept an identifier based reference untouched, resolve it, and/or reject it - see CapabilityStatement.rest.resource.referencePolicy. 
   * When both an identifier and a literal reference are provided, the literal reference is preferred. Applications processing the resource are allowed - but not required - to check that the identifier matches the literal reference
   * Applications converting a logical reference to a literal reference may choose to leave the logical reference present, or remove it.
   * Reference is intended to point to a structure that can potentially be expressed as a FHIR resource, though there is no need for it to exist as an actual FHIR resource instance - except in as much as an application wishes to actual find the target of the reference. The content referred to be the identifier must meet the logical constraints implied by any limitations on what resource types are permitted for the reference.  For example, it would not be legitimate to send the identifier for a drug prescription if the type were Reference(Observation|DiagnosticReport).  One of the use-cases for Reference.identifier is the situation where no FHIR representation exists (where the type is Reference (Any).
   * This element only allows for a single identifier. In the case where additional identifers are required, use the [http://hl7.org/fhir/StructureDefinition/additionalIdentifier](http://hl7.org/fhir/extensions/StructureDefinition-additionalIdentifier.html) extension.
   */
  identifier?: Identifier | undefined;
  /**
   * A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
   * Using absolute URLs provides a stable scalable approach suitable for a cloud/web context, while using relative/logical references provides a flexible approach suitable for use when trading across closed eco-system boundaries.   Absolute URLs do not need to point to a FHIR RESTful server, though this is the preferred approach. If the URL conforms to the structure "[type]/[id]" then it should be assumed that the reference is to a FHIR RESTful server.
   */
  reference?: string | undefined;
  _reference?: Element | undefined;
  /**
   * The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.
   * The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
   * This element is used to indicate the type of  the target of the reference. This may be used which ever of the other elements are populated (or not). In some cases, the type of the target may be determined by inspection of the reference (e.g. a known RESTful URL) or by resolving the target of the reference.
   */
  type?: string | undefined;
  _type?: Element | undefined;
}
/**
 * Each related artifact is either an attachment, or a reference to another knowledge resource, but not both.
 */
export interface RelatedArtifact extends DataType {
  /**
   * A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.
   * Additional structured information about citations should be captured as extensions.
   */
  citation?: string | undefined;
  _citation?: Element | undefined;
  /**
   * Provides additional classifiers of the related artifact.
   */
  classifier?: CodeableConcept[] | undefined;
  /**
   * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * The document being referenced, represented as an attachment. This is exclusive with the resource element.
   */
  document?: Attachment | undefined;
  /**
   * A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * The date of publication of the artifact being referred to.
   */
  publicationDate?: string | undefined;
  _publicationDate?: Element | undefined;
  /**
   * The publication status of the artifact being referred to.
   */
  publicationStatus?: ('draft'|'active'|'retired'|'unknown') | undefined;
  _publicationStatus?: Element | undefined;
  /**
   * The related artifact, such as a library, value set, profile, or other knowledge resource.
   * If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource.
   */
  resource?: string | undefined;
  _resource?: Element | undefined;
  /**
   * The related artifact, if the artifact is not a canonical resource, or a resource reference to a canonical resource.
   * If both resource and resourceReference are present, they SHOULD be consistent and reference the same resource. Although relatedArtifact is intended to support references to definitional resources, there are cases where non-definitional resources can be definitional (such as Location where the kind is mode). Related artifacts SHOULD be used to reference definitional resources, and profiles SHOULD be used to make that explicit for particular use cases.
   */
  resourceReference?: Reference | undefined;
  /**
   * The type of relationship to the related artifact.
   * The presence of both sides of a relationship type (e.g. successor and predecessor) is required to support use cases where one side of a relationship is not represented in FHIR. However, this feature SHALL NOT be used to create bi-directional resource links in FHIR instances. Specifically, following the methodology of "new points to old" and "many points to one", when using related artifact elements to describe and reference FHIR resources, the type element SHALL be drawn from the fhir-related-artifact-type ValueSet.
   */
  type: ('documentation'|'justification'|'citation'|'predecessor'|'successor'|'derived-from'|'depends-on'|'composed-of'|'part-of'|'amends'|'amended-with'|'appends'|'appended-with'|'cites'|'cited-by'|'comments-on'|'comment-in'|'contains'|'contained-in'|'corrects'|'correction-in'|'replaces'|'replaced-with'|'retracts'|'retracted-by'|'signs'|'similar-to'|'supports'|'supported-with'|'transforms'|'transformed-into'|'transformed-with'|'documents'|'specification-of'|'created-with'|'cite-as');
  _type?: Element | undefined;
}
/**
 * The data is not interpretable without at least origin, period, and dimensions, but these are optional to allow a separation between the template of measurement and the actual measurement, such as between DeviceCapabilities and DeviceLog.  When providing a summary view (for example with Observation.value[x]) SampledData should be represented with a brief display text such as "Sampled Data".
 */
export interface SampledData extends DataType {
  /**
   * Reference to ConceptMap that defines the codes used in the data.
   * The ConceptMap cannot define meanings for the codes 'E', 'U', or 'L' (nor 'e', 'u', or 'l').
   */
  codeMap?: string | undefined;
  _codeMap?: Element | undefined;
  /**
   * A series of data points which are decimal values or codes separated by a single space (character u20). The special codes "E" (error), "L" (below detection limit) and "U" (above detection limit) are also defined for used in place of decimal values.
   * The data may be missing if it is omitted for summarization purposes. In general, data is required for any actual use of a SampledData.
   */
  data?: string | undefined;
  _data?: Element | undefined;
  /**
   * The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
   * If there is more than one dimension, the code for the type of data will define the meaning of the dimensions (typically ECG data).
   */
  dimensions: number;
  /**
   * A correction factor that is applied to the sampled data points before they are added to the origin.
   */
  factor?: number | undefined;
  /**
   * Amount of intervalUnits between samples, e.g. milliseconds for time-based sampling.
   * This is usually a whole number.
   */
  interval?: number | undefined;
  /**
   * The measurement unit in which the sample interval is expressed.
   */
  intervalUnit: string;
  _intervalUnit?: Element | undefined;
  /**
   * The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
   */
  lowerLimit?: number | undefined;
  /**
   * A series of data points which are decimal values separated by a single space (character u20).  The units in which the offsets are expressed are found in intervalUnit.  The absolute point at which the measurements begin SHALL be conveyed outside the scope of this datatype, e.g. Observation.effectiveDateTime for a timing offset.
   * If offsets is present, the number of data points must be equal to the number of offsets mlutipled by the dimensions.
   */
  offsets?: string | undefined;
  _offsets?: Element | undefined;
  /**
   * The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
   */
  origin: Quantity;
  /**
   * The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
   */
  upperLimit?: number | undefined;
}
/**
 * The elements of the Signature Resource are for ease of access of these elements. For digital signatures (Xml DigSig, JWS), the non-repudiation proof comes from the Signature  validation, which includes validation of the referenced objects (e.g. Resources) (a.k.a., Content) in the XML-Signature Detached form.
 */
export interface Signature extends DataType {
  /**
   * The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.
   * Where the signature type is an XML DigSig, the signed content is a FHIR Resource(s), the signature is of the XML form of the Resource(s) using  XML-Signature (XMLDIG) "Detached Signature" form.
   */
  data?: string | undefined;
  _data?: Element | undefined;
  /**
   * A reference to an application-usable description of the identity that is represented by the signature.
   * The party that can't sign. For example a child.
   */
  onBehalfOf?: Reference | undefined;
  /**
   * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.
   */
  sigFormat?: string | undefined;
  _sigFormat?: Element | undefined;
  /**
   * A mime type that indicates the technical format of the target resources signed by the signature.
   * "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
   */
  targetFormat?: string | undefined;
  _targetFormat?: Element | undefined;
  /**
   * An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
   * Examples include attesting to: authorship, correct transcription, and witness of specific event. Also known as a &quot;Commitment Type Indication&quot;.
   */
  type?: Coding[] | undefined;
  /**
   * When the digital signature was signed.
   * This should agree with the information in the signature.
   */
  when?: string | undefined;
  _when?: Element | undefined;
  /**
   * A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).
   * This should agree with the information in the signature.
   */
  who?: Reference | undefined;
}
/**
 * When the event is to occur
 */
export interface TimingRepeat extends Element {
  /**
   * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
   */
  boundsDuration?: Duration | undefined;
  /**
   * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
   */
  boundsPeriod?: Period | undefined;
  /**
   * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
   */
  boundsRange?: Range | undefined;
  /**
   * A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.
   * If you have both bounds and count, then this should be understood as within the bounds period, until count times happens.
   */
  count?: number | undefined;
  /**
   * If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.
   */
  countMax?: number | undefined;
  /**
   * If one or more days of week is provided, then the action happens only on the specified day(s).
   * If no days are specified, the action is assumed to happen every day as otherwise specified.
   */
  dayOfWeek?: ('mon'|'tue'|'wed'|'thu'|'fri'|'sat'|'sun')[] | undefined;
  _dayOfWeek?: Element[] | undefined;
  /**
   * How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.
   * For some events the duration is part of the definition of the event (e.g. IV infusions, where the duration is implicit in the specified quantity and rate). For others, it's part of the timing specification (e.g. exercise).
   */
  duration?: number | undefined;
  /**
   * If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.
   * For some events the duration is part of the definition of the event (e.g. IV infusions, where the duration is implicit in the specified quantity and rate). For others, it's part of the timing specification (e.g. exercise).
   */
  durationMax?: number | undefined;
  /**
   * The units of time for the duration, in UCUM units
   * Normal practice is to use the 'mo' code as a calendar month when calculating the next occurrence.
   */
  durationUnit?: ('s'|'min'|'h'|'d'|'wk'|'mo'|'a') | undefined;
  _durationUnit?: Element | undefined;
  /**
   * The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
   */
  frequency?: number | undefined;
  /**
   * If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
   */
  frequencyMax?: number | undefined;
  /**
   * The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
   */
  offset?: number | undefined;
  /**
   * Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
   */
  period?: number | undefined;
  /**
   * If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
   */
  periodMax?: number | undefined;
  /**
   * The units of time for the period in UCUM units
   * Normal practice is to use the 'mo' code as a calendar month when calculating the next occurrence.
   */
  periodUnit?: ('s'|'min'|'h'|'d'|'wk'|'mo'|'a') | undefined;
  _periodUnit?: Element | undefined;
  /**
   * Specified time of day for action to take place.
   * When time of day is specified, it is inferred that the action happens every day (as filtered by dayofWeek) on the specified times. If there's a timeOfDay, there cannot be a when, or vice versa.
   */
  timeOfDay?: string[] | undefined;
  _timeOfDay?: Element[] | undefined;
  /**
   * An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.
   * When more than one event is listed, the event is tied to the union of the specified events.
   */
  when?: ('MORN'|'MORN.early'|'MORN.late'|'NOON'|'AFT'|'AFT.early'|'AFT.late'|'EVE'|'EVE.early'|'EVE.late'|'NIGHT'|'PHS'|'IMD'|'HS'|'WAKE'|'C'|'CM'|'CD'|'CV'|'AC'|'ACM'|'ACD'|'ACV'|'PC'|'PCM'|'PCD'|'PCV')[] | undefined;
  _when?: Element[] | undefined;
}
/**
 * Describes the occurrence of an event that may occur multiple times. Timing schedules are used for specifying when events are expected or requested to occur, and may also be used to represent the summary of a past or ongoing event.  For simplicity, the definitions of Timing components are expressed as 'future' events, but such components can also be used to describe historic or ongoing events.
 * A Timing schedule can be a list of events and/or criteria for when the event happens, which can be expressed in a structured form and/or as a code. When both event and a repeating specification are provided, the list of events should be understood as an interpretation of the information in the repeat structure.
 */
export interface Timing extends BackboneType {
  /**
   * A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
   * BID etc. are defined as 'at institutionally specified times'. For example, an institution may choose that BID is "always at 7am and 6pm".  If it is inappropriate for this choice to be made, the code BID should not be used. Instead, a distinct organization-specific code should be used in place of the HL7-defined BID code and/or a structured representation should be used (in this case, specifying the two event times).
   */
  code?: CodeableConcept | undefined;
  /**
   * Identifies specific times when the event occurs.
   */
  event?: string[] | undefined;
  _event?: Element[] | undefined;
  /**
   * A set of rules that describe when the event is scheduled.
   */
  repeat?: Element | undefined;
}
/**
 * If an event is a named-event, it means the event is completely pre-coordinated, and no other information can be specified for the event. If the event is one of the data- events, the data and condition elements specify the triggering criteria. The data element specifies the structured component, and the condition element provides additional optional refinement of that structured component. If the event is periodic, the timing element defines when the event is triggered. For both data- and periodic events, a name can be provided as a shorthand for the formal semantics provided by the other elements.
 */
export interface TriggerDefinition extends DataType {
  /**
   * A code that identifies the event.
   */
  code?: CodeableConcept | undefined;
  /**
   * A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.
   * This element can be only be specified for data type triggers and provides additional semantics for the trigger. The context available within the condition is based on the type of data event. For all events, the current resource will be available as context. In addition, for modification events, the previous resource will also be available. The expression may be inlined, or may be a simple absolute URI, which is a reference to a named expression within a logic library referenced by a library element or extension within the containing resource. If the expression is a FHIR Path expression, it evaluates in the context of a resource of one of the type identified in the data requirement, and may also refer to the variable %previous for delta comparisons on events of type data-changed, data-modified, and data-deleted which will always have the same type.
   */
  condition?: Expression | undefined;
  /**
   * The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.
   * This element shall be present for any data type trigger.
   */
  data?: DataRequirement[] | undefined;
  /**
   * A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.
   * An event name can be provided for all event types, but is required for named events. If a name is provided for a type other than named events, it is considered to be a shorthand for the semantics described by the formal description of the event.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A reference to a SubscriptionTopic resource that defines the event. If this element is provided, no other information about the trigger definition may be supplied.
   */
  subscriptionTopic?: string | undefined;
  _subscriptionTopic?: Element | undefined;
  /**
   * The timing of the event (if this is a periodic trigger).
   */
  timingstring?: string | undefined;
  _timingstring?: Element | undefined;
  /**
   * The timing of the event (if this is a periodic trigger).
   */
  timingReference?: Reference | undefined;
  /**
   * The timing of the event (if this is a periodic trigger).
   */
  timingTiming?: Timing | undefined;
  /**
   * The type of triggering event.
   */
  type: ('named-event'|'periodic'|'data-changed'|'data-added'|'data-modified'|'data-removed'|'data-accessed'|'data-access-ended');
  _type?: Element | undefined;
}
export interface UsageContext extends DataType {
  /**
   * A code that identifies the type of context being specified by this usage context.
   */
  code: Coding;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  valueRange?: Range | undefined;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  valueReference?: Reference | undefined;
}
export interface VirtualServiceDetail extends DataType {
  /**
   * Address to see alternative connection details.
   * This web address can be used to provide additional details on the call, such as alternative/regional call in numbers, or other associated services.
   */
  additionalInfo?: string[] | undefined;
  _additionalInfo?: Element[] | undefined;
  /**
   * What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type).
   */
  addressContactPoint?: ContactPoint | undefined;
  /**
   * What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type).
   */
  addressExtendedContactDetail?: ExtendedContactDetail | undefined;
  /**
   * What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type).
   */
  addressstring?: string | undefined;
  _addressstring?: Element | undefined;
  /**
   * The type of virtual service to connect to (i.e. Teams, Zoom, Specific VMR technology, WhatsApp).
   * As this type defines what the virtual service is, it then defines what address and additional information might be relevant.
   * Some profiles could be used for specific types to define what the other values could/should be.
   */
  channelType?: Coding | undefined;
  /**
   * Maximum number of participants supported by the virtual service.
   * Some services have only a limitted number of participants permitted to connect at a time, this is typically used in "shared" virtual services that you might find on location resources.
   * Typically on-demand services might not have these restrictions.
   */
  maxParticipants?: number | undefined;
  /**
   * Session Key required by the virtual service.
   * Some services require a session key to be able to access the service once connected.
   * This could be in cases where a shared number is used, and a session key is added to put into a private line, or to identify the participant in a call.
   */
  sessionKey?: string | undefined;
  _sessionKey?: Element | undefined;
}
/**
 * Calculated account balance(s)
 */
export interface AccountBalance extends BackboneElement {
  /**
   * Who is expected to pay this part of the balance.
   */
  aggregate?: CodeableConcept | undefined;
  /**
   * The actual balance value calculated for the age defined in the term property.
   */
  amount: Money;
  /**
   * The amount is only an estimated value - this is likely common for `current` term balances, but not with known terms (that were generated by a backend process).
   */
  estimate?: boolean | undefined;
  _estimate?: Element | undefined;
  /**
   * The term of the account balances - The balance value is the amount that was outstanding for this age.
   */
  term?: CodeableConcept | undefined;
}
/**
 * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account
 * Typically. this may be some form of insurance, internal charges, or self-pay.
 * Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
 * Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
 */
export interface AccountCoverage extends BackboneElement {
  /**
   * The party(s) that contribute to payment (or part of) of the charges applied to this account (including self-pay).
   * A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.
   */
  coverage: Reference;
  /**
   * The priority of the coverage in the context of this account.
   * It is common in some jurisdictions for there to be multiple coverages allocated to an account, and a sequence is required to order the settling of the account (often with insurance claiming).
   */
  priority?: number | undefined;
}
/**
 * The list of diagnoses relevant to this account
 */
export interface AccountDiagnosis extends BackboneElement {
  /**
   * The diagnosis relevant to the account.
   */
  condition: CodeableReference;
  /**
   * Ranking of the diagnosis (for each type).
   */
  dateOfDiagnosis?: string | undefined;
  _dateOfDiagnosis?: Element | undefined;
  /**
   * Was the Diagnosis present on Admission in the related Encounter.
   */
  onAdmission?: boolean | undefined;
  _onAdmission?: Element | undefined;
  /**
   * The package code can be used to group diagnoses that may be priced or delivered as a single product. Such as DRGs.
   */
  packageCode?: CodeableConcept[] | undefined;
  /**
   * Ranking of the diagnosis (for each type).
   */
  sequence?: number | undefined;
  /**
   * Type that this diagnosis has relevant to the account (e.g. admission, billing, discharge …).
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * The parties ultimately responsible for balancing the Account
 */
export interface AccountGuarantor extends BackboneElement {
  /**
   * A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.
   */
  onHold?: boolean | undefined;
  _onHold?: Element | undefined;
  /**
   * The entity who is responsible.
   */
  party: Reference;
  /**
   * The timeframe during which the guarantor accepts responsibility for the account.
   */
  period?: Period | undefined;
}
/**
 * The list of procedures relevant to this account
 */
export interface AccountProcedure extends BackboneElement {
  /**
   * The procedure relevant to the account.
   */
  code: CodeableReference;
  /**
   * Date of the procedure when using a coded procedure. If using a reference to a procedure, then the date on the procedure should be used.
   */
  dateOfService?: string | undefined;
  _dateOfService?: Element | undefined;
  /**
   * Any devices that were associated with the procedure relevant to the account.
   */
  device?: Reference[] | undefined;
  /**
   * The package code can be used to group procedures that may be priced or delivered as a single product. Such as DRGs.
   */
  packageCode?: CodeableConcept[] | undefined;
  /**
   * Ranking of the procedure (for each type).
   */
  sequence?: number | undefined;
  /**
   * How this procedure value should be used in charging the account.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Other associated accounts related to this account
 */
export interface AccountRelatedAccount extends BackboneElement {
  /**
   * Reference to an associated Account.
   */
  account: Reference;
  /**
   * Relationship of the associated Account.
   */
  relationship?: CodeableConcept | undefined;
}
export interface Account extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Account';
  /**
   * The calculated account balances - these are calculated and processed by the finance system.
   * The balances with a `term` that is not current are usually generated/updated by an invoicing or similar process.
   */
  balance?: AccountBalance[] | undefined;
  /**
   * The BillingStatus tracks the lifecycle of the account through the billing process. It indicates how transactions are treated when they are allocated to the account.
   */
  billingStatus?: CodeableConcept | undefined;
  /**
   * Time the balance amount was calculated.
   * The total(s) are not typically updated using the restful API but more often by back-end processes included in a typical finance system.
   */
  calculatedAt?: string | undefined;
  _calculatedAt?: Element | undefined;
  /**
   * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
   * Typically. this may be some form of insurance, internal charges, or self-pay.
   * Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
   * Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
   */
  coverage?: AccountCoverage[] | undefined;
  /**
   * The default currency for the account.
   */
  currency?: ('AED'|'AFN'|'ALL'|'AMD'|'ANG'|'AOA'|'ARS'|'AUD'|'AWG'|'AZN'|'BAM'|'BBD'|'BDT'|'BGN'|'BHD'|'BIF'|'BMD'|'BND'|'BOB'|'BOV'|'BRL'|'BSD'|'BTN'|'BWP'|'BYN'|'BZD'|'CAD'|'CDF'|'CHE'|'CHF'|'CHW'|'CLF'|'CLP'|'CNY'|'COP'|'COU'|'CRC'|'CUC'|'CUP'|'CVE'|'CZK'|'DJF'|'DKK'|'DOP'|'DZD'|'EGP'|'ERN'|'ETB'|'EUR'|'FJD'|'FKP'|'GBP'|'GEL'|'GGP'|'GHS'|'GIP'|'GMD'|'GNF'|'GTQ'|'GYD'|'HKD'|'HNL'|'HRK'|'HTG'|'HUF'|'IDR'|'ILS'|'IMP'|'INR'|'IQD'|'IRR'|'ISK'|'JEP'|'JMD'|'JOD'|'JPY'|'KES'|'KGS'|'KHR'|'KMF'|'KPW'|'KRW'|'KWD'|'KYD'|'KZT'|'LAK'|'LBP'|'LKR'|'LRD'|'LSL'|'LYD'|'MAD'|'MDL'|'MGA'|'MKD'|'MMK'|'MNT'|'MOP'|'MRU'|'MUR'|'MVR'|'MWK'|'MXN'|'MXV'|'MYR'|'MZN'|'NAD'|'NGN'|'NIO'|'NOK'|'NPR'|'NZD'|'OMR'|'PAB'|'PEN'|'PGK'|'PHP'|'PKR'|'PLN'|'PYG'|'QAR'|'RON'|'RSD'|'RUB'|'RWF'|'SAR'|'SBD'|'SCR'|'SDG'|'SEK'|'SGD'|'SHP'|'SLL'|'SOS'|'SRD'|'SSP'|'STN'|'SVC'|'SYP'|'SZL'|'THB'|'TJS'|'TMT'|'TND'|'TOP'|'TRY'|'TTD'|'TVD'|'TWD'|'TZS'|'UAH'|'UGX'|'USD'|'USN'|'UYI'|'UYU'|'UZS'|'VEF'|'VND'|'VUV'|'WST'|'XAF'|'XAG'|'XAU'|'XBA'|'XBB'|'XBC'|'XBD'|'XCD'|'XDR'|'XOF'|'XPD'|'XPF'|'XPT'|'XSU'|'XTS'|'XUA'|'XXX'|'YER'|'ZAR'|'ZMW'|'ZWL') | undefined;
  /**
   * Provides additional information about what the account tracks and how it is used.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * When using an account for billing a specific Encounter the set of diagnoses that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).
   */
  diagnosis?: AccountDiagnosis[] | undefined;
  /**
   * The parties responsible for balancing the account if other payment options fall short.
   */
  guarantor?: AccountGuarantor[] | undefined;
  /**
   * Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Name used for the account when displaying it to humans in reports, etc.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Indicates the service area, hospital, department, etc. with responsibility for managing the Account.
   */
  owner?: Reference | undefined;
  /**
   * When using an account for billing a specific Encounter the set of procedures that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).
   */
  procedure?: AccountProcedure[] | undefined;
  /**
   * Other associated accounts related to this account.
   */
  relatedAccount?: AccountRelatedAccount[] | undefined;
  /**
   * The date range of services associated with this account.
   * It is possible for transactions to be posted outside the service period, as long as the service was provided within the defined service period.
   */
  servicePeriod?: Period | undefined;
  /**
   * Indicates whether the account is presently used/usable or not.
   * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the Account as not currently valid.
   */
  status: ('active'|'inactive'|'entered-in-error'|'on-hold'|'unknown');
  _status?: Element | undefined;
  /**
   * Identifies the entity which incurs the expenses. While the immediate recipients of services or goods might be entities related to the subject, the expenses were ultimately incurred by the subject of the Account.
   * Accounts can be applied to non-patients for tracking other non-patient related activities, such as group services (patients not tracked, and costs charged to another body), or might not be allocated.
   */
  subject?: Reference[] | undefined;
  /**
   * Categorizes the account for reporting and searching purposes.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Dynamic aspects of the definition
 * Dynamic values are applied in the order in which they are defined in the ActivityDefinition. Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
 */
export interface ActivityDefinitionDynamicValue extends BackboneElement {
  /**
   * An expression specifying the value of the customized element.
   * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
   */
  expression: Expression;
  /**
   * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
   * The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
   */
  path: string;
  _path?: Element | undefined;
}
/**
 * Who should participate in the action
 */
export interface ActivityDefinitionParticipant extends BackboneElement {
  /**
   * Indicates how the actor will be involved in the action - author, reviewer, witness, etc.
   */
  function?: CodeableConcept | undefined;
  /**
   * The role the participant should play in performing the described action.
   */
  role?: CodeableConcept | undefined;
  /**
   * The type of participant in the action.
   */
  type?: ('careteam'|'device'|'group'|'healthcareservice'|'location'|'organization'|'patient'|'practitioner'|'practitionerrole'|'relatedperson') | undefined;
  _type?: Element | undefined;
  /**
   * The type of participant in the action.
   */
  typeCanonical?: string | undefined;
  _typeCanonical?: Element | undefined;
  /**
   * The type of participant in the action.
   * When this element is a reference, it SHOULD be a reference to a definitional resource (for example, a location type, rather than a specific location).
   */
  typeReference?: Reference | undefined;
}
export interface ActivityDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ActivityDefinition';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
   */
  asNeededboolean?: boolean | undefined;
  _asNeededboolean?: Element | undefined;
  /**
   * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
   */
  asNeededCodeableConcept?: CodeableConcept | undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   */
  author?: ContactDetail[] | undefined;
  /**
   * Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites).
   * Only used if not implicit in the code found in ServiceRequest.type.
   */
  bodySite?: CodeableConcept[] | undefined;
  /**
   * Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter.
   * Tends to be less relevant for activities involving particular products.
   */
  code?: CodeableConcept | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition.
   * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the activity definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the activity definition changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the activity definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the activity definition from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the activity definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the activity definition is presumed to be the predominant language in the place the activity definition was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Set this to true if the definition is to indicate that a particular activity should NOT be performed. If true, this element should be interpreted to reinforce a negative coding. For example NPO as a code with a doNotPerform of true would still indicate to NOT perform the action.
   * This element is not intended to be used to communicate a decision support response to cancel an order in progress. That should be done with the "remove" type of a PlanDefinition or RequestOrchestration.
   */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;
  /**
   * Provides detailed dosage instructions in the same way that they are described for MedicationRequest resources.
   * If a dosage instruction is used, the definition should not specify timing or quantity.
   */
  dosage?: Dosage[] | undefined;
  /**
   * Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the request resource that would contain the result.
   * Dynamic values are applied in the order in which they are defined in the ActivityDefinition. Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
   */
  dynamicValue?: ActivityDefinitionDynamicValue[] | undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   */
  editor?: ContactDetail[] | undefined;
  /**
   * The period during which the activity definition content was or is planned to be in active use.
   * The effective period for an activity definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a activity intended to be used for the year 2016 might be published in 2015.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * A Boolean value to indicate that this activity definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of activity definitions that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this activity definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this activity definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Indicates the level of authority/intentionality associated with the activity and where the request should fit into the workflow chain.
   */
  intent?: ('proposal'|'plan'|'directive'|'order'|'original-order'|'reflex-order'|'filler-order'|'instance-order'|'option') | undefined;
  _intent?: Element | undefined;
  /**
   * A legal or geographic region in which the activity definition is intended to be used.
   * It may be possible for the activity definition to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A description of the kind of resource the activity definition is representing. For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest.
   * The kind element may only specify Request resource types to facilitate considering user input as part of processing the result of any automated clinical reasoning processes. To support creation of event resources, such as Observations, RiskAssessments, and DetectedIssues, use a Task resource with the focus of the task set to the event resource to be created. Note that the kind of resource to be created may determine what types of extensions are permitted.
   */
  kind?: ('Appointment'|'AppointmentResponse'|'CarePlan'|'Claim'|'CommunicationRequest'|'CoverageEligibilityRequest'|'DeviceRequest'|'EnrollmentRequest'|'ImmunizationRecommendation'|'MedicationRequest'|'NutritionOrder'|'RequestOrchestration'|'ServiceRequest'|'SupplyRequest'|'Task'|'Transport'|'VisionPrescription') | undefined;
  _kind?: Element | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A reference to a Library resource containing any formal logic used by the activity definition.
   */
  library?: string[] | undefined;
  _library?: Element[] | undefined;
  /**
   * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
   * May reference a specific clinical location or may just identify a type of location.
   */
  location?: CodeableReference | undefined;
  /**
   * A natural language name identifying the activity definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Defines observation requirements for the action to be performed, such as body weight or surface area.
   */
  observationRequirement?: string[] | undefined;
  _observationRequirement?: Element[] | undefined;
  /**
   * Defines the observations that are expected to be produced by the action.
   */
  observationResultRequirement?: string[] | undefined;
  _observationResultRequirement?: Element[] | undefined;
  /**
   * Indicates who should participate in performing the action described.
   */
  participant?: ActivityDefinitionParticipant[] | undefined;
  /**
   * Indicates how quickly the activity  should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * Identifies the food, drug or other product being consumed or supplied in the activity.
   */
  productCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the food, drug or other product being consumed or supplied in the activity.
   */
  productReference?: Reference | undefined;
  /**
   * A profile to which the target of the activity definition is expected to conform.
   */
  profile?: string | undefined;
  _profile?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the activity definition.
   * Usually an organization but may be an individual. The publisher (or steward) of the activity definition is the organization or individual primarily responsible for the maintenance and upkeep of the activity definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the activity definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this activity definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the activity definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this activity definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
   */
  quantity?: Quantity | undefined;
  /**
   * Related artifacts such as additional documentation, justification, or bibliographic references.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * Defines specimen requirements for the action to be performed, such as required specimens for a lab test.
   */
  specimenRequirement?: string[] | undefined;
  _specimenRequirement?: Element[] | undefined;
  /**
   * The status of this activity definition. Enables tracking the life-cycle of the content.
   * Allows filtering of activity definitions that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A code, group definition, or canonical reference that describes  or identifies the intended subject of the activity being defined.  Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
   * Note that the choice of canonical for the subject element was introduced in R4B to support pharmaceutical quality use cases. To ensure as much backwards-compatibility as possible, it is recommended to only use the new canonical type with these use cases.
   */
  subjectstring?: string | undefined;
  _subjectstring?: Element | undefined;
  /**
   * A code, group definition, or canonical reference that describes  or identifies the intended subject of the activity being defined.  Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
   * Note that the choice of canonical for the subject element was introduced in R4B to support pharmaceutical quality use cases. To ensure as much backwards-compatibility as possible, it is recommended to only use the new canonical type with these use cases.
   */
  subjectCodeableConcept?: CodeableConcept | undefined;
  /**
   * A code, group definition, or canonical reference that describes  or identifies the intended subject of the activity being defined.  Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
   * Note that the choice of canonical for the subject element was introduced in R4B to support pharmaceutical quality use cases. To ensure as much backwards-compatibility as possible, it is recommended to only use the new canonical type with these use cases.
   */
  subjectReference?: Reference | undefined;
  /**
   * An explanatory or alternate title for the activity definition giving additional information about its content.
   */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;
  /**
   * The timing or frequency upon which the described activity is to occur.
   * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
   */
  timingAge?: Age | undefined;
  /**
   * The timing or frequency upon which the described activity is to occur.
   * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
   */
  timingDuration?: Duration | undefined;
  /**
   * The timing or frequency upon which the described activity is to occur.
   * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
   */
  timingRange?: Range | undefined;
  /**
   * The timing or frequency upon which the described activity is to occur.
   * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
   */
  timingTiming?: Timing | undefined;
  /**
   * A short, descriptive, user-friendly title for the activity definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
   * Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
   */
  transform?: string | undefined;
  _transform?: Element | undefined;
  /**
   * An absolute URI that is used to identify this activity definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this activity definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the activity definition is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * A detailed description of how the activity definition is used from a clinical perspective.
   */
  usage?: string | undefined;
  _usage?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate activity definition instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the activity definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the activity definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.
   * There may be different activity definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the activity definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
export interface ActorDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ActorDefinition';
  /**
   * The capability statement for the actor (if the concept is applicable).
   */
  capabilities?: string | undefined;
  _capabilities?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the actor definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the actor definition.
   * ...
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the actor definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the actor definition changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the actor definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A url that identifies the definition of this actor in another IG (which IG must be listed in the dependencies). This actor inherits all the obligations etc. as defined in the other IG.
   */
  derivedFrom?: string[] | undefined;
  _derivedFrom?: Element[] | undefined;
  /**
   * A free text natural language description of the actor.
   * This description can be used for a general description of the actor, and which covers why it was defined.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Documentation about the functionality of the actor.
   * In general terms, the description desribes what the actor is, and this element describes what the actor does (or is expected to do).
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * A Boolean value to indicate that this actor definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of actor definitions that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this actor definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the actor definition is intended to be used.
   * It may be possible for the actor definition to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A natural language name identifying the actor definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the actor definition.
   * Usually an organization but may be an individual. The publisher (or steward) of the actor definition is the organization or individual primarily responsible for the maintenance and upkeep of the actor definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the actor definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this actor definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the actor definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this actor definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * A reference to additional documentation about the actor, but description and documentation.
   */
  reference?: string[] | undefined;
  _reference?: Element[] | undefined;
  /**
   * The status of this actor definition. Enables tracking the life-cycle of the content.
   * Allows filtering of actor definitions that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the actor definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Whether the actor represents a human or an appliction.
   */
  type: ('person'|'system');
  _type?: Element | undefined;
  /**
   * An absolute URI that is used to identify this actor definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this actor definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the actor definition is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate actor definition instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the actor definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the actor definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different actor definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the actor definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Characteristics e.g. a product's onset of action
 */
export interface AdministrableProductDefinitionProperty extends BackboneElement {
  /**
   * The status of characteristic e.g. assigned or pending.
   */
  status?: ('draft'|'active'|'retired'|'unknown') | undefined;
  /**
   * A code expressing the type of characteristic.
   */
  type: CodeableConcept;
  /**
   * A value for the characteristic.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * A value for the characteristic.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * A value for the characteristic.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * A value for the characteristic.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * A value for the characteristic.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * A value for the characteristic.
   */
  valueReference?: Reference | undefined;
}
/**
 * A species specific time during which consumption of animal product is not appropriate
 */
export interface AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod extends BackboneElement {
  /**
   * Extra information about the withdrawal period.
   */
  supportingInformation?: string | undefined;
  _supportingInformation?: Element | undefined;
  /**
   * Coded expression for the type of tissue for which the withdrawal period applies, e.g. meat, milk.
   */
  tissue: CodeableConcept;
  /**
   * A value for the time.
   */
  value: Quantity;
}
/**
 * A species for which this route applies
 */
export interface AdministrableProductDefinitionRouteOfAdministrationTargetSpecies extends BackboneElement {
  /**
   * Coded expression for the species.
   */
  code: CodeableConcept;
  /**
   * A species specific time during which consumption of animal product is not appropriate.
   */
  withdrawalPeriod?: AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod[] | undefined;
}
/**
 * The path by which the product is taken into or makes contact with the body
 */
export interface AdministrableProductDefinitionRouteOfAdministration extends BackboneElement {
  /**
   * Coded expression for the route.
   */
  code: CodeableConcept;
  /**
   * The first dose (dose quantity) administered can be specified for the product, using a numerical value and its unit of measurement.
   */
  firstDose?: Quantity | undefined;
  /**
   * The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered.
   */
  maxDosePerDay?: Quantity | undefined;
  /**
   * The maximum dose per treatment period that can be administered.
   */
  maxDosePerTreatmentPeriod?: Ratio | undefined;
  /**
   * The maximum single dose that can be administered, specified using a numerical value and its unit of measurement.
   */
  maxSingleDose?: Quantity | undefined;
  /**
   * The maximum treatment period during which the product can be administered.
   */
  maxTreatmentPeriod?: Duration | undefined;
  /**
   * A species for which this route applies.
   */
  targetSpecies?: AdministrableProductDefinitionRouteOfAdministrationTargetSpecies[] | undefined;
}
export interface AdministrableProductDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AdministrableProductDefinition';
  /**
   * The dose form of the final product after necessary reconstitution or processing. Contrasts to the manufactured dose form (see ManufacturedItemDefinition). If the manufactured form was 'powder for solution for injection', the administrable dose form could be 'solution for injection' (once mixed with another item having manufactured form 'solvent for solution for injection').
   */
  administrableDoseForm?: CodeableConcept | undefined;
  /**
   * A general description of the product, when in its final form, suitable for administration e.g. effervescent blue liquid, to be swallowed. Intended to be used when the other structured properties of this resource are insufficient or cannot be supported. It is not intended to duplicate information already carried elswehere.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A device that is integral to the medicinal product, in effect being considered as an "ingredient" of the medicinal product. This is not intended for devices that are just co-packaged.
   */
  device?: Reference | undefined;
  /**
   * References a product from which one or more of the constituent parts of that product can be prepared and used as described by this administrable product.  If this administrable product describes the administration of a crushed tablet, the 'formOf' would be the product representing a distribution containing tablets and possibly also a cream.  This is distinct from the 'producedFrom' which refers to the specific components of the product that are used in this preparation, rather than the product as a whole.
   */
  formOf?: Reference[] | undefined;
  /**
   * An identifier for the administrable product.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The ingredients of this administrable medicinal product. This is only needed if the ingredients are not specified either using ManufacturedItemDefiniton (via AdministrableProductDefinition.producedFrom) to state which component items are used to make this, or using by incoming references from the Ingredient resource, to state in detail which substances exist within this. This element allows a basic coded ingredient to be used.
   */
  ingredient?: CodeableConcept[] | undefined;
  /**
   * Indicates the specific manufactured items that are part of the 'formOf' product that are used in the preparation of this specific administrable form.  In some cases, an administrable form might use all of the items from the overall product (or there might only be one item), while in other cases, an administrable form might use only a subset of the items available in the overall product.  For example, an administrable form might involve combining a liquid and a powder available as part of an overall product, but not involve applying the also supplied cream.
   */
  producedFrom?: Reference[] | undefined;
  /**
   * Characteristics e.g. a product's onset of action.
   */
  property?: AdministrableProductDefinitionProperty[] | undefined;
  /**
   * The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route. RouteOfAdministration cannot be used when the 'formOf' product already uses MedicinalProductDefinition.route (and vice versa).
   */
  routeOfAdministration: AdministrableProductDefinitionRouteOfAdministration[];
  /**
   * The status of this administrable product. Enables tracking the life-cycle of the content.
   * Allows filtering of administrable products that are appropriate for use versus not.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * The presentation type in which this item is given to a patient. e.g. for a spray - 'puff' (as in 'contains 100 mcg per puff'), or for a liquid - 'vial' (as in 'contains 5 ml per vial').
   */
  unitOfPresentation?: CodeableConcept | undefined;
}
/**
 * Contributing factors suspected to have increased the probability or severity of the adverse event
 */
export interface AdverseEventContributingFactor extends BackboneElement {
  /**
   * The item that is suspected to have increased the probability or severity of the adverse event.
   */
  itemCodeableConcept?: CodeableConcept | undefined;
  /**
   * The item that is suspected to have increased the probability or severity of the adverse event.
   */
  itemReference?: Reference | undefined;
}
/**
 * Ameliorating actions taken after the adverse event occured in order to reduce the extent of harm
 */
export interface AdverseEventMitigatingAction extends BackboneElement {
  /**
   * The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
   */
  itemCodeableConcept?: CodeableConcept | undefined;
  /**
   * The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
   */
  itemReference?: Reference | undefined;
}
/**
 * Who was involved in the adverse event or the potential adverse event and what they did
 */
export interface AdverseEventParticipant extends BackboneElement {
  /**
   * Indicates who or what participated in the event.
   * For example, the physician prescribing a drug, a nurse administering the drug, a device that administered the drug, a witness to the event, or an informant of clinical history.
   */
  actor: Reference;
  /**
   * Distinguishes the type of involvement of the actor in the adverse event, such as contributor or informant.
   */
  function?: CodeableConcept | undefined;
}
/**
 * Preventive actions that contributed to avoiding the adverse event
 */
export interface AdverseEventPreventiveAction extends BackboneElement {
  /**
   * The action that contributed to avoiding the adverse event.
   */
  itemCodeableConcept?: CodeableConcept | undefined;
  /**
   * The action that contributed to avoiding the adverse event.
   */
  itemReference?: Reference | undefined;
}
/**
 * Supporting information relevant to the event
 */
export interface AdverseEventSupportingInfo extends BackboneElement {
  /**
   * Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS).  Supporting information is not a contributing factor, preventive action, or mitigating action.
   */
  itemCodeableConcept?: CodeableConcept | undefined;
  /**
   * Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS).  Supporting information is not a contributing factor, preventive action, or mitigating action.
   */
  itemReference?: Reference | undefined;
}
/**
 * Information on the possible cause of the event
 */
export interface AdverseEventSuspectEntityCausality extends BackboneElement {
  /**
   * The method of evaluating the relatedness of the suspected entity to the event.
   */
  assessmentMethod?: CodeableConcept | undefined;
  /**
   * The author of the information on the possible cause of the event.
   */
  author?: Reference | undefined;
  /**
   * The result of the assessment regarding the relatedness of the suspected entity to the event.
   */
  entityRelatedness?: CodeableConcept | undefined;
}
/**
 * The suspected agent causing the adverse event
 */
export interface AdverseEventSuspectEntity extends BackboneElement {
  /**
   * Information on the possible cause of the event.
   */
  causality?: AdverseEventSuspectEntityCausality | undefined;
  /**
   * Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device.
   */
  instanceCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device.
   */
  instanceReference?: Reference | undefined;
}
export interface AdverseEvent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AdverseEvent';
  /**
   * Whether the event actually happened or was a near miss. Note that this is independent of whether anyone was affected or harmed or how severely.
   * AllergyIntolerance should be used for the initial capture or recording of the individual's propensity to an adverse reaction to a substance.  If an AllergyIntolerance does not exist, then an adverse reaction should be recorded as an AllergyIntolerance. If an AllergyIntolerance does exist and the substance was given, then an adverse reaction should be recorded as an AdverseEvent due to the aberrant workflow.
   */
  actuality: ('actual'|'potential');
  _actuality?: Element | undefined;
  /**
   * The overall type of event, intended for search and filtering purposes.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Specific event that occurred or that was averted, such as patient fall, wrong organ removed, or wrong blood transfused.
   */
  code?: CodeableConcept | undefined;
  /**
   * The contributing factors suspected to have increased the probability or severity of the adverse event.
   */
  contributingFactor?: AdverseEventContributingFactor[] | undefined;
  /**
   * Estimated or actual date the AdverseEvent began, in the opinion of the reporter.
   */
  detected?: string | undefined;
  _detected?: Element | undefined;
  /**
   * The Encounter associated with the start of the AdverseEvent.
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter. For example, if a medication administration was considered an adverse event because it resulted in a rash, then the encounter when the medication administration was given is the associated encounter. If the patient reports the AdverseEvent during a second encounter, that second encounter is not the associated encounter.
   */
  encounter?: Reference | undefined;
  /**
   * Considered likely or probable or anticipated in the research study.  Whether the reported event matches any of the outcomes for the patient that are considered by the study as known or likely.
   */
  expectedInResearchStudy?: boolean | undefined;
  _expectedInResearchStudy?: Element | undefined;
  /**
   * Business identifiers assigned to this adverse event by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The information about where the adverse event occurred.
   */
  location?: Reference | undefined;
  /**
   * The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
   */
  mitigatingAction?: AdverseEventMitigatingAction[] | undefined;
  /**
   * Comments made about the adverse event by the performer, subject or other participants.
   */
  note?: Annotation[] | undefined;
  /**
   * The date (and perhaps time) when the adverse event occurred.
   */
  occurrencestring?: string | undefined;
  _occurrencestring?: Element | undefined;
  /**
   * The date (and perhaps time) when the adverse event occurred.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * The date (and perhaps time) when the adverse event occurred.
   */
  occurrenceTiming?: Timing | undefined;
  /**
   * Describes the type of outcome from the adverse event, such as resolved, recovering, ongoing, resolved-with-sequelae, or fatal.
   */
  outcome?: CodeableConcept[] | undefined;
  /**
   * Indicates who or what participated in the adverse event and how they were involved.
   */
  participant?: AdverseEventParticipant[] | undefined;
  /**
   * Preventive actions that contributed to avoiding the adverse event.
   */
  preventiveAction?: AdverseEventPreventiveAction[] | undefined;
  /**
   * The date on which the existence of the AdverseEvent was first recorded.
   * The recordedDate represents the date when this particular AdverseEvent record was created in the system, not the date of the most recent update.  The date of the last record modification can be retrieved from the resource metadata.
   */
  recordedDate?: string | undefined;
  _recordedDate?: Element | undefined;
  /**
   * Information on who recorded the adverse event.  May be the patient or a practitioner.
   */
  recorder?: Reference | undefined;
  /**
   * Information about the condition that occurred as a result of the adverse event, such as hives due to the exposure to a substance (for example, a drug or a chemical) or a broken leg as a result of the fall.
   */
  resultingEffect?: Reference[] | undefined;
  /**
   * Assessment whether this event, or averted event, was of clinical importance.
   * Using an example, a rash can have an AdverseEvent.resultingEffect.severity = severe, yet an AdverseEvent.seriousness = non-serious.  Alternatively, a medication given with the wrong dose (chemotherapy given with too low of a dose) can have an AdverseEvent.resultingEffect.severity = mild, yet an adverseEvent.seriousness = serious.  Another example would be a beta blocker clinical trial where patients with asthma should be excluded, yet a patient with asthma was included and had an asthmatic episode where  AdverseEvent.resultingEffect.severity = mild, yet an adverseEvent.seriousness = serious.
   */
  seriousness?: CodeableConcept | undefined;
  /**
   * The current state of the adverse event or potential adverse event.
   * This is not the reporting of the event to any regulatory or quality organization.  This is not the outcome of the patient's condition.
   */
  status: ('in-progress'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The research study that the subject is enrolled in.
   */
  study?: Reference[] | undefined;
  /**
   * This subject or group impacted by the event.
   * If AdverseEvent.resultingEffect differs among members of the group, then use Patient as the subject.
   */
  subject: Reference;
  /**
   * Supporting information relevant to the event.
   */
  supportingInfo?: AdverseEventSupportingInfo[] | undefined;
  /**
   * Describes the entity that is suspected to have caused the adverse event.
   */
  suspectEntity?: AdverseEventSuspectEntity[] | undefined;
}
/**
 * Who or what participated in the activities related to the allergy or intolerance and how they were involved
 */
export interface AllergyIntoleranceParticipant extends BackboneElement {
  /**
   * Indicates who or what participated in the activities related to the allergy or intolerance.
   */
  actor: Reference;
  /**
   * Distinguishes the type of involvement of the actor in the activities related to the allergy or intolerance.
   */
  function?: CodeableConcept | undefined;
}
/**
 * Adverse Reaction Events linked to exposure to substance
 */
export interface AllergyIntoleranceReaction extends BackboneElement {
  /**
   * Text description about the reaction as a whole, including details of the manifestation if required.
   * Use the description to provide any details of a particular event of the occurred reaction such as circumstances, reaction specifics, what happened before/after. Information, related to the event, but not describing a particular care should be captured in the note field. For example: at the age of four, the patient was given penicillin for strep throat and subsequently developed severe hives.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Identification of the route by which the subject was exposed to the substance.
   * Coding of the route of exposure with a terminology should be used wherever possible.
   */
  exposureRoute?: CodeableConcept | undefined;
  /**
   * Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
   * Manifestation can be expressed as a single word, phrase or brief description. For example: nausea, rash or no reaction. It is preferable that manifestation should be coded with a terminology, where possible. The values entered here may be used to display on an application screen as part of a list of adverse reactions, as recommended in the UK NHS CUI guidelines.  Terminologies commonly used include, but are not limited to, SNOMED CT or ICD10.
   */
  manifestation: CodeableReference[];
  /**
   * Additional text about the adverse reaction event not captured in other fields.
   * Use this field to record information indirectly related to a particular event and not captured in the description. For example: Clinical records are no longer available, recorded based on information provided to the patient by her mother and her mother is deceased.
   */
  note?: Annotation[] | undefined;
  /**
   * Record of the date and/or time of the onset of the Reaction.
   */
  onset?: string | undefined;
  _onset?: Element | undefined;
  /**
   * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
   * It is acknowledged that this assessment is very subjective. There may be some specific practice domains where objective scales have been applied. Objective scales can be included in this model as extensions.
   */
  severity?: ('mild'|'moderate'|'severe') | undefined;
  _severity?: Element | undefined;
  /**
   * Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
   * Coding of the specific substance (or pharmaceutical product) with a terminology capable of triggering decision support should be used wherever possible.  The 'code' element allows for the use of a specific substance or pharmaceutical product, or a group or class of substances. In the case of an allergy or intolerance to a class of substances, (for example, "penicillins"), the 'reaction.substance' element could be used to code the specific substance that was identified as having caused the reaction (for example, "amoxycillin"). Duplication of the value in the 'code' and 'reaction.substance' elements is acceptable when a specific substance has been recorded in 'code'.
   */
  substance?: CodeableConcept | undefined;
}
/**
 * Substances include, but are not limited to: a therapeutic substance administered correctly at an appropriate dosage for the individual; food; material derived from plants or animals; or venom from insect stings.
 */
export interface AllergyIntolerance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AllergyIntolerance';
  /**
   * Category of the identified substance.
   * This data element has been included because it is currently being captured in some clinical systems. This data can be derived from the substance where coding systems are used, and is effectively redundant in that situation.  When searching on category, consider the implications of AllergyIntolerance resources without a category.  For example, when searching on category = medication, medication allergies that don't have a category valued will not be returned.  Refer to [search](search.html) for more information on how to search category with a :missing modifier to get allergies that don't have a category.  Additionally, category should be used with caution because category can be subjective based on the sender.
   */
  category?: ('food'|'medication'|'environment'|'biologic')[] | undefined;
  _category?: Element[] | undefined;
  /**
   * The clinical status of the allergy or intolerance.
   * AllergyIntolerance.clinicalStatus should be present if verificationStatus is not entered-in-error and the AllergyIntolerance.code isn't negated (No Known Allergy, No Drug Allergy, No Food Allergy, No Latex Allergy).
   * Refer to [discussion](extensibility.html#Special-Case) if clinicalStatus is missing data.
   * The data type is CodeableConcept because clinicalStatus has some clinical judgment involved, such that there might need to be more specificity than the required FHIR value set allows. For example, a SNOMED coding might allow for additional specificity.
   */
  clinicalStatus?: ('active'|'inactive'|'resolved') | undefined;
  /**
   * Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
   * It is strongly recommended that this element be populated using a terminology, where possible. For example, some terminologies used include RxNorm, SNOMED CT, DM+D, NDFRT, ICD-9, IDC-10, UNII, and ATC. Plain text should only be used if there is no appropriate terminology available. Additional details can be specified in the text.
   * When a substance or product code is specified for the 'code' element, the "default" semantic context is that this is a positive statement of an allergy or intolerance (depending on the value of the 'type' element, if present) condition to the specified substance/product.  In the corresponding SNOMED CT allergy model, the specified substance/product is the target (destination) of the "Causative agent" relationship.
   * The 'substanceExposureRisk' extension is available as a structured and more flexible alternative to the 'code' element for making positive or negative allergy or intolerance statements.  This extension provides the capability to make "no known allergy" (or "no risk of adverse reaction") statements regarding any coded substance/product (including cases when a pre-coordinated "no allergy to x" concept for that substance/product does not exist).  If the 'substanceExposureRisk' extension is present, the AllergyIntolerance.code element SHALL be omitted.
   */
  code?: CodeableConcept | undefined;
  /**
   * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
   * The default criticality value for any propensity to an adverse reaction should be 'Low Risk', indicating at the very least a relative contraindication to deliberate or voluntary exposure to the substance. 'High Risk' is flagged if the clinician has identified a propensity for a more serious or potentially life-threatening reaction, such as anaphylaxis, and implies an absolute contraindication to deliberate or voluntary exposure to the substance. If this element is missing, the criticality is unknown (though it may be known elsewhere).  Systems that capture a severity at the condition level are actually representing the concept of criticality whereas the severity documented at the reaction level is representing the true reaction severity.  Existing systems that are capturing both condition criticality and reaction severity may use the term "severity" to represent both.  Criticality is the worst it could be in the future (i.e. situation-agnostic) whereas severity is situation-dependent.
   */
  criticality?: ('low'|'high'|'unable-to-assess') | undefined;
  _criticality?: Element | undefined;
  /**
   * The encounter when the allergy or intolerance was asserted.
   */
  encounter?: Reference | undefined;
  /**
   * Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Represents the date and/or time of the last known occurrence of a reaction event.
   * This date may be replicated by one of the Onset of Reaction dates. Where a textual representation of the date of last occurrence is required e.g. 'In Childhood, '10 years ago' the AllergyIntolerance.note element should be used.
   */
  lastOccurrence?: string | undefined;
  _lastOccurrence?: Element | undefined;
  /**
   * Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
   * For example: including reason for flagging a seriousness of 'High Risk'; and instructions related to future exposure or administration of the substance, such as administration within an Intensive Care Unit or under corticosteroid cover. The notes should be related to an allergy or intolerance as a condition in general and not related to any particular episode of it. For episode notes and descriptions, use AllergyIntolerance.event.description and  AllergyIntolerance.event.notes.
   */
  note?: Annotation[] | undefined;
  /**
   * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
   * Age is generally used when the patient reports an age at which the AllergyIntolerance was noted. Period is generally used to convey an imprecise onset that occurred within the time period.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).
   */
  onsetAge?: Age | undefined;
  /**
   * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
   * Age is generally used when the patient reports an age at which the AllergyIntolerance was noted. Period is generally used to convey an imprecise onset that occurred within the time period.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).
   */
  onsetstring?: string | undefined;
  _onsetstring?: Element | undefined;
  /**
   * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
   * Age is generally used when the patient reports an age at which the AllergyIntolerance was noted. Period is generally used to convey an imprecise onset that occurred within the time period.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).
   */
  onsetPeriod?: Period | undefined;
  /**
   * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
   * Age is generally used when the patient reports an age at which the AllergyIntolerance was noted. Period is generally used to convey an imprecise onset that occurred within the time period.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).
   */
  onsetRange?: Range | undefined;
  /**
   * Indicates who or what participated in the activities related to the allergy or intolerance and how they were involved.
   */
  participant?: AllergyIntoleranceParticipant[] | undefined;
  /**
   * The patient who has the allergy or intolerance.
   */
  patient: Reference;
  /**
   * Details about each adverse reaction event linked to exposure to the identified substance.
   */
  reaction?: AllergyIntoleranceReaction[] | undefined;
  /**
   * The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system-generated date.
   * When onset date is unknown, recordedDate can be used to establish if the allergy or intolerance was present on or before a given date.  If the recordedDate is known and provided by a sending system, it is preferred that the receiving system preserve that recordedDate value. If the recordedDate is not provided by the sending system, the receipt timestamp is sometimes used as the recordedDate.
   */
  recordedDate?: string | undefined;
  _recordedDate?: Element | undefined;
  /**
   * Identification of the underlying physiological mechanism for the reaction risk.
   * Allergic (typically immune-mediated) reactions have been traditionally regarded as an indicator for potential escalation to significant future risk. Contemporary knowledge suggests that some reactions previously thought to be immune-mediated are, in fact, non-immune, but in some cases can still pose a life threatening risk. It is acknowledged that many clinicians might not be in a position to distinguish the mechanism of a particular reaction. Often the term "allergy" is used rather generically and may overlap with the use of "intolerance" - in practice the boundaries between these two concepts might not be well-defined or understood. This data element is included nevertheless, because many legacy systems have captured this attribute. Immunologic testing may provide supporting evidence for the basis of the reaction and the causative substance, but no tests are 100% sensitive or specific for sensitivity to a particular substance. If, as is commonly the case, it is unclear whether the reaction is due to an allergy or an intolerance, then the type element should be omitted from the resource.
   */
  type?: CodeableConcept | undefined;
  /**
   * Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).  The verification status pertains to the allergy or intolerance, itself, not to any specific AllergyIntolerance attribute.
   * The data type is CodeableConcept because verificationStatus has some clinical judgment involved, such that there might need to be more specificity than the required FHIR value set allows. For example, a SNOMED coding might allow for additional specificity.
   */
  verificationStatus?: ('unconfirmed'|'presumed'|'confirmed'|'refuted'|'entered-in-error') | undefined;
}
/**
 * Participants involved in appointment
 */
export interface AppointmentParticipant extends BackboneElement {
  /**
   * The individual, device, location, or service participating in the appointment.
   * Where a CareTeam is provided, this does not imply that the entire team is included, just a single member from the group with the appropriate role. Where multiple members are required, please include the CareTeam the required number of times.
   */
  actor?: Reference | undefined;
  /**
   * Participation period of the actor.
   */
  period?: Period | undefined;
  /**
   * Whether this participant is required to be present at the meeting. If false, the participant is optional.
   * For the use-case where two doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present include the patient in the subject field, but do not include them as a participant - this was formerly done prior to R5 with required='information-only'.
   */
  required?: boolean | undefined;
  _required?: Element | undefined;
  /**
   * Participation status of the actor.
   */
  status: ('accepted'|'declined'|'tentative'|'needs-action');
  _status?: Element | undefined;
  /**
   * Role of participant in the appointment.
   * The role of the participant can be used to declare what the actor will be doing in the scope of this appointment.
   * If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
   * This value SHALL be the same when creating an AppointmentResponse so that they can be matched, and subsequently update the Appointment.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Information about monthly recurring appointments
 */
export interface AppointmentRecurrenceTemplateMonthlyTemplate extends BackboneElement {
  /**
   * Indicates that appointments in the series of recurring appointments should occur on a specific day of the month.
   */
  dayOfMonth?: number | undefined;
  /**
   * Indicates which day of the week the recurring appointments should occur each nth week.
   * This property is intended to be used with Appointment.recurrenceTemplate.monthly.nthWeek.
   */
  dayOfWeek?: ('mon'|'tue'|'wed'|'thu'|'fri'|'sat'|'sun') | undefined;
  /**
   * Indicates that recurring appointments should occur every nth month.
   */
  monthInterval: number;
  /**
   * Indicates which week within a month the appointments in the series of recurring appointments should occur on.
   */
  nthWeekOfMonth?: ('first'|'second'|'third'|'fourth'|'last') | undefined;
}
/**
 * Information about weekly recurring appointments
 */
export interface AppointmentRecurrenceTemplateWeeklyTemplate extends BackboneElement {
  /**
   * Indicates that recurring appointments should occur on Fridays.
   */
  friday?: boolean | undefined;
  _friday?: Element | undefined;
  /**
   * Indicates that recurring appointments should occur on Mondays.
   */
  monday?: boolean | undefined;
  _monday?: Element | undefined;
  /**
   * Indicates that recurring appointments should occur on Saturdays.
   */
  saturday?: boolean | undefined;
  _saturday?: Element | undefined;
  /**
   * Indicates that recurring appointments should occur on Sundays.
   */
  sunday?: boolean | undefined;
  _sunday?: Element | undefined;
  /**
   * Indicates that recurring appointments should occur on Thursdays.
   */
  thursday?: boolean | undefined;
  _thursday?: Element | undefined;
  /**
   * Indicates that recurring appointments should occur on Tuesdays.
   */
  tuesday?: boolean | undefined;
  _tuesday?: Element | undefined;
  /**
   * Indicates that recurring appointments should occur on Wednesdays.
   */
  wednesday?: boolean | undefined;
  _wednesday?: Element | undefined;
  /**
   * The interval defines if the recurrence is every nth week. The default is every week, so it is expected that this value will be 2 or more.
   * e.g. For recurring every second week this interval would be 2, or every third week the interval would be 3.
   */
  weekInterval?: number | undefined;
}
/**
 * Information about yearly recurring appointments
 */
export interface AppointmentRecurrenceTemplateYearlyTemplate extends BackboneElement {
  /**
   * Appointment recurs every nth year.
   */
  yearInterval: number;
}
/**
 * Details of the recurrence pattern/template used to generate occurrences
 */
export interface AppointmentRecurrenceTemplate extends BackboneElement {
  /**
   * Any dates, such as holidays, that should be excluded from the recurrence.
   * excludingDate is an alternative to excludingRecurrenceId.  You may say either that 12/25/XXXX should be excluded using excludingDate, or you may indicate the recurrenceId of the appointment that would fall on the excluded date in the excludingRecurrenceId property.
   */
  excludingDate?: string[] | undefined;
  _excludingDate?: Element[] | undefined;
  /**
   * Any dates, such as holidays, that should be excluded from the recurrence.
   * excludingRecurrenceId is an alternative to excludingDate.  You may say either that 12/25/XXXX should be excluded using excludingDate, or you may indicate the recurrenceId of the appointment that would fall on the excluded date in the excludingRecurrenceId property.
   */
  excludingRecurrenceId?: number[] | undefined;
  /**
   * Recurring appointments will not occur after this date.
   */
  lastOccurrenceDate?: string | undefined;
  _lastOccurrenceDate?: Element | undefined;
  /**
   * Information about monthly recurring appointments.
   */
  monthlyTemplate?: AppointmentRecurrenceTemplateMonthlyTemplate | undefined;
  /**
   * How many appointments are planned in the recurrence.
   */
  occurrenceCount?: number | undefined;
  /**
   * The list of specific dates that will have appointments generated.
   */
  occurrenceDate?: string[] | undefined;
  _occurrenceDate?: Element[] | undefined;
  /**
   * How often the appointment series should recur.
   */
  recurrenceType: CodeableConcept;
  /**
   * The timezone of the recurring appointment occurrences.
   */
  timezone?: ('Africa/Abidjan'|'Africa/Accra'|'Africa/Addis_Ababa'|'Africa/Algiers'|'Africa/Asmara'|'Africa/Bamako'|'Africa/Bangui'|'Africa/Banjul'|'Africa/Bissau'|'Africa/Blantyre'|'Africa/Brazzaville'|'Africa/Bujumbura'|'Africa/Cairo'|'Africa/Casablanca'|'Africa/Ceuta'|'Africa/Conakry'|'Africa/Dakar'|'Africa/Dar_es_Salaam'|'Africa/Djibouti'|'Africa/Douala'|'Africa/El_Aaiun'|'Africa/Freetown'|'Africa/Gaborone'|'Africa/Harare'|'Africa/Johannesburg'|'Africa/Juba'|'Africa/Kampala'|'Africa/Khartoum'|'Africa/Kigali'|'Africa/Kinshasa'|'Africa/Lagos'|'Africa/Libreville'|'Africa/Lome'|'Africa/Luanda'|'Africa/Lubumbashi'|'Africa/Lusaka'|'Africa/Malabo'|'Africa/Maputo'|'Africa/Maseru'|'Africa/Mbabane'|'Africa/Mogadishu'|'Africa/Monrovia'|'Africa/Nairobi'|'Africa/Ndjamena'|'Africa/Niamey'|'Africa/Nouakchott'|'Africa/Ouagadougou'|'Africa/Porto-Novo'|'Africa/Sao_Tome'|'Africa/Timbuktu'|'Africa/Tripoli'|'Africa/Tunis'|'Africa/Windhoek'|'America/Adak'|'America/Anchorage'|'America/Anguilla'|'America/Antigua'|'America/Araguaina'|'America/Argentina/Buenos_Aires'|'America/Argentina/Catamarca'|'America/Argentina/ComodRivadavia'|'America/Argentina/Cordoba'|'America/Argentina/Jujuy'|'America/Argentina/La_Rioja'|'America/Argentina/Mendoza'|'America/Argentina/Rio_Gallegos'|'America/Argentina/Salta'|'America/Argentina/San_Juan'|'America/Argentina/San_Luis'|'America/Argentina/Tucuman'|'America/Argentina/Ushuaia'|'America/Aruba'|'America/Asuncion'|'America/Atikokan'|'America/Bahia'|'America/Bahia_Banderas'|'America/Barbados'|'America/Belem'|'America/Belize'|'America/Blanc-Sablon'|'America/Boa_Vista'|'America/Bogota'|'America/Boise'|'America/Cambridge_Bay'|'America/Campo_Grande'|'America/Cancun'|'America/Caracas'|'America/Cayenne'|'America/Cayman'|'America/Chicago'|'America/Chihuahua'|'America/Coral_Harbour'|'America/Costa_Rica'|'America/Creston'|'America/Cuiaba'|'America/Curacao'|'America/Danmarkshavn'|'America/Dawson'|'America/Dawson_Creek'|'America/Denver'|'America/Detroit'|'America/Dominica'|'America/Edmonton'|'America/Eirunepe'|'America/El_Salvador'|'America/Ensenada'|'America/Fort_Nelson'|'America/Fortaleza'|'America/Glace_Bay'|'America/Goose_Bay'|'America/Grand_Turk'|'America/Grenada'|'America/Guadeloupe'|'America/Guatemala'|'America/Guayaquil'|'America/Guyana'|'America/Halifax'|'America/Havana'|'America/Hermosillo'|'America/Indiana/Indianapolis'|'America/Indiana/Knox'|'America/Indiana/Marengo'|'America/Indiana/Petersburg'|'America/Indiana/Tell_City'|'America/Indiana/Vevay'|'America/Indiana/Vincennes'|'America/Indiana/Winamac'|'America/Inuvik'|'America/Iqaluit'|'America/Jamaica'|'America/Juneau'|'America/Kentucky/Louisville'|'America/Kentucky/Monticello'|'America/La_Paz'|'America/Lima'|'America/Los_Angeles'|'America/Maceio'|'America/Managua'|'America/Manaus'|'America/Martinique'|'America/Matamoros'|'America/Mazatlan'|'America/Menominee'|'America/Merida'|'America/Metlakatla'|'America/Mexico_City'|'America/Miquelon'|'America/Moncton'|'America/Monterrey'|'America/Montevideo'|'America/Montreal'|'America/Montserrat'|'America/Nassau'|'America/New_York'|'America/Nipigon'|'America/Nome'|'America/Noronha'|'America/North_Dakota/Beulah'|'America/North_Dakota/Center'|'America/North_Dakota/New_Salem'|'America/Nuuk'|'America/Ojinaga'|'America/Panama'|'America/Pangnirtung'|'America/Paramaribo'|'America/Phoenix'|'America/Port-au-Prince'|'America/Port_of_Spain'|'America/Porto_Velho'|'America/Puerto_Rico'|'America/Punta_Arenas'|'America/Rainy_River'|'America/Rankin_Inlet'|'America/Recife'|'America/Regina'|'America/Resolute'|'America/Rio_Branco'|'America/Rosario'|'America/Santarem'|'America/Santiago'|'America/Santo_Domingo'|'America/Sao_Paulo'|'America/Scoresbysund'|'America/Sitka'|'America/St_Johns'|'America/St_Kitts'|'America/St_Lucia'|'America/St_Thomas'|'America/St_Vincent'|'America/Swift_Current'|'America/Tegucigalpa'|'America/Thule'|'America/Thunder_Bay'|'America/Tijuana'|'America/Toronto'|'America/Tortola'|'America/Vancouver'|'America/Whitehorse'|'America/Winnipeg'|'America/Yakutat'|'America/Yellowknife'|'Antarctica/Casey'|'Antarctica/Davis'|'Antarctica/DumontDUrville'|'Antarctica/Macquarie'|'Antarctica/Mawson'|'Antarctica/McMurdo'|'Antarctica/Palmer'|'Antarctica/Rothera'|'Antarctica/Syowa'|'Antarctica/Troll'|'Antarctica/Vostok'|'Asia/Aden'|'Asia/Almaty'|'Asia/Amman'|'Asia/Anadyr'|'Asia/Aqtau'|'Asia/Aqtobe'|'Asia/Ashgabat'|'Asia/Atyrau'|'Asia/Baghdad'|'Asia/Bahrain'|'Asia/Baku'|'Asia/Bangkok'|'Asia/Barnaul'|'Asia/Beirut'|'Asia/Bishkek'|'Asia/Brunei'|'Asia/Chita'|'Asia/Choibalsan'|'Asia/Chongqing'|'Asia/Colombo'|'Asia/Damascus'|'Asia/Dhaka'|'Asia/Dili'|'Asia/Dubai'|'Asia/Dushanbe'|'Asia/Famagusta'|'Asia/Gaza'|'Asia/Hanoi'|'Asia/Harbin'|'Asia/Hebron'|'Asia/Ho_Chi_Minh'|'Asia/Hong_Kong'|'Asia/Hovd'|'Asia/Irkutsk'|'Asia/Jakarta'|'Asia/Jayapura'|'Asia/Jerusalem'|'Asia/Kabul'|'Asia/Kamchatka'|'Asia/Karachi'|'Asia/Kashgar'|'Asia/Kathmandu'|'Asia/Khandyga'|'Asia/Kolkata'|'Asia/Krasnoyarsk'|'Asia/Kuala_Lumpur'|'Asia/Kuching'|'Asia/Kuwait'|'Asia/Macau'|'Asia/Magadan'|'Asia/Makassar'|'Asia/Manila'|'Asia/Muscat'|'Asia/Nicosia'|'Asia/Novokuznetsk'|'Asia/Novosibirsk'|'Asia/Omsk'|'Asia/Oral'|'Asia/Phnom_Penh'|'Asia/Pontianak'|'Asia/Pyongyang'|'Asia/Qatar'|'Asia/Qostanay'|'Asia/Qyzylorda'|'Asia/Riyadh'|'Asia/Sakhalin'|'Asia/Samarkand'|'Asia/Seoul'|'Asia/Shanghai'|'Asia/Singapore'|'Asia/Srednekolymsk'|'Asia/Taipei'|'Asia/Tashkent'|'Asia/Tbilisi'|'Asia/Tehran'|'Asia/Tel_Aviv'|'Asia/Thimphu'|'Asia/Tokyo'|'Asia/Tomsk'|'Asia/Ulaanbaatar'|'Asia/Urumqi'|'Asia/Ust-Nera'|'Asia/Vientiane'|'Asia/Vladivostok'|'Asia/Yakutsk'|'Asia/Yangon'|'Asia/Yekaterinburg'|'Asia/Yerevan'|'Atlantic/Azores'|'Atlantic/Bermuda'|'Atlantic/Canary'|'Atlantic/Cape_Verde'|'Atlantic/Faroe'|'Atlantic/Jan_Mayen'|'Atlantic/Madeira'|'Atlantic/Reykjavik'|'Atlantic/South_Georgia'|'Atlantic/St_Helena'|'Atlantic/Stanley'|'Australia/Adelaide'|'Australia/Brisbane'|'Australia/Broken_Hill'|'Australia/Currie'|'Australia/Darwin'|'Australia/Eucla'|'Australia/Hobart'|'Australia/Lindeman'|'Australia/Lord_Howe'|'Australia/Melbourne'|'Australia/Perth'|'Australia/Sydney'|'CET'|'CST6CDT'|'EET'|'EST'|'EST5EDT'|'Etc/GMT'|'Etc/GMT+1'|'Etc/GMT+10'|'Etc/GMT+11'|'Etc/GMT+12'|'Etc/GMT+2'|'Etc/GMT+3'|'Etc/GMT+4'|'Etc/GMT+5'|'Etc/GMT+6'|'Etc/GMT+7'|'Etc/GMT+8'|'Etc/GMT+9'|'Etc/GMT-1'|'Etc/GMT-10'|'Etc/GMT-11'|'Etc/GMT-12'|'Etc/GMT-13'|'Etc/GMT-14'|'Etc/GMT-2'|'Etc/GMT-3'|'Etc/GMT-4'|'Etc/GMT-5'|'Etc/GMT-6'|'Etc/GMT-7'|'Etc/GMT-8'|'Etc/GMT-9'|'Etc/UTC'|'Europe/Amsterdam'|'Europe/Andorra'|'Europe/Astrakhan'|'Europe/Athens'|'Europe/Belfast'|'Europe/Belgrade'|'Europe/Berlin'|'Europe/Brussels'|'Europe/Bucharest'|'Europe/Budapest'|'Europe/Chisinau'|'Europe/Copenhagen'|'Europe/Dublin'|'Europe/Gibraltar'|'Europe/Guernsey'|'Europe/Helsinki'|'Europe/Isle_of_Man'|'Europe/Istanbul'|'Europe/Jersey'|'Europe/Kaliningrad'|'Europe/Kiev'|'Europe/Kirov'|'Europe/Lisbon'|'Europe/Ljubljana'|'Europe/London'|'Europe/Luxembourg'|'Europe/Madrid'|'Europe/Malta'|'Europe/Minsk'|'Europe/Monaco'|'Europe/Moscow'|'Europe/Oslo'|'Europe/Paris'|'Europe/Prague'|'Europe/Riga'|'Europe/Rome'|'Europe/Samara'|'Europe/Sarajevo'|'Europe/Saratov'|'Europe/Simferopol'|'Europe/Skopje'|'Europe/Sofia'|'Europe/Stockholm'|'Europe/Tallinn'|'Europe/Tirane'|'Europe/Tiraspol'|'Europe/Ulyanovsk'|'Europe/Uzhgorod'|'Europe/Vaduz'|'Europe/Vienna'|'Europe/Vilnius'|'Europe/Volgograd'|'Europe/Warsaw'|'Europe/Zagreb'|'Europe/Zaporozhye'|'Europe/Zurich'|'Factory'|'HST'|'Indian/Antananarivo'|'Indian/Chagos'|'Indian/Christmas'|'Indian/Cocos'|'Indian/Comoro'|'Indian/Kerguelen'|'Indian/Mahe'|'Indian/Maldives'|'Indian/Mauritius'|'Indian/Mayotte'|'Indian/Reunion'|'MET'|'MST'|'MST7MDT'|'PST8PDT'|'Pacific/Apia'|'Pacific/Auckland'|'Pacific/Bougainville'|'Pacific/Chatham'|'Pacific/Chuuk'|'Pacific/Easter'|'Pacific/Efate'|'Pacific/Enderbury'|'Pacific/Fakaofo'|'Pacific/Fiji'|'Pacific/Funafuti'|'Pacific/Galapagos'|'Pacific/Gambier'|'Pacific/Guadalcanal'|'Pacific/Guam'|'Pacific/Honolulu'|'Pacific/Johnston'|'Pacific/Kiritimati'|'Pacific/Kosrae'|'Pacific/Kwajalein'|'Pacific/Majuro'|'Pacific/Marquesas'|'Pacific/Midway'|'Pacific/Nauru'|'Pacific/Niue'|'Pacific/Norfolk'|'Pacific/Noumea'|'Pacific/Pago_Pago'|'Pacific/Palau'|'Pacific/Pitcairn'|'Pacific/Pohnpei'|'Pacific/Port_Moresby'|'Pacific/Rarotonga'|'Pacific/Saipan'|'Pacific/Tahiti'|'Pacific/Tarawa'|'Pacific/Tongatapu'|'Pacific/Wake'|'Pacific/Wallis'|'WET') | undefined;
  /**
   * Information about weekly recurring appointments.
   */
  weeklyTemplate?: AppointmentRecurrenceTemplateWeeklyTemplate | undefined;
  /**
   * Information about yearly recurring appointments.
   */
  yearlyTemplate?: AppointmentRecurrenceTemplateYearlyTemplate | undefined;
}
export interface Appointment extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Appointment';
  /**
   * The set of accounts that is expected to be used for billing the activities that result from this Appointment.
   * The specified account(s) could be those identified during pre-registration workflows in preparation for an upcoming Encounter.
   */
  account?: Reference[] | undefined;
  /**
   * The style of appointment or patient that has been booked in the slot (not service type).
   */
  appointmentType?: CodeableConcept | undefined;
  /**
   * The request this appointment is allocated to assess (e.g. incoming referral or procedure request).
   */
  basedOn?: Reference[] | undefined;
  /**
   * The date/time describing when the appointment was cancelled.
   * If the appointment was cancelled multiple times, this would reflect the most recent cancellation.
   */
  cancellationDate?: string | undefined;
  _cancellationDate?: Element | undefined;
  /**
   * The coded reason for the appointment being cancelled. This is often used in reporting/billing/futher processing to determine if further actions are required, or specific fees apply.
   */
  cancellationReason?: CodeableConcept | undefined;
  /**
   * Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
   */
  class?: CodeableConcept[] | undefined;
  /**
   * The date that this appointment was initially created. This could be different to the meta.lastModified value on the initial entry, as this could have been before the resource was created on the FHIR server, and should remain unchanged over the lifespan of the appointment.
   * This property is required for many use cases where the age of an appointment is considered in processing workflows for scheduling and billing of appointments.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the note field.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Date/Time that the appointment is to conclude.
   * If actual start/end times are not known then the requested period start/end can be used.
   */
  end?: string | undefined;
  _end?: Element | undefined;
  /**
   * This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Number of minutes that the appointment is to take. This can be less than the duration between the start and end times.  For example, where the actual time of appointment is only an estimate or if a 30 minute appointment is being requested, but any time would work.  Also, if there is, for example, a planned 15 minute break in the middle of a long appointment, the duration may be 15 minutes less than the difference between the start and end.
   */
  minutesDuration?: number | undefined;
  /**
   * Additional notes/comments about the appointment.
   * Additional text to aid in facilitating the appointment. For instance, a note might be, "patient should proceed immediately to infusion room upon arrival"
   * Where this is a planned appointment and the start/end dates are not set then this field can be used to provide additional guidance on the details of the appointment request, including any restrictions on when to book it.
   * Typically only the concept.text will be used, however occasionally a reference to some generic documentation (or specific) and also supports coded instructions if/when they are required.
   */
  note?: Annotation[] | undefined;
  /**
   * This appointment varies from the recurring pattern.
   * For example, if a patient has physical therapy appointments every Tuesday and Thursday, but due to a national holiday, a single occurrence was rescheduled to a different day, while the rest of the recurring series remained on Tuesday / Thursday.
   */
  occurrenceChanged?: boolean | undefined;
  _occurrenceChanged?: Element | undefined;
  /**
   * The originating appointment in a recurring set of related appointments.
   * This property is intended for use when representing a recurring set of related appointments.
   * For example, a patient undergoing physical therapy may have a recurring appointment every Tuesday and Thursday.  Each occurrence of the set will refer to the originating appointment, which contains the recurring template information.  For representing appointment series, see the guidance on recurring vs. series appointments.
   */
  originatingAppointment?: Reference | undefined;
  /**
   * List of participants involved in the appointment.
   */
  participant: AppointmentParticipant[];
  /**
   * While Appointment.note contains information for internal use, Appointment.patientInstructions is used to capture patient facing information about the Appointment (e.g. please bring your referral or fast from 8pm night before).
   */
  patientInstruction?: CodeableReference[] | undefined;
  /**
   * The previous appointment in a series of related appointments.
   * This property is intended for use when representing a series of related appointments.  For example, in a nuclear medicine procedure, where there is an appointment for the injection of the isotopes, and then a subsequent appointment for the scan, the scan appointment would refer to the injection appointment via Appointment.previousAppointment.  For representing recurring appointments, see the guidance on recurring vs. series appointments.
   */
  previousAppointment?: Reference | undefined;
  /**
   * The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).
   * Seeking implementer feedback on this property and how interoperable it is.
   * Using an extension to record a CodeableConcept for named values may be tested at a future connectathon.
   */
  priority?: CodeableConcept | undefined;
  /**
   * The reason that this appointment is being scheduled. This is more clinical than administrative. This can be coded, or as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * The sequence number that identifies a specific appointment in a recurring pattern.
   */
  recurrenceId?: number | undefined;
  /**
   * The details of the recurrence pattern or template that is used to generate recurring appointments.
   */
  recurrenceTemplate?: AppointmentRecurrenceTemplate[] | undefined;
  /**
   * Appointment replaced by this Appointment in cases where there is a cancellation, the details of the cancellation can be found in the cancellationReason property (on the referenced resource).
   */
  replaces?: Reference[] | undefined;
  /**
   * A set of date ranges (potentially including times) that the appointment is preferred to be scheduled within.
   * The duration (usually in minutes) could also be provided to indicate the length of the appointment to fill and populate the start/end times for the actual allocated time. However, in other situations the duration may be calculated by the scheduling system.
   * This does not introduce a capacity for recurring appointments.
   */
  requestedPeriod?: Period[] | undefined;
  /**
   * A broad categorization of the service that is to be performed during this appointment.
   */
  serviceCategory?: CodeableConcept[] | undefined;
  /**
   * The specific service that is to be performed during this appointment.
   * For a provider to provider appointment the code "FOLLOWUP" may be appropriate, as this is expected to be discussing some patient that was seen in the past.
   */
  serviceType?: CodeableReference[] | undefined;
  /**
   * The slots from the participants' schedules that will be filled by the appointment.
   */
  slot?: Reference[] | undefined;
  /**
   * The specialty of a practitioner that would be required to perform the service requested in this appointment.
   */
  specialty?: CodeableConcept[] | undefined;
  /**
   * Date/Time that the appointment is to take place.
   * If actual start/end times are not known then the requested period start/end can be used.
   */
  start?: string | undefined;
  _start?: Element | undefined;
  /**
   * The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
   * If the Appointment's status is "cancelled" then all participants are expected to have their calendars released for the appointment period, and as such any Slots that were marked as BUSY can be re-set to FREE.
   * This element is labeled as a modifier because the status contains the code entered-in-error that mark the Appointment as not currently valid.
   */
  status: ('proposed'|'pending'|'booked'|'arrived'|'fulfilled'|'cancelled'|'noshow'|'entered-in-error'|'checked-in'|'waitlist');
  _status?: Element | undefined;
  /**
   * The patient or group associated with the appointment, if they are to be present (usually) then they should also be included in the participant backbone element.
   */
  subject?: Reference | undefined;
  /**
   * Additional information to support the appointment provided when making the appointment.
   */
  supportingInformation?: Reference[] | undefined;
  /**
   * Connection details of a virtual service (e.g. conference call).
   * There are two types of virtual meetings that often exist:
   * * a persistent, virtual meeting room that can only be used for a single purpose at a time, 
   * * and a dynamic virtual meeting room that is generated on demand for a specific purpose.
   * Implementers may consider using Location.virtualService for persistent meeting rooms.
   * If each participant would have a different meeting link, an extension using the VirtualServiceContactDetail  can be applied to the Appointment.participant BackboneElement.
   */
  virtualService?: VirtualServiceDetail[] | undefined;
}
export interface AppointmentResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AppointmentResponse';
  /**
   * A Person, Location, HealthcareService, or Device that is participating in the appointment.
   */
  actor?: Reference | undefined;
  /**
   * Appointment that this response is replying to.
   */
  appointment: Reference;
  /**
   * Additional comments about the appointment.
   * This comment is particularly important when the responder is declining, tentatively accepting or requesting another time to indicate the reasons why.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
   */
  end?: string | undefined;
  _end?: Element | undefined;
  /**
   * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The original date within a recurring request. This could be used in place of the recurrenceId to be more direct (or where the template is provided through the simple list of dates in `Appointment.occurrenceDate`).
   */
  occurrenceDate?: string | undefined;
  _occurrenceDate?: Element | undefined;
  /**
   * Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
   */
  participantStatus: ('accepted'|'declined'|'tentative'|'needs-action'|'entered-in-error');
  _participantStatus?: Element | undefined;
  /**
   * Role of participant in the appointment.
   * The role of the participant can be used to declare what the actor will be doing in the scope of the referenced appointment.
   * If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
   * This value SHALL be the same as specified on the referenced Appointment so that they can be matched, and subsequently updated.
   */
  participantType?: CodeableConcept[] | undefined;
  /**
   * Indicates that the response is proposing a different time that was initially requested.  The new proposed time will be indicated in the start and end properties.
   */
  proposedNewTime?: boolean | undefined;
  _proposedNewTime?: Element | undefined;
  /**
   * The recurrence ID (sequence number) of the specific appointment when responding to a recurring request.
   * If the recurrence template was defined using the list of occurrenceDates then this property might not be used.
   */
  recurrenceId?: number | undefined;
  /**
   * Indicates that this AppointmentResponse applies to all occurrences in a recurring request.
   * When a recurring appointment is requested, the participant may choose to respond to each individual occurrence, in which case AppointmentResponse.recurring should be false.  If the participant chooses to respond the same way for all occurrences, they may instead use a single AppointmentResponse with recurring set to true.  These may be combined as the participant chooses.  For example, they may accept all occurrences (recurring = true), but then send a decline for a specific occurrence (recurring=false).
   */
  recurring?: boolean | undefined;
  _recurring?: Element | undefined;
  /**
   * Date/Time that the appointment is to take place, or requested new start time.
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the start time.
   */
  start?: string | undefined;
  _start?: Element | undefined;
}
/**
 * Comment, classifier, or rating content
 */
export interface ArtifactAssessmentContent extends BackboneElement {
  /**
   * Indicates who or what authored the content.
   */
  author?: Reference | undefined;
  /**
   * Represents a rating, classifier, or assessment of the artifact.
   */
  classifier?: CodeableConcept[] | undefined;
  /**
   * If the informationType is container, the components of the content.
   */
  component?: ArtifactAssessmentContent[] | undefined;
  /**
   * Acceptable to publicly share the comment, classifier or rating.
   */
  freeToShare?: boolean | undefined;
  _freeToShare?: Element | undefined;
  /**
   * The type of information this component of the content represents.
   */
  informationType?: ('comment'|'classifier'|'rating'|'container'|'response'|'change-request') | undefined;
  _informationType?: Element | undefined;
  /**
   * A URI that points to what the comment is about, such as a line of text in the CQL, or a specific element in a resource.
   * The target element is used to point the comment to aspect of the artifact, such as a text range within a CQL library (e.g. #content?0:0-120:80).
   */
  path?: string[] | undefined;
  _path?: Element[] | undefined;
  /**
   * A quantitative rating of the artifact.
   */
  quantity?: Quantity | undefined;
  /**
   * Additional related artifacts that provide supporting documentation, additional evidence, or further information related to the content.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * A brief summary of the content of this component.
   */
  summary?: string | undefined;
  _summary?: Element | undefined;
  /**
   * Indicates what type of content this component represents.
   */
  type?: CodeableConcept | undefined;
}
export interface ArtifactAssessment extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ArtifactAssessment';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * A reference to a resource, canonical resource, or non-FHIR resource which the comment or assessment is about.
   */
  artifactstring?: string | undefined;
  _artifactstring?: Element | undefined;
  /**
   * A reference to a resource, canonical resource, or non-FHIR resource which the comment or assessment is about.
   */
  artifactReference?: Reference | undefined;
  /**
   * Display of or reference to the bibliographic citation of the comment, classifier, or rating.
   */
  citeAsstring?: string | undefined;
  _citeAsstring?: Element | undefined;
  /**
   * Display of or reference to the bibliographic citation of the comment, classifier, or rating.
   */
  citeAsReference?: Reference | undefined;
  /**
   * A component comment, classifier, or rating of the artifact.
   */
  content?: ArtifactAssessmentContent[] | undefined;
  /**
   * A copyright statement relating to the artifact assessment and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the artifact assessment.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the artifact assessment was published. The date must change when the disposition changes and it must change if the workflow status code changes. In addition, it should change when the substantive content of the artifact assessment changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the artifact assessment. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Indicates the disposition of the responsible party to the comment or change request.
   */
  disposition?: ('unresolved'|'not-persuasive'|'persuasive'|'persuasive-with-modification'|'not-persuasive-with-modification') | undefined;
  _disposition?: Element | undefined;
  /**
   * A formal identifier that is used to identify this artifact assessment when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this activity definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A short title for the assessment for use in displaying and selecting.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Indicates the workflow status of the comment or change request.
   */
  workflowStatus?: ('submitted'|'triaged'|'waiting-for-input'|'resolved-no-change'|'resolved-change-required'|'deferred'|'duplicate'|'applied'|'published'|'entered-in-error') | undefined;
  _workflowStatus?: Element | undefined;
}
/**
 * Actor involved in the event
 * Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
 * For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity. 
 * When a network are used in an event being recorded, there should be distinct agent elements for the known actors using the network. The agent with a network detail would be the responsible agent for use of that network.
 */
export interface AuditEventAgent extends BackboneElement {
  /**
   * The authorization (e.g., PurposeOfUse) that was used during the event being recorded.
   * Use AuditEvent.agent.authorization when you know that is specific to the agent, otherwise use AuditEvent.authorization. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
   */
  authorization?: CodeableConcept[] | undefined;
  /**
   * Where the agent location is known, the agent location when the event occurred.
   */
  location?: Reference | undefined;
  /**
   * When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details.
   * When remote network endpoint is known, another agent representing the remote agent would indicate the remote network endpoint used. Convention is to indicate data flowing from Source to Destination. The convention for Search, given data flows both ways (query parameters vs results), is to have the Source as the initiator of the Search Transaction, and the Destination the responder to the Search transaction.
   */
  networkReference?: Reference | undefined;
  /**
   * When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details.
   * When remote network endpoint is known, another agent representing the remote agent would indicate the remote network endpoint used. Convention is to indicate data flowing from Source to Destination. The convention for Search, given data flows both ways (query parameters vs results), is to have the Source as the initiator of the Search Transaction, and the Destination the responder to the Search transaction.
   */
  networkstring?: string | undefined;
  _networkstring?: Element | undefined;
  /**
   * Where the policy(ies) are known that authorized the agent participation in the event. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.
   * For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
   */
  policy?: string[] | undefined;
  _policy?: Element[] | undefined;
  /**
   * Indicator that the user is or is not the requestor, or initiator, for the event being audited.
   * There can only be one initiator. If the initiator is not clear, then do not choose any one agent as the initiator.
   */
  requestor?: boolean | undefined;
  _requestor?: Element | undefined;
  /**
   * The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.
   * For example: Chief-of-Radiology, Nurse, Physician, Medical-Student, etc.
   */
  role?: CodeableConcept[] | undefined;
  /**
   * The Functional Role of the user when performing the event.
   * For example: assembler, author, prescriber, signer, investigator, etc.
   */
  type?: CodeableConcept | undefined;
  /**
   * Reference to who this agent is that was involved in the event.
   * Where a User ID is available it will go into who.identifier. Where a name of the user (human readable) it will go into who.display.
   */
  who: Reference;
}
/**
 * Additional Information about the entity
 */
export interface AuditEventEntityDetail extends BackboneElement {
  /**
   * The type of extra detail provided in the value.
   */
  type: CodeableConcept;
  /**
   * The  value of the extra detail.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The  value of the extra detail.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The  value of the extra detail.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The  value of the extra detail.
   */
  valuenumber?: number | undefined;
  /**
   * The  value of the extra detail.
   */
  valuePeriod?: Period | undefined;
  /**
   * The  value of the extra detail.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The  value of the extra detail.
   */
  valueRange?: Range | undefined;
  /**
   * The  value of the extra detail.
   */
  valueRatio?: Ratio | undefined;
}
/**
 * Data or objects used
 * Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
 */
export interface AuditEventEntity extends BackboneElement {
  /**
   * The entity is attributed to an agent to express the agent's responsibility for that entity in the activity. This is most used to indicate when persistence media (the entity) are used by an agent. For example when importing data from a device, the device would be described in an entity, and the user importing data from that media would be indicated as the entity.agent.
   * A usecase where one AuditEvent.entity.agent is used where the Entity that was used in the creation/updating of a target resource, is not in the context of the same custodianship as the target resource, and thus the meaning of AuditEvent.entity.agent is to say that the entity referenced is managed elsewhere and that this Agent provided access to it.  This would be similar to where the Entity being referenced is managed outside FHIR, such as through HL7 V2, v3, or XDS. This might be where the Entity being referenced is managed in another FHIR resource server. Thus it explains the provenance of that Entity's use in the context of this AuditEvent activity.
   */
  agent?: AuditEventAgent[] | undefined;
  /**
   * Tagged value pairs for conveying additional information about the entity.
   */
  detail?: AuditEventEntityDetail[] | undefined;
  /**
   * The query parameters for a query-type entities.
   * The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example, if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.
   * The DICOM AuditMessage schema does not support both .name and .query being populated.
   */
  query?: string | undefined;
  _query?: Element | undefined;
  /**
   * Code representing the role the entity played in the event being audited.
   */
  role?: CodeableConcept | undefined;
  /**
   * Security labels for the identified entity.
   * Copied from entity meta security tags.
   */
  securityLabel?: CodeableConcept[] | undefined;
  /**
   * Identifies a specific instance of the entity. The reference should be version specific. This is allowed to be a Parameters resource.
   * Use .what.display when all you have is a string (e.g. ParticipantObjectName).
   */
  what?: Reference | undefined;
}
/**
 * Whether the event succeeded or failed
 * In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
 */
export interface AuditEventOutcome extends BackboneElement {
  /**
   * Indicates whether the event succeeded or failed.
   * In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
   */
  code: Coding;
  /**
   * Additional details about the error. This may be a text description of the error or a system code that identifies the error.
   * A human readable description of the error issue SHOULD be placed in details.text.
   */
  detail?: CodeableConcept[] | undefined;
}
/**
 * Audit Event Reporter
 * Events are reported by the actor that detected them. This may be one of the participating actors, but may also be different. The actor may be a human such as a medical-records clerk disclosing data manually, that clerk would be the source for the record of disclosure.
 */
export interface AuditEventSource extends BackboneElement {
  /**
   * Identifier of the source where the event was detected.
   */
  observer: Reference;
  /**
   * Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.
   */
  site?: Reference | undefined;
  /**
   * Code specifying the type of source where event originated.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Based on IHE-ATNA.
 */
export interface AuditEvent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AuditEvent';
  /**
   * Indicator for type of action performed during the event that generated the audit.
   */
  action?: ('C'|'R'|'U'|'D'|'E') | undefined;
  _action?: Element | undefined;
  /**
   * An actor taking an active role in the event or activity that is logged.
   * Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
   * For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity. 
   * When a network are used in an event being recorded, there should be distinct agent elements for the known actors using the network. The agent with a network detail would be the responsible agent for use of that network.
   */
  agent: AuditEventAgent[];
  /**
   * The authorization (e.g., PurposeOfUse) that was used during the event being recorded.
   * Use AuditEvent.agent.authorization when you know that it is specific to the agent, otherwise use AuditEvent.authorization. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
   */
  authorization?: CodeableConcept[] | undefined;
  /**
   * Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Classification of the type of event.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Describes what happened. The most specific code for the event.
   */
  code: CodeableConcept;
  /**
   * This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).
   */
  encounter?: Reference | undefined;
  /**
   * Specific instances of data or objects that have been accessed.
   * Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
   */
  entity?: AuditEventEntity[] | undefined;
  /**
   * The time or period during which the activity occurred.
   * The time or period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
   */
  occurredstring?: string | undefined;
  _occurredstring?: Element | undefined;
  /**
   * The time or period during which the activity occurred.
   * The time or period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
   */
  occurredPeriod?: Period | undefined;
  /**
   * Indicates whether the event succeeded or failed. A free text descripiton can be given in outcome.text.
   * In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
   */
  outcome?: AuditEventOutcome | undefined;
  /**
   * The patient element is available to enable deterministic tracking of activities that involve the patient as the subject of the data used in an activity.
   */
  patient?: Reference | undefined;
  /**
   * The time when the event was recorded.
   * In a distributed system, some sort of common time base (e.g. an NTP [RFC1305] server) is a good implementation tactic.
   */
  recorded: string;
  _recorded?: Element | undefined;
  /**
   * Indicates and enables segmentation of various severity including debugging from critical.
   * ATNA will map this to the SYSLOG PRI element.
   */
  severity?: ('emergency'|'alert'|'critical'|'error'|'warning'|'notice'|'informational'|'debug') | undefined;
  _severity?: Element | undefined;
  /**
   * The actor that is reporting the event.
   * Events are reported by the actor that detected them. This may be one of the participating actors, but may also be different. The actor may be a human such as a medical-records clerk disclosing data manually, that clerk would be the source for the record of disclosure.
   */
  source: AuditEventSource;
}
export interface Basic extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Basic';
  /**
   * Indicates who was responsible for creating the resource instance.
   */
  author?: Reference | undefined;
  /**
   * Identifies the 'type' of resource - equivalent to the resource name for other resources.
   * Because resource references will only be able to indicate 'Basic', the type of reference will need to be specified in a Profile identified as part of the resource.  Refer to the resource notes section for information on appropriate terminologies for this code.
   * This element is labeled as a modifier because it defines the meaning of the resource and cannot be ignored.
   */
  code: CodeableConcept;
  /**
   * Identifies when the resource was first created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * Identifier assigned to the resource for business purposes, outside the context of FHIR.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource.
   * Optional as not all potential resources will have subjects.  Resources associated with multiple subjects can handle this via extension.
   */
  subject?: Reference | undefined;
}
/**
 * Typically, Binary resources are used for handling content such as:  
 * * CDA Documents (i.e. with XDS) 
 * * PDF Documents 
 * * Images.
 */
export interface Binary extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Binary';
  /**
   * MimeType of the binary content represented as a standard MimeType (BCP 13).
   */
  contentType: string;
  _contentType?: Element | undefined;
  /**
   * The actual content, base64 encoded.
   * If the content type is itself base64 encoding, then this will be base64 encoded twice - what is created by un-base64ing the content must be the specified content type.
   */
  data?: string | undefined;
  _data?: Element | undefined;
  /**
   * This element identifies another resource that can be used as a proxy of the security sensitivity to use when deciding and enforcing access control rules for the Binary resource. Given that the Binary resource contains very few elements that can be used to determine the sensitivity of the data and relationships to individuals, the referenced resource stands in as a proxy equivalent for this purpose. This referenced resource may be related to the Binary (e.g. DocumentReference), or may be some non-related Resource purely as a security proxy. E.g. to identify that the binary resource relates to a patient, and access should only be granted to applications that have access to the patient.
   * Very often, a server will also know of a resource that references the binary, and can automatically apply the appropriate access rules based on that reference. However, there are some circumstances where this is not appropriate, e.g. the binary is uploaded directly to the server without any linking resource, the binary is referred to from multiple different resources, and/or the binary is content such as an application logo that has less protection than any of the resources that reference it.
   */
  securityContext?: Reference | undefined;
}
/**
 * How this product was collected
 */
export interface BiologicallyDerivedProductCollection extends BackboneElement {
  /**
   * Time of product collection.
   */
  collectedstring?: string | undefined;
  _collectedstring?: Element | undefined;
  /**
   * Time of product collection.
   */
  collectedPeriod?: Period | undefined;
  /**
   * Healthcare professional who is performing the collection.
   */
  collector?: Reference | undefined;
  /**
   * The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.
   */
  source?: Reference | undefined;
}
/**
 * A property that is specific to this BiologicallyDerviedProduct instance
 * Property can be used to provide information on a wide range of additional information specific to a particular biologicallyDerivedProduct.
 */
export interface BiologicallyDerivedProductProperty extends BackboneElement {
  /**
   * Code that specifies the property. It should reference an established coding system.
   * The element is identified by name and system URI in the type. Some types may have multiple occurrences.
   */
  type: CodeableConcept;
  /**
   * Property values.
   * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * Property values.
   * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * Property values.
   * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * Property values.
   * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
   */
  valuenumber?: number | undefined;
  /**
   * Property values.
   * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
   */
  valuePeriod?: Period | undefined;
  /**
   * Property values.
   * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Property values.
   * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
   */
  valueRange?: Range | undefined;
  /**
   * Property values.
   * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
   */
  valueRatio?: Ratio | undefined;
  /**
   * Property values.
   * The value should be provided as a boolean, integer, CodeableConcept, period, quantity, range, ratio, or attachment. The description can be a string only when these others are not available. The type of value will depend on the property type and is specified in ST-027.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
}
/**
 * Substances include, but are not limited to: whole blood, bone marrow, organs, and manipulated blood cells.
 */
export interface BiologicallyDerivedProduct extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'BiologicallyDerivedProduct';
  /**
   * An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.
   * Necessary to support mandatory requirements for traceability from donor/source to recipient and vice versa, while also satisfying donor anonymity requirements. The element is defined consistently across BiologicallyDerivedProduct, NutritionProduct, and Device.  The identifier references an event that links to a single biological entity such as a blood donor, or to multiple biological entities (e.g. when the product is an embryo or a pooled platelet product).  A single biologicalSourceEvent identifier may appear on multiple products of many types derived from a single donation event or source extraction.  As an example, a single donation event may provide 2 kidneys and a liver for organ transplantation, 2 corneas for eye surgery, heart valves and arterial tissue for cardiovascular surgery, multiple skin grafts, tendons, multiple shaped bone grafts and a large number of bone putty/paste products; and each of them may be assigned to the same biological source event identifier.
   */
  biologicalSourceEvent?: Identifier | undefined;
  /**
   * How this product was collected.
   */
  collection?: BiologicallyDerivedProductCollection | undefined;
  /**
   * A unique identifier for an aliquot of a product.  Used to distinguish individual aliquots of a product carrying the same biologicalSource and productCode identifiers.
   */
  division?: string | undefined;
  _division?: Element | undefined;
  /**
   * Date, and where relevant time, of expiration.
   */
  expirationDate?: string | undefined;
  _expirationDate?: Element | undefined;
  /**
   * Unique instance identifiers assigned to a biologically derived product. Note: This is a business identifier, not a resource identifier.
   * This identifier should uniquely identify the product instance in the business domain.  Ideally it should be a globally unique identifier under the control of an ISO/IEC 15459 Issuing Agency.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Parent product (if any) for this biologically-derived product.
   * For products that have multiple collections. For example Peripheral Blood Stem Cells may be collected over several days from a single donor and the donation split into in multiple containers which must be linked to the parent donation.
   */
  parent?: Reference[] | undefined;
  /**
   * Processing facilities responsible for the labeling and distribution of this biologically derived product.
   */
  processingFacility?: Reference[] | undefined;
  /**
   * Broad category of this product.
   */
  productCategory?: Coding | undefined;
  /**
   * A codified value that systematically supports characterization and classification of medical products of human origin inclusive of processing conditions such as additives, volumes and handling conditions.
   */
  productCode?: CodeableConcept | undefined;
  /**
   * Whether the product is currently available.
   */
  productStatus?: Coding | undefined;
  /**
   * A property that is specific to this BiologicallyDerviedProduct instance.
   * Property can be used to provide information on a wide range of additional information specific to a particular biologicallyDerivedProduct.
   */
  property?: BiologicallyDerivedProductProperty[] | undefined;
  /**
   * Request to obtain and/or infuse this biologically derived product.
   */
  request?: Reference[] | undefined;
  /**
   * The temperature requirements for storage of the biologically-derived product.
   * May be extracted from information held in the Product Description Code.
   */
  storageTempRequirements?: Range | undefined;
}
/**
 * Indicates who or what performed an action
 */
export interface BiologicallyDerivedProductDispensePerformer extends BackboneElement {
  /**
   * Identifies the person responsible for the action.
   */
  actor: Reference;
  /**
   * Identifies the function of the performer during the dispense.
   */
  function?: CodeableConcept | undefined;
}
export interface BiologicallyDerivedProductDispense extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'BiologicallyDerivedProductDispense';
  /**
   * The order or request that the dispense is fulfilling. This is a reference to a ServiceRequest resource.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Link to a resource identifying the physical location that the product was dispatched to.
   */
  destination?: Reference | undefined;
  /**
   * Unique instance identifiers assigned to a biologically derived product dispense. Note: This is a business identifier, not a resource identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The physical location where the dispense was performed.
   */
  location?: Reference | undefined;
  /**
   * Indicates the type of matching associated with the dispense.
   */
  matchStatus?: CodeableConcept | undefined;
  /**
   * Additional notes.
   */
  note?: Annotation[] | undefined;
  /**
   * Indicates the relationship between the donor of the biologically derived product and the intended recipient.
   */
  originRelationshipType?: CodeableConcept | undefined;
  /**
   * A larger event of which this particular event is a component.
   */
  partOf?: Reference[] | undefined;
  /**
   * A link to a resource representing the patient that the product is dispensed for.
   */
  patient: Reference;
  /**
   * Indicates who or what performed an action.
   */
  performer?: BiologicallyDerivedProductDispensePerformer[] | undefined;
  /**
   * When the product was selected/ matched.
   */
  preparedDate?: string | undefined;
  _preparedDate?: Element | undefined;
  /**
   * A link to a resource identifying the biologically derived product that is being dispensed.
   */
  product: Reference;
  /**
   * The amount of product in the dispense. Quantity will depend on the product being dispensed. Examples are: volume; cell count; concentration.
   */
  quantity?: Quantity | undefined;
  /**
   * A code specifying the state of the dispense event.
   */
  status: ('preparation'|'in-progress'|'allocated'|'issued'|'unfulfilled'|'returned'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * Specific instructions for use.
   */
  usageInstruction?: string | undefined;
  _usageInstruction?: Element | undefined;
  /**
   * When the product was dispatched for clinical use.
   */
  whenHandedOver?: string | undefined;
  _whenHandedOver?: Element | undefined;
}
/**
 * Landmark relative location
 */
export interface BodyStructureIncludedStructureBodyLandmarkOrientationDistanceFromLandmark extends BackboneElement {
  /**
   * An instrument, tool, analyzer, etc. used in the measurement.
   */
  device?: CodeableReference[] | undefined;
  /**
   * The measured distance (e.g., in cm) from a body landmark.
   */
  value?: Quantity[] | undefined;
}
/**
 * Landmark relative location
 */
export interface BodyStructureIncludedStructureBodyLandmarkOrientation extends BackboneElement {
  /**
   * An description of the direction away from a landmark something is located based on a radial clock dial.
   */
  clockFacePosition?: CodeableConcept[] | undefined;
  /**
   * The distance in centimeters a certain observation is made from a body landmark.
   */
  distanceFromLandmark?: BodyStructureIncludedStructureBodyLandmarkOrientationDistanceFromLandmark[] | undefined;
  /**
   * A description of a landmark on the body used as a reference to locate something else.
   */
  landmarkDescription?: CodeableConcept[] | undefined;
  /**
   * The surface area a body location is in relation to a landmark.
   */
  surfaceOrientation?: CodeableConcept[] | undefined;
}
/**
 * Included anatomic location(s)
 */
export interface BodyStructureIncludedStructure extends BackboneElement {
  /**
   * Body locations in relation to a specific body landmark (tatoo, scar, other body structure).
   */
  bodyLandmarkOrientation?: BodyStructureIncludedStructureBodyLandmarkOrientation[] | undefined;
  /**
   * Code that represents the included structure laterality.
   */
  laterality?: CodeableConcept | undefined;
  /**
   * Code that represents the included structure qualifier.
   */
  qualifier?: CodeableConcept[] | undefined;
  /**
   * XY or XYZ-coordinate orientation for structure.
   */
  spatialReference?: Reference[] | undefined;
  /**
   * Code that represents the included structure.
   */
  structure: CodeableConcept;
}
export interface BodyStructure extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'BodyStructure';
  /**
   * Whether this body site is in active use.
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * A summary, characterization or explanation of the body structure.
   * This description could include any visual markings used to orientate the viewer e.g. external reference points, special sutures, ink markings.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The anatomical location(s) or region(s) not occupied or represented by the specimen, lesion, or body structure.
   */
  excludedStructure?: BodyStructureIncludedStructure[] | undefined;
  /**
   * Identifier for this instance of the anatomical structure.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Image or images used to identify a location.
   */
  image?: Attachment[] | undefined;
  /**
   * The anatomical location(s) or region(s) of the specimen, lesion, or body structure.
   */
  includedStructure: BodyStructureIncludedStructure[];
  /**
   * The kind of structure being represented by the body structure at `BodyStructure.location`.  This can define both normal and abnormal morphologies.
   * The minimum cardinality of 0 supports the use case of specifying a location without defining a morphology.
   */
  morphology?: CodeableConcept | undefined;
  /**
   * The person to which the body site belongs.
   */
  patient: Reference;
}
/**
 * Additional execution information (transaction/batch/history)
 */
export interface BundleEntryRequest extends BackboneElement {
  /**
   * Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency).
   */
  ifMatch?: string | undefined;
  _ifMatch?: Element | undefined;
  /**
   * Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread).
   */
  ifModifiedSince?: string | undefined;
  _ifModifiedSince?: Element | undefined;
  /**
   * Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL - what follows the "?" (not including the "?").
   */
  ifNoneExist?: string | undefined;
  _ifNoneExist?: Element | undefined;
  /**
   * If the ETag values match, return a 304 Not Modified status. See the API documentation for ["Conditional Read"](http.html#cread).
   */
  ifNoneMatch?: string | undefined;
  _ifNoneMatch?: Element | undefined;
  /**
   * In a transaction or batch, this is the HTTP action to be executed for this entry. In a history bundle, this indicates the HTTP action that occurred.
   */
  method: ('GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'PATCH');
  _method?: Element | undefined;
  /**
   * The URL for this entry, relative to the root (the address to which the request is posted).
   * E.g. for a Patient Create, the method would be "POST" and the URL would be "Patient". For a Patient Update, the method would be PUT and the URL would be "Patient/[id]".
   */
  url: string;
  _url?: Element | undefined;
}
/**
 * Results of execution (transaction/batch/history)
 */
export interface BundleEntryResponse extends BackboneElement {
  /**
   * The Etag for the resource, if the operation for the entry produced a versioned resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource Contention](http.html#concurrency)).
   * Etags match the Resource.meta.versionId. The ETag has to match the version id in the header if a resource is included.
   */
  etag?: string | undefined;
  _etag?: Element | undefined;
  /**
   * The date/time that the resource was modified on the server.
   * This has to match the same time in the meta header (meta.lastUpdated) if a resource is included.
   */
  lastModified?: string | undefined;
  _lastModified?: Element | undefined;
  /**
   * The location header created by processing this operation, populated if the operation returns a location.
   */
  location?: string | undefined;
  _location?: Element | undefined;
  /**
   * An OperationOutcome containing hints and warnings produced as part of processing this entry in a batch or transaction.
   * For a POST/PUT operation, this is the equivalent outcome that would be returned for prefer = operationoutcome - except that the resource is always returned whether or not the outcome is returned.
   * This outcome is not used for error responses in batch/transaction, only for hints and warnings. In a batch operation, the error will be in Bundle.entry.response, and for transaction, there will be a single OperationOutcome instead of a bundle in the case of an error.
   */
  outcome?: FhirResource | undefined;
  /**
   * The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code.
   */
  status: string;
  _status?: Element | undefined;
}
/**
 * Search related information
 */
export interface BundleEntrySearch extends BackboneElement {
  /**
   * Why this entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.
   * There is only one mode. In some corner cases, a resource may be included because it is both a match and an include. In these circumstances, 'match' takes precedence.
   */
  mode?: ('match'|'include'|'outcome') | undefined;
  _mode?: Element | undefined;
  /**
   * When searching, the server's search ranking score for the entry.
   * Servers are not required to return a ranking score. 1 is most relevant, and 0 is least relevant. Often, search results are sorted by score, but the client may specify a different sort order.
   * See [Patient Match](patient-operation-match.html) for the EMPI search which relates to this element.
   */
  score?: number | undefined;
}
/**
 * Entry in the bundle - will have a resource or information
 */
export interface BundleEntry<BundleContentType = FhirResource> extends BackboneElement {
  /**
   * The Absolute URL for the resource. Except for transactions and batches, each entry in a Bundle must have a fullUrl. The fullUrl SHALL NOT disagree with the id in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be version-independent URL consistent with the Resource.id. The fullUrl is a version independent reference to the resource. Even when not required, fullUrl MAY be set to a urn:uuid to allow referencing entries in a transaction. The fullUrl can be an arbitrary URI and is not limited to urn:uuid, urn:oid, http, and https. The fullUrl element SHALL have a value except when: 
   * * invoking a create
   * * invoking or responding to an operation where the body is not a single identified resource
   * * invoking or returning the results of a search or history operation.
   * fullUrl might not be [unique in the context of a resource](bundle.html#bundle-unique). Note that since [FHIR resources do not need to be served through the FHIR API](references.html), the fullURL might be a URN or an absolute URL that does not end with the logical id of the resource (Resource.id). However, but if the fullUrl does look like a RESTful server URL (e.g. meets the [regex](references.html#regex), then the 'id' portion of the fullUrl SHALL end with the Resource.id.
   * Note that the fullUrl is not the same as the canonical URL - it's an absolute url for an endpoint serving the resource (these will happen to have the same value on the canonical server for the resource with the canonical URL).
   */
  fullUrl?: string | undefined;
  _fullUrl?: Element | undefined;
  /**
   * A series of links that provide context to this entry.
   */
  link?: BundleLink[] | undefined;
  /**
   * Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.
   */
  request?: BundleEntryRequest | undefined;
  /**
   * The Resource for the entry. The purpose/meaning of the resource is determined by the Bundle.type. This is allowed to be a Parameters resource if and only if it is referenced by something else within the Bundle that provides context/meaning.
   */
  resource?: BundleContentType | undefined;
  /**
   * Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.
   */
  response?: BundleEntryResponse | undefined;
  /**
   * Information about the search process that lead to the creation of this entry.
   */
  search?: BundleEntrySearch | undefined;
}
/**
 * Links related to this Bundle
 * Both Bundle.link and Bundle.entry.link are defined to support providing additional context when Bundles are used (e.g. [HATEOAS](http://en.wikipedia.org/wiki/HATEOAS)). 
 * Bundle.entry.link corresponds to links found in the HTTP header if the resource in the entry was [read](http.html#read) directly.
 * This specification defines some specific uses of Bundle.link for [searching](search.html#conformance) and [paging](http.html#paging), but no specific uses for Bundle.entry.link, and no defined function in a transaction - the meaning is implementation specific.  The behavior of navigation link types (next/prev/first/last) are well defined for searchset and history Bundles but are not currently defined for other types. Implementers who choose to use such link relationships for other bundle types will need to negotiate behavior with their interoperability partners.
 */
export interface BundleLink extends BackboneElement {
  /**
   * A name which details the functional use for this link - see [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1).
   */
  relation: ('about'|'acl'|'alternate'|'amphtml'|'appendix'|'apple-touch-icon'|'apple-touch-startup-image'|'archives'|'author'|'blocked-by'|'bookmark'|'canonical'|'chapter'|'cite-as'|'collection'|'contents'|'convertedFrom'|'copyright'|'create-form'|'current'|'describedby'|'describes'|'disclosure'|'dns-prefetch'|'duplicate'|'edit'|'edit-form'|'edit-media'|'enclosure'|'external'|'first'|'glossary'|'help'|'hosts'|'hub'|'icon'|'index'|'intervalAfter'|'intervalBefore'|'intervalContains'|'intervalDisjoint'|'intervalDuring'|'intervalEquals'|'intervalFinishedBy'|'intervalFinishes'|'intervalIn'|'intervalMeets'|'intervalMetBy'|'intervalOverlappedBy'|'intervalOverlaps'|'intervalStartedBy'|'intervalStarts'|'item'|'last'|'latest-version'|'license'|'linkset'|'lrdd'|'manifest'|'mask-icon'|'media-feed'|'memento'|'micropub'|'modulepreload'|'monitor'|'monitor-group'|'next'|'next-archive'|'nofollow'|'noopener'|'noreferrer'|'opener'|'openid2.local_id'|'openid2.provider'|'original'|'P3Pv1'|'payment'|'pingback'|'preconnect'|'predecessor-version'|'prefetch'|'preload'|'prerender'|'prev'|'preview'|'previous'|'prev-archive'|'privacy-policy'|'profile'|'publication'|'related'|'restconf'|'replies'|'ruleinput'|'search'|'section'|'self'|'service'|'service-desc'|'service-doc'|'service-meta'|'sponsored'|'start'|'status'|'stylesheet'|'subsection'|'successor-version'|'sunset'|'tag'|'terms-of-service'|'timegate'|'timemap'|'type'|'ugc'|'up'|'version-history'|'via'|'webmention'|'working-copy'|'working-copy-of');
  _relation?: Element | undefined;
  /**
   * The reference details for the link.
   */
  url: string;
  _url?: Element | undefined;
}
export interface Bundle<BundleContentType = FhirResource> extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Bundle';
  /**
   * An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).
   */
  entry?: BundleEntry<BundleContentType>[] | undefined;
  /**
   * A persistent identifier for the bundle that won't change as a bundle is copied from server to server.
   * Persistent identity generally only matters for batches of type Document, Message, and Collection. It would not normally be populated for search and history results and servers ignore Bundle.identifier when processing batches and transactions. For Documents  the .identifier SHALL be populated such that the .identifier is globally unique.
   */
  identifier?: Identifier | undefined;
  /**
   * Captures issues and warnings that relate to the construction of the Bundle and the content within it.
   * Usage notes: These issues and warnings must apply to the Bundle as a whole, not to individual entries.Messages relating to the processing of individual entries (e.g. in a batch or transaction) SHALL be reported in the entry.response.outcome for that entry.  If there are errors that arise in the creation of the Bundle, then that should be handled by an OperationOutcome being returned instead of the Bundle.
   */
  issues?: FhirResource | undefined;
  /**
   * A series of links that provide context to this bundle.
   * Both Bundle.link and Bundle.entry.link are defined to support providing additional context when Bundles are used (e.g. [HATEOAS](http://en.wikipedia.org/wiki/HATEOAS)). 
   * Bundle.entry.link corresponds to links found in the HTTP header if the resource in the entry was [read](http.html#read) directly.
   * This specification defines some specific uses of Bundle.link for [searching](search.html#conformance) and [paging](http.html#paging), but no specific uses for Bundle.entry.link, and no defined function in a transaction - the meaning is implementation specific.  The behavior of navigation link types (next/prev/first/last) are well defined for searchset and history Bundles but are not currently defined for other types. Implementers who choose to use such link relationships for other bundle types will need to negotiate behavior with their interoperability partners.
   */
  link?: BundleLink[] | undefined;
  /**
   * Digital Signature - base64 encoded. XML-DSig or a JWS.
   * The signature could be created by the "author" of the bundle or by the originating device.   Requirements around inclusion of a signature, verification of signatures and treatment of signed/non-signed bundles is implementation-environment specific.
   */
  signature?: Signature | undefined;
  /**
   * The date/time that the bundle was assembled - i.e. when the resources were placed in the bundle.
   * For many bundles, the timestamp is equal to .meta.lastUpdated, because they are not stored (e.g. search results). When a bundle is placed in a persistent store, .meta.lastUpdated will be usually be changed by the server. When the bundle is a message, a middleware agent altering the message (even if not stored) SHOULD update .meta.lastUpdated. .timestamp is used to track the original time of the Bundle, and SHOULD be populated.  
   * Usage:
   * * document : the date the document was created. Note: the composition may predate the document, or be associated with multiple documents. The date of the composition - the authoring time - may be earlier than the document assembly time
   * * message : the date that the content of the message was assembled. This date is not changed by middleware engines unless they add additional data that changes the meaning of the time of the message
   * * history : the date that the history was assembled. This time would be used as the _since time to ask for subsequent updates
   * * searchset : the time that the search set was assembled. Note that different pages MAY have different timestamps but need not. Having different timestamps does not imply that subsequent pages will represent or include changes made since the initial query
   * * transaction | transaction-response | batch | batch-response | collection : no particular assigned meaning
   * The timestamp value should be greater than the lastUpdated and other timestamps in the resources in the bundle, and it should be equal or earlier than the .meta.lastUpdated on the Bundle itself.
   */
  timestamp?: string | undefined;
  _timestamp?: Element | undefined;
  /**
   * If a set of search matches, this is the (potentially estimated) total number of entries of type 'match' across all pages in the search.  It does not include search.mode = 'include' or 'outcome' entries and it does not provide a count of the number of entries in the Bundle.
   * Only used if the bundle is a search result set. The total does not include resources such as OperationOutcome and included resources, only the total number of matching resources.
   */
  total?: number | undefined;
  /**
   * Indicates the purpose of this bundle - how it is intended to be used.
   * It's possible to use a bundle for other purposes (e.g. a document can be accepted as a transaction). This is primarily defined so that there can be specific rules for some of the bundle types.
   */
  type: ('document'|'message'|'transaction'|'transaction-response'|'batch'|'batch-response'|'history'|'searchset'|'collection'|'subscription-notification');
  _type?: Element | undefined;
}
export interface CanonicalResource extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: string;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the {{title}} and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the {{title}}.
   * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date (and optionally time) when the {{title}} was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the {{title}} changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the {{title}}. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the {{title}} from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the {{title}} as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A Boolean value to indicate that this {{title}} is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage.
   * Allows filtering of {{title}}s that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this {{title}} when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this {{title}} outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the {{title}} is intended to be used.
   * It may be possible for the {{title}} to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A natural language name identifying the {{title}}. This name should be usable as an identifier for the resource by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type no-whitespace name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the {{title}}.
   * Usually an organization but may be an individual. The publisher (or steward) of the {{title}} is the organization or individual primarily responsible for the maintenance and upkeep of the {{title}}. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the {{title}}. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this {{title}} is needed and why it has been designed as it has.
   * This element does not describe the usage of the {{title}}. Instead, it provides traceability of "why" the resource is either needed or "why" it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this {{title}}.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The current state of this {{title}}. 
   * A nominal state-transition diagram can be found in the [Definition pattern](definition.html#statemachine) documentation.
   * Unknown does not represent 'other' - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the {{title}}.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this {{title}} when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this {{title}} is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the {{title}} is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate {{title}}s.
   * When multiple useContexts are specified, there is no expectation that all or even any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the {{title}} when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the {{title}} author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence without additional knowledge.  (See the versionAlgorithm element.)
   * There may be different {{title}}s that have the same url but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the {{title}} with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Document definition
 */
export interface CapabilityStatementDocument extends BackboneElement {
  /**
   * A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * Mode of this document declaration - whether an application is a producer or consumer.
   */
  mode: ('producer'|'consumer');
  _mode?: Element | undefined;
  /**
   * A profile on the document Bundle that constrains which resources are present, and their contents.
   * The profile is actually on the Bundle.
   */
  profile: string;
  _profile?: Element | undefined;
}
/**
 * If this describes a specific instance
 */
export interface CapabilityStatementImplementation extends BackboneElement {
  /**
   * The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.
   */
  custodian?: Reference | undefined;
  /**
   * Information about the specific installation that this capability statement relates to.
   */
  description: string;
  _description?: Element | undefined;
  /**
   * An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * Where messages should be sent
 */
export interface CapabilityStatementMessagingEndpoint extends BackboneElement {
  /**
   * The network address of the endpoint. For solutions that do not use network addresses for routing, it can be just an identifier.
   */
  address: string;
  _address?: Element | undefined;
  /**
   * A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
   */
  protocol: Coding;
}
/**
 * Messages supported by this system
 * This is a proposed alternative to the messaging.event structure.
 */
export interface CapabilityStatementMessagingSupportedMessage extends BackboneElement {
  /**
   * Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.
   */
  definition: string;
  _definition?: Element | undefined;
  /**
   * The mode of this event declaration - whether application is sender or receiver.
   */
  mode: ('sender'|'receiver');
  _mode?: Element | undefined;
}
/**
 * If messaging is supported
 * Multiple repetitions allow the documentation of multiple endpoints per solution.
 */
export interface CapabilityStatementMessaging extends BackboneElement {
  /**
   * Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * An endpoint (network accessible address) to which messages and/or replies are to be sent.
   */
  endpoint?: CapabilityStatementMessagingEndpoint[] | undefined;
  /**
   * Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
   * If this value is missing then the application does not implement (receiver) or depend on (sender) reliable messaging.
   */
  reliableCache?: number | undefined;
  /**
   * References to message definitions for messages this system can send or receive.
   * This is a proposed alternative to the messaging.event structure.
   */
  supportedMessage?: CapabilityStatementMessagingSupportedMessage[] | undefined;
}
/**
 * What operations are supported?
 */
export interface CapabilityStatementRestInteraction extends BackboneElement {
  /**
   * A coded identifier of the operation, supported by the system.
   */
  code: ('transaction'|'batch'|'search-system'|'history-system');
  _code?: Element | undefined;
  /**
   * Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
}
/**
 * What operations are supported?
 * In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
 */
export interface CapabilityStatementRestResourceInteraction extends BackboneElement {
  /**
   * Coded identifier of the operation, supported by the system resource.
   */
  code: ('read'|'vread'|'update'|'patch'|'delete'|'history-instance'|'history-type'|'create'|'search-type');
  _code?: Element | undefined;
  /**
   * Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
}
/**
 * Definition of a resource operation
 * Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    
 * If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
 */
export interface CapabilityStatementRestResourceOperation extends BackboneElement {
  /**
   * Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported.
   * This can be used to build an HTML form to invoke the operation, for instance.
   */
  definition: string;
  _definition?: Element | undefined;
  /**
   * Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * The name of the operation or query. For an operation, this name is prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called. This SHOULD be the same as the OperationDefinition.code of the defining OperationDefinition.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple OperationDefinition that happen to share the same code.
   * The name here SHOULD be the same as the OperationDefinition.code in the referenced OperationDefinition, unless there is a name clash and the OperationDefinition.code cannot be used. The name does not include the "$" portion that is always included in the URL. There is no correspondence whatsoever between CapabilityStatement's operation.name and OperationDefinition.name - the latter is used as a class name when generating code for the operation. HL7 will never define operations that have conflicting names.
   */
  name: string;
  _name?: Element | undefined;
}
/**
 * Search parameters supported by implementation
 * The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
 */
export interface CapabilityStatementRestResourceSearchParam extends BackboneElement {
  /**
   * An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.
   * This SHOULD be present, and matches refers to a SearchParameter by its canonical URL. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource. This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * The label used for the search parameter in this particular system's API - i.e. the 'name' portion of the name-value pair that will appear as part of the search URL.  This SHOULD be the same as the SearchParameter.code of the defining SearchParameter.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple SearchParameters that happen to share the same code.
   * Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined. There is no correspondence whatsoever between CapabilityStatement's searchParam.name and SearchParameter.name - the latter is used as a class name when generating code for the search parameter.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The type of value a search parameter refers to, and how the content is interpreted.
   * While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.
   */
  type: ('number'|'date'|'string'|'token'|'reference'|'composite'|'quantity'|'uri'|'special');
  _type?: Element | undefined;
}
/**
 * Resource served on the REST interface
 * Max of one repetition per resource type.
 */
export interface CapabilityStatementRestResource extends BackboneElement {
  /**
   * A flag that indicates that the server supports conditional create.
   * Conditional Create is mainly appropriate for interface engine scripts converting from other formats, such as v2.
   */
  conditionalCreate?: boolean | undefined;
  _conditionalCreate?: Element | undefined;
  /**
   * A code that indicates how the server supports conditional delete.
   * Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.
   */
  conditionalDelete?: ('not-supported'|'single'|'multiple') | undefined;
  _conditionalDelete?: Element | undefined;
  /**
   * A flag that indicates that the server supports conditional patch.
   * Conditional Patch is mainly appropriate for interface engine scripts converting from other formats, such as v2.
   */
  conditionalPatch?: boolean | undefined;
  _conditionalPatch?: Element | undefined;
  /**
   * A code that indicates how the server supports conditional read.
   * Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.
   */
  conditionalRead?: ('not-supported'|'modified-since'|'not-match'|'full-support') | undefined;
  _conditionalRead?: Element | undefined;
  /**
   * A flag that indicates that the server supports conditional update.
   * Conditional Update is mainly appropriate for interface engine scripts converting from other formats, such as v2.
   */
  conditionalUpdate?: boolean | undefined;
  _conditionalUpdate?: Element | undefined;
  /**
   * Additional information about the resource type used by the system.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * Identifies a restful operation supported by the solution.
   * In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
   */
  resourceInteraction?: CapabilityStatementRestResourceInteraction[] | undefined;
  /**
   * Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.
   * Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    
   * If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
   */
  operation?: CapabilityStatementRestResourceOperation[] | undefined;
  /**
   * A system-wide profile that is applied across *all* instances of the resource supported by the system. For example, if declared on Observation, this profile is the "superset" of capabilities for laboratory *and* vitals *and* other domains. See further discussion in [Using Profiles](profiling.html#profile-uses).
   * All other profiles for this type that are listed in `.rest.resource.supportedProfile` must conform to this profile.
   */
  profile?: string | undefined;
  _profile?: Element | undefined;
  /**
   * A flag for whether the server is able to return past versions as part of the vRead operation.
   * It is useful to support the vRead operation for current operations, even if past versions aren't available.
   */
  readHistory?: boolean | undefined;
  _readHistory?: Element | undefined;
  /**
   * A set of flags that defines how references are supported.
   */
  referencePolicy?: ('literal'|'logical'|'resolves'|'enforced'|'local')[] | undefined;
  _referencePolicy?: Element[] | undefined;
  /**
   * A list of _include values supported by the server.
   * Documenting [`_include`](http://hl7.org/fhir/R5/search.html#revinclude) support helps set conformance expectations for the desired system. Still, it is a level of detail that might not be exposed by production servers or clients when using CapabilityStatement to describe an actual implementation. If this list is empty, the server does not support includes. Support for *iterative* (a.k.a., recursive) `_include` is communicated by listing the iterative includes values supported by the server in the `searchInclude` element of the "root" resource type. For example, to support the following search:
   * `GET [base]/CarePlan?_include=CarePlan:activity-reference:DeviceRequest&_include:iterate=DeviceRequest:device`
   * These values would be listed as part of capabilities for "CarePlan":
   * "searchInclude" : ["CarePlan:activity-reference:DeviceRequest","DeviceRequest:device"],
   */
  searchInclude?: string[] | undefined;
  _searchInclude?: Element[] | undefined;
  /**
   * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
   * The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
   */
  searchParam?: CapabilityStatementRestResourceSearchParam[] | undefined;
  /**
   * A list of _revinclude (reverse include) values supported by the server.
   * See `CapabilityStatement.rest.resource.searchInclude` comments.
   */
  searchRevInclude?: string[] | undefined;
  _searchRevInclude?: Element[] | undefined;
  /**
   * A list of profiles representing different use cases the system hosts/produces. A supported profile is a statement about the functionality of the data and services provided by the server (or the client) for supported use cases. For example, a system can define and declare multiple Observation profiles for laboratory observations, vital sign observations, etc. By declaring supported profiles, systems provide a way to determine whether individual resources are conformant. See further discussion in [Using Profiles](profiling.html#profile-uses).
   * Supported profiles must conform to the resource profile in the `.rest.resource.profile` element if it is present. The resource profile is a system-wide profile applied across *all* instances of the resource supported by the system. A supported profile is a statement about the functionality of the data and services provided by the server (or used by the client) for a particular set of use cases and will not necessarily apply to all data consumed or exposed by the server.
   */
  supportedProfile?: string[] | undefined;
  _supportedProfile?: Element[] | undefined;
  /**
   * A type of resource exposed via the restful interface.
   */
  type: ('Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription');
  _type?: Element | undefined;
  /**
   * A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
   * Allowing the clients to create new identities on the server means that the system administrator needs to have confidence that the clients do not create clashing identities between them. Obviously, if there is only one client, this won't happen. While creating identities on the client means that the clients need to be managed, it's much more convenient for many scenarios if such management can be put in place.
   */
  updateCreate?: boolean | undefined;
  _updateCreate?: Element | undefined;
  /**
   * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
   * If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.
   */
  versioning?: ('no-version'|'versioned'|'versioned-update') | undefined;
  _versioning?: Element | undefined;
}
/**
 * Information about security of implementation
 */
export interface CapabilityStatementRestSecurity extends BackboneElement {
  /**
   * Server adds CORS headers when responding to requests - this enables Javascript applications to use the server.
   * The easiest CORS headers to add are Access-Control-Allow-Origin: * & Access-Control-Request-Method: GET, POST, PUT, DELETE. All servers SHOULD support CORS.
   */
  cors?: boolean | undefined;
  _cors?: Element | undefined;
  /**
   * General description of how security works.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Types of security services that are supported/required by the system.
   */
  service?: CodeableConcept[] | undefined;
}
/**
 * If the endpoint is a RESTful one
 * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
 */
export interface CapabilityStatementRest extends BackboneElement {
  /**
   * An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .
   * At present, the only defined compartments are at [CompartmentDefinition](compartmentdefinition.html).
   */
  compartment?: string[] | undefined;
  _compartment?: Element[] | undefined;
  /**
   * Information about the system's restful capabilities that apply across all applications, such as security.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * A specification of restful operations supported by the system.
   */
  systemInteraction?: CapabilityStatementRestInteraction[] | undefined;
  /**
   * Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
   */
  mode: ('client'|'server');
  _mode?: Element | undefined;
  /**
   * Definition of an operation or a named query together with its parameters and their meaning and type.
   * CapabilityStatement.rest.operation is for operations invoked at the system level, or for operations that are supported across multiple resource types. Operations linked from CapabilityStatement.rest.operation must have OperationDefinition.system = true, or more than one Operation.resource.
   */
  operation?: CapabilityStatementRestResourceOperation[] | undefined;
  /**
   * A specification of the restful capabilities of the solution for a specific resource type.
   * Max of one repetition per resource type.
   */
  resource?: CapabilityStatementRestResource[] | undefined;
  /**
   * Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation. This is only for searches executed against the system-level endpoint.
   * Typically, the only search parameters supported for all searches are those that apply to all resources - tags, profiles, text search etc. These search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
   */
  searchParam?: CapabilityStatementRestResourceSearchParam[] | undefined;
  /**
   * Information about security implementation from an interface perspective - what a client needs to know.
   */
  security?: CapabilityStatementRestSecurity | undefined;
}
/**
 * Software that is covered by this capability statement
 */
export interface CapabilityStatementSoftware extends BackboneElement {
  /**
   * Name the software is known by.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Date this version of the software was released.
   */
  releaseDate?: string | undefined;
  _releaseDate?: Element | undefined;
  /**
   * The version identifier for the software covered by this statement.
   * If possible, a version should be specified, as statements are likely to be different for different versions of software.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Applications may implement multiple versions (see [Managing Multiple Versions](versioning.html), and the [$versions](capabilitystatement-operation-versions.html) operation). If they do, then a CapabilityStatement describes the system's support for a particular version of FHIR, and the server will have multiple statements, one for each version.
 */
export interface CapabilityStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CapabilityStatement';
  /**
   * A list of the languages supported by this implementation that are usefully supported in the ```Accept-Language``` header.
   * In general, if a server gets a request with an Accept-Language that it doesn't support, it should still reutrn the resource, just in its default language for the resource.
   */
  acceptLanguage?: string[] | undefined;
  _acceptLanguage?: Element[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.
   * ...
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the capability statement was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the capability statement changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the capability statement. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date: string;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the capability statement from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the capability statement as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the capability statement is presumed to be the predominant language in the place the capability statement was created).This does not need to be populated if the description is adequately implied by the software or implementation details.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A document definition.
   */
  document?: CapabilityStatementDocument[] | undefined;
  /**
   * A Boolean value to indicate that this capability statement is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of capability statements that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * The version of the FHIR specification that this CapabilityStatement describes (which SHALL be the same as the FHIR version of the CapabilityStatement itself). There is no default value.
   * Servers may implement multiple versions (see [Managing Multiple Versions](versioning.html), and the [$versions](capabilitystatement-operation-versions.html) operation). If they do, and the CapabilityStatement is requested from the server, then this fhirVersion will be either the version requested, or the server's default version.
   */
  fhirVersion: ('0.01'|'0.05'|'0.06'|'0.11'|'0.0'|'0.0.80'|'0.0.81'|'0.0.82'|'0.4'|'0.4.0'|'0.5'|'0.5.0'|'1.0'|'1.0.0'|'1.0.1'|'1.0.2'|'1.1'|'1.1.0'|'1.4'|'1.4.0'|'1.6'|'1.6.0'|'1.8'|'1.8.0'|'3.0'|'3.0.0'|'3.0.1'|'3.0.2'|'3.3'|'3.3.0'|'3.5'|'3.5.0'|'4.0'|'4.0.0'|'4.0.1'|'4.1'|'4.1.0'|'4.2'|'4.2.0'|'4.3'|'4.3.0'|'4.3.0-cibuild'|'4.3.0-snapshot1'|'4.4'|'4.4.0'|'4.5'|'4.5.0'|'4.6'|'4.6.0'|'5.0'|'5.0.0'|'5.0.0-cibuild'|'5.0.0-snapshot1'|'5.0.0-snapshot2'|'5.0.0-ballot'|'5.0.0-snapshot3'|'5.0.0-draft-final');
  _fhirVersion?: Element | undefined;
  /**
   * A list of the formats supported by this implementation using their content types.
   * "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
   */
  format: string[];
  _format?: Element[] | undefined;
  /**
   * A formal identifier that is used to identify this CapabilityStatement when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
   */
  implementation?: CapabilityStatementImplementation | undefined;
  /**
   * A list of implementation guides that the server does (or should) support in their entirety.
   * Note: this is primarily only relevant in terms of ImplementationGuides that don't define specific CapabilityStatements declaring the expectation of distinct roles.  (E.g. generic IGs that establish privacy policies.)  In situations where an ImplementationGuide does define CapabilityStatements, asserting CapabilityStatement.implementationGuide means that the implementation adheres to any Implementation.global definitions present in that IG as well as any textual requirements around security or other general interoperability behaviors. However, it does not make any assertions as to conformance with any of the CapabilityStatements defined in the IG. To assert conformance with CapabilityStatements in a referenced IG, it is necessary to use the CapabilityStatement.instantiates element.
   */
  implementationGuide?: string[] | undefined;
  _implementationGuide?: Element[] | undefined;
  /**
   * Reference to a canonical URL of another CapabilityStatement that this software adds to. The capability statement automatically includes everything in the other statement, and it is not duplicated, though the server may repeat the same resources, interactions and operations to add additional details to them.
   * the contents of any directly or indirectly imported CapabilityStatements SHALL NOT overlap, i.e. they cannot refer to the same rest/resource, operations/name, searchparam/name, interaction/code, messaging/endpoint, document/mode pair.
   * A capability statement that imports another CapabilityStatement automatically instantiates it too (though this is often not a very useful statement for the kinds of CapabilityStatements that are suitable for importing).
   */
  imports?: string[] | undefined;
  _imports?: Element[] | undefined;
  /**
   * Reference to a canonical URL of another CapabilityStatement that this software implements. This capability statement is a published API description that corresponds to a business service. The server may actually implement a subset of the capability statement it claims to implement, so the capability statement must specify the full capability details.
   * HL7 defines the following Services: [Terminology Service](terminology-service.html).    
   * Many [Implementation Guides](http://fhir.org/guides/registry) define additional services.
   */
  instantiates?: string[] | undefined;
  _instantiates?: Element[] | undefined;
  /**
   * A legal or geographic region in which the capability statement is intended to be used.
   * It may be possible for the capability statement to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
   */
  kind: ('instance'|'capability'|'requirements');
  _kind?: Element | undefined;
  /**
   * A description of the messaging capabilities of the solution.
   * Multiple repetitions allow the documentation of multiple endpoints per solution.
   */
  messaging?: CapabilityStatementMessaging[] | undefined;
  /**
   * A natural language name identifying the capability statement. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A list of the patch formats supported by this implementation using their content types.
   * At present, the patch mime types application/json-patch+json and application/xml-patch+xml are legal. Generally, if a server supports PATCH, it would be expected to support the patch formats and match the formats it supports, but this is not always possible or necessary.
   */
  patchFormat?: string[] | undefined;
  _patchFormat?: Element[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the capability statement.
   * Usually an organization but may be an individual. The publisher (or steward) of the capability statement is the organization or individual primarily responsible for the maintenance and upkeep of the capability statement. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the capability statement. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this capability statement is needed and why it has been designed as it has.
   * This element does not describe the usage of the capability statement. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this capability statement.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * A definition of the restful capabilities of the solution, if any.
   * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
   */
  rest?: CapabilityStatementRest[] | undefined;
  /**
   * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
   */
  software?: CapabilityStatementSoftware | undefined;
  /**
   * The status of this capability statement. Enables tracking the life-cycle of the content.
   * Allows filtering of capability statements that are appropriate for use versus not.This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the capability statement.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this capability statement when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this capability statement is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the capability statement is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate capability statement instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the capability statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the capability statement author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different capability statement instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the capability statement with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Action to occur or has occurred as part of plan
 */
export interface CarePlanActivity extends BackboneElement {
  /**
   * Identifies the activity that was performed. For example, an activity could be patient education, exercise, or a medication administration. The reference to an "event" resource, such as Procedure or Encounter or Observation, represents the activity that was performed. The requested activity can be conveyed using the CarePlan.activity.plannedActivityReference (a reference to a “request” resource).
   * Note that this should not duplicate the activity status (e.g. completed or in progress). The activity performed is independent of the outcome of the related goal(s). For example, if the goal is to achieve a target body weight of 150 lbs and an activity is defined to exercise, then the activity performed could be amount and intensity of exercise performed whereas the goal outcome is an observation for the actual body weight measured.
   */
  performedActivity?: CodeableReference[] | undefined;
  /**
   * The details of the proposed activity represented in a specific resource.
   * Standard extension exists ([http://hl7.org/fhir/StructureDefinition/resource-pertainsToGoal](http://hl7.org/fhir/extensions/StructureDefinition-resource-pertainsToGoal.html)) that allows goals to be referenced from any of the referenced resources in CarePlan.activity.plannedActivityReference.  
   * The goal should be visible when the resource referenced by CarePlan.activity.plannedActivityReference is viewed independently from the CarePlan.  Requests that are pointed to by a CarePlan using this element should *not* point to this CarePlan using the "basedOn" element.  i.e. Requests that are part of a CarePlan are not "based on" the CarePlan.
   */
  plannedActivityReference?: Reference | undefined;
  /**
   * Notes about the adherence/status/progress of the activity.
   * This element should NOT be used to describe the activity to be performed - that occurs either within the resource pointed to by activity.detail.reference or in activity.detail.description.
   */
  progress?: Annotation[] | undefined;
}
export interface CarePlan extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CarePlan';
  /**
   * Identifies an action that has occurred or is a planned action to occur as part of the plan. For example, a medication to be used, lab tests to perform, self-monitoring that has occurred, education etc.
   */
  activity?: CarePlanActivity[] | undefined;
  /**
   * Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
   * Use CarePlan.addresses.concept when a code sufficiently describes the concern (e.g. condition, problem, diagnosis, risk). Use CarePlan.addresses.reference when referencing a resource, which allows more information to be conveyed, such as onset date. CarePlan.addresses.concept and CarePlan.addresses.reference are not meant to be duplicative. For a single concern, either CarePlan.addresses.concept or CarePlan.addresses.reference can be used. CarePlan.addresses.concept may be a summary code, or CarePlan.addresses.reference may be used to reference a very precise definition of the concern using Condition. Both CarePlan.addresses.concept and CarePlan.addresses.reference can be used if they are describing different concerns for the care plan.
   */
  addresses?: CodeableReference[] | undefined;
  /**
   * A higher-level request resource (i.e. a plan, proposal or order) that is fulfilled in whole or in part by this care plan.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
   */
  careTeam?: Reference[] | undefined;
  /**
   * Identifies what "kind" of plan this is to support differentiation between multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc.
   * There may be multiple axes of categorization and one plan may serve multiple purposes.  In some cases, this may be redundant with references to CarePlan.addresses.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Identifies the individual(s), organization or device who provided the contents of the care plan.
   * Collaborative care plans may have multiple contributors.
   */
  contributor?: Reference[] | undefined;
  /**
   * Represents when this particular CarePlan record was created in the system, which is often a system-generated date.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * When populated, the custodian is responsible for the care plan. The care plan is attributed to the custodian.
   * The custodian might or might not be a contributor.
   */
  custodian?: Reference | undefined;
  /**
   * A description of the scope and nature of the plan.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The Encounter during which this CarePlan was created or to which the creation of this record is tightly associated.
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter. CarePlan activities conducted as a result of the care plan may well occur as part of other encounters.
   */
  encounter?: Reference | undefined;
  /**
   * Describes the intended objective(s) of carrying out the care plan.
   * Goal can be achieving a particular change or merely maintaining a current state or even slowing a decline.
   */
  goal?: Reference[] | undefined;
  /**
   * Business identifiers assigned to this care plan by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
   */
  instantiatesCanonical?: string[] | undefined;
  _instantiatesCanonical?: Element[] | undefined;
  /**
   * The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
   * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
   */
  instantiatesUri?: string[] | undefined;
  _instantiatesUri?: Element[] | undefined;
  /**
   * Indicates the level of authority/intentionality associated with the care plan and where the care plan fits into the workflow chain.
   * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
   * This element is expected to be immutable. E.g. A "proposal" instance should never change to be a "plan" instance or "order" instance. Instead, a new instance 'basedOn' the prior instance should be created with the new 'intent' value.
   */
  intent: ('proposal'|'plan'|'order'|'option'|'directive');
  _intent?: Element | undefined;
  /**
   * General notes about the care plan not covered elsewhere.
   */
  note?: Annotation[] | undefined;
  /**
   * A larger care plan of which this particular care plan is a component or step.
   * Each care plan is an independent request, such that having a care plan be part of another care plan can cause issues with cascading statuses.  As such, this element is still being discussed.
   */
  partOf?: Reference[] | undefined;
  /**
   * Indicates when the plan did (or is intended to) come into effect and end.
   * Any activities scheduled as part of the plan should be constrained to the specified period regardless of whether the activities are planned within a single encounter/episode or across multiple encounters/episodes (e.g. the longitudinal management of a chronic condition).
   */
  period?: Period | undefined;
  /**
   * Completed or terminated care plan whose function is taken by this new care plan.
   * The replacement could be because the initial care plan was immediately rejected (due to an issue) or because the previous care plan was completed, but the need for the action described by the care plan remains ongoing.
   */
  replaces?: Reference[] | undefined;
  /**
   * Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
   * The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the care plan.
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the plan as not currently valid.
   */
  status: ('draft'|'active'|'on-hold'|'revoked'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * Identifies the patient or group whose intended care is described by the plan.
   */
  subject: Reference;
  /**
   * Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include comorbidities, recent procedures, limitations, recent assessments, etc.
   * Use "concern" to identify specific conditions addressed by the care plan.  supportingInfo can be used to convey one or more Advance Directives or Medical Treatment Consent Directives by referencing Consent or any other request resource with intent = directive.
   */
  supportingInfo?: Reference[] | undefined;
  /**
   * Human-friendly name for the care plan.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * Members of the team
 */
export interface CareTeamParticipant extends BackboneElement {
  /**
   * When the member is generally available within this care team.
   * This is populated while creating / managing the CareTeam to ensure there is coverage when servicing CarePlan activities from the Schedule.
   */
  coveragePeriod?: Period | undefined;
  /**
   * When the member is generally available within this care team.
   * This is populated while creating / managing the CareTeam to ensure there is coverage when servicing CarePlan activities from the Schedule.
   */
  coverageTiming?: Timing | undefined;
  /**
   * The specific person or organization who is participating/expected to participate in the care team.
   * Patient only needs to be listed if they have a role other than "subject of care".
   * Member is optional because some participants may be known only by their role, particularly in draft plans.
   */
  member?: Reference | undefined;
  /**
   * The organization of the practitioner.
   */
  onBehalfOf?: Reference | undefined;
  /**
   * Indicates specific responsibility of an individual within the care team, such as "Primary care physician", "Trained social worker counselor", "Caregiver", etc.
   * Roles may sometimes be inferred by type of Practitioner.  These are relationships that hold only within the context of the care team.  General relationships should be handled as properties of the Patient resource directly.  If a participant has multiple roles within the team, then there should be multiple participants.
   */
  role?: CodeableConcept | undefined;
}
export interface CareTeam extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CareTeam';
  /**
   * Identifies what kind of team.  This is to support differentiation between multiple co-existing teams, such as care plan team, episode of care team, longitudinal care team.
   * There may be multiple axis of categorization and one team may serve multiple purposes.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Business identifiers assigned to this care team by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization responsible for the care team.
   */
  managingOrganization?: Reference[] | undefined;
  /**
   * A label for human use intended to distinguish like teams.  E.g. the "red" vs. "green" trauma teams.
   * The meaning/purpose of the team is conveyed in CareTeam.category.  This element may also convey semantics of the team (e.g. "Red trauma team"), but its primary purpose is to distinguish between identical teams in a human-friendly way.  ("Team 18735" isn't as friendly.).
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Comments made about the CareTeam.
   */
  note?: Annotation[] | undefined;
  /**
   * Identifies all people and organizations who are expected to be involved in the care team.
   */
  participant?: CareTeamParticipant[] | undefined;
  /**
   * Indicates when the team did (or is intended to) come into effect and end.
   */
  period?: Period | undefined;
  /**
   * Describes why the care team exists.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * Indicates the current state of the care team.
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the care team as not currently valid.
   */
  status?: ('proposed'|'active'|'suspended'|'inactive'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * Identifies the patient or group whose intended care is handled by the team.
   * Use Group for care provision to all members of the group (e.g. group therapy).  Use Patient for care provision to an individual patient.
   */
  subject?: Reference | undefined;
  /**
   * A central contact detail for the care team (that applies to all members).
   * The ContactPoint.use code of home is not appropriate to use. These contacts are not the contact details of individual care team members.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Who performed charged service
 */
export interface ChargeItemPerformer extends BackboneElement {
  /**
   * The device, practitioner, etc. who performed or participated in the service.
   */
  actor: Reference;
  /**
   * Describes the type of performance or participation(e.g. primary surgeon, anesthesiologiest, etc.).
   */
  function?: CodeableConcept | undefined;
}
export interface ChargeItem extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ChargeItem';
  /**
   * Account into which this ChargeItems belongs.
   * Systems posting the ChargeItems might not always be able to determine, which accounts the Items need to be places into. It is up to the postprocessing Financial System to apply internal rules to decide based on the Encounter/EpisodeOfCare/Patient/Coverage context and the type of ChargeItem, which Account is appropriate.
   */
  account?: Reference[] | undefined;
  /**
   * The anatomical location where the related service has been applied.
   * Only used if not implicit in code found in Condition.code. If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [http://hl7.org/fhir/StructureDefinition/bodySite](http://hl7.org/fhir/extensions/StructureDefinition-bodySite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
   */
  bodysite?: CodeableConcept[] | undefined;
  /**
   * A code that identifies the charge, like a billing code.
   */
  code: CodeableConcept;
  /**
   * The financial cost center permits the tracking of charge attribution.
   * The costCenter could either be given as a reference to an Organization(Role) resource or as the identifier of the cost center determined by Reference.identifier.value and Reference.identifier.system, depending on use case requirements.
   */
  costCenter?: Reference | undefined;
  /**
   * References the source of pricing information, rules of application for the code this ChargeItem uses.
   */
  definitionCanonical?: string[] | undefined;
  _definitionCanonical?: Element[] | undefined;
  /**
   * References the (external) source of pricing information, rules of application for the code this ChargeItem uses.
   */
  definitionUri?: string[] | undefined;
  _definitionUri?: Element[] | undefined;
  /**
   * This ChargeItem has the details of how the associated Encounter should be billed or otherwise be handled by finance systems.
   * This ChargeItem may be recorded during planning, execution or after the actual encounter takes place.
   */
  encounter?: Reference | undefined;
  /**
   * Date the charge item was entered.
   * The actual date when the service associated with the charge has been rendered is captured in occurrence[x].
   */
  enteredDate?: string | undefined;
  _enteredDate?: Element | undefined;
  /**
   * The device, practitioner, etc. who entered the charge item.
   * The enterer is also the person considered responsible for factor/price overrides if applicable.
   */
  enterer?: Reference | undefined;
  /**
   * Identifiers assigned to this event performer or other systems.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Comments made about the event by the performer, subject or other participants.
   */
  note?: Annotation[] | undefined;
  /**
   * Date/time(s) or duration when the charged service was applied.
   * The list of types may be constrained as appropriate for the type of charge item.
   */
  occurrencestring?: string | undefined;
  _occurrencestring?: Element | undefined;
  /**
   * Date/time(s) or duration when the charged service was applied.
   * The list of types may be constrained as appropriate for the type of charge item.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * Date/time(s) or duration when the charged service was applied.
   * The list of types may be constrained as appropriate for the type of charge item.
   */
  occurrenceTiming?: Timing | undefined;
  /**
   * If the list price or the rule-based factor associated with the code is overridden, this attribute can capture a text to indicate the  reason for this action.
   */
  overrideReason?: CodeableConcept | undefined;
  /**
   * ChargeItems can be grouped to larger ChargeItems covering the whole set.
   */
  partOf?: Reference[] | undefined;
  /**
   * Indicates who or what performed or participated in the charged service.
   */
  performer?: ChargeItemPerformer[] | undefined;
  /**
   * The organization performing the service.
   * Practitioners and Devices can be associated with multiple organizations. It has to be made clear, on behalf of which Organization the services have been rendered.
   */
  performingOrganization?: Reference | undefined;
  /**
   * Identifies the device, food, drug or other product being charged either by type code or reference to an instance.
   */
  product?: CodeableReference[] | undefined;
  /**
   * Quantity of which the charge item has been serviced.
   * In many cases this may just be a value, if the underlying units are implicit in the definition of the charge item code.
   */
  quantity?: Quantity | undefined;
  /**
   * Describes why the event occurred in coded or textual form.
   * If the application of the charge item requires a reason to be given, it can be captured here. Textual reasons can be captured using reasonCode.text.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * The organization requesting the service.
   * The rendered Service might not be associated with a Request. This property indicates which Organization requested the services to be rendered. (In many cases, this may just be the Department associated with the Encounter.location).
   */
  requestingOrganization?: Reference | undefined;
  /**
   * Indicated the rendered service that caused this charge.
   */
  service?: CodeableReference[] | undefined;
  /**
   * The current state of the ChargeItem.
   * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the charge item as not currently valid.
   */
  status: ('planned'|'billable'|'not-billable'|'aborted'|'billed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The individual or set of individuals the action is being or was performed on.
   */
  subject: Reference;
  /**
   * Further information supporting this charge.
   */
  supportingInformation?: Reference[] | undefined;
  /**
   * The total price for the chargable item, accounting for the quantity.
   *  Often, the total price may be be calculated and recorded on the Invoice, but if a calculated total price must be exchanged prior to Invoice creation, it can be communicated in this property.
   */
  totalPriceComponent?: MonetaryComponent | undefined;
  /**
   * The unit price of the chargable item.
   * This could be communicated in ChargeItemDefinition. But if ChargeItemDefinition is not supported or not available, the unit price can be communicated in this property.
   */
  unitPriceComponent?: MonetaryComponent | undefined;
}
/**
 * Whether or not the billing code is applicable
 * The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
 */
export interface ChargeItemDefinitionApplicability extends BackboneElement {
  /**
   * An expression that returns true or false, indicating whether the condition is satisfied. When using FHIRPath expressions, the %context environment variable must be replaced at runtime with the ChargeItem resource to which this definition is applied.
   * Please note that FHIRPath Expressions can only be evaluated in the scope of the current ChargeItem resource to which this definition is being applied.
   * FHIRPath expressions can traverse into other resources linked from the ChargeItem resource, however, testing rules such as that a billing code may be billed only once per encounter need a wider scope. In such scenarios, CQL may be the appropriate choice.
   */
  condition?: Expression | undefined;
  /**
   * The period during which the charge item definition content was or is planned to be in active use.
   * The effective period for a charge item definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  effectivePeriod?: Period | undefined;
  /**
   * Reference to / quotation of the external source of the group of properties.
   */
  relatedArtifact?: RelatedArtifact | undefined;
}
/**
 * Group of properties which are applicable under the same conditions
 */
export interface ChargeItemDefinitionPropertyGroup extends BackboneElement {
  /**
   * Expressions that describe applicability criteria for the priceComponent.
   * The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
   */
  applicability?: ChargeItemDefinitionApplicability[] | undefined;
  /**
   * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
   */
  priceComponent?: MonetaryComponent[] | undefined;
}
export interface ChargeItemDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ChargeItemDefinition';
  /**
   * Expressions that describe applicability criteria for the billing code.
   * The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
   */
  applicability?: ChargeItemDefinitionApplicability[] | undefined;
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * The defined billing details in this resource pertain to the given billing code.
   */
  code?: CodeableConcept | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the charge item definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the charge item definition.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the charge item definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the charge item definition changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the charge item definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The URL pointing to an externally-defined charge item definition that is adhered to in whole or in part by this definition.
   */
  derivedFromUri?: string[] | undefined;
  _derivedFromUri?: Element[] | undefined;
  /**
   * A free text natural language description of the charge item definition from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the charge item definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the charge item definition is presumed to be the predominant language in the place the charge item definition was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A Boolean value to indicate that this charge item definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of charge item definitions that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this charge item definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this charge item definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The defined billing details in this resource pertain to the given product instance(s).
   * In case of highly customized, individually produced or fitted devices/substances, the pricing information may be different for each instance of the product. This reference links pricing details to specific product instances.
   */
  instance?: Reference[] | undefined;
  /**
   * A legal or geographic region in which the charge item definition is intended to be used.
   * It may be possible for the charge item definition to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the ChargeItemDefinition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A larger definition of which this particular definition is a component or step.
   */
  partOf?: string[] | undefined;
  _partOf?: Element[] | undefined;
  /**
   * Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
   */
  propertyGroup?: ChargeItemDefinitionPropertyGroup[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the charge item definition.
   * Usually an organization but may be an individual. The publisher (or steward) of the charge item definition is the organization or individual primarily responsible for the maintenance and upkeep of the charge item definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the charge item definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this charge item definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the charge item definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this charge item definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * As new versions of a protocol or guideline are defined, allows identification of what versions are replaced by a new instance.
   */
  replaces?: string[] | undefined;
  _replaces?: Element[] | undefined;
  /**
   * The current state of the ChargeItemDefinition.
   * Allows filtering of charge item definitions that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the charge item definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this charge item definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this charge item definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the charge item definition is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate charge item definition instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the charge item definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the charge item definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.
   * There may be different charge item definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the charge item definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Summary of the article or artifact
 */
export interface CitationCitedArtifactAbstract extends BackboneElement {
  /**
   * Copyright notice for the abstract.
   * There is also a copyright element in the publicationForm element, so this copyright element is intended for copyright of the abstract.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * Used to express the specific language of the abstract.
   */
  language?: CodeableConcept | undefined;
  /**
   * Abstract content.
   */
  text: string;
  _text?: Element | undefined;
  /**
   * Used to express the reason for or classification of the abstract.
   */
  type?: CodeableConcept | undefined;
}
/**
 * The assignment to an organizing scheme
 */
export interface CitationCitedArtifactClassification extends BackboneElement {
  /**
   * Complex or externally created classification.
   * Examples relevant to study citations include MeSH Headings or Keywords that contain qualifier codings or sub-classifications, and include risk of bias assessments created by persons different from the creator of the citation record.
   */
  artifactAssessment?: Reference[] | undefined;
  /**
   * The specific classification value.
   */
  classifier?: CodeableConcept[] | undefined;
  /**
   * The kind of classifier (e.g. publication type, keyword).
   */
  type?: CodeableConcept | undefined;
}
/**
 * Contributions with accounting for time or number
 */
export interface CitationCitedArtifactContributorshipEntryContributionInstance extends BackboneElement {
  /**
   * The time that the contribution was made.
   */
  time?: string | undefined;
  _time?: Element | undefined;
  /**
   * The specific contribution.
   */
  type: CodeableConcept;
}
/**
 * An individual entity named as a contributor
 * Used to report contributorship in individualized ways.
 */
export interface CitationCitedArtifactContributorshipEntry extends BackboneElement {
  /**
   * Organization affiliated with the contributor.
   * If naming an organization without additional detail or further structured data, the display element within the Reference datatype may be used for a simple string without referencing another resource.
   */
  affiliation?: Reference[] | undefined;
  /**
   * Contributions with accounting for time or number.
   */
  contributionInstance?: CitationCitedArtifactContributorshipEntryContributionInstance[] | undefined;
  /**
   * This element identifies the specific nature of an individual’s contribution with respect to the cited work.
   * The CreDiT taxonomy provides a way to encode contribution information. The purpose of CRediT is to provide transparency in contributions to scholarly published work, to enable improved systems of attribution, credit, and accountability.
   */
  contributionType?: CodeableConcept[] | undefined;
  /**
   * The identity of the individual contributor.
   * If naming a contributor without additional detail or further structured data, the display element within the Reference datatype may be used for a simple string without referencing another resource.
   */
  contributor: Reference;
  /**
   * Whether the contributor is the corresponding contributor for the role.
   * If there are multiple authors and one serves as the corresponding author, then that one would have correspondingContact = true.
   */
  correspondingContact?: boolean | undefined;
  _correspondingContact?: Element | undefined;
  /**
   * For citation styles that use initials.
   * This element is used to support a data element used for citations that is not otherwise supported fully by FHIR HumanName datatype. In some citation summary styles (e.g. Medline), authors are presented with full spelling of their last name (family name) and initials for all forenames (first names, middle names, preceding names, given names). As the FHIR HumanName Datatype does not have a specific element for forename initials and this is common in citation usage, the element is added to contributorship.entry directly.
   */
  forenameInitials?: string | undefined;
  _forenameInitials?: Element | undefined;
  /**
   * Provides a numerical ranking to represent the degree of contributorship relative to other contributors, such as 1 for first author and 2 for second author.
   * Used to retain order of authorship as structured data
   */
  rankingOrder?: number | undefined;
  /**
   * The role of the contributor (e.g. author, editor, reviewer, funder).
   */
  role?: CodeableConcept | undefined;
}
/**
 * Used to record a display of the author/contributor list without separate data element for each list member
 */
export interface CitationCitedArtifactContributorshipSummary extends BackboneElement {
  /**
   * Used to code the producer or rule for creating the display string.
   */
  source?: CodeableConcept | undefined;
  /**
   * The format for the display string, such as author last name with first letter capitalized followed by forename initials.
   */
  style?: CodeableConcept | undefined;
  /**
   * Used most commonly to express an author list or a contributorship statement.
   */
  type?: CodeableConcept | undefined;
  /**
   * The display string for the author list, contributor list, or contributorship statement.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Attribution of authors and other contributors
 */
export interface CitationCitedArtifactContributorship extends BackboneElement {
  /**
   * Indicates if the list includes all authors and/or contributors.
   * If list is incomplete, "et al" can be appended to Contributorship.summary.value for display purposes.
   */
  complete?: boolean | undefined;
  _complete?: Element | undefined;
  /**
   * An individual entity named as a contributor, for example in the author list or contributor list.
   * Used to report contributorship in individualized ways.
   */
  entry?: CitationCitedArtifactContributorshipEntry[] | undefined;
  /**
   * Used to record a display of the author/contributor list without separate data element for each list member.
   */
  contributorshipSummary?: CitationCitedArtifactContributorshipSummary[] | undefined;
}
/**
 * The component of the article or artifact
 */
export interface CitationCitedArtifactPart extends BackboneElement {
  /**
   * The citation for the full article or artifact.
   * When referencing a baseCitation, one may inherit any data from the referenced Citation Resource and consider any data in the current Citation Resource as superceding to be specific to the citation of the specified part. For example, the part-specific Citation may have additional contributorship data that supercedes the contributorship data for the full citation when there is a need to uniquely report the contributorship for an image or supplement associated with the fuller citation record.
   */
  baseCitation?: Reference | undefined;
  /**
   * The kind of component.
   */
  type?: CodeableConcept | undefined;
  /**
   * The specification of the component.
   */
  value?: string | undefined;
  _value?: Element | undefined;
}
/**
 * The collection the cited article or artifact is published in
 */
export interface CitationCitedArtifactPublicationFormPublishedIn extends BackboneElement {
  /**
   * Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book identifiers include ISBN.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Name of or resource describing the publisher.
   */
  publisher?: Reference | undefined;
  /**
   * Geographic location of the publisher.
   */
  publisherLocation?: string | undefined;
  _publisherLocation?: Element | undefined;
  /**
   * Name of the database or title of the book or journal.
   * ClinicalTrials.gov is a name of a database.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Kind of container (e.g. Periodical, database, or book).
   * Journals and newspapers are coded as Periodical.
   */
  type?: CodeableConcept | undefined;
}
/**
 * If multiple, used to represent alternative forms of the article that are not separate citations
 * A common use is a journal article with a publication date and pagination for a print version and a different publication date for the online version of the same article.
 */
export interface CitationCitedArtifactPublicationForm extends BackboneElement {
  /**
   * Entry number or identifier for inclusion in a database.
   * Accession numbers may be used instead of or in addition to page numbers.  Accession numbers are functionally identifiers when coupled with the identity of the database for which they are accession numbers. Accession numbers which are used for indexing citations in a dataset of citations should NOT be entered in Citation.citedArtifact.publicationForm.accessionNumber -- this use would be a type of Citation.identifier for the citation record itself.
   */
  accessionNumber?: string | undefined;
  _accessionNumber?: Element | undefined;
  /**
   * The date the article was added to the database, or the date the article was released.
   * The articleDate is the preferred element for expressing the publication date as structured data.
   */
  articleDate?: string | undefined;
  _articleDate?: Element | undefined;
  /**
   * Describes the form of the medium cited. Common codes are "Internet" or "Print". The CitedMedium value set has 6 codes. The codes internet, print, and offline-digital-storage are the common codes for a typical publication form, though internet and print are more common for study citations. Three additional codes (each appending one of the primary codes with "-without-issue" are used for situations when a study is published both within an issue (of a periodical release as commonly done for journals) AND is published separately from the issue (as commonly done with early online publication), to represent specific identification of the publication form not associated with the issue.
   */
  citedMedium?: CodeableConcept | undefined;
  /**
   * Copyright notice for the full article or artifact.
   * It is possible that different publication forms have different copyright notices.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * Used for isolated representation of first page.
   */
  firstPage?: string | undefined;
  _firstPage?: Element | undefined;
  /**
   * Issue, part or supplement of journal or other collection in which the article is published.
   */
  issue?: string | undefined;
  _issue?: Element | undefined;
  /**
   * The language or languages in which this form of the article is published.
   */
  language?: CodeableConcept[] | undefined;
  /**
   * Used for isolated representation of last page.
   */
  lastPage?: string | undefined;
  _lastPage?: Element | undefined;
  /**
   * The date the article was last revised or updated in the database.
   * The lastRevisionDate is used for the cited article and not the date the Citation Resource is last revised.
   */
  lastRevisionDate?: string | undefined;
  _lastRevisionDate?: Element | undefined;
  /**
   * Actual or approximate number of pages or screens. Distinct from reporting the page numbers.
   */
  pageCount?: string | undefined;
  _pageCount?: Element | undefined;
  /**
   * Used for full display of pagination.
   */
  pageString?: string | undefined;
  _pageString?: Element | undefined;
  /**
   * Spring, Summer, Fall/Autumn, Winter.
   */
  publicationDateSeason?: string | undefined;
  _publicationDateSeason?: Element | undefined;
  /**
   * Text representation of the date on which the issue of the cited artifact was published.
   * The publicationDateText element is prefererntially used when a date is not represented in a form that can be handled as structured data in other elements.
   */
  publicationDateText?: string | undefined;
  _publicationDateText?: Element | undefined;
  /**
   * The collection the cited article or artifact is published in.
   */
  publishedIn?: CitationCitedArtifactPublicationFormPublishedIn | undefined;
  /**
   * Volume number of journal or other collection in which the article is published.
   */
  volume?: string | undefined;
  _volume?: Element | undefined;
}
/**
 * The artifact related to the cited artifact
 * The citedArtifact.relatesTo element uses a BackboneElement instead of the RelatedArtifact Datatype to enable use of an extended value set for the required code for the type of relationship.
 */
export interface CitationCitedArtifactRelatesTo extends BackboneElement {
  /**
   * A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.
   */
  citation?: string | undefined;
  _citation?: Element | undefined;
  /**
   * Provides additional classifiers of the related artifact.
   */
  classifier?: CodeableConcept[] | undefined;
  /**
   * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * The document being referenced, represented as an attachment. Do not use this element if using the resource element to provide the canonical to the related artifact.
   * To refer to related artifacts by URL, the FHIR Attachment Datatype includes a url element, so the path would be Citation.citedArtifact.relatesTo.document.url
   */
  document?: Attachment | undefined;
  /**
   * A short label that can be used to reference the related artifact from elsewhere in the containing artifact, such as a footnote index.
   * Though not commonly used in citation records, this could be used for referencing other articles in the abstract or explanatory notes.
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * The related artifact, such as a library, value set, profile, or other knowledge resource.
   * If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource
   */
  resource?: string | undefined;
  _resource?: Element | undefined;
  /**
   * The related artifact, if the artifact is not a canonical resource, or a resource reference to a canonical resource.
   * If both resource and resourceReference are present, they SHOULD be consistent and reference the same resource. Although relatedArtifact is intended to support references to definitional resources, there are cases where non-definitional resources can be definitional (such as Location where the kind is mode). Related artifacts SHOULD be used to reference definitional resources, and profiles SHOULD be used to make that explicit for particular use cases.
   */
  resourceReference?: Reference | undefined;
  /**
   * The type of relationship to the related artifact.
   */
  type: ('documentation'|'justification'|'citation'|'predecessor'|'successor'|'derived-from'|'depends-on'|'composed-of'|'part-of'|'amends'|'amended-with'|'appends'|'appended-with'|'cites'|'cited-by'|'comments-on'|'comment-in'|'contains'|'contained-in'|'corrects'|'correction-in'|'replaces'|'replaced-with'|'retracts'|'retracted-by'|'signs'|'similar-to'|'supports'|'supported-with'|'transforms'|'transformed-into'|'transformed-with'|'documents'|'specification-of'|'created-with'|'cite-as'|'reprint'|'reprint-of');
  _type?: Element | undefined;
}
/**
 * An effective date or period for a status of the cited artifact
 */
export interface CitationCitedArtifactStatusDate extends BackboneElement {
  /**
   * A definition of the status associated with a date or period.
   */
  activity: CodeableConcept;
  /**
   * Either occurred or expected.
   */
  actual?: boolean | undefined;
  _actual?: Element | undefined;
  /**
   * When the status started and/or ended.
   * For an instance, place the same value in both start and end elements.
   */
  period: Period;
}
/**
 * The title details of the article or artifact
 */
export interface CitationCitedArtifactTitle extends BackboneElement {
  /**
   * Used to express the specific language of the title.
   */
  language?: CodeableConcept | undefined;
  /**
   * The title of the article or artifact.
   */
  text: string;
  _text?: Element | undefined;
  /**
   * Used to express the reason for or classification of the title.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * The defined version of the cited artifact
 */
export interface CitationCitedArtifactVersion extends BackboneElement {
  /**
   * Citation for the main version of the cited artifact.
   * When referencing a baseCitation, one may inherit any data from the referenced Citation Resource and consider any data in the current Citation Resource as superceding to be version-specific.
   */
  baseCitation?: Reference | undefined;
  /**
   * The version number or other version identifier.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Used for any URL for the article or artifact cited
 */
export interface CitationCitedArtifactWebLocation extends BackboneElement {
  /**
   * A characterization of the object expected at the web location.
   * Categories that may be frequently used for study citations may include abstract, full-text, supplement, webpage, and doi-based.
   */
  classifier?: CodeableConcept[] | undefined;
  /**
   * The specific URL.
   * Persistent URLs, like doi, are preferred.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * The article or artifact being described
 */
export interface CitationCitedArtifact extends BackboneElement {
  /**
   * The abstract may be used to convey article-contained abstracts, externally-created abstracts, or other descriptive summaries.
   */
  abstract?: CitationCitedArtifactAbstract[] | undefined;
  /**
   * The assignment to an organizing scheme.
   */
  classification?: CitationCitedArtifactClassification[] | undefined;
  /**
   * This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
   */
  contributorship?: CitationCitedArtifactContributorship | undefined;
  /**
   * The status of the cited artifact.
   */
  currentState?: CodeableConcept[] | undefined;
  /**
   * When the cited artifact was accessed.
   * Use this element when citing an artifact from a potentially unstable source, such as a webpage, to note the date (and time) the source was accessed.
   */
  dateAccessed?: string | undefined;
  _dateAccessed?: Element | undefined;
  /**
   * A formal identifier that is used to identify the cited artifact when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * This element will contain unique identifiers that support de-duplication of citations. Commonly used identifiers for study citations include digital object identifier (DOI), PubMed ID (PMID), and PubMed Central ID (PMCID). To maintain interoperability, the suggested identifier.system values to use for these 3 identifiers are: DOI = "https://doi.org" PMID = "https://pubmed.ncbi.nlm.nih.gov" PMCID = "https://www.ncbi.nlm.nih.gov/pmc/"
   */
  identifier?: Identifier[] | undefined;
  /**
   * Any additional information or content for the article or artifact.
   */
  note?: Annotation[] | undefined;
  /**
   * The component of the article or artifact.
   */
  part?: CitationCitedArtifactPart | undefined;
  /**
   * If multiple, used to represent alternative forms of the article that are not separate citations.
   * A common use is a journal article with a publication date and pagination for a print version and a different publication date for the online version of the same article.
   */
  publicationForm?: CitationCitedArtifactPublicationForm[] | undefined;
  /**
   * A formal identifier that is used to identify things closely related to the cited artifact.
   * May include trial registry identifiers, e.g. NCT04372602 from clinicaltrials.gov. This related identifier would not be used as unique identifier for the cited artifact itself. Multiple published articles (each with their own unique identifier) may relate to the same study record in a research registry. Commonly used related identifiers for study registries include ClinicalTrials.gov identifier (NCTId) and PROSPERO identifier (used for registration of systematic reviews). To maintain interoperability, the suggested identifier.system values to use for these 2 identifiers are: ClinicalTrials.gov = "https://clinicaltrials.gov" PROSPERO = "https://www.crd.york.ac.uk/prospero/"
   */
  relatedIdentifier?: Identifier[] | undefined;
  /**
   * The artifact related to the cited artifact.
   * The citedArtifact.relatesTo element uses a BackboneElement instead of the RelatedArtifact Datatype to enable use of an extended value set for the required code for the type of relationship.
   */
  relatesTo?: CitationCitedArtifactRelatesTo[] | undefined;
  /**
   * An effective date or period, historical or future, actual or expected, for a status of the cited artifact.
   */
  statusDate?: CitationCitedArtifactStatusDate[] | undefined;
  /**
   * The title details of the article or artifact.
   */
  title?: CitationCitedArtifactTitle[] | undefined;
  /**
   * The defined version of the cited artifact.
   */
  version?: CitationCitedArtifactVersion | undefined;
  /**
   * Used for any URL for the article or artifact cited.
   */
  webLocation?: CitationCitedArtifactWebLocation[] | undefined;
}
/**
 * The assignment to an organizing scheme
 * Use this element if you need to classify the citation record independently from classifying the cited artifact.
 */
export interface CitationClassification extends BackboneElement {
  /**
   * The specific classification value.
   */
  classifier?: CodeableConcept[] | undefined;
  /**
   * The kind of classifier (e.g. publication type, keyword).
   */
  type?: CodeableConcept | undefined;
}
/**
 * An effective date or period for a status of the citation record
 * Use this if needed for reporting the state or status of the citation record, NOT FOR reporting the state or status of the cited article.
 */
export interface CitationStatusDate extends BackboneElement {
  /**
   * The state or status of the citation record (that will be paired with the period).
   */
  activity: CodeableConcept;
  /**
   * Whether the status date is actual (has occurred) or expected (estimated or anticipated).
   */
  actual?: boolean | undefined;
  _actual?: Element | undefined;
  /**
   * When the status started and/or ended.
   * For an instance, place the same value in both start and end elements.
   */
  period: Period;
}
/**
 * A human-readable display of key concepts to represent the citation
 */
export interface CitationSummary extends BackboneElement {
  /**
   * Format for display of the citation summary.
   */
  style?: CodeableConcept | undefined;
  /**
   * The human-readable display of the citation summary.
   */
  text: string;
  _text?: Element | undefined;
}
export interface Citation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Citation';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * Who authored or created the citation record.
   * The Citation.author element is structured to support a name (with a string datatype) and contact point information for the author/creator, and is not structured to support unique identifiers for the author. If detailed contributorship data is needed for the authorship of the citation record, then one can create a Citation Resource for the Citation Resource.
   */
  author?: ContactDetail[] | undefined;
  /**
   * The article or artifact being described.
   */
  citedArtifact?: CitationCitedArtifact | undefined;
  /**
   * The assignment to an organizing scheme.
   * Use this element if you need to classify the citation record independently from classifying the cited artifact.
   */
  classification?: CitationClassification[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * Use and/or publishing restrictions for the citation record, not for the cited artifact.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The status of the citation record.
   * Use this if needed for reporting the state or status of the citation record, NOT FOR reporting the state or status of the cited article.
   */
  currentState?: CodeableConcept[] | undefined;
  /**
   * The date (and optionally time) when the citation record was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the citation record changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the citation record. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the citation from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the citation as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the citation is presumed to be the predominant language in the place the citation was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Who edited or revised the citation record.
   * The Citation.editor element is structured to support a name (with a string datatype) and contact point information for the editor, and is not structured to support unique identifiers for the editor. If detailed contributorship data is needed for the editing of the citation record, then one can create a Citation Resource for the Citation Resource.
   */
  editor?: ContactDetail[] | undefined;
  /**
   * The period during which the citation record content was or is planned to be in active use.
   * The effective period for a citation record determines when the content is applicable for usage and is independent of publication and review dates. For example, a citation intended to be used for the year 2016 might be published in 2015.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * Who endorsed the citation record.
   * The Citation.endorser element is structured to support a name (with a string datatype) and contact point information for the endorser, and is not structured to support unique identifiers for the endorser. If detailed contributorship data is needed for the endorsement of the citation record, then one can create a Citation Resource for the Citation Resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * A Boolean value to indicate that this citation record is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of citation records that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this citation record when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Use this element if you need to identify the citation record independently from identifying the cited artifact.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the citation record is intended to be used.
   * It may be possible for the citation record to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the citation record. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Used for general notes and annotations not coded elsewhere.
   */
  note?: Annotation[] | undefined;
  /**
   * The name of the organization or individual that published the citation record.
   * Usually an organization but may be an individual. The publisher (or steward) of the citation record is the organization or individual primarily responsible for the maintenance and upkeep of the citation record. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the citation record. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this citation is needed and why it has been designed as it has.
   * This element does not describe the usage of the citation. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this citation.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Artifact related to the citation record.
   * Use this if needed for reporting artifacts related to the citation record, NOT FOR reporting artifacts related to the cited article. For example, one may use this element to report the data source for generation of the Citation Resource instance if it was automatically generated, such as conversion from a citation repository.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * Who reviewed the citation record.
   * The Citation.reviewer element is structured to support a name (with a string datatype) and contact point information for the reviewer, and is not structured to support unique identifiers for the reviewer. If detailed contributorship data is needed for the review of the citation record, then one can create a Citation Resource for the Citation Resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * The status of this summary. Enables tracking the life-cycle of the content.
   * Allows filtering of summaries that are appropriate for use versus not. Use "active" when the citation record is the version for others to actively use, "draft" while you are developing the content, and "retired" when this record should no longer be used for any purpose.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * The state or status of the citation record paired with an effective date or period for that state.
   * Use this if needed for reporting the state or status of the citation record, NOT FOR reporting the state or status of the cited article.
   */
  statusDate?: CitationStatusDate[] | undefined;
  /**
   * A human-readable display of key concepts to represent the citation.
   */
  summary?: CitationSummary[] | undefined;
  /**
   * A short, descriptive, user-friendly title for the citation record.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc. Use this element if you have a need for naming the citation record for human use, such as a display name for the citation record that is used when selecting citations from a list.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this citation record when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the meta.source element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate citation record instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the citation record when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the citation record author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different citation record instances that have the same identifier but different versions. The version can be appended to the url in a reference to allow a reference to a particular business version of the citation record with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 is newer, and a 0 if the version ordering can't successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 is newer, and a 0 if the version ordering can't successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Details of the event
 */
export interface ClaimAccident extends BackboneElement {
  /**
   * Date of an accident event  related to the products and services contained in the claim.
   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * The physical location of the accident event.
   */
  locationAddress?: Address | undefined;
  /**
   * The physical location of the accident event.
   */
  locationReference?: Reference | undefined;
  /**
   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Members of the care team
 */
export interface ClaimCareTeam extends BackboneElement {
  /**
   * Member of the team who provided the product or service.
   */
  provider: Reference;
  /**
   * The party who is billing and/or responsible for the claimed products or services.
   * Responsible might not be required when there is only a single provider listed.
   */
  responsible?: boolean | undefined;
  _responsible?: Element | undefined;
  /**
   * The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.
   * Role might not be required when there is only a single provider listed.
   */
  role?: CodeableConcept | undefined;
  /**
   * A number to uniquely identify care team entries.
   */
  sequence: number;
  /**
   * The specialization of the practitioner or provider which is applicable for this service.
   */
  specialty?: CodeableConcept | undefined;
}
/**
 * Pertinent diagnosis information
 */
export interface ClaimDiagnosis extends BackboneElement {
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisCodeableConcept?: CodeableConcept | undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisReference?: Reference | undefined;
  /**
   * Indication of whether the diagnosis was present on admission to a facility.
   */
  onAdmission?: CodeableConcept | undefined;
  /**
   * A number to uniquely identify diagnosis entries.
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  sequence: number;
  /**
   * When the condition was observed or the relative ranking.
   * For example: admitting, primary, secondary, discharge.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Event information
 */
export interface ClaimEvent extends BackboneElement {
  /**
   * A coded event such as when a service is expected or a card printed.
   */
  type: CodeableConcept;
  /**
   * A date or period in the past or future indicating when the event occurred or is expectd to occur.
   */
  whenstring?: string | undefined;
  _whenstring?: Element | undefined;
  /**
   * A date or period in the past or future indicating when the event occurred or is expectd to occur.
   */
  whenPeriod?: Period | undefined;
}
/**
 * Patient insurance information
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export interface ClaimInsurance extends BackboneElement {
  /**
   * A business agreement number established between the provider and the insurer for special business processing purposes.
   */
  businessArrangement?: string | undefined;
  _businessArrangement?: Element | undefined;
  /**
   * The result of the adjudication of the line items for the Coverage specified in this insurance.
   * Must not be specified when 'focal=true' for this insurance.
   */
  claimResponse?: Reference | undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  coverage: Reference;
  /**
   * A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  focal: boolean;
  _focal?: Element | undefined;
  /**
   * The business identifier to be used when the claim is sent for adjudication against this insurance policy.
   * Only required in jurisdictions where insurers, rather than the provider, are required to send claims to  insurers that appear after them in the list. This element is not required when 'subrogation=true'.
   */
  identifier?: Identifier | undefined;
  /**
   * Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.
   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
   */
  preAuthRef?: string[] | undefined;
  _preAuthRef?: Element[] | undefined;
  /**
   * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
   */
  sequence: number;
}
/**
 * Anatomical location
 */
export interface ClaimItemBodySite extends BackboneElement {
  /**
   * Physical service site on the patient (limb, tooth, etc.).
   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  site: CodeableReference[];
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  subSite?: CodeableConcept[] | undefined;
}
/**
 * Product or service provided
 */
export interface ClaimItemDetailSubDetail extends BackboneElement {
  /**
   * Code to identify the general type of benefits under which products and services are provided.
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: CodeableConcept | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The total amount claimed for line item.detail.subDetail. Net = unit price * quantity * factor.
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
   */
  patientPaid?: Money | undefined;
  /**
   * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
   */
  productOrServiceEnd?: CodeableConcept | undefined;
  /**
   * Identifies the program under which this may be recovered.
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * A number to uniquely identify item entries.
   */
  sequence: number;
  /**
   * The total of taxes applicable for this product or service.
   */
  tax?: Money | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Product or service provided
 */
export interface ClaimItemDetail extends BackboneElement {
  /**
   * Code to identify the general type of benefits under which products and services are provided.
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: CodeableConcept | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The total amount claimed for the group (if a grouper) or the line item.detail. Net = unit price * quantity * factor.
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
   */
  patientPaid?: Money | undefined;
  /**
   * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
   */
  productOrServiceEnd?: CodeableConcept | undefined;
  /**
   * Identifies the program under which this may be recovered.
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * A number to uniquely identify item entries.
   */
  sequence: number;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  subDetail?: ClaimItemDetailSubDetail[] | undefined;
  /**
   * The total of taxes applicable for this product or service.
   */
  tax?: Money | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Product or service provided
 */
export interface ClaimItem extends BackboneElement {
  /**
   * Physical location where the service is performed or applies.
   */
  bodySite?: ClaimItemBodySite[] | undefined;
  /**
   * CareTeam members related to this service or product.
   */
  careTeamSequence?: number[] | undefined;
  /**
   * Code to identify the general type of benefits under which products and services are provided.
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: CodeableConcept | undefined;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  detail?: ClaimItemDetail[] | undefined;
  /**
   * Diagnosis applicable for this service or product.
   */
  diagnosisSequence?: number[] | undefined;
  /**
   * Healthcare encounters related to this claim.
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  encounter?: Reference[] | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number | undefined;
  /**
   * Exceptions, special conditions and supporting information applicable for this service or product.
   */
  informationSequence?: number[] | undefined;
  /**
   * Where the product or service was provided.
   */
  locationAddress?: Address | undefined;
  /**
   * Where the product or service was provided.
   */
  locationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Where the product or service was provided.
   */
  locationReference?: Reference | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The total amount claimed for the group (if a grouper) or the line item. Net = unit price * quantity * factor.
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
   */
  patientPaid?: Money | undefined;
  /**
   * Procedures applicable for this service or product.
   */
  procedureSequence?: number[] | undefined;
  /**
   * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
   */
  productOrServiceEnd?: CodeableConcept | undefined;
  /**
   * Identifies the program under which this may be recovered.
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * Request or Referral for Goods or Service to be rendered.
   */
  request?: Reference[] | undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * A number to uniquely identify item entries.
   */
  sequence: number;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedstring?: string | undefined;
  _servicedstring?: Element | undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedPeriod?: Period | undefined;
  /**
   * The total of taxes applicable for this product or service.
   */
  tax?: Money | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Recipient of benefits payable
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
 */
export interface ClaimPayee extends BackboneElement {
  /**
   * Reference to the individual or organization to whom any payment will be made.
   * Not required if the payee is 'subscriber' or 'provider'.
   */
  party?: Reference | undefined;
  /**
   * Type of Party to be reimbursed: subscriber, provider, other.
   */
  type: CodeableConcept;
}
/**
 * Clinical procedures performed
 */
export interface ClaimProcedure extends BackboneElement {
  /**
   * Date and optionally time the procedure was performed.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureCodeableConcept?: CodeableConcept | undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureReference?: Reference | undefined;
  /**
   * A number to uniquely identify procedure entries.
   */
  sequence: number;
  /**
   * When the condition was observed or the relative ranking.
   * For example: primary, secondary.
   */
  type?: CodeableConcept[] | undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
}
/**
 * Prior or corollary claims
 * For example,  for the original treatment and follow-up exams.
 */
export interface ClaimRelated extends BackboneElement {
  /**
   * Reference to a related claim.
   */
  claim?: Reference | undefined;
  /**
   * An alternate organizational reference to the case or file to which this particular claim pertains.
   * For example, Property/Casualty insurer claim # or Workers Compensation case # .
   */
  reference?: Identifier | undefined;
  /**
   * A code to convey how the claims are related.
   * For example, prior claim or umbrella.
   */
  relationship?: CodeableConcept | undefined;
}
/**
 * Supporting information
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export interface ClaimSupportingInfo extends BackboneElement {
  /**
   * The general class of the information supplied: information; exception; accident, employment; onset, etc.
   * This may contain a category for the local bill type codes.
   */
  category: CodeableConcept;
  /**
   * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
   */
  code?: CodeableConcept | undefined;
  /**
   * Provides the reason in the situation where a reason code is required in addition to the content.
   * For example: the reason for the additional stay, or why a tooth is  missing.
   */
  reason?: CodeableConcept | undefined;
  /**
   * A number to uniquely identify supporting information entries.
   */
  sequence: number;
  /**
   * The date when or period to which this information refers.
   */
  timingstring?: string | undefined;
  _timingstring?: Element | undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingPeriod?: Period | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueReference?: Reference | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
}
/**
 * The Claim resource fulfills three information request requirements: Claim - a request for adjudication for reimbursement for products and/or services provided; Preauthorization - a request to authorize the future provision of products and/or services including an anticipated adjudication; and, Predetermination - a request for a non-bind adjudication of possible future products and/or services.
 */
export interface Claim extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Claim';
  /**
   * Details of an accident which resulted in injuries which required the products and services listed in the claim.
   */
  accident?: ClaimAccident | undefined;
  /**
   * The period for which charges are being submitted.
   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and predeterminations. Typically line item dates of service should fall within the billing period if one is specified.
   */
  billablePeriod?: Period | undefined;
  /**
   * The members of the team who provided the products and services.
   */
  careTeam?: ClaimCareTeam[] | undefined;
  /**
   * The date this resource was created.
   * This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
   */
  created: string;
  _created?: Element | undefined;
  /**
   * Information about diagnoses relevant to the claim items.
   */
  diagnosis?: ClaimDiagnosis[] | undefined;
  /**
   * A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
   * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
   */
  diagnosisRelatedGroup?: CodeableConcept | undefined;
  /**
   * Healthcare encounters related to this claim.
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  encounter?: Reference[] | undefined;
  /**
   * Individual who created the claim, predetermination or preauthorization.
   */
  enterer?: Reference | undefined;
  /**
   * Information code for an event with a corresponding date or period.
   */
  event?: ClaimEvent[] | undefined;
  /**
   * Facility where the services were provided.
   */
  facility?: Reference | undefined;
  /**
   * A code to indicate whether and for whom funds are to be reserved for future claims.
   * This field is only used for preauthorizations.
   */
  fundsReserve?: CodeableConcept | undefined;
  /**
   * A unique identifier assigned to this claim.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Financial instruments for reimbursement for the health care products and services specified on the claim.
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  insurance?: ClaimInsurance[] | undefined;
  /**
   * The Insurer who is target of the request.
   */
  insurer?: Reference | undefined;
  /**
   * A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
   */
  item?: ClaimItem[] | undefined;
  /**
   * Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefore issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   */
  originalPrescription?: Reference | undefined;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
   */
  patient: Reference;
  /**
   * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
   */
  patientPaid?: Money | undefined;
  /**
   * The party to be reimbursed for cost of the products and services according to the terms of the policy.
   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
   */
  payee?: ClaimPayee | undefined;
  /**
   * Prescription is the document/authorization given to the claim author for them to provide products and services for which consideration (reimbursement) is sought. Could be a RX for medications, an 'order' for oxygen or wheelchair or physiotherapy treatments.
   */
  prescription?: Reference | undefined;
  /**
   * The provider-required urgency of processing the request. Typical values include: stat, normal, deferred.
   * If a claim processor is unable to complete the processing as per the priority then they should generate an error and not process the request.
   */
  priority?: CodeableConcept | undefined;
  /**
   * Procedures performed on the patient relevant to the billing items with the claim.
   */
  procedure?: ClaimProcedure[] | undefined;
  /**
   * The provider which is responsible for the claim, predetermination or preauthorization.
   * Typically this field would be 1..1 where this party is accountable for the data content within the claim but is not necessarily the facility, provider group or practitioner who provided the products and services listed within this claim resource. This field is the Billing Provider, for example, a facility, provider group, lab or practitioner.
   */
  provider?: Reference | undefined;
  /**
   * The referral information received by the claim author, it is not to be used when the author generates a referral for a patient. A copy of that referral may be provided as supporting information. Some insurers require proof of referral to pay for services or to pay specialist rates for services.
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  referral?: Reference | undefined;
  /**
   * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
   * For example,  for the original treatment and follow-up exams.
   */
  relatedClaim?: ClaimRelated[] | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('active'|'cancelled'|'draft'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
   */
  subType?: CodeableConcept | undefined;
  /**
   * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
   * Often there are multiple jurisdiction specific valuesets which are required.
   */
  supportingInformation?: ClaimSupportingInfo[] | undefined;
  /**
   * The total value of the all the items in the claim.
   */
  total?: Money | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
   * The code system provides oral, pharmacy, vision, professional and institutional claim types. Those supported depends on the requirements of the jurisdiction. The valueset is extensible to accommodate other types of claims as required by the jurisdiction.
   */
  type: CodeableConcept;
  /**
   * A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.
   */
  use: ('claim'|'preauthorization'|'predetermination');
  _use?: Element | undefined;
}
/**
 * Anatomical location
 */
export interface ClaimResponseAddItemBodySite extends BackboneElement {
  /**
   * Physical service site on the patient (limb, tooth, etc.).
   * For example: Providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  site: CodeableReference[];
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  subSite?: CodeableConcept[] | undefined;
}
/**
 * Insurer added line items
 */
export interface ClaimResponseAddItemDetailSubDetail extends BackboneElement {
  /**
   * The adjudication results.
   */
  adjudication?: ClaimResponseItemAdjudication[] | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The total amount claimed for the addItem.detail.subDetail. Net = unit price * quantity * factor.
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[] | undefined;
  /**
   * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
   */
  productOrServiceEnd?: CodeableConcept | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * The high-level results of the adjudication if adjudication has been performed.
   */
  reviewOutcome?: ClaimResponseItemReviewOutcome | undefined;
  /**
   * The total of taxes applicable for this product or service.
   */
  tax?: Money | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Insurer added line details
 */
export interface ClaimResponseAddItemDetail extends BackboneElement {
  /**
   * The adjudication results.
   */
  adjudication?: ClaimResponseItemAdjudication[] | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The total amount claimed for the group (if a grouper) or the addItem.detail. Net = unit price * quantity * factor.
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[] | undefined;
  /**
   * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
   */
  productOrServiceEnd?: CodeableConcept | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * The high-level results of the adjudication if adjudication has been performed.
   */
  reviewOutcome?: ClaimResponseItemReviewOutcome | undefined;
  /**
   * The third-tier service adjudications for payor added services.
   */
  addedItemSubDetail?: ClaimResponseAddItemDetailSubDetail[] | undefined;
  /**
   * The total of taxes applicable for this product or service.
   */
  tax?: Money | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Insurer added line items
 */
export interface ClaimResponseAddItem extends BackboneElement {
  /**
   * The adjudication results.
   */
  adjudication?: ClaimResponseItemAdjudication[] | undefined;
  /**
   * Physical location where the service is performed or applies.
   */
  bodySite?: ClaimResponseAddItemBodySite[] | undefined;
  /**
   * The second-tier service adjudications for payor added services.
   */
  addedItemDetail?: ClaimResponseAddItemDetail[] | undefined;
  /**
   * The sequence number of the details within the claim item which this line is intended to replace.
   */
  detailSequence?: number[] | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number | undefined;
  /**
   * Claim items which this service line is intended to replace.
   */
  itemSequence?: number[] | undefined;
  /**
   * Where the product or service was provided.
   */
  locationAddress?: Address | undefined;
  /**
   * Where the product or service was provided.
   */
  locationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Where the product or service was provided.
   */
  locationReference?: Reference | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The total amount claimed for the group (if a grouper) or the addItem. Net = unit price * quantity * factor.
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[] | undefined;
  /**
   * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
   */
  productOrServiceEnd?: CodeableConcept | undefined;
  /**
   * Identifies the program under which this may be recovered.
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The providers who are authorized for the services rendered to the patient.
   */
  provider?: Reference[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * Request or Referral for Goods or Service to be rendered.
   */
  request?: Reference[] | undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * The high-level results of the adjudication if adjudication has been performed.
   */
  reviewOutcome?: ClaimResponseItemReviewOutcome | undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedstring?: string | undefined;
  _servicedstring?: Element | undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedPeriod?: Period | undefined;
  /**
   * The sequence number of the sub-details within the details within the claim item which this line is intended to replace.
   */
  subdetailSequence?: number[] | undefined;
  /**
   * The total of taxes applicable for this product or service.
   */
  tax?: Money | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Processing errors
 * If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
 */
export interface ClaimResponseError extends BackboneElement {
  /**
   * An error code, from a specified code system, which details why the claim could not be adjudicated.
   */
  code: CodeableConcept;
  /**
   * The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
   */
  detailSequence?: number | undefined;
  /**
   * A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.
   * The root of the FHIRPath is the resource or bundle that generated OperationOutcome.  Each FHIRPath SHALL resolve to a single node.
   */
  expression?: string[] | undefined;
  _expression?: Element[] | undefined;
  /**
   * The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
   */
  itemSequence?: number | undefined;
  /**
   * The sequence number of the sub-detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
   */
  subDetailSequence?: number | undefined;
}
/**
 * Event information
 */
export interface ClaimResponseEvent extends BackboneElement {
  /**
   * A coded event such as when a service is expected or a card printed.
   */
  type: CodeableConcept;
  /**
   * A date or period in the past or future indicating when the event occurred or is expectd to occur.
   */
  whenstring?: string | undefined;
  _whenstring?: Element | undefined;
  /**
   * A date or period in the past or future indicating when the event occurred or is expectd to occur.
   */
  whenPeriod?: Period | undefined;
}
/**
 * Patient insurance information
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export interface ClaimResponseInsurance extends BackboneElement {
  /**
   * A business agreement number established between the provider and the insurer for special business processing purposes.
   */
  businessArrangement?: string | undefined;
  _businessArrangement?: Element | undefined;
  /**
   * The result of the adjudication of the line items for the Coverage specified in this insurance.
   * Must not be specified when 'focal=true' for this insurance.
   */
  claimResponse?: Reference | undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  coverage: Reference;
  /**
   * A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  focal: boolean;
  _focal?: Element | undefined;
  /**
   * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
   */
  sequence: number;
}
/**
 * Adjudication details
 */
export interface ClaimResponseItemAdjudication extends BackboneElement {
  /**
   * Monetary amount associated with the category.
   * For example: amount submitted, eligible amount, co-payment, and benefit payable.
   */
  amount?: Money | undefined;
  /**
   * A code to indicate the information type of this adjudication record. Information types may include the value submitted, maximum values or percentages allowed or payable under the plan, amounts that: the patient is responsible for in aggregate or pertaining to this item; amounts paid by other coverages; and, the benefit payable for this item.
   * For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  category: CodeableConcept;
  /**
   * A non-monetary value associated with the category. Mutually exclusive to the amount element above.
   * For example: eligible percentage or co-payment percentage.
   */
  quantity?: Quantity | undefined;
  /**
   * A code supporting the understanding of the adjudication result and explaining variance from expected amount.
   * For example may indicate that the funds for this benefit type have been exhausted.
   */
  reason?: CodeableConcept | undefined;
}
/**
 * Adjudication for claim sub-details
 */
export interface ClaimResponseItemDetailSubDetail extends BackboneElement {
  /**
   * The adjudication results.
   */
  adjudication?: ClaimResponseItemAdjudication[] | undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[] | undefined;
  /**
   * The high-level results of the adjudication if adjudication has been performed.
   */
  reviewOutcome?: ClaimResponseItemReviewOutcome | undefined;
  /**
   * A number to uniquely reference the claim sub-detail entry.
   */
  subDetailSequence: number;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
}
/**
 * Adjudication for claim details
 */
export interface ClaimResponseItemDetail extends BackboneElement {
  /**
   * The adjudication results.
   */
  adjudication?: ClaimResponseItemAdjudication[] | undefined;
  /**
   * A number to uniquely reference the claim detail entry.
   */
  detailSequence: number;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[] | undefined;
  /**
   * The high-level results of the adjudication if adjudication has been performed.
   */
  reviewOutcome?: ClaimResponseItemReviewOutcome | undefined;
  /**
   * A sub-detail adjudication of a simple product or service.
   */
  subDetail?: ClaimResponseItemDetailSubDetail[] | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
}
/**
 * Adjudication results
 */
export interface ClaimResponseItemReviewOutcome extends BackboneElement {
  /**
   * The result of the claim, predetermination, or preauthorization adjudication.
   * The element is used to indicate the current state of the adjudication overall for the claim resource, for example: the request has been held (pended) for adjudication processing, for manual review or other reasons; that it has been processed and will be paid, or the outstanding paid, as submitted (approved); that no amount will be paid (denied); or that some amount between zero and the submitted amount will be paid (partial).
   */
  decision?: CodeableConcept | undefined;
  /**
   * The time frame during which this authorization is effective.
   */
  preAuthPeriod?: Period | undefined;
  /**
   * Reference from the Insurer which is used in later communications which refers to this adjudication.
   * This value is only present on preauthorization adjudications.
   */
  preAuthRef?: string | undefined;
  _preAuthRef?: Element | undefined;
  /**
   * The reasons for the result of the claim, predetermination, or preauthorization adjudication.
   */
  reason?: CodeableConcept[] | undefined;
}
/**
 * Adjudication for claim line items
 */
export interface ClaimResponseItem extends BackboneElement {
  /**
   * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
   */
  adjudication?: ClaimResponseItemAdjudication[] | undefined;
  /**
   * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  itemDetail?: ClaimResponseItemDetail[] | undefined;
  /**
   * A number to uniquely reference the claim item entries.
   */
  itemSequence: number;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[] | undefined;
  /**
   * The high-level results of the adjudication if adjudication has been performed.
   */
  reviewOutcome?: ClaimResponseItemReviewOutcome | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
}
/**
 * Payment Details
 */
export interface ClaimResponsePayment extends BackboneElement {
  /**
   * Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
   * Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
   */
  adjustment?: Money | undefined;
  /**
   * Reason for the payment adjustment.
   */
  adjustmentReason?: CodeableConcept | undefined;
  /**
   * Benefits payable less any payment adjustment.
   */
  amount: Money;
  /**
   * Estimated date the payment will be issued or the actual issue date of payment.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Issuer's unique identifier for the payment instrument.
   * For example: EFT number or check number.
   */
  identifier?: Identifier | undefined;
  /**
   * Whether this represents partial or complete payment of the benefits payable.
   */
  type: CodeableConcept;
}
/**
 * Note concerning adjudication
 */
export interface ClaimResponseProcessNote extends BackboneElement {
  /**
   * A code to define the language used in the text of the note.
   * Only required if the language is different from the resource language.
   */
  language?: CodeableConcept | undefined;
  /**
   * A number to uniquely identify a note entry.
   */
  number?: number | undefined;
  /**
   * The explanation or description associated with the processing.
   */
  text: string;
  _text?: Element | undefined;
  /**
   * The business purpose of the note text.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Adjudication totals
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export interface ClaimResponseTotal extends BackboneElement {
  /**
   * Monetary total amount associated with the category.
   */
  amount: Money;
  /**
   * A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
   * For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  category: CodeableConcept;
}
export interface ClaimResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ClaimResponse';
  /**
   * The first-tier service adjudications for payor added product or service lines.
   */
  addedItem?: ClaimResponseAddItem[] | undefined;
  /**
   * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
   */
  adjudication?: ClaimResponseItemAdjudication[] | undefined;
  /**
   * Request for additional supporting or authorizing information.
   * For example: professional reports, documents, images, clinical resources, or accident reports.
   */
  communicationRequest?: Reference[] | undefined;
  /**
   * The date this resource was created.
   */
  created: string;
  _created?: Element | undefined;
  /**
   * The result of the claim, predetermination, or preauthorization adjudication.
   * The element is used to indicate the current state of the adjudication overall for the claim resource, for example: the request has been held (pended) for adjudication processing, for manual review or other reasons; that it has been processed and will be paid, or the outstanding paid, as submitted (approved); that no amount will be paid (denied); or that some amount between zero and the submitted amount will be paid (partial).
   */
  decision?: CodeableConcept | undefined;
  /**
   * A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
   * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
   */
  diagnosisRelatedGroup?: CodeableConcept | undefined;
  /**
   * A human readable description of the status of the adjudication.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * Healthcare encounters related to this claim.
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  encounter?: Reference[] | undefined;
  /**
   * Errors encountered during the processing of the adjudication.
   * If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
   */
  error?: ClaimResponseError[] | undefined;
  /**
   * Information code for an event with a corresponding date or period.
   */
  event?: ClaimResponseEvent[] | undefined;
  /**
   * The actual form, by reference or inclusion, for printing the content or an EOB.
   * Needed to permit insurers to include the actual form.
   */
  form?: Attachment | undefined;
  /**
   * A code for the form to be used for printing the content.
   * May be needed to identify specific jurisdictional forms.
   */
  formCode?: CodeableConcept | undefined;
  /**
   * A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
   * Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
   */
  fundsReserve?: CodeableConcept | undefined;
  /**
   * A unique identifier assigned to this claim response.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Financial instruments for reimbursement for the health care products and services specified on the claim.
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  insurance?: ClaimResponseInsurance[] | undefined;
  /**
   * The party responsible for authorization, adjudication and reimbursement.
   */
  insurer?: Reference | undefined;
  /**
   * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
   */
  item?: ClaimResponseItem[] | undefined;
  /**
   * The outcome of the claim, predetermination, or preauthorization processing.
   * The resource may be used to indicate that the Claim/Preauthorization/Pre-determination has been received but processing has not begun (queued); that it has been processed and one or more errors have been detected (error); no errors were detected and some of the adjudication processing has been performed (partial); or all of the adjudication processing has completed without errors (complete).
   */
  outcome: ('queued'|'complete'|'error'|'partial');
  _outcome?: Element | undefined;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought.
   */
  patient: Reference;
  /**
   * Type of Party to be reimbursed: subscriber, provider, other.
   */
  payeeType?: CodeableConcept | undefined;
  /**
   * Payment details for the adjudication of the claim.
   */
  payment?: ClaimResponsePayment | undefined;
  /**
   * The time frame during which this authorization is effective.
   */
  preAuthPeriod?: Period | undefined;
  /**
   * Reference from the Insurer which is used in later communications which refers to this adjudication.
   * This value is only present on preauthorization adjudications.
   */
  preAuthRef?: string | undefined;
  _preAuthRef?: Element | undefined;
  /**
   * A note that describes or explains adjudication results in a human readable form.
   */
  note?: ClaimResponseProcessNote[] | undefined;
  /**
   * Original request resource reference.
   */
  request?: Reference | undefined;
  /**
   * The provider which is responsible for the claim, predetermination or preauthorization.
   * Typically this field would be 1..1 where this party is accountable for the data content within the claim but is not necessarily the facility, provider group or practitioner who provided the products and services listed within this claim resource. This field is the Billing Provider, for example, a facility, provider group, lab or practitioner..
   */
  requestor?: Reference | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('active'|'cancelled'|'draft'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
   */
  subType?: CodeableConcept | undefined;
  /**
   * Categorized monetary totals for the adjudication.
   * Totals for amounts submitted, co-pays, benefits payable etc.
   */
  total?: ClaimResponseTotal[] | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
   * This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
   */
  type: CodeableConcept;
  /**
   * A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.
   */
  use: ('claim'|'preauthorization'|'predetermination');
  _use?: Element | undefined;
}
/**
 * Possible or likely findings and diagnoses
 */
export interface ClinicalImpressionFinding extends BackboneElement {
  /**
   * Which investigations support finding or diagnosis.
   */
  basis?: string | undefined;
  _basis?: Element | undefined;
  /**
   * Specific text, code or reference for finding or diagnosis, which may include ruled-out or resolved conditions.
   */
  item?: CodeableReference | undefined;
}
export interface ClinicalImpression extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ClinicalImpression';
  /**
   * Change in the status/pattern of a subject's condition since previously assessed, such as worsening, improving, or no change.  It is a subjective assessment of the direction of the change.
   */
  changePattern?: CodeableConcept | undefined;
  /**
   * Indicates when the documentation of the assessment was complete.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A summary of the context and/or cause of the assessment - why / where it was performed, and what patient events/status prompted it.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The point in time or period over which the subject was assessed.
   * This SHOULD be accurate to at least the minute, though some assessments only have a known date.
   */
  effectivestring?: string | undefined;
  _effectivestring?: Element | undefined;
  /**
   * The point in time or period over which the subject was assessed.
   * This SHOULD be accurate to at least the minute, though some assessments only have a known date.
   */
  effectivePeriod?: Period | undefined;
  /**
   * The Encounter during which this ClinicalImpression was created or to which the creation of this record is tightly associated.
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  encounter?: Reference | undefined;
  /**
   * Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
   */
  finding?: ClinicalImpressionFinding[] | undefined;
  /**
   * Business identifiers assigned to this clinical impression by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Commentary about the impression, typically recorded after the impression itself was made, though supplemental notes by the original author could also appear.
   * Don't use this element for content that should more properly appear as one of the specific elements of the impression.
   */
  note?: Annotation[] | undefined;
  /**
   * The clinician performing the assessment.
   */
  performer?: Reference | undefined;
  /**
   * A reference to the last assessment that was conducted on this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes.
   * It is always likely that multiple previous assessments exist for a patient. The point of quoting a previous assessment is that this assessment is relative to it (see resolved).
   */
  previous?: Reference | undefined;
  /**
   * A list of the relevant problems/conditions for a patient.
   * e.g. The patient is a pregnant, has congestive heart failure, has an ‎Adenocarcinoma, and is allergic to penicillin.
   */
  problem?: Reference[] | undefined;
  /**
   * Estimate of likely outcome.
   */
  prognosisCodeableConcept?: CodeableConcept[] | undefined;
  /**
   * RiskAssessment expressing likely outcome.
   */
  prognosisReference?: Reference[] | undefined;
  /**
   * Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.
   */
  protocol?: string[] | undefined;
  _protocol?: Element[] | undefined;
  /**
   * Identifies the workflow status of the assessment.
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the clinical impression as not currently valid.
   */
  status: ('preparation'|'in-progress'|'not-done'|'on-hold'|'stopped'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * Captures the reason for the current state of the ClinicalImpression.
   * This is generally only used for "exception" statuses such as "not-done", "on-hold" or "stopped".
   */
  statusReason?: CodeableConcept | undefined;
  /**
   * The patient or group of individuals assessed as part of this record.
   */
  subject: Reference;
  /**
   * A text summary of the investigations and the diagnosis.
   */
  summary?: string | undefined;
  _summary?: Element | undefined;
  /**
   * Information supporting the clinical impression, which can contain investigation results.
   */
  supportingInfo?: Reference[] | undefined;
}
/**
 * Information about use of the product in relation to other therapies described as part of the contraindication
 */
export interface ClinicalUseDefinitionContraindicationOtherTherapy extends BackboneElement {
  /**
   * The type of relationship between the medicinal product indication or contraindication and another therapy.
   */
  relationshipType: CodeableConcept;
  /**
   * Reference to a specific medication (active substance, medicinal product or class of products, biological, food etc.) as part of an indication or contraindication.
   */
  treatment: CodeableReference;
}
/**
 * Specifics for when this is a contraindication
 */
export interface ClinicalUseDefinitionContraindication extends BackboneElement {
  /**
   * An expression that returns true or false, indicating whether the indication is applicable or not, after having applied its other elements.
   * The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
   */
  applicability?: Expression | undefined;
  /**
   * A comorbidity (concurrent condition) or coinfection.
   */
  comorbidity?: CodeableReference[] | undefined;
  /**
   * The status of the disease or symptom for the contraindication, for example "chronic" or "metastatic".
   */
  diseaseStatus?: CodeableReference | undefined;
  /**
   * The situation that is being documented as contraindicating against this item.
   */
  diseaseSymptomProcedure?: CodeableReference | undefined;
  /**
   * The indication which this is a contraidication for.
   */
  indication?: Reference[] | undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies described as part of the contraindication.
   */
  otherTherapy?: ClinicalUseDefinitionContraindicationOtherTherapy[] | undefined;
}
/**
 * Specifics for when this is an indication
 */
export interface ClinicalUseDefinitionIndication extends BackboneElement {
  /**
   * An expression that returns true or false, indicating whether the indication is applicable or not, after having applied its other elements.
   * The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
   */
  applicability?: Expression | undefined;
  /**
   * A comorbidity (concurrent condition) or coinfection as part of the indication.
   */
  comorbidity?: CodeableReference[] | undefined;
  /**
   * The status of the disease or symptom for the indication, for example "chronic" or "metastatic".
   */
  diseaseStatus?: CodeableReference | undefined;
  /**
   * The situation that is being documented as an indicaton for this item.
   */
  diseaseSymptomProcedure?: CodeableReference | undefined;
  /**
   * Timing or duration information, that may be associated with use with the indicated condition e.g. Adult patients suffering from myocardial infarction (from a few days until less than 35 days), ischaemic stroke (from 7 days until less than 6 months).
   */
  durationRange?: Range | undefined;
  /**
   * Timing or duration information, that may be associated with use with the indicated condition e.g. Adult patients suffering from myocardial infarction (from a few days until less than 35 days), ischaemic stroke (from 7 days until less than 6 months).
   */
  durationstring?: string | undefined;
  _durationstring?: Element | undefined;
  /**
   * The intended effect, aim or strategy to be achieved.
   */
  intendedEffect?: CodeableReference | undefined;
  /**
   * Information about the use of the medicinal product in relation to other therapies described as part of the indication.
   */
  otherTherapy?: ClinicalUseDefinitionContraindicationOtherTherapy[] | undefined;
  /**
   * An unwanted side effect or negative outcome that may happen if you use the drug (or other subject of this resource) for this indication.
   */
  undesirableEffect?: Reference[] | undefined;
}
/**
 * The specific medication, product, food etc. or laboratory test that interacts
 */
export interface ClinicalUseDefinitionInteractionInteractant extends BackboneElement {
  /**
   * The specific medication, product, food, substance etc. or laboratory test that interacts.
   */
  itemCodeableConcept?: CodeableConcept | undefined;
  /**
   * The specific medication, product, food, substance etc. or laboratory test that interacts.
   */
  itemReference?: Reference | undefined;
}
/**
 * Specifics for when this is an interaction
 */
export interface ClinicalUseDefinitionInteraction extends BackboneElement {
  /**
   * The effect of the interaction, for example "reduced gastric absorption of primary medication".
   */
  effect?: CodeableReference | undefined;
  /**
   * The incidence of the interaction, e.g. theoretical, observed.
   */
  incidence?: CodeableConcept | undefined;
  /**
   * The specific medication, product, food, substance etc. or laboratory test that interacts.
   */
  interactant?: ClinicalUseDefinitionInteractionInteractant[] | undefined;
  /**
   * Actions for managing the interaction.
   */
  management?: CodeableConcept[] | undefined;
  /**
   * The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.
   */
  type?: CodeableConcept | undefined;
}
/**
 * A possible negative outcome from the use of this treatment
 */
export interface ClinicalUseDefinitionUndesirableEffect extends BackboneElement {
  /**
   * High level classification of the effect.
   */
  classification?: CodeableConcept | undefined;
  /**
   * How often the effect is seen.
   */
  frequencyOfOccurrence?: CodeableConcept | undefined;
  /**
   * The situation in which the undesirable effect may manifest.
   */
  symptomConditionEffect?: CodeableReference | undefined;
}
/**
 * Critical environmental, health or physical risks or hazards. For example 'Do not operate heavy machinery', 'May cause drowsiness'
 */
export interface ClinicalUseDefinitionWarning extends BackboneElement {
  /**
   * A coded or unformatted textual definition of this warning.
   */
  code?: CodeableConcept | undefined;
  /**
   * A textual definition of this warning, with formatting.
   */
  description?: string | undefined;
  _description?: Element | undefined;
}
export interface ClinicalUseDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ClinicalUseDefinition';
  /**
   * A categorisation of the issue, primarily for dividing warnings into subject heading areas such as "Pregnancy and Lactation", "Overdose", "Effects on Ability to Drive and Use Machines".
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Specifics for when this is a contraindication.
   */
  contraindication?: ClinicalUseDefinitionContraindication | undefined;
  /**
   * Business identifier for this issue.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Specifics for when this is an indication.
   */
  indication?: ClinicalUseDefinitionIndication | undefined;
  /**
   * Specifics for when this is an interaction.
   */
  interaction?: ClinicalUseDefinitionInteraction | undefined;
  /**
   * Logic used by the clinical use definition.
   */
  library?: string[] | undefined;
  _library?: Element[] | undefined;
  /**
   * The population group to which this applies.
   */
  population?: Reference[] | undefined;
  /**
   * Whether this is a current issue or one that has been retired etc.
   */
  status?: CodeableConcept | undefined;
  /**
   * The medication, product, substance, device, procedure etc. for which this is an indication.
   */
  subject?: Reference[] | undefined;
  /**
   * indication | contraindication | interaction | undesirable-effect | warning.
   */
  type: ('indication'|'contraindication'|'interaction'|'undesirable-effect'|'warning');
  _type?: Element | undefined;
  /**
   * Describe the possible undesirable effects (negative outcomes) from the use of the medicinal product as treatment.
   */
  undesirableEffect?: ClinicalUseDefinitionUndesirableEffect | undefined;
  /**
   * A critical piece of information about environmental, health or physical risks or hazards that serve as caution to the user. For example 'Do not operate heavy machinery', 'May cause drowsiness', or 'Get medical advice/attention if you feel unwell'.
   */
  warning?: ClinicalUseDefinitionWarning | undefined;
}
/**
 * Additional representations for the concept
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
export interface CodeSystemConceptDesignation extends BackboneElement {
  /**
   * Additional codes that detail how this designation would be used, if there is more than one use.
   * This was added rather than increasing the cardinality of .use to 0..* in order to maintain backward compatibility.
   */
  additionalUse?: Coding[] | undefined;
  /**
   * The language this designation is defined for.
   * In the absence of a language, the resource language applies.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * A code that details how this designation would be used.
   * If no use is provided, the designation can be assumed to be suitable for general display to a human user.
   */
  use?: Coding | undefined;
  /**
   * The text value for this designation.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Property value for the concept
 */
export interface CodeSystemConceptProperty extends BackboneElement {
  /**
   * A code that is a reference to CodeSystem.property.code.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * The value of this property.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of this property.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The value of this property.
   */
  valueCoding?: Coding | undefined;
  /**
   * The value of this property.
   */
  valuenumber?: number | undefined;
}
/**
 * Concepts in the code system
 * If this is empty, it means that the code system resource does not represent the content of the code system.
 */
export interface CodeSystemConcept extends BackboneElement {
  /**
   * A code - a text symbol - that uniquely identifies the concept within the code system.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
   */
  concept?: CodeSystemConcept[] | undefined;
  /**
   * The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
   * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
   */
  designation?: CodeSystemConceptDesignation[] | undefined;
  /**
   * A human readable string that is the recommended default way to present this concept to a user.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * A property value for this concept.
   */
  conceptProperty?: CodeSystemConceptProperty[] | undefined;
}
/**
 * Filter that can be used in a value set
 * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
 */
export interface CodeSystemFilter extends BackboneElement {
  /**
   * The code that identifies this filter when it is used as a filter in [ValueSet](valueset.html#).compose.include.filter.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * A description of how or why the filter is used.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A list of operators that can be used with the filter.
   */
  operator: ('='|'is-a'|'descendent-of'|'is-not-a'|'regex'|'in'|'not-in'|'generalizes'|'child-of'|'descendent-leaf'|'exists')[];
  _operator?: Element[] | undefined;
  /**
   * A description of what the value for the filter should be.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Additional information supplied about each concept
 * Multiple occurrences of CodeSystem.concept.property may occur for a CodeSystem.property where     CodeSystem.concept.property.code is the same and CodeSystem.concept.property.value differs. For example: multiple designations for a single concept.
 */
export interface CodeSystemProperty extends BackboneElement {
  /**
   * A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * A description of the property- why it is defined, and how its value might be used.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept).
   */
  type: ('code'|'Coding'|'string'|'integer'|'boolean'|'dateTime'|'decimal');
  _type?: Element | undefined;
  /**
   * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
   */
  uri?: string | undefined;
  _uri?: Element | undefined;
}
export interface CodeSystem extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CodeSystem';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the CodeSystem.
   */
  author?: ContactDetail[] | undefined;
  /**
   * If code comparison is case sensitive when codes within this system are compared to each other.
   * If this value is missing, then it is not specified whether a code system is case sensitive or not. When the rule is not known, Postel's law should be followed: produce codes with the correct case, and accept codes in any case. This element is primarily provided to support validation software.
   */
  caseSensitive?: boolean | undefined;
  _caseSensitive?: Element | undefined;
  /**
   * The code system defines a compositional (post-coordination) grammar.
   * Note that the code system resource does not define what the compositional grammar is, only whether or not there is one.
   */
  compositional?: boolean | undefined;
  _compositional?: Element | undefined;
  /**
   * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meanings of the hierarchical relationships are.
   * If this is empty, it means that the code system resource does not represent the content of the code system.
   */
  conceptDefinition?: CodeSystemConcept[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
   */
  content: ('not-present'|'example'|'fragment'|'complete'|'supplement');
  _content?: Element | undefined;
  /**
   * A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system.
   * ... Sometimes, the copyright differs between the code system and the codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The total number of concepts defined by the code system. Where the code system has a compositional grammar, the basis of this count is defined by the system steward.
   * The count of concepts defined in this resource cannot be more than this value but may be less for several reasons - see the content element.
   */
  count?: number | undefined;
  /**
   * The date  (and optionally time) when the code system was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the code system changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the code system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the code system from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the code system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the code system is presumed to be the predominant language in the place the code system was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the CodeSystem.
   */
  editor?: ContactDetail[] | undefined;
  /**
   * The period during which the CodeSystem content was or is planned to be in active use.
   * The effective period for a CodeSystem  determines when the content is applicable for usage and is independent of publication and review dates. For example, a system intended to be used for the year 2016 might be published in 2015.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * An individual or organization asserted by the publisher to be responsible for officially endorsing the CodeSystem for use in some setting.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * A Boolean value to indicate that this code system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of code systems that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A filter that can be used in a value set compose statement when selecting concepts using a filter.
   * Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
   */
  filter?: CodeSystemFilter[] | undefined;
  /**
   * The meaning of the hierarchy of concepts as represented in this resource.
   * Note that other representations might have a different hierarchy or none at all, and represent the information using properties.
   */
  hierarchyMeaning?: ('grouped-by'|'is-a'|'part-of'|'classified-with') | undefined;
  _hierarchyMeaning?: Element | undefined;
  /**
   * A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this code system outside of FHIR, where it is not possible to use the logical URI.  Note that HL7 defines at least three identifiers for many of its code systems - the FHIR canonical URL, the OID and the V2 Table 0396 mnemonic code.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the code system is intended to be used.
   * It may be possible for the code system to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the code system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A property defines an additional slot through which additional information can be provided about a concept.
   * Multiple occurrences of CodeSystem.concept.property may occur for a CodeSystem.property where     CodeSystem.concept.property.code is the same and CodeSystem.concept.property.value differs. For example: multiple designations for a single concept.
   */
  property?: CodeSystemProperty[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the code system.
   * Usually an organization but may be an individual. The publisher (or steward) of the code system is the organization or individual primarily responsible for the maintenance and upkeep of the code system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the code system. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this code system is needed and why it has been designed as it has.
   * This element does not describe the usage of the code system. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this code system.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the CodeSystem.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * The status of this code system. Enables tracking the life-cycle of the content.
   * Allows filtering of code systems that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * The canonical URL of the code system that this code system supplement is adding designations and properties to.
   * The most common use of a code system supplement is to add additional language support.
   */
  supplements?: string | undefined;
  _supplements?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the code system.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptions related to the content of the CodeSystem. Topics provide a high-level categorization as well as keywords for the CodeSystem that can be useful for filtering and searching.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * An absolute URI that is used to identify this code system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this code system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the code system is stored on different servers. This is used in [Coding](datatypes.html#Coding).system.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate code system instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * Canonical reference to the value set that contains all codes in the code system independent of code status.
   * The definition of the value set SHALL include all codes from this code system, independent of concept status, and only codes from this code system. It SHALL be immutable, and operations SHOULD support validation of any allowed code compositions.
   */
  valueSet?: string | undefined;
  _valueSet?: Element | undefined;
  /**
   * The identifier that is used to identify this version of the code system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the code system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. This is used in [Coding](datatypes.html#Coding).version.
   * There may be different code system instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the code system with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which CodeSystem is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which CodeSystem is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
  /**
   * This flag is used to signify that the code system does not commit to concept permanence across versions. If true, a version must be specified when referencing this code system.
   * Best practice is that code systems do not redefine concepts, or that if concepts are redefined, a new code system definition is created. But this is not always possible, so some code systems may be defined as 'versionNeeded'.
   * Most code systems occasionally refine the displays defined for concepts between versions. Contexts in which the concept display values are validated may require that the version be specified for some code systems irrespective of the value of this property.
   */
  versionNeeded?: boolean | undefined;
  _versionNeeded?: Element | undefined;
}
/**
 * Message payload
 */
export interface CommunicationPayload extends BackboneElement {
  /**
   * A communicated content (or for multi-part communications, one portion of the communication).
   * The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.
   * If the content isn't codified, contentCodeableConcept.text can be used.  
   * When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
   */
  contentAttachment?: Attachment | undefined;
  /**
   * A communicated content (or for multi-part communications, one portion of the communication).
   * The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.
   * If the content isn't codified, contentCodeableConcept.text can be used.  
   * When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
   */
  contentCodeableConcept?: CodeableConcept | undefined;
  /**
   * A communicated content (or for multi-part communications, one portion of the communication).
   * The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.
   * If the content isn't codified, contentCodeableConcept.text can be used.  
   * When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
   */
  contentReference?: Reference | undefined;
}
export interface Communication extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Communication';
  /**
   * Other resources that pertain to this communication and to which this communication should be associated.
   * Don't use Communication.about element when a more specific element exists, such as basedOn or reasonReference.
   */
  about?: Reference[] | undefined;
  /**
   * An order, proposal or plan fulfilled in whole or in part by this Communication.
   * This must point to some sort of a 'Request' resource, such as CarePlan, CommunicationRequest, ServiceRequest, MedicationRequest, etc.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The type of message conveyed such as alert, notification, reminder, instruction, etc.
   * There may be multiple axes of categorization and one communication may serve multiple purposes.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The Encounter during which this Communication was created or to which the creation of this record is tightly associated.
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  encounter?: Reference | undefined;
  /**
   * Business identifiers assigned to this communication by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Prior communication that this communication is in response to.
   */
  inResponseTo?: Reference[] | undefined;
  /**
   * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
   */
  instantiatesCanonical?: string[] | undefined;
  _instantiatesCanonical?: Element[] | undefined;
  /**
   * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
   * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
   */
  instantiatesUri?: string[] | undefined;
  _instantiatesUri?: Element[] | undefined;
  /**
   * A channel that was used for this communication (e.g. email, fax).
   */
  medium?: CodeableConcept[] | undefined;
  /**
   * Additional notes or commentary about the communication by the sender, receiver or other interested parties.
   */
  note?: Annotation[] | undefined;
  /**
   * A larger event (e.g. Communication, Procedure) of which this particular communication is a component or step.
   * The event the communication was part of - e.g. if you disclosed as "part" of counselling, it would be partOf that Procedure.
   */
  partOf?: Reference[] | undefined;
  /**
   * Text, attachment(s), or resource(s) that was communicated to the recipient.
   */
  payload?: CommunicationPayload[] | undefined;
  /**
   * Characterizes how quickly the planned or in progress communication must be addressed. Includes concepts such as stat, urgent, routine.
   * Used to prioritize workflow (such as which communication to read first) when the communication is planned or in progress.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * The reason or justification for the communication.
   * Textual reasons can be captured using reason.concept.text.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * The time when this communication arrived at the destination.
   */
  received?: string | undefined;
  _received?: Element | undefined;
  /**
   * The entity (e.g. person, organization, clinical information system, care team or device) which is the target of the communication.
   * If receipts need to be tracked by an individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either receipts are not tracked (e.g. a mass mail-out) or a receipt is captured in aggregate (all emails confirmed received by a particular time).
   */
  recipient?: Reference[] | undefined;
  /**
   * The entity (e.g. person, organization, clinical information system, or device) which is the source of the communication.
   */
  sender?: Reference | undefined;
  /**
   * The time when this communication was sent.
   */
  sent?: string | undefined;
  _sent?: Element | undefined;
  /**
   * The status of the transmission.
   * This element is labeled as a modifier because the status contains the codes aborted and entered-in-error that mark the communication as not currently valid.
   */
  status: ('preparation'|'in-progress'|'not-done'|'on-hold'|'stopped'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * Captures the reason for the current state of the Communication.
   * This is generally only used for "exception" statuses such as "not-done", "suspended" or "aborted". The reason for performing the event at all is captured in reasonCode, not here.
   */
  statusReason?: CodeableConcept | undefined;
  /**
   * The patient or group that was the focus of this communication.
   */
  subject?: Reference | undefined;
  /**
   * Description of the purpose/content, similar to a subject line in an email.
   * Communication.topic.text can be used without any codings.
   */
  topic?: CodeableConcept | undefined;
}
/**
 * Message payload
 */
export interface CommunicationRequestPayload extends BackboneElement {
  /**
   * The communicated content (or for multi-part communications, one portion of the communication).
   * The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.
   * If the content isn't codified, contentCodeableConcept.text can be used.  
   * When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
   */
  contentAttachment?: Attachment | undefined;
  /**
   * The communicated content (or for multi-part communications, one portion of the communication).
   * The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.
   * If the content isn't codified, contentCodeableConcept.text can be used.  
   * When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
   */
  contentCodeableConcept?: CodeableConcept | undefined;
  /**
   * The communicated content (or for multi-part communications, one portion of the communication).
   * The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.
   * If the content isn't codified, contentCodeableConcept.text can be used.  
   * When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
   */
  contentReference?: Reference | undefined;
}
export interface CommunicationRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CommunicationRequest';
  /**
   * Other resources that pertain to this communication request and to which this communication request should be associated.
   * Don't use CommunicationRequest.about element when a more specific element exists, such as basedOn, reasonReference, or replaces.
   */
  about?: Reference[] | undefined;
  /**
   * For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * A plan or proposal that is fulfilled in whole or in part by this request.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The type of message to be sent such as alert, notification, reminder, instruction, etc.
   * There may be multiple axes of categorization and one communication request may serve multiple purposes.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * If true indicates that the CommunicationRequest is asking for the specified action to *not* occur.
   * The attributes provided with the request qualify what is not to be done.
   */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;
  /**
   * The Encounter during which this CommunicationRequest was created or to which the creation of this record is tightly associated.
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  encounter?: Reference | undefined;
  /**
   * A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
   * Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition.  Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
   */
  groupIdentifier?: Identifier | undefined;
  /**
   * Business identifiers assigned to this communication request by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
   */
  informationProvider?: Reference[] | undefined;
  /**
   * Indicates the level of authority/intentionality associated with the CommunicationRequest and where the request fits into the workflow chain.
   * This element is expected to be immutable.  E.g. A "proposal" instance should never change to be a "plan" instance or "order" instance.  Instead, a new instance 'basedOn' the prior instance should be created with the new 'intent' value.
   * One exception to this is that the granularity of CommunicationRequest.intent is allowed to change.  For example, a Request identified as an "order" might later be clarified to be a "filler-order".  Or, in rarer cases (to meet recipient constraints), the reverse might also occur.
   */
  intent: ('proposal'|'plan'|'directive'|'order'|'original-order'|'reflex-order'|'filler-order'|'instance-order'|'option');
  _intent?: Element | undefined;
  /**
   * A channel that was used for this communication (e.g. email, fax).
   */
  medium?: CodeableConcept[] | undefined;
  /**
   * Comments made about the request by the requester, sender, recipient, subject or other participants.
   */
  note?: Annotation[] | undefined;
  /**
   * The time when this communication is to occur.
   */
  occurrencestring?: string | undefined;
  _occurrencestring?: Element | undefined;
  /**
   * The time when this communication is to occur.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * Text, attachment(s), or resource(s) to be communicated to the recipient.
   */
  payload?: CommunicationRequestPayload[] | undefined;
  /**
   * Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * Describes why the request is being made in coded or textual form.
   * Textual reasons can be captured using reasonCode.text.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication.
   */
  recipient?: Reference[] | undefined;
  /**
   * Completed or terminated request(s) whose function is taken by this new request.
   * The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
   */
  replaces?: Reference[] | undefined;
  /**
   * The device, individual, or organization who asks for the information to be shared.
   */
  requester?: Reference | undefined;
  /**
   * The status of the proposal or order.
   */
  status: ('draft'|'active'|'on-hold'|'revoked'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * Captures the reason for the current state of the CommunicationRequest.
   * This is generally only used for "exception" statuses such as "on-hold" or "revoked".  The reason why the CommunicationRequest was created at all is captured in reasonCode, not here.
   */
  statusReason?: CodeableConcept | undefined;
  /**
   * The patient or group that is the focus of this communication request.
   */
  subject?: Reference | undefined;
}
/**
 * How a resource is related to the compartment
 */
export interface CompartmentDefinitionResource extends BackboneElement {
  /**
   * The name of a resource supported by the server.
   */
  code: ('Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription');
  _code?: Element | undefined;
  /**
   * Additional documentation about the resource and compartment.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * Search Parameter for mapping requests made with $everything.end (e.g. on [Patient.$everything](patient-operation-everything.html)).
   */
  endParam?: string | undefined;
  _endParam?: Element | undefined;
  /**
   * The name of a search parameter that represents the link to the compartment. More than one may be listed because a resource may be linked to a compartment in more than one way,.
   * If no search parameters are listed, then the resource is not linked to the compartment.
   */
  param?: string[] | undefined;
  _param?: Element[] | undefined;
  /**
   * Search Parameter for mapping requests made with $everything.start (e.g. on [Patient.$everything](patient-operation-everything.html)).
   */
  startParam?: string | undefined;
  _startParam?: Element | undefined;
}
/**
 * In FHIR, search is not performed directly on a resource (by XML or JSON path), but on a named parameter that maps into the resource content.
 */
export interface CompartmentDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CompartmentDefinition';
  /**
   * Which compartment this definition describes.
   * Only the specification can define the compartments that can exist. Servers can choose to support them.
   */
  code: ('Patient'|'Encounter'|'RelatedPerson'|'Practitioner'|'Device'|'EpisodeOfCare');
  _code?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * The date  (and optionally time) when the compartment definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the compartment definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the compartment definition from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the compartment definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the compartment definition is presumed to be the predominant language in the place the compartment definition was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A Boolean value to indicate that this compartment definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of compartment definitions that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A natural language name identifying the compartment definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.This is often the same as the code for the parameter, but does not need to be.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the compartment definition.
   * Usually an organization but may be an individual. The publisher (or steward) of the compartment definition is the organization or individual primarily responsible for the maintenance and upkeep of the compartment definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the compartment definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this compartment definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the compartment definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this compartment definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Information about how a resource is related to the compartment.
   */
  resource?: CompartmentDefinitionResource[] | undefined;
  /**
   * Whether the search syntax is supported,.
   * Servers may define and use compartments to manage logical access without implementing the compartment related syntax.
   */
  search: boolean;
  _search?: Element | undefined;
  /**
   * The status of this compartment definition. Enables tracking the life-cycle of the content.
   * Allows filtering of compartment definitions that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the capability statement.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this compartment definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this compartment definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the compartment definition is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate compartment definition instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the compartment definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the compartment definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different compartment definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the compartment definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Attests to accuracy of composition
 * Only list each attester once.
 */
export interface CompositionAttester extends BackboneElement {
  /**
   * The type of attestation the authenticator offers.
   */
  mode: CodeableConcept;
  /**
   * Who attested the composition in the specified way.
   */
  party?: Reference | undefined;
  /**
   * When the composition was attested by the party.
   */
  time?: string | undefined;
  _time?: Element | undefined;
}
/**
 * The clinical service(s) being documented
 * The event needs to be consistent with the type element, though can provide further information if desired.
 */
export interface CompositionEvent extends BackboneElement {
  /**
   * Represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which case the procedure being documented is necessarily a "History and Physical" act. The events may be included as a code or as a reference to an other resource.
   * An event can further specialize the act inherent in the typeCode, such as where it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or more events are included, they SHALL NOT conflict with the values inherent in the classCode, practiceSettingCode or typeCode, as such a conflict would create an ambiguous situation. This short list of codes is provided to be used as key words for certain types of queries.
   */
  detail?: CodeableReference[] | undefined;
  /**
   * The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
   */
  period?: Period | undefined;
}
/**
 * Composition is broken into sections
 */
export interface CompositionSection extends BackboneElement {
  /**
   * Identifies who is responsible for the information in this section, not necessarily who typed it in.
   */
  author?: Reference[] | undefined;
  /**
   * A code identifying the kind of content contained within the section. This must be consistent with the section title.
   * The code identifies the section for an automated processor of the document. This is particularly relevant when using profiles to control the structure of the document.   
   * If the section has content (instead of sub-sections), the section.code does not change the meaning or interpretation of the resource that is the content of the section in the comments for the section.code.
   */
  code?: CodeableConcept | undefined;
  /**
   * If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
   * The various reasons for an empty section make a significant interpretation to its interpretation. Note that this code is for use when the entire section content has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
   */
  emptyReason?: CodeableConcept | undefined;
  /**
   * A reference to the actual resource from which the narrative in the section is derived.
   * If there are no entries in the list, an emptyReason SHOULD be provided.
   */
  entry?: Reference[] | undefined;
  /**
   * The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
   * Typically, sections in a doument are about the subject of the document, whether that is a  patient, or group of patients, location, or device, or whatever. For some kind of documents, some sections actually contain data about related entities. Typical examples are  a section in a newborn discharge summary concerning the mother, or family history documents, with a section about each family member, though there are many other examples.
   */
  focus?: Reference | undefined;
  /**
   * Specifies the order applied to the items in the section entries.
   * Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
   */
  orderedBy?: CodeableConcept | undefined;
  /**
   * A nested sub-section within this section.
   * Nested sections are primarily used to help human readers navigate to particular portions of the document.
   */
  section?: CompositionSection[] | undefined;
  /**
   * A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
   * Document profiles may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
  /**
   * The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
   * The title identifies the section for a human reader. The title must be consistent with the narrative of the resource that is the target of the section.content reference. Generally, sections SHOULD have titles, but in some documents, it is unnecessary or inappropriate. Typically, this is where a section has subsections that have their own adequately distinguishing title,  or documents that only have a single section. Most Implementation Guides will make section title to be a required element.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * While the focus of this specification is on patient-specific clinical statements, this resource can also apply to other healthcare-related statements such as study protocol designs, healthcare invoices and other activities that are not necessarily patient-specific or clinical.
 */
export interface Composition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Composition';
  /**
   * A participant who has attested to the accuracy of the composition/document.
   * Only list each attester once.
   */
  attester?: CompositionAttester[] | undefined;
  /**
   * Identifies who is responsible for the information in the composition, not necessarily who typed it in.
   */
  author: Reference[];
  /**
   * A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
   * This is useful when documents are derived from a composition - provides guidance for how to get the latest version of the document. This is optional because this is sometimes not known by the authoring system, and can be inferred by context. However, it is important that this information be known when working with a derived document, so providing a custodian is encouraged.
   */
  custodian?: Reference | undefined;
  /**
   * The composition editing time, when the composition was last logically changed by the author.
   * The Last Modified Date on the composition may be after the date of the document was attested without being changed. This means that the date on an amended document is the date of the amendment, not the date of original authorship.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * Describes the clinical encounter or type of care this documentation is associated with.
   */
  encounter?: Reference | undefined;
  /**
   * The clinical service, such as a colonoscopy or an appendectomy, being documented.
   * The event needs to be consistent with the type element, though can provide further information if desired.
   */
  event?: CompositionEvent[] | undefined;
  /**
   * A version-independent identifier for the Composition. This identifier stays constant as the composition is changed over time.
   * Similar to ClinicalDocument/setId in CDA. See discussion in resource definition for how these relate.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A natural language name identifying the {{title}}. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * For any additional notes.
   * A comment, general note or annotation not coded elsewhere.
   */
  note?: Annotation[] | undefined;
  /**
   * Relationships that this composition has with other compositions or documents that already exist.
   * To reference (using relatesTo) a Bundle of type "document" or another Composition where you only have the identifier, use a resourceReference with an identifier.\
   * When a Composition is an alternate representation of another type of document e.g. CDA, the other document could be referenced in a DocumentReference resource.  
   * Here is an example of using relatesTo to reference another Bundle of type "document" or Composition where you only have the identifier:
   * ```
   * "relatesTo": [{
   *   "type": "replaces",
   *   "resourceReference": {
   *     "identifier": { 
   *       "system": "...", 
   *       "value": "..."
   *     }
   *   } 
   * }]
   * ```
   */
  relatesTo?: RelatedArtifact[] | undefined;
  /**
   * The root of the sections that make up the composition.
   */
  section?: CompositionSection[] | undefined;
  /**
   * The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
   * If a composition is marked as withdrawn, the compositions/documents in the series, or data from the composition or document series, should never be displayed to a user without being clearly marked as untrustworthy. The flag "entered-in-error" is why this element is labeled as a modifier of other elements.   
   * Some reporting work flows require that the original narrative of a final document never be altered; instead, only new narrative can be added. The composition resource has no explicit status for explicitly noting whether this business rule is in effect. This would be handled by an extension if required.
   */
  status: ('registered'|'partial'|'preliminary'|'final'|'amended'|'corrected'|'appended'|'cancelled'|'entered-in-error'|'deprecated'|'unknown');
  _status?: Element | undefined;
  /**
   * Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
   * For clinical documents, this is usually the patient.
   */
  subject?: Reference[] | undefined;
  /**
   * Official human-readable label for the composition.
   * For many compositions, the title is the same as the text or a display name of Composition.type (e.g. a "consultation" or "progress note"). Note that CDA does not make title mandatory, but there are no known cases where it is useful for title to be omitted, so it is mandatory here. Feedback on this requirement is welcome during the trial use period.
   */
  title: string;
  _title?: Element | undefined;
  /**
   * Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
   * For Composition type, LOINC is ubiquitous and strongly endorsed by HL7. Most implementation guides will require a specific LOINC code, or use LOINC as an extensible binding.
   */
  type: CodeableConcept;
  /**
   * An absolute URI that is used to identify this Composition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this Composition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the Composition is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate Composition instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * An explicitly assigned identifer of a variation of the content in the Composition.
   * While each resource, including the composition itself, has its own version identifier, this is a formal identifier for the logical version of the Composition as a whole. It would remain constant if the resources were moved to a new server, and all got new individual resource versions, for example.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Definition of an additional attribute to act as a data source or target
 * Additional attributes are used to define additional data elements where mapping data can be found. For an example, see [Specimen Type v2 -> SNOMED CT Mapping(conceptmap-example-specimen-type.html)
 */
export interface ConceptMapAdditionalAttribute extends BackboneElement {
  /**
   * A code that is used to identify this additional data attribute. The code is used internally in ConceptMap.group.element.target.dependsOn.attribute and ConceptMap.group.element.target.product.attribute.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * A description of the additional attribute and/or the data element it refers to - why it is defined, and how the value might be used in mappings, and a discussion of issues associated with the use of the data element.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The type of the source data contained in this concept map for this data element.
   * When the source or target is not content defined by FHIR, some additional application logic might be required to map from the FHIR Datatype to the externally defined content
   */
  type: ('code'|'Coding'|'string'|'boolean'|'Quantity');
  _type?: Element | undefined;
  /**
   * Reference to the formal definition of the source/target data element. For elements defined by the FHIR specification, or using a FHIR logical model, the correct format is {canonical-url}#{element-id}.
   */
  uri?: string | undefined;
  _uri?: Element | undefined;
}
/**
 * Other properties required for this mapping
 */
export interface ConceptMapGroupElementTargetDependsOn extends BackboneElement {
  /**
   * A reference to the additional attribute that holds a value the map depends on.
   */
  attribute: string;
  _attribute?: Element | undefined;
  /**
   * Data element value that the map depends on / produces.
   * If the data type is a code, then the code system is .group.source for .dependsOn.valueCode and .group.target for .product.valueCode.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * Data element value that the map depends on / produces.
   * If the data type is a code, then the code system is .group.source for .dependsOn.valueCode and .group.target for .product.valueCode.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * Data element value that the map depends on / produces.
   * If the data type is a code, then the code system is .group.source for .dependsOn.valueCode and .group.target for .product.valueCode.
   */
  valueCoding?: Coding | undefined;
  /**
   * Data element value that the map depends on / produces.
   * If the data type is a code, then the code system is .group.source for .dependsOn.valueCode and .group.target for .product.valueCode.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * This mapping applies if the data element value is a code from this value set.
   */
  valueSet?: string | undefined;
  _valueSet?: Element | undefined;
}
/**
 * Property value for the source -> target mapping
 */
export interface ConceptMapGroupElementTargetProperty extends BackboneElement {
  /**
   * A reference to a mapping property defined in ConceptMap.property.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element.
   */
  valueCoding?: Coding | undefined;
  /**
   * The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element.
   */
  valuenumber?: number | undefined;
}
/**
 * Concept in target system for element
 * Ideally there would only be one map, with an 'equivalent' mapping. But multiple maps are allowed for several narrower (i.e. source-is-broader-than-target) options, or to assert that other concepts are not related.
 */
export interface ConceptMapGroupElementTarget extends BackboneElement {
  /**
   * Identity (code or path) or the element/item that the map refers to.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * A description of status/issues in mapping that conveys additional information not represented in  the structured data.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified data attribute can be resolved, and it has the specified value.
   */
  otherElement?: ConceptMapGroupElementTargetDependsOn[] | undefined;
  /**
   * The display for the code. The display is only provided to help editors when editing the concept map.
   * The display is ignored when processing the map.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * Product is the output of a ConceptMap that provides additional values that go in other attributes / data elemnts of the target data.
   */
  product?: ConceptMapGroupElementTargetDependsOn[] | undefined;
  /**
   * A property value for this source -> target mapping.
   */
  mappingProperty?: ConceptMapGroupElementTargetProperty[] | undefined;
  /**
   * The relationship between the source and target concepts. The relationship is read from source to target (e.g. source-is-narrower-than-target).
   * This element is labeled as a modifier because it may indicate that there is no mapping.
   */
  relationship: ('related-to'|'equivalent'|'source-is-narrower-than-target'|'source-is-broader-than-target'|'not-related-to');
  _relationship?: Element | undefined;
  /**
   * The set of concepts from the ConceptMap.group.target code system which are all being mapped to as part of this mapping rule. The effect of using this data element is the same as having multiple ConceptMap.group.element.target elements with one for each concept in the ConceptMap.group.element.target.valueSet value set.
   * If the the value set expansion is empty then the source concept(s) are unmapped and the behavior of ConceptMap.group.unmapped (if present) applies.
   */
  valueSet?: string | undefined;
  _valueSet?: Element | undefined;
}
/**
 * Mappings for a concept from the source set
 * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
 */
export interface ConceptMapGroupElement extends BackboneElement {
  /**
   * Identity (code or path) or the element/item being mapped.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * The display for the code. The display is only provided to help editors when editing the concept map.
   * The display is ignored when processing the map.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * If noMap = true this indicates that no mapping to a target concept exists for this source concept.
   * If noMap = true, then the behavior of ConceptMap.group.unmapped (if present) does not apply.
   */
  noMap?: boolean | undefined;
  _noMap?: Element | undefined;
  /**
   * A concept from the target value set that this concept maps to.
   * Ideally there would only be one map, with an 'equivalent' mapping. But multiple maps are allowed for several narrower (i.e. source-is-broader-than-target) options, or to assert that other concepts are not related.
   */
  targetElement?: ConceptMapGroupElementTarget[] | undefined;
  /**
   * The set of concepts from the ConceptMap.group.source code system which are all being mapped to the target as part of this mapping rule.
   * If the value set expansion is empty then there are no source concepts to map in this rule.
   */
  valueSet?: string | undefined;
  _valueSet?: Element | undefined;
}
/**
 * What to do when there is no mapping target for the source concept and ConceptMap.group.element.noMap is not true
 * The 'unmapped' element is ignored if a code is specified to have relationship = not-related-to or if ConceptMap.group.element.noMap = true.
 */
export interface ConceptMapGroupUnmapped extends BackboneElement {
  /**
   * The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single fixed code.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * The display for the code. The display is only provided to help editors when editing the concept map.
   * The display is ignored when processing the map.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped source code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).
   */
  mode: ('use-source-code'|'fixed'|'other-map');
  _mode?: Element | undefined;
  /**
   * The canonical reference to an additional ConceptMap resource instance to use for mapping if this ConceptMap resource contains no matching mapping for the source concept.
   */
  otherMap?: string | undefined;
  _otherMap?: Element | undefined;
  /**
   * The default relationship value to apply between the source and target concepts when the source code is unmapped and the mode is 'fixed' or 'use-source-code'.
   * This element is labeled as a modifier because it may indicate that there is no mapping.
   */
  relationship?: ('related-to'|'equivalent'|'source-is-narrower-than-target'|'source-is-broader-than-target'|'not-related-to') | undefined;
  _relationship?: Element | undefined;
  /**
   * The set of fixed codes to use when the mode = 'fixed'  - all unmapped codes are mapped to each of the fixed codes.
   */
  valueSet?: string | undefined;
  _valueSet?: Element | undefined;
}
/**
 * Same source and target systems
 */
export interface ConceptMapGroup extends BackboneElement {
  /**
   * Mappings for an individual concept in the source to one or more concepts in the target.
   * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
   */
  sourceElement: ConceptMapGroupElement[];
  /**
   * An absolute URI that identifies the source system where the concepts to be mapped are defined.
   * This is not needed if the source value set is specified and it contains concepts from only a single system.
   */
  source?: string | undefined;
  _source?: Element | undefined;
  /**
   * An absolute URI that identifies the target system that the concepts will be mapped to.
   * This is not needed if the target value set is specified and it contains concepts from only a single system. The group target may also be omitted if all of the target element relationship values are 'not-related-to'.
   */
  target?: string | undefined;
  _target?: Element | undefined;
  /**
   * What to do when there is no mapping to a target concept from the source concept and ConceptMap.group.element.noMap is not true. This provides the "default" to be applied when there is no target concept mapping specified or the expansion of ConceptMap.group.element.target.valueSet is empty.
   * The 'unmapped' element is ignored if a code is specified to have relationship = not-related-to or if ConceptMap.group.element.noMap = true.
   */
  unmapped?: ConceptMapGroupUnmapped | undefined;
}
/**
 * Additional properties of the mapping
 * Properties may be used to supply for example, mapping priority, provenance, presentation hints, flag as experimental, and additional documentation. Multiple occurrences of ConceptMap.group.element.target.property may occur for a ConceptMap.property where ConceptMap.group.element.target.property.code is the same and the values in ConceptMap.group.element.target.property.value differ.
 */
export interface ConceptMapProperty extends BackboneElement {
  /**
   * A code that is used to identify the property. The code is used internally (in ConceptMap.group.element.target.property.code) and also in the $translate operation.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * A description of the property - why it is defined, and how its value might be used.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The CodeSystem that defines the codes from which values of type ```code``` in property values.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * The type of the property value.
   */
  type: ('Coding'|'string'|'integer'|'boolean'|'dateTime'|'decimal'|'code');
  _type?: Element | undefined;
  /**
   * Reference to the formal meaning of the property.
   */
  uri?: string | undefined;
  _uri?: Element | undefined;
}
export interface ConceptMap extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ConceptMap';
  /**
   * An additionalAttribute defines an additional data element found in the source or target data model where the data will come from or be mapped to. Some mappings are based on data in addition to the source data element, where codes in multiple fields are combined to a single field (or vice versa).
   * Additional attributes are used to define additional data elements where mapping data can be found. For an example, see [Specimen Type v2 -> SNOMED CT Mapping(conceptmap-example-specimen-type.html)
   */
  additionalAttribute?: ConceptMapAdditionalAttribute[] | undefined;
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the ConceptMap.
   */
  author?: ContactDetail[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the concept map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the concept map.
   * Frequently the copyright differs between the concept map and codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the concept map was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the concept map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the concept map from a consumer's perspective.
   * The description is not intended to describe the semantics of the concept map. The description should capture its intended use, which is needed for ensuring integrity for its use in models across future changes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the ConceptMap.
   */
  editor?: ContactDetail[] | undefined;
  /**
   * The period during which the ConceptMap content was or is planned to be in active use.
   * The effective period for a ConceptMap  determines when the content is applicable for usage and is independent of publication and review dates. For example, a map intended to be used for the year 2016 might be published in 2015.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * An individual or organization asserted by the publisher to be responsible for officially endorsing the ConceptMap for use in some setting.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * A Boolean value to indicate that this concept map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of concept maps that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A group of mappings that all have the same source and target system.
   */
  group?: ConceptMapGroup[] | undefined;
  /**
   * A formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this concept map outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the concept map is intended to be used.
   * It may be possible for the concept map to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the concept map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A property defines a slot through which additional information can be provided about a map from source -> target.
   * Properties may be used to supply for example, mapping priority, provenance, presentation hints, flag as experimental, and additional documentation. Multiple occurrences of ConceptMap.group.element.target.property may occur for a ConceptMap.property where ConceptMap.group.element.target.property.code is the same and the values in ConceptMap.group.element.target.property.value differ.
   */
  property?: ConceptMapProperty[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the concept map.
   * Usually an organization but may be an individual. The publisher (or steward) of the concept map is the organization or individual primarily responsible for the maintenance and upkeep of the concept map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the concept map. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this concept map is needed and why it has been designed as it has.
   * This element does not describe the usage of the concept map. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this concept map.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the ConceptMap.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.  Limits the scope of the map to source codes (ConceptMap.group.element code or valueSet) that are members of this value set.
   * Should be a version specific reference. URIs SHOULD be absolute. If there is no sourceScope or targetScope value set, there is no specified context for the map (not recommended).  The sourceScope value set may select codes from either an explicit (standard or local) or implicit code system.
   */
  sourceScopestring?: string | undefined;
  _sourceScopestring?: Element | undefined;
  /**
   * The status of this concept map. Enables tracking the life-cycle of the content.
   * Allows filtering of concept maps that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * Identifier for the target value set that provides important context about how the mapping choices are made.  Limits the scope of the map to target codes (ConceptMap.group.element.target code or valueSet) that are members of this value set.
   * Should be a version specific reference. URIs SHOULD be absolute. If there is no sourceScope or targetScope value set, there is no specified context for the map (not recommended).  The targetScope value set may select codes from either an explicit (standard or local) or implicit code system.
   */
  targetScopestring?: string | undefined;
  _targetScopestring?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the concept map.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptions related to the content of the ConceptMap. Topics provide a high-level categorization as well as keywords for the ConceptMap that can be useful for filtering and searching.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * An absolute URI that is used to identify this concept map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this concept map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the concept map is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate concept map instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the concept map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different concept map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the concept map with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which ConceptMap is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which ConceptMap is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Who or what participated in the activities related to the condition and how they were involved
 */
export interface ConditionParticipant extends BackboneElement {
  /**
   * Indicates who or what participated in the activities related to the condition.
   */
  actor: Reference;
  /**
   * Distinguishes the type of involvement of the actor in the activities related to the condition.
   */
  function?: CodeableConcept | undefined;
}
/**
 * Stage/grade, usually assessed formally
 */
export interface ConditionStage extends BackboneElement {
  /**
   * Reference to a formal record of the evidence on which the staging assessment is based.
   */
  assessment?: Reference[] | undefined;
  /**
   * A simple summary of the stage such as "Stage 3" or "Early Onset". The determination of the stage is disease-specific, such as cancer, retinopathy of prematurity, kidney diseases, Alzheimer's, or Parkinson disease.
   */
  summary?: CodeableConcept | undefined;
  /**
   * The kind of staging, such as pathological or clinical staging.
   */
  type?: CodeableConcept | undefined;
}
export interface Condition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Condition';
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate.
   * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
   * Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
   */
  abatementAge?: Age | undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate.
   * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
   * Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
   */
  abatementstring?: string | undefined;
  _abatementstring?: Element | undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate.
   * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
   * Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
   */
  abatementPeriod?: Period | undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate.
   * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
   * Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
   */
  abatementRange?: Range | undefined;
  /**
   * The anatomical location where this condition manifests itself.
   * Only used if not implicit in code found in Condition.code. If the use case requires attributes from the BodyStructure resource (e.g. to identify and track separately) then use the standard extension [http://hl7.org/fhir/StructureDefinition/bodySite](http://hl7.org/fhir/extensions/StructureDefinition-bodySite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
   */
  bodySite?: CodeableConcept[] | undefined;
  /**
   * A category assigned to the condition.
   * The categorization is often highly contextual and may appear poorly differentiated or not very useful in other contexts.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The clinical status of the condition.
   * The data type is CodeableConcept because clinicalStatus has some clinical judgment involved, such that there might need to be more specificity than the required FHIR value set allows. For example, a SNOMED coding might allow for additional specificity.  clinicalStatus is required since it is a modifier element.  For conditions that are problems list items, the clinicalStatus should not be unknown.  For conditions that are not problem list items, the clinicalStatus may be unknown.  For example, conditions derived from a claim are point in time, so those conditions may have a clinicalStatus of unknown
   */
  clinicalStatus: ('active'|'recurrence'|'relapse'|'inactive'|'remission'|'resolved'|'unknown');
  /**
   * Identification of the condition, problem or diagnosis.
   */
  code?: CodeableConcept | undefined;
  /**
   * The Encounter during which this Condition was created or to which the creation of this record is tightly associated.
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter. This record indicates the encounter this particular record is associated with.  In the case of a "new" diagnosis reflecting ongoing/revised information about the condition, this might be distinct from the first encounter in which the underlying condition was first "known".
   */
  encounter?: Reference | undefined;
  /**
   * Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
   * If the condition was confirmed, but subsequently refuted, then the evidence can be cumulative including all evidence over time.  The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.  For example, if the Condition.code is pneumonia, then there could be an evidence list where Condition.evidence.concept = fever (CodeableConcept), Condition.evidence.concept = cough (CodeableConcept), and Condition.evidence.reference = bronchitis (reference to Condition).
   */
  evidence?: CodeableReference[] | undefined;
  /**
   * Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
   */
  note?: Annotation[] | undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   * Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).  Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
   */
  onsetAge?: Age | undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   * Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).  Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
   */
  onsetstring?: string | undefined;
  _onsetstring?: Element | undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   * Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).  Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
   */
  onsetPeriod?: Period | undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   * Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.  Range is generally used to convey an imprecise age range (e.g. 4 to 6 years old).  Because a Condition.code can represent multiple levels of granularity and can be modified over time, the onset and abatement dates can have ambiguity whether those dates apply to the current Condition.code or an earlier representation of that Condition.code.   For example, if the Condition.code was initially documented as severe asthma, then it is ambiguous whether the onset and abatement dates apply to asthma (overall in that subject's lifetime) or when asthma transitioned to become severe.
   */
  onsetRange?: Range | undefined;
  /**
   * Indicates who or what participated in the activities related to the condition and how they were involved.
   */
  participant?: ConditionParticipant[] | undefined;
  /**
   * The recordedDate represents when this particular Condition record was created in the system, which is often a system-generated date.
   * When onset date is unknown, recordedDate can be used to establish if the condition was present on or before a given date.  If the recordedDate is known and provided by a sending system, it is preferred that the receiving system preserve that recordedDate value. If the recordedDate is not provided by the sending system, the receipt timestamp is sometimes used as the recordedDate.
   */
  recordedDate?: string | undefined;
  _recordedDate?: Element | undefined;
  /**
   * A subjective assessment of the severity of the condition as evaluated by the clinician.
   * Coding of the severity with a terminology is preferred, where possible.
   */
  severity?: CodeableConcept | undefined;
  /**
   * A simple summary of the stage such as "Stage 3" or "Early Onset". The determination of the stage is disease-specific, such as cancer, retinopathy of prematurity, kidney diseases, Alzheimer's, or Parkinson disease.
   */
  stage?: ConditionStage[] | undefined;
  /**
   * Indicates the patient or group who the condition record is associated with.
   */
  subject: Reference;
  /**
   * The verification status to support the clinical status of the condition.  The verification status pertains to the condition, itself, not to any specific condition attribute.
   * verificationStatus is not required.  For example, when a patient has abdominal pain in the ED, there is not likely going to be a verification status.
   * The data type is CodeableConcept because verificationStatus has some clinical judgment involved, such that there might need to be more specificity than the required FHIR value set allows. For example, a SNOMED coding might allow for additional specificity.
   */
  verificationStatus?: ('unconfirmed'|'provisional'|'differential'|'confirmed'|'refuted'|'entered-in-error') | undefined;
}
/**
 * Medications particularly relevant for this condition
 */
export interface ConditionDefinitionMedication extends BackboneElement {
  /**
   * Category that is relevant.
   */
  category?: CodeableConcept | undefined;
  /**
   * Code for relevant Medication.
   */
  code?: CodeableConcept | undefined;
}
/**
 * Observations particularly relevant to this condition
 */
export interface ConditionDefinitionObservation extends BackboneElement {
  /**
   * Category that is relevant.
   */
  category?: CodeableConcept | undefined;
  /**
   * Code for relevant Observation.
   */
  code?: CodeableConcept | undefined;
}
/**
 * Plan that is appropriate
 */
export interface ConditionDefinitionPlan extends BackboneElement {
  /**
   * The actual plan.
   */
  reference: Reference;
  /**
   * Use for the plan.
   */
  role?: CodeableConcept | undefined;
}
/**
 * Observation that suggets this condition
 */
export interface ConditionDefinitionPrecondition extends BackboneElement {
  /**
   * Code for relevant Observation.
   */
  code: CodeableConcept;
  /**
   * Kind of pre-condition.
   */
  type: ('sensitive'|'specific');
  _type?: Element | undefined;
  /**
   * Value of Observation.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * Value of Observation.
   */
  valueQuantity?: Quantity | undefined;
}
/**
 * Questionnaire for this condition
 */
export interface ConditionDefinitionQuestionnaire extends BackboneElement {
  /**
   * Use of the questionnaire.
   */
  purpose: ('preadmit'|'diff-diagnosis'|'outcome');
  _purpose?: Element | undefined;
  /**
   * Specific Questionnaire.
   */
  reference: Reference;
}
export interface ConditionDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ConditionDefinition';
  /**
   * The anatomical location where this condition manifests itself.
   * Only used if not implicit in code found in ConditionDefinition.code. If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [http://hl7.org/fhir/StructureDefinition/bodySite](http://hl7.org/fhir/extensions/StructureDefinition-bodySite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
   */
  bodySite?: CodeableConcept | undefined;
  /**
   * Identification of the condition, problem or diagnosis.
   */
  code: CodeableConcept;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * The date  (and optionally time) when the condition definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the condition definition changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the condition definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Formal definitions of the condition. These may be references to ontologies, published clinical protocols or research papers.
   */
  definition?: string[] | undefined;
  _definition?: Element[] | undefined;
  /**
   * A free text natural language description of the condition definition from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the condition definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the condition definition is presumed to be the predominant language in the place the condition definition was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A Boolean value to indicate that this condition definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of condition definitions that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Whether bodySite is appropriate to collect for this condition.
   */
  hasBodySite?: boolean | undefined;
  _hasBodySite?: Element | undefined;
  /**
   * Whether Severity is appropriate to collect for this condition.
   */
  hasSeverity?: boolean | undefined;
  _hasSeverity?: Element | undefined;
  /**
   * Whether stage is appropriate to collect for this condition.
   */
  hasStage?: boolean | undefined;
  _hasStage?: Element | undefined;
  /**
   * A formal identifier that is used to identify this condition definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this condition definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the condition definition is intended to be used.
   * It may be possible for the condition definition to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * Medications particularly relevant for this condition.
   */
  medication?: ConditionDefinitionMedication[] | undefined;
  /**
   * A natural language name identifying the condition definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Observations particularly relevant to this condition.
   */
  observation?: ConditionDefinitionObservation[] | undefined;
  /**
   * Plan that is appropriate.
   */
  plan?: ConditionDefinitionPlan[] | undefined;
  /**
   * An observation that suggests that this condition applies.
   */
  precondition?: ConditionDefinitionPrecondition[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the condition definition.
   * Usually an organization but may be an individual. The publisher (or steward) of the condition definition is the organization or individual primarily responsible for the maintenance and upkeep of the condition definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the condition definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Questionnaire for this condition.
   */
  questionnaire?: ConditionDefinitionQuestionnaire[] | undefined;
  /**
   * A subjective assessment of the severity of the condition as evaluated by the clinician.
   * Coding of the severity with a terminology is preferred, where possible.
   */
  severity?: CodeableConcept | undefined;
  /**
   * Clinical stage or grade of a condition. May include formal severity assessments.
   */
  stage?: CodeableConcept | undefined;
  /**
   * The status of this condition definition. Enables tracking the life-cycle of the content.
   * Allows filtering of condition definitions that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * An explanatory or alternate title for the event definition giving additional information about its content.
   */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;
  /**
   * Appropriate team for this condition.
   */
  team?: Reference[] | undefined;
  /**
   * A short, descriptive, user-friendly title for the condition definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this condition definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this condition definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the condition definition is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate condition definition instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the condition definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the condition definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different condition definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the condition definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Computable version of the backing policy
 */
export interface ConsentPolicyBasis extends BackboneElement {
  /**
   * A Reference that identifies the policy the organization will enforce for this Consent.
   * While any resource may be used, Consent, PlanDefinition and Contract would be most frequent
   */
  reference?: Reference | undefined;
  /**
   * A URL that links to a computable version of the policy the organization will enforce for this Consent.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * Who|what controlled by this provision (or group, by role)
 */
export interface ConsentProvisionActor extends BackboneElement {
  /**
   * The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
   */
  reference?: Reference | undefined;
  /**
   * How the individual is involved in the resources content that is described in the exception.
   */
  role?: CodeableConcept | undefined;
}
/**
 * Data controlled by this provision
 */
export interface ConsentProvisionData extends BackboneElement {
  /**
   * How the resource reference is interpreted when testing consent restrictions.
   */
  meaning: ('instance'|'related'|'dependents'|'authoredby');
  _meaning?: Element | undefined;
  /**
   * A reference to a specific resource that defines which resources are covered by this consent.
   */
  reference: Reference;
}
/**
 * Constraints to the base Consent.policyRule/Consent.policy
 */
export interface ConsentProvision extends BackboneElement {
  /**
   * Actions controlled by this provision.
   * Note that this is the direct action (not the grounds for the action covered in the purpose element). At present, the only action in the understood and tested scope of this resource is 'read'.
   */
  action?: CodeableConcept[] | undefined;
  /**
   * Who or what is controlled by this provision. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
   */
  provisionActor?: ConsentProvisionActor[] | undefined;
  /**
   * If this code is found in an instance, then the provision applies.
   */
  code?: CodeableConcept[] | undefined;
  /**
   * The resources controlled by this provision if specific resources are referenced.
   */
  provisionData?: ConsentProvisionData[] | undefined;
  /**
   * Clinical or Operational Relevant period of time that bounds the data controlled by this provision.
   * This has a different sense to the Consent.period - that is when the consent agreement holds. This is the time period of the data that is controlled by the agreement.
   */
  dataPeriod?: Period | undefined;
  /**
   * The documentType(s) covered by this provision. The type can be a CDA document, or some other type that indicates what sort of information the consent relates to.
   * Multiple types are or'ed together. The intention of the documentType element is that the codes refer to document types defined in a standard somewhere.
   */
  documentType?: Coding[] | undefined;
  /**
   * A computable (FHIRPath or other) definition of what is controlled by this consent.
   * Constraining the expression type for a specific implementation via profile is recommended
   */
  expression?: Expression | undefined;
  /**
   * Timeframe for this provision.
   * This is the bound effective time of the consent and should be in the base provision in the Consent resource.
   */
  period?: Period | undefined;
  /**
   * Provisions which provide exceptions to the base provision or subprovisions.
   */
  provision?: ConsentProvision[] | undefined;
  /**
   * The context of the activities a user is taking - why the user is accessing the data - that are controlled by this provision.
   * When the purpose of use tag is on the data, access request purpose of use shall not conflict.
   */
  purpose?: Coding[] | undefined;
  /**
   * The resourceType(s) covered by this provision. The type can be a FHIR resource type or a profile on a type that indicates what information the consent relates to.
   * Multiple types are or'ed together. The intention of the resourceType element is that the codes refer to profiles or document types defined in a standard or an implementation guide somewhere.
   */
  resourceType?: Coding[] | undefined;
  /**
   * A security label, comprised of 0..* security label fields (Privacy tags), which define which resources are controlled by this exception.
   * If the consent specifies a security label of "R" then it applies to all resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high water mark. For other kinds of security labels, subsumption logic applies. When the purpose of use tag is on the data, access request purpose of use shall not conflict.
   */
  securityLabel?: Coding[] | undefined;
}
/**
 * Consent Verified by patient or family
 */
export interface ConsentVerification extends BackboneElement {
  /**
   * Date(s) verification was collected.
   * Allows for history of verification/validation.
   */
  verificationDate?: string[] | undefined;
  _verificationDate?: Element[] | undefined;
  /**
   * Extensible list of verification type starting with verification and re-validation.
   * This allows the verification element to hold multiple use cases including RelatedPerson verification of the Grantee decision and periodic re-validation of the consent.
   */
  verificationType?: CodeableConcept | undefined;
  /**
   * Has the instruction been verified.
   */
  verified: boolean;
  _verified?: Element | undefined;
  /**
   * The person who conducted the verification/validation of the Grantor decision.
   */
  verifiedBy?: Reference | undefined;
  /**
   * Who verified the instruction (Patient, Relative or other Authorized Person).
   */
  verifiedWith?: Reference | undefined;
}
/**
 * Broadly, there are 3 key areas of consent for patients: Consent around sharing information (aka Privacy Consent Directive - Authorization to Collect, Use, or Disclose information), consent for specific treatment, or kinds of treatment and consent for research participation and data sharing.
 */
export interface Consent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Consent';
  /**
   * A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The actor that controls/enforces the access according to the consent.
   */
  controller?: Reference[] | undefined;
  /**
   * Date the consent instance was agreed to.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Action to take - permit or deny - as default.
   */
  decision?: ('deny'|'permit') | undefined;
  _decision?: Element | undefined;
  /**
   * The entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions.
   * In a fully computable consent, both grantee and grantor  will be listed as actors within the consent. The Grantee and Grantor elements are for ease of search only.
   */
  grantee?: Reference[] | undefined;
  /**
   * The entity responsible for granting the rights listed in a Consent Directive.
   */
  grantor?: Reference[] | undefined;
  /**
   * Unique identifier for this copy of the Consent Statement.
   * This identifier identifies this copy of the consent. Where this identifier is also used elsewhere as the identifier for a consent record (e.g. a CDA consent document) then the consent details are expected to be the same.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The actor that manages the consent through its lifecycle.
   */
  manager?: Reference[] | undefined;
  /**
   * Effective period for this Consent Resource and all provisions unless specified in that provision.
   */
  period?: Period | undefined;
  /**
   * A Reference or URL used to uniquely identify the policy the organization will enforce for this Consent. This Reference or URL should be specific to the version of the policy and should be dereferencable to a computable policy of some form.
   */
  policyBasis?: ConsentPolicyBasis | undefined;
  /**
   * A Reference to the human readable policy explaining the basis for the Consent.
   */
  policyText?: Reference[] | undefined;
  /**
   * An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
   */
  provision?: ConsentProvision[] | undefined;
  /**
   * A set of codes that indicate the regulatory basis (if any) that this consent supports.
   */
  regulatoryBasis?: CodeableConcept[] | undefined;
  /**
   * The source on which this consent statement is based. The source might be a scanned original paper form.
   * The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
   */
  sourceAttachment?: Attachment[] | undefined;
  /**
   * A reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
   * The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
   */
  sourceReference?: Reference[] | undefined;
  /**
   * Indicates the current state of this Consent resource.
   * This element is labeled as a modifier because the status contains the codes rejected and entered-in-error that mark the Consent as not currently valid.
   */
  status: ('draft'|'active'|'inactive'|'not-done'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The patient/healthcare practitioner or group of persons to whom this consent applies.
   */
  subject?: Reference | undefined;
  /**
   * Whether a treatment instruction (e.g. artificial respiration: yes or no) was verified with the patient, his/her family or another authorized person.
   */
  verification?: ConsentVerification[] | undefined;
}
/**
 * Contract precursor content
 */
export interface ContractContentDefinition extends BackboneElement {
  /**
   * A copyright statement relating to Contract precursor content. Copyright statements are generally legal restrictions on the use and publishing of the Contract precursor content.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date (and optionally time) when the contract was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the contract changes.
   */
  publicationDate?: string | undefined;
  _publicationDate?: Element | undefined;
  /**
   * amended | appended | cancelled | disputed | entered-in-error | executable +.
   */
  publicationStatus: ('amended'|'appended'|'cancelled'|'disputed'|'entered-in-error'|'executable'|'executed'|'negotiable'|'offered'|'policy'|'rejected'|'renewed'|'revoked'|'resolved'|'terminated');
  _publicationStatus?: Element | undefined;
  /**
   * The  individual or organization that published the Contract precursor content.
   */
  publisher?: Reference | undefined;
  /**
   * Detailed Precusory content type.
   */
  subType?: CodeableConcept | undefined;
  /**
   * Precusory content structure and use, i.e., a boilerplate, template, application for a contract such as an insurance policy or benefits under a program, e.g., workers compensation.
   */
  type: CodeableConcept;
}
/**
 * Contract Friendly Language
 */
export interface ContractFriendly extends BackboneElement {
  /**
   * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
   */
  contentAttachment?: Attachment | undefined;
  /**
   * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
   */
  contentReference?: Reference | undefined;
}
/**
 * Contract Legal Language
 */
export interface ContractLegal extends BackboneElement {
  /**
   * Contract legal text in human renderable form.
   */
  contentAttachment?: Attachment | undefined;
  /**
   * Contract legal text in human renderable form.
   */
  contentReference?: Reference | undefined;
}
/**
 * Computable Contract Language
 */
export interface ContractRule extends BackboneElement {
  /**
   * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
   */
  contentAttachment?: Attachment | undefined;
  /**
   * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
   */
  contentReference?: Reference | undefined;
}
/**
 * Contract Signatory
 * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
 * For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
 */
export interface ContractSigner extends BackboneElement {
  /**
   * Party which is a signator to this Contract.
   */
  party: Reference;
  /**
   * Legally binding Contract DSIG signature contents in Base64.
   */
  signature: Signature[];
  /**
   * Role of this Contract signer, e.g. notary, grantee.
   */
  type: Coding;
}
/**
 * Entity of the action
 */
export interface ContractTermActionSubject extends BackboneElement {
  /**
   * The entity the action is performed or not performed on or for.
   */
  reference: Reference[];
  /**
   * Role type of agent assigned roles in this Contract.
   */
  role?: CodeableConcept | undefined;
}
/**
 * Entity being ascribed responsibility
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 * For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
 */
export interface ContractTermAction extends BackboneElement {
  /**
   * Encounter or Episode with primary association to the specified term activity.
   */
  context?: Reference | undefined;
  /**
   * Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
   */
  contextLinkId?: string[] | undefined;
  _contextLinkId?: Element[] | undefined;
  /**
   * True if the term prohibits the  action.
   */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;
  /**
   * Reason or purpose for the action stipulated by this Contract Provision.
   */
  intent: CodeableConcept;
  /**
   * Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.
   */
  linkId?: string[] | undefined;
  _linkId?: Element[] | undefined;
  /**
   * Comments made about the term action made by the requester, performer, subject or other participants.
   */
  note?: Annotation[] | undefined;
  /**
   * When action happens.
   */
  occurrencestring?: string | undefined;
  _occurrencestring?: Element | undefined;
  /**
   * When action happens.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * When action happens.
   */
  occurrenceTiming?: Timing | undefined;
  /**
   * Indicates who or what is being asked to perform (or not perform) the ction.
   */
  performer?: Reference | undefined;
  /**
   * Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
   */
  performerLinkId?: string[] | undefined;
  _performerLinkId?: Element[] | undefined;
  /**
   * The type of role or competency of an individual desired or required to perform or not perform the action.
   */
  performerRole?: CodeableConcept | undefined;
  /**
   * The type of individual that is desired or required to perform or not perform the action.
   */
  performerType?: CodeableConcept[] | undefined;
  /**
   * Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited. Either a coded concept, or another resource whose existence justifies permitting or not permitting this action.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
   */
  reasonLinkId?: string[] | undefined;
  _reasonLinkId?: Element[] | undefined;
  /**
   * Who or what initiated the action and has responsibility for its activation.
   */
  requester?: Reference[] | undefined;
  /**
   * Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
   */
  requesterLinkId?: string[] | undefined;
  _requesterLinkId?: Element[] | undefined;
  /**
   * Security labels that protects the action.
   */
  securityLabelNumber?: number[] | undefined;
  /**
   * Current state of the term action.
   */
  status: CodeableConcept;
  /**
   * Entity of the action.
   */
  actionSubject?: ContractTermActionSubject[] | undefined;
  /**
   * Activity or service obligation to be done or not done, performed or not performed, effectuated or not by this Contract term.
   */
  type: CodeableConcept;
}
/**
 * Circumstance of the asset
 */
export interface ContractTermAssetContext extends BackboneElement {
  /**
   * Coded representation of the context generally or of the Referenced entity, such as the asset holder type or location.
   */
  code?: CodeableConcept[] | undefined;
  /**
   * Asset context reference may include the creator, custodian, or owning Person or Organization (e.g., bank, repository),  location held, e.g., building,  jurisdiction.
   */
  reference?: Reference | undefined;
  /**
   * Context description.
   */
  text?: string | undefined;
  _text?: Element | undefined;
}
/**
 * Contract Valued Item List
 */
export interface ContractTermAssetValuedItem extends BackboneElement {
  /**
   * Indicates the time during which this Contract ValuedItem information is effective.
   */
  effectiveTime?: string | undefined;
  _effectiveTime?: Element | undefined;
  /**
   * Specific type of Contract Valued Item that may be priced.
   */
  entityCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specific type of Contract Valued Item that may be priced.
   */
  entityReference?: Reference | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * Identifies a Contract Valued Item instance.
   */
  identifier?: Identifier | undefined;
  /**
   * Id  of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.
   */
  linkId?: string[] | undefined;
  _linkId?: Element[] | undefined;
  /**
   * Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * Terms of valuation.
   */
  payment?: string | undefined;
  _payment?: Element | undefined;
  /**
   * When payment is due.
   */
  paymentDate?: string | undefined;
  _paymentDate?: Element | undefined;
  /**
   * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
   */
  points?: number | undefined;
  /**
   * Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
   */
  quantity?: Quantity | undefined;
  /**
   * Who will receive payment.
   */
  recipient?: Reference | undefined;
  /**
   * Who will make payment.
   */
  responsible?: Reference | undefined;
  /**
   * A set of security labels that define which terms are controlled by this condition.
   */
  securityLabelNumber?: number[] | undefined;
  /**
   * A Contract Valued Item unit valuation measure.
   */
  unitPrice?: Money | undefined;
}
/**
 * Contract Term Asset List
 */
export interface ContractTermAsset extends BackboneElement {
  /**
   * Response to assets.
   */
  answer?: ContractTermOfferAnswer[] | undefined;
  /**
   * Description of the quality and completeness of the asset that may be a factor in its valuation.
   */
  condition?: string | undefined;
  _condition?: Element | undefined;
  /**
   * Circumstance of the asset.
   */
  assetContext?: ContractTermAssetContext[] | undefined;
  /**
   * Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse.
   */
  linkId?: string[] | undefined;
  _linkId?: Element[] | undefined;
  /**
   * Asset relevant contractual time period.
   */
  period?: Period[] | undefined;
  /**
   * Type of Asset availability for use or ownership.
   */
  periodType?: CodeableConcept[] | undefined;
  /**
   * Specifies the applicability of the term to an asset resource instance, and instances it refers to or instances that refer to it, and/or are owned by the offeree.
   */
  relationship?: Coding | undefined;
  /**
   * Differentiates the kind of the asset .
   */
  scope?: CodeableConcept | undefined;
  /**
   * Security labels that protects the asset.
   */
  securityLabelNumber?: number[] | undefined;
  /**
   * May be a subtype or part of an offered asset.
   */
  subtype?: CodeableConcept[] | undefined;
  /**
   * Clause or question text (Prose Object) concerning the asset in a linked form, such as a QuestionnaireResponse used in the formation of the contract.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * Target entity type about which the term may be concerned.
   */
  type?: CodeableConcept[] | undefined;
  /**
   * Associated entities.
   */
  typeReference?: Reference[] | undefined;
  /**
   * Time period of asset use.
   */
  usePeriod?: Period[] | undefined;
  /**
   * Contract Valued Item List.
   */
  valuedItem?: ContractTermAssetValuedItem[] | undefined;
}
/**
 * Response to offer text
 */
export interface ContractTermOfferAnswer extends BackboneElement {
  /**
   * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
   */
  valueCoding?: Coding | undefined;
  /**
   * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
   */
  valuenumber?: number | undefined;
  /**
   * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research.
   */
  valueReference?: Reference | undefined;
}
/**
 * Offer Recipient
 */
export interface ContractTermOfferParty extends BackboneElement {
  /**
   * Participant in the offer.
   */
  reference: Reference[];
  /**
   * How the party participates in the offer.
   */
  role: CodeableConcept;
}
/**
 * Context of the Contract term
 */
export interface ContractTermOffer extends BackboneElement {
  /**
   * Response to offer text.
   */
  answer?: ContractTermOfferAnswer[] | undefined;
  /**
   * Type of choice made by accepting party with respect to an offer made by an offeror/ grantee.
   */
  decision?: CodeableConcept | undefined;
  /**
   * How the decision about a Contract was conveyed.
   */
  decisionMode?: CodeableConcept[] | undefined;
  /**
   * Unique identifier for this particular Contract Provision.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The id of the clause or question text of the offer in the referenced questionnaire/response.
   */
  linkId?: string[] | undefined;
  _linkId?: Element[] | undefined;
  /**
   * Offer Recipient.
   */
  contractParty?: ContractTermOfferParty[] | undefined;
  /**
   * Security labels that protects the offer.
   */
  securityLabelNumber?: number[] | undefined;
  /**
   * Human readable form of this Contract Offer.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The owner of an asset has the residual control rights over the asset: the right to decide all usages of the asset in any way not inconsistent with a prior contract, custom, or law (Hart, 1995, p. 30).
   * The Contract.topic may be an application for or offer of a policy or service (e.g., uri to a consent directive form or a health insurance policy), which becomes the Contract once accepted by both the grantor and grantee. 
   * The Contract Resource may function simply as the computable representation of the executed contract, which may be the attached to the Contract Resource as the “binding” or as the “friendly” electronic form.  For example, a Contract Resource may be automatically populated with the values expressed in a related QuestionnaireResponse. 
   * However, the Contract Resource may be considered the legally binding contract if it is the only “executed” form of this contract, and includes the signatures as *The Contract Resource may function as the computable representation of an application or offer in a pre-executed Contract if the grantor has not entered any values.  In this case, it is populated with values in a “legal” form of the application or offer or by the values in an associated Questionnaire.  If the grantor has filled in the legal form or the associated Questionnaire Response, then these values are used to populate a pre-executed Contract Resource.
   * If the Contract.topic is considered an application or offer, then the policy is often required to be attached as the “legal” basis for the application to ensure “informed consent” to the contract, and that any discrepancy between the application and the policy are interpreted against the policy.  Implementers should check organizational and jurisdictional policies to determine the relationship among multiple representations of a contract pre- and post-execution.
   */
  topic?: Reference | undefined;
  /**
   * Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Protection for the Term
 * Within a Contract, a security label may apply to the one to many nested group of terms or to a term, whether inside a group or a singleton.  The security label on the entire set of term provision elements may be different from the security labels on a contained offer, asset, valuedItem, or data such as sensitive information, and must be the high water mark of all security labels within the term. Rationale is that a labelled term, which may be disaggregated from the Contract, and must persist the label on the term and on contained elements within other contexts. If more than one policy dictates a level of confidentiality of the term, then each applicable policy may be represented by a security label specific to its requirements.
 * A Security Label is comprised of 1..1 confidentiality code and 0..* other security label codes (aka "privacy tags". A Security Label is metadata assigned (aka "tagged") to Resources and Resource elements, which specify the confidentiality and sensitivity of the Resource or element and their related attributes, the purposes for which tagged items may be collected, access, used or disclosed, any limitation on the type of entities authorized to engage in permitted purposes, and handling instructions that obligate or prohibit certain actions on the tagged items.
 */
export interface ContractTermSecurityLabel extends BackboneElement {
  /**
   * Security label privacy tag that specifies the applicable privacy and security policies governing this term and/or term elements.
   */
  category?: Coding[] | undefined;
  /**
   * Security label privacy tag that specifies the level of confidentiality protection required for this term and/or term elements.
   */
  classification: Coding;
  /**
   * Security label privacy tag that specifies the manner in which term and/or term elements are to be protected.
   */
  control?: Coding[] | undefined;
  /**
   * Number used to link this term or term element to the applicable Security Label.
   */
  number?: number[] | undefined;
}
/**
 * Contract Term List
 */
export interface ContractTerm extends BackboneElement {
  /**
   * An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
   * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
   * For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
   */
  action?: ContractTermAction[] | undefined;
  /**
   * Relevant time or time-period when this Contract Provision is applicable.
   */
  applies?: Period | undefined;
  /**
   * Contract Term Asset List.
   */
  contractAsset?: ContractTermAsset[] | undefined;
  /**
   * Nested group of Contract Provisions.
   */
  group?: ContractTerm[] | undefined;
  /**
   * Unique identifier for this particular Contract Provision.
   */
  identifier?: Identifier | undefined;
  /**
   * When this Contract Provision was issued.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * The matter of concern in the context of this provision of the agrement.
   */
  contractOffer: ContractTermOffer;
  /**
   * Security labels that protect the handling of information about the term and its elements, which may be specifically identified.
   * Within a Contract, a security label may apply to the one to many nested group of terms or to a term, whether inside a group or a singleton.  The security label on the entire set of term provision elements may be different from the security labels on a contained offer, asset, valuedItem, or data such as sensitive information, and must be the high water mark of all security labels within the term. Rationale is that a labelled term, which may be disaggregated from the Contract, and must persist the label on the term and on contained elements within other contexts. If more than one policy dictates a level of confidentiality of the term, then each applicable policy may be represented by a security label specific to its requirements.
   * A Security Label is comprised of 1..1 confidentiality code and 0..* other security label codes (aka "privacy tags". A Security Label is metadata assigned (aka "tagged") to Resources and Resource elements, which specify the confidentiality and sensitivity of the Resource or element and their related attributes, the purposes for which tagged items may be collected, access, used or disclosed, any limitation on the type of entities authorized to engage in permitted purposes, and handling instructions that obligate or prohibit certain actions on the tagged items.
   */
  securityLabel?: ContractTermSecurityLabel[] | undefined;
  /**
   * A specialized legal clause or condition based on overarching contract type.
   */
  subType?: CodeableConcept | undefined;
  /**
   * Statement of a provision in a policy or a contract.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The entity that the term applies to.
   */
  topicCodeableConcept?: CodeableConcept | undefined;
  /**
   * The entity that the term applies to.
   */
  topicReference?: Reference | undefined;
  /**
   * A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time.
   */
  type?: CodeableConcept | undefined;
}
export interface Contract extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Contract';
  /**
   * Alternative representation of the title for this Contract definition, derivative, or instance in any legal state., e.g., a domain specific contract number related to legislation.
   */
  alias?: string[] | undefined;
  _alias?: Element[] | undefined;
  /**
   * Relevant time or time-period when this Contract is applicable.
   */
  applies?: Period | undefined;
  /**
   * The individual or organization that authored the Contract definition, derivative, or instance in any legal state.
   */
  author?: Reference | undefined;
  /**
   * A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
   */
  authority?: Reference[] | undefined;
  /**
   * Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
   */
  contentDefinition?: ContractContentDefinition | undefined;
  /**
   * The minimal content derived from the basal information source at a specific stage in its lifecycle.
   */
  contentDerivative?: CodeableConcept | undefined;
  /**
   * Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
   */
  domain?: Reference[] | undefined;
  /**
   * Event resulting in discontinuation or termination of this Contract instance by one or more parties to the contract.
   */
  expirationType?: CodeableConcept | undefined;
  /**
   * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
   */
  friendlyLanguage?: ContractFriendly[] | undefined;
  /**
   * Unique identifier for this Contract or a derivative that references a Source Contract.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The URL pointing to a FHIR-defined Contract Definition that is adhered to in whole or part by this Contract.
   */
  instantiatesCanonical?: Reference | undefined;
  /**
   * The URL pointing to an externally maintained definition that is adhered to in whole or in part by this Contract.
   */
  instantiatesUri?: string | undefined;
  _instantiatesUri?: Element | undefined;
  /**
   * When this  Contract was issued.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * List of Legal expressions or representations of this Contract.
   */
  legalLanguage?: ContractLegal[] | undefined;
  /**
   * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
   */
  legallyBindingAttachment?: Attachment | undefined;
  /**
   * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
   */
  legallyBindingReference?: Reference | undefined;
  /**
   * Legal states of the formation of a legal instrument, which is a formally executed written document that can be formally attributed to its author, records and formally expresses a legally enforceable act, process, or contractual duty, obligation, or right, and therefore evidences that act, process, or agreement.
   */
  legalState?: CodeableConcept | undefined;
  /**
   * A natural language name identifying this Contract definition, derivative, or instance in any legal state. Provides additional information about its content. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Links to Provenance records for past versions of this Contract definition, derivative, or instance, which identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the Contract.  The Provenance.entity indicates the target that was changed in the update (see [Provenance.entity](provenance-definitions.html#Provenance.entity)).
   */
  relevantHistory?: Reference[] | undefined;
  /**
   * List of Computable Policy Rule Language Representations of this Contract.
   */
  computableLanguage?: ContractRule[] | undefined;
  /**
   * A selector of legal concerns for this Contract definition, derivative, or instance in any legal state.
   */
  scope?: CodeableConcept | undefined;
  /**
   * Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.
   * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
   * For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
   */
  signatory?: ContractSigner[] | undefined;
  /**
   * Sites in which the contract is complied with,  exercised, or in force.
   */
  site?: Reference[] | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the contract as not currently valid or active.
   */
  status?: ('amended'|'appended'|'cancelled'|'disputed'|'entered-in-error'|'executable'|'executed'|'negotiable'|'offered'|'policy'|'rejected'|'renewed'|'revoked'|'resolved'|'terminated') | undefined;
  _status?: Element | undefined;
  /**
   * The target entity impacted by or of interest to parties to the agreement.
   * The Contract.subject is an entity that has some role with respect to the Contract.topic and Contract.topic.term, which is of focal interest to the parties to the contract and likely impacted in a significant way by the Contract.action/Contract.action.reason and the Contract.term.action/Contract.action.reason. 
   * In many cases, the Contract.subject is a Contract.signer if the subject is an adult; has a legal interest in the contract; and incompetent to participate in the contract agreement.
   */
  subject?: Reference[] | undefined;
  /**
   * A more detailed or qualifying explanatory or alternate user-friendly title for this Contract definition, derivative, or instance in any legal state.
   */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;
  /**
   * Sub-category for the Contract that distinguishes the kinds of systems that would be interested in the Contract within the context of the Contract's scope.
   */
  subType?: CodeableConcept[] | undefined;
  /**
   * Information that may be needed by/relevant to the performer in their execution of this term action.
   */
  supportingInfo?: Reference[] | undefined;
  /**
   * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
   */
  term?: ContractTerm[] | undefined;
  /**
   * A short, descriptive, user-friendly title for this Contract definition, derivative, or instance in any legal state.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
   * Contractual areas of concern are very broad. This element supports narrowing the area of concern to more specific term topics within this Contract. Given the wide range of contract topics, implementers need to be cognizant of the business use case for which they are designing a FHIR Contract, and narrowly specify the topic being represented with respect to the Contract.type and any specializing Contract.subtype. The same topic, e.g., an asset such as a good or service, such as a real property, medical supply, insurance, information, a procedure or employment, or a manner of conduct, such adherence to a privacy, trust, or security policy, may be the topic of multiple types of contracts. 
   * One way to determine the Contract.topic is to answer the question: "What is the overall objective of this legal instrument?". The Contract.topic is described with more detail by the terms of the Contract.
   */
  topicCodeableConcept?: CodeableConcept | undefined;
  /**
   * Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
   * Contractual areas of concern are very broad. This element supports narrowing the area of concern to more specific term topics within this Contract. Given the wide range of contract topics, implementers need to be cognizant of the business use case for which they are designing a FHIR Contract, and narrowly specify the topic being represented with respect to the Contract.type and any specializing Contract.subtype. The same topic, e.g., an asset such as a good or service, such as a real property, medical supply, insurance, information, a procedure or employment, or a manner of conduct, such adherence to a privacy, trust, or security policy, may be the topic of multiple types of contracts. 
   * One way to determine the Contract.topic is to answer the question: "What is the overall objective of this legal instrument?". The Contract.topic is described with more detail by the terms of the Contract.
   */
  topicReference?: Reference | undefined;
  /**
   * A high-level category for the legal instrument, whether constructed as a Contract definition, derivative, or instance in any legal state.  Provides additional information about its content within the context of the Contract's scope to distinguish the kinds of systems that would be interested in the contract.
   */
  type?: CodeableConcept | undefined;
  /**
   * Canonical identifier for this contract, represented as a URI (globally unique).
   * Used in a domain that uses a supplied contract repository.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * An edition identifier used for business purposes to label business significant variants.
   * Note -  This is a business versionId, not a resource version id (see discussion at [Versioning](resource.html#versions)) 
   * Comments - There may be different contract instances that have the same identifier but different versions. The version can be appended to the url in a reference to allow a reference to a particular business version of the plan definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Additional coverage classifications
 * For example, class may be used to identify a class of coverage or employer group, policy, or plan.
 */
export interface CoverageClass extends BackboneElement {
  /**
   * A short description for the class.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The type of classification for which an insurer-specific class label or number and optional name is provided.  For example, type may be used to identify a class of coverage or employer group, policy, or plan.
   */
  type: CodeableConcept;
  /**
   * The alphanumeric identifier associated with the insurer issued label.
   * For example, the Group or Plan number.
   */
  value: Identifier;
}
/**
 * Exceptions for patient payments
 */
export interface CoverageCostToBeneficiaryException extends BackboneElement {
  /**
   * The timeframe the exception is in force.
   */
  period?: Period | undefined;
  /**
   * The code for the specific exception.
   */
  type: CodeableConcept;
}
/**
 * Patient payments for services/products
 * For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
 */
export interface CoverageCostToBeneficiary extends BackboneElement {
  /**
   * Code to identify the general type of benefits under which products and services are provided.
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: CodeableConcept | undefined;
  /**
   * A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
   */
  exemption?: CoverageCostToBeneficiaryException[] | undefined;
  /**
   * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
   */
  network?: CodeableConcept | undefined;
  /**
   * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
   */
  term?: CodeableConcept | undefined;
  /**
   * The category of patient centric costs associated with treatment.
   * For example visit, specialist visits, emergency, inpatient care, etc.
   */
  type?: CodeableConcept | undefined;
  /**
   * Indicates if the benefits apply to an individual or to the family.
   */
  unit?: CodeableConcept | undefined;
  /**
   * The amount due from the patient for the cost category.
   * Amount may be expressed as a percentage of the service/product cost or a fixed amount of currency.
   */
  valueMoney?: Money | undefined;
  /**
   * The amount due from the patient for the cost category.
   * Amount may be expressed as a percentage of the service/product cost or a fixed amount of currency.
   */
  valueQuantity?: Quantity | undefined;
}
/**
 * Self-pay parties and responsibility
 */
export interface CoveragePaymentBy extends BackboneElement {
  /**
   * The list of parties providing non-insurance payment for the treatment costs.
   */
  party: Reference;
  /**
   * Description of the financial responsibility.
   */
  responsibility?: string | undefined;
  _responsibility?: Element | undefined;
}
/**
 * The Coverage resource contains the insurance card level information, which is customary to provide on claims and other communications between providers and insurers.
 */
export interface Coverage extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Coverage';
  /**
   * The party who benefits from the insurance coverage; the patient when products and/or services are provided.
   */
  beneficiary: Reference;
  /**
   * A suite of underwriter specific classifiers.
   * For example, class may be used to identify a class of coverage or employer group, policy, or plan.
   */
  class?: CoverageClass[] | undefined;
  /**
   * The policy(s) which constitute this insurance coverage.
   */
  contract?: Reference[] | undefined;
  /**
   * A suite of codes indicating the cost category and associated amount which have been detailed in the policy and may have been  included on the health card.
   * For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
   */
  costToBeneficiary?: CoverageCostToBeneficiary[] | undefined;
  /**
   * A designator for a dependent under the coverage.
   * Sometimes the member number is constructed from the subscriberId and the dependant number.
   */
  dependent?: string | undefined;
  _dependent?: Element | undefined;
  /**
   * The identifier of the coverage as issued by the insurer.
   * The main (and possibly only) identifier for the coverage - often referred to as a Member Id, Certificate number, Personal Health Number or Case ID. May be constructed as the concatenation of the Coverage.SubscriberID and the Coverage.dependant. Note that not all insurers issue unique member IDs therefore searches may result in multiple responses.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The insurance plan details, benefits and costs, which constitute this insurance coverage.
   */
  insurancePlan?: Reference | undefined;
  /**
   * The program or plan underwriter, payor, insurance company.
   * May provide multiple identifiers such as insurance company identifier or business identifier (BIN number).
   */
  insurer?: Reference | undefined;
  /**
   * The nature of the coverage be it insurance, or cash payment such as self-pay.
   */
  kind: ('insurance'|'self-pay'|'other');
  _kind?: Element | undefined;
  /**
   * The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply.
   */
  network?: string | undefined;
  _network?: Element | undefined;
  /**
   * The order of applicability of this coverage relative to other coverages which are currently in force. Note, there may be gaps in the numbering and this does not imply primary, secondary etc. as the specific positioning of coverages depends upon the episode of care. For example; a patient might have (0) auto insurance (1) their own health insurance and (2) spouse's health insurance. When claiming for treatments which were not the result of an auto accident then only coverages (1) and (2) above would be applicatble and would apply in the order specified in parenthesis.
   */
  order?: number | undefined;
  /**
   * Link to the paying party and optionally what specifically they will be responsible to pay.
   */
  paymentBy?: CoveragePaymentBy[] | undefined;
  /**
   * Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
   */
  period?: Period | undefined;
  /**
   * The party who 'owns' the insurance policy.
   * For example: may be an individual, corporation or the subscriber's employer.
   */
  policyHolder?: Reference | undefined;
  /**
   * The relationship of beneficiary (patient) to the subscriber.
   * Typically, an individual uses policies which are theirs (relationship='self') before policies owned by others.
   */
  relationship?: CodeableConcept | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the coverage as not currently valid.
   */
  status: ('active'|'cancelled'|'draft'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * When 'subrogation=true' this insurance instance has been included not for adjudication but to provide insurers with the details to recover costs.
   * Typically, automotive and worker's compensation policies would be flagged with 'subrogation=true' to enable healthcare payors to collect against accident claims.
   */
  subrogation?: boolean | undefined;
  _subrogation?: Element | undefined;
  /**
   * The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due.
   * May be self or a parent in the case of dependants. A subscriber is only required on certain types of policies not all policies and that it is appropriate to have just a policyholder and a beneficiary when not other party can join that policy instance.
   */
  subscriber?: Reference | undefined;
  /**
   * The insurer assigned ID for the Subscriber.
   */
  subscriberId?: Identifier[] | undefined;
  /**
   * The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Event information
 */
export interface CoverageEligibilityRequestEvent extends BackboneElement {
  /**
   * A coded event such as when a service is expected or a card printed.
   */
  type: CodeableConcept;
  /**
   * A date or period in the past or future indicating when the event occurred or is expectd to occur.
   */
  whenstring?: string | undefined;
  _whenstring?: Element | undefined;
  /**
   * A date or period in the past or future indicating when the event occurred or is expectd to occur.
   */
  whenPeriod?: Period | undefined;
}
/**
 * Patient insurance information
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export interface CoverageEligibilityRequestInsurance extends BackboneElement {
  /**
   * A business agreement number established between the provider and the insurer for special business processing purposes.
   */
  businessArrangement?: string | undefined;
  _businessArrangement?: Element | undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  coverage: Reference;
  /**
   * A flag to indicate that this Coverage is to be used for evaluation of this request when set to true.
   * A patient may (will) have multiple insurance policies which provide reimburement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for evaluating this request. Other requests would be created to request evaluation against the other listed policies.
   */
  focal?: boolean | undefined;
  _focal?: Element | undefined;
}
/**
 * Applicable diagnosis
 */
export interface CoverageEligibilityRequestItemDiagnosis extends BackboneElement {
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisCodeableConcept?: CodeableConcept | undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisReference?: Reference | undefined;
}
/**
 * Item to be evaluated for eligibiity
 */
export interface CoverageEligibilityRequestItem extends BackboneElement {
  /**
   * Code to identify the general type of benefits under which products and services are provided.
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: CodeableConcept | undefined;
  /**
   * The plan/proposal/order describing the proposed service in detail.
   */
  detail?: Reference[] | undefined;
  /**
   * Patient diagnosis for which care is sought.
   */
  diagnosis?: CoverageEligibilityRequestItemDiagnosis[] | undefined;
  /**
   * Facility where the services will be provided.
   */
  facility?: Reference | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * This contains the product, service, drug or other billing code for the item.
   * Code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI).
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * The practitioner who is responsible for the product or service to be rendered to the patient.
   */
  provider?: Reference | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * Exceptions, special conditions and supporting information applicable for this service or product line.
   */
  supportingInfoSequence?: number[] | undefined;
  /**
   * The amount charged to the patient by the provider for a single unit.
   */
  unitPrice?: Money | undefined;
}
/**
 * Supporting information
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export interface CoverageEligibilityRequestSupportingInfo extends BackboneElement {
  /**
   * The supporting materials are applicable for all detail items, product/servce categories and specific billing codes.
   */
  appliesToAll?: boolean | undefined;
  _appliesToAll?: Element | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   * Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  information: Reference;
  /**
   * A number to uniquely identify supporting information entries.
   */
  sequence: number;
}
export interface CoverageEligibilityRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CoverageEligibilityRequest';
  /**
   * The date when this resource was created.
   */
  created: string;
  _created?: Element | undefined;
  /**
   * Person who created the request.
   */
  enterer?: Reference | undefined;
  /**
   * Information code for an event with a corresponding date or period.
   */
  event?: CoverageEligibilityRequestEvent[] | undefined;
  /**
   * Facility where the services are intended to be provided.
   */
  facility?: Reference | undefined;
  /**
   * A unique identifier assigned to this coverage eligiblity request.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Financial instruments for reimbursement for the health care products and services.
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  insurance?: CoverageEligibilityRequestInsurance[] | undefined;
  /**
   * The Insurer who issued the coverage in question and is the recipient of the request.
   */
  insurer: Reference;
  /**
   * Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
   */
  details?: CoverageEligibilityRequestItem[] | undefined;
  /**
   * The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
   * 1..1.
   */
  patient: Reference;
  /**
   * When the requestor expects the processor to complete processing.
   */
  priority?: CodeableConcept | undefined;
  /**
   * The provider which is responsible for the request.
   * Typically this field would be 1..1 where this party is accountable for the data content within the claim but is not necessarily the facility, provider group or practitioner who provided the products and services listed within this claim resource. This field is the Billing Provider, for example, a facility, provider group, lab or practitioner.
   */
  provider?: Reference | undefined;
  /**
   * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
   */
  purpose: ('auth-requirements'|'benefits'|'discovery'|'validation')[];
  _purpose?: Element[] | undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  servicedstring?: string | undefined;
  _servicedstring?: Element | undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  servicedPeriod?: Period | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('active'|'cancelled'|'draft'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
   * Often there are multiple jurisdiction specific valuesets which are required.
   */
  supportingInformation?: CoverageEligibilityRequestSupportingInfo[] | undefined;
}
/**
 * Processing errors
 */
export interface CoverageEligibilityResponseError extends BackboneElement {
  /**
   * An error code,from a specified code system, which details why the eligibility check could not be performed.
   */
  code: CodeableConcept;
  /**
   * A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.
   * The root of the FHIRPath is the resource or bundle that generated OperationOutcome.  Each FHIRPath SHALL resolve to a single node.
   */
  expression?: string[] | undefined;
  _expression?: Element[] | undefined;
}
/**
 * Event information
 */
export interface CoverageEligibilityResponseEvent extends BackboneElement {
  /**
   * A coded event such as when a service is expected or a card printed.
   */
  type: CodeableConcept;
  /**
   * A date or period in the past or future indicating when the event occurred or is expectd to occur.
   */
  whenstring?: string | undefined;
  _whenstring?: Element | undefined;
  /**
   * A date or period in the past or future indicating when the event occurred or is expectd to occur.
   */
  whenPeriod?: Period | undefined;
}
/**
 * Benefit Summary
 */
export interface CoverageEligibilityResponseInsuranceItemBenefit extends BackboneElement {
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowedMoney?: Money | undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowedstring?: string | undefined;
  _allowedstring?: Element | undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowednumber?: number | undefined;
  /**
   * Classification of benefit being provided.
   * For example: deductible, visits, benefit amount.
   */
  type: CodeableConcept;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  usedMoney?: Money | undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  usedstring?: string | undefined;
  _usedstring?: Element | undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  usednumber?: number | undefined;
}
/**
 * Benefits and authorization details
 */
export interface CoverageEligibilityResponseInsuranceItem extends BackboneElement {
  /**
   * A boolean flag indicating whether a preauthorization is required prior to actual service delivery.
   */
  authorizationRequired?: boolean | undefined;
  _authorizationRequired?: Element | undefined;
  /**
   * Codes or comments regarding information or actions associated with the preauthorization.
   */
  authorizationSupporting?: CodeableConcept[] | undefined;
  /**
   * A web location for obtaining requirements or descriptive information regarding the preauthorization.
   */
  authorizationUrl?: string | undefined;
  _authorizationUrl?: Element | undefined;
  /**
   * Benefits used to date.
   */
  benefit?: CoverageEligibilityResponseInsuranceItemBenefit[] | undefined;
  /**
   * Code to identify the general type of benefits under which products and services are provided.
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: CodeableConcept | undefined;
  /**
   * A richer description of the benefit or services covered.
   * For example 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
   */
  excluded?: boolean | undefined;
  _excluded?: Element | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * A short name or tag for the benefit.
   * For example: MED01, or DENT2.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
   */
  network?: CodeableConcept | undefined;
  /**
   * This contains the product, service, drug or other billing code for the item.
   * Code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI).
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * The practitioner who is eligible for the provision of the product or service.
   */
  provider?: Reference | undefined;
  /**
   * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
   */
  term?: CodeableConcept | undefined;
  /**
   * Indicates if the benefits apply to an individual or to the family.
   */
  unit?: CodeableConcept | undefined;
}
/**
 * Patient insurance information
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export interface CoverageEligibilityResponseInsurance extends BackboneElement {
  /**
   * The term of the benefits documented in this response.
   */
  benefitPeriod?: Period | undefined;
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  coverage: Reference;
  /**
   * Flag indicating if the coverage provided is inforce currently if no service date(s) specified or for the whole duration of the service dates.
   */
  inforce?: boolean | undefined;
  _inforce?: Element | undefined;
  /**
   * Benefits and optionally current balances, and authorization details by category or service.
   */
  items?: CoverageEligibilityResponseInsuranceItem[] | undefined;
}
export interface CoverageEligibilityResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CoverageEligibilityResponse';
  /**
   * The date this resource was created.
   */
  created: string;
  _created?: Element | undefined;
  /**
   * A human readable description of the status of the adjudication.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * Errors encountered during the processing of the request.
   */
  errors?: CoverageEligibilityResponseError[] | undefined;
  /**
   * Information code for an event with a corresponding date or period.
   */
  event?: CoverageEligibilityResponseEvent[] | undefined;
  /**
   * A code for the form to be used for printing the content.
   * May be needed to identify specific jurisdictional forms.
   */
  form?: CodeableConcept | undefined;
  /**
   * A unique identifier assigned to this coverage eligiblity request.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Financial instruments for reimbursement for the health care products and services.
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  insurance?: CoverageEligibilityResponseInsurance[] | undefined;
  /**
   * The Insurer who issued the coverage in question and is the author of the response.
   */
  insurer: Reference;
  /**
   * The outcome of the request processing.
   * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
   */
  outcome: ('queued'|'complete'|'error'|'partial');
  _outcome?: Element | undefined;
  /**
   * The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
   */
  patient: Reference;
  /**
   * A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred.
   */
  preAuthRef?: string | undefined;
  _preAuthRef?: Element | undefined;
  /**
   * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
   */
  purpose: ('auth-requirements'|'benefits'|'discovery'|'validation')[];
  _purpose?: Element[] | undefined;
  /**
   * Reference to the original request resource.
   */
  request: Reference;
  /**
   * The provider which is responsible for the request.
   * This party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below. This field is the Billing Provider, for example, a facility, provider group, lab or practitioner.
   */
  requestor?: Reference | undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  servicedstring?: string | undefined;
  _servicedstring?: Element | undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  servicedPeriod?: Period | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('active'|'cancelled'|'draft'|'entered-in-error');
  _status?: Element | undefined;
}
/**
 * Supporting evidence
 */
export interface DetectedIssueEvidence extends BackboneElement {
  /**
   * A manifestation that led to the recording of this detected issue.
   */
  code?: CodeableConcept[] | undefined;
  /**
   * Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport.
   */
  detail?: Reference[] | undefined;
}
/**
 * Step taken to address
 */
export interface DetectedIssueMitigation extends BackboneElement {
  /**
   * Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.
   * The "text" component can be used for detail or when no appropriate code exists.
   */
  action: CodeableConcept;
  /**
   * Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
   */
  author?: Reference | undefined;
  /**
   * Indicates when the mitigating action was documented.
   * This might not be the same as when the mitigating step was actually taken.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Clinicians may add additional notes or justifications about the mitigation action. For example, patient can have this drug because they have had it before without any issues. Multiple justifications may be provided.
   */
  note?: Annotation[] | undefined;
}
export interface DetectedIssue extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DetectedIssue';
  /**
   * Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
   */
  author?: Reference | undefined;
  /**
   * A code that classifies the general type of detected issue.
   * In addition to the required category valueset, this element allows various categorization schemes based on the owner’s definition of the category and effectively multiple categories can be used at once.  The level of granularity is defined by the category concepts in the value set.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Identifies the specific type of issue identified.
   */
  code?: CodeableConcept | undefined;
  /**
   * A textual explanation of the detected issue.
   * Should focus on information not covered elsewhere as discrete data - no need to duplicate the narrative.
   */
  detail?: string | undefined;
  _detail?: Element | undefined;
  /**
   * The encounter during which this issue was detected.
   * This will typically be the encounter the DetectedIssue was created during, but some DetectedIssues may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).
   */
  encounter?: Reference | undefined;
  /**
   * Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
   */
  evidence?: DetectedIssueEvidence[] | undefined;
  /**
   * The date or period when the detected issue was initially identified.
   */
  identifiedstring?: string | undefined;
  _identifiedstring?: Element | undefined;
  /**
   * The date or period when the detected issue was initially identified.
   */
  identifiedPeriod?: Period | undefined;
  /**
   * Business identifier associated with the detected issue record.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Indicates the resource representing the current activity or proposed activity that is potentially problematic.
   * There's an implicit constraint on the number of implicated resources based on DetectedIssue.type; e.g. For drug-drug, there would be more than one.  For timing, there would typically only be one.
   */
  implicated?: Reference[] | undefined;
  /**
   * Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
   */
  mitigation?: DetectedIssueMitigation[] | undefined;
  /**
   * The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
   */
  reference?: string | undefined;
  _reference?: Element | undefined;
  /**
   * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
   */
  severity?: ('high'|'moderate'|'low') | undefined;
  _severity?: Element | undefined;
  /**
   * Indicates the status of the detected issue.
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the issue as not currently valid.
   */
  status: ('preliminary'|'final'|'entered-in-error'|'mitigated');
  _status?: Element | undefined;
  /**
   * Indicates the subject whose record the detected issue is associated with.
   */
  subject?: Reference | undefined;
}
/**
 * Identifies the standards, specifications, or formal guidances for the capabilities supported by the device
 */
export interface DeviceConformsTo extends BackboneElement {
  /**
   * Describes the type of the standard, specification, or formal guidance.
   */
  category?: CodeableConcept | undefined;
  /**
   * Code that identifies the specific standard, specification, protocol, formal guidance, regulation, legislation, or certification scheme to which the device adheres.
   */
  specification: CodeableConcept;
  /**
   * Identifies the specific form or variant of the standard, specification, or formal guidance. This may be a 'version number', release, document edition, publication year, or other label.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * The name or names of the device as known to the manufacturer and/or patient
 */
export interface DeviceName extends BackboneElement {
  /**
   * Indicates the default or preferred name to be displayed.
   */
  display?: boolean | undefined;
  _display?: Element | undefined;
  /**
   * Indicates the kind of name. RegisteredName | UserFriendlyName | PatientReportedName.
   */
  type: ('registered-name'|'user-friendly-name'|'patient-reported-name');
  _type?: Element | undefined;
  /**
   * The actual name that identifies the device.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Inherent, essentially fixed, characteristics of the device.  e.g., time properties, size, material, etc.
 * Dynamic or current properties, such as settings, of an individual device are described using a Device instance-specific [DeviceMetric] and recorded using [Observation].  Static characteristics of a device could also be documented in an associated [DeviceDefinition] instance. The Device instance's properties, and their values, could be, but need not be, the same as those described in an associated DeviceDefinition.
 */
export interface DeviceProperty extends BackboneElement {
  /**
   * Code that specifies the property, such as resolution, color, size, being represented.
   */
  type: CodeableConcept;
  /**
   * The value of the property specified by the associated property.type code.
   * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The value of the property specified by the associated property.type code.
   * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of the property specified by the associated property.type code.
   * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the property specified by the associated property.type code.
   * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
   */
  valuenumber?: number | undefined;
  /**
   * The value of the property specified by the associated property.type code.
   * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the property specified by the associated property.type code.
   * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
   */
  valueRange?: Range | undefined;
  /**
   * The value of the property specified by the associated property.type code.
   * The text element in CodeableConcept.text is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g. a custom implant size, or a security classification which depends on configuration). Otherwise the string choice type is used for descriptive properties, or instructions.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
}
/**
 * Unique Device Identifier (UDI) Barcode string
 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
 */
export interface DeviceUdiCarrier extends BackboneElement {
  /**
   * The full UDI carrier of the Automatic Identification and Data Capture (AIDC) technology representation of the barcode string as printed on the packaging of the device - e.g., a barcode or RFID.   Because of limitations on character sets in XML and the need to round-trip JSON data through XML, AIDC Formats *SHALL* be base64 encoded.
   * The AIDC form of UDIs should be scanned or otherwise used for the identification of the device whenever possible to minimize errors in records resulting from manual transcriptions. If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
   */
  carrierAIDC?: string | undefined;
  _carrierAIDC?: Element | undefined;
  /**
   * The full UDI carrier as the human readable form (HRF) representation of the barcode string as printed on the packaging of the device.
   * If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
   */
  carrierHRF?: string | undefined;
  _carrierHRF?: Element | undefined;
  /**
   * The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
   */
  deviceIdentifier: string;
  _deviceIdentifier?: Element | undefined;
  /**
   * A coded entry to indicate how the data was entered.
   */
  entryType?: ('barcode'|'rfid'|'manual'|'card'|'self-reported'|'electronic-transmission'|'unknown') | undefined;
  _entryType?: Element | undefined;
  /**
   * Organization that is charged with issuing UDIs for devices. For example, the US FDA issuers include: 
   * 1) GS1: http://hl7.org/fhir/NamingSystem/gs1-di, 
   * 2) HIBCC: http://hl7.org/fhir/NamingSystem/hibcc-diI, 
   * 3) ICCBBA for blood containers: http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 
   * 4) ICCBA for other devices: http://hl7.org/fhir/NamingSystem/iccbba-other-di # Informationsstelle für Arzneispezialitäten (IFA GmbH) (EU only): http://hl7.org/fhir/NamingSystem/ifa-gmbh-di.
   */
  issuer: string;
  _issuer?: Element | undefined;
  /**
   * The identity of the authoritative source for UDI generation within a jurisdiction. All UDIs are globally unique within a single namespace with the appropriate repository uri as the system. For example, UDIs of devices managed in the U.S. by the FDA, the value is http://hl7.org/fhir/NamingSystem/us-fda-udi or in the European Union by the European Commission http://hl7.org/fhir/NamingSystem/eu-ec-udi.
   */
  jurisdiction?: string | undefined;
  _jurisdiction?: Element | undefined;
}
/**
 * The actual design of the device or software version running on the device
 */
export interface DeviceVersion extends BackboneElement {
  /**
   * The hardware or software module of the device to which the version applies.
   * Note that the module of the device would not need to be tracked as a separate device, e.g., using different UDI, thus would typically involve one or more software modules. For example, a device may involve two software modules each on a different version.
   */
  component?: Identifier | undefined;
  /**
   * The date the version was installed on the device.
   */
  installDate?: string | undefined;
  _installDate?: Element | undefined;
  /**
   * The type of the device version, e.g. manufacturer, approved, internal.
   */
  type?: CodeableConcept | undefined;
  /**
   * The version text.
   */
  value: string;
  _value?: Element | undefined;
}
export interface Device extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Device';
  /**
   * The availability of the device.
   */
  availabilityStatus?: CodeableConcept | undefined;
  /**
   * An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.
   * Necessary to support mandatory requirements for traceability from donor/source to recipient and vice versa, while also satisfying donor anonymity requirements. The element is defined consistently across BiologicallyDerivedProduct, NutritionProduct, and Device.  The identifier references an event that links to a single biological entity such as a blood donor, or to multiple biological entities (e.g. when the product is an embryo or a pooled platelet product).  A single biologicalSourceEvent identifier may appear on multiple products of many types derived from a single donation event or source extraction.  As an example, a single donation event may provide 2 kidneys and a liver for organ transplantation, 2 corneas for eye surgery, heart valves and arterial tissue for cardiovascular surgery, multiple skin grafts, tendons, multiple shaped bone grafts and a large number of bone putty/paste products; and each of them may be assigned to the same biological source event identifier.
   */
  biologicalSourceEvent?: Identifier | undefined;
  /**
   * Devices may be associated with one or more categories.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Identifies the standards, specifications, or formal guidances for the capabilities supported by the device. The device may be certified as conformant to these specifications e.g., communication, performance, process, measurement, or specialization standards.
   */
  conformsTo?: DeviceConformsTo[] | undefined;
  /**
   * Contact details for an organization or a particular human that is responsible for the device.
   * used for troubleshooting etc.
   */
  contact?: ContactPoint[] | undefined;
  /**
   * The series of occurrences that repeats during the operation of the device.
   */
  cycle?: Count | undefined;
  /**
   * The reference to the definition for the device.
   */
  definition?: CodeableReference | undefined;
  /**
   * The name used to display by default when the device is referenced. Based on intent of use by the resource creator, this may reflect one of the names in Device.name, or may be another simple name.
   */
  displayName?: string | undefined;
  _displayName?: Element | undefined;
  /**
   * A measurement of time during the device's operation (e.g., days, hours, mins, etc.).
   */
  duration?: Duration | undefined;
  /**
   * Technical endpoints providing access to services provided by the device defined at this resource.
   */
  endpoint?: Reference[] | undefined;
  /**
   * The date and time beyond which this device is no longer valid or should not be used (if applicable).
   */
  expirationDate?: string | undefined;
  _expirationDate?: Element | undefined;
  /**
   * The linked device acting as a communication controller, data collector, translator, or concentrator for the current device (e.g., mobile phone application that relays a blood pressure device's data).
   * The Device.gateway may be used when the Device being referenced has a gateway and/or to capture one or more gateways associated with the device. If the Gateway is included in the Observation resource, the Observation.gatewayDevice should be used instead.
   */
  gateway?: CodeableReference[] | undefined;
  /**
   * Unique instance identifiers assigned to a device by manufacturers other organizations or owners.
   * Certain attributes, like serial number and UDI Carrier (the HRF or AIDC barcode string) are not device instance identifiers as they are not consistently able to uniquely identify the instance of a device, thus are not appropriate to be used to value Device.identifier. The barcode string from a barcode present on a device label or package may identify the instance, include names given to the device in local usage, or may identify the type of device. If the identifier identifies the type of device, Device.type element should be used. The identifier is typically valued if the serialNumber or lotNumber is not valued and represents a different type of identifier.  However, it is permissible to still include those identifiers in DeviceDefinition.identifier with the appropriate identifier.type.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The place where the device can be found.
   */
  location?: Reference | undefined;
  /**
   * Lot number assigned by the manufacturer.
   */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;
  /**
   * The date and time when the device was manufactured.
   */
  manufactureDate?: string | undefined;
  _manufactureDate?: Element | undefined;
  /**
   * A name of the manufacturer or entity legally responsible for the device.
   */
  manufacturer?: string | undefined;
  _manufacturer?: Element | undefined;
  /**
   * The designated condition for performing a task with the device.
   */
  mode?: CodeableConcept | undefined;
  /**
   * The manufacturer's model number for the device.
   */
  modelNumber?: string | undefined;
  _modelNumber?: Element | undefined;
  /**
   * This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
   */
  name?: DeviceName[] | undefined;
  /**
   * Descriptive information, usage information or implantation information that is not captured in an existing element.
   */
  note?: Annotation[] | undefined;
  /**
   * An organization that is responsible for the provision and ongoing maintenance of the device.
   */
  owner?: Reference | undefined;
  /**
   * The higher level or encompassing device that this device is a logical part of.
   * For example a vital signs monitor (parent) where three separate modules can be plugged into such as interchangeable blood pressure, oximeter, temperature modules.  These modules are represented as devices with the .parent valued to the vital signs monitor when plugged in.
   */
  parent?: Reference | undefined;
  /**
   * The part number or catalog number of the device.
   * Alphanumeric Maximum 20.
   */
  partNumber?: string | undefined;
  _partNumber?: Element | undefined;
  /**
   * Static or essentially fixed characteristics or features of the device (e.g., time or timing attributes, resolution, accuracy, intended use or instructions for use, and physical attributes) that are not otherwise captured in more specific attributes.
   * Dynamic or current properties, such as settings, of an individual device are described using a Device instance-specific [DeviceMetric] and recorded using [Observation].  Static characteristics of a device could also be documented in an associated [DeviceDefinition] instance. The Device instance's properties, and their values, could be, but need not be, the same as those described in an associated DeviceDefinition.
   */
  property?: DeviceProperty[] | undefined;
  /**
   * Provides additional safety characteristics about a medical device.  For example devices containing latex.
   */
  safety?: CodeableConcept[] | undefined;
  /**
   * The serial number assigned by the organization when the device was manufactured.
   * Alphanumeric Maximum 20. While a serial number is a type of identifier, in the context of devices for which a UDI is required, thus a serial number may be part of the production identifier, it is more informative to have the serial number as a dedicated attribute together with the other UDI production identifier.  When the device is not subject to including the UDI (e.g., its presence and exchange is not mandated by local regulatory requirements or specific use case at hand), thus the concept of production identifiers is not relevant as a set, it remains helpful for consistency to still use Device.serialNumber rather than using Device.identifier with an appropriate type.  Systems that do not realize an identifier is a serial number may place it in Device.identifier or if the identifier.system is known for the serial number, it may also be populated in the Device.identifier as a globally unique id_.
   */
  serialNumber?: string | undefined;
  _serialNumber?: Element | undefined;
  /**
   * The Device record status. This is not the status of the device like availability.
   */
  status?: ('active'|'inactive'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * The kind or type of device. A device instance may have more than one type - in which case those are the types that apply to the specific instance of the device.
   * Multiple device types are use when a device is categorized in more than one context – for example, hybrid devices in which the device is both of type gateway and sensor.
   */
  type?: CodeableConcept[] | undefined;
  /**
   * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
   * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
   */
  udiCarrier?: DeviceUdiCarrier[] | undefined;
  /**
   * A network address on which the device may be contacted directly.
   * If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The actual design of the device or software version running on the device.
   */
  version?: DeviceVersion[] | undefined;
}
/**
 * The details about the device when it is in use to describe its operation
 */
export interface DeviceAssociationOperation extends BackboneElement {
  /**
   * The individual performing the action enabled by the device.
   */
  operator?: Reference[] | undefined;
  /**
   * Begin and end dates and times for the device's operation.
   */
  period?: Period | undefined;
  /**
   * Device operational condition corresponding to the association.
   */
  status: CodeableConcept;
}
export interface DeviceAssociation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceAssociation';
  /**
   * Current anatomical location of the device in/on subject.
   */
  bodyStructure?: Reference | undefined;
  /**
   * Describes the relationship between the device and subject.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Reference to the devices associated with the patient or group.
   */
  device: Reference;
  /**
   * Instance identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The details about the device when it is in use to describe its operation.
   */
  operation?: DeviceAssociationOperation[] | undefined;
  /**
   * Begin and end dates and times for the device association.
   */
  period?: Period | undefined;
  /**
   * Indicates the state of the Device association.
   */
  status: ('implanted'|'explanted'|'entered-in-error'|'attached'|'unknown');
  /**
   * The reasons given for the current association status.
   */
  statusReason?: ('attached'|'disconnected'|'failed'|'placed'|'replaced')[] | undefined;
  /**
   * The individual, group of individuals or device that the device is on or associated with.
   */
  subject?: Reference | undefined;
}
/**
 * Billing code or reference associated with the device
 */
export interface DeviceDefinitionChargeItem extends BackboneElement {
  /**
   * The code or reference for the charge item.
   */
  chargeItemCode: CodeableReference;
  /**
   * Coefficient applicable to the billing code.
   */
  count: Quantity;
  /**
   * A specific time period in which this charge item applies.
   */
  effectivePeriod?: Period | undefined;
  /**
   * The context to which this charge item applies.
   */
  useContext?: UsageContext[] | undefined;
}
/**
 * What kind of device or device system this is
 * In this element various classifications can be used, such as GMDN, EMDN, SNOMED CT, risk classes, national product codes.
 */
export interface DeviceDefinitionClassification extends BackboneElement {
  /**
   * Further information qualifying this classification of the device model.
   */
  justification?: RelatedArtifact[] | undefined;
  /**
   * A classification or risk class of the device model.
   */
  type: CodeableConcept;
}
/**
 * Identifies the standards, specifications, or formal guidances for the capabilities supported by the device
 */
export interface DeviceDefinitionConformsTo extends BackboneElement {
  /**
   * Describes the type of the standard, specification, or formal guidance.
   */
  category?: CodeableConcept | undefined;
  /**
   * Standard, regulation, certification, or guidance website, document, or other publication, or similar, supporting the conformance.
   */
  source?: RelatedArtifact[] | undefined;
  /**
   * Code that identifies the specific standard, specification, protocol, formal guidance, regulation, legislation, or certification scheme to which the device adheres.
   */
  specification: CodeableConcept;
  /**
   * Identifies the specific form or variant of the standard, specification, or formal guidance. This may be a 'version number', release, document edition, publication year, or other label.
   */
  version?: string[] | undefined;
  _version?: Element[] | undefined;
}
/**
 * Tracking of latest field safety corrective action
 */
export interface DeviceDefinitionCorrectiveAction extends BackboneElement {
  /**
   * Start and end dates of the  corrective action.
   */
  period: Period;
  /**
   * Whether the last corrective action known for this device was a recall.
   * When a field safety action has been initiated but not yet resulted in a recall, this element will be set to 'false'.
   */
  recall: boolean;
  _recall?: Element | undefined;
  /**
   * The scope of the corrective action - whether the action targeted all units of a given device model, or only a specific set of batches identified by lot numbers, or individually identified devices identified by the serial name.
   */
  scope?: ('model'|'lot-numbers'|'serial-numbers') | undefined;
  _scope?: Element | undefined;
}
/**
 * The name or names of the device as given by the manufacturer
 */
export interface DeviceDefinitionDeviceName extends BackboneElement {
  /**
   * A human-friendly name that is used to refer to the device - depending on the type, it can be the brand name, the common name or alias, or other.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The type of deviceName.
   * RegisteredName | UserFriendlyName | PatientReportedName.
   */
  type: ('registered-name'|'user-friendly-name'|'patient-reported-name');
  _type?: Element | undefined;
}
/**
 * Information aimed at providing directions for the usage of this model of device
 * For more structured data, a ClinicalUseDefinition that points to the DeviceDefinition can be used.
 */
export interface DeviceDefinitionGuideline extends BackboneElement {
  /**
   * A specific situation when a device should not be used because it may cause harm.
   * A ClinicalUseDefinition that points to the DeviceDefinition can be used if more structured data is needed.
   */
  contraindication?: CodeableConcept[] | undefined;
  /**
   * A clinical condition for which the device was designed to be used.
   * A ClinicalUseDefinition that points to the DeviceDefinition can be used if more structured data is needed.
   */
  indication?: CodeableConcept[] | undefined;
  /**
   * A description of the general purpose or medical use of the device or its function.
   */
  intendedUse?: string | undefined;
  _intendedUse?: Element | undefined;
  /**
   * A source of information or reference for this guideline.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * Detailed written and visual directions for the user on how to use the device.
   */
  usageInstruction?: string | undefined;
  _usageInstruction?: Element | undefined;
  /**
   * The circumstances that form the setting for using the device.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * Specific hazard alert information that a user needs to know before using the device.
   * A ClinicalUseDefinition that points to the DeviceDefinition can be used if more structured data is needed.
   */
  warning?: CodeableConcept[] | undefined;
}
/**
 * A device, part of the current one
 */
export interface DeviceDefinitionHasPart extends BackboneElement {
  /**
   * Number of instances of the component device in the current device.
   */
  count?: number | undefined;
  /**
   * Reference to the device that is part of the current device.
   */
  reference: Reference;
}
/**
 * An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device
 */
export interface DeviceDefinitionLink extends BackboneElement {
  /**
   * A reference to the linked device.
   */
  relatedDevice: CodeableReference;
  /**
   * The type indicates the relationship of the related device to the device instance.
   */
  relation: Coding;
}
/**
 * A substance used to create the material(s) of which the device is made
 */
export interface DeviceDefinitionMaterial extends BackboneElement {
  /**
   * Whether the substance is a known or suspected allergen.
   */
  allergenicIndicator?: boolean | undefined;
  _allergenicIndicator?: Element | undefined;
  /**
   * Indicates an alternative material of the device.
   */
  alternate?: boolean | undefined;
  _alternate?: Element | undefined;
  /**
   * A substance that the device contains, may contain, or is made of - for example latex - to be used to determine patient compatibility. This is not intended to represent the composition of the device, only the clinically relevant materials.
   */
  substance: CodeableConcept;
}
/**
 * An organization that distributes the packaged device
 */
export interface DeviceDefinitionPackagingDistributor extends BackboneElement {
  /**
   * Distributor's human-readable name.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Distributor as an Organization resource.
   */
  organizationReference?: Reference[] | undefined;
}
/**
 * Information about the packaging of the device, i.e. how the device is packaged
 */
export interface DeviceDefinitionPackaging extends BackboneElement {
  /**
   * The number of items contained in the package (devices or sub-packages).
   */
  count?: number | undefined;
  /**
   * An organization that distributes the packaged device.
   */
  packagingDistributor?: DeviceDefinitionPackagingDistributor[] | undefined;
  /**
   * The business identifier of the packaged medication.
   */
  identifier?: Identifier | undefined;
  /**
   * Allows packages within packages.
   */
  packaging?: DeviceDefinitionPackaging[] | undefined;
  /**
   * A code that defines the specific type of packaging.
   */
  type?: CodeableConcept | undefined;
  /**
   * Unique Device Identifier (UDI) Barcode string on the packaging.
   */
  udiDeviceIdentifier?: DeviceDefinitionUdiDeviceIdentifier[] | undefined;
}
/**
 * Inherent, essentially fixed, characteristics of this kind of device, e.g., time properties, size, etc
 * Dynamic or current properties, such as settings, of an individual device are described using a Device instance-specific DeviceMetric and recorded using Observation.  Static characteristics of an individual device could also be documented in a [Device] instance. The Device instance's properties, and their values, could be, but need not be, the same as in the associated DeviceDefinition.
 */
export interface DeviceDefinitionProperty extends BackboneElement {
  /**
   * Code that specifies the property such as a resolution or color being represented.
   */
  type: CodeableConcept;
  /**
   * The value of the property specified by the associated property.type code.
   * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The value of the property specified by the associated property.type code.
   * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of the property specified by the associated property.type code.
   * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the property specified by the associated property.type code.
   * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
   */
  valuenumber?: number | undefined;
  /**
   * The value of the property specified by the associated property.type code.
   * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the property specified by the associated property.type code.
   * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
   */
  valueRange?: Range | undefined;
  /**
   * The value of the property specified by the associated property.type code.
   * This use of string or CodeableConcept is supported to address different purposes The text element of the valueCodeableConcept choice type is used for properties which would usually be coded (such as the size of an implant, or a security classification) but for which there is not currently an appropriate concept in the vocabulary (e.g., a custom implant size, or a security classification which depends on configuration. Otherwise the valueString choice type is used for textual descriptive device properties that cannot be expressed in other elements.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
}
/**
 * Regulatory identifier(s) associated with this device
 * This should not be used for regulatory authorization numbers which are to be captured elsewhere.
 */
export interface DeviceDefinitionRegulatoryIdentifier extends BackboneElement {
  /**
   * The identifier itself.
   */
  deviceIdentifier: string;
  _deviceIdentifier?: Element | undefined;
  /**
   * The organization that issued this identifier.
   */
  issuer: string;
  _issuer?: Element | undefined;
  /**
   * The jurisdiction to which the deviceIdentifier applies.
   */
  jurisdiction: string;
  _jurisdiction?: Element | undefined;
  /**
   * The type of identifier itself.
   */
  type: ('basic'|'master'|'license');
  _type?: Element | undefined;
}
/**
 * Indicates whether and when the device is available on the market
 */
export interface DeviceDefinitionUdiDeviceIdentifierMarketDistribution extends BackboneElement {
  /**
   * Begin and end dates for the commercial distribution of the device.
   */
  marketPeriod: Period;
  /**
   * National state or territory to which the marketDistribution recers, typically where the device is commercialized.
   */
  subJurisdiction: string;
  _subJurisdiction?: Element | undefined;
}
/**
 * Unique Device Identifier (UDI) Barcode string
 */
export interface DeviceDefinitionUdiDeviceIdentifier extends BackboneElement {
  /**
   * The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdiction provided in the DeviceDefinition.udiDeviceIdentifier.
   */
  deviceIdentifier: string;
  _deviceIdentifier?: Element | undefined;
  /**
   * The organization that assigns the identifier algorithm.
   */
  issuer: string;
  _issuer?: Element | undefined;
  /**
   * The jurisdiction to which the deviceIdentifier applies.
   */
  jurisdiction: string;
  _jurisdiction?: Element | undefined;
  /**
   * Indicates where and when the device is available on the market.
   */
  udiDeviceIdentifierMarketDistribution?: DeviceDefinitionUdiDeviceIdentifierMarketDistribution[] | undefined;
}
/**
 * The version of the device or software
 */
export interface DeviceDefinitionVersion extends BackboneElement {
  /**
   * The hardware or software module of the device to which the version applies.
   * Note that the module of the device would not need to be tracked as a separate device, e.g., using different UDI, thus would typically involve one or more software modules. For example, a device may involve two software modules each on a different version.
   */
  component?: Identifier | undefined;
  /**
   * The type of the device version, e.g. manufacturer, approved, internal.
   */
  type?: CodeableConcept | undefined;
  /**
   * The version text.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * For the initial scope, this DeviceDefinition resource is only applicable to describe a single node in the containment tree that is produced by the context scanner in any medical device that implements or derives from the ISO/IEEE 11073 standard and that does not represent a metric. Examples for such a node are MDS, VMD, or Channel.
 */
export interface DeviceDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceDefinition';
  /**
   * Billing code or reference associated with the device.
   */
  chargeItem?: DeviceDefinitionChargeItem[] | undefined;
  /**
   * What kind of device or device system this is.
   * In this element various classifications can be used, such as GMDN, EMDN, SNOMED CT, risk classes, national product codes.
   */
  classification?: DeviceDefinitionClassification[] | undefined;
  /**
   * Identifies the standards, specifications, or formal guidances for the capabilities supported by the device. The device may be certified as conformant to these specifications e.g., communication, performance, process, measurement, or specialization standards.
   */
  conformsTo?: DeviceDefinitionConformsTo[] | undefined;
  /**
   * Contact details for an organization or a particular human that is responsible for the device.
   * used for troubleshooting etc.
   */
  contact?: ContactPoint[] | undefined;
  /**
   * Tracking of latest field safety corrective action.
   */
  correctiveAction?: DeviceDefinitionCorrectiveAction | undefined;
  /**
   * Additional information to describe the device.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The name or names of the device as given by the manufacturer.
   */
  deviceName?: DeviceDefinitionDeviceName[] | undefined;
  /**
   * Information aimed at providing directions for the usage of this model of device.
   * For more structured data, a ClinicalUseDefinition that points to the DeviceDefinition can be used.
   */
  guideline?: DeviceDefinitionGuideline | undefined;
  /**
   * A device that is part (for example a component) of the present device.
   */
  hasPart?: DeviceDefinitionHasPart[] | undefined;
  /**
   * Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID. The identifier is typically valued if the udiDeviceIdentifier, partNumber or modelNumber is not valued and represents a different type of identifier.  However, it is permissible to still include those identifiers in DeviceDefinition.identifier with the appropriate identifier.type.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Language code for the human-readable text strings produced by the device (all supported).
   */
  languageCode?: CodeableConcept[] | undefined;
  /**
   * An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device.
   */
  link?: DeviceDefinitionLink[] | undefined;
  /**
   * A name of the manufacturer  or legal representative e.g. labeler. Whether this is the actual manufacturer or the labeler or responsible depends on implementation and jurisdiction.
   */
  manufacturer?: Reference | undefined;
  /**
   * A substance used to create the material(s) of which the device is made.
   */
  material?: DeviceDefinitionMaterial[] | undefined;
  /**
   * The model number for the device for example as defined by the manufacturer or labeler, or other agency.
   */
  modelNumber?: string | undefined;
  _modelNumber?: Element | undefined;
  /**
   * Descriptive information, usage information or implantation information that is not captured in an existing element.
   */
  note?: Annotation[] | undefined;
  /**
   * An organization that is responsible for the provision and ongoing maintenance of the device.
   */
  owner?: Reference | undefined;
  /**
   * Information about the packaging of the device, i.e. how the device is packaged.
   */
  packaging?: DeviceDefinitionPackaging[] | undefined;
  /**
   * The part number or catalog number of the device.
   * Alphanumeric Maximum 20.
   */
  partNumber?: string | undefined;
  _partNumber?: Element | undefined;
  /**
   * Indicates the production identifier(s) that are expected to appear in the UDI carrier on the device label.
   */
  productionIdentifierInUDI?: ('lot-number'|'manufactured-date'|'serial-number'|'expiration-date'|'biological-source'|'software-version')[] | undefined;
  _productionIdentifierInUDI?: Element[] | undefined;
  /**
   * Static or essentially fixed characteristics or features of this kind of device that are otherwise not captured in more specific attributes, e.g., time or timing attributes, resolution, accuracy, and physical attributes.
   * Dynamic or current properties, such as settings, of an individual device are described using a Device instance-specific DeviceMetric and recorded using Observation.  Static characteristics of an individual device could also be documented in a [Device] instance. The Device instance's properties, and their values, could be, but need not be, the same as in the associated DeviceDefinition.
   */
  property?: DeviceDefinitionProperty[] | undefined;
  /**
   * Identifier associated with the regulatory documentation (certificates, technical documentation, post-market surveillance documentation and reports) of a set of device models sharing the same intended purpose, risk class and essential design and manufacturing characteristics. One example is the Basic UDI-DI in Europe.
   * This should not be used for regulatory authorization numbers which are to be captured elsewhere.
   */
  regulatoryIdentifier?: DeviceDefinitionRegulatoryIdentifier[] | undefined;
  /**
   * Safety characteristics of the device.
   */
  safety?: CodeableConcept[] | undefined;
  /**
   * Shelf Life and storage information.
   */
  shelfLifeStorage?: ProductShelfLife[] | undefined;
  /**
   * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
   */
  udiDeviceIdentifier?: DeviceDefinitionUdiDeviceIdentifier[] | undefined;
  /**
   * The version of the device or software.
   */
  version?: DeviceDefinitionVersion[] | undefined;
}
/**
 * Who performed event
 */
export interface DeviceDispensePerformer extends BackboneElement {
  /**
   * The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the device.
   */
  actor: Reference;
  /**
   * Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker.
   */
  function?: CodeableConcept | undefined;
}
export interface DeviceDispense extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceDispense';
  /**
   * The order or request that this dispense is fulfilling.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Indicates the type of device dispense.
   * The category can be used to include where the device is expected to be consumed or other types of dispenses.  Invariants can be used to bind to different value sets when profiling to bind.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Identification of the facility/location where the device was /should be shipped to, as part of the dispense process.
   */
  destination?: Reference | undefined;
  /**
   * Identifies the device being dispensed. This is either a link to a resource representing the details of the device or a simple attribute carrying a code that identifies the device from a known list of devices.
   */
  device: CodeableReference;
  /**
   * The encounter that establishes the context for this event.
   */
  encounter?: Reference | undefined;
  /**
   * A summary of the events of interest that have occurred, such as when the dispense was verified.
   * This might not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
   */
  eventHistory?: Reference[] | undefined;
  /**
   * Business identifier for this dispensation.
   * This is a business identifier, not a resource identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The principal physical location where the dispense was performed.
   */
  location?: Reference | undefined;
  /**
   * Extra information about the dispense that could not be conveyed in the other attributes.
   */
  note?: Annotation[] | undefined;
  /**
   * The bigger event that this dispense is a part of.
   */
  partOf?: Reference[] | undefined;
  /**
   * Indicates who or what performed the event.
   */
  performer?: DeviceDispensePerformer[] | undefined;
  /**
   * The time when the dispensed product was packaged and reviewed.
   */
  preparedDate?: string | undefined;
  _preparedDate?: Element | undefined;
  /**
   * The number of devices that have been dispensed.
   */
  quantity?: Quantity | undefined;
  /**
   * Identifies the person who picked up the device or the person or location where the device was delivered.  This may be a patient or their caregiver, but some cases exist where it can be a healthcare professional or a location.
   */
  receiver?: Reference | undefined;
  /**
   * A code specifying the state of the set of dispense events.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('preparation'|'in-progress'|'cancelled'|'on-hold'|'completed'|'entered-in-error'|'stopped'|'declined'|'unknown');
  _status?: Element | undefined;
  /**
   * Indicates the reason why a dispense was or was not performed.
   */
  statusReason?: CodeableReference | undefined;
  /**
   * A link to a resource representing the person to whom the device is intended.
   * What about 'this measuring Device is now asigned to Dr X who needs it now'?
   */
  subject: Reference;
  /**
   * Additional information that supports the device being dispensed.
   */
  supportingInformation?: Reference[] | undefined;
  /**
   * Indicates the type of dispensing event that is performed.
   */
  type?: CodeableConcept | undefined;
  /**
   * The full representation of the instructions.
   * The content of the renderedDosageInstructions must not be different than the dose represented in the dosageInstruction content.
   */
  usageInstruction?: string | undefined;
  _usageInstruction?: Element | undefined;
  /**
   * The time the dispensed product was made available to the patient or their representative.
   */
  whenHandedOver?: string | undefined;
  _whenHandedOver?: Element | undefined;
}
/**
 * Describes the calibrations that have been performed or that are required to be performed
 */
export interface DeviceMetricCalibration extends BackboneElement {
  /**
   * Describes the state of the calibration.
   */
  state?: ('not-calibrated'|'calibration-required'|'calibrated'|'unspecified') | undefined;
  _state?: Element | undefined;
  /**
   * Describes the time last calibration has been performed.
   */
  time?: string | undefined;
  _time?: Element | undefined;
  /**
   * Describes the type of the calibration method.
   */
  type?: ('unspecified'|'offset'|'gain'|'two-point') | undefined;
  _type?: Element | undefined;
}
/**
 * The DeviceMetric resource is derived from the ISO/IEEE 11073-10201 Domain Information Model standard, but is more widely applicable.
 */
export interface DeviceMetric extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceMetric';
  /**
   * Describes the calibrations that have been performed or that are required to be performed.
   */
  calibration?: DeviceMetricCalibration[] | undefined;
  /**
   * Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
   */
  category: ('measurement'|'setting'|'calculation'|'unspecified');
  _category?: Element | undefined;
  /**
   * The preferred color associated with the metric (e.g., display color). This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth; the metrics are displayed in different characteristic colors, such as HR in blue, BP in green, and PR and SpO2 in magenta.
   */
  color?: ('aliceblue'|'antiquewhite'|'aqua'|'aquamarine'|'azure'|'beige'|'bisque'|'black'|'blanchedalmond'|'blue'|'blueviolet'|'brown'|'burlywood'|'cadetblue'|'chartreuse'|'chocolate'|'coral'|'cornflowerblue'|'cornsilk'|'crimson'|'cyan'|'darkblue'|'darkcyan'|'darkgoldenrod'|'darkgray'|'darkgreen'|'darkgrey'|'darkkhaki'|'darkmagenta'|'darkolivegreen'|'darkorange'|'darkorchid'|'darkred'|'darksalmon'|'darkseagreen'|'darkslateblue'|'darkslategray'|'darkslategrey'|'darkturquoise'|'darkviolet'|'deeppink'|'deepskyblue'|'dimgray'|'dimgrey'|'dodgerblue'|'firebrick'|'floralwhite'|'forestgreen'|'fuchsia'|'gainsboro'|'ghostwhite'|'gold'|'goldenrod'|'gray'|'green'|'greenyellow'|'grey'|'honeydew'|'hotpink'|'indianred'|'indigo'|'ivory'|'khaki'|'lavender'|'lavenderblush'|'lawngreen'|'lemonchiffon'|'lightblue'|'lightcoral'|'lightcyan'|'lightgoldenrodyellow'|'lightgray'|'lightgreen'|'lightgrey'|'lightpink'|'lightsalmon'|'lightseagreen'|'lightskyblue'|'lightslategray'|'lightslategrey'|'lightsteelblue'|'lightyellow'|'lime'|'limegreen'|'linen'|'magenta'|'maroon'|'mediumaquamarine'|'mediumblue'|'mediumorchid'|'mediumpurple'|'mediumseagreen'|'mediumslateblue'|'mediumspringgreen'|'mediumturquoise'|'mediumvioletred'|'midnightblue'|'mintcream'|'mistyrose'|'moccasin'|'navajowhite'|'navy'|'oldlace'|'olive'|'olivedrab'|'orange'|'orangered'|'orchid'|'palegoldenrod'|'palegreen'|'paleturquoise'|'palevioletred'|'papayawhip'|'peachpuff'|'peru'|'pink'|'plum'|'powderblue'|'purple'|'rebeccapurple'|'red'|'rosybrown'|'royalblue'|'saddlebrown'|'salmon'|'sandybrown'|'seagreen'|'seashell'|'sienna'|'silver'|'skyblue'|'slateblue'|'slategray'|'slategrey'|'snow'|'springgreen'|'steelblue'|'tan'|'teal'|'thistle'|'tomato'|'turquoise'|'violet'|'wheat'|'white'|'whitesmoke'|'yellow'|'yellowgreen') | undefined;
  _color?: Element | undefined;
  /**
   * Describes the link to the Device.  This is also known as a channel device.
   * Note if this is not the top level device - also know as the source device, it may be referenced in the device.parent element.
   */
  device: Reference;
  /**
   * Instance identifiers assigned to a device, by the device or gateway software, manufacturers, other organizations or owners. For example, handle ID.
   * For identifiers assigned to a device by the device or gateway software, the `system` element of the identifier should be set to any identifier of the device.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The frequency at which the metric is taken or recorded. Devices measure metrics at a wide range of frequencies; for example, an ECG might sample measurements in the millisecond range, while an NIBP might trigger only once an hour. Less often, the measurementFrequency may be based on a unit other than time, such as distance (e.g. for a measuring wheel). The update period may be different than the measurement frequency, if the device does not update the published observed value with the same frequency as it was measured.
   */
  measurementFrequency?: Quantity | undefined;
  /**
   * Indicates current operational state of the device. For example: On, Off, Standby, etc.
   */
  operationalStatus?: ('on'|'off'|'standby'|'entered-in-error') | undefined;
  _operationalStatus?: Element | undefined;
  /**
   * Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
   * DeviceMetric.type can be referred to either IEEE 11073-10101 or LOINC.
   */
  type: CodeableConcept;
  /**
   * Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.
   * DeviceMetric.unit can refer to either UCUM or preferable a RTMMS coding system.
   */
  unit?: CodeableConcept | undefined;
}
/**
 * Device details
 */
export interface DeviceRequestParameter extends BackboneElement {
  /**
   * A code or string that identifies the device detail being asserted.
   */
  code?: CodeableConcept | undefined;
  /**
   * The value of the device detail.
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of the device detail.
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the device detail.
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the device detail.
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueRange?: Range | undefined;
}
export interface DeviceRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceRequest';
  /**
   * This status is to indicate whether the request is a PRN or may be given as needed.
   */
  asNeeded?: boolean | undefined;
  _asNeeded?: Element | undefined;
  /**
   * The reason for using the device.
   */
  asNeededFor?: CodeableConcept | undefined;
  /**
   * When the request transitioned to being actionable.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * Plan/proposal/order fulfilled by this request.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The details of the device to be used.
   */
  code: CodeableReference;
  /**
   * If true, indicates that the provider is asking for the patient to either stop using or to not start using the specified device or category of devices. For example, the patient has undergone surgery and the provider is indicating that the patient should not wear contact lenses.
   * If do not perform is not specified, the request is a positive request e.g. "do perform". DeviceRequest.reasonCode includes the reason for marking the DeviceRequest as 'do not perform'.
   */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;
  /**
   * An encounter that provides additional context in which this request is made.
   */
  encounter?: Reference | undefined;
  /**
   * A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
   */
  groupIdentifier?: Identifier | undefined;
  /**
   * Identifiers assigned to this order by the orderer or by the receiver.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
   * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  instantiatesCanonical?: string[] | undefined;
  _instantiatesCanonical?: Element[] | undefined;
  /**
   * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.
   * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
   */
  instantiatesUri?: string[] | undefined;
  _instantiatesUri?: Element[] | undefined;
  /**
   * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
   */
  insurance?: Reference[] | undefined;
  /**
   * Whether the request is a proposal, plan, an original order or a reflex order.
   */
  intent: ('proposal'|'plan'|'directive'|'order'|'original-order'|'reflex-order'|'filler-order'|'instance-order'|'option');
  _intent?: Element | undefined;
  /**
   * Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
   */
  note?: Annotation[] | undefined;
  /**
   * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  occurrencestring?: string | undefined;
  _occurrencestring?: Element | undefined;
  /**
   * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  occurrencePeriod?: Period | undefined;
  /**
   * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  occurrenceTiming?: Timing | undefined;
  /**
   * Specific parameters for the ordered item.  For example, the prism value for lenses.
   */
  parameter?: DeviceRequestParameter[] | undefined;
  /**
   * The desired individual or entity to provide the device to the subject of the request (e.g., patient, location).
   */
  performer?: CodeableReference | undefined;
  /**
   * Indicates how quickly the request should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * The number of devices to be provided.
   */
  quantity?: number | undefined;
  /**
   * Reason or justification for the use of this device.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * Key events in the history of the request.
   * This might not include provenances for all versions of the request - only those deemed "relevant" or important.
   * This SHALL NOT include the Provenance associated with this current version of the resource.  (If that provenance is deemed to be a "relevant" change, it will need to be added as part of a later update.  Until then, it can be queried directly as the Provenance that points to this version using _revinclude
   * All Provenances should have some historical version of this Request as their subject.
   */
  relevantHistory?: Reference[] | undefined;
  /**
   * The request takes the place of the referenced completed or terminated request(s).
   */
  replaces?: Reference[] | undefined;
  /**
   * The individual or entity who initiated the request and has responsibility for its activation.
   */
  requester?: Reference | undefined;
  /**
   * The status of the request.
   * This element is labeled as a modifier because the status contains the codes revoked and entered-in-error that mark the request as not currently valid.
   */
  status?: ('draft'|'active'|'on-hold'|'revoked'|'completed'|'entered-in-error'|'unknown') | undefined;
  _status?: Element | undefined;
  /**
   * The patient who will use the device.
   */
  subject: Reference;
  /**
   * Additional clinical information about the patient that may influence the request fulfilment.  For example, this may include where on the subject's body the device will be used (i.e. the target site).
   */
  supportingInfo?: Reference[] | undefined;
}
/**
 * How device is being used
 */
export interface DeviceUsageAdherence extends BackboneElement {
  /**
   * Type of adherence.
   */
  code: CodeableConcept;
  /**
   * Reason for adherence type.
   */
  reason: CodeableConcept[];
}
export interface DeviceUsage extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceUsage';
  /**
   * This indicates how or if the device is being used.
   */
  adherence?: DeviceUsageAdherence | undefined;
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this DeviceUsage.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Indicates the anotomic location on the subject's body where the device was used ( i.e. the target).
   */
  bodySite?: CodeableReference | undefined;
  /**
   * This attribute indicates a category for the statement - The device statement may be made in an inpatient or outpatient settting (inpatient | outpatient | community | patientspecified).
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The encounter or episode of care that establishes the context for this device use statement.
   */
  context?: Reference | undefined;
  /**
   * The time at which the statement was recorded by informationSource.
   */
  dateAsserted?: string | undefined;
  _dateAsserted?: Element | undefined;
  /**
   * Allows linking the DeviceUsage to the underlying Request, or to other information that supports or is used to derive the DeviceUsage.
   * The most common use cases for deriving a DeviceUsage comes from creating it from a request or from an observation or a claim. it should be noted that the amount of information that is available varies from the type resource that you derive the DeviceUsage from.
   */
  derivedFrom?: Reference[] | undefined;
  /**
   * Code or Reference to device used.
   */
  device: CodeableReference;
  /**
   * An external identifier for this statement such as an IRI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Who reported the device was being used by the patient.
   */
  informationSource?: Reference | undefined;
  /**
   * Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
   */
  note?: Annotation[] | undefined;
  /**
   * The patient who used the device.
   */
  patient: Reference;
  /**
   * Reason or justification for the use of the device. A coded concept, or another resource whose existence justifies this DeviceUsage.
   * When the status is not done, the reason code indicates why it was not done.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed.
   * DeviceUseStatment is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for contains codes that assert the status of the use  by the patient (for example, stopped or on hold) as well as codes that assert the status of the resource itself (for example, entered in error).
   * This element is labeled as a modifier because the status contains the codes that mark the statement as not currently valid.
   */
  status: ('active'|'completed'|'not-done'|'entered-in-error'|'intended'|'stopped'|'on-hold');
  _status?: Element | undefined;
  /**
   * How often the device was used.
   */
  timingstring?: string | undefined;
  _timingstring?: Element | undefined;
  /**
   * How often the device was used.
   */
  timingPeriod?: Period | undefined;
  /**
   * How often the device was used.
   */
  timingTiming?: Timing | undefined;
  /**
   * The reason for asserting the usage status - for example forgot, lost, stolen, broken.
   */
  usageReason?: CodeableConcept[] | undefined;
  /**
   * The status of the device usage, for example always, sometimes, never. This is not the same as the status of the statement.
   */
  usageStatus?: ('active'|'completed'|'not-done'|'entered-in-error'|'intended'|'stopped'|'on-hold') | undefined;
}
/**
 * Key images or data associated with this report
 */
export interface DiagnosticReportMedia extends BackboneElement {
  /**
   * A comment about the image or data. Typically, this is used to provide an explanation for why the image or data is included, or to draw the viewer's attention to important features.
   * The comment should be displayed with the image or data. It would be common for the report to include additional discussion of the image or data contents or in other sections such as the conclusion.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Reference to the image or data source.
   */
  link: Reference;
}
/**
 * Additional information supporting the diagnostic report
 */
export interface DiagnosticReportSupportingInfo extends BackboneElement {
  /**
   * The reference for the supporting information in the diagnostic report.
   */
  reference: Reference;
  /**
   * The code value for the role of the supporting information in the diagnostic report.
   */
  type: CodeableConcept;
}
/**
 * This is intended to capture a single report and is not suitable for use in displaying summary information that covers multiple reports.  For example, this resource has not been designed for laboratory cumulative reporting formats nor detailed structured reports for sequencing.
 */
export interface DiagnosticReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DiagnosticReport';
  /**
   * Details concerning a service requested.
   * Note: Usually there is one test request for each result, however in some circumstances multiple test requests may be represented using a single test result resource. Note that there are also cases where one request leads to multiple reports.
   */
  basedOn?: Reference[] | undefined;
  /**
   * A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.
   * Multiple categories are allowed using various categorization schemes.   The level of granularity is defined by the category concepts in the value set. More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in DiagnosticReport.code.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * A code or name that describes this diagnostic report.
   */
  code: CodeableConcept;
  /**
   * Reference to a Composition resource instance that provides structure for organizing the contents of the DiagnosticReport.
   * The Composition provides structure to the content of the DiagnosticReport (and only contains contents referenced in the DiagnosticReport) - e.g., to order the sections of an anatomic pathology structured report.
   */
  composition?: Reference | undefined;
  /**
   * Concise and clinically contextualized summary conclusion (interpretation/impression) of the diagnostic report.
   */
  conclusion?: string | undefined;
  _conclusion?: Element | undefined;
  /**
   * One or more codes that represent the summary conclusion (interpretation/impression) of the diagnostic report.
   */
  conclusionCode?: CodeableConcept[] | undefined;
  /**
   * The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
   * If the diagnostic procedure was performed on the patient, this is the time it was performed. If there are specimens, the diagnostically relevant time can be derived from the specimen collection times, but the specimen information is not always available, and the exact relationship between the specimens and the diagnostically relevant time is not always automatic.
   */
  effectivestring?: string | undefined;
  _effectivestring?: Element | undefined;
  /**
   * The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
   * If the diagnostic procedure was performed on the patient, this is the time it was performed. If there are specimens, the diagnostically relevant time can be derived from the specimen collection times, but the specimen information is not always available, and the exact relationship between the specimens and the diagnostically relevant time is not always automatic.
   */
  effectivePeriod?: Period | undefined;
  /**
   * The healthcare event  (e.g. a patient and healthcare provider interaction) which this DiagnosticReport is about.
   * This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter  but still be tied to the context of the encounter  (e.g. pre-admission laboratory tests).
   */
  encounter?: Reference | undefined;
  /**
   * Identifiers assigned to this report by the performer or other systems.
   * Usually assigned by the Information System of the diagnostic service provider (filler id).
   */
  identifier?: Identifier[] | undefined;
  /**
   * The date and time that this version of the report was made available to providers, typically after the report was reviewed and verified.
   * May be different from the update time of the resource itself, because that is the status of the record (potentially a secondary copy), not the actual release time of the report.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * A list of key images or data associated with this report. The images or data are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
   */
  media?: DiagnosticReportMedia[] | undefined;
  /**
   * Comments about the diagnostic report.
   * May include general statements about the diagnostic report, or statements about significant, unexpected or unreliable results values contained within the diagnostic report, or information about its source when relevant to its interpretation.
   */
  note?: Annotation[] | undefined;
  /**
   * The diagnostic service that is responsible for issuing the report.
   * This is not necessarily the source of the atomic data items or the entity that interpreted the results. It is the entity that takes responsibility for the clinical report.
   */
  performer?: Reference[] | undefined;
  /**
   * Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent.
   * "application/pdf" is recommended as the most reliable and interoperable in this context.
   */
  presentedForm?: Attachment[] | undefined;
  /**
   * [Observations](observation.html)  that are part of this diagnostic report.
   * Observations can contain observations.
   */
  result?: Reference[] | undefined;
  /**
   * The practitioner or organization that is responsible for the report's conclusions and interpretations.
   * Might not be the same entity that takes responsibility for the clinical report.
   */
  resultsInterpreter?: Reference[] | undefined;
  /**
   * Details about the specimens on which this diagnostic report is based.
   * If the specimen is sufficiently specified with a code in the test result name, then this additional data may be redundant. If there are multiple specimens, these may be represented per observation or group.
   */
  specimen?: Reference[] | undefined;
  /**
   * The status of the diagnostic report.
   */
  status: ('registered'|'partial'|'preliminary'|'modified'|'final'|'amended'|'corrected'|'appended'|'cancelled'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * One or more links to full details of any study performed during the diagnostic investigation. An ImagingStudy might comprise a set of radiologic images obtained via a procedure that are analyzed as a group. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images. A GenomicStudy might comprise one or more analyses, each serving a specific purpose. These analyses may vary in method (e.g., karyotyping, CNV, or SNV detection), performer, software, devices used, or regions targeted.
   * For laboratory-type studies like GenomeStudy, type resources will be used for tracking additional metadata and workflow aspects of complex studies. ImagingStudy and the media element are somewhat overlapping - typically, the list of image references in the media element will also be found in one of the imaging study resources. However, each caters to different types of displays for different types of purposes. Neither, either, or both may be provided.
   */
  study?: Reference[] | undefined;
  /**
   * The subject of the report. Usually, but not always, this is a patient. However, diagnostic services also perform analyses on specimens collected from a variety of other sources.
   */
  subject?: Reference | undefined;
  /**
   * This backbone element contains supporting information that was used in the creation of the report not included in the results already included in the report.
   */
  supportingInfo?: DiagnosticReportSupportingInfo[] | undefined;
}
/**
 * Attests to accuracy of the document
 * Only list each attester once.
 */
export interface DocumentReferenceAttester extends BackboneElement {
  /**
   * The type of attestation the authenticator offers.
   */
  mode: CodeableConcept;
  /**
   * Who attested the document in the specified way.
   */
  party?: Reference | undefined;
  /**
   * When the document was attested by the party.
   */
  time?: string | undefined;
  _time?: Element | undefined;
}
/**
 * Content profile rules for the document
 * Note that IHE often issues URNs for formatCode codes, not all documents can be identified by a URI.
 * For FHIR content, .profile should indicate the structureDefinition profile canonical URI(s) that the content complies with.
 */
export interface DocumentReferenceContentProfile extends BackboneElement {
  /**
   * Code|uri|canonical.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * Code|uri|canonical.
   */
  valueCoding?: Coding | undefined;
}
/**
 * Document referenced
 * content element shall not contain different versions of the same content. For version handling use multiple DocumentReference with .relatesTo.
 */
export interface DocumentReferenceContent extends BackboneElement {
  /**
   * The document or URL of the document along with critical metadata to prove content has integrity.
   */
  attachment: Attachment;
  /**
   * An identifier of the document constraints, encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.
   * Note that IHE often issues URNs for formatCode codes, not all documents can be identified by a URI.
   * For FHIR content, .profile should indicate the structureDefinition profile canonical URI(s) that the content complies with.
   */
  profile?: DocumentReferenceContentProfile[] | undefined;
}
/**
 * Relationships to other documents
 * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
 */
export interface DocumentReferenceRelatesTo extends BackboneElement {
  /**
   * The type of relationship that this document has with anther document.
   * If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
   */
  code: CodeableConcept;
  /**
   * The target document of this relationship.
   */
  target: Reference;
}
/**
 * Usually, this is used for documents other than those defined by FHIR.
 */
export interface DocumentReference extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DocumentReference';
  /**
   * A participant who has authenticated the accuracy of the document.
   * Only list each attester once.
   */
  attester?: DocumentReferenceAttester[] | undefined;
  /**
   * Identifies who is responsible for adding the information to the document.
   * Not necessarily who did the actual data entry (i.e. typist) or who was the source (informant).
   */
  author?: Reference[] | undefined;
  /**
   * A procedure that is fulfilled in whole or in part by the creation of this media.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The anatomic structures included in the document.
   */
  bodySite?: CodeableReference[] | undefined;
  /**
   * A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.
   * Key metadata element describing the the category or classification of the document. This is a broader perspective that groups similar documents based on how they would be used. This is a primary key used in searching.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The document and format referenced.  If there are multiple content element repetitions, these must all represent the same document in different format, or attachment metadata.
   * content element shall not contain different versions of the same content. For version handling use multiple DocumentReference with .relatesTo.
   */
  content: DocumentReferenceContent[];
  /**
   * Describes the clinical encounter or type of care that the document content is associated with.
   */
  context?: Reference[] | undefined;
  /**
   * Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
   * Identifies the logical organization (software system, vendor, or department) to go to find the current version, where to report issues, etc. This is different from the physical location (URL, disk drive, or server) of the document, which is the technical location of the document, which host may be delegated to the management of some other organization.
   */
  custodian?: Reference | undefined;
  /**
   * When the document reference was created.
   * Referencing/indexing time is used for tracking, organizing versions and searching.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Human-readable description of the source document.
   * What the document is about,  a terse summary of the document.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The status of the underlying document.
   * The document that is pointed to might be in various lifecycle states.
   */
  docStatus?: ('registered'|'partial'|'preliminary'|'final'|'amended'|'corrected'|'appended'|'cancelled'|'entered-in-error'|'deprecated'|'unknown') | undefined;
  _docStatus?: Element | undefined;
  /**
   * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the type Code, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
   * An event can further specialize the act inherent in the type, such as  where it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or more event codes are included, they shall not conflict with the values inherent in the class or type elements as such a conflict would create an ambiguous situation.
   */
  event?: CodeableReference[] | undefined;
  /**
   * The kind of facility where the patient was seen.
   */
  facilityType?: CodeableConcept | undefined;
  /**
   * Other business identifiers associated with the document, including version independent identifiers.
   * The structure and format of this identifier would be consistent with the specification corresponding to the format of the document. (e.g. for a DICOM standard document, a 64-character numeric UID; for an HL7 CDA format, the CDA Document Id root and extension).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Imaging modality used. This may include both acquisition and non-acquisition modalities.
   */
  modality?: CodeableConcept[] | undefined;
  /**
   * The time period over which the service that is described by the document was provided.
   */
  period?: Period | undefined;
  /**
   * This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty.
   * This element should be based on a coarse classification system for the class of specialty practice. Recommend the use of the classification system for Practice Setting, such as that described by the Subject Matter Domain in LOINC.
   */
  practiceSetting?: CodeableConcept | undefined;
  /**
   * Relationships that this document has with other document references that already exist.
   * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
   */
  relatesTo?: DocumentReferenceRelatesTo[] | undefined;
  /**
   * A set of Security-Tag codes specifying the level of privacy/security of the Document found at DocumentReference.content.attachment.url. Note that DocumentReference.meta.security contains the security labels of the data elements in DocumentReference, while DocumentReference.securityLabel contains the security labels for the document the reference refers to. The distinction recognizes that the document may contain sensitive information, while the DocumentReference is metadata about the document and thus might not be as sensitive as the document. For example: a psychotherapy episode may contain highly sensitive information, while the metadata may simply indicate that some episode happened.
   * The confidentiality codes can carry multiple vocabulary items. HL7 has developed an understanding of security and privacy tags that might be desirable in a Document Sharing environment, called HL7 Healthcare Privacy and Security Classification System (HCS). The following specification is recommended but not mandated, as the vocabulary bindings are an administrative domain responsibility. The use of this method is up to the policy domain such as the XDS Affinity Domain or other Trust Domain where all parties including sender and recipients are trusted to appropriately tag and enforce.   
   * In the HL7 Healthcare Privacy and Security Classification (HCS) there are code systems specific to Confidentiality, Sensitivity, Integrity, and Handling Caveats. Some values would come from a local vocabulary as they are related to workflow roles and special projects.
   */
  securityLabel?: CodeableConcept[] | undefined;
  /**
   * The status of this document reference.
   * This is the status of the DocumentReference object, which might be independent from the docStatus element.
   * This element is labeled as a modifier because the status contains the codes that mark the document or reference as not currently valid.
   */
  status: ('current'|'superseded'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
   */
  subject?: Reference | undefined;
  /**
   * Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
   * Key metadata element describing the document that describes he exact type of document. Helps humans to assess whether the document is of interest when viewing a list of documents.
   */
  type?: CodeableConcept | undefined;
  /**
   * An explicitly assigned identifer of a variation of the content in the DocumentReference.
   * While each resource, including the DocumentReference itself, has its own version identifier, this is a formal identifier for the logical version of the DocumentReference as a whole. It would remain constant if the resources were moved to a new server, and all got new individual resource versions, for example.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
export interface DomainResource extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: string;
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
   * This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags in their meta elements, but SHALL NOT have security labels.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  extension?: Extension[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   * Contained resources do not have a narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
   */
  text?: Narrative | undefined;
}
/**
 * Details about the admission to a healthcare service
 * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.
 * The duration recorded in the period of this encounter covers the entire scope of this admission record.
 */
export interface EncounterAdmission extends BackboneElement {
  /**
   * From where patient was admitted (physician referral, transfer).
   */
  admitSource?: CodeableConcept | undefined;
  /**
   * Location/organization to which the patient is discharged.
   */
  destination?: Reference | undefined;
  /**
   * Category or kind of location after discharge.
   */
  dischargeDisposition?: CodeableConcept | undefined;
  /**
   * The location/organization from which the patient came before admission.
   */
  origin?: Reference | undefined;
  /**
   * Pre-admission identifier.
   */
  preAdmissionIdentifier?: Identifier | undefined;
  /**
   * Indicates that this encounter is directly related to a prior admission, often because the conditions addressed in the prior admission were not fully addressed.
   */
  reAdmission?: CodeableConcept | undefined;
}
/**
 * The list of diagnosis relevant to this encounter
 * Also note that for the purpose of billing, the diagnoses are recorded in the account where they can be ranked appropriately for how the invoicing/claiming documentation needs to be prepared.
 */
export interface EncounterDiagnosis extends BackboneElement {
  /**
   * The coded diagnosis or a reference to a Condition (with other resources referenced in the evidence.detail), the use property will indicate the purpose of this specific diagnosis.
   */
  condition?: CodeableReference[] | undefined;
  /**
   * Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).
   */
  use?: CodeableConcept[] | undefined;
}
/**
 * List of locations where the patient has been
 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
 */
export interface EncounterLocation extends BackboneElement {
  /**
   * This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
   * This information is de-normalized from the Location resource to support the easier understanding of the encounter resource and processing in messaging or query.
   * There may be many levels in the hierachy, and this may only pic specific levels that are required for a specific usage scenario.
   */
  form?: CodeableConcept | undefined;
  /**
   * The location where the encounter takes place.
   */
  location: Reference;
  /**
   * Time period during which the patient was present at the location.
   */
  period?: Period | undefined;
  /**
   * The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.
   * When the patient is no longer active at a location, then the period end date is entered, and the status may be changed to completed.
   */
  status?: ('planned'|'active'|'reserved'|'completed') | undefined;
  _status?: Element | undefined;
}
/**
 * List of participants involved in the encounter
 * Any Patient or Group present in the participation.actor must also be the subject, though the subject may be absent from the participation.actor for cases where the patient (or group) is not present, such as during a case review conference.
 */
export interface EncounterParticipant extends BackboneElement {
  /**
   * Person involved in the encounter, the patient/group is also included here to indicate that the patient was actually participating in the encounter. Not including the patient here covers use cases such as a case meeting between practitioners about a patient - non contact times.
   * For planning purposes, Appointments may include a CareTeam participant to indicate that one specific person from the CareTeam will be assigned, but that assignment might not happen until the Encounter begins. Hence CareTeam is not included in Encounter.participant, as the specific individual should be assigned and represented as a Practitioner or other person resource.
   * Similarly, Location can be included in Appointment.participant to assist with planning.  However, the patient location is tracked on the Encounter in the Encounter.location property to allow for additional metadata and history to be recorded.
   * The role of the participant can be used to declare what the actor will be doing in the scope of this encounter participation.
   * If the individual is not specified during planning, then it is expected that the individual will be filled in at a later stage prior to the encounter commencing.
   */
  actor?: Reference | undefined;
  /**
   * The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.
   */
  period?: Period | undefined;
  /**
   * Role of participant in encounter.
   * The participant type indicates how an individual actor participates in an encounter. It includes non-practitioner participants, and for practitioners this is to describe the action type in the context of this encounter (e.g. Admitting Dr, Attending Dr, Translator, Consulting Dr). This is different to the practitioner roles which are functional roles, derived from terms of employment, education, licensing, etc.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * The list of medical reasons that are expected to be addressed during the episode of care
 * The reason communicates what medical problem the patient has that should be addressed during the episode of care.  This reason could be patient reported complaint, a clinical indication that was determined in a previous encounter or episode of care, or some planned care such as an immunization recommendation.  In the case where you have a primary reason, but are expecting to also address other problems, you can list the primary reason with a use code of 'Chief Complaint', while the other problems being addressed would have a use code of 'Reason for Visit'.
 * Examples:
 *  * pregnancy would use HealthcareService or a coding as the reason
 *  * patient home monitoring could use Condition as the reason
 */
export interface EncounterReason extends BackboneElement {
  /**
   * What the reason value should be used as e.g. Chief Complaint, Health Concern, Health Maintenance (including screening).
   */
  use?: CodeableConcept[] | undefined;
  /**
   * Reason the encounter takes place, expressed as a code or a reference to another resource. For admissions, this can be used for a coded admission diagnosis.
   */
  value?: CodeableReference[] | undefined;
}
export interface Encounter extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Encounter';
  /**
   * The set of accounts that may be used for billing for this Encounter.
   * The billing system may choose to allocate billable items associated with the Encounter to different referenced Accounts based on internal business rules.
   */
  account?: Reference[] | undefined;
  /**
   * The actual start and end time of the encounter.
   * If not (yet) known, the end of the Period may be omitted.
   */
  actualPeriod?: Period | undefined;
  /**
   * Details about the stay during which a healthcare service is provided.
   * This does not describe the event of admitting the patient, but rather any information that is relevant from the time of admittance until the time of discharge.
   * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.
   * The duration recorded in the period of this encounter covers the entire scope of this admission record.
   */
  admission?: EncounterAdmission | undefined;
  /**
   * The appointment that scheduled this encounter.
   */
  appointment?: Reference[] | undefined;
  /**
   * The request this encounter satisfies (e.g. incoming referral or procedure request).
   */
  basedOn?: Reference[] | undefined;
  /**
   * The group(s) of individuals, organizations that are allocated to participate in this encounter. The participants backbone will record the actuals of when these individuals participated during the encounter.
   */
  careTeam?: Reference[] | undefined;
  /**
   * Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
   */
  class?: CodeableConcept[] | undefined;
  /**
   * The list of diagnosis relevant to this encounter.
   * Also note that for the purpose of billing, the diagnoses are recorded in the account where they can be ranked appropriately for how the invoicing/claiming documentation needs to be prepared.
   */
  diagnosis?: EncounterDiagnosis[] | undefined;
  /**
   * Diet preferences reported by the patient.
   * For example, a patient may request both a dairy-free and nut-free diet preference (not mutually exclusive).
   */
  dietPreference?: CodeableConcept[] | undefined;
  /**
   * Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
   */
  episodeOfCare?: Reference[] | undefined;
  /**
   * Identifier(s) by which this encounter is known.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Actual quantity of time the encounter lasted. This excludes the time during leaves of absence.
   * When missing it is the time in between the start and end values.
   * If the precision on these values is low (e.g. to the day only) then this may be considered was an all day (or multi-day) encounter, unless the duration is included, where that amount of time occurred sometime during the interval.
   * May differ from the time in `Encounter.period` due to leave of absence(s).
   */
  length?: Duration | undefined;
  /**
   * List of locations where  the patient has been during this encounter.
   * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
   */
  location?: EncounterLocation[] | undefined;
  /**
   * The list of people responsible for providing the service.
   * Any Patient or Group present in the participation.actor must also be the subject, though the subject may be absent from the participation.actor for cases where the patient (or group) is not present, such as during a case review conference.
   */
  participant?: EncounterParticipant[] | undefined;
  /**
   * Another Encounter of which this encounter is a part of (administratively or in time).
   * This is also used for associating a child's encounter back to the mother's encounter.
   * Refer to the Notes section in the Patient resource for further details.
   */
  partOf?: Reference | undefined;
  /**
   * The planned end date/time (or discharge date) of the encounter.
   */
  plannedEndDate?: string | undefined;
  _plannedEndDate?: Element | undefined;
  /**
   * The planned start date/time (or admission date) of the encounter.
   */
  plannedStartDate?: string | undefined;
  _plannedStartDate?: Element | undefined;
  /**
   * Indicates the urgency of the encounter.
   */
  priority?: CodeableConcept | undefined;
  /**
   * The list of medical reasons that are expected to be addressed during the episode of care.
   * The reason communicates what medical problem the patient has that should be addressed during the episode of care.  This reason could be patient reported complaint, a clinical indication that was determined in a previous encounter or episode of care, or some planned care such as an immunization recommendation.  In the case where you have a primary reason, but are expecting to also address other problems, you can list the primary reason with a use code of 'Chief Complaint', while the other problems being addressed would have a use code of 'Reason for Visit'.
   * Examples:
   *  * pregnancy would use HealthcareService or a coding as the reason
   *  * patient home monitoring could use Condition as the reason
   */
  reason?: EncounterReason[] | undefined;
  /**
   * The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed seperately) for an external consultation.  Refer to the colonoscopy example on the Encounter examples tab.
   */
  serviceProvider?: Reference | undefined;
  /**
   * Broad categorization of the service that is to be provided (e.g. cardiology).
   */
  serviceType?: CodeableReference[] | undefined;
  /**
   * Any special requests that have been made for this encounter, such as the provision of specific equipment or other things.
   */
  specialArrangement?: CodeableConcept[] | undefined;
  /**
   * Special courtesies that may be provided to the patient during the encounter (VIP, board member, professional courtesy).
   * Although the specialCourtesy property can contain values like VIP, the purpose of this field is intended to be used for flagging additional `benefits` that might occur for the patient during the encounter.
   * It could include things like the patient is to have a private room, special room features, receive a friendly visit from hospital adminisitration, or should be briefed on treatment by senior staff during the stay.
   * It is not specifically intended to be used for securing the specific record - that is the purpose of the security meta tag, and where appropriate, both fields could be used.
   */
  specialCourtesy?: CodeableConcept[] | undefined;
  /**
   * The current state of the encounter (not the state of the patient within the encounter - that is subjectState).
   * Note that internal business rules will determine the appropriate transitions that may occur between statuses (and also classes).
   */
  status: ('planned'|'in-progress'|'on-hold'|'discharged'|'completed'|'cancelled'|'discontinued'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The patient or group related to this encounter. In some use-cases the patient MAY not be present, such as a case meeting about a patient between several practitioners or a careteam.
   * While the encounter is always about the patient, the patient might not actually be known in all contexts of use, and there may be a group of patients that could be anonymous (such as in a group therapy for Alcoholics Anonymous - where the recording of the encounter could be used for billing on the number of people/staff and not important to the context of the specific patients) or alternately in veterinary care a herd of sheep receiving treatment (where the animals are not individually tracked).
   */
  subject?: Reference | undefined;
  /**
   * The subjectStatus value can be used to track the patient's status within the encounter. It details whether the patient has arrived or departed, has been triaged or is currently in a waiting status.
   * Different use-cases are likely to have different permitted transitions between states, such as an Emergency department could use `arrived` when the patient first presents, then `triaged` once has been assessed by a nurse, then `receiving-care` once treatment begins, however other sectors may use a different set of these values, or their own custom set in place of this example valueset provided.
   */
  subjectStatus?: CodeableConcept | undefined;
  /**
   * Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
   * Since there are many ways to further classify encounters, this element is 0..*.
   */
  type?: CodeableConcept[] | undefined;
  /**
   * Connection details of a virtual service (e.g. conference call).
   * There are two types of virtual meetings that often exist:
   * * a persistent, virtual meeting room that can only be used for a single purpose at a time, 
   * * and a dynamic virtual meeting room that is generated on demand for a specific purpose.
   * Implementers may consider using Location.virtualService for persistent meeting rooms.
   * If each participant would have a different meeting link, an extension using the VirtualServiceContactDetail  can be applied to the Encounter.participant BackboneElement.
   */
  virtualService?: VirtualServiceDetail[] | undefined;
}
/**
 * Location of the patient at this point in the encounter
 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
 */
export interface EncounterHistoryLocation extends BackboneElement {
  /**
   * This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
   * This information is de-normalized from the Location resource to support the easier understanding of the encounter resource and processing in messaging or query.
   * There may be many levels in the hierachy, and this may only pic specific levels that are required for a specific usage scenario.
   */
  form?: CodeableConcept | undefined;
  /**
   * The location where the encounter takes place.
   */
  location: Reference;
}
export interface EncounterHistory extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EncounterHistory';
  /**
   * The start and end time associated with this set of values associated with the encounter, may be different to the planned times for various reasons.
   */
  actualPeriod?: Period | undefined;
  /**
   * Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
   */
  class: CodeableConcept;
  /**
   * The Encounter associated with this set of historic values.
   * This is also used for associating a child's encounter back to the mother's encounter.
   * Refer to the Notes section in the Patient resource for further details.
   */
  encounter?: Reference | undefined;
  /**
   * Identifier(s) by which this encounter is known.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Actual quantity of time the encounter lasted. This excludes the time during leaves of absence.
   * When missing it is the time in between the start and end values.
   * If the precision on these values is low (e.g. to the day only) then this may be considered was an all day (or multi-day) encounter, unless the duration is included, where that amount of time occurred sometime during the interval.
   * May differ from the time in `Encounter.period` due to leave of absence(s).
   */
  length?: Duration | undefined;
  /**
   * The location of the patient at this point in the encounter, the multiple cardinality permits de-normalizing the levels of the location hierarchy, such as site/ward/room/bed.
   * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
   */
  location?: EncounterHistoryLocation[] | undefined;
  /**
   * The planned end date/time (or discharge date) of the encounter.
   */
  plannedEndDate?: string | undefined;
  _plannedEndDate?: Element | undefined;
  /**
   * The planned start date/time (or admission date) of the encounter.
   */
  plannedStartDate?: string | undefined;
  _plannedStartDate?: Element | undefined;
  /**
   * Broad categorization of the service that is to be provided (e.g. cardiology).
   */
  serviceType?: CodeableReference[] | undefined;
  /**
   * planned | in-progress | on-hold | discharged | completed | cancelled | discontinued | entered-in-error | unknown.
   * Note that internal business rules will determine the appropriate transitions that may occur between statuses (and also classes).
   */
  status: ('planned'|'in-progress'|'on-hold'|'discharged'|'completed'|'cancelled'|'discontinued'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The patient or group related to this encounter. In some use-cases the patient MAY not be present, such as a case meeting about a patient between several practitioners or a careteam.
   * While the encounter is always about the patient, the patient might not actually be known in all contexts of use, and there may be a group of patients that could be anonymous (such as in a group therapy for Alcoholics Anonymous - where the recording of the encounter could be used for billing on the number of people/staff and not important to the context of the specific patients) or alternately in veterinary care a herd of sheep receiving treatment (where the animals are not individually tracked).
   */
  subject?: Reference | undefined;
  /**
   * The subjectStatus value can be used to track the patient's status within the encounter. It details whether the patient has arrived or departed, has been triaged or is currently in a waiting status.
   */
  subjectStatus?: CodeableConcept | undefined;
  /**
   * Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
   * Since there are many ways to further classify encounters, this element is 0..*.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Set of payloads that are provided by this endpoint
 * Note that not all mimetypes or types will be listed under the one endpoint resource, there may be multiple instances that information for cases where other header data such as the endpoint address, active status/period etc. is different.
 */
export interface EndpointPayload extends BackboneElement {
  /**
   * The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If the mime type is not specified, then the sender could send any content (including no content depending on the connectionType).
   * Sending the payload has obvious security consequences. The server is responsible for ensuring that the content is appropriately secured.
   */
  mimeType?: string[] | undefined;
  _mimeType?: Element[] | undefined;
  /**
   * The payload type describes the acceptable content that can be communicated on the endpoint.
   * The mimeType describes the serialization format of the data, where the payload.type indicates the specific document/schema that is being transferred; e.g. DischargeSummary or CarePlan.
   */
  type?: CodeableConcept[] | undefined;
}
export interface Endpoint extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Endpoint';
  /**
   * The uri that describes the actual end-point to connect to.
   * For rest-hook, and websocket, the end-point must be an http: or https: URL; for email, a mailto: url, for sms, a tel: url, and for message the endpoint can be in any form of url the server understands (usually, http: or mllp:). The URI is allowed to be relative; in which case, it is relative to the server end-point (since there may be more than one, clients should avoid using relative URIs)
   * This address will be to the service base, without any parameters, or sub-services or resources tacked on.
   * E.g. for a WADO-RS endpoint, the url should be "https://pacs.hospital.org/wado-rs"
   * and not "https://pacs.hospital.org/wado-rs/studies/1.2.250.1.59.40211.12345678.678910/series/1.2.250.1.59.40211.789001276.14556172.67789/instances/...".
   */
  address: string;
  _address?: Element | undefined;
  /**
   * A coded value that represents the technical details of the usage of this endpoint, such as what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds-hook).
   * For additional connectivity details for the protocol, extensions will be used at this point, as in the XDS example. If there are multiple payload types or mimetypes they are all applicable for all connection types, and all have the same status.
   */
  connectionType: CodeableConcept[];
  /**
   * Contact details for a human to contact about the endpoint. The primary use of this for system administrator troubleshooting.
   */
  contact?: ContactPoint[] | undefined;
  /**
   * The description of the endpoint and what it is for (typically used as supplemental information in an endpoint directory describing its usage/purpose).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The type of environment(s) exposed at this endpoint (dev, prod, test, etc.).
   */
  environmentType?: CodeableConcept[] | undefined;
  /**
   * Additional headers / information to send as part of the notification.
   * Exactly what these mean depends on the channel type. The can convey additional information to the recipient and/or meet security requirements.
   */
  header?: string[] | undefined;
  _header?: Element[] | undefined;
  /**
   * Identifier for the organization that is used to identify the endpoint across multiple disparate systems.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization that manages this endpoint (even if technically another organization is hosting this in the cloud, it is the organization associated with the data).
   * This property is not typically used when searching for Endpoint resources for usage. The typical usage is via the reference from an applicable Organization/Location/Practitioner resource, which is where the context is provided. Multiple Locations may reference a single endpoint, and don't have to be within the same organization resource, but most likely within the same organizational hierarchy.
   */
  managingOrganization?: Reference | undefined;
  /**
   * A friendly name that this endpoint can be referred to with.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The set of payloads that are provided/available at this endpoint.
   * Note that not all mimetypes or types will be listed under the one endpoint resource, there may be multiple instances that information for cases where other header data such as the endpoint address, active status/period etc. is different.
   */
  payload?: EndpointPayload[] | undefined;
  /**
   * The interval during which the endpoint is expected to be operational.
   * Temporary downtimes or other short-term changes in availability would not be represented in this property.
   */
  period?: Period | undefined;
  /**
   * The endpoint status represents the general expected availability of an endpoint.
   * This element is labeled as a modifier because the status contains codes that mark the endpoint as not currently valid. Temporary downtimes or other unexpected short-term changes in availability would not be represented in this property.
   */
  status: ('active'|'suspended'|'error'|'off'|'entered-in-error');
  _status?: Element | undefined;
}
export interface EnrollmentRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EnrollmentRequest';
  /**
   * Patient Resource.
   */
  candidate?: Reference | undefined;
  /**
   * Reference to the program or plan identification, underwriter or payor.
   */
  coverage?: Reference | undefined;
  /**
   * The date when this resource was created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The Insurer who is target  of the request.
   */
  insurer?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: Reference | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the request as not currently valid.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
}
export interface EnrollmentResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EnrollmentResponse';
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: Reference | undefined;
  /**
   * Processing status: error, complete.
   */
  outcome?: ('queued'|'complete'|'error'|'partial') | undefined;
  _outcome?: Element | undefined;
  /**
   * Original request resource reference.
   */
  request?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
}
/**
 * The list of medical conditions that were addressed during the episode of care
 * The diagnosis communicates what medical conditions were actually addressed during the episode of care.  If a diagnosis was provided as a reason, and was treated during the episode of care, it may be listed in both EpisodeOfCare.reason and EpisodeOfCare.diagnosis.
 * Diagnoses related to billing can be documented on the Account resources which supports ranking for the purpose of reimbursement.
 */
export interface EpisodeOfCareDiagnosis extends BackboneElement {
  /**
   * The medical condition that was addressed during the episode of care, expressed as a text, code or a reference to another resource.
   */
  condition?: CodeableReference[] | undefined;
  /**
   * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
   */
  use?: CodeableConcept | undefined;
}
/**
 * The list of medical reasons that are expected to be addressed during the episode of care
 * The reason communicates what medical problem the patient has that should be addressed during the episode of care.  This reason could be patient reported complaint, a clinical indication that was determined in a previous encounter or episode of care, or some planned care such as an immunization recommendation.  In the case where you have a primary reason, but are expecting to also address other problems, you can list the primary reason with a use code of 'Chief Complaint', while the other problems being addressed would have a use code of 'Reason for Visit'.
 * Examples:
 *  * pregnancy would use HealthcareService or a coding as the reason
 *  * patient home monitoring could use Condition as the reason
 */
export interface EpisodeOfCareReason extends BackboneElement {
  /**
   * What the reason value should be used as e.g. Chief Complaint, Health Concern, Health Maintenance (including screening).
   */
  use?: CodeableConcept | undefined;
  /**
   * The medical reason that is expected to be addressed during the episode of care, expressed as a text, code or a reference to another resource.
   */
  value?: CodeableReference[] | undefined;
}
/**
 * Past list of status codes (the current status may be included to cover the start date of the status)
 */
export interface EpisodeOfCareStatusHistory extends BackboneElement {
  /**
   * The period during this EpisodeOfCare that the specific status applied.
   */
  period: Period;
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   */
  status: ('planned'|'waitlist'|'active'|'onhold'|'finished'|'cancelled'|'entered-in-error');
  _status?: Element | undefined;
}
export interface EpisodeOfCare extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EpisodeOfCare';
  /**
   * The set of accounts that may be used for billing for this EpisodeOfCare.
   * The billing system may choose to allocate billable items associated with the EpisodeOfCare to different referenced Accounts based on internal business rules.
   */
  account?: Reference[] | undefined;
  /**
   * The practitioner that is the care manager/care coordinator for this patient.
   */
  careManager?: Reference | undefined;
  /**
   * The list of practitioners that may be facilitating this episode of care for specific purposes.
   */
  careTeam?: Reference[] | undefined;
  /**
   * The list of medical conditions that were addressed during the episode of care.
   * The diagnosis communicates what medical conditions were actually addressed during the episode of care.  If a diagnosis was provided as a reason, and was treated during the episode of care, it may be listed in both EpisodeOfCare.reason and EpisodeOfCare.diagnosis.
   * Diagnoses related to billing can be documented on the Account resources which supports ranking for the purpose of reimbursement.
   */
  diagnosis?: EpisodeOfCareDiagnosis[] | undefined;
  /**
   * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization that has assumed the specific responsibilities for care coordination, care delivery, or other services for the specified duration.
   * If multiple organizations are involved in care delivery, the care teams from those organizations would be represented in EpisodeOfCare.team, while the primary organization managing the care would be listed in EpisodeOfCare.managingOrganization.   Other organizations may have their own EpisodeOfCare for tracking their activities.
   */
  managingOrganization?: Reference | undefined;
  /**
   * The patient who is the focus of this episode of care.
   */
  patient: Reference;
  /**
   * The interval during which the managing organization assumes the defined responsibility.
   */
  period?: Period | undefined;
  /**
   * The list of medical reasons that are expected to be addressed during the episode of care.
   * The reason communicates what medical problem the patient has that should be addressed during the episode of care.  This reason could be patient reported complaint, a clinical indication that was determined in a previous encounter or episode of care, or some planned care such as an immunization recommendation.  In the case where you have a primary reason, but are expecting to also address other problems, you can list the primary reason with a use code of 'Chief Complaint', while the other problems being addressed would have a use code of 'Reason for Visit'.
   * Examples:
   *  * pregnancy would use HealthcareService or a coding as the reason
   *  * patient home monitoring could use Condition as the reason
   */
  reason?: EpisodeOfCareReason[] | undefined;
  /**
   * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
   */
  referralRequest?: Reference[] | undefined;
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   * This element is labeled as a modifier because the status contains codes that mark the episode as not currently valid.
   */
  status: ('planned'|'waitlist'|'active'|'onhold'|'finished'|'cancelled'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
   */
  statusHistory?: EpisodeOfCareStatusHistory[] | undefined;
  /**
   * A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
   * The type can be very important in processing as this could be used in determining if the EpisodeOfCare is relevant to specific government reporting, or other types of classifications.
   */
  type?: CodeableConcept[] | undefined;
}
export interface EventDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EventDefinition';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   */
  author?: ContactDetail[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the event definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the event definition.
   * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the event definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the event definition changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the event definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the event definition from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the event definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the event definition is presumed to be the predominant language in the place the event definition was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   */
  editor?: ContactDetail[] | undefined;
  /**
   * The period during which the event definition content was or is planned to be in active use.
   * The effective period for an event definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a definition intended to be used for the year 2016 might be published in 2015.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * A Boolean value to indicate that this event definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of event definitions that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this event definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this event definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the event definition is intended to be used.
   * It may be possible for the event definition to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the event definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the event definition.
   * Usually an organization but may be an individual. The publisher (or steward) of the event definition is the organization or individual primarily responsible for the maintenance and upkeep of the event definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the event definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this event definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the event definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this event definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Related resources such as additional documentation, justification, or bibliographic references.
   * Each related resource is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * The status of this event definition. Enables tracking the life-cycle of the content.
   * Allows filtering of event definitions that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A code or group definition that describes the intended subject of the event definition.
   */
  subjectCodeableConcept?: CodeableConcept | undefined;
  /**
   * A code or group definition that describes the intended subject of the event definition.
   */
  subjectReference?: Reference | undefined;
  /**
   * An explanatory or alternate title for the event definition giving additional information about its content.
   */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the event definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptive topics related to the module. Topics provide a high-level categorization of the module that can be useful for filtering and searching.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * The trigger element defines when the event occurs. If more than one trigger condition is specified, the event fires whenever any one of the trigger conditions is met.
   */
  trigger: TriggerDefinition[];
  /**
   * An absolute URI that is used to identify this event definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this event definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the event definition is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * A detailed description of how the event definition is used from a clinical perspective.
   */
  usage?: string | undefined;
  _usage?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate event definition instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the event definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the event definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different event definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the event definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Certainty or quality of the evidence
 */
export interface EvidenceCertainty extends BackboneElement {
  /**
   * Textual description of certainty.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Footnotes and/or explanatory notes.
   */
  note?: Annotation[] | undefined;
  /**
   * Individual or group who did the rating.
   */
  rater?: string | undefined;
  _rater?: Element | undefined;
  /**
   * Assessment or judgement of the aspect.
   */
  rating?: CodeableConcept | undefined;
  /**
   * A domain or subdomain of certainty.
   */
  subcomponent?: EvidenceCertainty[] | undefined;
  /**
   * Aspect of certainty being rated.
   */
  type?: CodeableConcept | undefined;
}
/**
 * An attribute of the Statistic
 */
export interface EvidenceStatisticAttributeEstimate extends BackboneElement {
  /**
   * A nested attribute estimate; which is the attribute estimate of an attribute estimate.
   * A nested attribute estimate; which is the attribute estimate of an attribute estimate
   */
  attributeEstimateAttributeEstimate?: EvidenceStatisticAttributeEstimate[] | undefined;
  /**
   * Human-readable summary of the estimate.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Use 95 for a 95% confidence interval.
   */
  level?: number | undefined;
  /**
   * Footnote or explanatory note about the estimate.
   */
  note?: Annotation[] | undefined;
  /**
   * The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure.
   * Often the p value
   */
  quantity?: Quantity | undefined;
  /**
   * Lower bound of confidence interval.
   */
  range?: Range | undefined;
  /**
   * The type of attribute estimate, e.g., confidence interval or p value.
   */
  type?: CodeableConcept | undefined;
}
/**
 * A variable adjusted for in the adjusted analysis
 */
export interface EvidenceStatisticModelCharacteristicVariable extends BackboneElement {
  /**
   * How the variable is classified for use in adjusted analysis.
   */
  handling?: ('continuous'|'dichotomous'|'ordinal'|'polychotomous') | undefined;
  _handling?: Element | undefined;
  /**
   * Description for grouping of ordinal or polychotomous variables.
   */
  valueCategory?: CodeableConcept[] | undefined;
  /**
   * Discrete value for grouping of ordinal or polychotomous variables.
   */
  valueQuantity?: Quantity[] | undefined;
  /**
   * Range of values for grouping of ordinal or polychotomous variables.
   */
  valueRange?: Range[] | undefined;
  /**
   * Description of the variable.
   */
  variableDefinition: Reference;
}
/**
 * An aspect of the statistical model
 */
export interface EvidenceStatisticModelCharacteristic extends BackboneElement {
  /**
   * An attribute of the statistic used as a model characteristic.
   */
  attributeEstimate?: EvidenceStatisticAttributeEstimate[] | undefined;
  /**
   * Description of a component of the method to generate the statistic.
   */
  code: CodeableConcept;
  /**
   * Further specification of the quantified value of the component of the method to generate the statistic.
   */
  value?: Quantity | undefined;
  /**
   * A variable adjusted for in the adjusted analysis.
   */
  variable?: EvidenceStatisticModelCharacteristicVariable[] | undefined;
}
/**
 * Number of samples in the statistic
 */
export interface EvidenceStatisticSampleSize extends BackboneElement {
  /**
   * Human-readable summary of population sample size.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Number of participants with known results for measured variables.
   */
  knownDataCount?: number | undefined;
  /**
   * Footnote or explanatory note about the sample size.
   */
  note?: Annotation[] | undefined;
  /**
   * A human-readable string to clarify or explain concepts about the sample size.
   */
  numberOfParticipants?: number | undefined;
  /**
   * Number of participants in the population.
   */
  numberOfStudies?: number | undefined;
}
/**
 * Values and parameters for a single statistic
 */
export interface EvidenceStatistic extends BackboneElement {
  /**
   * A statistical attribute of the statistic such as a measure of heterogeneity.
   */
  attributeEstimate?: EvidenceStatisticAttributeEstimate[] | undefined;
  /**
   * When the measured variable is handled categorically, the category element is used to define which category the statistic is reporting.
   * Simple strings can be used for descriptive purposes. Exact matching to EvidenceVariable.category.name for the Evidence.variableDefinition[variableRole=measuredVariable].observed=Reference(EvidenceVariable) could facilitate validation within datasets.
   */
  category?: CodeableConcept | undefined;
  /**
   * A description of the content value of the statistic.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A component of the method to generate the statistic.
   */
  modelCharacteristic?: EvidenceStatisticModelCharacteristic[] | undefined;
  /**
   * Footnotes and/or explanatory notes.
   */
  note?: Annotation[] | undefined;
  /**
   * The number of participants affected where the unit of analysis is the same as sampleSize.knownDataCount and sampleSize.numberOfParticipants.
   * When the number affected is the statistic, use Evidence.statistic.quantity and set Evidence.statistic.type.coding.code=C25463 and Evidence.statistic.type.coding.display=Count. When the statistic is a Proportion, use Evidence.statistic.numberAffected and enter an integer as the value. When the statistic is an Event Rate (where individual participants may have 2 or more events), use Evidence.statistic.numberAffected to record the number of participants with events rather than the total number of events.
   */
  numberAffected?: number | undefined;
  /**
   * The number of events associated with the statistic, where the unit of analysis is different from numberAffected, sampleSize.knownDataCount and sampleSize.numberOfParticipants.
   * When the number of events is the statistic, use Evidence.statistic.quantity and set Evidence.statistic.type.coding.code=C25463 and Evidence.statistic.type.coding.display=Count. When the statistic is an Event Rate (where individual participants may have 2 or more events), use Evidence.statistic.numberOfEvents to record the total number of events rather than the number of participants with events.
   */
  numberOfEvents?: number | undefined;
  /**
   * Statistic value.
   */
  quantity?: Quantity | undefined;
  /**
   * Number of samples in the statistic.
   */
  sampleSize?: EvidenceStatisticSampleSize | undefined;
  /**
   * Type of statistic, e.g., relative risk.
   */
  statisticType?: CodeableConcept | undefined;
}
/**
 * Evidence variable such as population, exposure, or outcome
 */
export interface EvidenceVariableDefinition extends BackboneElement {
  /**
   * A text description or summary of the variable.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Indication of quality of match between intended variable to actual variable.
   */
  directnessMatch?: CodeableConcept | undefined;
  /**
   * Definition of the intended variable related to the Evidence.
   */
  intended?: Reference | undefined;
  /**
   * Footnotes and/or explanatory notes.
   */
  note?: Annotation[] | undefined;
  /**
   * Definition of the actual variable related to the statistic(s).
   */
  observed?: Reference | undefined;
  /**
   * population | subpopulation | exposure | referenceExposure | measuredVariable | confounder.
   */
  variableRole: CodeableConcept;
}
export interface Evidence extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Evidence';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * Declarative description of the Evidence.
   */
  assertion?: string | undefined;
  _assertion?: Element | undefined;
  /**
   * An individiual, organization, or device primarily involved in the creation and maintenance of the content.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   */
  author?: ContactDetail[] | undefined;
  /**
   * Assessment of certainty, confidence in the estimates, or quality of the evidence.
   */
  certainty?: EvidenceCertainty[] | undefined;
  /**
   * Citation Resource or display of suggested citation for this evidence.
   */
  citeAsstring?: string | undefined;
  _citeAsstring?: Element | undefined;
  /**
   * Citation Resource or display of suggested citation for this evidence.
   */
  citeAsReference?: Reference | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the Evidence and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the Evidence.
   * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the summary was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the summary changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the summary. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the evidence from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the evidence as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the evidence is presumed to be the predominant language in the place the evidence was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An individiual, organization, or device primarily responsible for internal coherence of the content.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   */
  editor?: ContactDetail[] | undefined;
  /**
   * An individiual, organization, or device responsible for officially endorsing the content for use in some setting.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * A Boolean value to indicate that this resource is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this summary when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this summary outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the evidence. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Footnotes and/or explanatory notes.
   */
  note?: Annotation[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the evidence.
   * Usually an organization but may be an individual. The publisher (or steward) of the evidence is the organization or individual primarily responsible for the maintenance and upkeep of the evidence. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the evidence. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this Evidence is needed and why it has been designed as it has.
   * This element does not describe the usage of the Evidence. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is. This may be used to point to source materials or specifications that drove the structure of this Evidence.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Link or citation to artifact associated with the summary.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * An individiual, organization, or device primarily responsible for review of some aspect of the content.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * Values and parameters for a single statistic.
   */
  statistic?: EvidenceStatistic[] | undefined;
  /**
   * The status of this summary. Enables tracking the life-cycle of the content.
   * Allows filtering of summarys s that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * The design of the study that produced this evidence. The design is described with any number of study design characteristics.
   */
  studyDesign?: CodeableConcept[] | undefined;
  /**
   * The method to combine studies.
   */
  synthesisType?: CodeableConcept | undefined;
  /**
   * A short, descriptive, user-friendly title for the summary.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this evidence when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the meta.source element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * Evidence variable such as population, exposure, or outcome.
   */
  variableDefinition: EvidenceVariableDefinition[];
  /**
   * The identifier that is used to identify this version of the summary when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the summary author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author. Considerations for making this decision are found in Technical and Business Versions.
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 is newer, and a 0 if the version ordering can't successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 is newer, and a 0 if the version ordering can't successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Target of the relationship
 */
export interface EvidenceReportRelatesToTarget extends BackboneElement {
  /**
   * Target of the relationship Display.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * Target of the relationship Identifier.
   */
  identifier?: Identifier | undefined;
  /**
   * Target of the relationship Resource reference.
   */
  resource?: Reference | undefined;
  /**
   * Target of the relationship URL.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * Relationships to other compositions/documents
 * A document is a version specific composition.
 */
export interface EvidenceReportRelatesTo extends BackboneElement {
  /**
   * The type of relationship that this composition has with anther composition or document.
   * If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
   */
  code: ('replaces'|'amends'|'appends'|'transforms'|'replacedWith'|'amendedWith'|'appendedWith'|'transformedWith');
  _code?: Element | undefined;
  /**
   * The target composition/document of this relationship.
   */
  target: EvidenceReportRelatesToTarget;
}
/**
 * Composition is broken into sections
 */
export interface EvidenceReportSection extends BackboneElement {
  /**
   * Identifies who is responsible for the information in this section, not necessarily who typed it in.
   */
  author?: Reference[] | undefined;
  /**
   * If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
   * The various reasons for an empty section make a significant interpretation to its interpretation. Note that this code is for use when the entire section content has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
   */
  emptyReason?: CodeableConcept | undefined;
  /**
   * Specifies any type of classification of the evidence report.
   */
  entryClassifier?: CodeableConcept[] | undefined;
  /**
   * Quantity as content.
   */
  entryQuantity?: Quantity[] | undefined;
  /**
   * A reference to the actual resource from which the narrative in the section is derived.
   * If there are no entries in the list, an emptyReason SHOULD be provided.
   */
  entryReference?: Reference[] | undefined;
  /**
   * A code identifying the kind of content contained within the section. This should be consistent with the section title.
   * The code identifies the section for an automated processor of the document. This is particularly relevant when using profiles to control the structure of the document.   
   * If the section has content (instead of sub-sections), the section.code does not change the meaning or interpretation of the resource that is the content of the section in the comments for the section.code.
   */
  focus?: CodeableConcept | undefined;
  /**
   * A definitional Resource identifying the kind of content contained within the section. This should be consistent with the section title.
   */
  focusReference?: Reference | undefined;
  /**
   * How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
   * This element is labeled as a modifier because a change list must not be misunderstood as a complete list.
   */
  mode?: ('working'|'snapshot'|'changes') | undefined;
  _mode?: Element | undefined;
  /**
   * Specifies the order applied to the items in the section entries.
   * Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
   */
  orderedBy?: CodeableConcept | undefined;
  /**
   * A nested sub-section within this section.
   * Nested sections are primarily used to help human readers navigate to particular portions of the document.
   */
  section?: EvidenceReportSection[] | undefined;
  /**
   * A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is peferred to contain sufficient detail to make it acceptable for a human to just read the narrative.
   * Document profiles may define what content should be represented in the narrative.
   */
  text?: Narrative | undefined;
  /**
   * The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
   * The title identifies the section for a human reader. The title must be consistent with the narrative of the resource that is the target of the section.content reference. Generally, sections SHOULD have titles, but in some documents, it is unnecessary or inappropriate. Typically, this is where a section has subsections that have their own adequately distinguishing title,  or documents that only have a single section.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * Characteristic
 */
export interface EvidenceReportSubjectCharacteristic extends BackboneElement {
  /**
   * Characteristic code.
   * Example 1 is a Citation. Example 2 is a type of outcome. Example 3 is a specific outcome.
   */
  code: CodeableConcept;
  /**
   * Is used to express not the characteristic.
   */
  exclude?: boolean | undefined;
  _exclude?: Element | undefined;
  /**
   * Timeframe for the characteristic.
   */
  period?: Period | undefined;
  /**
   * Characteristic value.
   * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3 is 1-year mortality.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * Characteristic value.
   * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3 is 1-year mortality.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * Characteristic value.
   * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3 is 1-year mortality.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Characteristic value.
   * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3 is 1-year mortality.
   */
  valueRange?: Range | undefined;
  /**
   * Characteristic value.
   * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3 is 1-year mortality.
   */
  valueReference?: Reference | undefined;
}
/**
 * Focus of the report
 * May be used as an expression for search queries and search results
 */
export interface EvidenceReportSubject extends BackboneElement {
  /**
   * Characteristic.
   */
  characteristic?: EvidenceReportSubjectCharacteristic[] | undefined;
  /**
   * Used for general notes and annotations not coded elsewhere.
   */
  note?: Annotation[] | undefined;
}
export interface EvidenceReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EvidenceReport';
  /**
   * An individiual, organization, or device primarily involved in the creation and maintenance of the content.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   */
  author?: ContactDetail[] | undefined;
  /**
   * Citation Resource or display of suggested citation for this report.
   * used for reports for which external citation is expected, such as use in support of scholarly publications.
   */
  citeAsstring?: string | undefined;
  _citeAsstring?: Element | undefined;
  /**
   * Citation Resource or display of suggested citation for this report.
   * used for reports for which external citation is expected, such as use in support of scholarly publications.
   */
  citeAsReference?: Reference | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * An individiual, organization, or device primarily responsible for internal coherence of the content.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   */
  editor?: ContactDetail[] | undefined;
  /**
   * An individiual, organization, or device responsible for officially endorsing the content for use in some setting.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * A formal identifier that is used to identify this EvidenceReport when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * This element will contain unique identifiers that support de-duplication of EvidenceReports. This identifier can be valid for only one EvidenceReport resource.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Used for footnotes and annotations.
   */
  note?: Annotation[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the evidence report.
   * Usually an organization but may be an individual. The publisher (or steward) of the evidence report is the organization or individual primarily responsible for the maintenance and upkeep of the evidence report. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the evidence report. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Link, description or reference to artifact associated with the report.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * A formal identifier that is used to identify things closely related to this EvidenceReport.
   * May include trial registry identifiers, e.g. NCT04372602 from clinicaltrials.gov. This identifier can be valid for multiple EvidenceReport resources.
   */
  relatedIdentifier?: Identifier[] | undefined;
  /**
   * Relationships that this composition has with other compositions or documents that already exist.
   * A document is a version specific composition.
   */
  relatesTo?: EvidenceReportRelatesTo[] | undefined;
  /**
   * An individiual, organization, or device primarily responsible for review of some aspect of the content.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * The root of the sections that make up the composition.
   */
  section?: EvidenceReportSection[] | undefined;
  /**
   * The status of this summary. Enables tracking the life-cycle of the content.
   * Allows filtering of summaries that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * Specifies the subject or focus of the report. Answers "What is this report about?".
   * May be used as an expression for search queries and search results
   */
  subject: EvidenceReportSubject;
  /**
   * Specifies the kind of report, such as grouping of classifiers, search results, or human-compiled expression.
   */
  type?: CodeableConcept | undefined;
  /**
   * An absolute URI that is used to identify this EvidenceReport when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence report instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
}
/**
 * A grouping for ordinal or polychotomous variables
 */
export interface EvidenceVariableCategory extends BackboneElement {
  /**
   * Description of the grouping.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Definition of the grouping.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * Definition of the grouping.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Definition of the grouping.
   */
  valueRange?: Range | undefined;
}
/**
 * Used to specify how two or more characteristics are combined
 */
export interface EvidenceVariableCharacteristicDefinitionByCombination extends BackboneElement {
  /**
   * A defining factor of the characteristic.
   */
  characteristic: EvidenceVariableCharacteristic[];
  /**
   * Used to specify if two or more characteristics are combined with OR or AND.
   */
  code: ('all-of'|'any-of'|'at-least'|'at-most'|'statistical'|'net-effect'|'dataset');
  _code?: Element | undefined;
  /**
   * Provides the value of "n" when "at-least" or "at-most" codes are used.
   */
  threshold?: number | undefined;
}
/**
 * Defines the characteristic using type and value
 */
export interface EvidenceVariableCharacteristicDefinitionByTypeAndValue extends BackboneElement {
  /**
   * Device used for determining characteristic.
   */
  device?: Reference | undefined;
  /**
   * Method for how the characteristic value was determined.
   */
  method?: CodeableConcept[] | undefined;
  /**
   * Defines the reference point for comparison when valueQuantity or valueRange is not compared to zero.
   */
  offset?: CodeableConcept | undefined;
  /**
   * Used to express the type of characteristic.
   */
  type: CodeableConcept;
  /**
   * Defines the characteristic when paired with characteristic.type.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * Defines the characteristic when paired with characteristic.type.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * Defines the characteristic when paired with characteristic.type.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * Defines the characteristic when paired with characteristic.type.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Defines the characteristic when paired with characteristic.type.
   */
  valueRange?: Range | undefined;
  /**
   * Defines the characteristic when paired with characteristic.type.
   */
  valueReference?: Reference | undefined;
}
/**
 * Timing in which the characteristic is determined
 */
export interface EvidenceVariableCharacteristicTimeFromEvent extends BackboneElement {
  /**
   * Human readable description.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The event used as a base point (reference point) in time.
   */
  eventCodeableConcept?: CodeableConcept | undefined;
  /**
   * The event used as a base point (reference point) in time.
   */
  eventstring?: string | undefined;
  _eventstring?: Element | undefined;
  /**
   * The event used as a base point (reference point) in time.
   */
  eventReference?: Reference | undefined;
  /**
   * A human-readable string to clarify or explain concepts about the timeFromEvent.
   */
  note?: Annotation[] | undefined;
  /**
   * Used to express the observation at a defined amount of time before or after the event.
   */
  quantity?: Quantity | undefined;
  /**
   * Used to express the observation within a period before and/or after the event.
   */
  range?: Range | undefined;
}
/**
 * A defining factor of the EvidenceVariable
 * Characteristics can be defined flexibly to accommodate different use cases for membership criteria, ranging from simple codes, all the way to using an expression language to express the criteria.
 */
export interface EvidenceVariableCharacteristic extends BackboneElement {
  /**
   * Defines the characteristic as a combination of two or more characteristics.
   */
  definitionByCombination?: EvidenceVariableCharacteristicDefinitionByCombination | undefined;
  /**
   * Defines the characteristic using both a type and value[x] elements.
   */
  definitionByTypeAndValue?: EvidenceVariableCharacteristicDefinitionByTypeAndValue | undefined;
  /**
   * Defines the characteristic using Canonical.
   */
  definitionCanonical?: string | undefined;
  _definitionCanonical?: Element | undefined;
  /**
   * Defines the characteristic using CodeableConcept.
   */
  definitionCodeableConcept?: CodeableConcept | undefined;
  /**
   * Defines the characteristic using Expression.
   * When another element provides a definition of the characteristic, the definitionExpression content SHALL match the definition (only adding technical concepts necessary for implementation) without changing the meaning.
   */
  definitionExpression?: Expression | undefined;
  /**
   * Defines the characteristic using id.
   */
  definitionId?: string | undefined;
  _definitionId?: Element | undefined;
  /**
   * Defines the characteristic using a Reference.
   */
  definitionReference?: Reference | undefined;
  /**
   * A short, natural language description of the characteristic that could be used to communicate the criteria to an end-user.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Length of time in which the characteristic is met.
   */
  durationQuantity?: Quantity | undefined;
  /**
   * Length of time in which the characteristic is met.
   */
  durationRange?: Range | undefined;
  /**
   * When true, this characteristic is an exclusion criterion. In other words, not matching this characteristic definition is equivalent to meeting this criterion.
   */
  exclude?: boolean | undefined;
  _exclude?: Element | undefined;
  /**
   * Number of occurrences meeting the characteristic.
   */
  instancesQuantity?: Quantity | undefined;
  /**
   * Number of occurrences meeting the characteristic.
   */
  instancesRange?: Range | undefined;
  /**
   * Label used for when a characteristic refers to another characteristic.
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * A human-readable string to clarify or explain concepts about the characteristic.
   */
  note?: Annotation[] | undefined;
  /**
   * Timing in which the characteristic is determined.
   */
  timeFromEvent?: EvidenceVariableCharacteristicTimeFromEvent[] | undefined;
}
/**
 * The EvidenceVariable may be an exposure variable (intervention, condition, or state), a measured variable (outcome or observed parameter), or other variable (such as confounding factor).
 */
export interface EvidenceVariable extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EvidenceVariable';
  /**
   * True if the actual variable measured, false if a conceptual representation of the intended variable.
   */
  actual?: boolean | undefined;
  _actual?: Element | undefined;
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   */
  author?: ContactDetail[] | undefined;
  /**
   * A grouping for ordinal or polychotomous variables.
   */
  category?: EvidenceVariableCategory[] | undefined;
  /**
   * A defining factor of the EvidenceVariable. Multiple characteristics are applied with "and" semantics.
   * Characteristics can be defined flexibly to accommodate different use cases for membership criteria, ranging from simple codes, all the way to using an expression language to express the criteria.
   */
  characteristic?: EvidenceVariableCharacteristic[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the resource and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the resource.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the evidence variable was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the evidence variable changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the evidence variable. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the evidence variable from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the evidence variable as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the evidence variable is presumed to be the predominant language in the place the evidence variable was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   */
  editor?: ContactDetail[] | undefined;
  /**
   * The period during which the resource content was or is planned to be in active use.
   * The effective period for an EvidenceVariable determines when the content is applicable for usage and is independent of publication and review dates. For example, a variable intended to be used for the year 2016 might be published in 2015.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * A Boolean value to indicate that this resource is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * The method of handling in statistical analysis.
   */
  handling?: ('continuous'|'dichotomous'|'ordinal'|'polychotomous') | undefined;
  _handling?: Element | undefined;
  /**
   * A formal identifier that is used to identify this evidence variable when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this evidence variable outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the evidence variable. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A human-readable string to clarify or explain concepts about the resource.
   */
  note?: Annotation[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the evidence variable.
   * Usually an organization but may be an individual. The publisher (or steward) of the evidence variable is the organization or individual primarily responsible for the maintenance and upkeep of the evidence variable. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the evidence variable. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this EvidenceVariable is needed and why it has been designed as it has.
   * This element does not describe the usage of the EvidenceVariable. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is. This may be used to point to source materials or specifications that drove the structure of this EvidenceVariable.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Related artifacts such as additional documentation, justification, or bibliographic references.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
   * Extensions to ContactDetail include: contactReference, contactAddress, and contributionTime (see [Clinical Reasoning Module](clinicalreasoning-module.html)).
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
   */
  shortTitle?: string | undefined;
  _shortTitle?: Element | undefined;
  /**
   * The status of this evidence variable. Enables tracking the life-cycle of the content.
   * Allows filtering of evidence variables that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the evidence variable.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this evidence variable when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this evidence variable is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the evidence variable is stored on different servers.
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the meta.source element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence variable instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the evidence variable when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the evidence variable author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
   * There may be different evidence variable instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the evidence variable with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 is newer, and a 0 if the version ordering can't successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 is newer, and a 0 if the version ordering can't successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Individual involved in exchange
 */
export interface ExampleScenarioActor extends BackboneElement {
  /**
   * An explanation of who/what the actor is and its role in the scenario.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A unique string within the scenario that is used to reference the actor.
   */
  key: string;
  _key?: Element | undefined;
  /**
   * The human-readable name for the actor used when rendering the scenario.
   */
  title: string;
  _title?: Element | undefined;
  /**
   * The category of actor - person or system.
   */
  type: ('person'|'system');
  _type?: Element | undefined;
}
/**
 * Resources contained in the instance
 */
export interface ExampleScenarioInstanceContainedInstance extends BackboneElement {
  /**
   * A reference to the key of an instance found within this one.
   */
  instanceReference: string;
  _instanceReference?: Element | undefined;
  /**
   * A reference to the key of a specific version of an instance in this instance.
   * Required if the referenced instance has versions
   */
  versionReference?: string | undefined;
  _versionReference?: Element | undefined;
}
/**
 * Snapshot of instance that changes
 * Not used if an instance doesn't change
 */
export interface ExampleScenarioInstanceVersion extends BackboneElement {
  /**
   * Points to an instance (typically an example) that shows the data that would flow at this point in the scenario.
   * If not conveying FHIR data or not using the same version of FHIR as this ExampleScenario instance, the reference must be to a Binary.
   */
  content?: Reference | undefined;
  /**
   * An explanation of what this specific version of the instance contains and represents.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A unique string within the instance that is used to reference the version of the instance.
   */
  key: string;
  _key?: Element | undefined;
  /**
   * A short descriptive label the version to be used in tables or diagrams.
   */
  title: string;
  _title?: Element | undefined;
}
/**
 * Data used in the scenario
 */
export interface ExampleScenarioInstance extends BackboneElement {
  /**
   * References to other instances that can be found within this instance (e.g. the observations contained in a bundle).
   */
  containedInstance?: ExampleScenarioInstanceContainedInstance[] | undefined;
  /**
   * Points to an instance (typically an example) that shows the data that would corespond to this instance.
   * If not conveying FHIR data or not using the same version of FHIR as this ExampleScenario instance, the reference must be to a Binary.
   */
  content?: Reference | undefined;
  /**
   * An explanation of what the instance contains and what it's for.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A unique string within the scenario that is used to reference the instance.
   */
  key: string;
  _key?: Element | undefined;
  /**
   * Refers to a profile, template or other ruleset the instance adheres to.
   */
  structureProfilestring?: string | undefined;
  _structureProfilestring?: Element | undefined;
  /**
   * A code indicating the kind of data structure (FHIR resource or some other standard) this is an instance of.
   */
  structureType: Coding;
  /**
   * Conveys the version of the data structure instantiated.  I.e. what release of FHIR, X12, OpenEHR, etc. is instance compliant with.
   */
  structureVersion?: string | undefined;
  _structureVersion?: Element | undefined;
  /**
   * A short descriptive label the instance to be used in tables or diagrams.
   */
  title: string;
  _title?: Element | undefined;
  /**
   * Represents the instance as it was at a specific time-point.
   * Not used if an instance doesn't change
   */
  version?: ExampleScenarioInstanceVersion[] | undefined;
}
/**
 * Alternate non-typical step action
 */
export interface ExampleScenarioProcessStepAlternative extends BackboneElement {
  /**
   * A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Indicates the operation, sub-process or scenario that happens if the alternative option is selected.
   */
  step?: ExampleScenarioProcessStep[] | undefined;
  /**
   * The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
   */
  title: string;
  _title?: Element | undefined;
}
/**
 * Step is simple action
 */
export interface ExampleScenarioProcessStepOperation extends BackboneElement {
  /**
   * An explanation of what the operation represents and what it does.
   * This should contain information not already present in the process step.  It's more of a description of what the operation in general does - if not already evident from the operation.type
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The system that invokes the action/transmits the data.
   * This must either be the 'key' of one of the actors defined in this scenario or the special keyword 'OTHER' if the initiator is not one of the actors defined for the scenario.  (Multiple references to 'OTHER' don't necessarily indicate the same actor.)
   */
  initiator?: string | undefined;
  _initiator?: Element | undefined;
  /**
   * If false, the initiator is deactivated right after the operation.
   * De-activation of an actor means they have no further role until such time as they are the recipient of an operation.
   */
  initiatorActive?: boolean | undefined;
  _initiatorActive?: Element | undefined;
  /**
   * The system on which the action is invoked/receives the data.
   * This must either be the 'key' of one of the actors defined in this scenario or the special keyword 'OTHER' if the receiver is not one of the actors defined for the scenario.  (Multiple references to 'OTHER' don't necessarily indicate the same actor.)  In some cases, receiver could be same as sender if representing a local operation
   */
  receiver?: string | undefined;
  _receiver?: Element | undefined;
  /**
   * If false, the receiver is deactivated right after the operation.
   * De-activation of an actor means they have no further role until such time as they are the recipient of an operation.
   */
  receiverActive?: boolean | undefined;
  _receiverActive?: Element | undefined;
  /**
   * A reference to the instance that is transmitted from requester to receiver as part of the invocation of the operation.
   */
  request?: ExampleScenarioInstanceContainedInstance | undefined;
  /**
   * A reference to the instance that is transmitted from receiver to requester as part of the operation's synchronous response (if any).
   */
  response?: ExampleScenarioInstanceContainedInstance | undefined;
  /**
   * A short descriptive label the step to be used in tables or diagrams.
   */
  title: string;
  _title?: Element | undefined;
  /**
   * The standardized type of action (FHIR or otherwise).
   */
  type?: Coding | undefined;
}
/**
 * Event within of the process
 */
export interface ExampleScenarioProcessStep extends BackboneElement {
  /**
   * Indicates an alternative step that can be taken instead of the sub-process, scenario or operation.  E.g. to represent non-happy-path/exceptional/atypical circumstances.
   */
  alternative?: ExampleScenarioProcessStepAlternative[] | undefined;
  /**
   * The sequential number of the step, e.g. 1.2.5.
   * If step numbers are simultaneous, they will be the same.  Numbers don't have to be numeric.  E.g. '2c)' is a valid step number
   */
  number?: string | undefined;
  _number?: Element | undefined;
  /**
   * The step represents a single operation invoked on receiver by sender.
   */
  operation?: ExampleScenarioProcessStepOperation | undefined;
  /**
   * If true, indicates that, following this step, there is a pause in the flow and the subsequent step will occur at some later time (triggered by some event).
   */
  pause?: boolean | undefined;
  _pause?: Element | undefined;
  /**
   * Indicates that the step is a complex sub-process with its own steps.
   */
  process?: ExampleScenarioProcess | undefined;
  /**
   * Indicates that the step is defined by a seaparate scenario instance.
   */
  workflow?: string | undefined;
  _workflow?: Element | undefined;
}
/**
 * Major process within scenario
 * Some scenarios might describe only one process.
 */
export interface ExampleScenarioProcess extends BackboneElement {
  /**
   * An explanation of what the process represents and what it does.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Description of the final state of the actors, environment and data after the process has been successfully completed.
   * Alternate steps might not result in all post conditions holding
   */
  postConditions?: string | undefined;
  _postConditions?: Element | undefined;
  /**
   * Description of the initial state of the actors, environment and data before the process starts.
   */
  preConditions?: string | undefined;
  _preConditions?: Element | undefined;
  /**
   * A significant action that occurs as part of the process.
   */
  step?: ExampleScenarioProcessStep[] | undefined;
  /**
   * A short descriptive label the process to be used in tables or diagrams.
   */
  title: string;
  _title?: Element | undefined;
}
export interface ExampleScenario extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ExampleScenario';
  /**
   * A system or person who shares or receives an instance within the scenario.
   */
  actor?: ExampleScenarioActor[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the example scenario and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the example scenario.
   * ...
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the example scenario was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the example scenario changes. (e.g. the 'content logical definition').
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the example scenario. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the ExampleScenario from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse. It is not a rendering of the ExampleScenario as conveyed in the 'text' field of the resource itself.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A Boolean value to indicate that this example scenario is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of example scenarios that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this example scenario when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this example scenario outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A single data collection that is shared as part of the scenario.
   */
  instance?: ExampleScenarioInstance[] | undefined;
  /**
   * A legal or geographic region in which the example scenario is intended to be used.
   * It may be possible for the example scenario to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * Temporarily retained for tooling purposes.
   * Not needed as code will never be generated from one of these
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A group of operations that represents a significant step within a scenario.
   * Some scenarios might describe only one process.
   */
  process?: ExampleScenarioProcess[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the example scenario.
   * Usually an organization but may be an individual. The publisher (or steward) of the example scenario is the organization or individual primarily responsible for the maintenance and upkeep of the example scenario. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the example scenario. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * What the example scenario resource is created for. This should not be used to show the business purpose of the scenario itself, but the purpose of documenting a scenario.
   * This element does not describe the usage of the example scenario. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this example scenario.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The status of this example scenario. Enables tracking the life-cycle of the content.
   * Allows filtering of example scenarios that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the ExampleScenario.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this example scenario when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this example scenario is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the example scenario is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate example scenario instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the example scenario when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the example scenario author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different example scenario instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the example scenario with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Details of the event
 */
export interface ExplanationOfBenefitAccident extends BackboneElement {
  /**
   * Date of an accident event  related to the products and services contained in the claim.
   * The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The physical location of the accident event.
   */
  locationAddress?: Address | undefined;
  /**
   * The physical location of the accident event.
   */
  locationReference?: Reference | undefined;
  /**
   * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Anatomical location
 */
export interface ExplanationOfBenefitAddItemBodySite extends BackboneElement {
  /**
   * Physical service site on the patient (limb, tooth, etc.).
   * For example, providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  site: CodeableReference[];
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  subSite?: CodeableConcept[] | undefined;
}
/**
 * Insurer added line items
 */
export interface ExplanationOfBenefitAddItemDetailSubDetail extends BackboneElement {
  /**
   * The adjudication results.
   */
  adjudication?: ExplanationOfBenefitItemAdjudication[] | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The total amount claimed for the addItem.detail.subDetail. Net = unit price * quantity * factor.
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[] | undefined;
  /**
   * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
   */
  patientPaid?: Money | undefined;
  /**
   * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
   */
  productOrServiceEnd?: CodeableConcept | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * The high-level results of the adjudication if adjudication has been performed.
   */
  reviewOutcome?: ExplanationOfBenefitItemReviewOutcome | undefined;
  /**
   * The total of taxes applicable for this product or service.
   */
  tax?: Money | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Insurer added line items
 */
export interface ExplanationOfBenefitAddItemDetail extends BackboneElement {
  /**
   * The adjudication results.
   */
  adjudication?: ExplanationOfBenefitItemAdjudication[] | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The total amount claimed for the group (if a grouper) or the addItem.detail. Net = unit price * quantity * factor.
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[] | undefined;
  /**
   * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
   */
  patientPaid?: Money | undefined;
  /**
   * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
   */
  productOrServiceEnd?: CodeableConcept | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * The high-level results of the adjudication if adjudication has been performed.
   */
  reviewOutcome?: ExplanationOfBenefitItemReviewOutcome | undefined;
  /**
   * The third-tier service adjudications for payor added services.
   */
  addedItemDetailSubDetail?: ExplanationOfBenefitAddItemDetailSubDetail[] | undefined;
  /**
   * The total of taxes applicable for this product or service.
   */
  tax?: Money | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Insurer added line items
 */
export interface ExplanationOfBenefitAddItem extends BackboneElement {
  /**
   * The adjudication results.
   */
  adjudication?: ExplanationOfBenefitItemAdjudication[] | undefined;
  /**
   * Physical location where the service is performed or applies.
   */
  addedItemBodySite?: ExplanationOfBenefitAddItemBodySite[] | undefined;
  /**
   * The second-tier service adjudications for payor added services.
   */
  addedItemDetail?: ExplanationOfBenefitAddItemDetail[] | undefined;
  /**
   * The sequence number of the details within the claim item which this line is intended to replace.
   */
  detailSequence?: number[] | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number | undefined;
  /**
   * Claim items which this service line is intended to replace.
   */
  itemSequence?: number[] | undefined;
  /**
   * Where the product or service was provided.
   */
  locationAddress?: Address | undefined;
  /**
   * Where the product or service was provided.
   */
  locationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Where the product or service was provided.
   */
  locationReference?: Reference | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The total amount claimed for the group (if a grouper) or the addItem. Net = unit price * quantity * factor.
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[] | undefined;
  /**
   * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
   */
  patientPaid?: Money | undefined;
  /**
   * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
   */
  productOrServiceEnd?: CodeableConcept | undefined;
  /**
   * Identifies the program under which this may be recovered.
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The providers who are authorized for the services rendered to the patient.
   */
  provider?: Reference[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * Request or Referral for Goods or Service to be rendered.
   */
  request?: Reference[] | undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * The high-level results of the adjudication if adjudication has been performed.
   */
  reviewOutcome?: ExplanationOfBenefitItemReviewOutcome | undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedstring?: string | undefined;
  _servicedstring?: Element | undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedPeriod?: Period | undefined;
  /**
   * The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.
   */
  subDetailSequence?: number[] | undefined;
  /**
   * The total of taxes applicable for this product or service.
   */
  tax?: Money | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Benefit Summary
 */
export interface ExplanationOfBenefitBenefitBalanceFinancial extends BackboneElement {
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowedMoney?: Money | undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowedstring?: string | undefined;
  _allowedstring?: Element | undefined;
  /**
   * The quantity of the benefit which is permitted under the coverage.
   */
  allowednumber?: number | undefined;
  /**
   * Classification of benefit being provided.
   * For example: deductible, visits, benefit amount.
   */
  type: CodeableConcept;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  usedMoney?: Money | undefined;
  /**
   * The quantity of the benefit which have been consumed to date.
   */
  usednumber?: number | undefined;
}
/**
 * Balance by Benefit Category
 */
export interface ExplanationOfBenefitBenefitBalance extends BackboneElement {
  /**
   * Code to identify the general type of benefits under which products and services are provided.
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category: CodeableConcept;
  /**
   * A richer description of the benefit or services covered.
   * For example, 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
   */
  excluded?: boolean | undefined;
  _excluded?: Element | undefined;
  /**
   * Benefits Used to date.
   */
  benefit?: ExplanationOfBenefitBenefitBalanceFinancial[] | undefined;
  /**
   * A short name or tag for the benefit.
   * For example: MED01, or DENT2.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
   */
  network?: CodeableConcept | undefined;
  /**
   * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
   */
  term?: CodeableConcept | undefined;
  /**
   * Indicates if the benefits apply to an individual or to the family.
   */
  unit?: CodeableConcept | undefined;
}
/**
 * Care Team members
 */
export interface ExplanationOfBenefitCareTeam extends BackboneElement {
  /**
   * Member of the team who provided the product or service.
   */
  provider: Reference;
  /**
   * The party who is billing and/or responsible for the claimed products or services.
   * Responsible might not be required when there is only a single provider listed.
   */
  responsible?: boolean | undefined;
  _responsible?: Element | undefined;
  /**
   * The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.
   * Role might not be required when there is only a single provider listed.
   */
  role?: CodeableConcept | undefined;
  /**
   * A number to uniquely identify care team entries.
   */
  sequence: number;
  /**
   * The specialization of the practitioner or provider which is applicable for this service.
   */
  specialty?: CodeableConcept | undefined;
}
/**
 * Pertinent diagnosis information
 */
export interface ExplanationOfBenefitDiagnosis extends BackboneElement {
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisCodeableConcept?: CodeableConcept | undefined;
  /**
   * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
   */
  diagnosisReference?: Reference | undefined;
  /**
   * Indication of whether the diagnosis was present on admission to a facility.
   */
  onAdmission?: CodeableConcept | undefined;
  /**
   * A number to uniquely identify diagnosis entries.
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  sequence: number;
  /**
   * When the condition was observed or the relative ranking.
   * For example: admitting, primary, secondary, discharge.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Event information
 */
export interface ExplanationOfBenefitEvent extends BackboneElement {
  /**
   * A coded event such as when a service is expected or a card printed.
   */
  type: CodeableConcept;
  /**
   * A date or period in the past or future indicating when the event occurred or is expectd to occur.
   */
  whenstring?: string | undefined;
  _whenstring?: Element | undefined;
  /**
   * A date or period in the past or future indicating when the event occurred or is expectd to occur.
   */
  whenPeriod?: Period | undefined;
}
/**
 * Patient insurance information
 * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
 */
export interface ExplanationOfBenefitInsurance extends BackboneElement {
  /**
   * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
   */
  coverage: Reference;
  /**
   * A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
   * A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example, a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
   */
  focal: boolean;
  _focal?: Element | undefined;
  /**
   * Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.
   * This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
   */
  preAuthRef?: string[] | undefined;
  _preAuthRef?: Element[] | undefined;
}
/**
 * Adjudication details
 */
export interface ExplanationOfBenefitItemAdjudication extends BackboneElement {
  /**
   * Monetary amount associated with the category.
   * For example, amount submitted, eligible amount, co-payment, and benefit payable.
   */
  amount?: Money | undefined;
  /**
   * A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in-aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
   * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  category: CodeableConcept;
  /**
   * A non-monetary value associated with the category. Mutually exclusive to the amount element above.
   * For example: eligible percentage or co-payment percentage.
   */
  quantity?: Quantity | undefined;
  /**
   * A code supporting the understanding of the adjudication result and explaining variance from expected amount.
   * For example, may indicate that the funds for this benefit type have been exhausted.
   */
  reason?: CodeableConcept | undefined;
}
/**
 * Anatomical location
 */
export interface ExplanationOfBenefitItemBodySite extends BackboneElement {
  /**
   * Physical service site on the patient (limb, tooth, etc.).
   * For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
   */
  site: CodeableReference[];
  /**
   * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
   */
  subSite?: CodeableConcept[] | undefined;
}
/**
 * Additional items
 */
export interface ExplanationOfBenefitItemDetailSubDetail extends BackboneElement {
  /**
   * The adjudication results.
   */
  adjudication?: ExplanationOfBenefitItemAdjudication[] | undefined;
  /**
   * Code to identify the general type of benefits under which products and services are provided.
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: CodeableConcept | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The total amount claimed for the line item.detail.subDetail. Net = unit price * quantity * factor.
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[] | undefined;
  /**
   * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
   */
  patientPaid?: Money | undefined;
  /**
   * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
   */
  productOrServiceEnd?: CodeableConcept | undefined;
  /**
   * Identifies the program under which this may be recovered.
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * The high-level results of the adjudication if adjudication has been performed.
   */
  reviewOutcome?: ExplanationOfBenefitItemReviewOutcome | undefined;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  sequence: number;
  /**
   * The total of taxes applicable for this product or service.
   */
  tax?: Money | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Additional items
 */
export interface ExplanationOfBenefitItemDetail extends BackboneElement {
  /**
   * The adjudication results.
   */
  adjudication?: ExplanationOfBenefitItemAdjudication[] | undefined;
  /**
   * Code to identify the general type of benefits under which products and services are provided.
   * Examples include: Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: CodeableConcept | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The total amount claimed for the group (if a grouper) or the line item.detail. Net = unit price * quantity * factor.
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[] | undefined;
  /**
   * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
   */
  patientPaid?: Money | undefined;
  /**
   * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
   */
  productOrServiceEnd?: CodeableConcept | undefined;
  /**
   * Identifies the program under which this may be recovered.
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * The high-level results of the adjudication if adjudication has been performed.
   */
  reviewOutcome?: ExplanationOfBenefitItemReviewOutcome | undefined;
  /**
   * A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
   */
  sequence: number;
  /**
   * Third-tier of goods and services.
   */
  subDetail?: ExplanationOfBenefitItemDetailSubDetail[] | undefined;
  /**
   * The total of taxes applicable for this product or service.
   */
  tax?: Money | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Adjudication results
 */
export interface ExplanationOfBenefitItemReviewOutcome extends BackboneElement {
  /**
   * The result of the claim, predetermination, or preauthorization adjudication.
   * The element is used to indicate the current state of the adjudication overall for the claim resource, for example: the request has been held (pended) for adjudication processing, for manual review or other reasons; that it has been processed and will be paid, or the outstanding paid, as submitted (approved); that no amount will be paid (denied); or that some amount between zero and the submitted amount will be paid (partial).
   */
  decision?: CodeableConcept | undefined;
  /**
   * The time frame during which this authorization is effective.
   */
  preAuthPeriod?: Period | undefined;
  /**
   * Reference from the Insurer which is used in later communications which refers to this adjudication.
   * This value is only present on preauthorization adjudications.
   */
  preAuthRef?: string | undefined;
  _preAuthRef?: Element | undefined;
  /**
   * The reasons for the result of the claim, predetermination, or preauthorization adjudication.
   */
  reason?: CodeableConcept[] | undefined;
}
/**
 * Product or service provided
 */
export interface ExplanationOfBenefitItem extends BackboneElement {
  /**
   * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
   */
  adjudication?: ExplanationOfBenefitItemAdjudication[] | undefined;
  /**
   * Physical location where the service is performed or applies.
   */
  itemBodySite?: ExplanationOfBenefitItemBodySite[] | undefined;
  /**
   * Care team members related to this service or product.
   */
  careTeamSequence?: number[] | undefined;
  /**
   * Code to identify the general type of benefits under which products and services are provided.
   * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
   */
  category?: CodeableConcept | undefined;
  /**
   * Second-tier of goods and services.
   */
  detail?: ExplanationOfBenefitItemDetail[] | undefined;
  /**
   * Diagnoses applicable for this service or product.
   */
  diagnosisSequence?: number[] | undefined;
  /**
   * Healthcare encounters related to this claim.
   */
  encounter?: Reference[] | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
   */
  factor?: number | undefined;
  /**
   * Exceptions, special conditions and supporting information applicable for this service or product.
   */
  informationSequence?: number[] | undefined;
  /**
   * Where the product or service was provided.
   */
  locationAddress?: Address | undefined;
  /**
   * Where the product or service was provided.
   */
  locationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Where the product or service was provided.
   */
  locationReference?: Reference | undefined;
  /**
   * Item typification or modifiers codes to convey additional context for the product or service.
   * For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The total amount claimed for the group (if a grouper) or the line item. Net = unit price * quantity * factor.
   * For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * The numbers associated with notes below which apply to the adjudication of this item.
   */
  noteNumber?: number[] | undefined;
  /**
   * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
   */
  patientPaid?: Money | undefined;
  /**
   * Procedures applicable for this service or product.
   */
  procedureSequence?: number[] | undefined;
  /**
   * When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.
   * If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
   */
  productOrService?: CodeableConcept | undefined;
  /**
   * This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.
   */
  productOrServiceEnd?: CodeableConcept | undefined;
  /**
   * Identifies the program under which this may be recovered.
   * For example: Neonatal program, child dental program or drug users recovery program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * Request or Referral for Goods or Service to be rendered.
   */
  request?: Reference[] | undefined;
  /**
   * The type of revenue or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * The high-level results of the adjudication if adjudication has been performed.
   */
  reviewOutcome?: ExplanationOfBenefitItemReviewOutcome | undefined;
  /**
   * A number to uniquely identify item entries.
   */
  sequence: number;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedstring?: string | undefined;
  _servicedstring?: Element | undefined;
  /**
   * The date or dates when the service or product was supplied, performed or completed.
   */
  servicedPeriod?: Period | undefined;
  /**
   * The total of taxes applicable for this product or service.
   */
  tax?: Money | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
  /**
   * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Recipient of benefits payable
 * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
 */
export interface ExplanationOfBenefitPayee extends BackboneElement {
  /**
   * Reference to the individual or organization to whom any payment will be made.
   * Not required if the payee is 'subscriber' or 'provider'.
   */
  party?: Reference | undefined;
  /**
   * Type of Party to be reimbursed: Subscriber, provider, other.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Payment Details
 */
export interface ExplanationOfBenefitPayment extends BackboneElement {
  /**
   * Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
   * Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
   */
  adjustment?: Money | undefined;
  /**
   * Reason for the payment adjustment.
   */
  adjustmentReason?: CodeableConcept | undefined;
  /**
   * Benefits payable less any payment adjustment.
   */
  amount?: Money | undefined;
  /**
   * Estimated date the payment will be issued or the actual issue date of payment.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Issuer's unique identifier for the payment instrument.
   * For example: EFT number or check number.
   */
  identifier?: Identifier | undefined;
  /**
   * Whether this represents partial or complete payment of the benefits payable.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Clinical procedures performed
 */
export interface ExplanationOfBenefitProcedure extends BackboneElement {
  /**
   * Date and optionally time the procedure was performed.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureCodeableConcept?: CodeableConcept | undefined;
  /**
   * The code or reference to a Procedure resource which identifies the clinical intervention performed.
   */
  procedureReference?: Reference | undefined;
  /**
   * A number to uniquely identify procedure entries.
   */
  sequence: number;
  /**
   * When the condition was observed or the relative ranking.
   */
  type?: CodeableConcept[] | undefined;
  /**
   * Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
}
/**
 * Note concerning adjudication
 */
export interface ExplanationOfBenefitProcessNote extends BackboneElement {
  /**
   * A code to define the language used in the text of the note.
   * Only required if the language is different from the resource language.
   */
  language?: CodeableConcept | undefined;
  /**
   * A number to uniquely identify a note entry.
   */
  number?: number | undefined;
  /**
   * The explanation or description associated with the processing.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The business purpose of the note text.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Prior or corollary claims
 * For example,  for the original treatment and follow-up exams.
 */
export interface ExplanationOfBenefitRelated extends BackboneElement {
  /**
   * Reference to a related claim.
   */
  claim?: Reference | undefined;
  /**
   * An alternate organizational reference to the case or file to which this particular claim pertains.
   * For example, Property/Casualty insurer claim number or Workers Compensation case number.
   */
  reference?: Identifier | undefined;
  /**
   * A code to convey how the claims are related.
   * For example, prior claim or umbrella.
   */
  relationship?: CodeableConcept | undefined;
}
/**
 * Supporting information
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
export interface ExplanationOfBenefitSupportingInfo extends BackboneElement {
  /**
   * The general class of the information supplied: information; exception; accident, employment; onset, etc.
   * This may contain a category for the local bill type codes.
   */
  category: CodeableConcept;
  /**
   * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  code?: CodeableConcept | undefined;
  /**
   * Provides the reason in the situation where a reason code is required in addition to the content.
   * For example: the reason for the additional stay, or why a tooth is  missing.
   */
  reason?: Coding | undefined;
  /**
   * A number to uniquely identify supporting information entries.
   */
  sequence: number;
  /**
   * The date when or period to which this information refers.
   */
  timingstring?: string | undefined;
  _timingstring?: Element | undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingPeriod?: Period | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valueReference?: Reference | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   * Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
}
/**
 * Adjudication totals
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
export interface ExplanationOfBenefitTotal extends BackboneElement {
  /**
   * Monetary total amount associated with the category.
   */
  amount: Money;
  /**
   * A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
   * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  category: CodeableConcept;
}
export interface ExplanationOfBenefit extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ExplanationOfBenefit';
  /**
   * Details of a accident which resulted in injuries which required the products and services listed in the claim.
   */
  accident?: ExplanationOfBenefitAccident | undefined;
  /**
   * The first-tier service adjudications for payor added product or service lines.
   */
  addedItem?: ExplanationOfBenefitAddItem[] | undefined;
  /**
   * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
   */
  adjudication?: ExplanationOfBenefitItemAdjudication[] | undefined;
  /**
   * Balance by Benefit Category.
   */
  benefitBalance?: ExplanationOfBenefitBenefitBalance[] | undefined;
  /**
   * The term of the benefits documented in this response.
   * Not applicable when use=claim.
   */
  benefitPeriod?: Period | undefined;
  /**
   * The period for which charges are being submitted.
   * Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and prodeterminations. Typically line item dates of service should fall within the billing period if one is specified.
   */
  billablePeriod?: Period | undefined;
  /**
   * The members of the team who provided the products and services.
   */
  careTeam?: ExplanationOfBenefitCareTeam[] | undefined;
  /**
   * The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.
   */
  claim?: Reference | undefined;
  /**
   * The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.
   */
  claimResponse?: Reference | undefined;
  /**
   * The date this resource was created.
   */
  created: string;
  _created?: Element | undefined;
  /**
   * The result of the claim, predetermination, or preauthorization adjudication.
   * The element is used to indicate the current state of the adjudication overall for the claim resource, for example: the request has been held (pended) for adjudication processing, for manual review or other reasons; that it has been processed and will be paid, or the outstanding paid, as submitted (approved); that no amount will be paid (denied); or that some amount between zero and the submitted amoutn will be paid (partial).
   */
  decision?: CodeableConcept | undefined;
  /**
   * Information about diagnoses relevant to the claim items.
   */
  diagnosis?: ExplanationOfBenefitDiagnosis[] | undefined;
  /**
   * A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
   * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
   */
  diagnosisRelatedGroup?: CodeableConcept | undefined;
  /**
   * A human readable description of the status of the adjudication.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * Healthcare encounters related to this claim.
   */
  encounter?: Reference[] | undefined;
  /**
   * Individual who created the claim, predetermination or preauthorization.
   */
  enterer?: Reference | undefined;
  /**
   * Information code for an event with a corresponding date or period.
   */
  event?: ExplanationOfBenefitEvent[] | undefined;
  /**
   * Facility where the services were provided.
   */
  facility?: Reference | undefined;
  /**
   * The actual form, by reference or inclusion, for printing the content or an EOB.
   * Needed to permit insurers to include the actual form.
   */
  form?: Attachment | undefined;
  /**
   * A code for the form to be used for printing the content.
   * May be needed to identify specific jurisdictional forms.
   */
  formCode?: CodeableConcept | undefined;
  /**
   * A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
   * Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
   */
  fundsReserve?: CodeableConcept | undefined;
  /**
   * A code to indicate whether and for whom funds are to be reserved for future claims.
   * This field is only used for preauthorizations.
   */
  fundsReserveRequested?: CodeableConcept | undefined;
  /**
   * A unique identifier assigned to this explanation of benefit.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Financial instruments for reimbursement for the health care products and services specified on the claim.
   * All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
   */
  insurance?: ExplanationOfBenefitInsurance[] | undefined;
  /**
   * The party responsible for authorization, adjudication and reimbursement.
   */
  insurer?: Reference | undefined;
  /**
   * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
   */
  item?: ExplanationOfBenefitItem[] | undefined;
  /**
   * Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
   * For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   */
  originalPrescription?: Reference | undefined;
  /**
   * The outcome of the claim, predetermination, or preauthorization processing.
   * The resource may be used to indicate that the Claim/Preauthorization/Pre-determination has been received but processing has not begun (queued); that it has been processed and one or more errors have been detected (error); no errors were detected and some of the adjudication processing has been performed (partial); or all of the adjudication processing has completed without errors (complete).
   */
  outcome: ('queued'|'complete'|'error'|'partial');
  _outcome?: Element | undefined;
  /**
   * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.
   */
  patient: Reference;
  /**
   * The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.
   */
  patientPaid?: Money | undefined;
  /**
   * The party to be reimbursed for cost of the products and services according to the terms of the policy.
   * Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
   */
  payee?: ExplanationOfBenefitPayee | undefined;
  /**
   * Payment details for the adjudication of the claim.
   */
  payment?: ExplanationOfBenefitPayment | undefined;
  /**
   * Reference from the Insurer which is used in later communications which refers to this adjudication.
   * This value is only present on preauthorization adjudications.
   */
  preAuthRef?: string[] | undefined;
  _preAuthRef?: Element[] | undefined;
  /**
   * The timeframe during which the supplied preauthorization reference may be quoted on claims to obtain the adjudication as provided.
   * This value is only present on preauthorization adjudications.
   */
  preAuthRefPeriod?: Period[] | undefined;
  /**
   * This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.
   */
  precedence?: number | undefined;
  /**
   * Prescription is the document/authorization given to the claim author for them to provide products and services for which consideration (reimbursement) is sought. Could be a RX for medications, an 'order' for oxygen or wheelchair or physiotherapy treatments.
   */
  prescription?: Reference | undefined;
  /**
   * The provider-required urgency of processing the request. Typical values include: stat, normal deferred.
   * If a claim processor is unable to complete the processing as per the priority then they should generate an error and not process the request.
   */
  priority?: CodeableConcept | undefined;
  /**
   * Procedures performed on the patient relevant to the billing items with the claim.
   */
  procedure?: ExplanationOfBenefitProcedure[] | undefined;
  /**
   * A note that describes or explains adjudication results in a human readable form.
   */
  note?: ExplanationOfBenefitProcessNote[] | undefined;
  /**
   * The provider which is responsible for the claim, predetermination or preauthorization.
   * Typically this field would be 1..1 where this party is accountable for the data content within the claim but is not necessarily the facility, provider group or practitioner who provided the products and services listed within this claim resource. This field is the Billing Provider, for example, a facility, provider group, lab or practitioner.
   */
  provider?: Reference | undefined;
  /**
   * The referral information received by the claim author, it is not to be used when the author generates a referral for a patient. A copy of that referral may be provided as supporting information. Some insurers require proof of referral to pay for services or to pay specialist rates for services.
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  referral?: Reference | undefined;
  /**
   * Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
   * For example,  for the original treatment and follow-up exams.
   */
  relatedClaim?: ExplanationOfBenefitRelated[] | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('active'|'cancelled'|'draft'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  subType?: CodeableConcept | undefined;
  /**
   * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
   * Often there are multiple jurisdiction specific valuesets which are required.
   */
  supportingInformation?: ExplanationOfBenefitSupportingInfo[] | undefined;
  /**
   * Categorized monetary totals for the adjudication.
   * Totals for amounts submitted, co-pays, benefits payable etc.
   */
  total?: ExplanationOfBenefitTotal[] | undefined;
  /**
   * Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.
   */
  traceNumber?: Identifier[] | undefined;
  /**
   * The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
   * The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
   */
  type: CodeableConcept;
  /**
   * A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.
   */
  use: ('claim'|'preauthorization'|'predetermination');
  _use?: Element | undefined;
}
/**
 * Condition that the related person had
 */
export interface FamilyMemberHistoryCondition extends BackboneElement {
  /**
   * The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
   */
  code: CodeableConcept;
  /**
   * This condition contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.
   */
  contributedToDeath?: boolean | undefined;
  _contributedToDeath?: Element | undefined;
  /**
   * An area where general notes can be placed about this specific condition.
   */
  note?: Annotation[] | undefined;
  /**
   * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
   */
  onsetAge?: Age | undefined;
  /**
   * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
   */
  onsetPeriod?: Period | undefined;
  /**
   * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
   */
  onsetRange?: Range | undefined;
  /**
   * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
   */
  onsetstring?: string | undefined;
  _onsetstring?: Element | undefined;
  /**
   * Indicates what happened following the condition.  If the condition resulted in death, deceased date is captured on the relation.
   */
  outcome?: CodeableConcept | undefined;
}
/**
 * Who or what participated in the activities related to the family member history and how they were involved
 */
export interface FamilyMemberHistoryParticipant extends BackboneElement {
  /**
   * Indicates who or what participated in the activities related to the family member history.
   */
  actor: Reference;
  /**
   * Distinguishes the type of involvement of the actor in the activities related to the family member history.
   */
  function?: CodeableConcept | undefined;
}
/**
 * Procedures that the related person had
 */
export interface FamilyMemberHistoryProcedure extends BackboneElement {
  /**
   * The actual procedure specified. Could be a coded procedure or a less specific string depending on how much is known about the procedure and the capabilities of the creating system.
   */
  code: CodeableConcept;
  /**
   * This procedure contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.
   */
  contributedToDeath?: boolean | undefined;
  _contributedToDeath?: Element | undefined;
  /**
   * An area where general notes can be placed about this specific procedure.
   */
  note?: Annotation[] | undefined;
  /**
   * Indicates what happened following the procedure. If the procedure resulted in death, deceased date is captured on the relation.
   */
  outcome?: CodeableConcept | undefined;
  /**
   * Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   */
  performedAge?: Age | undefined;
  /**
   * Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   */
  performedstring?: string | undefined;
  _performedstring?: Element | undefined;
  /**
   * Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   */
  performedPeriod?: Period | undefined;
  /**
   * Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   */
  performedRange?: Range | undefined;
}
export interface FamilyMemberHistory extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'FamilyMemberHistory';
  /**
   * The age of the relative at the time the family member history is recorded.
   * use estimatedAge to indicate whether the age is actual or not.
   */
  ageAge?: Age | undefined;
  /**
   * The age of the relative at the time the family member history is recorded.
   * use estimatedAge to indicate whether the age is actual or not.
   */
  ageRange?: Range | undefined;
  /**
   * The age of the relative at the time the family member history is recorded.
   * use estimatedAge to indicate whether the age is actual or not.
   */
  agestring?: string | undefined;
  _agestring?: Element | undefined;
  /**
   * The actual or approximate date of birth of the relative.
   */
  bornstring?: string | undefined;
  _bornstring?: Element | undefined;
  /**
   * The actual or approximate date of birth of the relative.
   */
  bornPeriod?: Period | undefined;
  /**
   * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
   */
  condition?: FamilyMemberHistoryCondition[] | undefined;
  /**
   * Describes why the family member's history is not available.
   */
  dataAbsentReason?: CodeableConcept | undefined;
  /**
   * The date (and possibly time) when the family member history was recorded or last updated.
   * This should be captured even if the same as the date on the List aggregating the full family history.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedAge?: Age | undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedboolean?: boolean | undefined;
  _deceasedboolean?: Element | undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedstring?: string | undefined;
  _deceasedstring?: Element | undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedRange?: Range | undefined;
  /**
   * If true, indicates that the age value specified is an estimated value.
   * This element is labeled as a modifier because the fact that age is estimated can/should change the results of any algorithm that calculates based on the specified age.
   */
  estimatedAge?: boolean | undefined;
  _estimatedAge?: Element | undefined;
  /**
   * Business identifiers assigned to this family member history by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
   */
  instantiatesCanonical?: string[] | undefined;
  _instantiatesCanonical?: Element[] | undefined;
  /**
   * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
   * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
   */
  instantiatesUri?: string[] | undefined;
  _instantiatesUri?: Element[] | undefined;
  /**
   * This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair".
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
   */
  note?: Annotation[] | undefined;
  /**
   * Indicates who or what participated in the activities related to the family member history and how they were involved.
   */
  participant?: FamilyMemberHistoryParticipant[] | undefined;
  /**
   * The person who this history concerns.
   * This is not the family member.
   */
  patient: Reference;
  /**
   * The significant Procedures (or procedure) that the family member had. This is a repeating section to allow a system to represent more than one procedure per resource, though there is nothing stopping multiple resources - one per procedure.
   */
  procedure?: FamilyMemberHistoryProcedure[] | undefined;
  /**
   * Describes why the family member history occurred in coded or textual form, or Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event.
   * Textual reasons can be captured using reasonCode.text.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * The type of relationship this person has to the patient (father, mother, brother etc.).
   */
  relationship: CodeableConcept;
  /**
   * The birth sex of the family member.
   * This element should ideally reflect whether the individual is genetically male or female.  However, as reported information based on the knowledge of the patient or reporting friend/relative, there may be situations where the reported sex might not be totally accurate.  E.g. 'Aunt Sue' might be XY rather than XX.  Questions soliciting this information should be phrased to encourage capture of genetic sex where known.  However, systems performing analysis should also allow for the possibility of imprecision with this element.
   */
  sex?: CodeableConcept | undefined;
  /**
   * A code specifying the status of the record of the family history of a specific family member.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('partial'|'completed'|'entered-in-error'|'health-unknown');
  _status?: Element | undefined;
}
export interface Flag extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Flag';
  /**
   * The person, organization or device that created the flag.
   */
  author?: Reference | undefined;
  /**
   * Allows a flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.
   * The value set will often need to be adjusted based on local business rules and usage context.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The coded value or textual component of the flag to display to the user.
   * If non-coded, use CodeableConcept.text.  This element should always be included in the narrative.
   */
  code: CodeableConcept;
  /**
   * This alert is only relevant during the encounter.
   * If both Flag.encounter and Flag.period are valued, then Flag.period.start shall not be before Encounter.period.start and Flag.period.end shall not be after Encounter.period.end.
   */
  encounter?: Reference | undefined;
  /**
   * Business identifiers assigned to this flag by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
   */
  period?: Period | undefined;
  /**
   * Supports basic workflow.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('active'|'inactive'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The patient, related person, location, group, organization, or practitioner etc. this is about record this flag is associated with.
   */
  subject: Reference;
}
export interface FormularyItem extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'FormularyItem';
  /**
   * A code (or set of codes) that specify the product or service that is identified by this formulary item.
   */
  code?: CodeableConcept | undefined;
  /**
   * Business identifier for this formulary item.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The validity about the information of the formulary item and not of the underlying product or service itself.
   * This status is intended to identify if the formulary item in a local system is in active use within the formulary.  For example, a formulary might include a medicinal product and the status relates to its inclusion.  At some point in the future, if the status of the formulary item is changed to "inactive" that means that it is no longer valid in the formulary.  But the product itself might still be in active use and might be included in other formularies.
   */
  status?: ('active'|'entered-in-error'|'inactive') | undefined;
  _status?: Element | undefined;
}
/**
 * Devices used for the analysis (e.g., instruments, software), with settings and parameters
 */
export interface GenomicStudyAnalysisDevice extends BackboneElement {
  /**
   * Device used for the analysis.
   */
  device?: Reference | undefined;
  /**
   * Specific function for the device used for the analysis.
   */
  function?: CodeableConcept | undefined;
}
/**
 * Inputs for the analysis event
 */
export interface GenomicStudyAnalysisInput extends BackboneElement {
  /**
   * File containing input data.
   */
  file?: Reference | undefined;
  /**
   * The analysis event or other GenomicStudy that generated this input file.
   */
  generatedByIdentifier?: Identifier | undefined;
  /**
   * The analysis event or other GenomicStudy that generated this input file.
   */
  generatedByReference?: Reference | undefined;
  /**
   * Type of input data, e.g., BAM, CRAM, or FASTA.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Outputs for the analysis event
 */
export interface GenomicStudyAnalysisOutput extends BackboneElement {
  /**
   * File containing output data.
   */
  file?: Reference | undefined;
  /**
   * Type of output data, e.g., VCF, MAF, or BAM.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Performer for the analysis event
 */
export interface GenomicStudyAnalysisPerformer extends BackboneElement {
  /**
   * The organization, healthcare professional, or others who participated in performing this analysis.
   */
  actor?: Reference | undefined;
  /**
   * Role of the actor for this analysis.
   */
  role?: CodeableConcept | undefined;
}
/**
 * Genomic Analysis Event
 */
export interface GenomicStudyAnalysis extends BackboneElement {
  /**
   * Type of the genomic changes studied in the analysis, e.g., DNA, RNA, or amino acid change.
   */
  changeType?: CodeableConcept[] | undefined;
  /**
   * The date of the analysis event.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Devices used for the analysis (e.g., instruments, software), with settings and parameters.
   */
  device?: GenomicStudyAnalysisDevice[] | undefined;
  /**
   * The focus of a genomic analysis when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, child, or sibling. For example, in trio testing, the GenomicStudy.subject would be the child (proband) and the GenomicStudy.analysis.focus of a specific analysis would be the parent.
   * If the focus of the analysis is not known, the value of this field SHALL use the data absent extension.
   */
  focus?: Reference[] | undefined;
  /**
   * The reference genome build that is used in this analysis.
   */
  genomeBuild?: CodeableConcept | undefined;
  /**
   * Identifiers for the analysis event.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Inputs for the analysis event.
   */
  input?: GenomicStudyAnalysisInput[] | undefined;
  /**
   * The defined protocol that describes the analysis.
   */
  instantiatesCanonical?: string | undefined;
  _instantiatesCanonical?: Element | undefined;
  /**
   * The URL pointing to an externally maintained protocol that describes the analysis.
   */
  instantiatesUri?: string | undefined;
  _instantiatesUri?: Element | undefined;
  /**
   * Type of the methods used in the analysis, e.g., Fluorescence in situ hybridization (FISH), Karyotyping, or Microsatellite instability testing (MSI).
   */
  methodType?: CodeableConcept[] | undefined;
  /**
   * Any notes capture with the analysis event.
   */
  note?: Annotation[] | undefined;
  /**
   * Outputs for the analysis event.
   */
  output?: GenomicStudyAnalysisOutput[] | undefined;
  /**
   * Performer for the analysis event.
   */
  performer?: GenomicStudyAnalysisPerformer[] | undefined;
  /**
   * The protocol that was performed for the analysis event.
   */
  protocolPerformed?: Reference | undefined;
  /**
   * Genomic regions actually called in the analysis event (BED file).
   */
  regionsCalled?: Reference[] | undefined;
  /**
   * The genomic regions to be studied in the analysis (BED file).
   */
  regionsStudied?: Reference[] | undefined;
  /**
   * The specimen used in the analysis event.
   */
  specimen?: Reference[] | undefined;
  /**
   * Name of the analysis event (human friendly).
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
export interface GenomicStudy extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'GenomicStudy';
  /**
   * The details about a specific analysis that was performed in this GenomicStudy.
   */
  analysis?: GenomicStudyAnalysis[] | undefined;
  /**
   * Event resources that the genomic study is based on.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Description of the genomic study.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The healthcare event with which this genomics study is associated.
   */
  encounter?: Reference | undefined;
  /**
   * Identifiers for this genomic study.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The defined protocol that describes the study.
   */
  instantiatesCanonical?: string | undefined;
  _instantiatesCanonical?: Element | undefined;
  /**
   * The URL pointing to an externally maintained protocol that describes the study.
   */
  instantiatesUri?: string | undefined;
  _instantiatesUri?: Element | undefined;
  /**
   * Healthcare professionals who interpreted the genomic study.
   */
  interpreter?: Reference[] | undefined;
  /**
   * Comments related to the genomic study.
   */
  note?: Annotation[] | undefined;
  /**
   * Why the genomic study was performed.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * Healthcare professional who requested or referred the genomic study.
   */
  referrer?: Reference | undefined;
  /**
   * When the genomic study was started.
   */
  startDate?: string | undefined;
  _startDate?: Element | undefined;
  /**
   * The status of the genomic study.
   */
  status: ('registered'|'available'|'cancelled'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The primary subject of the genomic study.
   */
  subject: Reference;
  /**
   * The type of the study, e.g., Familial variant segregation, Functional variation detection, or Gene expression profiling.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Target outcome for the goal
 * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
 */
export interface GoalTarget extends BackboneElement {
  /**
   * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailboolean?: boolean | undefined;
  _detailboolean?: Element | undefined;
  /**
   * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailCodeableConcept?: CodeableConcept | undefined;
  /**
   * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailnumber?: number | undefined;
  /**
   * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailQuantity?: Quantity | undefined;
  /**
   * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailRange?: Range | undefined;
  /**
   * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailRatio?: Ratio | undefined;
  /**
   * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
   */
  detailstring?: string | undefined;
  _detailstring?: Element | undefined;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  duestring?: string | undefined;
  _duestring?: Element | undefined;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  dueDuration?: Duration | undefined;
  /**
   * The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
   */
  measure?: CodeableConcept | undefined;
}
/**
 * Goal can be achieving a particular change or merely maintaining a current state or even slowing a decline.
 */
export interface Goal extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Goal';
  /**
   * Describes the progression, or lack thereof, towards the goal against the target.
   */
  achievementStatus?: CodeableConcept | undefined;
  /**
   * The identified conditions and other health record elements that are intended to be addressed by the goal.
   */
  addresses?: Reference[] | undefined;
  /**
   * Indicates a category the goal falls within.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * After meeting the goal, ongoing activity is needed to sustain the goal objective.
   * For example, getting a yellow fever vaccination for a planned trip is a goal that is designed to be completed (continuous = false).  A goal to sustain HbA1c levels would not be a one-time goal (continuous = true).
   */
  continuous?: boolean | undefined;
  _continuous?: Element | undefined;
  /**
   * Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
   * If no code is available, use CodeableConcept.text.
   */
  description: CodeableConcept;
  /**
   * Business identifiers assigned to this goal by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The state of the goal throughout its lifecycle.
   * This element is labeled as a modifier because the lifecycleStatus contains codes that mark the resource as not currently valid.
   */
  lifecycleStatus: ('proposed'|'planned'|'accepted'|'active'|'on-hold'|'completed'|'cancelled'|'entered-in-error'|'rejected');
  _lifecycleStatus?: Element | undefined;
  /**
   * Any comments related to the goal.
   * May be used for progress notes, concerns or other related information that doesn't actually describe the goal itself.
   */
  note?: Annotation[] | undefined;
  /**
   * Identifies the change (or lack of change) at the point when the status of the goal is assessed.
   * Note that this should not duplicate the goal status; The goal outcome is independent of the outcome of the related activities.  For example, if the Goal is to achieve a target body weight of 150 lb and a care plan activity is defined to diet, then the care plan’s activity outcome could be calories consumed whereas goal outcome is an observation for the actual body weight measured.
   */
  outcome?: CodeableReference[] | undefined;
  /**
   * Identifies the mutually agreed level of importance associated with reaching/sustaining the goal.
   * Extensions are available to track priorities as established by each participant (i.e. Priority from the patient's perspective, different practitioners' perspectives, family member's perspectives)
   * The ordinal extension on Coding can be used to convey a numerically comparable ranking to priority.  (Keep in mind that different coding systems may use a "low value=important".
   */
  priority?: CodeableConcept | undefined;
  /**
   * Indicates whose goal this is - patient goal, practitioner goal, etc.
   * This is the individual or team responsible for establishing the goal, not necessarily who recorded it.  (For that, use the Provenance resource.).
   */
  source?: Reference | undefined;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  startCodeableConcept?: CodeableConcept | undefined;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  startstring?: string | undefined;
  _startstring?: Element | undefined;
  /**
   * Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
   * To see the date for past statuses, query history.
   */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;
  /**
   * Captures the reason for the current status.
   * This will typically be captured for statuses such as rejected, on-hold or cancelled, but could be present for others.
   */
  statusReason?: string | undefined;
  _statusReason?: Element | undefined;
  /**
   * Identifies the patient, group or organization for whom the goal is being established.
   */
  subject: Reference;
  /**
   * Indicates what should be done by when.
   * When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
   */
  target?: GoalTarget[] | undefined;
}
/**
 * Compartment Consistency Rules
 */
export interface GraphDefinitionLinkCompartment extends BackboneElement {
  /**
   * Identifies the compartment.
   */
  code: ('Patient'|'Encounter'|'RelatedPerson'|'Practitioner'|'Device'|'EpisodeOfCare');
  _code?: Element | undefined;
  /**
   * Documentation for FHIRPath expression.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Custom rule, as a FHIRPath expression.
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * identical | matching | different | no-rule | custom.
   */
  rule: ('identical'|'matching'|'different'|'custom');
  _rule?: Element | undefined;
  /**
   * Defines how the compartment rule is used - whether it it is used to test whether resources are subject to the rule, or whether it is a rule that must be followed.
   * All conditional rules are evaluated; if they are true, then the rules are evaluated.
   */
  use: ('where'|'requires');
  _use?: Element | undefined;
}
/**
 * Links this graph makes rules about
 */
export interface GraphDefinitionLink extends BackboneElement {
  /**
   * Compartment Consistency Rules.
   */
  compartment?: GraphDefinitionLinkCompartment[] | undefined;
  /**
   * Information about why this link is of interest in this graph definition.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Maximum occurrences for this link.
   */
  max?: string | undefined;
  _max?: Element | undefined;
  /**
   * Minimum occurrences for this link.
   */
  min?: number | undefined;
  /**
   * A set of parameters to look up.
   * At least one of the parameters must have the value {ref} which identifies the focus resource.
   */
  params?: string | undefined;
  _params?: Element | undefined;
  /**
   * A FHIRPath expression that identifies one of FHIR References to other resources.
   * The path expression cannot contain a resolve() function. If there is no path, the link is a reverse lookup, using target.params. If the path is "*" then this means all references in the resource.
   */
  path?: string | undefined;
  _path?: Element | undefined;
  /**
   * Which slice (if profiled).
   */
  sliceName?: string | undefined;
  _sliceName?: Element | undefined;
  /**
   * The source node for this link.
   */
  sourceId: string;
  _sourceId?: Element | undefined;
  /**
   * The target node for this link.
   */
  targetId: string;
  _targetId?: Element | undefined;
}
/**
 * Potential target for the link
 */
export interface GraphDefinitionNode extends BackboneElement {
  /**
   * Information about why this node is of interest in this graph definition.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Internal ID of node - target for link references.
   */
  nodeId: string;
  _nodeId?: Element | undefined;
  /**
   * Profile for the target resource.
   */
  profile?: string | undefined;
  _profile?: Element | undefined;
  /**
   * Type of resource this link refers to.
   */
  type: ('Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'Bundle'|'CanonicalResource'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'DomainResource'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MetadataResource'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription'|'BodySite'|'CatalogEntry'|'Conformance'|'DataElement'|'DeviceComponent'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DocumentManifest'|'EffectEvidenceSynthesis'|'EligibilityRequest'|'EligibilityResponse'|'ExpansionProfile'|'ImagingManifest'|'ImagingObjectSelection'|'Media'|'MedicationOrder'|'MedicationUsage'|'MedicinalProduct'|'MedicinalProductAuthorization'|'MedicinalProductContraindication'|'MedicinalProductIndication'|'MedicinalProductIngredient'|'MedicinalProductInteraction'|'MedicinalProductManufactured'|'MedicinalProductPackaged'|'MedicinalProductPharmaceutical'|'MedicinalProductUndesirableEffect'|'Order'|'OrderResponse'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'ReferralRequest'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'RiskEvidenceSynthesis'|'Sequence'|'ServiceDefinition'|'SubstanceSpecification');
  _type?: Element | undefined;
}
export interface GraphDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'GraphDefinition';
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the graph definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the graph definition.
   * ...
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the graph definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the graph definition changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the graph definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the graph definition from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the graph definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the graph definition is presumed to be the predominant language in the place the graph definition was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A Boolean value to indicate that this graph definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of graph definitions that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this GraphDefinition when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the graph definition is intended to be used.
   * It may be possible for the graph definition to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * Links this graph makes rules about.
   */
  link?: GraphDefinitionLink[] | undefined;
  /**
   * A natural language name identifying the graph definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Potential target for the link.
   */
  node?: GraphDefinitionNode[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the graph definition.
   * Usually an organization but may be an individual. The publisher (or steward) of the graph definition is the organization or individual primarily responsible for the maintenance and upkeep of the graph definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the graph definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this graph definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the graph definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this graph definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The Node at which instances of this graph start. If there is no nominated start, the graph can start at any of the nodes.
   */
  start?: string | undefined;
  _start?: Element | undefined;
  /**
   * The status of this graph definition. Enables tracking the life-cycle of the content.
   * Allows filtering of graph definitions that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the capability statement.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this graph definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this graph definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the graph definition is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate graph definition instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the graph definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the graph definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different graph definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the graph definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Include / Exclude group members by Trait
 * All the identified characteristics must be true for an entity to a member of the group.
 */
export interface GroupCharacteristic extends BackboneElement {
  /**
   * A code that identifies the kind of trait being asserted.
   */
  code: CodeableConcept;
  /**
   * If true, indicates the characteristic is one that is NOT held by members of the group.
   * This is labeled as "Is Modifier" because applications cannot wrongly include excluded members as included or vice versa.
   */
  exclude: boolean;
  _exclude?: Element | undefined;
  /**
   * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
   */
  period?: Period | undefined;
  /**
   * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueRange?: Range | undefined;
  /**
   * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueReference?: Reference | undefined;
}
/**
 * Who or what is in group
 */
export interface GroupMember extends BackboneElement {
  /**
   * A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.
   */
  entity: Reference;
  /**
   * A flag to indicate that the member is no longer in the group, but previously may have been a member.
   */
  inactive?: boolean | undefined;
  _inactive?: Element | undefined;
  /**
   * The period that the member was in the group, if known.
   */
  period?: Period | undefined;
}
/**
 * If both Group.characteristic and Group.member are present, then the members are the individuals who were found who met the characteristic.  It's possible that there might be other candidate members who meet the characteristic and aren't (yet) in the list.  All members SHALL have the listed characteristics.
 */
export interface Group extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Group';
  /**
   * Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Identifies traits whose presence r absence is shared by members of the group.
   * All the identified characteristics must be true for an entity to a member of the group.
   */
  characteristic?: GroupCharacteristic[] | undefined;
  /**
   * Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
   * This would generally be omitted for Person resources.
   */
  code?: CodeableConcept | undefined;
  /**
   * Explanation of what the group represents and how it is intended to be used.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Business identifiers assigned to this participant by one of the applications involved.  These identifiers remain constant as the resource is updated and propagates from server to server.
   * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Entity responsible for defining and maintaining Group characteristics and/or registered members.
   * This does not strictly align with ownership of a herd or flock, but may suffice to represent that relationship in simple cases. More complex cases will require an extension.
   */
  managingEntity?: Reference | undefined;
  /**
   * Identifies the resource instances that are members of the group.
   */
  member?: GroupMember[] | undefined;
  /**
   * Basis for membership in the Group:
   * * 'definitional': The Group.characteristics specified are both necessary and sufficient to determine membership. All entities that meet the criteria are considered to be members of the group, whether referenced by the group or not. If members are present, they are individuals that happen to be known as meeting the Group.characteristics. The list cannot be presumed to be complete.
   * * 'enumerated': The Group.characteristics are necessary but not sufficient to determine membership. Membership is determined by being listed as one of the Group.member.
   */
  membership: ('definitional'|'enumerated');
  _membership?: Element | undefined;
  /**
   * A label assigned to the group for human identification and communication.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A count of the number of resource instances that are part of the group.
   * Note that the quantity may be less than the number of members if some of the members are not active.
   */
  quantity?: number | undefined;
  /**
   * Identifies the broad classification of the kind of resources the group includes.
   * Group members SHALL be of the appropriate resource type (Patient for person or animal; or Practitioner, PractitionerRole, Device, CareTeam, HealthcareService, Location, Organization, RelatedPerson, or Specimen for the other types.), or a Group of the resources of the appropriate type.
   */
  type: ('person'|'animal'|'practitioner'|'device'|'careteam'|'healthcareservice'|'location'|'organization'|'relatedperson'|'specimen');
  _type?: Element | undefined;
}
export interface GuidanceResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'GuidanceResponse';
  /**
   * If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data.
   */
  dataRequirement?: DataRequirement[] | undefined;
  /**
   * The encounter during which this response was created or to which the creation of this record is tightly associated.
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official copmletion of an encounter but still be tied to the context of the encounter.
   */
  encounter?: Reference | undefined;
  /**
   * Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element.
   */
  evaluationMessage?: Reference | undefined;
  /**
   * Allows a service to provide  unique, business identifiers for the response.
   */
  identifier?: Identifier[] | undefined;
  /**
   * An identifier, CodeableConcept or canonical reference to the guidance that was requested.
   */
  modulestring?: string | undefined;
  _modulestring?: Element | undefined;
  /**
   * An identifier, CodeableConcept or canonical reference to the guidance that was requested.
   */
  moduleCodeableConcept?: CodeableConcept | undefined;
  /**
   * Provides a mechanism to communicate additional information about the response.
   */
  note?: Annotation[] | undefined;
  /**
   * Indicates when the guidance response was processed.
   */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;
  /**
   * The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element.
   */
  outputParameters?: Reference | undefined;
  /**
   * Provides a reference to the device that performed the guidance.
   */
  performer?: Reference | undefined;
  /**
   * Describes the reason for the guidance response in coded or textual form, or Indicates the reason the request was initiated. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
   * Although this reference can be used to point to any resource, it is typically expected to refer to subject-specific data appropriate to the subject of the guidance. For example, patient-based decision support would be expected to reference patient-level data. In addition, implementations should provide as much detail as possible by using the [http://hl7.org/fhir/StructureDefinition/targetElement](http://hl7.org/fhir/extensions/StructureDefinition-targetElement.html) and [http://hl7.org/fhir/StructureDefinition/targetPath](http://hl7.org/fhir/extensions/StructureDefinition-targetPath.html) extensions to indicate the specific elements relevant to providing the reason for the guidance.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * The identifier of the request associated with this response. If an identifier was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi-request scenario.
   */
  requestIdentifier?: Identifier | undefined;
  /**
   * The actions, if any, produced by the evaluation of the artifact.
   */
  result?: Reference[] | undefined;
  /**
   * The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('success'|'data-requested'|'data-required'|'in-progress'|'failure'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The patient for which the request was processed.
   */
  subject?: Reference | undefined;
}
/**
 * Specific eligibility requirements required to use the service
 */
export interface HealthcareServiceEligibility extends BackboneElement {
  /**
   * Coded value for the eligibility.
   */
  code?: CodeableConcept | undefined;
  /**
   * Describes the eligibility conditions for the service.
   * The description of service eligibility should, in general, not exceed one or two paragraphs. It should be sufficient for a prospective consumer to determine if they are likely to be eligible or not. Where eligibility requirements and conditions are complex, it may simply be noted that an eligibility assessment is required. Where eligibility is determined by an outside source, such as an Act of Parliament, this should be noted, preferably with a reference to a commonly available copy of the source document such as a web page.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
}
export interface HealthcareService extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'HealthcareService';
  /**
   * This flag is used to mark the record to not be used. This is not used when a center is closed for maintenance, or for holidays, the notAvailable period is to be used for this.
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
   */
  appointmentRequired?: boolean | undefined;
  _appointmentRequired?: Element | undefined;
  /**
   * A collection of times that the healthcare service is available.
   * More detailed availability information may be provided in associated Schedule/Slot resources.
   * Systems may choose to render availability differently than it is exchanged on the interface. For example, rather than "Mon, Tue, Wed, Thur, Fri from 9am-12am; Mon, Tue, Wed, Thur, Fri from 1pm-5pm" as would be implied by two availableTime repetitions, an application could render this information as "Mon-Fri 9-12am and 1-5pm".
   * The NotAvailableTime(s) included indicate the general days/periods where the service is not available (for things such as public holidays).
   */
  availability?: Availability[] | undefined;
  /**
   * Identifies the broad category of service being performed or delivered.
   * Selecting a Service Category then determines the list of relevant service types that can be selected in the primary service type.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Collection of characteristics (attributes).
   * These could be such things as is wheelchair accessible.
   */
  characteristic?: CodeableConcept[] | undefined;
  /**
   * Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.
   * Would expect that a user would not see this information on a search results, and it would only be available when viewing the complete details of the service.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Some services are specifically made available in multiple languages, this property permits a directory to declare the languages this is offered in. Typically this is only provided where a service operates in communities with mixed languages used.
   * When using this property it indicates that the service is available with this language, it is not derived from the practitioners, and not all are required to use this language, just that this language is available while scheduling.
   */
  communication?: CodeableConcept[] | undefined;
  /**
   * The contact details of communication devices available relevant to the specific HealthcareService. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
   * The address/telecom use code 'home' are not to be used. Note that these contacts are not the contact details of people who provide the service (that would be through PractitionerRole), these are official contacts for the HealthcareService itself for specific purposes. E.g. Mailing Addresses, Billing Addresses, Contact numbers for Booking or Billing Enquiries, general web address, web address for online bookings etc.
   * If this is empty (or the type of interest is empty), refer to the location's contacts.
   */
  contact?: ExtendedContactDetail[] | undefined;
  /**
   * The location(s) that this service is available to (not where the service is provided).
   * The locations referenced by the coverage area can include both specific locations, including areas, and also conceptual domains too (mode = kind), such as a physical area (tri-state area) and some other attribute (covered by Example Care Organization). These types of Locations are often not managed by any specific organization. This could also include generic locations such as "in-home".
   */
  coverageArea?: Reference[] | undefined;
  /**
   * Does this service have specific eligibility requirements that need to be met in order to use the service?
   */
  eligibility?: HealthcareServiceEligibility[] | undefined;
  /**
   * Technical endpoints providing access to services operated for the specific healthcare services defined at this resource.
   */
  endpoint?: Reference[] | undefined;
  /**
   * Extra details about the service that can't be placed in the other fields.
   */
  extraDetails?: string | undefined;
  _extraDetails?: Element | undefined;
  /**
   * External identifiers for this item.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The location(s) where this healthcare service may be provided.
   */
  location?: Reference[] | undefined;
  /**
   * Further description of the service as it would be presented to a consumer while searching.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * When the HealthcareService is representing a specific, schedulable service, the availableIn property can refer to a generic service.
   * For example, if there is a generic Radiology service that offers CT Scans, MRIs, etc.  You could have HealthcareService resources for the CT Scans and MRIs, which have an offeredIn reference to the Radiology HealthcareService.
   */
  offeredIn?: Reference[] | undefined;
  /**
   * If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
   */
  photo?: Attachment | undefined;
  /**
   * Programs that this service is applicable to.
   * Programs are often defined externally to an Organization, commonly by governments; e.g. Home and Community Care Programs, Homeless Program, ….
   */
  program?: CodeableConcept[] | undefined;
  /**
   * The organization that provides this healthcare service.
   * This property is recommended to be the same as the Location's managingOrganization, and if not provided should be interpreted as such. If the Location does not have a managing Organization, then this property should be populated.
   */
  providedBy?: Reference | undefined;
  /**
   * Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
   */
  referralMethod?: CodeableConcept[] | undefined;
  /**
   * The code(s) that detail the conditions under which the healthcare service is available/offered.
   * The provision means being commissioned by, contractually obliged or financially sourced. Types of costings that may apply to this healthcare service, such if the service may be available for free, some discounts available, or fees apply.
   */
  serviceProvisionCode?: CodeableConcept[] | undefined;
  /**
   * Collection of specialties handled by the Healthcare service. This is more of a medical term.
   */
  specialty?: CodeableConcept[] | undefined;
  /**
   * The specific type of service that may be delivered or performed.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * A specific 2D region in a DICOM image / frame
 */
export interface ImagingSelectionInstanceImageRegion2D extends BackboneElement {
  /**
   * The coordinates describing the image region. Encoded as a set of (column, row) pairs that denote positions in the selected image / frames specified with sub-pixel resolution.
   *        The origin at the TLHC of the TLHC pixel is 0.0\0.0, the BRHC of the TLHC pixel is 1.0\1.0, and the BRHC of the BRHC pixel is the number of columns\rows in the image / frames. The values must be within the range 0\0 to the number of columns\rows in the image / frames.
   * For a description of how 2D coordinates are encoded, see [DICOM PS3.3 C.18.6](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.18.6.html).
   */
  coordinate: number[];
  /**
   * Specifies the type of image region.
   * See [DICOM PS3.3 C.10.5.1.2](https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.10.5.html#sect_C.10.5.1.2).
   */
  regionType: ('point'|'polyline'|'interpolated'|'circle'|'ellipse');
  _regionType?: Element | undefined;
}
/**
 * A specific 3D region in a DICOM frame of reference
 */
export interface ImagingSelectionInstanceImageRegion3D extends BackboneElement {
  /**
   * The coordinates describing the image region. Encoded as an ordered set of (x,y,z) triplets (in mm and may be negative) that define a region of interest in the patient-relative Reference Coordinate System defined by ImagingSelection.frameOfReferenceUid element.
   * For a description of how 3D coordinates are encoded, see [DICOM PS3.3 C.18.9](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.18.9.html).
   */
  coordinate: number[];
  /**
   * Specifies the type of image region.
   * See [DICOM PS3.3 C.18.9.1.2](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.18.9.html#sect_C.18.9.1.2).
   */
  regionType: ('point'|'multipoint'|'polyline'|'polygon'|'ellipse'|'ellipsoid');
  _regionType?: Element | undefined;
}
/**
 * The selected instances
 */
export interface ImagingSelectionInstance extends BackboneElement {
  /**
   * Each imaging selection instance or frame list might includes an image region, specified by a region type and a set of 2D coordinates.
   *        If the parent imagingSelection.instance contains a subset element of type frame, the image region applies to all frames in the subset list.
   */
  imageRegion2D?: ImagingSelectionInstanceImageRegion2D[] | undefined;
  /**
   * Each imaging selection might includes a 3D image region, specified by a region type and a set of 3D coordinates.
   */
  imageRegion3D?: ImagingSelectionInstanceImageRegion3D[] | undefined;
  /**
   * The Instance Number for the selected DICOM instance.
   * See [DICOM PS3.3 C.7.6.1](https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.6.html#sect_C.7.6.1).
   *        Note: A multiframe instance has a single instance number with each frame identified by a frame number.
   */
  number?: number | undefined;
  /**
   * The SOP Class UID for the selected DICOM instance.
   * See [DICOM PS3.3 C.12.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.12.html).
   */
  sopClass?: Coding | undefined;
  /**
   * Selected subset of the SOP Instance. The content and format of the subset item is determined by the SOP Class of the selected instance.
   *        May be one of:
   *        - A list of frame numbers selected from a multiframe SOP Instance.
   *        - A list of Content Item Observation UID values selected from a DICOM SR or other structured document SOP Instance.
   *        - A list of segment numbers selected from a segmentation SOP Instance.
   *        - A list of Region of Interest (ROI) numbers selected from a radiotherapy structure set SOP Instance.
   */
  subset?: string[] | undefined;
  _subset?: Element[] | undefined;
  /**
   * The SOP Instance UID for the selected DICOM instance.
   * See [DICOM PS3.3 C.12.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.12.html).
   */
  uid: string;
  _uid?: Element | undefined;
}
/**
 * Selector of the instances (human or machine)
 */
export interface ImagingSelectionPerformer extends BackboneElement {
  /**
   * Author – human or machine.
   */
  actor?: Reference | undefined;
  /**
   * Distinguishes the type of involvement of the performer.
   */
  function?: CodeableConcept | undefined;
}
export interface ImagingSelection extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImagingSelection';
  /**
   * A list of the diagnostic requests that resulted in this imaging selection being performed.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings.
   */
  bodySite?: CodeableReference | undefined;
  /**
   * Classifies the imaging selection.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Reason for referencing the selected content.
   * *All* code-value and, if present, component.code-component.value pairs need to be taken into account to correctly understand the meaning of the observation.
   */
  code: CodeableConcept;
  /**
   * The imaging study from which the imaging selection is made.
   */
  derivedFrom?: Reference[] | undefined;
  /**
   * The network service providing retrieval access to the selected images, frames, etc. See implementation notes for information about using DICOM endpoints.
   * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG) formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach.
   */
  endpoint?: Reference[] | undefined;
  /**
   * The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
   * An imaging selection may reference a DICOM resource that itself references other DICOM resources.
   *        e.g. a presentation state references a set of source images or frames.
   */
  focus?: Reference[] | undefined;
  /**
   * The Frame of Reference UID identifying the coordinate system that conveys spatial and/or temporal information for the selected images or frames.
   * See [DICOM PS3.3 C.7.4.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.4.html).
   */
  frameOfReferenceUid?: string | undefined;
  _frameOfReferenceUid?: Element | undefined;
  /**
   * A unique identifier assigned to this imaging selection.
   * This is a business identifier, not a resource identifier -- see discussion under [Business Identifiers](resource.html#identifiers).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Each imaging selection includes one or more selected DICOM SOP instances.
   */
  instance?: ImagingSelectionInstance[] | undefined;
  /**
   * The date and time this imaging selection was created.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * Selector of the instances – human or machine.
   */
  performer?: ImagingSelectionPerformer[] | undefined;
  /**
   * The Series Number for the DICOM Series from which the images were selected.
   * See [DICOM PS3.3 C.7.3](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.3.html).
   */
  seriesNumber?: number | undefined;
  /**
   * The Series Instance UID for the DICOM Series from which the images were selected.
   * See [DICOM PS3.3 C.7.3](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.3.html).
   */
  seriesUid?: string | undefined;
  _seriesUid?: Element | undefined;
  /**
   * The current state of the ImagingSelection resource. This is not the status of any ImagingStudy, ServiceRequest, or Task resources associated with the ImagingSelection.
   * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   */
  status: ('available'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The Study Instance UID for the DICOM Study from which the images were selected.
   * See [DICOM PS3.3 C.7.2](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.2.html).
   */
  studyUid?: string | undefined;
  _studyUid?: Element | undefined;
  /**
   * The patient, or group of patients, location, device, organization, procedure or practitioner this imaging selection is about and into whose or what record the imaging selection is placed.
   */
  subject?: Reference | undefined;
}
/**
 * A single SOP instance from the series
 */
export interface ImagingStudySeriesInstance extends BackboneElement {
  /**
   * The number of instance in the series.
   */
  number?: number | undefined;
  /**
   * DICOM instance  type.
   */
  sopClass: Coding;
  /**
   * The description of the instance.
   * Particularly for post-acquisition analytic objects, such as SR, presentation states, value mapping, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * The DICOM SOP Instance UID for this image or other DICOM content.
   * See  [DICOM PS3.3 C.12.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.12.html#sect_C.12.1).
   */
  uid: string;
  _uid?: Element | undefined;
}
/**
 * Who performed the series
 * If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
 */
export interface ImagingStudySeriesPerformer extends BackboneElement {
  /**
   * Indicates who or what performed the series.
   */
  actor: Reference;
  /**
   * Distinguishes the type of involvement of the performer in the series.
   */
  function?: CodeableConcept | undefined;
}
/**
 * Each study has one or more series of instances
 */
export interface ImagingStudySeries extends BackboneElement {
  /**
   * The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.
   */
  bodySite?: CodeableReference | undefined;
  /**
   * A description of the series.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.connectionType.
   * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG) formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; and DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances.
   */
  endpoint?: Reference[] | undefined;
  /**
   * A single SOP instance within the series, e.g. an image, or presentation state.
   */
  instance?: ImagingStudySeriesInstance[] | undefined;
  /**
   * The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.
   */
  laterality?: CodeableConcept | undefined;
  /**
   * The distinct modality for this series. This may include both acquisition and non-acquisition modalities.
   */
  modality: CodeableConcept;
  /**
   * The numeric identifier of this series in the study.
   */
  number?: number | undefined;
  /**
   * Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
   */
  numberOfInstances?: number | undefined;
  /**
   * Indicates who or what performed the series and how they were involved.
   * If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
   */
  performer?: ImagingStudySeriesPerformer[] | undefined;
  /**
   * The specimen imaged, e.g., for whole slide imaging of a biopsy.
   */
  specimen?: Reference[] | undefined;
  /**
   * The date and time the series was started.
   */
  started?: string | undefined;
  _started?: Element | undefined;
  /**
   * The DICOM Series Instance UID for the series.
   * See [DICOM PS3.3 C.7.3](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.3.html).
   */
  uid: string;
  _uid?: Element | undefined;
}
export interface ImagingStudy extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImagingStudy';
  /**
   * A list of the diagnostic requests that resulted in this imaging study being performed.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The Imaging Manager description of the study. Institution-generated description or classification of the Study (component) performed.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The healthcare event (e.g. a patient and healthcare provider interaction) during which this ImagingStudy is made.
   * This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission test).
   */
  encounter?: Reference | undefined;
  /**
   * The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.connectionType.
   * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG), formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances; or IHE Invoke Image Display (IID), which provides standard invocation of an imaging web viewer.
   */
  endpoint?: Reference[] | undefined;
  /**
   * Identifiers for the ImagingStudy such as DICOM Study Instance UID.
   * See discussion under [Imaging Study Implementation Notes](imagingstudy.html#notes) for encoding of DICOM Study Instance UID.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The principal physical location where the ImagingStudy was performed.
   */
  location?: Reference | undefined;
  /**
   * A list of all the distinct values of series.modality. This may include both acquisition and non-acquisition modalities.
   */
  modality?: CodeableConcept[] | undefined;
  /**
   * Per the recommended DICOM mapping, this element is derived from the Study Description attribute (0008,1030). Observations or findings about the imaging study should be recorded in another resource, e.g. Observation, and not in this element.
   */
  note?: Annotation[] | undefined;
  /**
   * Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
   */
  numberOfInstances?: number | undefined;
  /**
   * Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present.
   */
  numberOfSeries?: number | undefined;
  /**
   * A larger event of which this particular ImagingStudy is a component or step.  For example,  an ImagingStudy as part of a procedure.
   * To link an ImagingStudy to an Encounter use `encounter`.
   */
  partOf?: Reference[] | undefined;
  /**
   * This field corresponds to the DICOM Procedure Code Sequence (0008,1032). This is different from the FHIR Procedure resource that may include the ImagingStudy.
   */
  procedure?: CodeableReference[] | undefined;
  /**
   * Description of clinical condition indicating why the ImagingStudy was requested, and/or Indicates another resource whose existence justifies this Study.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * The requesting/referring physician.
   */
  referrer?: Reference | undefined;
  /**
   * Each study has one or more series of images or other content.
   */
  series?: ImagingStudySeries[] | undefined;
  /**
   * Date and time the study started.
   */
  started?: string | undefined;
  _started?: Element | undefined;
  /**
   * The current state of the ImagingStudy resource. This is not the status of any ServiceRequest or Task resources associated with the ImagingStudy.
   * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   */
  status: ('registered'|'available'|'cancelled'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The subject, typically a patient, of the imaging study.
   * QA phantoms can be recorded with a Device; multiple subjects (such as mice) can be recorded with a Group.
   */
  subject: Reference;
}
/**
 * Who performed event
 */
export interface ImmunizationPerformer extends BackboneElement {
  /**
   * The practitioner or organization who performed the action.
   * When the individual practitioner who performed the action is known, it is best to send.
   */
  actor: Reference;
  /**
   * Describes the type of performance (e.g. ordering provider, administering provider, etc.).
   */
  function?: CodeableConcept | undefined;
}
/**
 * Patient eligibility for a specific vaccination program
 */
export interface ImmunizationProgramEligibility extends BackboneElement {
  /**
   * Indicates which program the patient had their eligility evaluated for.
   */
  program: CodeableConcept;
  /**
   * Indicates the patient's eligility status for for a specific payment program.
   */
  programStatus: CodeableConcept;
}
/**
 * Protocol followed by the provider
 */
export interface ImmunizationProtocolApplied extends BackboneElement {
  /**
   * Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
   */
  authority?: Reference | undefined;
  /**
   * Nominal position in a series as intended by the practitioner administering the dose.
   * The use of an integer is preferred if known. Text should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumber: string;
  _doseNumber?: Element | undefined;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string | undefined;
  _series?: Element | undefined;
  /**
   * The recommended number of doses to achieve immunity as intended by the practitioner administering the dose.
   * The use of an integer is preferred if known.
   */
  seriesDoses?: string | undefined;
  _seriesDoses?: Element | undefined;
  /**
   * The vaccine preventable disease the dose is being administered against.
   */
  targetDisease?: CodeableConcept[] | undefined;
}
/**
 * Details of a reaction that follows immunization
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
 */
export interface ImmunizationReaction extends BackboneElement {
  /**
   * Date of reaction to the immunization.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Details of the reaction.
   */
  manifestation?: CodeableReference | undefined;
  /**
   * Self-reported indicator.
   */
  reported?: boolean | undefined;
  _reported?: Element | undefined;
}
export interface Immunization extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Immunization';
  /**
   * An indication of which product was administered to the patient. This is typically a more detailed representation of the concept conveyed by the vaccineCode data element. If a Medication resource is referenced, it may be to a stand-alone resource or a contained resource within the Immunization resource.
   */
  administeredProduct?: CodeableReference | undefined;
  /**
   * A plan, order or recommendation fulfilled in whole or in part by this immunization.
   * Allows tracing of an authorization for the Immunization.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The quantity of vaccine product that was administered.
   */
  doseQuantity?: Quantity | undefined;
  /**
   * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
   */
  encounter?: Reference | undefined;
  /**
   * Date vaccine batch expires.
   */
  expirationDate?: string | undefined;
  _expirationDate?: Element | undefined;
  /**
   * Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
   */
  fundingSource?: CodeableConcept | undefined;
  /**
   * A unique identifier assigned to this immunization record.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Typically the source of the data when the report of the immunization event is not based on information from the person who administered the vaccine.
   * Typically will not be populated if primarySource = True, not required even if primarySource = False.
   */
  informationSource?: CodeableReference | undefined;
  /**
   * Indication if a dose is considered to be subpotent. By default, a dose should be considered to be potent.
   * Typically, the recognition of the dose being sub-potent is retrospective, after the administration (ex. notification of a manufacturer recall after administration). However, in the case of a partial administration (the patient moves unexpectedly and only some of the dose is actually administered), subpotency may be recognized immediately, but it is still important to record the event.
   */
  isSubpotent?: boolean | undefined;
  _isSubpotent?: Element | undefined;
  /**
   * The service delivery location where the vaccine administration occurred.
   */
  location?: Reference | undefined;
  /**
   * Lot number of the  vaccine product.
   */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;
  /**
   * Name of vaccine manufacturer.
   */
  manufacturer?: CodeableReference | undefined;
  /**
   * Extra information about the immunization that is not conveyed by the other attributes.
   */
  note?: Annotation[] | undefined;
  /**
   * Date vaccine administered or was to be administered.
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
   */
  occurrencestring: string;
  _occurrencestring?: Element | undefined;
  /**
   * The patient who either received or did not receive the immunization.
   */
  patient: Reference;
  /**
   * Indicates who performed the immunization event.
   */
  performer?: ImmunizationPerformer[] | undefined;
  /**
   * Indicates whether the data contained in the resource was captured by the individual/organization which was responsible for the administration of the vaccine rather than as 'secondary reported' data documented by a third party. A value of 'true' means this data originated with the individual/organization which was responsible for the administration of the vaccine.
   * Reflects the “reliability” of the content.
   */
  primarySource?: boolean | undefined;
  _primarySource?: Element | undefined;
  /**
   * Indicates a patient's eligibility for a funding program.
   */
  programEligibility?: ImmunizationProgramEligibility[] | undefined;
  /**
   * The protocol (set of recommendations) being followed by the provider who administered the dose.
   */
  protocolApplied?: ImmunizationProtocolApplied[] | undefined;
  /**
   * Categorical data indicating that an adverse event is associated in time to an immunization.
   * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
   */
  reaction?: ImmunizationReaction[] | undefined;
  /**
   * Describes why the immunization occurred in coded or textual form, or Indicates another resource (Condition, Observation or DiagnosticReport) whose existence justifies this immunization.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * The path by which the vaccine product is taken into the body.
   */
  route?: CodeableConcept | undefined;
  /**
   * Body site where vaccine was administered.
   */
  site?: CodeableConcept | undefined;
  /**
   * Indicates the current status of the immunization event.
   * Will generally be set to show that the immunization has been completed or not done.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('completed'|'entered-in-error'|'not-done');
  _status?: Element | undefined;
  /**
   * Indicates the reason the immunization event was not performed.
   * This is generally only used for the status of "not-done". The reason for performing the immunization event is captured in reasonCode, not here.
   */
  statusReason?: CodeableConcept | undefined;
  /**
   * Reason why a dose is considered to be subpotent.
   */
  subpotentReason?: CodeableConcept[] | undefined;
  /**
   * Additional information that is relevant to the immunization (e.g. for a vaccine recipient who is pregnant, the gestational age of the fetus). The reason why a vaccine was given (e.g. occupation, underlying medical condition) should be conveyed in Immunization.reason, not as supporting information. The reason why a vaccine was not given (e.g. contraindication) should be conveyed in Immunization.statusReason, not as supporting information.
   */
  supportingInformation?: Reference[] | undefined;
  /**
   * Vaccine that was administered or was to be administered.
   * The code for the administered vaccine may be reported at various levels of granularity from a very generic code for a general type of vaccine (e.g. the SNOMED or CVX code for the flu vaccine) to a very discrete code for a specific product including the form and packaging (e.g. an NDC code). Because vaccineCode uses the CodeableConcept data type, multiple codes at different levels of granularity may be reported for a single immunization event provided that all codes are appropriate for the same vaccine. For example, both NDC and CVX codes may be provided for a given immunization event by repeating the coding element within vaccineCode.
   */
  vaccineCode: CodeableConcept;
}
export interface ImmunizationEvaluation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImmunizationEvaluation';
  /**
   * Indicates the authority who published the protocol (e.g. ACIP).
   */
  authority?: Reference | undefined;
  /**
   * The date the evaluation of the vaccine administration event was performed.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Additional information about the evaluation.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Nominal position in a series as determined by the outcome of the evaluation process.
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumber?: string | undefined;
  _doseNumber?: Element | undefined;
  /**
   * Indicates if the dose is valid or not valid with respect to the published recommendations.
   */
  doseStatus: CodeableConcept;
  /**
   * Provides an explanation as to why the vaccine administration event is valid or not relative to the published recommendations.
   */
  doseStatusReason?: CodeableConcept[] | undefined;
  /**
   * A unique identifier assigned to this immunization evaluation record.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The vaccine administration event being evaluated.
   */
  immunizationEvent: Reference;
  /**
   * The individual for whom the evaluation is being done.
   */
  patient: Reference;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string | undefined;
  _series?: Element | undefined;
  /**
   * The recommended number of doses to achieve immunity as determined by the outcome of the evaluation process.
   * The use of an integer is preferred if known.
   */
  seriesDoses?: string | undefined;
  _seriesDoses?: Element | undefined;
  /**
   * Indicates the current status of the evaluation of the vaccination administration event.
   */
  status: ('completed'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The vaccine preventable disease the dose is being evaluated against.
   */
  targetDisease: CodeableConcept;
}
/**
 * Dates governing proposed immunization
 */
export interface ImmunizationRecommendationRecommendationDateCriterion extends BackboneElement {
  /**
   * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
   */
  code: CodeableConcept;
  /**
   * The date whose meaning is specified by dateCriterion.code.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Vaccine administration recommendations
 * A given instance of the .recommendation backbone element should correspond to a single recommended administration.
 */
export interface ImmunizationRecommendationRecommendation extends BackboneElement {
  /**
   * Vaccine(s) which should not be used to fulfill the recommendation.
   */
  contraindicatedVaccineCode?: CodeableConcept[] | undefined;
  /**
   * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
   */
  dateCriterion?: ImmunizationRecommendationRecommendationDateCriterion[] | undefined;
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Nominal position of the recommended dose in a series as determined by the evaluation and forecasting process (e.g. dose 2 is the next recommended dose).
   * The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
   */
  doseNumber?: string | undefined;
  _doseNumber?: Element | undefined;
  /**
   * The reason for the assigned forecast status.
   */
  forecastReason?: CodeableConcept[] | undefined;
  /**
   * Indicates the patient status with respect to the path to immunity for the target disease.
   */
  forecastStatus: CodeableConcept;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string | undefined;
  _series?: Element | undefined;
  /**
   * The recommended number of doses to achieve immunity as determined by the evaluation and forecasting process.
   * The use of an integer is preferred if known.
   */
  seriesDoses?: string | undefined;
  _seriesDoses?: Element | undefined;
  /**
   * Immunization event history and/or evaluation that supports the status and recommendation.
   */
  supportingImmunization?: Reference[] | undefined;
  /**
   * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
   */
  supportingPatientInformation?: Reference[] | undefined;
  /**
   * The targeted disease for the recommendation.
   * A given instance of the .recommendation backbone element should correspond to a single recommended administration but sometimes that administration (e.g. MMR) will encompass multiple diseases, thus the targetDisease element is allowed to repeat.
   */
  targetDisease?: CodeableConcept[] | undefined;
  /**
   * Vaccine(s) or vaccine group that pertain to the recommendation.
   */
  vaccineCode?: CodeableConcept[] | undefined;
}
export interface ImmunizationRecommendation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImmunizationRecommendation';
  /**
   * Indicates the authority who published the protocol (e.g. ACIP).
   */
  authority?: Reference | undefined;
  /**
   * The date the immunization recommendation(s) were created.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * A unique identifier assigned to this particular recommendation record.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The patient the recommendation(s) are for.
   */
  patient: Reference;
  /**
   * Vaccine administration recommendations.
   * A given instance of the .recommendation backbone element should correspond to a single recommended administration.
   */
  recommendation: ImmunizationRecommendationRecommendation[];
}
/**
 * Grouping used to present related resources in the IG
 * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
 */
export interface ImplementationGuideDefinitionGrouping extends BackboneElement {
  /**
   * Human readable text describing the package.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The human-readable title to display for the package of resources when rendering the implementation guide.
   */
  name: string;
  _name?: Element | undefined;
}
/**
 * Page/Section in the Guide
 * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
 */
export interface ImplementationGuideDefinitionPage extends BackboneElement {
  /**
   * A code that indicates how the page is generated.
   */
  generation: ('html'|'markdown'|'xml'|'generated');
  _generation?: Element | undefined;
  /**
   * The url by which the page should be known when published.
   * This SHALL be a local reference, expressed with respect to the root of the IG output folder.  No suffix is required.  If no suffix is specified, .html will be appended.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Nested Pages/Sections under this page.
   * The implementation guide breadcrumbs may be generated from this structure.
   */
  page?: ImplementationGuideDefinitionPage[] | undefined;
  /**
   * Indicates the URL or the actual content to provide for the page.
   * If absent and the page isn't a generated page, this may be inferred from the page name by checking input locations.  String is used for XHTML content - sent as an escaped string.  FHIR tooling can't support 'direct' XHTML anywhere other than in narrative.
   */
  sourcestring?: string | undefined;
  _sourcestring?: Element | undefined;
  /**
   * A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
   */
  title: string;
  _title?: Element | undefined;
}
/**
 * Defines how IG is built by tools
 * see [confluence](https://confluence.hl7.org/display/FHIR/Implementation+Guide+Parameters) for the parameters defined by the HL7 IG publisher.
 */
export interface ImplementationGuideDefinitionParameter extends BackboneElement {
  /**
   * A tool-specific code that defines the parameter.
   */
  code: Coding;
  /**
   * Value for named type.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Resource in the implementation guide
 */
export interface ImplementationGuideDefinitionResource extends BackboneElement {
  /**
   * A description of the reason that a resource has been included in the implementation guide.
   * This is mostly used with examples to explain why it is present (though they can have extensive comments in the examples).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.
   * The resource SHALL be valid against all the versions it is specified to apply to. If the resource referred to is a StructureDefinition, the fhirVersion stated in the StructureDefinition cannot disagree with the version specified here; the specified versions SHALL include the version specified by the StructureDefinition, and may include additional versions using the [http://hl7.org/fhir/StructureDefinition/structuredefinition-applicable-version](http://hl7.org/fhir/extensions/StructureDefinition-structuredefinition-applicable-version.html) extension.
   */
  fhirVersion?: ('0.01'|'0.05'|'0.06'|'0.11'|'0.0'|'0.0.80'|'0.0.81'|'0.0.82'|'0.4'|'0.4.0'|'0.5'|'0.5.0'|'1.0'|'1.0.0'|'1.0.1'|'1.0.2'|'1.1'|'1.1.0'|'1.4'|'1.4.0'|'1.6'|'1.6.0'|'1.8'|'1.8.0'|'3.0'|'3.0.0'|'3.0.1'|'3.0.2'|'3.3'|'3.3.0'|'3.5'|'3.5.0'|'4.0'|'4.0.0'|'4.0.1'|'4.1'|'4.1.0'|'4.2'|'4.2.0'|'4.3'|'4.3.0'|'4.3.0-cibuild'|'4.3.0-snapshot1'|'4.4'|'4.4.0'|'4.5'|'4.5.0'|'4.6'|'4.6.0'|'5.0'|'5.0.0'|'5.0.0-cibuild'|'5.0.0-snapshot1'|'5.0.0-snapshot2'|'5.0.0-ballot'|'5.0.0-snapshot3'|'5.0.0-draft-final')[] | undefined;
  _fhirVersion?: Element[] | undefined;
  /**
   * Reference to the id of the grouping this resource appears in.
   * This must correspond to a group.id element within this implementation guide.
   */
  groupingId?: string | undefined;
  _groupingId?: Element | undefined;
  /**
   * If true, indicates the resource is an example instance.
   */
  isExample?: boolean | undefined;
  _isExample?: Element | undefined;
  /**
   * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * If present, indicates profile(s) the instance is valid against.
   * Examples: 
   * * StructureDefinition -> Any 
   * * ValueSet -> expansion 
   * * OperationDefinition -> Parameters 
   * * Questionnaire -> QuestionnaireResponse.
   */
  profile?: string[] | undefined;
  _profile?: Element[] | undefined;
  /**
   * Where this resource is found.
   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
   */
  reference: Reference;
}
/**
 * A template for building resources
 */
export interface ImplementationGuideDefinitionTemplate extends BackboneElement {
  /**
   * Type of template specified.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * The scope in which the template applies.
   */
  scope?: string | undefined;
  _scope?: Element | undefined;
  /**
   * The source location for the template.
   */
  source: string;
  _source?: Element | undefined;
}
/**
 * Information needed to build the IG
 * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
 */
export interface ImplementationGuideDefinition extends BackboneElement {
  /**
   * A logical group of resources. Logical groups can be used when building pages.
   * Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
   */
  grouping?: ImplementationGuideDefinitionGrouping[] | undefined;
  /**
   * A page / section in the implementation guide. The root page is the implementation guide home page.
   * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
   */
  page?: ImplementationGuideDefinitionPage | undefined;
  /**
   * A set of parameters that defines how the implementation guide is built. The parameters are defined by the relevant tools that build the implementation guides.
   * see [confluence](https://confluence.hl7.org/display/FHIR/Implementation+Guide+Parameters) for the parameters defined by the HL7 IG publisher.
   */
  parameter?: ImplementationGuideDefinitionParameter[] | undefined;
  /**
   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
   */
  resource?: ImplementationGuideDefinitionResource[] | undefined;
  /**
   * A template for building resources.
   */
  template?: ImplementationGuideDefinitionTemplate[] | undefined;
}
/**
 * Another Implementation guide this depends on
 */
export interface ImplementationGuideDependsOn extends BackboneElement {
  /**
   * The NPM package name for the Implementation Guide that this IG depends on.
   */
  packageId?: string | undefined;
  _packageId?: Element | undefined;
  /**
   * A description explaining the nature of the dependency on the listed IG.
   * This doesn't need to enumerate every resource used, but should give some sense of why the dependency exists.  It will be used in the rendered list of dependencies
   */
  reason?: string | undefined;
  _reason?: Element | undefined;
  /**
   * A canonical reference to the Implementation guide for the dependency.
   * Usually, A canonical reference to the implementation guide is the same as the master location at which the implementation guide is published.
   */
  uri: string;
  _uri?: Element | undefined;
  /**
   * The version of the IG that is depended on, when the correct version is required to understand the IG correctly.
   * This follows the syntax of the NPM packaging version field - see [[reference]].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Profiles that apply globally
 * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
 */
export interface ImplementationGuideGlobal extends BackboneElement {
  /**
   * A reference to the profile that all instances must conform to.
   */
  profile: string;
  _profile?: Element | undefined;
  /**
   * The type of resource that all instances must conform to.
   * The type must match that of the profile that is referred to but is made explicit here as a denormalization so that a system processing the implementation guide resource knows which resources the profile applies to even if the profile itself is not available.
   */
  type: ('Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription');
  _type?: Element | undefined;
}
/**
 * HTML page within the parent IG
 */
export interface ImplementationGuideManifestPage extends BackboneElement {
  /**
   * The name of an anchor available on the page.
   * Appending 'rendering' + "/" + page.name + "#" + page.anchor should resolve to the anchor.
   */
  anchor?: string[] | undefined;
  _anchor?: Element[] | undefined;
  /**
   * Relative path to the page.
   * Appending 'rendering' + "/" + this should resolve to the page.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Label for the page intended for human display.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * Resource in the implementation guide
 */
export interface ImplementationGuideManifestResource extends BackboneElement {
  /**
   * If true, indicates the resource is an example instance.
   */
  isExample?: boolean | undefined;
  _isExample?: Element | undefined;
  /**
   * If present, indicates profile(s) the instance is valid against.
   * Examples: 
   * * StructureDefinition -> Any 
   * * ValueSet -> expansion 
   * * OperationDefinition -> Parameters 
   * * Questionnaire -> QuestionnaireResponse.
   */
  profile?: string[] | undefined;
  _profile?: Element[] | undefined;
  /**
   * Where this resource is found.
   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
   */
  reference: Reference;
  /**
   * The relative path for primary page for this resource within the IG.
   * Appending 'rendering' + "/" + this should resolve to the resource page.
   */
  relativePath?: string | undefined;
  _relativePath?: Element | undefined;
}
/**
 * Information about an assembled IG
 */
export interface ImplementationGuideManifest extends BackboneElement {
  /**
   * Indicates a relative path to an image that exists within the IG.
   */
  image?: string[] | undefined;
  _image?: Element[] | undefined;
  /**
   * Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.
   */
  other?: string[] | undefined;
  _other?: Element[] | undefined;
  /**
   * Information about a page within the IG.
   */
  manifestPage?: ImplementationGuideManifestPage[] | undefined;
  /**
   * A pointer to official web page, PDF or other rendering of the implementation guide.
   */
  rendering?: string | undefined;
  _rendering?: Element | undefined;
  /**
   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
   */
  manifestResource: ImplementationGuideManifestResource[];
}
export interface ImplementationGuide extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImplementationGuide';
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
   * ...
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the implementation guide was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the implementation guide. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The information needed by an IG publisher tool to publish the whole implementation guide.
   * Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
   */
  definition?: ImplementationGuideDefinition | undefined;
  /**
   * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
   */
  dependsOn?: ImplementationGuideDependsOn[] | undefined;
  /**
   * A free text natural language description of the implementation guide from a consumer's perspective.
   * This description can be used to capture details such as why the implementation guide was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the implementation guide as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the implementation guide is presumed to be the predominant language in the place the implementation guide was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A Boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of implementation guides that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * The version(s) of the FHIR specification that this ImplementationGuide targets - e.g. describes how to use. The value of this element is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.6.0. for this version.
   * Most implementation guides target a single version - e.g. they describe how to use a particular version, and the profiles and examples etc. are valid for that version. But some implementation guides describe how to use multiple different versions of FHIR to solve the same problem, or in concert with each other. Typically, the requirement to support multiple versions arises as implementation matures and different implementation communities are stuck at different versions by regulation or market dynamics.
   */
  fhirVersion: ('0.01'|'0.05'|'0.06'|'0.11'|'0.0'|'0.0.80'|'0.0.81'|'0.0.82'|'0.4'|'0.4.0'|'0.5'|'0.5.0'|'1.0'|'1.0.0'|'1.0.1'|'1.0.2'|'1.1'|'1.1.0'|'1.4'|'1.4.0'|'1.6'|'1.6.0'|'1.8'|'1.8.0'|'3.0'|'3.0.0'|'3.0.1'|'3.0.2'|'3.3'|'3.3.0'|'3.5'|'3.5.0'|'4.0'|'4.0.0'|'4.0.1'|'4.1'|'4.1.0'|'4.2'|'4.2.0'|'4.3'|'4.3.0'|'4.3.0-cibuild'|'4.3.0-snapshot1'|'4.4'|'4.4.0'|'4.5'|'4.5.0'|'4.6'|'4.6.0'|'5.0'|'5.0.0'|'5.0.0-cibuild'|'5.0.0-snapshot1'|'5.0.0-snapshot2'|'5.0.0-ballot'|'5.0.0-snapshot3'|'5.0.0-draft-final')[];
  _fhirVersion?: Element[] | undefined;
  /**
   * A set of profiles that all resources covered by this implementation guide must conform to.
   * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
   */
  global?: ImplementationGuideGlobal[] | undefined;
  /**
   * A formal identifier that is used to identify this implementation guide when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the implementation guide is intended to be used.
   * It may be possible for the implementation guide to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.
   */
  license?: ('not-open-source'|'0BSD'|'AAL'|'Abstyles'|'Adobe-2006'|'Adobe-Glyph'|'ADSL'|'AFL-1.1'|'AFL-1.2'|'AFL-2.0'|'AFL-2.1'|'AFL-3.0'|'Afmparse'|'AGPL-1.0-only'|'AGPL-1.0-or-later'|'AGPL-3.0-only'|'AGPL-3.0-or-later'|'Aladdin'|'AMDPLPA'|'AML'|'AMPAS'|'ANTLR-PD'|'Apache-1.0'|'Apache-1.1'|'Apache-2.0'|'APAFML'|'APL-1.0'|'APSL-1.0'|'APSL-1.1'|'APSL-1.2'|'APSL-2.0'|'Artistic-1.0-cl8'|'Artistic-1.0-Perl'|'Artistic-1.0'|'Artistic-2.0'|'Bahyph'|'Barr'|'Beerware'|'BitTorrent-1.0'|'BitTorrent-1.1'|'Borceux'|'BSD-1-Clause'|'BSD-2-Clause-FreeBSD'|'BSD-2-Clause-NetBSD'|'BSD-2-Clause-Patent'|'BSD-2-Clause'|'BSD-3-Clause-Attribution'|'BSD-3-Clause-Clear'|'BSD-3-Clause-LBNL'|'BSD-3-Clause-No-Nuclear-License-2014'|'BSD-3-Clause-No-Nuclear-License'|'BSD-3-Clause-No-Nuclear-Warranty'|'BSD-3-Clause'|'BSD-4-Clause-UC'|'BSD-4-Clause'|'BSD-Protection'|'BSD-Source-Code'|'BSL-1.0'|'bzip2-1.0.5'|'bzip2-1.0.6'|'Caldera'|'CATOSL-1.1'|'CC-BY-1.0'|'CC-BY-2.0'|'CC-BY-2.5'|'CC-BY-3.0'|'CC-BY-4.0'|'CC-BY-NC-1.0'|'CC-BY-NC-2.0'|'CC-BY-NC-2.5'|'CC-BY-NC-3.0'|'CC-BY-NC-4.0'|'CC-BY-NC-ND-1.0'|'CC-BY-NC-ND-2.0'|'CC-BY-NC-ND-2.5'|'CC-BY-NC-ND-3.0'|'CC-BY-NC-ND-4.0'|'CC-BY-NC-SA-1.0'|'CC-BY-NC-SA-2.0'|'CC-BY-NC-SA-2.5'|'CC-BY-NC-SA-3.0'|'CC-BY-NC-SA-4.0'|'CC-BY-ND-1.0'|'CC-BY-ND-2.0'|'CC-BY-ND-2.5'|'CC-BY-ND-3.0'|'CC-BY-ND-4.0'|'CC-BY-SA-1.0'|'CC-BY-SA-2.0'|'CC-BY-SA-2.5'|'CC-BY-SA-3.0'|'CC-BY-SA-4.0'|'CC0-1.0'|'CDDL-1.0'|'CDDL-1.1'|'CDLA-Permissive-1.0'|'CDLA-Sharing-1.0'|'CECILL-1.0'|'CECILL-1.1'|'CECILL-2.0'|'CECILL-2.1'|'CECILL-B'|'CECILL-C'|'ClArtistic'|'CNRI-Jython'|'CNRI-Python-GPL-Compatible'|'CNRI-Python'|'Condor-1.1'|'CPAL-1.0'|'CPL-1.0'|'CPOL-1.02'|'Crossword'|'CrystalStacker'|'CUA-OPL-1.0'|'Cube'|'curl'|'D-FSL-1.0'|'diffmark'|'DOC'|'Dotseqn'|'DSDP'|'dvipdfm'|'ECL-1.0'|'ECL-2.0'|'EFL-1.0'|'EFL-2.0'|'eGenix'|'Entessa'|'EPL-1.0'|'EPL-2.0'|'ErlPL-1.1'|'EUDatagrid'|'EUPL-1.0'|'EUPL-1.1'|'EUPL-1.2'|'Eurosym'|'Fair'|'Frameworx-1.0'|'FreeImage'|'FSFAP'|'FSFUL'|'FSFULLR'|'FTL'|'GFDL-1.1-only'|'GFDL-1.1-or-later'|'GFDL-1.2-only'|'GFDL-1.2-or-later'|'GFDL-1.3-only'|'GFDL-1.3-or-later'|'Giftware'|'GL2PS'|'Glide'|'Glulxe'|'gnuplot'|'GPL-1.0-only'|'GPL-1.0-or-later'|'GPL-2.0-only'|'GPL-2.0-or-later'|'GPL-3.0-only'|'GPL-3.0-or-later'|'gSOAP-1.3b'|'HaskellReport'|'HPND'|'IBM-pibs'|'ICU'|'IJG'|'ImageMagick'|'iMatix'|'Imlib2'|'Info-ZIP'|'Intel-ACPI'|'Intel'|'Interbase-1.0'|'IPA'|'IPL-1.0'|'ISC'|'JasPer-2.0'|'JSON'|'LAL-1.2'|'LAL-1.3'|'Latex2e'|'Leptonica'|'LGPL-2.0-only'|'LGPL-2.0-or-later'|'LGPL-2.1-only'|'LGPL-2.1-or-later'|'LGPL-3.0-only'|'LGPL-3.0-or-later'|'LGPLLR'|'Libpng'|'libtiff'|'LiLiQ-P-1.1'|'LiLiQ-R-1.1'|'LiLiQ-Rplus-1.1'|'Linux-OpenIB'|'LPL-1.0'|'LPL-1.02'|'LPPL-1.0'|'LPPL-1.1'|'LPPL-1.2'|'LPPL-1.3a'|'LPPL-1.3c'|'MakeIndex'|'MirOS'|'MIT-0'|'MIT-advertising'|'MIT-CMU'|'MIT-enna'|'MIT-feh'|'MIT'|'MITNFA'|'Motosoto'|'mpich2'|'MPL-1.0'|'MPL-1.1'|'MPL-2.0-no-copyleft-exception'|'MPL-2.0'|'MS-PL'|'MS-RL'|'MTLL'|'Multics'|'Mup'|'NASA-1.3'|'Naumen'|'NBPL-1.0'|'NCSA'|'Net-SNMP'|'NetCDF'|'Newsletr'|'NGPL'|'NLOD-1.0'|'NLPL'|'Nokia'|'NOSL'|'Noweb'|'NPL-1.0'|'NPL-1.1'|'NPOSL-3.0'|'NRL'|'NTP'|'OCCT-PL'|'OCLC-2.0'|'ODbL-1.0'|'OFL-1.0'|'OFL-1.1'|'OGTSL'|'OLDAP-1.1'|'OLDAP-1.2'|'OLDAP-1.3'|'OLDAP-1.4'|'OLDAP-2.0.1'|'OLDAP-2.0'|'OLDAP-2.1'|'OLDAP-2.2.1'|'OLDAP-2.2.2'|'OLDAP-2.2'|'OLDAP-2.3'|'OLDAP-2.4'|'OLDAP-2.5'|'OLDAP-2.6'|'OLDAP-2.7'|'OLDAP-2.8'|'OML'|'OpenSSL'|'OPL-1.0'|'OSET-PL-2.1'|'OSL-1.0'|'OSL-1.1'|'OSL-2.0'|'OSL-2.1'|'OSL-3.0'|'PDDL-1.0'|'PHP-3.0'|'PHP-3.01'|'Plexus'|'PostgreSQL'|'psfrag'|'psutils'|'Python-2.0'|'Qhull'|'QPL-1.0'|'Rdisc'|'RHeCos-1.1'|'RPL-1.1'|'RPL-1.5'|'RPSL-1.0'|'RSA-MD'|'RSCPL'|'Ruby'|'SAX-PD'|'Saxpath'|'SCEA'|'Sendmail'|'SGI-B-1.0'|'SGI-B-1.1'|'SGI-B-2.0'|'SimPL-2.0'|'SISSL-1.2'|'SISSL'|'Sleepycat'|'SMLNJ'|'SMPPL'|'SNIA'|'Spencer-86'|'Spencer-94'|'Spencer-99'|'SPL-1.0'|'SugarCRM-1.1.3'|'SWL'|'TCL'|'TCP-wrappers'|'TMate'|'TORQUE-1.1'|'TOSL'|'Unicode-DFS-2015'|'Unicode-DFS-2016'|'Unicode-TOU'|'Unlicense'|'UPL-1.0'|'Vim'|'VOSTROM'|'VSL-1.0'|'W3C-19980720'|'W3C-20150513'|'W3C'|'Watcom-1.0'|'Wsuipa'|'WTFPL'|'X11'|'Xerox'|'XFree86-1.1'|'xinetd'|'Xnet'|'xpp'|'XSkat'|'YPL-1.0'|'YPL-1.1'|'Zed'|'Zend-2.0'|'Zimbra-1.3'|'Zimbra-1.4'|'zlib-acknowledgement'|'Zlib'|'ZPL-1.1'|'ZPL-2.0'|'ZPL-2.1') | undefined;
  _license?: Element | undefined;
  /**
   * Information about an assembled implementation guide, created by the publication tooling.
   */
  manifest?: ImplementationGuideManifest | undefined;
  /**
   * A natural language name identifying the implementation guide. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The NPM package name for this Implementation Guide, used in the NPM package distribution, which is the primary mechanism by which FHIR based tooling manages IG dependencies. This value must be globally unique, and should be assigned with care.
   * Many (if not all) IG publishing tools will require that this element be present. For implementation guides published through HL7 or the FHIR foundation, the FHIR product director assigns package IDs.
   */
  packageId: string;
  _packageId?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the implementation guide.
   * Usually an organization but may be an individual. The publisher (or steward) of the implementation guide is the organization or individual primarily responsible for the maintenance and upkeep of the implementation guide. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the implementation guide. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this implementation guide is needed and why it has been designed as it has.
   * This element does not describe the usage of the implementation guide. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this implementation guide.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The status of this implementation guide. Enables tracking the life-cycle of the content.
   * Allows filtering of implementation guides that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the implementation guide.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this implementation guide is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the implementation guide is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate implementation guide instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different implementation guide instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the implementation guide with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * An organization that manufactures this ingredient
 */
export interface IngredientManufacturer extends BackboneElement {
  /**
   * An organization that manufactures this ingredient.
   */
  manufacturer: Reference;
  /**
   * The way in which this manufacturer is associated with the ingredient. For example whether it is a possible one (others allowed), or an exclusive authorized one for this ingredient. Note that this is not the manufacturing process role.
   */
  role?: ('allowed'|'possible'|'actual') | undefined;
  _role?: Element | undefined;
}
/**
 * Strength expressed in terms of a reference substance
 */
export interface IngredientSubstanceStrengthReferenceStrength extends BackboneElement {
  /**
   * The country or countries for which the strength range applies.
   */
  country?: CodeableConcept[] | undefined;
  /**
   * For when strength is measured at a particular point or distance.
   */
  measurementPoint?: string | undefined;
  _measurementPoint?: Element | undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strengthQuantity?: Quantity | undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strengthRatio?: Ratio | undefined;
  /**
   * Strength expressed in terms of a reference substance.
   */
  strengthRatioRange?: RatioRange | undefined;
  /**
   * Relevant reference substance.
   */
  substance: CodeableReference;
}
/**
 * The quantity of substance, per presentation, or per volume or mass, and type of quantity
 */
export interface IngredientSubstanceStrength extends BackboneElement {
  /**
   * A code that indicates if the strength is, for example, based on the ingredient substance as stated or on the substance base (when the ingredient is a salt).
   */
  basis?: CodeableConcept | undefined;
  /**
   * The strength per unitary volume (or mass).
   */
  concentrationCodeableConcept?: CodeableConcept | undefined;
  /**
   * The strength per unitary volume (or mass).
   */
  concentrationQuantity?: Quantity | undefined;
  /**
   * The strength per unitary volume (or mass).
   */
  concentrationRatio?: Ratio | undefined;
  /**
   * The strength per unitary volume (or mass).
   */
  concentrationRatioRange?: RatioRange | undefined;
  /**
   * The country or countries for which the strength range applies.
   */
  country?: CodeableConcept[] | undefined;
  /**
   * For when strength is measured at a particular point or distance. There are products where strength is measured at a particular point. For example, the strength of the ingredient in some inhalers is measured at a particular position relative to the point of aerosolization.
   */
  measurementPoint?: string | undefined;
  _measurementPoint?: Element | undefined;
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
   */
  presentationCodeableConcept?: CodeableConcept | undefined;
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
   */
  presentationQuantity?: Quantity | undefined;
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
   */
  presentationRatio?: Ratio | undefined;
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
   */
  presentationRatioRange?: RatioRange | undefined;
  /**
   * Strength expressed in terms of a reference substance. For when the ingredient strength is additionally expressed as equivalent to the strength of some other closely related substance (e.g. salt vs. base). Reference strength represents the strength (quantitative composition) of the active moiety of the active substance. There are situations when the active substance and active moiety are different, therefore both a strength and a reference strength are needed.
   */
  referenceStrength?: IngredientSubstanceStrengthReferenceStrength[] | undefined;
  /**
   * A textual represention of either the whole of the concentration strength or a part of it - with the rest being in Strength.concentration as a ratio.
   */
  textConcentration?: string | undefined;
  _textConcentration?: Element | undefined;
  /**
   * A textual represention of either the whole of the presentation strength or a part of it - with the rest being in Strength.presentation as a ratio.
   */
  textPresentation?: string | undefined;
  _textPresentation?: Element | undefined;
}
/**
 * The substance that comprises this ingredient
 */
export interface IngredientSubstance extends BackboneElement {
  /**
   * A code or full resource that represents the ingredient's substance.
   */
  code: CodeableReference;
  /**
   * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. The allowed repetitions do not represent different strengths, but are different representations - mathematically equivalent - of a single strength.
   */
  strength?: IngredientSubstanceStrength[] | undefined;
}
export interface Ingredient extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Ingredient';
  /**
   * If the ingredient is a known or suspected allergen. Note that this is a property of the substance, so if a reference to a SubstanceDefinition is used to decribe that (rather than just a code), the allergen information should go there, not here.
   */
  allergenicIndicator?: boolean | undefined;
  _allergenicIndicator?: Element | undefined;
  /**
   * A place for providing any notes that are relevant to the component, e.g. removed during process, adjusted for loss on drying.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * The product which this ingredient is a constituent part of.
   */
  for?: Reference[] | undefined;
  /**
   * A classification of the ingredient identifying its precise purpose(s) in the drug product. This extends the Ingredient.role to add more detail. Example: antioxidant, alkalizing agent.
   */
  function?: CodeableConcept[] | undefined;
  /**
   * A classification of the ingredient according to where in the physical item it tends to be used, such the outer shell of a tablet, inner body or ink.
   */
  group?: CodeableConcept | undefined;
  /**
   * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: Identifier | undefined;
  /**
   * The organization(s) that manufacture this ingredient. Can be used to indicate:         1) Organizations we are aware of that manufacture this ingredient         2) Specific Manufacturer(s) currently being used         3) Set of organisations allowed to manufacture this ingredient for this product         Users must be clear on the application of context relevant to their use case.
   */
  manufacturer?: IngredientManufacturer[] | undefined;
  /**
   * A classification of the ingredient identifying its purpose within the product, e.g. active, inactive.
   */
  role: CodeableConcept;
  /**
   * The status of this ingredient. Enables tracking the life-cycle of the content.
   * Allows filtering of ingredient that are appropriate for use versus not.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * The substance that comprises this ingredient.
   */
  substance: IngredientSubstance;
}
/**
 * Benefit limits
 */
export interface InsurancePlanCoverageBenefitLimit extends BackboneElement {
  /**
   * The specific limit on the benefit.
   * Use `CodeableConcept.text` element if the data is free (uncoded) text.
   */
  code?: CodeableConcept | undefined;
  /**
   * The maximum amount of a service item a plan will pay for a covered benefit.  For examples. wellness visits, or eyeglasses.
   * May also be called “eligible expense,” “payment allowance,” or “negotiated rate.”.
   */
  value?: Quantity | undefined;
}
/**
 * List of benefits
 */
export interface InsurancePlanCoverageBenefit extends BackboneElement {
  /**
   * The specific limits on the benefit.
   */
  limit?: InsurancePlanCoverageBenefitLimit[] | undefined;
  /**
   * The referral requirements to have access/coverage for this benefit.
   */
  requirement?: string | undefined;
  _requirement?: Element | undefined;
  /**
   * Type of benefit (primary care; speciality care; inpatient; outpatient).
   */
  type: CodeableConcept;
}
/**
 * Coverage details
 */
export interface InsurancePlanCoverage extends BackboneElement {
  /**
   * Specific benefits under this type of coverage.
   */
  coverageBenefit: InsurancePlanCoverageBenefit[];
  /**
   * Reference to the network that providing the type of coverage.
   * Networks are represented as a hierarchy of organization resources.
   */
  network?: Reference[] | undefined;
  /**
   * Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
   */
  type: CodeableConcept;
}
/**
 * Overall costs
 */
export interface InsurancePlanPlanGeneralCost extends BackboneElement {
  /**
   * Additional information about the general costs associated with this plan.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Value of the cost.
   */
  cost?: Money | undefined;
  /**
   * Number of participants enrolled in the plan.
   */
  groupSize?: number | undefined;
  /**
   * Type of cost.
   */
  type?: CodeableConcept | undefined;
}
/**
 * List of the costs
 */
export interface InsurancePlanPlanSpecificCostBenefitCost extends BackboneElement {
  /**
   * Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
   */
  applicability?: ('in-network'|'out-of-network'|'other') | undefined;
  /**
   * Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
   */
  qualifiers?: CodeableConcept[] | undefined;
  /**
   * Type of cost (copay; individual cap; family cap; coinsurance; deductible).
   */
  type: CodeableConcept;
  /**
   * The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
   */
  value?: Quantity | undefined;
}
/**
 * Benefits list
 */
export interface InsurancePlanPlanSpecificCostBenefit extends BackboneElement {
  /**
   * List of the costs associated with a specific benefit.
   */
  cost?: InsurancePlanPlanSpecificCostBenefitCost[] | undefined;
  /**
   * Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
   */
  type: CodeableConcept;
}
/**
 * Specific costs
 */
export interface InsurancePlanPlanSpecificCost extends BackboneElement {
  /**
   * List of the specific benefits under this category of benefit.
   */
  planBenefit?: InsurancePlanPlanSpecificCostBenefit[] | undefined;
  /**
   * General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
   */
  category: CodeableConcept;
}
/**
 * Plan details
 */
export interface InsurancePlanPlan extends BackboneElement {
  /**
   * The geographic region in which a health insurance plan's benefits apply.
   */
  coverageArea?: Reference[] | undefined;
  /**
   * Overall costs associated with the plan.
   */
  generalCost?: InsurancePlanPlanGeneralCost[] | undefined;
  /**
   * Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Reference to the network that providing the type of coverage.
   * Networks are represented as a hierarchy of organization resources.
   */
  network?: Reference[] | undefined;
  /**
   * Costs associated with the coverage provided by the product.
   */
  specificCost?: InsurancePlanPlanSpecificCost[] | undefined;
  /**
   * Type of plan. For example, "Platinum" or "High Deductable".
   */
  type?: CodeableConcept | undefined;
}
export interface InsurancePlan extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'InsurancePlan';
  /**
   * An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
   */
  administeredBy?: Reference | undefined;
  /**
   * A list of alternate names that the product is known as, or was known as in the past.
   * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the product/plan.
   */
  alias?: string[] | undefined;
  _alias?: Element[] | undefined;
  /**
   * The contact details of communication devices available relevant to the specific Insurance Plan/Product. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
   * The address/telecom use code 'home' are not to be used.
   */
  contact?: ExtendedContactDetail[] | undefined;
  /**
   * Details about the coverage offered by the insurance product.
   */
  coverage?: InsurancePlanCoverage[] | undefined;
  /**
   * The geographic region in which a health insurance product's benefits apply.
   */
  coverageArea?: Reference[] | undefined;
  /**
   * The technical endpoints providing access to services operated for the health insurance product.
   */
  endpoint?: Reference[] | undefined;
  /**
   * Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Official name of the health insurance product as designated by the owner.
   * If the name of the product/plan changes, consider putting the old name in the alias column so that it can still be located through searches.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Reference to the network included in the health insurance product.
   * Networks are represented as a hierarchy of organization resources.
   */
  network?: Reference[] | undefined;
  /**
   * The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.
   */
  ownedBy?: Reference | undefined;
  /**
   * The period of time that the health insurance product is available.
   */
  period?: Period | undefined;
  /**
   * Details about an insurance plan.
   */
  plan?: InsurancePlanPlan[] | undefined;
  /**
   * The current state of the health insurance product.
   */
  status?: ('draft'|'active'|'retired'|'unknown') | undefined;
  _status?: Element | undefined;
  /**
   * The kind of health insurance product.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Association with other items or products
 */
export interface InventoryItemAssociation extends BackboneElement {
  /**
   * This attribute defined the type of association when establishing associations or relations between items, e.g. 'packaged within' or 'used with' or 'to be mixed with.
   */
  associationType: CodeableConcept;
  /**
   * The quantity of the related product in this product - Numerator is the quantity of the related product. Denominator is the quantity of the present product. For example a value of 20 means that this product contains 20 units of the related product; a value of 1:20 means the inverse - that the contained product contains 20 units of the present product.
   */
  quantity: Ratio;
  /**
   * The related item or product.
   */
  relatedItem: Reference;
}
/**
 * Characteristic of the item
 */
export interface InventoryItemCharacteristic extends BackboneElement {
  /**
   * The type of characteristic that is being defined.
   */
  characteristicType: CodeableConcept;
  /**
   * The value of the attribute.
   * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
   */
  valueAddress?: Address | undefined;
  /**
   * The value of the attribute.
   * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * The value of the attribute.
   * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of the attribute.
   * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the attribute.
   * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The value of the attribute.
   * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
   */
  valuenumber?: number | undefined;
  /**
   * The value of the attribute.
   * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
   */
  valueDuration?: Duration | undefined;
  /**
   * The value of the attribute.
   * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the attribute.
   * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
   */
  valueRange?: Range | undefined;
  /**
   * The value of the attribute.
   * The string value is used for characteristics that are descriptive and not codeable information. CodeableConcept.text is used when the characteristic is discrete and could otherwise be coded but for which there is no code available.
   */
  valueRatio?: Ratio | undefined;
}
/**
 * Descriptive characteristics of the item
 */
export interface InventoryItemDescription extends BackboneElement {
  /**
   * Textual description of the item.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The language for the item description, when an item must be described in different languages and those languages may be authoritative and not translations of a 'main' language.
   */
  language?: ('ar'|'bg'|'bg-BG'|'bn'|'cs'|'cs-CZ'|'bs'|'bs-BA'|'da'|'da-DK'|'de'|'de-AT'|'de-CH'|'de-DE'|'el'|'el-GR'|'en'|'en-AU'|'en-CA'|'en-GB'|'en-IN'|'en-NZ'|'en-SG'|'en-US'|'es'|'es-AR'|'es-ES'|'es-UY'|'et'|'et-EE'|'fi'|'fr'|'fr-BE'|'fr-CH'|'fr-FR'|'fi-FI'|'fr-CA'|'fy'|'fy-NL'|'hi'|'hr'|'hr-HR'|'is'|'is-IS'|'it'|'it-CH'|'it-IT'|'ja'|'ko'|'lt'|'lt-LT'|'lv'|'lv-LV'|'nl'|'nl-BE'|'nl-NL'|'no'|'no-NO'|'pa'|'pl'|'pl-PL'|'pt'|'pt-PT'|'pt-BR'|'ro'|'ro-RO'|'ru'|'ru-RU'|'sk'|'sk-SK'|'sl'|'sl-SI'|'sr'|'sr-RS'|'sv'|'sv-SE'|'te'|'zh'|'zh-CN'|'zh-HK'|'zh-SG'|'zh-TW') | undefined;
  _language?: Element | undefined;
}
/**
 * Instances or occurrences of the product
 */
export interface InventoryItemInstance extends BackboneElement {
  /**
   * The expiry date or date and time for the product.
   */
  expiry?: string | undefined;
  _expiry?: Element | undefined;
  /**
   * The identifier for the physical instance, typically a serial number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The location that the item is associated with.
   */
  location?: Reference | undefined;
  /**
   * The lot or batch number of the item.
   */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;
  /**
   * The subject that the item is associated with.
   */
  subject?: Reference | undefined;
}
/**
 * The item name(s) - the brand name, or common name, functional name, generic name or others
 */
export interface InventoryItemName extends BackboneElement {
  /**
   * The language that the item name is expressed in.
   */
  language: ('ar'|'bg'|'bg-BG'|'bn'|'cs'|'cs-CZ'|'bs'|'bs-BA'|'da'|'da-DK'|'de'|'de-AT'|'de-CH'|'de-DE'|'el'|'el-GR'|'en'|'en-AU'|'en-CA'|'en-GB'|'en-IN'|'en-NZ'|'en-SG'|'en-US'|'es'|'es-AR'|'es-ES'|'es-UY'|'et'|'et-EE'|'fi'|'fr'|'fr-BE'|'fr-CH'|'fr-FR'|'fi-FI'|'fr-CA'|'fy'|'fy-NL'|'hi'|'hr'|'hr-HR'|'is'|'is-IS'|'it'|'it-CH'|'it-IT'|'ja'|'ko'|'lt'|'lt-LT'|'lv'|'lv-LV'|'nl'|'nl-BE'|'nl-NL'|'no'|'no-NO'|'pa'|'pl'|'pl-PL'|'pt'|'pt-PT'|'pt-BR'|'ro'|'ro-RO'|'ru'|'ru-RU'|'sk'|'sk-SK'|'sl'|'sl-SI'|'sr'|'sr-RS'|'sv'|'sv-SE'|'te'|'zh'|'zh-CN'|'zh-HK'|'zh-SG'|'zh-TW');
  _language?: Element | undefined;
  /**
   * The name or designation that the item is given.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The type of name e.g. 'brand-name', 'functional-name', 'common-name'.
   */
  nameType: Coding;
}
/**
 * Organization(s) responsible for the product
 */
export interface InventoryItemResponsibleOrganization extends BackboneElement {
  /**
   * An organization that has an association with the item, e.g. manufacturer, distributor, responsible, etc.
   */
  organization: Reference;
  /**
   * The role of the organization e.g. manufacturer, distributor, etc.
   */
  role: CodeableConcept;
}
export interface InventoryItem extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'InventoryItem';
  /**
   * Association with other items or products.
   */
  association?: InventoryItemAssociation[] | undefined;
  /**
   * The base unit of measure - the unit in which the product is used or counted.
   */
  baseUnit?: CodeableConcept | undefined;
  /**
   * Category or class of the item.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The descriptive or identifying characteristics of the item.
   */
  characteristic?: InventoryItemCharacteristic[] | undefined;
  /**
   * Code designating the specific type of item.
   */
  code?: CodeableConcept[] | undefined;
  /**
   * The descriptive characteristics of the inventory item.
   */
  description?: InventoryItemDescription | undefined;
  /**
   * Business identifier for the inventory item.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Instances or occurrences of the product.
   */
  instance?: InventoryItemInstance | undefined;
  /**
   * The usage status e.g. recalled, in use, discarded... This can be used to indicate that the items have been taken out of inventory, or are in use, etc.
   */
  inventoryStatus?: CodeableConcept[] | undefined;
  /**
   * The item name(s) - the brand name, or common name, functional name, generic name.
   */
  name?: InventoryItemName[] | undefined;
  /**
   * Net content or amount present in the item.
   */
  netContent?: Quantity | undefined;
  /**
   * Link to a product resource used in clinical workflows.
   */
  productReference?: Reference | undefined;
  /**
   * Organization(s) responsible for the product.
   */
  responsibleOrganization?: InventoryItemResponsibleOrganization[] | undefined;
  /**
   * Status of the item entry.
   */
  status: ('active'|'inactive'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
}
/**
 * The item or items in this listing
 */
export interface InventoryReportInventoryListingItem extends BackboneElement {
  /**
   * The inventory category or classification of the items being reported. This is meant not for defining the product, but for inventory categories e.g. 'pending recount' or 'damaged'.
   */
  category?: CodeableConcept | undefined;
  /**
   * The code or reference to the item type.
   */
  item: CodeableReference;
  /**
   * The quantity of the item or items being reported.
   */
  quantity: Quantity;
}
/**
 * An inventory listing section (grouped by any of the attributes)
 */
export interface InventoryReportInventoryListing extends BackboneElement {
  /**
   * The date and time when the items were counted.
   */
  countingDateTime?: string | undefined;
  _countingDateTime?: Element | undefined;
  /**
   * The item or items in this listing.
   */
  item?: InventoryReportInventoryListingItem[] | undefined;
  /**
   * The status of the items.
   */
  itemStatus?: CodeableConcept | undefined;
  /**
   * Location of the inventory items.
   */
  location?: Reference | undefined;
}
export interface InventoryReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'InventoryReport';
  /**
   * Whether the report is about the current inventory count (snapshot) or a differential change in inventory (change).
   */
  countType: ('snapshot'|'difference');
  _countType?: Element | undefined;
  /**
   * Business identifier for the InventoryReport.
   */
  identifier?: Identifier[] | undefined;
  /**
   * An inventory listing section (grouped by any of the attributes).
   */
  inventoryListing?: InventoryReportInventoryListing[] | undefined;
  /**
   * A note associated with the InventoryReport.
   */
  note?: Annotation[] | undefined;
  /**
   * What type of operation is being performed - addition or subtraction.
   */
  operationType?: CodeableConcept | undefined;
  /**
   * The reason for this count - regular count, ad-hoc count, new arrivals, etc.
   */
  operationTypeReason?: CodeableConcept | undefined;
  /**
   * When the report has been submitted.
   */
  reportedDateTime: string;
  _reportedDateTime?: Element | undefined;
  /**
   * Who submits the report.
   */
  reporter?: Reference | undefined;
  /**
   * The period the report refers to.
   */
  reportingPeriod?: Period | undefined;
  /**
   * The status of the inventory check or notification - whether this is draft (e.g. the report is still pending some updates) or active.
   */
  status: ('draft'|'requested'|'active'|'entered-in-error');
  _status?: Element | undefined;
}
/**
 * Line items of this Invoice
 */
export interface InvoiceLineItem extends BackboneElement {
  /**
   * The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
   */
  chargeItemCodeableConcept?: CodeableConcept | undefined;
  /**
   * The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
   */
  chargeItemReference?: Reference | undefined;
  /**
   * The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
   */
  priceComponent?: MonetaryComponent[] | undefined;
  /**
   * Sequence in which the items appear on the invoice.
   */
  sequence?: number | undefined;
  /**
   * Date/time(s) range when this service was delivered or completed.
   */
  servicedstring?: string | undefined;
  _servicedstring?: Element | undefined;
  /**
   * Date/time(s) range when this service was delivered or completed.
   */
  servicedPeriod?: Period | undefined;
}
/**
 * Participant in creation of this Invoice
 */
export interface InvoiceParticipant extends BackboneElement {
  /**
   * The device, practitioner, etc. who performed or participated in the service.
   */
  actor: Reference;
  /**
   * Describes the type of involvement (e.g. transcriptionist, creator etc.). If the invoice has been created automatically, the Participant may be a billing engine or another kind of device.
   */
  role?: CodeableConcept | undefined;
}
export interface Invoice extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Invoice';
  /**
   * Account which is supposed to be balanced with this Invoice.
   * Systems posting the ChargeItems might not always be able to determine, which accounts the Items need to be places into. It is up to the potprocessing Financial System to apply internal rules to decide based on the Encounter/EpisodeOfCare/Patient/Coverage context and the type of ChargeItem, which Account is appropriate.
   */
  account?: Reference | undefined;
  /**
   * In case of Invoice cancellation a reason must be given (entered in error, superseded by corrected invoice etc.).
   * Derived Profiles may choose to add invariants requiring this field to be populated if either priceOverride or factorOverride have been filled.
   */
  cancelledReason?: string | undefined;
  _cancelledReason?: Element | undefined;
  /**
   * Date/time(s) of when this Invoice was posted.
   * The list of types may be constrained as appropriate for the type of charge item.
   */
  creation?: string | undefined;
  _creation?: Element | undefined;
  /**
   * Depricared by the element below.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Identifier of this Invoice, often used for reference in correspondence about this invoice or for tracking of payments.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organizationissuing the Invoice.
   * Practitioners and Devices can be associated with multiple organizations. It has to be made clear, on behalf of which Organization the services have been rendered.
   */
  issuer?: Reference | undefined;
  /**
   * Each line item represents one charge for goods and services rendered. Details such.ofType(date), code and amount are found in the referenced ChargeItem resource.
   */
  lineItem?: InvoiceLineItem[] | undefined;
  /**
   * Comments made about the invoice by the issuer, subject, or other participants.
   */
  note?: Annotation[] | undefined;
  /**
   * Indicates who or what performed or participated in the charged service.
   */
  participant?: InvoiceParticipant[] | undefined;
  /**
   * Payment details such as banking details, period of payment, deductibles, methods of payment.
   * Derived Profiles may chose to add invariants requiring this field to be populated if either priceOverride or factorOverride have been filled.
   */
  paymentTerms?: string | undefined;
  _paymentTerms?: Element | undefined;
  /**
   * Date/time(s) range of services included in this invoice.
   */
  periodstring?: string | undefined;
  _periodstring?: Element | undefined;
  /**
   * Date/time(s) range of services included in this invoice.
   */
  periodPeriod?: Period | undefined;
  /**
   * The individual or Organization responsible for balancing of this invoice.
   */
  recipient?: Reference | undefined;
  /**
   * The current state of the Invoice.
   */
  status: ('draft'|'issued'|'balanced'|'cancelled'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The individual or set of individuals receiving the goods and services billed in this invoice.
   */
  subject?: Reference | undefined;
  /**
   * Invoice total, tax included.
   * There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
   */
  totalGross?: Money | undefined;
  /**
   * Invoice total , taxes excluded.
   * There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
   */
  totalNet?: Money | undefined;
  /**
   * The total amount for the Invoice may be calculated as the sum of the line items with surcharges/deductions that apply in certain conditions.  The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the total price was calculated.
   */
  totalPriceComponent?: MonetaryComponent[] | undefined;
  /**
   * Type of Invoice depending on domain, realm an usage (e.g. internal/external, dental, preliminary).
   */
  type?: CodeableConcept | undefined;
}
export interface Library extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Library';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   */
  author?: ContactDetail[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the contentType of the attachment determines how to interpret the content.
   */
  content?: Attachment[] | undefined;
  /**
   * A copyright statement relating to the library and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the library.
   * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * Describes a set of data that must be provided in order to be able to successfully perform the computations defined by the library.
   */
  dataRequirement?: DataRequirement[] | undefined;
  /**
   * The date  (and optionally time) when the library was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the library changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the library. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the library from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the library as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the library is presumed to be the predominant language in the place the library was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   */
  editor?: ContactDetail[] | undefined;
  /**
   * The period during which the library content was or is planned to be in active use.
   * The effective period for a library determines when the content is applicable for usage and is independent of publication and review dates. For example, a library intended to be used for the year 2016 might be published in 2015.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * A Boolean value to indicate that this library is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of librarys that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this library when it is represented in other formats, or referenced in a specification, model, design or an instance. e.g. CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this library outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the library is intended to be used.
   * It may be possible for the library to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the library. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The parameter element defines parameters used by the library.
   */
  parameter?: ParameterDefinition[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the library.
   * Usually an organization but may be an individual. The publisher (or steward) of the library is the organization or individual primarily responsible for the maintenance and upkeep of the library. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the library. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this library is needed and why it has been designed as it has.
   * This element does not describe the usage of the library. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this library.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Related artifacts such as additional documentation, justification, or bibliographic references.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * The status of this library. Enables tracking the life-cycle of the content.
   * Allows filtering of libraries that are appropriate for use vs. not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A code or group definition that describes the intended subject of the contents of the library.
   */
  subjectCodeableConcept?: CodeableConcept | undefined;
  /**
   * A code or group definition that describes the intended subject of the contents of the library.
   */
  subjectReference?: Reference | undefined;
  /**
   * An explanatory or alternate title for the library giving additional information about its content.
   */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the library.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptive topics related to the content of the library. Topics provide a high-level categorization of the library that can be useful for filtering and searching.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * Identifies the type of library such as a Logic Library, Model Definition, Asset Collection, or Module Definition.
   */
  type: CodeableConcept;
  /**
   * An absolute URI that is used to identify this library when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this library is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the library is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * A detailed description of how the library is used from a clinical perspective.
   */
  usage?: string | undefined;
  _usage?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate library instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the library when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the library author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
   * There may be different library instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the library with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Item to be linked
 */
export interface LinkageItem extends BackboneElement {
  /**
   * The resource instance being linked as part of the group.
   */
  resource: Reference;
  /**
   * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
   */
  type: ('source'|'alternate'|'historical');
  _type?: Element | undefined;
}
export interface Linkage extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Linkage';
  /**
   * Indicates whether the asserted set of linkages are considered to be "in effect".
   * If false, any asserted linkages should not be considered current/relevant/applicable.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.
   */
  author?: Reference | undefined;
  /**
   * Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
   */
  item: LinkageItem[];
}
/**
 * Entries in the list
 * If there are no entries in the list, an emptyReason SHOULD be provided.
 */
export interface ListEntry extends BackboneElement {
  /**
   * When this item was added to the list.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * True if this item is marked as deleted in the list.
   * If the flag means that the entry has actually been deleted from the list, the deleted element SHALL be true. A deleted entry should be displayed in narrative as deleted.  This element is labeled as a modifier because it indicates that an item is (to be) no longer in the list.
   */
  deleted?: boolean | undefined;
  _deleted?: Element | undefined;
  /**
   * The flag allows the system constructing the list to indicate the role and significance of the item in the list.
   * The flag can only be understood in the context of the List.code. If the flag means that the entry has actually been deleted from the list, the deleted element SHALL be true
   */
  flag?: CodeableConcept | undefined;
  /**
   * A reference to the actual resource from which data was derived.
   */
  item: Reference;
}
export interface List extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'List';
  /**
   * This code defines the purpose of the list - why it was created.
   * If there is no code, the purpose of the list is implied where it is used, such as in a document section using Document.section.code.
   */
  code?: CodeableConcept | undefined;
  /**
   * Date list was last reviewed/revised and determined to be 'current'.
   * The actual important date is the date of currency of the resources that were summarized, but it is usually assumed that these are current when the preparation occurs.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * If the list is empty, why the list is empty.
   * The various reasons for an empty list make a significant interpretation to its interpretation. Note that this code is for use when the entire list has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
   */
  emptyReason?: CodeableConcept | undefined;
  /**
   * The encounter that is the context in which this list was created.
   */
  encounter?: Reference | undefined;
  /**
   * Entries in this list.
   * If there are no entries in the list, an emptyReason SHOULD be provided.
   */
  entry?: ListEntry[] | undefined;
  /**
   * Identifier for the List assigned for business purposes outside the context of FHIR.
   */
  identifier?: Identifier[] | undefined;
  /**
   * How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
   * This element is labeled as a modifier because a change list must not be misunderstood as a complete list.
   */
  mode: ('working'|'snapshot'|'changes');
  _mode?: Element | undefined;
  /**
   * Comments that apply to the overall list.
   */
  note?: Annotation[] | undefined;
  /**
   * What order applies to the items in the list.
   * Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
   */
  orderedBy?: CodeableConcept | undefined;
  /**
   * The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list.
   * The primary source is the entity that made the decisions what items are in the list. This may be software or user.
   */
  source?: Reference | undefined;
  /**
   * Indicates the current state of this list.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('current'|'retired'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The common subject(s) (or patient(s)) of the resources that are in the list if there is one (or a set of subjects).
   * Some purely arbitrary lists do not have a common subject, so this is optional. Lists having multiple subjects may raise challenges for systems that base access control or other security considerations on linkages to 'subject'. E.g. if a List is associated with multiple Patient subjects, then it would be nominally part of multiple patient compartments, which might drive access rights.
   */
  subject?: Reference[] | undefined;
  /**
   * A label for the list assigned by the author.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * The absolute geographic location
 * To define a boundary shape for this location use the standard extension `[http://hl7.org/fhir/StructureDefinition/location-boundary-geojson](http://hl7.org/fhir/extensions/StructureDefinition-location-boundary-geojson.html)`, and search using the `contains` special search parameter.
 */
export interface LocationPosition extends BackboneElement {
  /**
   * Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes on Location main page).
   */
  altitude?: number | undefined;
  /**
   * Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes on Location main page).
   */
  latitude: number;
  /**
   * Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes on Location main page).
   */
  longitude: number;
}
export interface Location extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Location';
  /**
   * Physical location.
   * Additional addresses should be recorded using another instance of the Location resource, or via the Organization.
   */
  address?: Address | undefined;
  /**
   * A list of alternate names that the location is known as, or was known as, in the past.
   * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the location.
   */
  alias?: string[] | undefined;
  _alias?: Element[] | undefined;
  /**
   * Collection of characteristics (attributes).
   * These could be such things as is wheelchair accessible.
   */
  characteristic?: CodeableConcept[] | undefined;
  /**
   * The contact details of communication devices available at the location. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
   * The address/telecom use code 'home' are not to be used. Note that these contacts are not the contact details of people who provide the service (that would be through PractitionerRole), these are official contacts for the Healthcare itself for specific purposes. E.g. Mailing Addresses, Billing Addresses, Contact numbers for Booking or Billing Enquiries, general web address, web address for online bookings etc.
   * If this is empty (or the type of interest is empty), refer to the organization's contacts.
   */
  contact?: ExtendedContactDetail[] | undefined;
  /**
   * Description of the Location, which helps in finding or referencing the place.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Technical endpoints providing access to services operated for the location.
   */
  endpoint?: Reference[] | undefined;
  /**
   * Physical form of the location, e.g. building, room, vehicle, road, virtual.
   */
  form?: CodeableConcept | undefined;
  /**
   * What days/times during a week is this location usually open, and any exceptions where the location is not available.
   * This type of information is commonly found published in directories and on websites informing customers when the facility is available.
   * Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
   * Systems may choose to render availability differently than it is exchanged on the interface. For example, rather than "Mon, Tue, Wed, Thur, Fri from 9am-12am; Mon, Tue, Wed, Thur, Fri from 1pm-5pm" as would be implied by two availableTime repetitions, an application could render this information as "Mon-Fri 9-12am and 1-5pm".
   * The availableStartTime is the opening time, and the availableEndTime is the closing time.
   */
  hoursOfOperation?: Availability[] | undefined;
  /**
   * Unique code or number identifying the location to its users.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization responsible for the provisioning and upkeep of the location.
   * This can also be used as the part of the organization hierarchy where this location provides services. These services can be defined through the HealthcareService resource.
   */
  managingOrganization?: Reference | undefined;
  /**
   * Indicates whether a resource instance represents a specific location or a class of locations.
   * This is labeled as a modifier because whether or not the location is a class of locations changes how it can be used and understood.
   */
  mode?: ('instance'|'kind') | undefined;
  _mode?: Element | undefined;
  /**
   * Name of the location as used by humans. Does not need to be unique.
   * If the name of a location changes, consider putting the old name in the alias column so that it can still be located through searches.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The operational status covers operation values most relevant to beds (but can also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This typically covers concepts such as contamination, housekeeping, and other activities like maintenance.
   */
  operationalStatus?: Coding | undefined;
  /**
   * Another Location of which this Location is physically a part of.
   */
  partOf?: Reference | undefined;
  /**
   * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
   * To define a boundary shape for this location use the standard extension `[http://hl7.org/fhir/StructureDefinition/location-boundary-geojson](http://hl7.org/fhir/extensions/StructureDefinition-location-boundary-geojson.html)`, and search using the `contains` special search parameter.
   */
  position?: LocationPosition | undefined;
  /**
   * The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
   */
  status?: ('active'|'suspended'|'inactive') | undefined;
  _status?: Element | undefined;
  /**
   * Indicates the type of function performed at the location.
   */
  type?: CodeableConcept[] | undefined;
  /**
   * Connection details of a virtual service (e.g. shared conference call facility with dedicated number/details).
   * There are two types of virtual meetings that often exist:
   * * a persistent, virtual meeting room that can only be used for a single purpose at a time,
   *  * and a dynamic virtual meeting room that is generated on demand for a specific purpose.
   *  Implementers may consider using Appointment.virtualService for virtual meeting rooms that are generated on-demand.
   */
  virtualService?: VirtualServiceDetail[] | undefined;
}
/**
 * A reference to a constituent of the manufactured item as a whole, linked here so that its component location within the item can be indicated. This not where the item's ingredient are primarily stated (for which see Ingredient.for or ManufacturedItemDefinition.ingredient)
 */
export interface ManufacturedItemDefinitionComponentConstituent extends BackboneElement {
  /**
   * The measurable amount of the substance, expressable in different ways (e.g. by mass or volume).
   */
  amount?: Quantity[] | undefined;
  /**
   * The function of this constituent within the component e.g. binder.
   */
  function?: CodeableConcept[] | undefined;
  /**
   * The ingredient that is the constituent of the given component.
   */
  hasIngredient?: CodeableReference[] | undefined;
  /**
   * The physical location of the constituent/ingredient within the component. Example – if the component is the bead in the capsule, then the location would be where the ingredient resides within the product part – intragranular, extra-granular, etc.
   */
  location?: CodeableConcept[] | undefined;
}
/**
 * Physical parts of the manufactured item, that it is intrisically made from. This is distinct from the ingredients that are part of its chemical makeup
 */
export interface ManufacturedItemDefinitionComponent extends BackboneElement {
  /**
   * The measurable amount of total quantity of all substances in the component, expressable in different ways (e.g. by mass or volume).
   */
  amount?: Quantity[] | undefined;
  /**
   * A component that this component contains or is made from.
   */
  component?: ManufacturedItemDefinitionComponent[] | undefined;
  /**
   * A reference to a constituent of the manufactured item as a whole, linked here so that its component location within the item can be indicated. This not where the item's ingredient are primarily stated (for which see Ingredient.for or ManufacturedItemDefinition.ingredient).
   */
  constituent?: ManufacturedItemDefinitionComponentConstituent[] | undefined;
  /**
   * The function of this component within the item e.g. delivers active ingredient, masks taste.
   */
  function?: CodeableConcept[] | undefined;
  /**
   * General characteristics of this component.
   */
  property?: ManufacturedItemDefinitionProperty[] | undefined;
  /**
   * Defining type of the component e.g. shell, layer, ink.
   */
  type: CodeableConcept;
}
/**
 * General characteristics of this item
 */
export interface ManufacturedItemDefinitionProperty extends BackboneElement {
  /**
   * A code expressing the type of characteristic.
   */
  type: CodeableConcept;
  /**
   * A value for the characteristic.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * A value for the characteristic.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * A value for the characteristic.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * A value for the characteristic.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * A value for the characteristic.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * A value for the characteristic.
   */
  valueReference?: Reference | undefined;
}
export interface ManufacturedItemDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ManufacturedItemDefinition';
  /**
   * Physical parts of the manufactured item, that it is intrisically made from. This is distinct from the ingredients that are part of its chemical makeup.
   */
  component?: ManufacturedItemDefinitionComponent[] | undefined;
  /**
   * Unique identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The ingredients of this manufactured item. This is only needed if the ingredients are not specified by incoming references from the Ingredient resource.
   */
  ingredient?: CodeableConcept[] | undefined;
  /**
   * Dose form as manufactured and before any transformation into the pharmaceutical product.
   */
  manufacturedDoseForm: CodeableConcept;
  /**
   * Manufacturer of the item, one of several possible.
   */
  manufacturer?: Reference[] | undefined;
  /**
   * Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated.
   */
  marketingStatus?: MarketingStatus[] | undefined;
  /**
   * A descriptive name applied to this item.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * General characteristics of this item.
   */
  property?: ManufacturedItemDefinitionProperty[] | undefined;
  /**
   * The status of this item. Enables tracking the life-cycle of the content.
   * Allows filtering of manufactured items that are appropriate for use versus not.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * The “real-world” units in which the quantity of the manufactured item is described.
   */
  unitOfPresentation?: CodeableConcept | undefined;
}
/**
 * Population criteria
 */
export interface MeasureGroupPopulation extends BackboneElement {
  /**
   * Specifies which method should be used to aggregate measure observation values. For most scoring types, this is implied by scoring (e.g. a proportion measure counts members of the populations). For continuous variables, however, this information must be specified to ensure correct calculation.
   */
  aggregateMethod?: CodeableConcept | undefined;
  /**
   * The type of population criteria.
   */
  code?: CodeableConcept | undefined;
  /**
   * An expression that specifies the criteria for the population, typically the name of an expression in a library.
   * In the case of a continuous-variable or ratio measure, this may be the name of a function that calculates the value of the individual observation for each patient or event in the population. For these types of measures, individual observations are reported as observation resources included in the evaluatedResources bundle for each patient. See the MeasureReport resource or the Quality Reporting topic for more information.
   */
  criteria?: Expression | undefined;
  /**
   * The human readable description of this population criteria.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A Group resource that defines this population as a set of characteristics.
   * Note that this approach can only be used for measures where the basis is of the same type as the populations (e.g. a Patient-based measure, rather than an Encounter-based measure). In addition, the referenced Group resource SHALL be a definitional (as opposed to an actual) group.
   */
  groupDefinition?: Reference | undefined;
  /**
   * The id of a population element in this measure that provides the input for this population criteria. In most cases, the scoring structure of the measure implies specific relationships (e.g. the Numerator uses the Denominator as the source in a proportion scoring). In some cases, however, multiple possible choices exist and must be resolved explicitly. For example in a ratio measure with multiple initial populations, the denominator must specify which population should be used as the starting point.
   */
  inputPopulationId?: string | undefined;
  _inputPopulationId?: Element | undefined;
  /**
   * An identifier that is unique within the Measure allowing linkage to the equivalent population in a MeasureReport resource.
   * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.
   * LinkIds can have whitespaces and slashes by design. Tooling should not rely on linkIds being valid XHTML element IDs, and should not directly embed them as such
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
}
/**
 * Stratifier criteria component for the measure
 * Stratifiers are defined either as a single criteria, or as a set of component criteria.
 */
export interface MeasureGroupStratifierComponent extends BackboneElement {
  /**
   * Indicates a meaning for the stratifier component. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
   */
  code?: CodeableConcept | undefined;
  /**
   * An expression that specifies the criteria for this component of the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.
   */
  criteria?: Expression | undefined;
  /**
   * The human readable description of this stratifier criteria component.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A Group resource that defines this population as a set of characteristics.
   * Note that this approach can only be used for measures where the basis is of the same type as the populations (e.g. a Patient-based measure, rather than an Encounter-based measure). In addition, the referenced Group SHALL be a definitional (as opposed to an actual) group.
   */
  groupDefinition?: Reference | undefined;
  /**
   * An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.
   * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.
   * LinkIds can have whitespaces and slashes by design. Tooling should not rely on linkIds being valid XHTML element IDs, and should not directly embed them as such
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
}
/**
 * Stratifier criteria for the measure
 */
export interface MeasureGroupStratifier extends BackboneElement {
  /**
   * Indicates a meaning for the stratifier. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
   */
  code?: CodeableConcept | undefined;
  /**
   * A component of the stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
   * Stratifiers are defined either as a single criteria, or as a set of component criteria.
   */
  component?: MeasureGroupStratifierComponent[] | undefined;
  /**
   * An expression that specifies the criteria for the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.
   */
  criteria?: Expression | undefined;
  /**
   * The human readable description of this stratifier criteria.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A Group resource that defines this population as a set of characteristics.
   * Note that this approach can only be used for measures where the basis is of the same type as the populations (e.g. a Patient-based measure, rather than an Encounter-based measure). In addition, the referenced Group SHALL be a definitional (as opposed to an actual) group.
   */
  groupDefinition?: Reference | undefined;
  /**
   * An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.
   * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.
   * LinkIds can have whitespaces and slashes by design. Tooling should not rely on linkIds being valid XHTML element IDs, and should not directly embed them as such
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
}
/**
 * Population criteria group
 */
export interface MeasureGroup extends BackboneElement {
  /**
   * The population basis specifies the type of elements in the population. For a subject-based measure, this is boolean (because the subject and the population basis are the same, and the population criteria define yes/no values for each individual in the population). For measures that have a population basis that is different than the subject, this element specifies the type of the population basis. For example, an encounter-based measure has a subject of Patient and a population basis of Encounter, and the population criteria all return lists of Encounters.
   * When specified at the group level, defines the population basis for this specific group. If not specified, the basis for the group is determined by the root basis element
   */
  basis?: ('Base'|'Element'|'BackboneElement'|'DataType'|'Address'|'Annotation'|'Attachment'|'Availability'|'BackboneType'|'Dosage'|'ElementDefinition'|'MarketingStatus'|'ProductShelfLife'|'Timing'|'CodeableConcept'|'CodeableReference'|'Coding'|'ContactDetail'|'ContactPoint'|'Contributor'|'DataRequirement'|'Expression'|'ExtendedContactDetail'|'Extension'|'HumanName'|'Identifier'|'Meta'|'MonetaryComponent'|'Money'|'Narrative'|'ParameterDefinition'|'Period'|'PrimitiveType'|'base64Binary'|'boolean'|'date'|'dateTime'|'decimal'|'instant'|'integer'|'positiveInt'|'unsignedInt'|'integer64'|'string'|'code'|'id'|'markdown'|'time'|'uri'|'canonical'|'oid'|'url'|'uuid'|'Quantity'|'Age'|'Count'|'Distance'|'Duration'|'Range'|'Ratio'|'RatioRange'|'Reference'|'RelatedArtifact'|'SampledData'|'Signature'|'TriggerDefinition'|'UsageContext'|'VirtualServiceDetail'|'xhtml'|'Resource'|'Binary'|'Bundle'|'DomainResource'|'Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'CanonicalResource'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MetadataResource'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription'|'Parameters') | undefined;
  _basis?: Element | undefined;
  /**
   * Indicates a meaning for the group. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing groups to be correlated across measures.
   */
  code?: CodeableConcept | undefined;
  /**
   * The human readable description of this population group.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range).
   * When specified at the group level, this element defines the improvementNotation for this specific group. If not specified, improvementNotation for this group is determined by the root improvementNotation element
   */
  improvementNotation?: ('increase'|'decrease') | undefined;
  /**
   * A reference to a Library resource containing the formal logic used by the measure group.
   */
  library?: string[] | undefined;
  _library?: Element[] | undefined;
  /**
   * An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.
   * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.
   * LinkIds can have whitespaces and slashes by design. Tooling should not rely on linkIds being valid XHTML element IDs, and should not directly embed them as such
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * A population criteria for the measure.
   */
  population?: MeasureGroupPopulation[] | undefined;
  /**
   * Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result.
   * The measure rate for an organization or clinician is based upon the entities’ aggregate data and summarizes the performance of the entity over a given time period (e.g., monthly, quarterly, yearly). The aggregated data are derived from the results of a specific measure algorithm and, if appropriate, the application of specific risk adjustment models.  Can also be used to describe how to risk adjust the data based on supplemental data elements described in the eMeasure (e.g., pneumonia hospital measures antibiotic selection in the ICU versus non-ICU and then the roll-up of the two). This could be applied to aggregated cohort measure definitions (e.g., CDC's aggregate reporting for TB at the state level).
   */
  rateAggregation?: string | undefined;
  _rateAggregation?: Element | undefined;
  /**
   * Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.
   * When specified at the group level, defines the scoring for this specific group. If not specified, scoring for this group is determined by the root scoring element
   */
  scoring?: CodeableConcept | undefined;
  /**
   * Defines the expected units of measure for the measure score. This element SHOULD be specified as a UCUM unit.
   * When specified at the group level, this defines the scoringUnit for this specific group. If not specified, the scoringUnit for this group is determined by the root scoringUnit element. As with the root element, when this element is specified, implementations are expected to report measure scores in the specified units. Note that this may involve unit conversion if the expected units are different than the units of the resulting score calculation. In this case, unit conversions SHALL be performed according to the unit conversion semantics specified by UCUM.
   */
  scoringUnit?: CodeableConcept | undefined;
  /**
   * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
   */
  stratifier?: MeasureGroupStratifier[] | undefined;
  /**
   * The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything.
   * The subject of the measure is critical in interpreting the criteria definitions, as the logic in the measures is evaluated with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what content is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
   */
  subjectCodeableConcept?: CodeableConcept | undefined;
  /**
   * The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything.
   * The subject of the measure is critical in interpreting the criteria definitions, as the logic in the measures is evaluated with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what content is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
   */
  subjectReference?: Reference | undefined;
  /**
   * Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.
   * When specified at the group level, defines the measure type for this specific group. If not specified, the measureType of the group is determined by the root type element
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * What other data should be reported with the measure
 * Note that supplemental data are reported as resources for each patient and referenced in the supplementalData element of the MeasureReport. If the supplementalData expression results in a value other than a resource, it is reported using an Observation resource, typically contained in the resulting MeasureReport. See the MeasureReport resource and the Quality Reporting topic for more information.
 */
export interface MeasureSupplementalData extends BackboneElement {
  /**
   * Indicates a meaning for the supplemental data. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing supplemental data to be correlated across measures.
   */
  code?: CodeableConcept | undefined;
  /**
   * The criteria for the supplemental data. This is typically the name of a valid expression defined within a referenced library, but it may also be a path to a specific data element. The criteria defines the data to be returned for this element.
   */
  criteria: Expression;
  /**
   * The human readable description of this supplemental data.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.
   * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.
   * LinkIds can have whitespaces and slashes by design. Tooling should not rely on linkIds being valid XHTML element IDs, and should not directly embed them as such
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation.
   */
  usage?: CodeableConcept[] | undefined;
}
/**
 * Defined terms used in the measure documentation
 */
export interface MeasureTerm extends BackboneElement {
  /**
   * A codeable representation of the defined term.
   */
  code?: CodeableConcept | undefined;
  /**
   * Provides a definition for the term as used within the measure.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
}
export interface Measure extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Measure';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   */
  author?: ContactDetail[] | undefined;
  /**
   * The population basis specifies the type of elements in the population. For a subject-based measure, this is boolean (because the subject and the population basis are the same, and the population criteria define yes/no values for each individual in the population). For measures that have a population basis that is different than the subject, this element specifies the type of the population basis. For example, an encounter-based measure has a subject of Patient and a population basis of Encounter, and the population criteria all return lists of Encounters.
   * For a subject-based measure, the population basis is simply boolean; all the criteria are expressed as true/false conditions that determine membership of an individual case in the population. For non-subject-based measures, the population basis can be any resource type, and the criteria are queries that return the subject's contribution to the population as a list of that resource type. For example, for a procedure-based measure, the population criteria would return lists of procedures that should be included in each population.
   */
  basis?: ('Base'|'Element'|'BackboneElement'|'DataType'|'Address'|'Annotation'|'Attachment'|'Availability'|'BackboneType'|'Dosage'|'ElementDefinition'|'MarketingStatus'|'ProductShelfLife'|'Timing'|'CodeableConcept'|'CodeableReference'|'Coding'|'ContactDetail'|'ContactPoint'|'Contributor'|'DataRequirement'|'Expression'|'ExtendedContactDetail'|'Extension'|'HumanName'|'Identifier'|'Meta'|'MonetaryComponent'|'Money'|'Narrative'|'ParameterDefinition'|'Period'|'PrimitiveType'|'base64Binary'|'boolean'|'date'|'dateTime'|'decimal'|'instant'|'integer'|'positiveInt'|'unsignedInt'|'integer64'|'string'|'code'|'id'|'markdown'|'time'|'uri'|'canonical'|'oid'|'url'|'uuid'|'Quantity'|'Age'|'Count'|'Distance'|'Duration'|'Range'|'Ratio'|'RatioRange'|'Reference'|'RelatedArtifact'|'SampledData'|'Signature'|'TriggerDefinition'|'UsageContext'|'VirtualServiceDetail'|'xhtml'|'Resource'|'Binary'|'Bundle'|'DomainResource'|'Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'CanonicalResource'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MetadataResource'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription'|'Parameters') | undefined;
  _basis?: Element | undefined;
  /**
   * Provides a summary of relevant clinical guidelines or other clinical recommendations supporting the measure.
   */
  clinicalRecommendationStatement?: string | undefined;
  _clinicalRecommendationStatement?: Element | undefined;
  /**
   * If this is a composite measure, the scoring method used to combine the component measures to determine the composite score.
   */
  compositeScoring?: CodeableConcept | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the measure and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the measure.
   * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the measure was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the measure changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the measure. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the measure from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the measure as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the measure is presumed to be the predominant language in the place the measure was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Notices and disclaimers regarding the use of the measure or related to intellectual property (such as code systems) referenced by the measure.
   */
  disclaimer?: string | undefined;
  _disclaimer?: Element | undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   */
  editor?: ContactDetail[] | undefined;
  /**
   * The period during which the measure content was or is planned to be in active use.
   * The effective period for a measure determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * A Boolean value to indicate that this measure is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of measures that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A group of population criteria for the measure.
   */
  group?: MeasureGroup[] | undefined;
  /**
   * Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure.
   * NOTE: This element is deprecated in favor of the usage element
   */
  guidance?: string | undefined;
  _guidance?: Element | undefined;
  /**
   * A formal identifier that is used to identify this measure when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this measure outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range).
   */
  improvementNotation?: ('increase'|'decrease') | undefined;
  /**
   * A legal or geographic region in which the measure is intended to be used.
   * It may be possible for the measure to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A reference to a Library resource containing the formal logic used by the measure.
   */
  library?: string[] | undefined;
  _library?: Element[] | undefined;
  /**
   * A natural language name identifying the measure. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the measure.
   * Usually an organization but may be an individual. The publisher (or steward) of the measure is the organization or individual primarily responsible for the maintenance and upkeep of the measure. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the measure. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this measure is needed and why it has been designed as it has.
   * This element does not describe the usage of the measure. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this measure.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result.
   * The measure rate for an organization or clinician is based upon the entities’ aggregate data and summarizes the performance of the entity over a given time period (e.g., monthly, quarterly, yearly). The aggregated data are derived from the results of a specific measure algorithm and, if appropriate, the application of specific risk adjustment models.  Can also be used to describe how to risk adjust the data based on supplemental data elements described in the eMeasure (e.g., pneumonia hospital measures antibiotic selection in the ICU versus non-ICU and then the roll-up of the two). This could be applied to aggregated cohort measure definitions (e.g., CDC's aggregate reporting for TB at the state level).
   */
  rateAggregation?: string | undefined;
  _rateAggregation?: Element | undefined;
  /**
   * Provides a succinct statement of the need for the measure. Usually includes statements pertaining to importance criterion: impact, gap in care, and evidence.
   */
  rationale?: string | undefined;
  _rationale?: Element | undefined;
  /**
   * Related artifacts such as additional documentation, justification, or bibliographic references.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * A description of the risk adjustment factors that may impact the resulting score for the measure and how they may be accounted for when computing and reporting measure results.
   * Describes the method of adjusting for clinical severity and conditions present at the start of care that can influence patient outcomes for making valid comparisons of outcome measures across providers. Indicates whether a measure is subject to the statistical process for reducing, removing, or clarifying the influences of confounding factors to allow for more useful comparisons.
   */
  riskAdjustment?: string | undefined;
  _riskAdjustment?: Element | undefined;
  /**
   * Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.
   */
  scoring?: CodeableConcept | undefined;
  /**
   * Defines the expected units of measure for the measure score. This element SHOULD be specified as a UCUM unit.
   * When this element is specified, implementations are expected to report measure scores in the specified units. Note that this may involve unit conversion if the expected units are different than the units of the resulting score calculation. In this case, unit conversions SHALL be performed according to the unit conversion semantics specified by UCUM.
   */
  scoringUnit?: CodeableConcept | undefined;
  /**
   * The status of this measure. Enables tracking the life-cycle of the content.
   * Allows filtering of measures that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything.
   * The subject of the measure is critical in interpreting the criteria definitions, as the logic in the measures is evaluated with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what content is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
   */
  subjectCodeableConcept?: CodeableConcept | undefined;
  /**
   * The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything.
   * The subject of the measure is critical in interpreting the criteria definitions, as the logic in the measures is evaluated with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what content is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
   */
  subjectReference?: Reference | undefined;
  /**
   * An explanatory or alternate title for the measure giving additional information about its content.
   */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;
  /**
   * The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.
   * Note that supplemental data are reported as resources for each patient and referenced in the supplementalData element of the MeasureReport. If the supplementalData expression results in a value other than a resource, it is reported using an Observation resource, typically contained in the resulting MeasureReport. See the MeasureReport resource and the Quality Reporting topic for more information.
   */
  supplementalData?: MeasureSupplementalData[] | undefined;
  /**
   * Provides a description of an individual term used within the measure.
   */
  term?: MeasureTerm[] | undefined;
  /**
   * A short, descriptive, user-friendly title for the measure.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptive topics related to the content of the measure. Topics provide a high-level categorization grouping types of measures that can be useful for filtering and searching.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.
   */
  type?: CodeableConcept[] | undefined;
  /**
   * An absolute URI that is used to identify this measure when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this measure is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the measure is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * A detailed description, from a clinical perspective, of how the measure is used.
   * This metadata element was typically referred to as Guidance in HQMF
   */
  usage?: string | undefined;
  _usage?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate measure instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the measure when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the measure author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
   * There may be different measure instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the measure with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * The populations in the group
 */
export interface MeasureReportGroupPopulation extends BackboneElement {
  /**
   * The type of the population.
   */
  code?: CodeableConcept | undefined;
  /**
   * The number of members of the population.
   */
  count?: number | undefined;
  /**
   * The population from the Measure that corresponds to this population in the MeasureReport resource.
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * A reference to an individual level MeasureReport resource for a member of the population.
   * This element SHALL NOT be used in with subjectResults, either systems provide results as a List of MeasureReport, or as references to individual MeasureReports. Note that using this element introduces a constraint on the size of the subject-list MeasureReport; implementations would be free to return a TOO-COSTLY response if a request is made for a subject-list report with too many subjects.
   */
  subjectReport?: Reference[] | undefined;
  /**
   * This element refers to a List of individual level MeasureReport resources, one for each subject in this population.
   */
  subjectResults?: Reference | undefined;
  /**
   * Optional Group identifying the individuals that make up the population.
   * Note that this element can only be used for summary and subject-list reports where the basis is of the same type as the populations (e.g. a Patient-based measure, rather than an Encounter-based measure). In addition, the referenced Group resource SHALL be an actual (as opposed to a definitional) group.
   */
  subjects?: Reference | undefined;
}
/**
 * Stratifier component values
 */
export interface MeasureReportGroupStratifierStratumComponent extends BackboneElement {
  /**
   * The code for the stratum component value.
   */
  code: CodeableConcept;
  /**
   * The stratifier component from the Measure that corresponds to this stratifier component in the MeasureReport resource.
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * The stratum component value.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The stratum component value.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The stratum component value.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The stratum component value.
   */
  valueRange?: Range | undefined;
  /**
   * The stratum component value.
   */
  valueReference?: Reference | undefined;
}
/**
 * Population results in this stratum
 */
export interface MeasureReportGroupStratifierStratumPopulation extends BackboneElement {
  /**
   * The type of the population.
   */
  code?: CodeableConcept | undefined;
  /**
   * The number of members of the population in this stratum.
   */
  count?: number | undefined;
  /**
   * The population from the Measure that corresponds to this population in the MeasureReport resource.
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * A reference to an individual level MeasureReport resource for a member of the population.
   * This element SHALL NOT be used in with subjectResults, either systems provide results as a List of MeasureReport, or as references to individual MeasureReports. Note that using this element introduces a constraint on the size of the subject-list MeasureReport; implementations would be free to return a TOO-COSTLY response if a request is made for a subject-list report with too many subjects.
   */
  subjectReport?: Reference[] | undefined;
  /**
   * This element refers to a List of individual level MeasureReport resources, one for each subject in this population in this stratum.
   */
  subjectResults?: Reference | undefined;
  /**
   * Optional Group identifying the individuals that make up the population.
   * Note that this element can only be used for summary and subject-list reports where the basis is of the same type as the populations (e.g. a Patient-based measure, rather than an Encounter-based measure). In addition, the referenced Group SHALL be an actual (as opposed to a definitional) group.
   */
  subjects?: Reference | undefined;
}
/**
 * Stratum results, one for each unique value, or set of values, in the stratifier, or stratifier components
 */
export interface MeasureReportGroupStratifierStratum extends BackboneElement {
  /**
   * A stratifier component value.
   */
  component?: MeasureReportGroupStratifierStratumComponent[] | undefined;
  /**
   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
   */
  measureScoreCodeableConcept?: CodeableConcept | undefined;
  /**
   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
   */
  measureScorestring?: string | undefined;
  _measureScorestring?: Element | undefined;
  /**
   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
   */
  measureScoreDuration?: Duration | undefined;
  /**
   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
   */
  measureScorePeriod?: Period | undefined;
  /**
   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
   */
  measureScoreQuantity?: Quantity | undefined;
  /**
   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
   */
  measureScoreRange?: Range | undefined;
  /**
   * The populations that make up the stratum, one for each type of population appropriate to the measure.
   */
  stratifierGroupPopulation?: MeasureReportGroupStratifierStratumPopulation[] | undefined;
  /**
   * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
   */
  valueRange?: Range | undefined;
  /**
   * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
   */
  valueReference?: Reference | undefined;
}
/**
 * Stratification results
 */
export interface MeasureReportGroupStratifier extends BackboneElement {
  /**
   * The meaning of this stratifier, as defined in the measure definition.
   */
  code?: CodeableConcept | undefined;
  /**
   * The stratifier from the Measure that corresponds to this stratifier in the MeasureReport resource.
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
   */
  stratifierGroup?: MeasureReportGroupStratifierStratum[] | undefined;
}
/**
 * Measure results for each group
 */
export interface MeasureReportGroup extends BackboneElement {
  /**
   * The meaning of the population group as defined in the measure definition.
   */
  code?: CodeableConcept | undefined;
  /**
   * The group from the Measure that corresponds to this group in the MeasureReport resource.
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
   */
  measureScoreCodeableConcept?: CodeableConcept | undefined;
  /**
   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
   */
  measureScorestring?: string | undefined;
  _measureScorestring?: Element | undefined;
  /**
   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
   */
  measureScoreDuration?: Duration | undefined;
  /**
   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
   */
  measureScorePeriod?: Period | undefined;
  /**
   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
   */
  measureScoreQuantity?: Quantity | undefined;
  /**
   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
   */
  measureScoreRange?: Range | undefined;
  /**
   * The populations that make up the population group, one for each type of population appropriate for the measure.
   */
  population?: MeasureReportGroupPopulation[] | undefined;
  /**
   * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
   */
  stratifier?: MeasureReportGroupStratifier[] | undefined;
  /**
   * Optional subject identifying the individual or individuals the report is for.
   */
  subject?: Reference | undefined;
}
export interface MeasureReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MeasureReport';
  /**
   * Indicates whether the data submitted in a data-exchange report represents a snapshot or incremental update. A snapshot update replaces all previously submitted data for the receiver, whereas an incremental update represents only updated and/or changed data and should be applied as a differential update to the existing submitted data for the receiver.
   * This element only applies to Data-collection reports used to communicate the data-of-interest for a measure
   */
  dataUpdateType?: ('incremental'|'snapshot') | undefined;
  _dataUpdateType?: Element | undefined;
  /**
   * The date this measure was calculated.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Evaluated resources are used to capture what data was involved in the calculation of a measure. This usage is only allowed for individual reports to ensure that the size of the MeasureReport resource is bounded.
   * Evaluated resources are only reported for individual reports.
   */
  evaluatedResource?: Reference[] | undefined;
  /**
   * The results of the calculation, one for each population group in the measure.
   */
  group?: MeasureReportGroup[] | undefined;
  /**
   * A formal identifier that is used to identify this MeasureReport when it is represented in other formats or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II data type - e.g. to identify this {{title}} outside of FHIR, where the logical URL is not possible to use.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Whether improvement in the measure is noted by an increase or decrease in the measure score.
   * This element is typically defined by the measure, but reproduced here to ensure the measure score can be interpreted. The element is labeled as a modifier because it changes the interpretation of the reported measure score. Note also that a MeasureReport instance includes the improvementNotation as defined by the Measure being reported. It is duplicated in the MeasureReport because it is a critical aspect of interpreting the measure score but it is not intended to reflect whether the measure report is an increase or decrease. It helps interpret if the measure score is an increase or decrease, I.e., moving in the direction of the desired outcome.
   */
  improvementNotation?: ('increase'|'decrease') | undefined;
  /**
   * A reference to a Parameters resource (typically represented using a contained resource) that represents any input parameters that were provided to the operation that generated the report.
   * Whenever an operation returns a MeasureReport, the IN parameters from that operation can be returned to the caller of the operation using MeasureReport.inputParameters. Operations include but are not limited to $evaluate-measure, $care-gaps, $data-requirements, and $collect-data. The inputParameters can also be used in a MeasureReport used to define a test case (i.e., not as a result of an operation).
   */
  inputParameters?: Reference | undefined;
  /**
   * A reference to the location for which the data is being reported.
   */
  location?: Reference | undefined;
  /**
   * A reference to the Measure that was calculated to produce this report.
   */
  measure?: string | undefined;
  _measure?: Element | undefined;
  /**
   * The reporting period for which the report was calculated.
   */
  period: Period;
  /**
   * The individual or organization that is reporting the data.
   */
  reporter?: Reference | undefined;
  /**
   * A reference to the vendor who queried the data, calculated results and/or generated the report. The ‘reporting vendor’ is intended to represent the submitting entity when it is not the same as the reporting entity. This extension is used when the Receiver is interested in getting vendor information in the report.
   */
  reportingVendor?: Reference | undefined;
  /**
   * Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented. It is expected to be the same as the scoring element on the referenced Measure.
   */
  scoring?: CodeableConcept | undefined;
  /**
   * The MeasureReport status. No data will be available until the MeasureReport status is complete.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('complete'|'pending'|'error');
  _status?: Element | undefined;
  /**
   * Optional subject identifying the individual or individuals the report is for.
   */
  subject?: Reference | undefined;
  /**
   * A reference to a Resource that represents additional information collected for the report. If the value of the supplemental data is not a Resource (i.e. evaluating the supplementalData expression for this case in the measure results in a value that is not a FHIR Resource), it is reported as a reference to a contained Observation resource.
   * For individual measure reports, the supplementalData elements represent the direct result of evaluating the supplementalData expression for the subject of the report. For summary reports, supplementalData is reported as references to contained Observation resources that represent the number of times each value appeared as a supplementalData result for members of the population.
   */
  supplementalData?: Reference[] | undefined;
  /**
   * The type of measure report. This may be an individual report, which provides the score for the measure for an individual member of the population; a subject-listing, which returns the list of members that meet the various criteria in the measure; a summary report, which returns a population count for each of the criteria in the measure; or a data-collection, which enables the MeasureReport to be used to exchange the data-of-interest for a quality measure.
   * Data-exchange reports are used only to communicate data-of-interest for a measure. They do not necessarily include all the data for a particular subject or population, but they may.
   */
  type: ('individual'|'subject-list'|'summary'|'data-exchange');
  _type?: Element | undefined;
}
/**
 * Details about packaged medications
 */
export interface MedicationBatch extends BackboneElement {
  /**
   * When this specific batch of product will expire.
   */
  expirationDate?: string | undefined;
  _expirationDate?: Element | undefined;
  /**
   * The assigned lot number of a batch of the specified product.
   */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;
}
/**
 * Active or inactive ingredient
 * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
 */
export interface MedicationIngredient extends BackboneElement {
  /**
   * Indication of whether this ingredient affects the therapeutic action of the drug.
   */
  isActive?: boolean | undefined;
  _isActive?: Element | undefined;
  /**
   * The ingredient (substance or medication) that the ingredient.strength relates to.  This is represented as a concept from a code system or described in another resource (Substance or Medication).
   */
  item: CodeableReference;
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
   */
  strengthCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
   */
  strengthQuantity?: Quantity | undefined;
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
   */
  strengthRatio?: Ratio | undefined;
}
export interface Medication extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Medication';
  /**
   * Information that only applies to packages (not products).
   */
  batch?: MedicationBatch | undefined;
  /**
   * A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
   * Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc. Other codes can only be literal translations to alternative code systems, or codes at a lower level of granularity (e.g. a generic code for a vendor-specific primary one).
   */
  code?: CodeableConcept | undefined;
  /**
   * A reference to a knowledge resource that provides more information about this medication.
   */
  definition?: Reference | undefined;
  /**
   * Describes the form of the item.  Powder; tablets; capsule.
   * When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
   */
  doseForm?: CodeableConcept | undefined;
  /**
   * Business identifier for this medication.
   * The serial number could be included as an identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies a particular constituent of interest in the product.
   * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
   */
  ingredient?: MedicationIngredient[] | undefined;
  /**
   * The company or other legal entity that has authorization, from the appropriate drug regulatory authority,  to market a medicine in one or more jurisdictions.  Typically abbreviated MAH.Note:  The MAH may manufacture the product and may also contract the manufacturing of the product to one or more companies (organizations).
   */
  marketingAuthorizationHolder?: Reference | undefined;
  /**
   * A code to indicate if the medication is in active use.
   * This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
   */
  status?: ('active'|'inactive'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * When the specified product code does not infer a package size, this is the specific amount of drug in the product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
   */
  totalVolume?: Quantity | undefined;
}
/**
 * Details of how medication was taken
 */
export interface MedicationAdministrationDosage extends BackboneElement {
  /**
   * The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.
   * If the administration is not instantaneous (rate is present), this can be specified to convey the total amount administered over period of time of a single administration.
   */
  dose?: Quantity | undefined;
  /**
   * A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
   * One of the reasons this attribute is not used often, is that the method is often pre-coordinated with the route and/or form of administration.  This means the codes used in route or form may pre-coordinate the method in the route code or the form code.  The implementation decision about what coding system to use for route or form code will determine how frequently the method code will be populated e.g. if route or form code pre-coordinate method code, then this attribute will not be populated often; if there is no pre-coordination then method code may  be used frequently.
   */
  method?: CodeableConcept | undefined;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   * If the rate changes over time, and you want to capture this in MedicationAdministration, then each change should be captured as a distinct MedicationAdministration, with a specific MedicationAdministration.dosage.rate, and the date time when the rate change occurred. Typically, the MedicationAdministration.dosage.rate element is not used to convey an average rate.
   */
  rateQuantity?: Quantity | undefined;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   * If the rate changes over time, and you want to capture this in MedicationAdministration, then each change should be captured as a distinct MedicationAdministration, with a specific MedicationAdministration.dosage.rate, and the date time when the rate change occurred. Typically, the MedicationAdministration.dosage.rate element is not used to convey an average rate.
   */
  rateRatio?: Ratio | undefined;
  /**
   * A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.
   */
  route?: CodeableConcept | undefined;
  /**
   * A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
   * If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [http://hl7.org/fhir/StructureDefinition/bodySite](http://hl7.org/fhir/extensions/StructureDefinition-bodySite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
   */
  site?: CodeableConcept | undefined;
  /**
   * Free text dosage can be used for cases where the dosage administered is too complex to code. When coded dosage is present, the free text dosage may still be present for display to humans.
   * The dosage instructions should reflect the dosage of the medication that was administered.
   */
  text?: string | undefined;
  _text?: Element | undefined;
}
/**
 * Who or what performed the medication administration and what type of performance they did
 */
export interface MedicationAdministrationPerformer extends BackboneElement {
  /**
   * Indicates who or what performed the medication administration.
   */
  actor: CodeableReference;
  /**
   * Distinguishes the type of involvement of the performer in the medication administration.
   */
  function?: CodeableConcept | undefined;
}
export interface MedicationAdministration extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationAdministration';
  /**
   * A plan that is fulfilled in whole or in part by this MedicationAdministration.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The type of medication administration (for example, drug classification like ATC, where meds would be administered, legal category of the medication).
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The device that is to be used for the administration of the medication (for example, PCA Pump).
   */
  device?: CodeableReference[] | undefined;
  /**
   * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
   */
  dosage?: MedicationAdministrationDosage | undefined;
  /**
   * The visit, admission, or other contact between patient and health care provider during which the medication administration was performed.
   */
  encounter?: Reference | undefined;
  /**
   * A summary of the events of interest that have occurred, such as when the administration was verified.
   * This might not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.
   */
  eventHistory?: Reference[] | undefined;
  /**
   * Identifiers associated with this Medication Administration that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * An indication that the full dose was not administered.
   */
  isSubPotent?: boolean | undefined;
  _isSubPotent?: Element | undefined;
  /**
   * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number, then you must reference the Medication resource.
   */
  medication: CodeableReference;
  /**
   * Extra information about the medication administration that is not conveyed by the other attributes.
   */
  note?: Annotation[] | undefined;
  /**
   * A specific date/time or interval of time during which the administration took place (or did not take place). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
   */
  occurencestring?: string | undefined;
  _occurencestring?: Element | undefined;
  /**
   * A specific date/time or interval of time during which the administration took place (or did not take place). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
   */
  occurencePeriod?: Period | undefined;
  /**
   * A specific date/time or interval of time during which the administration took place (or did not take place). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
   */
  occurenceTiming?: Timing | undefined;
  /**
   * A larger event of which this particular event is a component or step.
   * MedicationDispense will be used to indicate waste.
   */
  partOf?: Reference[] | undefined;
  /**
   * The performer of the medication treatment.  For devices this is the device that performed the administration of the medication.  An IV Pump would be an example of a device that is performing the administration. Both the IV Pump and the practitioner that set the rate or bolus on the pump can be listed as performers.
   */
  performer?: MedicationAdministrationPerformer[] | undefined;
  /**
   * A code, Condition or observation that supports why the medication was administered.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * The date the occurrence of the  MedicationAdministration was first captured in the record - potentially significantly after the occurrence of the event.
   */
  recorded?: string | undefined;
  _recorded?: Element | undefined;
  /**
   * The original request, instruction or authority to perform the administration.
   * This is a reference to the MedicationRequest  where the intent is either order or instance-order.  It should not reference MedicationRequests where the intent is any other value.
   */
  request?: Reference | undefined;
  /**
   * Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions, it is possible for an administration to be started but not completed or it may be paused while some other process is under way.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('in-progress'|'not-done'|'on-hold'|'completed'|'entered-in-error'|'stopped'|'unknown');
  _status?: Element | undefined;
  /**
   * A code indicating why the administration was not performed.
   */
  statusReason?: CodeableConcept[] | undefined;
  /**
   * The person or animal or group receiving the medication.
   */
  subject: Reference;
  /**
   * The reason or reasons why the full dose was not administered.
   */
  subPotentReason?: CodeableConcept[] | undefined;
  /**
   * Additional information (for example, patient height and weight) that supports the administration of the medication.  This attribute can be used to provide documentation of specific characteristics of the patient present at the time of administration.  For example, if the dose says "give "x" if the heartrate exceeds "y"", then the heart rate can be included using this attribute.
   */
  supportingInformation?: Reference[] | undefined;
}
/**
 * Who performed event
 */
export interface MedicationDispensePerformer extends BackboneElement {
  /**
   * The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication.
   */
  actor: Reference;
  /**
   * Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker.
   */
  function?: CodeableConcept | undefined;
}
/**
 * Whether a substitution was performed on the dispense
 */
export interface MedicationDispenseSubstitution extends BackboneElement {
  /**
   * Indicates the reason for the substitution (or lack of substitution) from what was prescribed.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * The person or organization that has primary responsibility for the substitution.
   */
  responsibleParty?: Reference | undefined;
  /**
   * A code signifying whether a different drug was dispensed from what was prescribed.
   */
  type?: CodeableConcept | undefined;
  /**
   * True if the dispenser dispensed a different drug or product from what was prescribed.
   */
  wasSubstituted: boolean;
  _wasSubstituted?: Element | undefined;
}
export interface MedicationDispense extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationDispense';
  /**
   * Indicates the medication order that is being dispensed against.
   * Maps to basedOn in Event logical model.
   */
  authorizingPrescription?: Reference[] | undefined;
  /**
   * A plan that is fulfilled in whole or in part by this MedicationDispense.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Indicates the type of medication dispense (for example, drug classification like ATC, where meds would be administered, legal category of the medication.).
   * The category can be used to include where the medication is expected to be consumed or other types of dispenses.  Invariants can be used to bind to different value sets when profiling to bind.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The amount of medication expressed as a timing amount.
   */
  daysSupply?: Quantity | undefined;
  /**
   * Identification of the facility/location where the medication was/will be shipped to, as part of the dispense event.
   */
  destination?: Reference | undefined;
  /**
   * Indicates how the medication is to be used by the patient.
   * When the dose or rate is intended to change over the entire administration period (e.g. Tapering dose prescriptions), multiple instances of dosage instructions will need to be supplied to convey the different doses/rates.
   * The pharmacist reviews the medication order prior to dispense and updates the dosageInstruction based on the actual product being dispensed.
   */
  dosageInstruction?: Dosage[] | undefined;
  /**
   * The encounter that establishes the context for this event.
   */
  encounter?: Reference | undefined;
  /**
   * A summary of the events of interest that have occurred, such as when the dispense was verified.
   * This might not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
   */
  eventHistory?: Reference[] | undefined;
  /**
   * Identifiers associated with this Medication Dispense that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The principal physical location where the dispense was performed.
   */
  location?: Reference | undefined;
  /**
   * Identifies the medication supplied. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number, then you must reference the Medication resource.
   */
  medication: CodeableReference;
  /**
   * Extra information about the dispense that could not be conveyed in the other attributes.
   */
  note?: Annotation[] | undefined;
  /**
   * Indicates the reason why a dispense was not performed.
   */
  notPerformedReason?: CodeableReference | undefined;
  /**
   * The procedure or medication administration that triggered the dispense.
   * While both a procedure and a medication administration may have triggered the dispense, but it is not expected that multiple procedures and/or multiple medication administrations would be triggers.
   */
  partOf?: Reference[] | undefined;
  /**
   * Indicates who or what performed the event.
   */
  performer?: MedicationDispensePerformer[] | undefined;
  /**
   * The amount of medication that has been dispensed. Includes unit of measure.
   */
  quantity?: Quantity | undefined;
  /**
   * Identifies the person who picked up the medication or the location of where the medication was delivered.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional or a location.
   */
  receiver?: Reference[] | undefined;
  /**
   * The date (and maybe time) when the dispense activity started if whenPrepared or whenHandedOver is not populated.
   */
  recorded?: string | undefined;
  _recorded?: Element | undefined;
  /**
   * The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.
   * The content of the renderedDosageInstructions must not be different than the dose represented in the dosageInstruction content.
   */
  renderedDosageInstruction?: string | undefined;
  _renderedDosageInstruction?: Element | undefined;
  /**
   * A code specifying the state of the set of dispense events.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('preparation'|'in-progress'|'cancelled'|'on-hold'|'completed'|'entered-in-error'|'stopped'|'declined'|'unknown');
  _status?: Element | undefined;
  /**
   * The date (and maybe time) when the status of the dispense record changed.
   */
  statusChanged?: string | undefined;
  _statusChanged?: Element | undefined;
  /**
   * A link to a resource representing the person or the group to whom the medication will be given.
   * SubstanceAdministration->subject->Patient.
   */
  subject: Reference;
  /**
   * Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
   */
  substitution?: MedicationDispenseSubstitution | undefined;
  /**
   * Additional information that supports the medication being dispensed.  For example, there may be requirements that a specific lab test has been completed prior to dispensing or the patient's weight at the time of dispensing is documented.
   */
  supportingInformation?: Reference[] | undefined;
  /**
   * Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  type?: CodeableConcept | undefined;
  /**
   * The time the dispensed product was provided to the patient or their representative.
   */
  whenHandedOver?: string | undefined;
  _whenHandedOver?: Element | undefined;
  /**
   * The time when the dispensed product was packaged and reviewed.
   */
  whenPrepared?: string | undefined;
  _whenPrepared?: Element | undefined;
}
/**
 * The pricing of the medication
 */
export interface MedicationKnowledgeCost extends BackboneElement {
  /**
   * The price or representation of the cost (for example, Band A, Band B or $, $$) of the medication.
   */
  costCodeableConcept?: CodeableConcept | undefined;
  /**
   * The price or representation of the cost (for example, Band A, Band B or $, $$) of the medication.
   */
  costMoney?: Money | undefined;
  /**
   * The date range for which the cost information of the medication is effective.
   */
  effectiveDate?: Period[] | undefined;
  /**
   * The source or owner that assigns the price to the medication.
   */
  source?: string | undefined;
  _source?: Element | undefined;
  /**
   * The category of the cost information.  For example, manufacturers' cost, patient cost, claim reimbursement cost, actual acquisition cost.
   */
  type: CodeableConcept;
}
/**
 * Specifies descriptive properties of the medicine
 */
export interface MedicationKnowledgeDefinitionalDrugCharacteristic extends BackboneElement {
  /**
   * A code specifying which characteristic of the medicine is being described (for example, colour, shape, imprint).
   */
  type?: CodeableConcept | undefined;
  /**
   * Description of the characteristic.
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * Description of the characteristic.
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * Description of the characteristic.
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * Description of the characteristic.
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueQuantity?: Quantity | undefined;
}
/**
 * Active or inactive ingredient
 */
export interface MedicationKnowledgeDefinitionalIngredient extends BackboneElement {
  /**
   * A reference to the resource that provides information about the ingredient.
   */
  item: CodeableReference;
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
   */
  strengthCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
   */
  strengthQuantity?: Quantity | undefined;
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
   */
  strengthRatio?: Ratio | undefined;
  /**
   * Indication of whether this ingredient affects the therapeutic action of the drug.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Minimal definition information about the medication
 */
export interface MedicationKnowledgeDefinitional extends BackboneElement {
  /**
   * Associated definitions for this medication.
   */
  definition?: Reference[] | undefined;
  /**
   * Describes the form of the item.  Powder; tablets; capsule.
   * When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
   */
  doseForm?: CodeableConcept | undefined;
  /**
   * Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
   */
  drugCharacteristic?: MedicationKnowledgeDefinitionalDrugCharacteristic[] | undefined;
  /**
   * Identifies a particular constituent of interest in the product.
   */
  ingredient?: MedicationKnowledgeDefinitionalIngredient[] | undefined;
  /**
   * The intended or approved route of administration.
   */
  intendedRoute?: CodeableConcept[] | undefined;
}
/**
 * Dosage for the medication for the specific guidelines
 */
export interface MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage extends BackboneElement {
  /**
   * Dosage for the medication for the specific guidelines.
   */
  dosage: Dosage[];
  /**
   * The type or category of dosage for a given medication (for example, prophylaxis, maintenance, therapeutic, etc.).
   */
  type: CodeableConcept;
}
/**
 * Characteristics of the patient that are relevant to the administration guidelines
 */
export interface MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic extends BackboneElement {
  /**
   * The categorization of the specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
   */
  type: CodeableConcept;
  /**
   * The specific characteristic (e.g. height, weight, gender, etc.).
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The specific characteristic (e.g. height, weight, gender, etc.).
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The specific characteristic (e.g. height, weight, gender, etc.).
   */
  valueRange?: Range | undefined;
}
/**
 * Guidelines for dosage of the medication
 */
export interface MedicationKnowledgeIndicationGuidelineDosingGuideline extends BackboneElement {
  /**
   * The type of the treatment that the guideline applies to, for example, long term therapy, first line treatment, etc.
   */
  administrationTreatment?: CodeableConcept | undefined;
  /**
   * Dosage for the medication for the specific guidelines.
   */
  dosage?: MedicationKnowledgeIndicationGuidelineDosingGuidelineDosage[] | undefined;
  /**
   * Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
   */
  patientCharacteristic?: MedicationKnowledgeIndicationGuidelineDosingGuidelinePatientCharacteristic[] | undefined;
  /**
   * The overall intention of the treatment, for example, prophylactic, supporative, curative, etc.
   */
  treatmentIntent?: CodeableConcept | undefined;
}
/**
 * Guidelines or protocols for administration of the medication for an indication
 */
export interface MedicationKnowledgeIndicationGuideline extends BackboneElement {
  /**
   * The guidelines for the dosage of the medication for the indication.
   */
  dosingGuideline?: MedicationKnowledgeIndicationGuidelineDosingGuideline[] | undefined;
  /**
   * Indication or reason for use of the medication that applies to the specific administration guideline.
   */
  indication?: CodeableReference[] | undefined;
}
/**
 * Categorization of the medication within a formulary or classification system
 */
export interface MedicationKnowledgeMedicineClassification extends BackboneElement {
  /**
   * Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.).
   */
  classification?: CodeableConcept[] | undefined;
  /**
   * Either a textual source of the classification or a reference to an online source.
   */
  sourcestring?: string | undefined;
  _sourcestring?: Element | undefined;
  /**
   * The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification).
   */
  type: CodeableConcept;
}
/**
 * Program under which a medication is reviewed
 */
export interface MedicationKnowledgeMonitoringProgram extends BackboneElement {
  /**
   * Name of the reviewing program.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Type of program under which the medication is monitored.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Associated documentation about the medication
 */
export interface MedicationKnowledgeMonograph extends BackboneElement {
  /**
   * Associated documentation about the medication.
   */
  source?: Reference | undefined;
  /**
   * The category of documentation about the medication. (e.g. professional monograph, patient education monograph).
   */
  type?: CodeableConcept | undefined;
}
/**
 * Details about packaged medications
 */
export interface MedicationKnowledgePackaging extends BackboneElement {
  /**
   * The cost of the packaged medication.
   */
  cost?: MedicationKnowledgeCost[] | undefined;
  /**
   * A reference to a PackagedProductDefinition that provides the details of the product that is in the packaging and is being priced.
   */
  packagedProduct?: Reference | undefined;
}
/**
 * The maximum number of units of the medication that can be dispensed in a period
 */
export interface MedicationKnowledgeRegulatoryMaxDispense extends BackboneElement {
  /**
   * The period that applies to the maximum number of units.
   */
  period?: Duration | undefined;
  /**
   * The maximum number of units of the medication that can be dispensed.
   */
  quantity: Quantity;
}
/**
 * Specifies if changes are allowed when dispensing a medication from a regulatory perspective
 */
export interface MedicationKnowledgeRegulatorySubstitution extends BackboneElement {
  /**
   * Specifies if regulation allows for changes in the medication when dispensing.
   */
  allowed: boolean;
  _allowed?: Element | undefined;
  /**
   * Specifies the type of substitution allowed.
   */
  type: CodeableConcept;
}
/**
 * Regulatory information about a medication
 */
export interface MedicationKnowledgeRegulatory extends BackboneElement {
  /**
   * The maximum number of units of the medication that can be dispensed in a period.
   */
  maxDispense?: MedicationKnowledgeRegulatoryMaxDispense | undefined;
  /**
   * The authority that is specifying the regulations.
   */
  regulatoryAuthority: Reference;
  /**
   * Specifies the schedule of a medication in jurisdiction.
   */
  schedule?: CodeableConcept[] | undefined;
  /**
   * Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
   */
  substitution?: MedicationKnowledgeRegulatorySubstitution[] | undefined;
}
/**
 * Associated or related medication information
 */
export interface MedicationKnowledgeRelatedMedicationKnowledge extends BackboneElement {
  /**
   * Associated documentation about the associated medication knowledge.
   */
  reference: Reference[];
  /**
   * The category of the associated medication knowledge reference.
   */
  type: CodeableConcept;
}
/**
 * Setting or value of environment for adequate storage
 */
export interface MedicationKnowledgeStorageGuidelineEnvironmentalSetting extends BackboneElement {
  /**
   * Identifies the category or type of setting (e.g., type of location, temperature, humidity).
   */
  type: CodeableConcept;
  /**
   * Value associated to the setting. E.g., 40° – 50°F for temperature.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * Value associated to the setting. E.g., 40° – 50°F for temperature.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Value associated to the setting. E.g., 40° – 50°F for temperature.
   */
  valueRange?: Range | undefined;
}
/**
 * How the medication should be stored
 */
export interface MedicationKnowledgeStorageGuideline extends BackboneElement {
  /**
   * Describes a setting/value on the environment for the adequate storage of the medication and other substances.  Environment settings may involve temperature, humidity, or exposure to light.
   */
  environmentalSetting?: MedicationKnowledgeStorageGuidelineEnvironmentalSetting[] | undefined;
  /**
   * Additional notes about the storage.
   */
  note?: Annotation[] | undefined;
  /**
   * Reference to additional information about the storage guidelines.
   */
  reference?: string | undefined;
  _reference?: Element | undefined;
  /**
   * Duration that the medication remains stable if the environmentalSetting is respected.
   */
  stabilityDuration?: Duration | undefined;
}
export interface MedicationKnowledge extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationKnowledge';
  /**
   * Links to associated medications that could be prescribed, dispensed or administered.
   */
  associatedMedication?: Reference[] | undefined;
  /**
   * The creator or owner of the knowledge or information about the medication.
   */
  author?: Reference | undefined;
  /**
   * Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
   */
  clinicalUseIssue?: Reference[] | undefined;
  /**
   * A code that specifies this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
   * Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc. Other codes can only be literal translations to alternative code systems, or codes at a lower level of granularity (e.g. a generic code for a vendor-specific primary one).
   */
  code?: CodeableConcept | undefined;
  /**
   * The price of the medication.
   */
  cost?: MedicationKnowledgeCost[] | undefined;
  /**
   * Along with the link to a Medicinal Product Definition resource, this information provides common definitional elements that are needed to understand the specific medication that is being described.
   */
  definitional?: MedicationKnowledgeDefinitional | undefined;
  /**
   * Business identifier for this medication.
   * This is a business identifier, not a resource identifier (see discussion).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Guidelines or protocols that are applicable for the administration of the medication based on indication.
   */
  indicationGuideline?: MedicationKnowledgeIndicationGuideline[] | undefined;
  /**
   * Lists the jurisdictions that this medication knowledge was written for.
   * The codes could have varying granularity from a country or group of countries down to a specific district.
   */
  intendedJurisdiction?: CodeableConcept[] | undefined;
  /**
   * Categorization of the medication within a formulary or classification system.
   */
  medicineClassification?: MedicationKnowledgeMedicineClassification[] | undefined;
  /**
   * The program under which the medication is reviewed.
   */
  monitoringProgram?: MedicationKnowledgeMonitoringProgram[] | undefined;
  /**
   * Associated documentation about the medication.
   */
  monograph?: MedicationKnowledgeMonograph[] | undefined;
  /**
   * All of the names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
   */
  name?: string[] | undefined;
  _name?: Element[] | undefined;
  /**
   * Information that only applies to packages (not products).
   */
  packaging?: MedicationKnowledgePackaging[] | undefined;
  /**
   * The instructions for preparing the medication.
   */
  preparationInstruction?: string | undefined;
  _preparationInstruction?: Element | undefined;
  /**
   * Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
   */
  productType?: CodeableConcept[] | undefined;
  /**
   * Regulatory information about a medication.
   */
  regulatory?: MedicationKnowledgeRegulatory[] | undefined;
  /**
   * Associated or related medications. For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor.
   */
  relatedMedicationKnowledge?: MedicationKnowledgeRelatedMedicationKnowledge[] | undefined;
  /**
   * A code to indicate if the medication referred to by this MedicationKnowledge is in active use within the drug database or inventory system. The status refers to the validity about the information of the medication and not to its medicinal properties.
   * This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
   */
  status?: ('active'|'entered-in-error'|'inactive') | undefined;
  _status?: Element | undefined;
  /**
   * Information on how the medication should be stored, for example, refrigeration temperatures and length of stability at a given temperature.
   */
  storageGuideline?: MedicationKnowledgeStorageGuideline[] | undefined;
}
/**
 * First fill details
 * If populating this element, either the quantity or the duration must be included.
 */
export interface MedicationRequestDispenseRequestInitialFill extends BackboneElement {
  /**
   * The length of time that the first dispense is expected to last.
   */
  duration?: Duration | undefined;
  /**
   * The amount or quantity to provide as part of the first dispense.
   */
  quantity?: Quantity | undefined;
}
/**
 * Medication supply authorization
 */
export interface MedicationRequestDispenseRequest extends BackboneElement {
  /**
   * The minimum period of time that must occur between dispenses of the medication.
   */
  dispenseInterval?: Duration | undefined;
  /**
   * Indicates the intended performing Organization that will dispense the medication as specified by the prescriber.
   */
  dispenser?: Reference | undefined;
  /**
   * Provides additional information to the dispenser, for example, counselling to be provided to the patient.
   */
  dispenserInstruction?: Annotation[] | undefined;
  /**
   * Provides information about the type of adherence packaging to be supplied for the medication dispense.
   */
  doseAdministrationAid?: CodeableConcept | undefined;
  /**
   * Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
   * In some situations, this attribute may be used instead of quantity to identify the amount supplied by how long it is expected to last, rather than the physical quantity issued, e.g. 90 days supply of medication (based on an ordered dosage). When possible, it is always better to specify quantity, as this tends to be more precise. expectedSupplyDuration will always be an estimate that can be influenced by external factors.
   */
  expectedSupplyDuration?: Duration | undefined;
  /**
   * Indicates the quantity or duration for the first dispense of the medication.
   * If populating this element, either the quantity or the duration must be included.
   */
  initialFill?: MedicationRequestDispenseRequestInitialFill | undefined;
  /**
   * An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.  A prescriber may explicitly say that zero refills are permitted after the initial dispense.
   * If displaying "number of authorized fills", add 1 to this number.
   */
  numberOfRepeatsAllowed?: number | undefined;
  /**
   * The amount that is to be dispensed for one fill.
   */
  quantity?: Quantity | undefined;
  /**
   * This indicates the validity period of a prescription (stale dating the Prescription).
   * It reflects the prescribers' perspective for the validity of the prescription. Dispenses must not be made against the prescription outside of this period. The lower-bound of the Dispensing Window signifies the earliest date that the prescription can be filled for the first time. If an upper-bound is not specified then the Prescription is open-ended or will default to a stale-date based on regulations.
   */
  validityPeriod?: Period | undefined;
}
/**
 * Any restrictions on medication substitution
 */
export interface MedicationRequestSubstitution extends BackboneElement {
  /**
   * True if the prescriber allows a different drug to be dispensed from what was prescribed.
   * This element is labeled as a modifier because whether substitution is allow or not, it cannot be ignored.
   */
  allowedboolean?: boolean | undefined;
  _allowedboolean?: Element | undefined;
  /**
   * True if the prescriber allows a different drug to be dispensed from what was prescribed.
   * This element is labeled as a modifier because whether substitution is allow or not, it cannot be ignored.
   */
  allowedCodeableConcept?: CodeableConcept | undefined;
  /**
   * Indicates the reason for the substitution, or why substitution must or must not be performed.
   */
  reason?: CodeableConcept | undefined;
}
export interface MedicationRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationRequest';
  /**
   * The date (and perhaps time) when the prescription was initially written or authored on.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * A plan or request that is fulfilled in whole or in part by this medication request.
   */
  basedOn?: Reference[] | undefined;
  /**
   * An arbitrary categorization or grouping of the medication request.  It could be used for indicating where meds are intended to be administered, eg. in an inpatient setting or in a patient's home, or a legal category of the medication.
   * The category can be used to include where the medication is expected to be consumed or other types of requests.  The examplar value set represents where the meds are intended to be administered and is just one example of request categorization.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The description of the overall pattern of the administration of the medication to the patient.
   * This attribute should not be confused with the protocol of the medication.
   */
  courseOfTherapyType?: CodeableConcept | undefined;
  /**
   * The intended type of device that is to be used for the administration of the medication (for example, PCA Pump).
   */
  device?: CodeableReference[] | undefined;
  /**
   * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
   */
  dispenseRequest?: MedicationRequestDispenseRequest | undefined;
  /**
   * If true, indicates that the provider is asking for the patient to either stop taking or to not start taking the specified medication. For example, the patient is taking an existing medication and the provider is changing their medication. They want to create two seperate requests: one to stop using the current medication and another to start the new medication.
   * If do not perform is not specified, the request is a positive request e.g. "do perform".
   */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;
  /**
   * Specific instructions for how the medication is to be used by the patient.
   * There are examples where a medication request may include the option of an oral dose or an Intravenous or Intramuscular dose.  For example, "Ondansetron 8mg orally or IV twice a day as needed for nausea" or "Compazine® (prochlorperazine) 5-10mg PO or 25mg PR bid prn nausea or vomiting".  In these cases, two medication requests would be created that could be grouped together.  The decision on which dose and route of administration to use is based on the patient's condition at the time the dose is needed. In general, each prescribed drug will be a separate Medication Request. 
   * When drug orders are grouped together at the time of order entry,  but each of the drugs can be manipulated independently e.g. changing the status of one order to "completed" or "cancelled", changing another order status to "on-hold", the method to "group" all of the medication requests together is to use  MedicationRequest.groupIdentifier element.  All of the orders grouped together in this manner will have the same groupIdentifier, and separately, each order in the group may have a unique identifier.  
   * There are cases that require grouping of Medication orders together when it is necessary to specify optionality e.g. order two drugs at one time, but stating either of these drugs may be used to treat the patient.  The use of a RequestOrchestration should be used as a parent for the Medication orders that require this type of grouping. An example when it may be necessary to group medication orders together is when you specify timing relationships e.g. order drug "xyz" with dose 123, then taper the same drug to a different dose after some interval of time
   * precedence:
   * e.g. give drug "abc" followed by drug "def"
   * e.g. give drug 30 minutes before some procedure was performed
   * more generically this supports - hierarchical groups of actions, where each specific action references the action to be performed (in terms of a Request resource), and each group describes additional behavior, relationships, and applicable conditions between the actions in the overall group.
   * Note that one should NOT use the List or Composition resource to accomplish the above requirements.  You may use List or Composition for other business requirements, but not to address the specific requirements of grouping medication orders.
   */
  dosageInstruction?: Dosage[] | undefined;
  /**
   * The period over which the medication is to be taken.  Where there are multiple dosageInstruction lines (for example, tapering doses), this is the earliest date and the latest end date of the dosageInstructions.
   */
  effectiveDosePeriod?: Period | undefined;
  /**
   * The Encounter during which this [x] was created or to which the creation of this record is tightly associated.
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter."    If there is a need to link to episodes of care they will be handled with an extension.
   */
  encounter?: Reference | undefined;
  /**
   * Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
   * This might not include provenances for all versions of the request – only those deemed "relevant" or important. This SHALL NOT include the provenance associated with this current version of the resource. (If that provenance is deemed to be a "relevant" change, it will need to be added as part of a later update. Until then, it can be queried directly as the provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
   */
  eventHistory?: Reference[] | undefined;
  /**
   * A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
   */
  groupIdentifier?: Identifier | undefined;
  /**
   * Identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The person or organization who provided the information about this request, if the source is someone other than the requestor.  This is often used when the MedicationRequest is reported by another person.
   */
  informationSource?: Reference[] | undefined;
  /**
   * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
   */
  insurance?: Reference[] | undefined;
  /**
   * Whether the request is a proposal, plan, or an original order.
   * It is expected that the type of requester will be restricted for different stages of a MedicationRequest.  For example, Proposals can be created by a patient, relatedPerson, Practitioner or Device.  Plans can be created by Practitioners, Patients, RelatedPersons and Devices.  Original orders can be created by a Practitioner only.
   * An instance-order is an instantiation of a request or order and may be used to populate Medication Administration Record.
   * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
   */
  intent: ('proposal'|'plan'|'order'|'original-order'|'reflex-order'|'filler-order'|'instance-order'|'option');
  _intent?: Element | undefined;
  /**
   * Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the Medication resource is recommended.  For example, if you require form or lot number or if the medication is compounded or extemporaneously prepared, then you must reference the Medication resource.
   */
  medication: CodeableReference;
  /**
   * Extra information about the prescription that could not be conveyed by the other attributes.
   */
  note?: Annotation[] | undefined;
  /**
   * The specified desired performer of the medication treatment (e.g. the performer of the medication administration).  For devices, this is the device that is intended to perform the administration of the medication.  An IV Pump would be an example of a device that is performing the administration.  Both the IV Pump and the practitioner that set the rate or bolus on the pump can be listed as performers.
   */
  performer?: Reference[] | undefined;
  /**
   * Indicates the type of performer of the administration of the medication.
   * If specified without indicating a performer, this indicates that the performer must be of the specified type. If specified with a performer then it indicates the requirements of the performer if the designated performer is not available.
   */
  performerType?: CodeableConcept | undefined;
  /**
   * Indicates how quickly the Medication Request should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * Reference to an order/prescription that is being replaced by this MedicationRequest.
   */
  priorPrescription?: Reference | undefined;
  /**
   * The reason or the indication for ordering or not ordering the medication.
   * This could be a diagnosis code. If a full condition record exists or additional detail is needed, use reasonReference.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
   */
  recorder?: Reference | undefined;
  /**
   * The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.
   */
  renderedDosageInstruction?: string | undefined;
  _renderedDosageInstruction?: Element | undefined;
  /**
   * Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
   * If not populated, then assume that this is the original record and not reported
   */
  reported?: boolean | undefined;
  _reported?: Element | undefined;
  /**
   * The individual, organization, or device that initiated the request and has responsibility for its activation.
   */
  requester?: Reference | undefined;
  /**
   * A code specifying the current state of the order.  Generally, this will be active or completed state.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   * Clinical decision support systems should take the status into account when determining which medications to include in their algorithms.
   */
  status: ('active'|'on-hold'|'ended'|'stopped'|'completed'|'cancelled'|'entered-in-error'|'draft'|'unknown');
  _status?: Element | undefined;
  /**
   * The date (and perhaps time) when the status was changed.
   */
  statusChanged?: string | undefined;
  _statusChanged?: Element | undefined;
  /**
   * Captures the reason for the current state of the MedicationRequest.
   * This is generally only used for "exception" statuses such as "suspended" or "cancelled". The reason why the MedicationRequest was created at all is captured in reasonCode, not here.
   */
  statusReason?: CodeableConcept | undefined;
  /**
   * The individual or group for whom the medication has been requested.
   * The subject on a medication request is mandatory.  For the secondary use case where the actual subject is not provided, there still must be an anonymized subject specified.
   */
  subject: Reference;
  /**
   * Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
   */
  substitution?: MedicationRequestSubstitution | undefined;
  /**
   * Information to support fulfilling (i.e. dispensing or administering) of the medication, for example, patient height and weight, a MedicationStatement for the patient).
   * This attribute can be used to reference a MedicationStatement about the patients' medication use.
   */
  supportingInformation?: Reference[] | undefined;
}
/**
 * Indicates whether the medication is or is not being consumed or administered
 * This element can be used to indicate whether a patient is following a course of treatment as instructed/prescribed or whether they are taking medications of their own volition.  It can also be used to indicate that a patient is not taking a medication, either because they were told not to or because they decided on their own.
 */
export interface MedicationStatementAdherence extends BackboneElement {
  /**
   * Type of the adherence for the medication.
   */
  code: CodeableConcept;
  /**
   * Captures the reason for the current use or adherence of a medication.
   * This is generally only used for "exception" statuses such as "entered-in-error". The reason for performing the event at all is captured in reasonCode, not here.
   */
  reason?: CodeableConcept | undefined;
}
export interface MedicationStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationStatement';
  /**
   * Indicates whether the medication is or is not being consumed or administered.
   * This element can be used to indicate whether a patient is following a course of treatment as instructed/prescribed or whether they are taking medications of their own volition.  It can also be used to indicate that a patient is not taking a medication, either because they were told not to or because they decided on their own.
   */
  adherence?: MedicationStatementAdherence | undefined;
  /**
   * Type of medication statement (for example, drug classification like ATC, where meds would be administered, legal category of the medication.).
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The date when the Medication Statement was asserted by the information source.
   */
  dateAsserted?: string | undefined;
  _dateAsserted?: Element | undefined;
  /**
   * Allows linking the MedicationStatement to the underlying MedicationRequest, or to other information that supports or is used to derive the MedicationStatement.
   * Likely references would be to MedicationRequest, MedicationDispense, Claim, Observation or QuestionnaireAnswers.  The most common use cases for deriving a MedicationStatement comes from creating a MedicationStatement from a MedicationRequest or from a lab observation or a claim.  it should be noted that the amount of information that is available varies from the type resource that you derive the MedicationStatement from.
   */
  derivedFrom?: Reference[] | undefined;
  /**
   * Indicates how the medication is/was or should be taken by the patient.
   * The dates included in the dosage on a Medication Statement reflect the dates for a given dose.  For example, "from November 1, 2016 to November 3, 2016, take one tablet daily and from November 4, 2016 to November 7, 2016, take two tablets daily."  It is expected that this specificity may only be populated where the patient brings in their labeled container or where the Medication Statement is derived from a MedicationRequest.
   */
  dosage?: Dosage[] | undefined;
  /**
   * The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.adherence element is Not Taking).
   * This attribute reflects the period over which the patient consumed the medication and is expected to be populated on the majority of Medication Statements. If the medication is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
   */
  effectivestring?: string | undefined;
  _effectivestring?: Element | undefined;
  /**
   * The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.adherence element is Not Taking).
   * This attribute reflects the period over which the patient consumed the medication and is expected to be populated on the majority of Medication Statements. If the medication is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
   */
  effectivePeriod?: Period | undefined;
  /**
   * The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.adherence element is Not Taking).
   * This attribute reflects the period over which the patient consumed the medication and is expected to be populated on the majority of Medication Statements. If the medication is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
   */
  effectiveTiming?: Timing | undefined;
  /**
   * The encounter that establishes the context for this MedicationStatement.
   */
  encounter?: Reference | undefined;
  /**
   * Identifiers associated with this Medication Statement that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The person or organization that provided the information about the taking of this medication. Note: Use derivedFrom when a MedicationStatement is derived from other resources, e.g. Claim or MedicationRequest.
   */
  informationSource?: Reference[] | undefined;
  /**
   * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number, then you must reference the Medication resource.
   */
  medication: CodeableReference;
  /**
   * Provides extra information about the Medication Statement that is not conveyed by the other attributes.
   */
  note?: Annotation[] | undefined;
  /**
   * A larger event of which this particular MedicationStatement is a component or step.
   */
  partOf?: Reference[] | undefined;
  /**
   * A concept, Condition or observation that supports why the medication is being/was taken.
   * This could be a diagnosis code. If a full condition record exists or additional detail is needed, use reasonForUseReference.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * Link to information that is relevant to a medication statement, for example, illicit drug use, gestational age, etc.
   */
  relatedClinicalInformation?: Reference[] | undefined;
  /**
   * The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.
   */
  renderedDosageInstruction?: string | undefined;
  _renderedDosageInstruction?: Element | undefined;
  /**
   * A code representing the status of recording the medication statement.
   * This status concerns just the recording of the medication statement.  MedicationStatement.adherence should be used for indicating a patient's adherence to the information in this resource.  Note, the statuses are different than in previous releases for MedicationStatement or MedicationStatement.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('recorded'|'entered-in-error'|'draft');
  _status?: Element | undefined;
  /**
   * The person, animal or group who is/was taking the medication.
   */
  subject: Reference;
}
/**
 * Key product features such as "sugar free", "modified release"
 */
export interface MedicinalProductDefinitionCharacteristic extends BackboneElement {
  /**
   * A code expressing the type of characteristic.
   */
  type: CodeableConcept;
  /**
   * A value for the characteristic.text.
   * Text, as markdown, is intended to be used only when the item cannot ever reasonably be coded. Otherwise, for cases where a code is not available, but is feasible, use CodeableConcept.text.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * A value for the characteristic.text.
   * Text, as markdown, is intended to be used only when the item cannot ever reasonably be coded. Otherwise, for cases where a code is not available, but is feasible, use CodeableConcept.text.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * A value for the characteristic.text.
   * Text, as markdown, is intended to be used only when the item cannot ever reasonably be coded. Otherwise, for cases where a code is not available, but is feasible, use CodeableConcept.text.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * A value for the characteristic.text.
   * Text, as markdown, is intended to be used only when the item cannot ever reasonably be coded. Otherwise, for cases where a code is not available, but is feasible, use CodeableConcept.text.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * A value for the characteristic.text.
   * Text, as markdown, is intended to be used only when the item cannot ever reasonably be coded. Otherwise, for cases where a code is not available, but is feasible, use CodeableConcept.text.
   */
  valuenumber?: number | undefined;
  /**
   * A value for the characteristic.text.
   * Text, as markdown, is intended to be used only when the item cannot ever reasonably be coded. Otherwise, for cases where a code is not available, but is feasible, use CodeableConcept.text.
   */
  valueQuantity?: Quantity | undefined;
}
/**
 * A product specific contact, person (in a role), or an organization
 */
export interface MedicinalProductDefinitionContact extends BackboneElement {
  /**
   * A product specific contact, person (in a role), or an organization.
   */
  contact: Reference;
  /**
   * Allows the contact to be classified, for example QPPV, Pharmacovigilance Enquiry Information.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Reference to another product, e.g. for linking authorised to investigational product
 */
export interface MedicinalProductDefinitionCrossReference extends BackboneElement {
  /**
   * Reference to another product, e.g. for linking authorised to investigational product.
   */
  product: CodeableReference;
  /**
   * The type of relationship, for instance branded to generic, virtual to actual product, product to development product (investigational), parallel import version.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Coding words or phrases of the name
 */
export interface MedicinalProductDefinitionNamePart extends BackboneElement {
  /**
   * A fragment of a product name.
   */
  part: string;
  _part?: Element | undefined;
  /**
   * Identifying type for this part of the name (e.g. strength part).
   */
  type: CodeableConcept;
}
/**
 * Country and jurisdiction where the name applies
 */
export interface MedicinalProductDefinitionNameUsage extends BackboneElement {
  /**
   * Country code for where this name applies.
   */
  country: CodeableConcept;
  /**
   * Jurisdiction code for where this name applies. A jurisdiction may be a sub- or supra-national entity (e.g. a state or a geographic region).
   */
  jurisdiction?: CodeableConcept | undefined;
  /**
   * Language code for this name.
   */
  language: CodeableConcept;
}
/**
 * The product's name, including full name and possibly coded parts
 */
export interface MedicinalProductDefinitionName extends BackboneElement {
  /**
   * Coding words or phrases of the name.
   */
  part?: MedicinalProductDefinitionNamePart[] | undefined;
  /**
   * The full product name.
   */
  productName: string;
  _productName?: Element | undefined;
  /**
   * Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary.
   */
  type?: CodeableConcept | undefined;
  /**
   * Country and jurisdiction where the name applies, and associated language.
   */
  usage?: MedicinalProductDefinitionNameUsage[] | undefined;
}
/**
 * A manufacturing or administrative process for the medicinal product
 */
export interface MedicinalProductDefinitionOperation extends BackboneElement {
  /**
   * Specifies whether this particular business or manufacturing process is considered proprietary or confidential.
   */
  confidentialityIndicator?: CodeableConcept | undefined;
  /**
   * Date range of applicability.
   */
  effectiveDate?: Period | undefined;
  /**
   * The organization or establishment responsible for (or associated with) the particular process or step, examples include the manufacturer, importer, agent.
   */
  organization?: Reference[] | undefined;
  /**
   * The type of manufacturing operation e.g. manufacturing itself, re-packaging. For the authorization of this, a RegulatedAuthorization would point to the same plan or activity referenced here.
   */
  type?: CodeableReference | undefined;
}
export interface MedicinalProductDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicinalProductDefinition';
  /**
   * Whether the Medicinal Product is subject to additional monitoring for regulatory reasons, such as heightened reporting requirements.
   */
  additionalMonitoringIndicator?: CodeableConcept | undefined;
  /**
   * Additional information or supporting documentation about the medicinal product.
   */
  attachedDocument?: Reference[] | undefined;
  /**
   * Allows the key product features to be recorded, such as "sugar free", "modified release", "parallel import".
   */
  characteristic?: MedicinalProductDefinitionCharacteristic[] | undefined;
  /**
   * Allows the product to be classified by various systems, commonly WHO ATC.
   */
  classification?: CodeableConcept[] | undefined;
  /**
   * Clinical trials or studies that this product is involved in.
   */
  clinicalTrial?: Reference[] | undefined;
  /**
   * A code that this product is known by, usually within some formal terminology, perhaps assigned by a third party (i.e. not the manufacturer or regulator). Products (types of medications) tend to be known by identifiers during development and within regulatory process. However when they are prescribed they tend to be identified by codes. The same product may be have multiple codes, applied to it by multiple organizations.
   */
  code?: Coding[] | undefined;
  /**
   * The dose form for a single part product, or combined form of a multiple part product. This is one concept that describes all the components. It does not represent the form with components physically mixed, if that might be necessary, for which see (AdministrableProductDefinition.administrableDoseForm).
   */
  combinedPharmaceuticalDoseForm?: CodeableConcept | undefined;
  /**
   * Types of medicinal manufactured items and/or devices that this product consists of, such as tablets, capsule, or syringes. Used as a direct link when the item's packaging is not being recorded (see also PackagedProductDefinition.package.containedItem.item).
   */
  comprisedOf?: Reference[] | undefined;
  /**
   * A product specific contact, person (in a role), or an organization.
   */
  contact?: MedicinalProductDefinitionContact[] | undefined;
  /**
   * Reference to another product, e.g. for linking authorised to investigational product, or a virtual product.
   */
  crossReference?: MedicinalProductDefinitionCrossReference[] | undefined;
  /**
   * General description of this product.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * If this medicine applies to human or veterinary uses.
   */
  domain?: CodeableConcept | undefined;
  /**
   * Business identifier for this product. Could be an MPID. When in development or being regulated, products are typically referenced by official identifiers, assigned by a manufacturer or regulator, and unique to a product (which, when compared to a product instance being prescribed, is actually a product type). See also MedicinalProductDefinition.code.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Any component of the drug product which is not the chemical entity defined as the drug substance, or an excipient in the drug product. This includes process-related impurities and contaminants, product-related impurities including degradation products.
   */
  impurity?: CodeableReference[] | undefined;
  /**
   * Description of indication(s) for this product, used when structured indications are not required. In cases where structured indications are required, they are captured using the ClinicalUseDefinition resource. An indication is a medical situation for which using the product is appropriate.
   */
  indication?: string | undefined;
  _indication?: Element | undefined;
  /**
   * The ingredients of this medicinal product - when not detailed in other resources. This is only needed if the ingredients are not specified by incoming references from the Ingredient resource, or indirectly via incoming AdministrableProductDefinition, PackagedProductDefinition or ManufacturedItemDefinition references. In cases where those levels of detail are not used, the ingredients may be specified directly here as codes.
   */
  ingredient?: CodeableConcept[] | undefined;
  /**
   * The legal status of supply of the medicinal product as classified by the regulator.
   */
  legalStatusOfSupply?: CodeableConcept | undefined;
  /**
   * Marketing status of the medicinal product, in contrast to marketing authorization. This refers to the product being actually 'on the market' as opposed to being allowed to be on the market (which is an authorization).
   */
  marketingStatus?: MarketingStatus[] | undefined;
  /**
   * A master file for the medicinal product (e.g. Pharmacovigilance System Master File). Drug master files (DMFs) are documents submitted to regulatory agencies to provide confidential detailed information about facilities, processes or articles used in the manufacturing, processing, packaging and storing of drug products.
   */
  masterFile?: Reference[] | undefined;
  /**
   * The product's name, including full name and possibly coded parts.
   */
  name: MedicinalProductDefinitionName[];
  /**
   * A manufacturing or administrative process or step associated with (or performed on) the medicinal product.
   */
  operation?: MedicinalProductDefinitionOperation[] | undefined;
  /**
   * Package type for the product. See also the PackagedProductDefinition resource.
   */
  packagedMedicinalProduct?: CodeableConcept[] | undefined;
  /**
   * If authorised for use in children, or infants, neonates etc.
   */
  pediatricUseIndicator?: CodeableConcept | undefined;
  /**
   * The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route. See also AdministrableProductDefinition resource. MedicinalProductDefinition.route is the same concept as AdministrableProductDefinition.routeOfAdministration.code, and they cannot be used together.
   */
  route?: CodeableConcept[] | undefined;
  /**
   * Whether the Medicinal Product is subject to special measures for regulatory reasons, such as a requirement to conduct post-authorization studies.
   */
  specialMeasures?: CodeableConcept[] | undefined;
  /**
   * The status within the lifecycle of this product record. A high-level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization status.
   */
  status?: CodeableConcept | undefined;
  /**
   * The date at which the given status became applicable.
   */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;
  /**
   * Regulatory type, e.g. Investigational or Authorized.
   */
  type?: CodeableConcept | undefined;
  /**
   * A business identifier relating to a specific version of the product, this is commonly used to support revisions to an existing product.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Responses to this message
 * This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
 */
export interface MessageDefinitionAllowedResponse extends BackboneElement {
  /**
   * A reference to the message definition that must be adhered to by this supported response.
   */
  message: string;
  _message?: Element | undefined;
  /**
   * Provides a description of the circumstances in which this response should be used (as opposed to one of the alternative responses).
   */
  situation?: string | undefined;
  _situation?: Element | undefined;
}
/**
 * Resource(s) that are the subject of the event
 */
export interface MessageDefinitionFocus extends BackboneElement {
  /**
   * The kind of resource that must be the focus for this message.
   * Multiple focuses addressing different resources may occasionally occur.  E.g. to link or unlink a resource from a particular account or encounter, etc.
   */
  code: ('Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription');
  _code?: Element | undefined;
  /**
   * Identifies the maximum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
   */
  max?: string | undefined;
  _max?: Element | undefined;
  /**
   * Identifies the minimum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
   */
  min: number;
  /**
   * A profile that reflects constraints for the focal resource (and potentially for related resources).
   * This should be present for most message definitions.  However, if the message focus is only a single resource and there is no need to include referenced resources or otherwise enforce the presence of particular elements, it can be omitted.
   */
  profile?: string | undefined;
  _profile?: Element | undefined;
}
/**
 * This would be a MIF-level artifact.
 */
export interface MessageDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MessageDefinition';
  /**
   * Indicates what types of messages may be sent as an application-level response to this message.
   * This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
   */
  allowedResponse?: MessageDefinitionAllowedResponse[] | undefined;
  /**
   * The MessageDefinition that is the basis for the contents of this resource.
   */
  base?: string | undefined;
  _base?: Element | undefined;
  /**
   * The impact of the content of the message.
   */
  category?: ('consequence'|'currency'|'notification') | undefined;
  _category?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the message definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the message definition.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the message definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the message definition changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the message definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date: string;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the message definition from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the message definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the message definition is presumed to be the predominant language in the place the message definition was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Event code or link to the EventDefinition.
   */
  eventCoding?: Coding | undefined;
  /**
   * Event code or link to the EventDefinition.
   */
  eventstring?: string | undefined;
  _eventstring?: Element | undefined;
  /**
   * A Boolean value to indicate that this message definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of message definitions that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
   */
  focus?: MessageDefinitionFocus[] | undefined;
  /**
   * Graph is Canonical reference to a GraphDefinition. If a URL is provided, it is the canonical reference to a GraphDefinition that it controls what additional resources are to be added to the Bundle when building the message. The GraphDefinition can also specify profiles that apply to the various resources.
   */
  graph?: string | undefined;
  _graph?: Element | undefined;
  /**
   * A formal identifier that is used to identify this message definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this message definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the message definition is intended to be used.
   * It may be possible for the message definition to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A natural language name identifying the message definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Identifies a protocol or workflow that this MessageDefinition represents a step in.
   * It should be possible to use MessageDefinition to describe a message to be used by certain steps in a particular protocol as part of a PlanDefinition or ActivityDefinition.
   */
  parent?: string[] | undefined;
  _parent?: Element[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the message definition.
   * Usually an organization but may be an individual. The publisher (or steward) of the message definition is the organization or individual primarily responsible for the maintenance and upkeep of the message definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the message definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this message definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the message definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this message definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * A MessageDefinition that is superseded by this definition.
   */
  replaces?: string[] | undefined;
  _replaces?: Element[] | undefined;
  /**
   * Declare at a message definition level whether a response is required or only upon error or success, or never.
   * This enables the capability currently available through MSH-16 (Application Level acknowledgement) in HL7 Version 2 to declare at a message instance level whether a response is required or only upon error or success, or never.
   */
  responseRequired?: ('always'|'on-error'|'never'|'on-success') | undefined;
  _responseRequired?: Element | undefined;
  /**
   * The status of this message definition. Enables tracking the life-cycle of the content.
   * Allows filtering of message definitions that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the message definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * The business identifier that is used to reference the MessageDefinition and *is* expected to be consistent from server to server.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate message definition instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the message definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the message definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different message definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the message definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Message destination application(s)
 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
 */
export interface MessageHeaderDestination extends BackboneElement {
  /**
   * Indicates where the message should be routed.
   * The url may be a non-resolvable URI for systems that do not use standard network-based addresses.
   */
  endpointReference?: Reference | undefined;
  /**
   * Indicates where the message should be routed.
   * The url may be a non-resolvable URI for systems that do not use standard network-based addresses.
   */
  endpointstring?: string | undefined;
  _endpointstring?: Element | undefined;
  /**
   * Human-readable name for the target system.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.
   */
  receiver?: Reference | undefined;
  /**
   * Identifies the target end system in situations where the initial message transmission is to an intermediary system.
   */
  target?: Reference | undefined;
}
/**
 * If this is a reply to prior message
 */
export interface MessageHeaderResponse extends BackboneElement {
  /**
   * Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.
   * This is a generic response to the request message. Specific data for the response will be found in MessageHeader.focus.
   */
  code: ('ok'|'transient-error'|'fatal-error');
  _code?: Element | undefined;
  /**
   * Full details of any issues found in the message.
   * This SHALL be contained in the bundle. If any of the issues are errors, the response code SHALL be an error.
   */
  details?: Reference | undefined;
  /**
   * The Bundle.identifier of the message to which this message is a response.
   */
  identifier: Identifier;
}
/**
 * Message source application
 */
export interface MessageHeaderSource extends BackboneElement {
  /**
   * An e-mail, phone, website or other contact point to use to resolve issues with message communications.
   */
  contact?: ContactPoint | undefined;
  /**
   * Identifies the routing target to send acknowledgements to.
   * The url may be a non-resolvable URI for systems that do not use standard network-based addresses.
   */
  endpointReference?: Reference | undefined;
  /**
   * Identifies the routing target to send acknowledgements to.
   * The url may be a non-resolvable URI for systems that do not use standard network-based addresses.
   */
  endpointstring?: string | undefined;
  _endpointstring?: Element | undefined;
  /**
   * Human-readable name for the source system.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * May include configuration or other information useful in debugging.
   */
  software?: string | undefined;
  _software?: Element | undefined;
  /**
   * Can convey versions of multiple systems in situations where a message passes through multiple hands.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
export interface MessageHeader extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MessageHeader';
  /**
   * The logical author of the message - the personor device that decided the described event should happen. When there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.
   * Usually only for the request but can be used in a response.Proposing to remove and rely on Task to convey this information.
   */
  author?: Reference | undefined;
  /**
   * Permanent link to the MessageDefinition for this message.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * The destination application which the message is intended for.
   * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
   */
  messageDestination?: MessageHeaderDestination[] | undefined;
  /**
   * Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification are defined by the implementation.  Alternatively a canonical uri to the EventDefinition.
   * The time of the event will be found in the focus resource. The time of the message will be found in [Bundle.timestamp](bundle-definitions.html#Bundle.timestamp).
   */
  eventstring?: string | undefined;
  _eventstring?: Element | undefined;
  /**
   * Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification are defined by the implementation.  Alternatively a canonical uri to the EventDefinition.
   * The time of the event will be found in the focus resource. The time of the message will be found in [Bundle.timestamp](bundle-definitions.html#Bundle.timestamp).
   */
  eventCoding?: Coding | undefined;
  /**
   * The actual data of the message - a reference to the root/focus class of the event. This is allowed to be a Parameters resource.
   * The data is defined where the transaction type is defined. The transaction data is always included in the bundle that is the full message.  Only the root resource is specified.  The resources it references should be contained in the bundle but are not also listed here.  Multiple repetitions are allowed to cater for merges and other situations with multiple focal targets.
   */
  focus?: Reference[] | undefined;
  /**
   * Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.
   */
  reason?: CodeableConcept | undefined;
  /**
   * Information about the message that this message is a response to.  Only present if this message is a response.
   */
  response?: MessageHeaderResponse | undefined;
  /**
   * The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.
   * Usually only for the request but can be used in a response.Proposing to remove and rely on Task to convey this information.
   */
  responsible?: Reference | undefined;
  /**
   * Identifies the sending system to allow the use of a trust relationship.
   * Use case is for where a (trusted) sending system is responsible for multiple organizations, and therefore cannot differentiate based on source endpoint / authentication alone. Proposing to remove and rely on Task to convey this information.
   */
  sender?: Reference | undefined;
  /**
   * The source application from which this message originated.
   */
  messageSource: MessageHeaderSource;
}
export interface MetadataResource extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: string;
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the {{title}}.
   */
  author?: ContactDetail[] | undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the {{title}}.
   */
  editor?: ContactDetail[] | undefined;
  /**
   * The period during which the {{title}} content was or is planned to be in active use.
   * The effective period for a {{title}}  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * An individual or organization asserted by the publisher to be responsible for officially endorsing the {{title}} for use in some setting.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the {{title}}.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * Descriptive topics related to the content of the {{title}}. Topics provide a high-level categorization as well as keywords for the {{title}} that can be useful for filtering and searching.
   * This element provides topical categorization and keywords for the {{title}}, as opposed to the more structured context-of-use information provided in the useContext element.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
   */
  topic?: CodeableConcept[] | undefined;
}
/**
 * Changes in sequence from the starting sequence
 */
export interface MolecularSequenceRelativeEdit extends BackboneElement {
  /**
   * End position of the edit on the starting sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
   */
  end?: number | undefined;
  /**
   * Allele in the starting sequence. Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the starting sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
   */
  replacedSequence?: string | undefined;
  _replacedSequence?: Element | undefined;
  /**
   * Allele that was observed. Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed sequence. When the sequence type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
   */
  replacementSequence?: string | undefined;
  _replacementSequence?: Element | undefined;
  /**
   * Start position of the edit on the starting sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
   */
  start?: number | undefined;
}
/**
 * A sequence used as starting sequence
 */
export interface MolecularSequenceRelativeStartingSequence extends BackboneElement {
  /**
   * Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
   */
  chromosome?: CodeableConcept | undefined;
  /**
   * The genome assembly used for starting sequence, e.g. GRCh38.
   */
  genomeAssembly?: CodeableConcept | undefined;
  /**
   * A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the "sense" strand, and the opposite complementary strand is the "antisense" strand.
   */
  orientation?: ('sense'|'antisense') | undefined;
  _orientation?: Element | undefined;
  /**
   * The reference sequence that represents the starting sequence.
   * A starting sequence may be represented in one of three ways:
   *   1.  CodeableConcept, using NCBI, LRG or other appropriate code systems
   *   1.  a simple string of IUPAC codes
   *   1.  a reference to another MolecularSequence resource.
   */
  sequenceCodeableConcept?: CodeableConcept | undefined;
  /**
   * The reference sequence that represents the starting sequence.
   * A starting sequence may be represented in one of three ways:
   *   1.  CodeableConcept, using NCBI, LRG or other appropriate code systems
   *   1.  a simple string of IUPAC codes
   *   1.  a reference to another MolecularSequence resource.
   */
  sequenceReference?: Reference | undefined;
  /**
   * The reference sequence that represents the starting sequence.
   * A starting sequence may be represented in one of three ways:
   *   1.  CodeableConcept, using NCBI, LRG or other appropriate code systems
   *   1.  a simple string of IUPAC codes
   *   1.  a reference to another MolecularSequence resource.
   */
  sequencestring?: string | undefined;
  _sequencestring?: Element | undefined;
  /**
   * An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long arm.
   */
  strand?: ('watson'|'crick') | undefined;
  _strand?: Element | undefined;
  /**
   * End position of the window on the starting sequence. This value should honor the rules of the  coordinateSystem.
   */
  windowEnd?: number | undefined;
  /**
   * Start position of the window on the starting sequence. This value should honor the rules of the coordinateSystem.
   */
  windowStart?: number | undefined;
}
/**
 * A sequence defined relative to another sequence
 */
export interface MolecularSequenceRelative extends BackboneElement {
  /**
   * These are different ways of identifying nucleotides or amino acids within a sequence. Different databases and file types may use different systems. For detail definitions, see https://loinc.org/92822-6/ for more detail.
   */
  coordinateSystem: CodeableConcept;
  /**
   * Changes in sequence from the starting sequence.
   */
  edit?: MolecularSequenceRelativeEdit[] | undefined;
  /**
   * Indicates the order in which the sequence should be considered when putting multiple 'relative' elements together.
   */
  ordinalPosition?: number | undefined;
  /**
   * Indicates the nucleotide range in the composed sequence when multiple 'relative' elements are used together.
   */
  sequenceRange?: Range | undefined;
  /**
   * A sequence that is used as a starting sequence to describe variants that are present in a sequence analyzed.
   */
  startingSequence?: MolecularSequenceRelativeStartingSequence | undefined;
}
export interface MolecularSequence extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MolecularSequence';
  /**
   * The method for sequencing, for example, chip information.
   */
  device?: Reference | undefined;
  /**
   * The actual focus of a molecular sequence when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, child, or sibling. For example, in trio testing, the subject would be the child (proband) and the focus would be the parent.
   */
  focus?: Reference[] | undefined;
  /**
   * Sequence that was observed as file content. Can be an actual file contents, or referenced by a URL to an external system.
   */
  formatted?: Attachment[] | undefined;
  /**
   * A unique identifier for this particular sequence instance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Sequence that was observed.
   */
  literal?: string | undefined;
  _literal?: Element | undefined;
  /**
   * The organization or lab that should be responsible for this result.
   */
  performer?: Reference | undefined;
  /**
   * A sequence defined relative to another sequence.
   */
  relative?: MolecularSequenceRelative[] | undefined;
  /**
   * Specimen used for sequencing.
   */
  specimen?: Reference | undefined;
  /**
   * Indicates the subject this sequence is associated too.
   */
  subject?: Reference | undefined;
  /**
   * Amino Acid Sequence/ DNA Sequence / RNA Sequence.
   */
  type?: ('aa'|'dna'|'rna') | undefined;
  _type?: Element | undefined;
}
/**
 * Unique identifiers used for system
 * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
 */
export interface NamingSystemUniqueId extends BackboneElement {
  /**
   * Indicates whether this identifier ie endorsed by the official owner of the associated naming system.
   */
  authoritative?: boolean | undefined;
  _authoritative?: Element | undefined;
  /**
   * Notes about the past or intended usage of this identifier.
   * e.g. "must be used in Germany" or "was initially published in error with this value".
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic.
   * Within a registry, a given identifier should only be "active" for a single namespace at a time.  (Ideally, an identifier should only ever be associated with a single namespace across all time).
   * The nuance of identifier deprecation is not represented with a separate element. When a determination is made that an identifier should not be used, the validity period end date is updated with the date the identifier is deemed to be deprecated. The identifier should no longer be used once the period end date is reached.
   */
  period?: Period | undefined;
  /**
   * Indicates whether this identifier is the "preferred" identifier of this type.
   */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;
  /**
   * Identifies the unique identifier scheme used for this particular identifier.
   * Different identifier types may be used in different types of communications (OIDs for v3, URIs for FHIR, etc.).  Other includes RUIDs from v3, standard v2 code name strings, etc. Preferred identifiers for the same identifier type SHOULD NOT overlap by period.
   */
  type: ('oid'|'uuid'|'uri'|'iri-stem'|'v2csmnemonic'|'other');
  _type?: Element | undefined;
  /**
   * The string that should be sent over the wire to identify the code system or identifier system.
   * If the value is a URI intended for use as FHIR system identifier, the URI should not contain "\" or "?" or "," since this makes escaping very difficult.
   */
  value: string;
  _value?: Element | undefined;
}
export interface NamingSystem extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'NamingSystem';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the NamingSystem.
   */
  author?: ContactDetail[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the naming system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the naming system.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the naming system was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the naming system changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the naming system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date: string;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the naming system from a consumer's perspective. Details about what the namespace identifies including scope, granularity, version labeling, etc.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the naming system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the naming system is presumed to be the predominant language in the place the naming system was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the NamingSystem.
   */
  editor?: ContactDetail[] | undefined;
  /**
   * The period during which the NamingSystem content was or is planned to be in active use.
   * The effective period for a NamingSystem determines when the content is applicable for usage and is independent of publication and review dates. For example, a NamingSystem intended to be used for the year 2016 might be published in 2015.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * An individual or organization asserted by the publisher to be responsible for officially endorsing the NamingSystem for use in some setting.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * A Boolean value to indicate that this naming system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of naming systems that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this naming system when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this naming system outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the naming system is intended to be used.
   * It may be possible for the naming system to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * Indicates the purpose for the naming system - what kinds of things does it make unique?
   */
  kind: ('codesystem'|'identifier'|'root');
  _kind?: Element | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the naming system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.The"symbolic name" for an OID would be captured as an extension.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the naming system.
   * Usually an organization but may be an individual. The publisher (or steward) of the naming system is the organization or individual primarily responsible for the maintenance and upkeep of the naming system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the naming system. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this naming system is needed and why it has been designed as it has.
   * This element does not describe the usage of the code system. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this code system.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.
   * This is the primary organization.  Responsibility for some aspects of a namespace may be delegated.
   */
  responsible?: string | undefined;
  _responsible?: Element | undefined;
  /**
   * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the NamingSystem.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * The status of this naming system. Enables tracking the life-cycle of the content.
   * Allows filtering of naming systems that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the naming system.
   * This title does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptions related to the content of the NamingSystem. Topics provide a high-level categorization as well as keywords for the NamingSystem that can be useful for filtering and searching.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * Categorizes a naming system for easier search by grouping related naming systems.
   * This will most commonly be used for identifier namespaces, but categories could potentially be useful for code systems and authorities as well.
   */
  type?: CodeableConcept | undefined;
  /**
   * Indicates how the system may be identified when referenced in electronic exchange.
   * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
   */
  uniqueId: NamingSystemUniqueId[];
  /**
   * An absolute URI that is used to identify this naming system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this naming system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the naming system is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
   */
  usage?: string | undefined;
  _usage?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate naming system instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the naming system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the naming system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different naming system instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the naming system with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which NamingSystem is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which NamingSystem is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * What food or fluid product or item was consumed
 */
export interface NutritionIntakeConsumedItem extends BackboneElement {
  /**
   * Quantity of the specified food.
   */
  amount?: Quantity | undefined;
  /**
   * Indicator when a patient is in a setting where it is helpful to know if food was not consumed, such as it was refused, held (as in tube feedings), or otherwise not provided. If a consumption is being recorded from an app, such as MyFitnessPal, this indicator will likely not be used.
   */
  notConsumed?: boolean | undefined;
  _notConsumed?: Element | undefined;
  /**
   * Document the reason the food or fluid was not consumed, such as refused, held, etc.
   */
  notConsumedReason?: CodeableConcept | undefined;
  /**
   * Identifies the food or fluid product that was consumed. This is potentially a link to a resource representing the details of the food product (TBD) or a simple attribute carrying a code that identifies the food from a known list of foods.
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of a new nutritionProduct resource is recommended.
   */
  nutritionProduct: CodeableReference;
  /**
   * Rate at which enteral feeding was administered.
   */
  rate?: Quantity | undefined;
  /**
   * Scheduled frequency of consumption.
   */
  schedule?: Timing | undefined;
  /**
   * Indicates what a category of item that was consumed: e.g., food, fluid, enteral, etc.
   */
  type: CodeableConcept;
}
/**
 * Total nutrient for the whole meal, product, serving
 * Individual item nutrients are not currently included in the resource and will likely end up as a reference in nutritionProduct to represent the individual items.
 */
export interface NutritionIntakeIngredientLabel extends BackboneElement {
  /**
   * Total amount of nutrient consumed.
   */
  amount: Quantity;
  /**
   * Total nutrient consumed. This could be a macronutrient (protein, fat, carbohydrate), or a vitamin and mineral.
   */
  nutrient: CodeableReference;
}
/**
 * Who was performed in the intake
 */
export interface NutritionIntakePerformer extends BackboneElement {
  /**
   * Who performed the intake.
   */
  actor: Reference;
  /**
   * Type of performer.
   */
  function?: CodeableConcept | undefined;
}
export interface NutritionIntake extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'NutritionIntake';
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this event.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Overall type of nutrition intake.
   */
  code?: CodeableConcept | undefined;
  /**
   * What food or fluid product or item was consumed.
   */
  consumedItem: NutritionIntakeConsumedItem[];
  /**
   * Allows linking the NutritionIntake to the underlying NutritionOrder, or to other information, such as AllergyIntolerance, that supports or is used to derive the NutritionIntake.
   * Likely references would be to AllergyIntolerance,  Observation or QuestionnaireAnswers.
   */
  derivedFrom?: Reference[] | undefined;
  /**
   * The encounter that establishes the context for this NutritionIntake.
   */
  encounter?: Reference | undefined;
  /**
   * Identifiers associated with this Nutrition Intake that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Total nutrient amounts for the whole meal, product, serving, etc.
   * Individual item nutrients are not currently included in the resource and will likely end up as a reference in nutritionProduct to represent the individual items.
   */
  ingredientLabel?: NutritionIntakeIngredientLabel[] | undefined;
  /**
   * Instantiates FHIR protocol or definition.
   */
  instantiatesCanonical?: string[] | undefined;
  _instantiatesCanonical?: Element[] | undefined;
  /**
   * Instantiates external protocol or definition.
   */
  instantiatesUri?: string[] | undefined;
  _instantiatesUri?: Element[] | undefined;
  /**
   * Where the intake occurred.
   */
  location?: Reference | undefined;
  /**
   * Provides extra information about the Nutrition Intake that is not conveyed by the other attributes.
   */
  note?: Annotation[] | undefined;
  /**
   * The interval of time during which it is being asserted that the patient is/was consuming the food or fluid.
   * This attribute reflects the period over which the patient consumed the food fluid and is expected to be populated on the majority of NutritionIntake. If the food or fluid is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
   */
  occurrencestring?: string | undefined;
  _occurrencestring?: Element | undefined;
  /**
   * The interval of time during which it is being asserted that the patient is/was consuming the food or fluid.
   * This attribute reflects the period over which the patient consumed the food fluid and is expected to be populated on the majority of NutritionIntake. If the food or fluid is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * A larger event of which this particular event is a component or step.
   */
  partOf?: Reference[] | undefined;
  /**
   * Who performed the intake and how they were involved.
   */
  performer?: NutritionIntakePerformer[] | undefined;
  /**
   * A reason, Condition or observation for why the food or fluid is /was consumed.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * The date when the Nutrition Intake was asserted by the information source.
   */
  recorded?: string | undefined;
  _recorded?: Element | undefined;
  /**
   * The person or organization that provided the information about the consumption of this food or fluid. Note: Use derivedFrom when a NutritionIntake is derived from other resources.
   */
  reportedboolean?: boolean | undefined;
  _reportedboolean?: Element | undefined;
  /**
   * The person or organization that provided the information about the consumption of this food or fluid. Note: Use derivedFrom when a NutritionIntake is derived from other resources.
   */
  reportedReference?: Reference | undefined;
  /**
   * A code representing the patient or other source's judgment about the state of the intake that this assertion is about.  Generally, this will be active or completed.
   * NutritionIntake is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for NutritionIntake.status contains codes that assert the status of the consumption of the food or fluid by the patient (for example, stopped or on hold) as well as codes that assert the status of the Nutrition Intake itself (for example, entered in error).
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('preparation'|'in-progress'|'not-done'|'on-hold'|'stopped'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * Captures the reason for the current state of the NutritionIntake.
   * This is generally only used for "exception" statuses such as "not-taken", "on-hold", "cancelled" or "entered-in-error". The reason for performing the event at all is captured in reasonCode, not here.
   */
  statusReason?: CodeableConcept[] | undefined;
  /**
   * The person, animal or group who is/was consuming the food or fluid.
   */
  subject: Reference;
}
/**
 * Components to add to the feeding
 */
export interface NutritionOrderEnteralFormulaAdditive extends BackboneElement {
  /**
   * The product or brand name of the type of modular component to be added to the formula.
   */
  productName?: string | undefined;
  _productName?: Element | undefined;
  /**
   * The amount of additive to be given in addition or to be mixed in with the base formula.
   */
  quantity?: Quantity | undefined;
  /**
   * Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
   */
  type?: CodeableReference | undefined;
}
/**
 * Scheduling information for enteral formula products
 */
export interface NutritionOrderEnteralFormulaAdministrationSchedule extends BackboneElement {
  /**
   * Indicates whether the enteral formula is only taken when needed within a specific dosing schedule.
   */
  asNeeded?: boolean | undefined;
  _asNeeded?: Element | undefined;
  /**
   * Indicates whether the enteral formula is only taken based on a precondition for taking the enteral formula.
   */
  asNeededFor?: CodeableConcept | undefined;
  /**
   * The time period and frequency at which the enteral formula should be given.  The enteral formula should be given for the combination of all schedules if more than one schedule is present.
   */
  timing?: Timing[] | undefined;
}
/**
 * Formula feeding instruction as structured data
 * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
 */
export interface NutritionOrderEnteralFormulaAdministration extends BackboneElement {
  /**
   * The volume of formula to provide to the patient per the specified administration schedule.
   */
  quantity?: Quantity | undefined;
  /**
   * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
   * Ratio is used when the quantity value in the denominator is not "1", otherwise use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus the Quantity datatype for "50 mL/hr".
   */
  rateQuantity?: Quantity | undefined;
  /**
   * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
   * Ratio is used when the quantity value in the denominator is not "1", otherwise use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus the Quantity datatype for "50 mL/hr".
   */
  rateRatio?: Ratio | undefined;
  /**
   * Schedule information for an enteral formula.
   */
  enteralFormulaSchedule?: NutritionOrderEnteralFormulaAdministrationSchedule | undefined;
}
/**
 * Enteral formula components
 */
export interface NutritionOrderEnteralFormula extends BackboneElement {
  /**
   * Indicates modular components to be provided in addition or mixed with the base formula.
   */
  additive?: NutritionOrderEnteralFormulaAdditive[] | undefined;
  /**
   * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
   * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
   */
  administration?: NutritionOrderEnteralFormulaAdministration[] | undefined;
  /**
   * Free text formula administration, feeding instructions or additional instructions or information.
   * Free text dosage instructions can be used for cases where the instructions are too complex to code.
   */
  administrationInstruction?: string | undefined;
  _administrationInstruction?: Element | undefined;
  /**
   * The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula".
   */
  baseFormulaProductName?: string | undefined;
  _baseFormulaProductName?: Element | undefined;
  /**
   * The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.
   */
  baseFormulaType?: CodeableReference | undefined;
  /**
   * The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL.
   */
  caloricDensity?: Quantity | undefined;
  /**
   * The intended type of device that is to be used for the administration of the enteral formula.
   */
  deliveryDevice?: CodeableReference[] | undefined;
  /**
   * The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
   */
  maxVolumeToDeliver?: Quantity | undefined;
  /**
   * The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
   */
  routeOfAdministration?: CodeableConcept | undefined;
}
/**
 * Required  nutrient modifications
 */
export interface NutritionOrderOralDietNutrient extends BackboneElement {
  /**
   * The quantity of the specified nutrient to include in diet.
   */
  amount?: Quantity | undefined;
  /**
   * The nutrient that is being modified such as carbohydrate or sodium.
   */
  modifier?: CodeableConcept | undefined;
}
/**
 * Scheduling information for oral diets
 */
export interface NutritionOrderOralDietSchedule extends BackboneElement {
  /**
   * Indicates whether the product is only taken when needed within a specific dosing schedule.
   */
  asNeeded?: boolean | undefined;
  _asNeeded?: Element | undefined;
  /**
   * Indicates whether the product is only taken based on a precondition for taking the product.
   */
  asNeededFor?: CodeableConcept | undefined;
  /**
   * The time period and frequency at which the diet should be given.  The diet should be given for the combination of all schedules if more than one schedule is present.
   */
  timing?: Timing[] | undefined;
}
/**
 * Required  texture modifications
 */
export interface NutritionOrderOralDietTexture extends BackboneElement {
  /**
   * The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types.
   * Coupled with the `texture.modifier`; could be (All Foods).
   */
  foodType?: CodeableConcept | undefined;
  /**
   * Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed.
   * Coupled with the foodType (Meat).
   */
  modifier?: CodeableConcept | undefined;
}
/**
 * Oral diet components
 */
export interface NutritionOrderOralDiet extends BackboneElement {
  /**
   * The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.
   */
  fluidConsistencyType?: CodeableConcept[] | undefined;
  /**
   * Free text or additional instructions or information pertaining to the oral diet.
   * Free text dosage instructions can be used for cases where the instructions are too complex to code.
   */
  instruction?: string | undefined;
  _instruction?: Element | undefined;
  /**
   * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
   */
  nutrient?: NutritionOrderOralDietNutrient[] | undefined;
  /**
   * Schedule information for an oral diet.
   */
  oralDietSchedule?: NutritionOrderOralDietSchedule | undefined;
  /**
   * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
   */
  texture?: NutritionOrderOralDietTexture[] | undefined;
  /**
   * The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Scheduling information for supplements
 */
export interface NutritionOrderSupplementSchedule extends BackboneElement {
  /**
   * Indicates whether the supplement is only taken when needed within a specific dosing schedule.
   */
  asNeeded?: boolean | undefined;
  _asNeeded?: Element | undefined;
  /**
   * Indicates whether the supplement is only taken based on a precondition for taking the supplement.
   */
  asNeededFor?: CodeableConcept | undefined;
  /**
   * The time period and frequency at which the supplement should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present.
   */
  timing?: Timing[] | undefined;
}
/**
 * Supplement components
 */
export interface NutritionOrderSupplement extends BackboneElement {
  /**
   * Free text or additional instructions or information pertaining to the oral supplement.
   * Free text dosage instructions can be used for cases where the instructions are too complex to code.
   */
  instruction?: string | undefined;
  _instruction?: Element | undefined;
  /**
   * The product or brand name of the nutritional supplement such as "Acme Protein Shake".
   */
  productName?: string | undefined;
  _productName?: Element | undefined;
  /**
   * The amount of the nutritional supplement to be given.
   */
  quantity?: Quantity | undefined;
  /**
   * Schedule information for a supplement.
   */
  supplementSchedule?: NutritionOrderSupplementSchedule | undefined;
  /**
   * The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
   */
  type?: CodeableReference | undefined;
}
/**
 * Referenced by an Order Request (workflow).
 */
export interface NutritionOrder extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'NutritionOrder';
  /**
   * A link to a record of allergies or intolerances  which should be included in the nutrition order.
   * Information on a patient's food allergies and intolerances to inform healthcare personnel about the type of foods that the patient shouldn't receive or consume.
   */
  allergyIntolerance?: Reference[] | undefined;
  /**
   * A plan or request that is fulfilled in whole or in part by this nutrition order.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The date and time that this nutrition order was requested.
   */
  dateTime: string;
  _dateTime?: Element | undefined;
  /**
   * An encounter that provides additional information about the healthcare context in which this request is made.
   */
  encounter?: Reference | undefined;
  /**
   * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
   */
  enteralFormula?: NutritionOrderEnteralFormula | undefined;
  /**
   * This modifier is used to convey Order-specific modifier about the type of oral food or oral fluids that should not be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced AllergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
   * Information on a patient's food allergies, intolerances and preferences to inform healthcare personnel about the type  of foods that the patient shouldn't receive or consume.
   */
  excludeFoodModifier?: CodeableConcept[] | undefined;
  /**
   * This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
   * Information on a patient's food preferences that inform healthcare personnel about the food that the patient should receive or consume.
   */
  foodPreferenceModifier?: CodeableConcept[] | undefined;
  /**
   * A shared identifier common to all nutrition orders that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
   */
  groupIdentifier?: Identifier | undefined;
  /**
   * Identifiers assigned to this order by the order sender or by the order receiver.
   * The Identifier.type element can be to indicate filler vs. placer if needed.  This is explained in further detail [here](servicerequest.html#notes).
   */
  identifier?: Identifier[] | undefined;
  /**
   * The URL pointing to a protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
   */
  instantiates?: string[] | undefined;
  _instantiates?: Element[] | undefined;
  /**
   * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
   * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  instantiatesCanonical?: string[] | undefined;
  _instantiatesCanonical?: Element[] | undefined;
  /**
   * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
   * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
   */
  instantiatesUri?: string[] | undefined;
  _instantiatesUri?: Element[] | undefined;
  /**
   * Indicates the level of authority/intentionality associated with the NutrionOrder and where the request fits into the workflow chain.
   * When resources map to this element, they are free to define as many codes as necessary to cover their space and will map to "proposal, plan or order".  Can have multiple codes that map to one of these.  E.g. "original order", "encoded order", "reflex order" would all map to "order".  Expectation is that the set of codes is mutually exclusive or a strict all-encompassing hierarchy.
   */
  intent: ('proposal'|'plan'|'directive'|'order'|'original-order'|'reflex-order'|'filler-order'|'instance-order'|'option');
  _intent?: Element | undefined;
  /**
   * Comments made about the {{title}} by the requester, performer, subject or other participants.
   * This element SHALL NOT be used to supply free text instructions for the diet which are represented in the `.oralDiet.instruction`, `supplement.instruction`, or `enteralFormula.administrationInstruction` elements.
   */
  note?: Annotation[] | undefined;
  /**
   * Diet given orally in contrast to enteral (tube) feeding.
   */
  oralDiet?: NutritionOrderOralDiet | undefined;
  /**
   * The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
   */
  orderer?: Reference | undefined;
  /**
   * This modifier is used to convey whether a food item is allowed to be brought in by the patient and/or family.  If set to true, indicates that the receiving system does not need to supply the food item.
   */
  outsideFoodAllowed?: boolean | undefined;
  _outsideFoodAllowed?: Element | undefined;
  /**
   * The specified desired performer of the nutrition order.
   */
  performer?: CodeableReference[] | undefined;
  /**
   * Indicates how quickly the Nutrition Order should be addressed with respect to other        requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * The workflow status of the nutrition order/request.
   * Typically the system placing the order sets the status to "requested". Thereafter, the order is maintained by the receiver that updates the status as the request is handled.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('draft'|'active'|'on-hold'|'revoked'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The person or set of individuals who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
   */
  subject: Reference;
  /**
   * Oral nutritional products given in order to add further nutritional value to the patient's diet.
   */
  supplement?: NutritionOrderSupplement[] | undefined;
  /**
   * Information to support fulfilling (i.e. dispensing or administering) of the nutrition,        for example, patient height and weight).
   */
  supportingInformation?: Reference[] | undefined;
}
/**
 * Specifies descriptive properties of the nutrition product
 */
export interface NutritionProductCharacteristic extends BackboneElement {
  /**
   * A code specifying which characteristic of the product is being described (for example, colour, shape).
   */
  type: CodeableConcept;
  /**
   * The actual characteristic value corresponding to the type.
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The actual characteristic value corresponding to the type.
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The actual characteristic value corresponding to the type.
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The actual characteristic value corresponding to the type.
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The actual characteristic value corresponding to the type.
   * The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
   */
  valueQuantity?: Quantity | undefined;
}
/**
 * Ingredients contained in this product
 */
export interface NutritionProductIngredient extends BackboneElement {
  /**
   * The amount of ingredient that is in the product.
   */
  amount?: Ratio[] | undefined;
  /**
   * The ingredient contained in the product.
   */
  item: CodeableReference;
}
/**
 * One or several physical instances or occurrences of the nutrition product
 */
export interface NutritionProductInstance extends BackboneElement {
  /**
   * An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.
   * Necessary to support mandatory requirements for traceability from donor/source to recipient and vice versa, while also satisfying donor anonymity requirements. The element is defined consistently across BiologicallyDerivedProduct, NutritionProduct, and Device.  The identifier references an event that links to a single biological entity such as a blood donor, or to multiple biological entities (e.g. when the product is an embryo or a pooled platelet product).  A single biologicalSourceEvent identifier may appear on multiple products of many types derived from a single donation event or source extraction.  As an example, a single donation event may provide 2 kidneys and a liver for organ transplantation, 2 corneas for eye surgery, heart valves and arterial tissue for cardiovascular surgery, multiple skin grafts, tendons, multiple shaped bone grafts and a large number of bone putty/paste products; and each of them may be assigned to the same biological source event identifier.
   */
  biologicalSourceEvent?: Identifier | undefined;
  /**
   * The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
   */
  expiry?: string | undefined;
  _expiry?: Element | undefined;
  /**
   * The identifier for the physical instance, typically a serial number or manufacturer number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The identification of the batch or lot of the product.
   */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;
  /**
   * The name for the specific product.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The amount of items or instances that the resource considers, for instance when referring to 2 identical units together.
   */
  quantity?: Quantity | undefined;
  /**
   * The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
   */
  useBy?: string | undefined;
  _useBy?: Element | undefined;
}
/**
 * The product's nutritional information expressed by the nutrients
 * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
 */
export interface NutritionProductNutrient extends BackboneElement {
  /**
   * The amount of nutrient expressed in one or more units: X per pack / per serving / per dose.
   */
  amount?: Ratio[] | undefined;
  /**
   * The (relevant) nutrients in the product.
   */
  item?: CodeableReference | undefined;
}
export interface NutritionProduct extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'NutritionProduct';
  /**
   * Nutrition products can have different classifications - according to its nutritional properties, preparation methods, etc.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Specifies descriptive properties of the nutrition product.
   */
  characteristic?: NutritionProductCharacteristic[] | undefined;
  /**
   * The code assigned to the product, for example a USDA NDB number, a USDA FDC ID number, or a Langual code.
   */
  code?: CodeableConcept | undefined;
  /**
   * Ingredients contained in this product.
   */
  ingredient?: NutritionProductIngredient[] | undefined;
  /**
   * Conveys instance-level information about this product item. One or several physical, countable instances or occurrences of the product.
   */
  instance?: NutritionProductInstance[] | undefined;
  /**
   * Allergens that are known or suspected to be a part of this nutrition product.
   */
  knownAllergen?: CodeableReference[] | undefined;
  /**
   * The organisation (manufacturer, representative or legal authorization holder) that is responsible for the device.
   */
  manufacturer?: Reference[] | undefined;
  /**
   * Comments made about the product.
   */
  note?: Annotation[] | undefined;
  /**
   * The product's nutritional information expressed by the nutrients.
   * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  nutrient?: NutritionProductNutrient[] | undefined;
  /**
   * The current state of the product.
   * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   */
  status: ('active'|'inactive'|'entered-in-error');
  _status?: Element | undefined;
}
/**
 * Component results
 * For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
 */
export interface ObservationComponent extends BackboneElement {
  /**
   * Describes what was observed. Sometimes this is called the observation "code".
   * *All* code-value and  component.code-component.value pairs need to be taken into account to correctly understand the meaning of the observation.
   */
  code: CodeableConcept;
  /**
   * Provides a reason why the expected value in the element Observation.component.value[x] is missing.
   * "Null" or exceptional values can be represented two ways in FHIR Observations.  One way is to simply include them in the value set and represent the exceptions in the value.  For example, measurement values for a serology test could be  "detected", "not detected", "inconclusive", or  "test not done". 
   * The alternate way is to use the value element for actual observations and use the explicit dataAbsentReason element to record exceptional values.  For example, the dataAbsentReason code "error" could be used when the measurement was not completed.  Because of these options, use-case agreements are required to interpret general observations for exceptional values.
   */
  dataAbsentReason?: CodeableConcept | undefined;
  /**
   * A categorical assessment of an observation value.  For example, high, low, normal.
   * Historically used for laboratory results (known as 'abnormal flag' ),  its use extends to other use cases where coded interpretations  are relevant.  Often reported as one or more simple compact codes this element is often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result.
   */
  interpretation?: CodeableConcept[] | undefined;
  /**
   * Guidance on how to interpret the value by comparison to a normal or recommended range.
   * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this might not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
   */
  referenceRange?: ObservationReferenceRange[] | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Used when observation has a set of component observations:
   * -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Used when observation has a set of component observations:
   * -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Used when observation has a set of component observations:
   * -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Used when observation has a set of component observations:
   * -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Used when observation has a set of component observations:
   * -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valuenumber?: number | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Used when observation has a set of component observations:
   * -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valuePeriod?: Period | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Used when observation has a set of component observations:
   * -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Used when observation has a set of component observations:
   * -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueRange?: Range | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Used when observation has a set of component observations:
   * -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueRatio?: Ratio | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Used when observation has a set of component observations:
   * -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueReference?: Reference | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Used when observation has a set of component observations:
   * -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueSampledData?: SampledData | undefined;
}
/**
 * Provides guide for interpretation
 * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this might not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
 */
export interface ObservationReferenceRange extends BackboneElement {
  /**
   * The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
   */
  age?: Range | undefined;
  /**
   * Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple `appliesTo`  are interpreted as an "AND" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used.
   * This SHOULD be populated if there is more than one range.  If this element is not present then the normal population is assumed.
   */
  appliesTo?: CodeableConcept[] | undefined;
  /**
   * The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
   */
  high?: Quantity | undefined;
  /**
   * The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
   */
  low?: Quantity | undefined;
  /**
   * The value of the normal value of the reference range.
   */
  normalValue?: CodeableConcept | undefined;
  /**
   * Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of "normals".
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
   * This SHOULD be populated if there is more than one range.  If this element is not present then the normal range is assumed.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Triggering observation(s)
 */
export interface ObservationTriggeredBy extends BackboneElement {
  /**
   * Reference to the triggering observation.
   */
  observation: Reference;
  /**
   * Provides the reason why this observation was performed as a result of the observation(s) referenced.
   */
  reason?: string | undefined;
  _reason?: Element | undefined;
  /**
   * The type of trigger.
   * Reflex | Repeat | Re-run.
   */
  type: ('reflex'|'repeat'|'re-run');
  _type?: Element | undefined;
}
/**
 * Used for simple observations such as device measurements, laboratory atomic results, vital signs, height, weight, smoking status, comments, etc.  Other resources are used to provide context for observations such as laboratory reports, etc.
 */
export interface Observation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Observation';
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Indicates the site on the subject's body where the observation was made (i.e. the target site).
   * Only used if not implicit in code found in Observation.code.  In many systems, this may be represented as a related observation instead of an inline component.
   */
  bodySite?: CodeableConcept | undefined;
  /**
   * Indicates the body structure on the subject's body where the observation was made (i.e. the target site).
   * Only used if not implicit in code found in Observation.code or bodySite is used. In many systems, this may be represented as a related observation instead of an inline component.
   */
  bodyStructure?: Reference | undefined;
  /**
   * A code that classifies the general type of observation being made.
   * In addition to the required category valueset, this element allows various categorization schemes based on the owner’s definition of the category and effectively multiple categories can be used at once.  The level of granularity is defined by the category concepts in the value set.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Describes what was observed. Sometimes this is called the observation "name".
   * *All* code-value and, if present, component.code-component.value pairs need to be taken into account to correctly understand the meaning of the observation.
   */
  code: CodeableConcept;
  /**
   * Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
   * For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
   */
  component?: ObservationComponent[] | undefined;
  /**
   * Provides a reason why the expected value in the element Observation.value[x] is missing.
   * Null or exceptional values can be represented two ways in FHIR Observations.  One way is to simply include them in the value set and represent the exceptions in the value.  For example, measurement values for a serology test could be  "detected", "not detected", "inconclusive", or  "specimen unsatisfactory".   
   * The alternate way is to use the value element for actual observations and use the explicit dataAbsentReason element to record exceptional values.  For example, the dataAbsentReason code "error" could be used when the measurement was not completed. Note that an observation may only be reported if there are values to report. For example differential cell counts values may be reported only when > 0.  Because of these options, use-case agreements are required to interpret general observations for null or exceptional values.
   */
  dataAbsentReason?: CodeableConcept | undefined;
  /**
   * The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image.
   * All the reference choices that are listed in this element can represent clinical observations and other measurements that may be the source for a derived value.  The most common reference will be another Observation.  For a discussion on the ways Observations can assembled in groups together, see [Notes](observation.html#obsgrouping) below.
   */
  derivedFrom?: Reference[] | undefined;
  /**
   * A reference to the device that generates the measurements or the device settings for the device.
   * Note that this is not meant to represent a device involved in the transmission of the result, e.g., a gateway.  Such devices may be documented using the Provenance resource where relevant.
   */
  device?: Reference | undefined;
  /**
   * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
   * At least a date should be present unless this observation is a historical report.  For recording imprecise or "fuzzy" times (For example, a blood glucose measurement taken "after breakfast") use the [Timing](datatypes.html#timing) datatype which allow the measurement to be tied to regular life events.
   */
  effectivestring?: string | undefined;
  _effectivestring?: Element | undefined;
  /**
   * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
   * At least a date should be present unless this observation is a historical report.  For recording imprecise or "fuzzy" times (For example, a blood glucose measurement taken "after breakfast") use the [Timing](datatypes.html#timing) datatype which allow the measurement to be tied to regular life events.
   */
  effectivePeriod?: Period | undefined;
  /**
   * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
   * At least a date should be present unless this observation is a historical report.  For recording imprecise or "fuzzy" times (For example, a blood glucose measurement taken "after breakfast") use the [Timing](datatypes.html#timing) datatype which allow the measurement to be tied to regular life events.
   */
  effectiveTiming?: Timing | undefined;
  /**
   * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
   * This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission laboratory tests).
   */
  encounter?: Reference | undefined;
  /**
   * The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
   * Typically, an observation is made about the subject - a patient, or group of patients, location, or device - and the distinction between the subject and what is directly measured for an observation is specified in the observation code itself ( e.g., "Blood Glucose") and does not need to be represented separately using this element.  Use `specimen` if a reference to a specimen is required.  If a code is required instead of a resource use either  `bodysite` for bodysites or the standard extension [http://hl7.org/fhir/StructureDefinition/observation-focusCode](http://hl7.org/fhir/extensions/StructureDefinition-observation-focusCode.html).
   */
  focus?: Reference[] | undefined;
  /**
   * This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
   * When using this element, an observation will typically have either a value or a set of related resources, although both may be present in some cases.  For a discussion on the ways Observations can assembled in groups together, see [Notes](observation.html#obsgrouping) below.  Note that a system may calculate results from [QuestionnaireResponse](questionnaireresponse.html)  into a final score and represent the score as an Observation.
   */
  hasMember?: Reference[] | undefined;
  /**
   * A unique identifier assigned to this observation.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The reference to a FHIR ObservationDefinition resource that provides the definition that is adhered to in whole or in part by this Observation instance.
   * ObservationDefinition can be referenced by its canonical url using instantiatesCanonical, or by a name or an identifier using the appropriate sub-elements of instantiatesReference.
   */
  instantiatesstring?: string | undefined;
  _instantiatesstring?: Element | undefined;
  /**
   * The reference to a FHIR ObservationDefinition resource that provides the definition that is adhered to in whole or in part by this Observation instance.
   * ObservationDefinition can be referenced by its canonical url using instantiatesCanonical, or by a name or an identifier using the appropriate sub-elements of instantiatesReference.
   */
  instantiatesReference?: Reference | undefined;
  /**
   * A categorical assessment of an observation value.  For example, high, low, normal.
   * Historically used for laboratory results (known as 'abnormal flag' ),  its use extends to other use cases where coded interpretations  are relevant.  Often reported as one or more simple compact codes this element is often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result.
   */
  interpretation?: CodeableConcept[] | undefined;
  /**
   * The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified.
   * For Observations that don't require review and verification, it may be the same as the [`lastUpdated` ](resource-definitions.html#Meta.lastUpdated) time of the resource itself.  For Observations that do require review and verification for certain updates, it might not be the same as the `lastUpdated` time of the resource itself due to a non-clinically significant update that doesn't require the new version to be reviewed and verified again.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * Indicates the mechanism used to perform the observation.
   * Only used if not implicit in code for Observation.code.
   */
  method?: CodeableConcept | undefined;
  /**
   * Comments about the observation or the results.
   * May include general statements about the observation, or statements about significant, unexpected or unreliable results values, or information about its source when relevant to its interpretation.
   */
  note?: Annotation[] | undefined;
  /**
   * A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure.
   * To link an Observation to an Encounter use `encounter`.  See the  [Notes](observation.html#obsgrouping) below for guidance on referencing another Observation.
   */
  partOf?: Reference[] | undefined;
  /**
   * Who was responsible for asserting the observed value as "true".
   */
  performer?: Reference[] | undefined;
  /**
   * Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an "OR".   In other words, to represent two distinct target populations, two `referenceRange` elements would be used.
   * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this might not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
   */
  referenceRange?: ObservationReferenceRange[] | undefined;
  /**
   * The specimen that was used when this observation was made.
   * Should only be used if not implicit in code found in `Observation.code`.  Observations are not made on specimens themselves; they are made on a subject, but in many cases by the means of a specimen. Note that although specimens are often involved, they are not always tracked and reported explicitly. Also note that observation resources may be used in contexts that track the specimen explicitly (e.g. Diagnostic Report).
   */
  specimen?: Reference | undefined;
  /**
   * The status of the result value.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('registered'|'preliminary'|'final'|'amended'|'corrected'|'cancelled'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The patient, or group of patients, location, device, organization, procedure or practitioner this observation is about and into whose or what record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the `focus` element or the `code` itself specifies the actual focus of the observation.
   * One would expect this element to be a cardinality of 1..1. The only circumstance in which the subject can be missing is when the observation is made by a device that does not know the patient. In this case, the observation SHALL be matched to a patient through some context/channel matching technique, and at this point, the observation should be updated. The subject of an Observation may in some cases be a procedure.  This supports the regulatory inspection use case where observations are captured during inspections of a procedure that is being performed (independent of any particular patient or whether patient related at all).
   */
  subject?: Reference | undefined;
  /**
   * Identifies the observation(s) that triggered the performance of this observation.
   */
  triggeredBy?: ObservationTriggeredBy[] | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * - An observation may have:
   *   1.  a single value here
   *   1.  both a value and a set of related or component values
   *   1.  only a set of related or component values.
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * - An observation may have:
   *   1.  a single value here
   *   1.  both a value and a set of related or component values
   *   1.  only a set of related or component values.
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * - An observation may have:
   *   1.  a single value here
   *   1.  both a value and a set of related or component values
   *   1.  only a set of related or component values.
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * - An observation may have:
   *   1.  a single value here
   *   1.  both a value and a set of related or component values
   *   1.  only a set of related or component values.
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * - An observation may have:
   *   1.  a single value here
   *   1.  both a value and a set of related or component values
   *   1.  only a set of related or component values.
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valuenumber?: number | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * - An observation may have:
   *   1.  a single value here
   *   1.  both a value and a set of related or component values
   *   1.  only a set of related or component values.
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valuePeriod?: Period | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * - An observation may have:
   *   1.  a single value here
   *   1.  both a value and a set of related or component values
   *   1.  only a set of related or component values.
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * - An observation may have:
   *   1.  a single value here
   *   1.  both a value and a set of related or component values
   *   1.  only a set of related or component values.
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueRange?: Range | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * - An observation may have:
   *   1.  a single value here
   *   1.  both a value and a set of related or component values
   *   1.  only a set of related or component values.
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueRatio?: Ratio | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * - An observation may have:
   *   1.  a single value here
   *   1.  both a value and a set of related or component values
   *   1.  only a set of related or component values.
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueReference?: Reference | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * - An observation may have:
   *   1.  a single value here
   *   1.  both a value and a set of related or component values
   *   1.  only a set of related or component values.
   * -  If a value is present, the datatype for this element should be determined by the `code`.
   * -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
   * -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
   * - The usage of valueReference is restricted to the MolecularSequence resource when used as a definitional resource, not as a patient-specific finding. .
   * - For additional guidance, see the [Notes section](observation.html#notes) below.
   */
  valueSampledData?: SampledData | undefined;
}
/**
 * Component results
 */
export interface ObservationDefinitionComponent extends BackboneElement {
  /**
   * Describes what will be observed.
   */
  code: CodeableConcept;
  /**
   * The data types allowed for the value element of the instance of this component observations.
   */
  permittedDataType?: ('Quantity'|'CodeableConcept'|'string'|'boolean'|'integer'|'Range'|'Ratio'|'SampledData'|'time'|'dateTime'|'Period')[] | undefined;
  _permittedDataType?: Element[] | undefined;
  /**
   * Units allowed for the valueQuantity element in the instance observations conforming to this ObservationDefinition.
   */
  permittedUnit?: Coding[] | undefined;
  /**
   * A set of qualified values associated with a context and a set of conditions -  provides a range for quantitative and ordinal observations and a collection of value sets for qualitative observations.
   */
  qualifiedValue?: ObservationDefinitionQualifiedValue[] | undefined;
}
/**
 * Set of qualified values for observation results
 */
export interface ObservationDefinitionQualifiedValue extends BackboneElement {
  /**
   * The set of abnormal coded results for qualitative observations  that match the criteria of this set of qualified values.
   */
  abnormalCodedValueSet?: string | undefined;
  _abnormalCodedValueSet?: Element | undefined;
  /**
   * The age range this  set of qualified values applies to.
   * Some analytes vary greatly over age.
   */
  age?: Range | undefined;
  /**
   * The target population this  set of qualified values applies to.
   * If this element is not present then the global population is assumed.
   */
  appliesTo?: CodeableConcept[] | undefined;
  /**
   * Text based condition for which the the set of qualified values is valid.
   */
  condition?: string | undefined;
  _condition?: Element | undefined;
  /**
   * A concept defining the context for this set of qualified values.
   */
  context?: CodeableConcept | undefined;
  /**
   * The set of critical coded results for qualitative observations  that match the criteria of this set of qualified values.
   */
  criticalCodedValueSet?: string | undefined;
  _criticalCodedValueSet?: Element | undefined;
  /**
   * The gender this  set of qualified values applies to.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * The gestational age this  set of qualified values applies to.
   */
  gestationalAge?: Range | undefined;
  /**
   * The set of normal coded results for qualitative observations  that match the criteria of this set of qualified values.
   */
  normalCodedValueSet?: string | undefined;
  _normalCodedValueSet?: Element | undefined;
  /**
   * The range of values defined for continuous or ordinal observations that match the criteria of this set of qualified values.
   */
  range?: Range | undefined;
  /**
   * The category of range of values for continuous or ordinal observations that match the criteria of this set of qualified values.
   */
  rangeCategory?: ('reference'|'critical'|'absolute') | undefined;
  _rangeCategory?: Element | undefined;
  /**
   * The set of valid coded results for qualitative observations  that match the criteria of this set of qualified values.
   */
  validCodedValueSet?: string | undefined;
  _validCodedValueSet?: Element | undefined;
}
/**
 * An instance of this resource informs the consumer of a health-related service (such as a lab diagnostic test or panel) about how the observations used or produced by this service will look like.
 */
export interface ObservationDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ObservationDefinition';
  /**
   * The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The date may be more recent than the approval date because of minor changes / editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * The site on the subject's body where the  observation is to be made.
   * Only used if the defined observation is to be made directly on a body part and if this body part is not implied by code found in ObservationDefinition.code. Not used for in vitro diagnostic observations. 
   * Example: 14975008 |Forearm structure|.
   */
  bodySite?: CodeableConcept | undefined;
  /**
   * A code that classifies the general type of observation.
   * This element allows various categorization schemes based on the owner’s definition of the category and effectively multiple categories can be used for one instance of ObservationDefinition. The level of granularity is defined by the category concepts in the value set.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Describes what will be observed. Sometimes this is called the observation "name".
   */
  code: CodeableConcept;
  /**
   * Some observations have multiple component observations, expressed as separate code value pairs.
   */
  component?: ObservationDefinitionComponent[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * Copyright statement relating to the ObservationDefinition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the ObservationDefinition.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date (and optionally time) when the ObservationDefinition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the ObservationDefinition changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the ObservationDefinition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The canonical URL pointing to another FHIR-defined ObservationDefinition that is adhered to in whole or in part by this definition.
   */
  derivedFromCanonical?: string[] | undefined;
  _derivedFromCanonical?: Element[] | undefined;
  /**
   * The URL pointing to an externally-defined observation definition, guideline or other definition that is adhered to in whole or in part by this definition.
   */
  derivedFromUri?: string[] | undefined;
  _derivedFromUri?: Element[] | undefined;
  /**
   * A free text natural language description of the ObservationDefinition from the consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the module as conveyed in the text field of the resource itself. This item SHOULD be populated unless the information is available from context.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The measurement model of device or actual device used to produce observations of this type.
   * When multiple occurrences of device are present, they are to be combined with a logical OR: at least one of the specified devices is used to produce the observation.
   */
  device?: Reference[] | undefined;
  /**
   * The period during which the ObservationDefinition content was or is planned to be effective.
   * The effective period for an ObservationDefinition determines when the content is applicable for usage and is independent of publication and review dates. For example, an observation definition intended to be used for the year 2021 might be published in 2020.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * A flag to indicate that this ObservationDefinition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of ObservationDefinition that are appropriate for use vs. not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * This ObservationDefinition defines a group  observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
   */
  hasMember?: Reference[] | undefined;
  /**
   * Business identifiers assigned to this ObservationDefinition. by the performer and/or other systems. These identifiers remain constant as the resource is updated and propagates from server to server.
   * This is a business identifier, not a resource identifier. It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.
   */
  identifier?: Identifier | undefined;
  /**
   * A jurisdiction in which the ObservationDefinition is intended to be used.
   * It may be possible for the ObservationDefinition to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date.
   * If specified, this is usually after the approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * The method or technique used to perform the observation.
   * Only used if not implicit in observation code
   * Example: 702659008 |Automated count technique|.
   */
  method?: CodeableConcept | undefined;
  /**
   * Multiple results allowed for observations conforming to this ObservationDefinition.
   * An example of observation allowing multiple results is "bacteria identified by culture". Conversely, the measurement of a potassium level allows a single result.
   */
  multipleResultsAllowed?: boolean | undefined;
  _multipleResultsAllowed?: Element | undefined;
  /**
   * A natural language name identifying the ObservationDefinition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The type of individual/organization/device that is expected to act upon instances of this definition.
   */
  performerType?: CodeableConcept | undefined;
  /**
   * The data types allowed for the value element of the instance observations conforming to this ObservationDefinition.
   */
  permittedDataType?: ('Quantity'|'CodeableConcept'|'string'|'boolean'|'integer'|'Range'|'Ratio'|'SampledData'|'time'|'dateTime'|'Period')[] | undefined;
  _permittedDataType?: Element[] | undefined;
  /**
   * Units allowed for the valueQuantity element in the instance observations conforming to this ObservationDefinition.
   */
  permittedUnit?: Coding[] | undefined;
  /**
   * The preferred name to be used when reporting the results of observations conforming to this ObservationDefinition.
   */
  preferredReportName?: string | undefined;
  _preferredReportName?: Element | undefined;
  /**
   * Helps establish the "authority/credibility" of the ObservationDefinition. May also allow for contact.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explains why this ObservationDefinition is needed and why it has been designed as it has.
   * This element does not describe the usage of the ObservationDefinition. Rather it is for traceability of ''why'' the resource is either needed or ''why'' it is defined as it is. This may be used to point to source materials or specifications that drove the structure of this ObservationDefinition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * A set of qualified values associated with a context and a set of conditions -  provides a range for quantitative and ordinal observations and a collection of value sets for qualitative observations.
   */
  qualifiedValue?: ObservationDefinitionQualifiedValue[] | undefined;
  /**
   * The kind of specimen that this type of observation is produced on.
   * Only used for in vitro observations. When multiple occurrences of specimen are present, they are to be combined with a logical AND: all specified specimens  are needed for the observation.
   */
  specimen?: Reference[] | undefined;
  /**
   * The current state of the ObservationDefinition.
   * A nominal state-transition diagram can be found in the [Definition pattern](definition.html#statemachine) documentation
   * Unknown does not represent "other" - one of the defined statuses must apply. Unknown is used when the authoring system is not sure what the current status is.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A code that describes the intended kind of subject of Observation instances conforming to this ObservationDefinition.
   * Examples: person, animal, device, air, surface ….
   */
  subject?: CodeableConcept[] | undefined;
  /**
   * A short, descriptive, user-friendly title for the ObservationDefinition.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URL that is used to identify this ObservationDefinition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this ObservationDefinition is (or will be) published. The URL SHOULD include the major version of the ObservationDefinition. For more information see Technical and Business Versions.
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred. This is the URI that will be used when making canonical references to this resource.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate ObservationDefinition instances.
   * When multiple usageContexts are specified, there is no expectation for whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the ObservationDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the ObservationDefinition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions are orderable.
   * There may be multiple different instances of an observationDefinition that have the same identifier but different versions.
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Define overloaded variants for when  generating code
 * The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
 */
export interface OperationDefinitionOverload extends BackboneElement {
  /**
   * Comments to go on overload.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Name of parameter to include in overload.
   */
  parameterName?: string[] | undefined;
  _parameterName?: Element[] | undefined;
}
/**
 * ValueSet details if this is coded
 */
export interface OperationDefinitionParameterBinding extends BackboneElement {
  /**
   * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
   * For further discussion, see [Using Terminologies](terminologies.html).
   */
  strength: ('required'|'extensible'|'preferred'|'example');
  _strength?: Element | undefined;
  /**
   * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
   * For value sets with a referenceResource, the display can contain the value set description.  The reference may be version-specific or not.
   */
  valueSet: string;
  _valueSet?: Element | undefined;
}
/**
 * References to this parameter
 * Resolution applies if the referenced parameter exists.
 */
export interface OperationDefinitionParameterReferencedFrom extends BackboneElement {
  /**
   * The name of the parameter or dot-separated path of parameter names pointing to the resource parameter that is expected to contain a reference to this resource.
   */
  source: string;
  _source?: Element | undefined;
  /**
   * The id of the element in the referencing resource that is expected to resolve to this resource.
   */
  sourceId?: string | undefined;
  _sourceId?: Element | undefined;
}
/**
 * Parameters for the operation/query
 * Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
 */
export interface OperationDefinitionParameter extends BackboneElement {
  /**
   * Support for polymorphic types. If the parameter type is abstract, this element lists allowed sub-types for the parameter.
   * In previous versions of FHIR, there was an extension for this: http://hl7.org/fhir/StructureDefinition/operationdefinition-allowed-type
   */
  allowedType?: ('Base'|'Element'|'BackboneElement'|'DataType'|'Address'|'Annotation'|'Attachment'|'Availability'|'BackboneType'|'Dosage'|'ElementDefinition'|'MarketingStatus'|'ProductShelfLife'|'Timing'|'CodeableConcept'|'CodeableReference'|'Coding'|'ContactDetail'|'ContactPoint'|'Contributor'|'DataRequirement'|'Expression'|'ExtendedContactDetail'|'Extension'|'HumanName'|'Identifier'|'Meta'|'MonetaryComponent'|'Money'|'Narrative'|'ParameterDefinition'|'Period'|'PrimitiveType'|'base64Binary'|'boolean'|'date'|'dateTime'|'decimal'|'instant'|'integer'|'positiveInt'|'unsignedInt'|'integer64'|'string'|'code'|'id'|'markdown'|'time'|'uri'|'canonical'|'oid'|'url'|'uuid'|'Quantity'|'Age'|'Count'|'Distance'|'Duration'|'Range'|'Ratio'|'RatioRange'|'Reference'|'RelatedArtifact'|'SampledData'|'Signature'|'TriggerDefinition'|'UsageContext'|'VirtualServiceDetail'|'xhtml'|'Resource'|'Binary'|'Bundle'|'DomainResource'|'Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'CanonicalResource'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MetadataResource'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription'|'Parameters')[] | undefined;
  _allowedType?: Element[] | undefined;
  /**
   * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
   */
  binding?: OperationDefinitionParameterBinding | undefined;
  /**
   * Describes the meaning or use of this parameter.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * The maximum number of times this element is permitted to appear in the request or response.
   */
  max: string;
  _max?: Element | undefined;
  /**
   * The minimum number of times this parameter SHALL appear in the request or response.
   */
  min: number;
  /**
   * The name of used to identify the parameter.
   * This name must be a token (start with a letter in a..z, and only contain letters, numerals, and underscore. Note that for search parameters (type = string, with a search type), the name may be altered by the search modifiers.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The parts of a nested Parameter.
   * Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
   */
  part?: OperationDefinitionParameter[] | undefined;
  /**
   * Identifies other resource parameters within the operation invocation that are expected to resolve to this resource.
   * Resolution applies if the referenced parameter exists.
   */
  referencedFrom?: OperationDefinitionParameterReferencedFrom[] | undefined;
  /**
   * If present, indicates that the parameter applies when the operation is being invoked at the specified level.
   */
  scope?: ('instance'|'type'|'system')[] | undefined;
  _scope?: Element[] | undefined;
  /**
   * How the parameter is understood if/when it used as search parameter. This is only used if the parameter is a string.
   * Parameters that are search parameter usually - but not always - are also defined for use with general searches, and function in the operation to filter the set of resources in scope for the operation just like the do when searching. The searchType describes how the server processes the value. For an example, see the [Evaluate Measure Operation](measure-operation-evaluate-measure.html)
   */
  searchType?: ('number'|'date'|'string'|'token'|'reference'|'composite'|'quantity'|'uri'|'special') | undefined;
  _searchType?: Element | undefined;
  /**
   * Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this parameter refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
   * Often, these profiles are the base definitions from the spec (e.g. http://hl7.org/fhir/StructureDefinition/Patient).
   */
  targetProfile?: string[] | undefined;
  _targetProfile?: Element[] | undefined;
  /**
   * The type for this parameter.
   * if there is no stated parameter, then the parameter is a multi-part parameter type and must have at least one part defined.
   */
  type?: ('Base'|'Element'|'BackboneElement'|'DataType'|'Address'|'Annotation'|'Attachment'|'Availability'|'BackboneType'|'Dosage'|'ElementDefinition'|'MarketingStatus'|'ProductShelfLife'|'Timing'|'CodeableConcept'|'CodeableReference'|'Coding'|'ContactDetail'|'ContactPoint'|'Contributor'|'DataRequirement'|'Expression'|'ExtendedContactDetail'|'Extension'|'HumanName'|'Identifier'|'Meta'|'MonetaryComponent'|'Money'|'Narrative'|'ParameterDefinition'|'Period'|'PrimitiveType'|'base64Binary'|'boolean'|'date'|'dateTime'|'decimal'|'instant'|'integer'|'positiveInt'|'unsignedInt'|'integer64'|'string'|'code'|'id'|'markdown'|'time'|'uri'|'canonical'|'oid'|'url'|'uuid'|'Quantity'|'Age'|'Count'|'Distance'|'Duration'|'Range'|'Ratio'|'RatioRange'|'Reference'|'RelatedArtifact'|'SampledData'|'Signature'|'TriggerDefinition'|'UsageContext'|'VirtualServiceDetail'|'xhtml'|'Resource'|'Binary'|'Bundle'|'DomainResource'|'Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'CanonicalResource'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MetadataResource'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription'|'Parameters') | undefined;
  _type?: Element | undefined;
  /**
   * Whether this is an input or an output parameter.
   * If a parameter name is used for both an input and an output parameter, the parameter should be defined twice.
   */
  use: ('in'|'out');
  _use?: Element | undefined;
}
export interface OperationDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'OperationDefinition';
  /**
   * Whether the operation affects state. Side effects such as producing audit trail entries do not count as 'affecting  state'.
   * What http methods can be used for the operation depends on the .affectsState value and whether the input parameters are primitive or complex:
   * 1. Servers SHALL support POST method for all operations.
   * 2. Servers SHALL support the GET method when the operation has affectsState = false and all required parameters for the operation are primitive.
   */
  affectsState?: boolean | undefined;
  _affectsState?: Element | undefined;
  /**
   * Indicates that this operation definition is a constraining profile on the base.
   * A constrained profile can make optional parameters required or not used, introduce new parameters (required or optional), and clarify documentation.
   */
  base?: string | undefined;
  _base?: Element | undefined;
  /**
   * The label that is recommended to be used in the URL for this operation. In some cases, servers may need to use a different CapabilityStatement operation.name to differentiate between multiple SearchParameters that happen to have the same code.
   * For maximum compatibility, use only lowercase ASCII characters. Note that HL7 will never define multiple operations with the same code. See [Naming Rules & Guidelines](https://confluence.hl7.org/display/FHIR/Guide+to+Designing+Resources#GuidetoDesigningResources-NamingRules&Guidelines) for the internal HL7 rules around codes, which are useful additional advice for all implementers
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Additional information about how to use this operation or named query.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the operation definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the operation definition.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the operation definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the operation definition changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the operation definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the operation definition from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the operation definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the operation definition is presumed to be the predominant language in the place the operation definition was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A Boolean value to indicate that this operation definition is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage.
   * Allows filtering of operation definitions that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this implementation guide when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Additional validation information for the in parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource as a whole.
   * If present the profile shall not conflict with what is specified in the parameters in the operation definition (max/min etc.), though it may provide additional constraints. The constraints expressed in the profile apply whether the operation is invoked by a POST wih parameters or not.
   */
  inputProfile?: string | undefined;
  _inputProfile?: Element | undefined;
  /**
   * Indicates whether this operation can be invoked on a particular instance of one of the given types.
   */
  instance: boolean;
  _instance?: Element | undefined;
  /**
   * A legal or geographic region in which the operation definition is intended to be used.
   * It may be possible for the operation definition to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * Whether this is an operation or a named query.
   * Named queries are invoked differently, and have different capabilities.
   */
  kind: ('operation'|'query');
  _kind?: Element | undefined;
  /**
   * A natural language name identifying the operation definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type no-whitespace name to ensure that it is machine-processing friendly.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Additional validation information for the out parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource.
   * If present the profile shall not conflict with what is specified in the parameters in the operation definition (max/min etc.), though it may provide additional constraints. The constraints expressed in the profile apply whether the operation is invoked by a POST wih parameters or not.
   */
  outputProfile?: string | undefined;
  _outputProfile?: Element | undefined;
  /**
   * Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.
   * The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
   */
  overload?: OperationDefinitionOverload[] | undefined;
  /**
   * The parameters for the operation/query.
   * Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
   */
  parameter?: OperationDefinitionParameter[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the operation definition.
   * Usually an organization but may be an individual. The publisher (or steward) of the operation definition is the organization or individual primarily responsible for the maintenance and upkeep of the operation definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the operation definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this operation definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the operation definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this operation definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The types on which this operation can be executed.
   * If the type is an abstract resource ("Resource" or "DomainResource") then the operation can be invoked on any concrete specialization.
   */
  resource?: ('Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'Bundle'|'CanonicalResource'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'DomainResource'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MetadataResource'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription'|'BodySite'|'CatalogEntry'|'Conformance'|'DataElement'|'DeviceComponent'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DocumentManifest'|'EffectEvidenceSynthesis'|'EligibilityRequest'|'EligibilityResponse'|'ExpansionProfile'|'ImagingManifest'|'ImagingObjectSelection'|'Media'|'MedicationOrder'|'MedicationUsage'|'MedicinalProduct'|'MedicinalProductAuthorization'|'MedicinalProductContraindication'|'MedicinalProductIndication'|'MedicinalProductIngredient'|'MedicinalProductInteraction'|'MedicinalProductManufactured'|'MedicinalProductPackaged'|'MedicinalProductPharmaceutical'|'MedicinalProductUndesirableEffect'|'Order'|'OrderResponse'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'ReferralRequest'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'RiskEvidenceSynthesis'|'Sequence'|'ServiceDefinition'|'SubstanceSpecification')[] | undefined;
  _resource?: Element[] | undefined;
  /**
   * The current state of this operation definition.
   * A nominal state-transition diagram can be found in the] documentation
   * Unknown does not represent 'other' - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
   */
  system: boolean;
  _system?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the operation definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context).
   */
  type: boolean;
  _type?: Element | undefined;
  /**
   * An absolute URI that is used to identify this operation definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this operation definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the operation definition is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate operation definition.
   * When multiple useContexts are specified, there is no expectation that all or even any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the operation definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the operation definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different operation definitions that have the same url but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the operation definition with the format. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * A single issue associated with the action
 */
export interface OperationOutcomeIssue extends BackboneElement {
  /**
   * Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.
   * Code values should align with the severity.  For example, a code of ```forbidden``` generally wouldn't make sense with a severity of ```information``` or ```warning```.  Similarly, a code of ```informational``` would generally not make sense with a severity of ```fatal``` or ```error```.  However, there are no strict rules about what severities must be used with which codes.  For example, ```code-invalid``` might be a ```warning``` or ```error```, depending on the context
   */
  code: ('invalid'|'structure'|'required'|'value'|'invariant'|'security'|'login'|'unknown'|'expired'|'forbidden'|'suppressed'|'processing'|'not-supported'|'duplicate'|'multiple-matches'|'not-found'|'deleted'|'too-long'|'code-invalid'|'extension'|'too-costly'|'business-rule'|'conflict'|'limited-filter'|'transient'|'lock-error'|'no-store'|'exception'|'timeout'|'incomplete'|'throttled'|'informational'|'success');
  _code?: Element | undefined;
  /**
   * Additional details about the error. This may be a text description of the error or a system code that identifies the error.
   * A human readable description of the error issue SHOULD be placed in details.text.
   */
  details?: CodeableConcept | undefined;
  /**
   * Additional diagnostic information about the issue.
   * This may be a description of how a value is erroneous, a stack dump to help trace the issue or other troubleshooting information.
   */
  diagnostics?: string | undefined;
  _diagnostics?: Element | undefined;
  /**
   * A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.
   * The root of the FHIRPath is the resource or bundle that generated OperationOutcome.  Each FHIRPath SHALL resolve to a single node.
   */
  expression?: string[] | undefined;
  _expression?: Element[] | undefined;
  /**
   * This element is deprecated because it is XML specific. It is replaced by issue.expression, which is format independent, and simpler to parse. 
   * For resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be "http." + the parameter name.
   * The root of the XPath is the resource or bundle that generated OperationOutcome.  Each XPath SHALL resolve to a single node.  This element is deprecated, and is being replaced by expression.
   */
  location?: string[] | undefined;
  _location?: Element[] | undefined;
  /**
   * Indicates whether the issue indicates a variation from successful processing.
   */
  severity: ('fatal'|'error'|'warning'|'information'|'success');
  _severity?: Element | undefined;
}
/**
 * Can result from the failure of a REST call or be part of the response message returned from a request message.
 */
export interface OperationOutcome extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'OperationOutcome';
  /**
   * An error, warning, or information message that results from a system action.
   */
  issue: OperationOutcomeIssue[];
}
/**
 * Qualifications, certifications, accreditations, licenses, training, etc. pertaining to the provision of care
 */
export interface OrganizationQualification extends BackboneElement {
  /**
   * Coded representation of the qualification.
   */
  code: CodeableConcept;
  /**
   * An identifier allocated to this qualification for this organization.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Organization that regulates and issues the qualification.
   */
  issuer?: Reference | undefined;
  /**
   * Period during which the qualification is valid.
   */
  period?: Period | undefined;
}
export interface Organization extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Organization';
  /**
   * Whether the organization's record is still in active use.
   * This active flag is not intended to be used to mark an organization as temporarily closed or under construction. Instead the Location(s) within the Organization should have the suspended status. If further details of the reason for the suspension are required, then an extension on this element should be used.
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * A list of alternate names that the organization is known as, or was known as in the past.
   * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the organization.
   */
  alias?: string[] | undefined;
  _alias?: Element[] | undefined;
  /**
   * The contact details of communication devices available relevant to the specific Organization. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
   * The address/telecom use code 'home' are not to be used. Note that these contacts are not the contact details of people who provide the service (that would be through PractitionerRole), these are official contacts for the Organization itself for specific purposes. E.g. Mailing Addresses, Billing Addresses, Contact numbers for Booking or Billing Enquiries, general web address, web address for online bookings etc.
   */
  contact?: ExtendedContactDetail[] | undefined;
  /**
   * Description of the organization, which helps provide additional general context on the organization to ensure that the correct organization is selected.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Technical endpoints providing access to services operated for the organization.
   */
  endpoint?: Reference[] | undefined;
  /**
   * Identifier for the organization that is used to identify the organization across multiple disparate systems.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A name associated with the organization.
   * If the name of an organization changes, consider putting the old name in the alias column so that it can still be located through searches.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The organization of which this organization forms a part.
   */
  partOf?: Reference | undefined;
  /**
   * The official certifications, accreditations, training, designations and licenses that authorize and/or otherwise endorse the provision of care by the organization.
   * For example, an approval to provide a type of services issued by a certifying body (such as the US Joint Commission) to an organization.
   */
  qualification?: OrganizationQualification[] | undefined;
  /**
   * The kind(s) of organization that this is.
   * Organizations can be corporations, wards, sections, clinical teams, government departments, etc. Note that code is generally a classifier of the type of organization; in many applications, codes are used to identity a particular organization (say, ward) as opposed to another of the same type - these are identifiers, not codes
   * When considering if multiple types are appropriate, you should evaluate if child organizations would be a more appropriate use of the concept, as different types likely are in different sub-areas of the organization. This is most likely to be used where type values have orthogonal values, such as a religious, academic and medical center.
   * We expect that some jurisdictions will profile this optionality to be a single cardinality.
   */
  type?: CodeableConcept[] | undefined;
}
export interface OrganizationAffiliation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'OrganizationAffiliation';
  /**
   * Whether this organization affiliation record is in active use.
   * If this value is false, you may refer to the period to see when the role was in active use. If there is no period specified, no inference can be made about when it was active.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Definition of the role the participatingOrganization plays in the association.
   */
  code?: CodeableConcept[] | undefined;
  /**
   * The contact details of communication devices available at the participatingOrganization relevant to this Affiliation.
   */
  contact?: ExtendedContactDetail[] | undefined;
  /**
   * Technical endpoints providing access to services operated for this role.
   */
  endpoint?: Reference[] | undefined;
  /**
   * Healthcare services provided through the role.
   */
  healthcareService?: Reference[] | undefined;
  /**
   * Business identifiers that are specific to this role.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The location(s) at which the role occurs.
   */
  location?: Reference[] | undefined;
  /**
   * The network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined).
   * e.g. Commonly used for Health Insurance provider networks.
   */
  network?: Reference[] | undefined;
  /**
   * Organization where the role is available (primary organization/has members).
   * For example, a Spotless Cleaning Services (participatingOrganization) is a supplier (code) to General Hospital (organization).   Similarly, General Hospital (participatingOrganization) is a member (code) of Eastern HIE (organization).  If there are two organizations that do not have a directional relationship, there would normally be a third organization that represents the joint partnership, and the two organizations would have a relationship to that joint Organization via two OrganizationAffiliations.
   */
  organization?: Reference | undefined;
  /**
   * The Participating Organization provides/performs the role(s) defined by the code to the Primary Organization (e.g. providing services or is a member of).
   * See comments for OrganizationAffiliation.organization above.
   */
  participatingOrganization?: Reference | undefined;
  /**
   * The period during which the participatingOrganization is affiliated with the primary organization.
   */
  period?: Period | undefined;
  /**
   * Specific specialty of the participatingOrganization in the context of the role.
   */
  specialty?: CodeableConcept[] | undefined;
}
/**
 * The legal status of supply of the packaged item as classified by the regulator
 */
export interface PackagedProductDefinitionLegalStatusOfSupply extends BackboneElement {
  /**
   * The actual status of supply. Conveys in what situation this package type may be supplied for use.
   */
  code?: CodeableConcept | undefined;
  /**
   * The place where the legal status of supply applies. When not specified, this indicates it is unknown in this context.
   */
  jurisdiction?: CodeableConcept | undefined;
}
/**
 * The item(s) within the packaging
 */
export interface PackagedProductDefinitionPackagingContainedItem extends BackboneElement {
  /**
   * The number of this type of item within this packaging or for continuous items such as liquids it is the quantity (for example 25ml). See also PackagedProductDefinition.containedItemQuantity (especially the long definition).
   */
  amount?: Quantity | undefined;
  /**
   * The actual item(s) of medication, as manufactured, or a device (typically, but not necessarily, a co-packaged one), or other medically related item (such as food, biologicals, raw materials, medical fluids, gases etc.), as contained in the package. This also allows another whole packaged product to be included, which is solely for the case where a package of other entire packages is wanted - such as a wholesale or distribution pack (for layers within one package, use PackagedProductDefinition.packaging.packaging).
   */
  item: CodeableReference;
}
/**
 * General characteristics of this item
 */
export interface PackagedProductDefinitionPackagingProperty extends BackboneElement {
  /**
   * A code expressing the type of characteristic.
   */
  type: CodeableConcept;
  /**
   * A value for the characteristic.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * A value for the characteristic.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * A value for the characteristic.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * A value for the characteristic.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * A value for the characteristic.
   */
  valueQuantity?: Quantity | undefined;
}
/**
 * A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap
 */
export interface PackagedProductDefinitionPackaging extends BackboneElement {
  /**
   * A possible alternate material for this part of the packaging, that is allowed to be used instead of the usual material (e.g. different types of plastic for a blister sleeve).
   */
  alternateMaterial?: CodeableConcept[] | undefined;
  /**
   * Is this a part of the packaging (e.g. a cap or bottle stopper), rather than the packaging itself (e.g. a bottle or vial). The latter type are designed be a container, but the former are not.
   */
  componentPart?: boolean | undefined;
  _componentPart?: Element | undefined;
  /**
   * The item(s) within the packaging.
   */
  containedItem?: PackagedProductDefinitionPackagingContainedItem[] | undefined;
  /**
   * A business identifier that is specific to this particular part of the packaging, often assigned by the manufacturer. Including possibly Data Carrier Identifier (a GS1 barcode).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Manufacturer of this packaging item. When there are multiple values each one is a potential manufacturer of this packaging item.
   */
  manufacturer?: Reference[] | undefined;
  /**
   * Material type of the package item.
   */
  material?: CodeableConcept[] | undefined;
  /**
   * Allows containers (and parts of containers) within containers, still as a part of a single packaged product. See also PackagedProductDefinition.packaging.containedItem.item(PackagedProductDefinition).
   */
  packaging?: PackagedProductDefinitionPackaging[] | undefined;
  /**
   * General characteristics of this item.
   */
  property?: PackagedProductDefinitionPackagingProperty[] | undefined;
  /**
   * The quantity of packaging items contained at this layer of the package. This does not relate to the number of contained items but relates solely to the number of packaging items. When looking at the outermost layer it is always 1. If there are two boxes within, at the next layer it would be 2.
   */
  quantity?: number | undefined;
  /**
   * Shelf Life and storage information.
   */
  shelfLifeStorage?: ProductShelfLife[] | undefined;
  /**
   * The physical type of the container of the items.
   */
  type?: CodeableConcept | undefined;
}
export interface PackagedProductDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PackagedProductDefinition';
  /**
   * Additional information or supporting documentation about the packaged product.
   */
  attachedDocument?: Reference[] | undefined;
  /**
   * Allows the key features to be recorded, such as "hospital pack", "nurse prescribable", "calendar pack".
   */
  characteristic?: PackagedProductDefinitionPackagingProperty[] | undefined;
  /**
   * A total of the complete count of contained items of a particular type/form, independent of sub-packaging or organization. This can be considered as the pack size. This attribute differs from containedItem.amount in that it can give a single aggregated count of all tablet types in a pack, even when these are different manufactured items. For example a pill pack of 21 tablets plus 7 sugar tablets, can be denoted here as '28 tablets'. This attribute is repeatable so that the different item types in one pack type can be counted (e.g. a count of vials and count of syringes). Each repeat must have different units, so that it is clear what the different sets of counted items are, and it is not intended to allow different counts of similar items (e.g. not '2 tubes and 3 tubes'). Repeats are not to be used to represent different pack sizes (e.g. 20 pack vs. 50 pack) - which would be different instances of this resource.
   */
  containedItemQuantity?: Quantity[] | undefined;
  /**
   * Identifies if the package contains different items, such as when a drug product is supplied with another item e.g. a diluent or adjuvant.
   */
  copackagedIndicator?: boolean | undefined;
  _copackagedIndicator?: Element | undefined;
  /**
   * Textual description. Note that this is not the name of the package or product.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A unique identifier for this package as whole - not the the content of the package. Unique instance identifiers assigned to a package by manufacturers, regulators, drug catalogue custodians or other organizations.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The legal status of supply of the packaged item as classified by the regulator.
   */
  legalStatusOfSupply?: PackagedProductDefinitionLegalStatusOfSupply[] | undefined;
  /**
   * Manufacturer of this package type. When there are multiple it means these are all possible manufacturers.
   */
  manufacturer?: Reference[] | undefined;
  /**
   * Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated.
   */
  marketingStatus?: MarketingStatus[] | undefined;
  /**
   * A name for this package. Typically what it would be listed as in a drug formulary or catalogue, inventory etc.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The product this package model relates to, not the contents of the package (for which see package.containedItem).
   */
  packageFor?: Reference[] | undefined;
  /**
   * A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap (which is not a device or a medication manufactured item).
   */
  packaging?: PackagedProductDefinitionPackaging | undefined;
  /**
   * The status within the lifecycle of this item. A high level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization or marketing status.
   */
  status?: CodeableConcept | undefined;
  /**
   * The date at which the given status became applicable.
   */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;
  /**
   * A high level category e.g. medicinal product, raw material, shipping/transport container, etc.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Operation Parameter
 */
export interface ParametersParameter extends BackboneElement {
  /**
   * The name of the parameter (reference to the operation definition).
   */
  name: string;
  _name?: Element | undefined;
  /**
   * A named part of a multi-part parameter.
   */
  part?: ParametersParameter[] | undefined;
  /**
   * Conveys the content if the parameter is a whole resource.
   * When resolving references in resources, the operation definition may specify how references may be resolved between parameters. If a reference cannot be resolved between the parameters, the application should fall back to its general resource resolution methods.
   */
  resource?: FhirResource | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueAddress?: Address | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueAge?: Age | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueAvailability?: Availability | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueCodeableReference?: CodeableReference | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueCoding?: Coding | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueContactDetail?: ContactDetail | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueCount?: Count | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueDataRequirement?: DataRequirement | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valuenumber?: number | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueDistance?: Distance | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueDosage?: Dosage | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueDuration?: Duration | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueExpression?: Expression | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueExtendedContactDetail?: ExtendedContactDetail | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueHumanName?: HumanName | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueMeta?: Meta | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueMoney?: Money | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueParameterDefinition?: ParameterDefinition | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valuePeriod?: Period | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueRange?: Range | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueRatio?: Ratio | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueRatioRange?: RatioRange | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueReference?: Reference | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueRelatedArtifact?: RelatedArtifact | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueSampledData?: SampledData | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueSignature?: Signature | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueTiming?: Timing | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueTriggerDefinition?: TriggerDefinition | undefined;
  /**
   * Conveys the content if the parameter is a data type.
   */
  valueUsageContext?: UsageContext | undefined;
}
/**
 * The parameters that may be used are defined by the OperationDefinition resource.
 */
export interface Parameters extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Parameters';
  /**
   * A parameter passed to or received from the operation.
   */
  parameter?: ParametersParameter[] | undefined;
}
/**
 * A language which may be used to communicate with the patient about his or her health
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
export interface PatientCommunication extends BackboneElement {
  /**
   * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-AU" for Australian English.
   * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
   */
  language: CodeableConcept;
  /**
   * Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
   * This language is specifically identified for communicating healthcare information.
   */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;
}
/**
 * A contact party (e.g. guardian, partner, friend) for the patient
 * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
 */
export interface PatientContact extends BackboneElement {
  /**
   * Address for the contact person.
   */
  address?: Address | undefined;
  /**
   * Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * A name associated with the contact person.
   */
  name?: HumanName | undefined;
  /**
   * Organization on behalf of which the contact is acting or for which the contact is working.
   */
  organization?: Reference | undefined;
  /**
   * The period during which this contact person or organization is valid to be contacted relating to this patient.
   */
  period?: Period | undefined;
  /**
   * The nature of the relationship between the patient and the contact person.
   */
  relationship?: CodeableConcept[] | undefined;
  /**
   * A contact detail for the person, e.g. a telephone number or an email address.
   * Contact may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Link to a Patient or RelatedPerson resource that concerns the same actual individual
 * There is no assumption that linked patient records have mutual links.
 */
export interface PatientLink extends BackboneElement {
  /**
   * Link to a Patient or RelatedPerson resource that concerns the same actual individual.
   * Referencing a RelatedPerson here removes the need to use a Person record to associate a Patient and RelatedPerson as the same individual.
   */
  other: Reference;
  /**
   * The type of link between this patient resource and another patient resource.
   */
  type: ('replaced-by'|'replaces'|'refer'|'seealso');
  _type?: Element | undefined;
}
export interface Patient extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Patient';
  /**
   * Whether this patient record is in active use. 
   * Many systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization's business rules.
   * It is often used to filter patient lists to exclude inactive patients
   * Deceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.
   * If a record is inactive, and linked to an active record, then future patient/record updates should occur on the other patient.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * An address for the individual.
   * Patient may have multiple addresses with different uses or applicable periods.
   */
  address?: Address[] | undefined;
  /**
   * The date of birth for the individual.
   * Partial dates are allowed if the specific date of birth is unknown. There is a standard extension "patient-birthTime" available that should be used where Time is required (such as in maternity/infant care systems).
   */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;
  /**
   * A language which may be used to communicate with the patient about his or her health.
   * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
   */
  communication?: PatientCommunication[] | undefined;
  /**
   * A contact party (e.g. guardian, partner, friend) for the patient.
   * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
   */
  contact?: PatientContact[] | undefined;
  /**
   * Indicates if the individual is deceased or not.
   * If there's no value in the instance, it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
   */
  deceasedboolean?: boolean | undefined;
  _deceasedboolean?: Element | undefined;
  /**
   * Indicates if the individual is deceased or not.
   * If there's no value in the instance, it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
   */
  deceasedstring?: string | undefined;
  _deceasedstring?: Element | undefined;
  /**
   * Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
   * The gender might not match the biological sex as determined by genetics or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than male and female, though the vast majority of systems and contexts only support male and female.  Systems providing decision support or enforcing business rules should ideally do this on the basis of Observations dealing with the specific sex or gender aspect of interest (anatomical, chromosomal, social, etc.)  However, because these observations are infrequently recorded, defaulting to the administrative gender is common practice.  Where such defaulting occurs, rule enforcement should allow for the variation between administrative and biological, chromosomal and other gender aspects.  For example, an alert about a hysterectomy on a male should be handled as a warning or overridable error, not a "hard" error.  See the Patient Gender and Sex section for additional information about communicating patient gender and sex.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * Patient's nominated care provider.
   * This may be the primary care provider (in a GP context), or it may be a patient nominated care manager in a community/disability setting, or even organization that will provide people to perform the care provider roles.  It is not to be used to record Care Teams, these should be in a CareTeam resource that may be linked to the CarePlan or EpisodeOfCare resources.
   * Multiple GPs may be recorded against the patient for various reasons, such as a student that has his home GP listed along with the GP at university during the school semesters, or a "fly-in/fly-out" worker that has the onsite GP also included with his home GP to remain aware of medical issues.
   * Jurisdictions may decide that they can profile this down to 1 if desired, or 1 per type.
   */
  generalPractitioner?: Reference[] | undefined;
  /**
   * An identifier for this patient.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Link to a Patient or RelatedPerson resource that concerns the same actual individual.
   * There is no assumption that linked patient records have mutual links.
   */
  link?: PatientLink[] | undefined;
  /**
   * Organization that is the custodian of the patient record.
   * There is only one managing organization for a specific patient record. Other organizations will have their own Patient record, and may use the Link property to join the records together (or a Person resource which can include confidence ratings for the association).
   */
  managingOrganization?: Reference | undefined;
  /**
   * This field contains a patient's most recent marital (civil) status.
   */
  maritalStatus?: CodeableConcept | undefined;
  /**
   * Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
   * Where the valueInteger is provided, the number is the birth number in the sequence. E.g. The middle birth in triplets would be valueInteger=2 and the third born would have valueInteger=3 If a boolean value was provided for this triplets example, then all 3 patient records would have valueBoolean=true (the ordering is not indicated).
   */
  multipleBirthboolean?: boolean | undefined;
  _multipleBirthboolean?: Element | undefined;
  /**
   * Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
   * Where the valueInteger is provided, the number is the birth number in the sequence. E.g. The middle birth in triplets would be valueInteger=2 and the third born would have valueInteger=3 If a boolean value was provided for this triplets example, then all 3 patient records would have valueBoolean=true (the ordering is not indicated).
   */
  multipleBirthnumber?: number | undefined;
  /**
   * A name associated with the individual.
   * A patient may have multiple names with different uses or applicable periods. For animals, the name is a "HumanName" in the sense that is assigned and used by humans and has the same patterns. Animal names may be communicated as given names, and optionally may include a family name.
   */
  name?: HumanName[] | undefined;
  /**
   * Image of the patient.
   * Guidelines:
   * * Use id photos, not clinical photos.
   * * Limit dimensions to thumbnail.
   * * Keep byte count low to ease resource updates.
   */
  photo?: Attachment[] | undefined;
  /**
   * A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
   * A Patient may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and also to help with identification. The address might not go directly to the individual, but may reach another party that is able to proxy for the patient (i.e. home phone, or pet owner's phone).
   */
  telecom?: ContactPoint[] | undefined;
}
export interface PaymentNotice extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PaymentNotice';
  /**
   * The amount sent to the payee.
   */
  amount: Money;
  /**
   * The date when this resource was created.
   */
  created: string;
  _created?: Element | undefined;
  /**
   * A unique identifier assigned to this payment notice.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The party who will receive or has received payment that is the subject of this notification.
   */
  payee?: Reference | undefined;
  /**
   * A reference to the payment which is the subject of this notice.
   */
  payment?: Reference | undefined;
  /**
   * The date when the above payment action occurred.
   */
  paymentDate?: string | undefined;
  _paymentDate?: Element | undefined;
  /**
   * A code indicating whether payment has been sent or cleared.
   * Typically paid: payment sent, cleared: payment received.
   */
  paymentStatus?: CodeableConcept | undefined;
  /**
   * The party who is notified of the payment status.
   */
  recipient: Reference;
  /**
   * The party who reports the payment notice.
   */
  reporter?: Reference | undefined;
  /**
   * Reference of resource for which payment is being made.
   */
  request?: Reference | undefined;
  /**
   * Reference of response to resource for which payment is being made.
   */
  response?: Reference | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('active'|'cancelled'|'draft'|'entered-in-error');
  _status?: Element | undefined;
}
/**
 * Settlement particulars
 */
export interface PaymentReconciliationAllocation extends BackboneElement {
  /**
   * The Account to which this payment applies, may be completed by the receiver, used for search.
   */
  account?: Reference | undefined;
  /**
   * The monetary amount allocated from the total payment to the payable.
   */
  amount?: Money | undefined;
  /**
   * The date from the response resource containing a commitment to pay.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The Encounter to which this payment applies, may be completed by the receiver, used for search.
   */
  encounter?: Reference | undefined;
  /**
   * Unique identifier for the current payment item for the referenced payable.
   */
  identifier?: Identifier | undefined;
  /**
   * The party which is receiving the payment.
   */
  payee?: Reference | undefined;
  /**
   * Unique identifier for the prior payment item for the referenced payable.
   */
  predecessor?: Identifier | undefined;
  /**
   * A resource, such as a ClaimResponse, which contains a commitment to payment.
   */
  response?: Reference | undefined;
  /**
   * A reference to the individual who is responsible for inquiries regarding the response and its payment.
   */
  responsible?: Reference | undefined;
  /**
   * The party which submitted the claim or financial transaction.
   */
  submitter?: Reference | undefined;
  /**
   * Specific resource to which the payment/adjustment/advance applies.
   */
  target?: Reference | undefined;
  /**
   * Identifies the claim line item, encounter or other sub-element being paid. Note payment may be partial, that is not match the then outstanding balance or amount incurred.
   */
  targetItemIdentifier?: Identifier | undefined;
  /**
   * Identifies the claim line item, encounter or other sub-element being paid. Note payment may be partial, that is not match the then outstanding balance or amount incurred.
   */
  targetItemnumber?: number | undefined;
  /**
   * Identifies the claim line item, encounter or other sub-element being paid. Note payment may be partial, that is not match the then outstanding balance or amount incurred.
   */
  targetItemstring?: string | undefined;
  _targetItemstring?: Element | undefined;
  /**
   * Code to indicate the nature of the payment.
   * For example: payment, adjustment, funds advance, etc.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Note concerning processing
 */
export interface PaymentReconciliationProcessNote extends BackboneElement {
  /**
   * The explanation or description associated with the processing.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The business purpose of the note text.
   */
  type?: ('display'|'print'|'printoper') | undefined;
  _type?: Element | undefined;
}
export interface PaymentReconciliation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PaymentReconciliation';
  /**
   * A portion of the account number, often the last 4 digits, used for verification not charging purposes.
   */
  accountNumber?: string | undefined;
  _accountNumber?: Element | undefined;
  /**
   * Distribution of the payment amount for a previously acknowledged payable.
   */
  allocation?: PaymentReconciliationAllocation[] | undefined;
  /**
   * Total payment amount as indicated on the financial instrument.
   */
  amount: Money;
  /**
   * An alphanumeric issued by the processor to confirm the successful issuance of payment.
   */
  authorization?: string | undefined;
  _authorization?: Element | undefined;
  /**
   * The card brand such as debit, Visa, Amex etc. used if a card is the method of payment.
   */
  cardBrand?: string | undefined;
  _cardBrand?: Element | undefined;
  /**
   * The date when the resource was created.
   */
  created: string;
  _created?: Element | undefined;
  /**
   * The date of payment as indicated on the financial instrument.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * A human readable description of the status of the request for the reconciliation.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * Payment enterer if not the actual payment issuer.
   */
  enterer?: Reference | undefined;
  /**
   * The year and month (YYYY-MM) when the instrument, typically card, expires.
   */
  expirationDate?: string | undefined;
  _expirationDate?: Element | undefined;
  /**
   * A code for the form to be used for printing the content.
   * May be needed to identify specific jurisdictional forms.
   */
  formCode?: CodeableConcept | undefined;
  /**
   * A unique identifier assigned to this payment reconciliation.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The type of the source such as patient or insurance.
   */
  issuerType?: CodeableConcept | undefined;
  /**
   * The workflow or activity which gave rise to or during which the payment ocurred such as a kiosk, deposit on account, periodic payment etc.
   */
  kind?: CodeableConcept | undefined;
  /**
   * The location of the site or device for electronic transfers or physical location for cash payments.
   */
  location?: Reference | undefined;
  /**
   * The means of payment such as check, card cash, or electronic funds transfer.
   */
  method?: CodeableConcept | undefined;
  /**
   * The outcome of a request for a reconciliation.
   * The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
   */
  outcome?: ('queued'|'complete'|'error'|'partial') | undefined;
  _outcome?: Element | undefined;
  /**
   * Issuer's unique identifier for the payment instrument.
   * For example: EFT number or check number.
   */
  paymentIdentifier?: Identifier | undefined;
  /**
   * The party who generated the payment.
   * This party is also responsible for the reconciliation.
   */
  paymentIssuer?: Reference | undefined;
  /**
   * The period of time for which payments have been gathered into this bulk payment for settlement.
   */
  period?: Period | undefined;
  /**
   * A note that describes or explains the processing in a human readable form.
   */
  notes?: PaymentReconciliationProcessNote[] | undefined;
  /**
   * The name of the card processor, etf processor, bank for checks.
   */
  processor?: string | undefined;
  _processor?: Element | undefined;
  /**
   * The check number, eft reference, car processor reference.
   */
  referenceNumber?: string | undefined;
  _referenceNumber?: Element | undefined;
  /**
   * Original request resource reference.
   */
  request?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestor?: Reference | undefined;
  /**
   * The amount returned by the receiver which is excess to the amount payable, often referred to as 'change'.
   */
  returnedAmount?: Money | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('active'|'cancelled'|'draft'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The amount offered by the issuer, typically applies to cash when the issuer provides an amount in bank note denominations equal to or excess of the amount actually being paid.
   */
  tenderedAmount?: Money | undefined;
  /**
   * Code to indicate the nature of the payment such as payment, adjustment.
   */
  type: CodeableConcept;
}
/**
 * The asserted justification for using the data
 */
export interface PermissionJustification extends BackboneElement {
  /**
   * This would be a codeableconcept, or a coding, which can be constrained to , for example, the 6 grounds for processing in GDPR.
   */
  basis?: CodeableConcept[] | undefined;
  /**
   * Justifing rational.
   * While any resource may be used, DocumentReference, Consent, PlanDefinition, and Contract would be most frequent
   */
  evidence?: Reference[] | undefined;
}
/**
 * A description or definition of which activities are allowed to be done on the data
 */
export interface PermissionRuleActivity extends BackboneElement {
  /**
   * Actions controlled by this Rule.
   * Note that this is the direct action (not the grounds for the action covered in the purpose element). At present, the only action in the understood and tested scope of this resource is 'read'.
   */
  action?: CodeableConcept[] | undefined;
  /**
   * The actor(s) authorized for the defined activity.
   */
  actor?: Reference[] | undefined;
  /**
   * The purpose for which the permission is given.
   */
  purpose?: CodeableConcept[] | undefined;
}
/**
 * Explicit FHIR Resource references
 */
export interface PermissionRuleDataResource extends BackboneElement {
  /**
   * How the resource reference is interpreted when testing consent restrictions.
   */
  meaning: ('instance'|'related'|'dependents'|'authoredby');
  _meaning?: Element | undefined;
  /**
   * A reference to a specific resource that defines which resources are covered by this consent.
   */
  reference: Reference;
}
/**
 * The selection criteria to identify data that is within scope of this provision
 */
export interface PermissionRuleData extends BackboneElement {
  /**
   * Used when other data selection elements are insufficient.
   */
  expression?: Expression | undefined;
  /**
   * Clinical or Operational Relevant period of time that bounds the data controlled by this rule.
   * This has a different sense to the .validity.
   */
  period?: Period[] | undefined;
  /**
   * Explicit FHIR Resource references.
   */
  resource?: PermissionRuleDataResource[] | undefined;
  /**
   * The data in scope are those with the given codes present in that data .meta.security element.
   * Note the ConfidentialityCode vocabulary indicates the highest value, thus a security label of "R" then it applies to all resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high water mark. For other kinds of security labels, subsumption logic applies. When the purpose of use tag is on the data, access request purpose of use shall not conflict.
   */
  security?: Coding[] | undefined;
}
/**
 * Constraints to the Permission
 */
export interface PermissionRule extends BackboneElement {
  /**
   * A description or definition of which activities are allowed to be done on the data.
   */
  activity?: PermissionRuleActivity[] | undefined;
  /**
   * A description or definition of which activities are allowed to be done on the data.
   */
  data?: PermissionRuleData[] | undefined;
  /**
   * What limits apply to the use of the data.
   */
  limit?: CodeableConcept[] | undefined;
  /**
   * deny | permit.
   */
  type?: ('deny'|'permit') | undefined;
  _type?: Element | undefined;
}
export interface Permission extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Permission';
  /**
   * The person or entity that asserts the permission.
   */
  asserter?: Reference | undefined;
  /**
   * Defines a procedure for arriving at an access decision given the set of rules.
   * see [XACML Combining Rules](http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-cos01-en.html#_Toc325047267)
   */
  combining: ('deny-overrides'|'permit-overrides'|'ordered-deny-overrides'|'ordered-permit-overrides'|'deny-unless-permit'|'permit-unless-deny');
  _combining?: Element | undefined;
  /**
   * The date that permission was asserted.
   */
  date?: string[] | undefined;
  _date?: Element[] | undefined;
  /**
   * The asserted justification for using the data.
   */
  justification?: PermissionJustification | undefined;
  /**
   * A set of rules.
   */
  rule?: PermissionRule[] | undefined;
  /**
   * Status.
   */
  status: ('active'|'entered-in-error'|'draft'|'rejected');
  _status?: Element | undefined;
  /**
   * The period in which the permission is active.
   */
  validity?: Period | undefined;
}
/**
 * A language which may be used to communicate with the person about his or her health
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Person.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 * Note that this property should not be used to update any linked/logically linked practitioner resources as it serves as a language that can be used to communicate with patients - however it may be used to inform the value on practitioner, along with their role at the organization (with the practitioner's permission)
 */
export interface PersonCommunication extends BackboneElement {
  /**
   * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-AU" for Australian English.
   * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
   */
  language: CodeableConcept;
  /**
   * Indicates whether or not the person prefers this language (over other languages he masters up a certain level).
   * This language is specifically identified for communicating healthcare information.
   */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;
}
/**
 * Link to a resource that concerns the same actual person
 */
export interface PersonLink extends BackboneElement {
  /**
   * Level of assurance that this link is associated with the target resource.
   */
  assurance?: ('level1'|'level2'|'level3'|'level4') | undefined;
  _assurance?: Element | undefined;
  /**
   * The resource to which this actual person is associated.
   */
  target: Reference;
}
/**
 * The Person resource does justice to person registries that keep track of persons regardless of their role. The Person resource is also a primary resource to point to for people acting in a particular role such as SubjectofCare, Practitioner, and Agent. Very few attributes are specific to any role and so Person is kept lean. Most attributes are expected to be tied to the role the Person plays rather than the Person himself. Examples of that are Guardian (SubjectofCare), ContactParty (SubjectOfCare, Practitioner), and multipleBirthInd (SubjectofCare).
 */
export interface Person extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Person';
  /**
   * Whether this person's record is in active use.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * One or more addresses for the person.
   * Person may have multiple addresses with different uses or applicable periods.
   */
  address?: Address[] | undefined;
  /**
   * The birth date for the person.
   * At least an estimated year should be provided as a guess if the real DOB is unknown.
   */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;
  /**
   * A language which may be used to communicate with the person about his or her health.
   * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Person.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
   * Note that this property should not be used to update any linked/logically linked practitioner resources as it serves as a language that can be used to communicate with patients - however it may be used to inform the value on practitioner, along with their role at the organization (with the practitioner's permission)
   */
  communication?: PersonCommunication[] | undefined;
  /**
   * Indicates if the individual is deceased or not.
   * If there's no value in the instance, it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
   */
  deceasedboolean?: boolean | undefined;
  _deceasedboolean?: Element | undefined;
  /**
   * Indicates if the individual is deceased or not.
   * If there's no value in the instance, it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
   */
  deceasedstring?: string | undefined;
  _deceasedstring?: Element | undefined;
  /**
   * Administrative Gender.
   * The gender might not match the biological sex as determined by genetics, or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than M and F, though a clear majority of systems and contexts only support M and F.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * Identifier for a person within a particular scope.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Link to a resource that concerns the same actual person.
   */
  link?: PersonLink[] | undefined;
  /**
   * The organization that is the custodian of the person record.
   */
  managingOrganization?: Reference | undefined;
  /**
   * This field contains a person's most recent marital (civil) status.
   * Many countries maintain a register of births, deaths and marriages, and this would simplify that interaction
   */
  maritalStatus?: CodeableConcept | undefined;
  /**
   * A name associated with the person.
   * Person may have multiple names with different uses or applicable periods.
   */
  name?: HumanName[] | undefined;
  /**
   * An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
   */
  photo?: Attachment[] | undefined;
  /**
   * A contact detail for the person, e.g. a telephone number or an email address.
   * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and also to help with identification.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Whether or not the action is applicable
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
 */
export interface PlanDefinitionActionCondition extends BackboneElement {
  /**
   * An expression that returns true or false, indicating whether the condition is satisfied.
   * The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
   */
  expression?: Expression | undefined;
  /**
   * The kind of condition.
   * Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe enter/exit criteria for an action.
   */
  kind: ('applicability'|'start'|'stop');
  _kind?: Element | undefined;
}
/**
 * Dynamic aspects of the definition
 * Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
 */
export interface PlanDefinitionActionDynamicValue extends BackboneElement {
  /**
   * An expression specifying the value of the customized element.
   * The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
   */
  expression?: Expression | undefined;
  /**
   * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
   * To specify the path to the current action being realized, the %action environment variable is available in this path. For example, to specify the description element of the target action, the path would be %action.description. The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
   */
  path?: string | undefined;
  _path?: Element | undefined;
}
/**
 * Input data requirements
 */
export interface PlanDefinitionActionInput extends BackboneElement {
  /**
   * Points to an existing input or output element that provides data to this input.
   * The relatedData element allows indicating that an input to a parent action is an input to specific child actions. It also allows the output of one action to be identified as the input to a different action
   */
  relatedData?: string | undefined;
  _relatedData?: Element | undefined;
  /**
   * Defines the data that is to be provided as input to the action.
   */
  requirement?: DataRequirement | undefined;
  /**
   * A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * Output data definition
 */
export interface PlanDefinitionActionOutput extends BackboneElement {
  /**
   * Points to an existing input or output element that is results as output from the action.
   * The relatedData element allows indicating that the output of child action is also the output of a parent action. It also allows the input of one action to be identified as the output of a different action
   */
  relatedData?: string | undefined;
  _relatedData?: Element | undefined;
  /**
   * Defines the data that results as output from the action.
   */
  requirement?: DataRequirement | undefined;
  /**
   * A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * Who should participate in the action
 */
export interface PlanDefinitionActionParticipant extends BackboneElement {
  /**
   * A reference to the id element of the actor who will participate in this action.
   */
  actorId?: string | undefined;
  _actorId?: Element | undefined;
  /**
   * Indicates how the actor will be involved in the action - author, reviewer, witness, etc.
   */
  function?: CodeableConcept | undefined;
  /**
   * The role the participant should play in performing the described action.
   */
  role?: CodeableConcept | undefined;
  /**
   * The type of participant in the action.
   */
  type?: ('careteam'|'device'|'group'|'healthcareservice'|'location'|'organization'|'patient'|'practitioner'|'practitionerrole'|'relatedperson') | undefined;
  _type?: Element | undefined;
  /**
   * The type of participant in the action.
   */
  typeCanonical?: string | undefined;
  _typeCanonical?: Element | undefined;
  /**
   * The type of participant in the action.
   * When this element is a reference, it SHOULD be a reference to a definitional resource (for example, a location type, rather than a specific location).
   */
  typeReference?: Reference | undefined;
}
/**
 * Relationship to another action
 * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
 */
export interface PlanDefinitionActionRelatedAction extends BackboneElement {
  /**
   * The relationship of the end of this action to the related action.
   */
  endRelationship?: ('before'|'before-start'|'before-end'|'concurrent'|'concurrent-with-start'|'concurrent-with-end'|'after'|'after-start'|'after-end') | undefined;
  _endRelationship?: Element | undefined;
  /**
   * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
   */
  offsetDuration?: Duration | undefined;
  /**
   * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
   */
  offsetRange?: Range | undefined;
  /**
   * The relationship of the start of this action to the related action.
   */
  relationship: ('before'|'before-start'|'before-end'|'concurrent'|'concurrent-with-start'|'concurrent-with-end'|'after'|'after-start'|'after-end');
  _relationship?: Element | undefined;
  /**
   * The element id of the target related action.
   */
  targetId: string;
  _targetId?: Element | undefined;
}
/**
 * Action defined by the plan
 * Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
 */
export interface PlanDefinitionAction extends BackboneElement {
  /**
   * Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.
   */
  action?: PlanDefinitionAction[] | undefined;
  /**
   * Defines whether the action can be selected multiple times.
   */
  cardinalityBehavior?: ('single'|'multiple') | undefined;
  _cardinalityBehavior?: Element | undefined;
  /**
   * A code that provides a meaning, grouping, or classification for the action or action group. For example, a section may have a LOINC code for the section of a documentation template. In pharmaceutical quality, an action (Test) such as pH could be classified as a physical property.
   */
  code?: CodeableConcept | undefined;
  /**
   * An expression that describes applicability criteria or start/stop conditions for the action.
   * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
   */
  condition?: PlanDefinitionActionCondition[] | undefined;
  /**
   * A reference to an ActivityDefinition that describes the action to be taken in detail, a MessageDefinition describing a message to be snet, a PlanDefinition that describes a series of actions to be taken, a Questionnaire that should be filled out, a SpecimenDefinition describing a specimen to be collected, or an ObservationDefinition that specifies what observation should be captured.
   * Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.
   */
  definitionstring?: string | undefined;
  _definitionstring?: Element | undefined;
  /**
   * A brief description of the action used to provide a summary to display to the user.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
   */
  documentation?: RelatedArtifact[] | undefined;
  /**
   * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
   * Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
   */
  dynamicValue?: PlanDefinitionActionDynamicValue[] | undefined;
  /**
   * Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition. In pharmaceutical quality, a goal represents acceptance criteria (Goal) for a given action (Test), so the goalId would be the unique id of a defined goal element establishing the acceptance criteria for the action.
   */
  goalId?: string[] | undefined;
  _goalId?: Element[] | undefined;
  /**
   * Defines the grouping behavior for the action and its children.
   */
  groupingBehavior?: ('visual-group'|'logical-group'|'sentence-group') | undefined;
  _groupingBehavior?: Element | undefined;
  /**
   * Defines input data requirements for the action.
   */
  input?: PlanDefinitionActionInput[] | undefined;
  /**
   * An identifier that is unique within the PlanDefinition to allow linkage within the realized CarePlan and/or RequestOrchestration.
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * Identifies the facility where the action will occur; e.g. home, hospital, specific clinic, etc.
   * May reference a specific clinical location or may just identify a type of location.
   */
  location?: CodeableReference | undefined;
  /**
   * Defines the outputs of the action, if any.
   */
  output?: PlanDefinitionActionOutput[] | undefined;
  /**
   * Indicates who should participate in performing the action described.
   */
  participant?: PlanDefinitionActionParticipant[] | undefined;
  /**
   * Defines whether the action should usually be preselected.
   */
  precheckBehavior?: ('yes'|'no') | undefined;
  _precheckBehavior?: Element | undefined;
  /**
   * A user-visible prefix for the action. For example a section or item numbering such as 1. or A.
   */
  prefix?: string | undefined;
  _prefix?: Element | undefined;
  /**
   * Indicates how quickly the action should be addressed with respect to other actions.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * A description of why this action is necessary or appropriate.
   * This is different than the clinical evidence documentation, it's an actual business description of the reason for performing the action.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * A relationship to another action such as "before" or "30-60 minutes after start of".
   * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
   */
  relatedAction?: PlanDefinitionActionRelatedAction[] | undefined;
  /**
   * Defines the required behavior for the action.
   */
  requiredBehavior?: ('must'|'could'|'must-unless-documented') | undefined;
  _requiredBehavior?: Element | undefined;
  /**
   * Defines the selection behavior for the action and its children.
   */
  selectionBehavior?: ('any'|'all'|'all-or-none'|'exactly-one'|'at-most-one'|'one-or-more') | undefined;
  _selectionBehavior?: Element | undefined;
  /**
   * A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
   * The subject of an action overrides the subject at a parent action or on the root of the PlanDefinition if specified.
   * In addition, because the subject needs to be resolved during realization, use of subjects in actions (or in the ActivityDefinition referenced by the action) resolves based on the set of subjects supplied in context and by type (i.e. the patient subject would resolve to a resource of type Patient).
   */
  subjectstring?: string | undefined;
  _subjectstring?: Element | undefined;
  /**
   * A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
   * The subject of an action overrides the subject at a parent action or on the root of the PlanDefinition if specified.
   * In addition, because the subject needs to be resolved during realization, use of subjects in actions (or in the ActivityDefinition referenced by the action) resolves based on the set of subjects supplied in context and by type (i.e. the patient subject would resolve to a resource of type Patient).
   */
  subjectCodeableConcept?: CodeableConcept | undefined;
  /**
   * A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
   * The subject of an action overrides the subject at a parent action or on the root of the PlanDefinition if specified.
   * In addition, because the subject needs to be resolved during realization, use of subjects in actions (or in the ActivityDefinition referenced by the action) resolves based on the set of subjects supplied in context and by type (i.e. the patient subject would resolve to a resource of type Patient).
   */
  subjectReference?: Reference | undefined;
  /**
   * A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
   */
  textEquivalent?: string | undefined;
  _textEquivalent?: Element | undefined;
  /**
   * An optional value describing when the action should be performed.
   * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
   */
  timingAge?: Age | undefined;
  /**
   * An optional value describing when the action should be performed.
   * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
   */
  timingDuration?: Duration | undefined;
  /**
   * An optional value describing when the action should be performed.
   * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
   */
  timingRange?: Range | undefined;
  /**
   * An optional value describing when the action should be performed.
   * The intent of the timing element is to provide timing when the action should be performed. As a definitional resource, this timing is interpreted as part of an apply operation so that the timing of the result actions in a CarePlan or RequestOrchestration, for example, would be specified by evaluating the timing definition in the context of the apply and setting the resulting timing on the appropriate elements of the target resource. If the timing is an Age, the activity is expected to be performed when the subject is the given Age. When the timing is a Duration, the activity is expected to be performed within the specified duration from the apply. When the timing is a Range, it may be a range of Ages or Durations, providing a range for the expected timing of the resulting activity. When the timing is a Timing, it is establishing a schedule for the timing of the resulting activity.
   */
  timingTiming?: Timing | undefined;
  /**
   * The textual description of the action displayed to a user. For example, when the action is a test to be performed, the title would be the title of the test such as Assay by HPLC.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
   * Note that when a referenced ActivityDefinition also defines a transform, the transform specified here generally takes precedence. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
   */
  transform?: string | undefined;
  _transform?: Element | undefined;
  /**
   * A description of when the action should be triggered. When multiple triggers are specified on an action, any triggering event invokes the action.
   */
  trigger?: TriggerDefinition[] | undefined;
  /**
   * The type of action to perform (create, update, remove).
   */
  type?: CodeableConcept | undefined;
}
/**
 * Who or what can be this actor
 */
export interface PlanDefinitionActorOption extends BackboneElement {
  /**
   * The role the participant should play in performing the described action.
   */
  role?: CodeableConcept | undefined;
  /**
   * The type of participant in the action.
   */
  type?: ('careteam'|'device'|'group'|'healthcareservice'|'location'|'organization'|'patient'|'practitioner'|'practitionerrole'|'relatedperson') | undefined;
  _type?: Element | undefined;
  /**
   * The type of participant in the action.
   */
  typeCanonical?: string | undefined;
  _typeCanonical?: Element | undefined;
  /**
   * The type of participant in the action.
   * When this element is a reference, it SHOULD be a reference to a definitional resource (for example, a location type, rather than a specific location).
   */
  typeReference?: Reference | undefined;
}
/**
 * Actors within the plan
 */
export interface PlanDefinitionActor extends BackboneElement {
  /**
   * A description of how the actor fits into the overall actions of the plan definition.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The characteristics of the candidates that could serve as the actor.
   */
  option: PlanDefinitionActorOption[];
  /**
   * A descriptive label for the actor.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * Target outcome for the goal
 */
export interface PlanDefinitionGoalTarget extends BackboneElement {
  /**
   * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
   */
  detailboolean?: boolean | undefined;
  _detailboolean?: Element | undefined;
  /**
   * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
   */
  detailCodeableConcept?: CodeableConcept | undefined;
  /**
   * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
   */
  detailnumber?: number | undefined;
  /**
   * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
   */
  detailQuantity?: Quantity | undefined;
  /**
   * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
   */
  detailRange?: Range | undefined;
  /**
   * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
   */
  detailRatio?: Ratio | undefined;
  /**
   * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
   * A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the goal.target.measure defines a coded value.
   */
  detailstring?: string | undefined;
  _detailstring?: Element | undefined;
  /**
   * Indicates the timeframe after the start of the goal in which the goal should be met.
   */
  due?: Duration | undefined;
  /**
   * The parameter whose value is to be tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
   */
  measure?: CodeableConcept | undefined;
}
/**
 * What the plan is trying to accomplish
 */
export interface PlanDefinitionGoal extends BackboneElement {
  /**
   * Identifies problems, conditions, issues, or concerns the goal is intended to address.
   */
  addresses?: CodeableConcept[] | undefined;
  /**
   * Indicates a category the goal falls within.
   */
  category?: CodeableConcept | undefined;
  /**
   * Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
   * If no code is available, use CodeableConcept.text.
   */
  description: CodeableConcept;
  /**
   * Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.
   */
  documentation?: RelatedArtifact[] | undefined;
  /**
   * Identifies the expected level of importance associated with reaching/sustaining the defined goal.
   */
  priority?: CodeableConcept | undefined;
  /**
   * The event after which the goal should begin being pursued.
   */
  start?: CodeableConcept | undefined;
  /**
   * Indicates what should be done and within what timeframe.
   */
  target?: PlanDefinitionGoalTarget[] | undefined;
}
export interface PlanDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PlanDefinition';
  /**
   * An action or group of actions to be taken as part of the plan. For example, in clinical care, an action would be to prescribe a particular indicated medication, or perform a particular test as appropriate. In pharmaceutical quality, an action would be the test that needs to be performed on a drug product as defined in the quality specification.
   * Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
   */
  action?: PlanDefinitionAction[] | undefined;
  /**
   * Actors represent the individuals or groups involved in the execution of the defined set of activities.
   */
  actor?: PlanDefinitionActor[] | undefined;
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
   */
  asNeededboolean?: boolean | undefined;
  _asNeededboolean?: Element | undefined;
  /**
   * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
   */
  asNeededCodeableConcept?: CodeableConcept | undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the content.
   */
  author?: ContactDetail[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.
   * The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the plan definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the plan definition changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the plan definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the plan definition from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the plan definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the plan definition is presumed to be the predominant language in the place the plan definition was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the content.
   */
  editor?: ContactDetail[] | undefined;
  /**
   * The period during which the plan definition content was or is planned to be in active use.
   * The effective period for a plan definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a plan definition intended to be used for the year 2016 might be published in 2015.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * A Boolean value to indicate that this plan definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of plan definitions that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A goal describes an expected outcome that activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, meeting the acceptance criteria for a test as specified by a quality specification, etc.
   */
  goal?: PlanDefinitionGoal[] | undefined;
  /**
   * A formal identifier that is used to identify this plan definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this plan definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the plan definition is intended to be used.
   * It may be possible for the plan definition to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A reference to a Library resource containing any formal logic used by the plan definition.
   */
  library?: string[] | undefined;
  _library?: Element[] | undefined;
  /**
   * A natural language name identifying the plan definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the plan definition.
   * Usually an organization but may be an individual. The publisher (or steward) of the plan definition is the organization or individual primarily responsible for the maintenance and upkeep of the plan definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the plan definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this plan definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the plan definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this plan definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Related artifacts such as additional documentation, justification, or bibliographic references.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * The status of this plan definition. Enables tracking the life-cycle of the content.
   * Allows filtering of plan definitions that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
   * Note that the choice of canonical for the subject element was introduced in R4B to support pharmaceutical quality use cases. To ensure as much backwards-compatibility as possible, it is recommended to only use the new canonical type with these use cases.
   */
  subjectstring?: string | undefined;
  _subjectstring?: Element | undefined;
  /**
   * A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
   * Note that the choice of canonical for the subject element was introduced in R4B to support pharmaceutical quality use cases. To ensure as much backwards-compatibility as possible, it is recommended to only use the new canonical type with these use cases.
   */
  subjectCodeableConcept?: CodeableConcept | undefined;
  /**
   * A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
   * Note that the choice of canonical for the subject element was introduced in R4B to support pharmaceutical quality use cases. To ensure as much backwards-compatibility as possible, it is recommended to only use the new canonical type with these use cases.
   */
  subjectReference?: Reference | undefined;
  /**
   * An explanatory or alternate title for the plan definition giving additional information about its content.
   */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the plan definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * A high-level category for the plan definition that distinguishes the kinds of systems that would be interested in the plan definition.
   */
  type?: CodeableConcept | undefined;
  /**
   * An absolute URI that is used to identify this plan definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this plan definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the plan definition is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * A detailed description of how the plan definition is used from a clinical perspective.
   */
  usage?: string | undefined;
  _usage?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate plan definition instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the plan definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the plan definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
   * There may be different plan definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the plan definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * A language which may be used to communicate with the practitioner
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Practitioner.Communication associations.
 * For animals, language is not a relevant field, and should be absent from the instance.
 */
export interface PractitionerCommunication extends BackboneElement {
  /**
   * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-AU" for Australian English.
   * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
   */
  language: CodeableConcept;
  /**
   * Indicates whether or not the person prefers this language (over other languages he masters up a certain level).
   * This language is specifically identified for communicating directly with the practitioner (typically un-related to patient communications).
   */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;
}
/**
 * Qualifications, certifications, accreditations, licenses, training, etc. pertaining to the provision of care
 * The PractitionerRole.specialty defines the functional role that they are practicing at a given organization or location.  Those specialties may or might not require a qualification, and are not defined on the practitioner.
 */
export interface PractitionerQualification extends BackboneElement {
  /**
   * Coded representation of the qualification.
   */
  code: CodeableConcept;
  /**
   * An identifier that applies to this person's qualification.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Organization that regulates and issues the qualification.
   */
  issuer?: Reference | undefined;
  /**
   * Period during which the qualification is valid.
   */
  period?: Period | undefined;
}
export interface Practitioner extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Practitioner';
  /**
   * Whether this practitioner's record is in active use.
   * If the practitioner is not in use by one organization, then it should mark the period on the PractitonerRole with an end date (even if they are active) as they may be active in another role.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Address(es) of the practitioner that are not role specific (typically home address). 
   * Work addresses are not typically entered in this property as they are usually role dependent.
   * The PractitionerRole does not have an address value on it, as it is expected that the location property be used for this purpose (which has an address).
   */
  address?: Address[] | undefined;
  /**
   * The date of birth for the practitioner.
   */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;
  /**
   * A language which may be used to communicate with the practitioner, often for correspondence/administrative purposes.
   * The `PractitionerRole.communication` property should be used for publishing the languages that a practitioner is able to communicate with patients (on a per Organization/Role basis).
   * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Practitioner.Communication associations.
   * For animals, language is not a relevant field, and should be absent from the instance.
   */
  communication?: PractitionerCommunication[] | undefined;
  /**
   * Indicates if the practitioner is deceased or not.
   * If there's no value in the instance, it means there is no statement on whether or not the practitioner is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
   */
  deceasedboolean?: boolean | undefined;
  _deceasedboolean?: Element | undefined;
  /**
   * Indicates if the practitioner is deceased or not.
   * If there's no value in the instance, it means there is no statement on whether or not the practitioner is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
   */
  deceasedstring?: string | undefined;
  _deceasedstring?: Element | undefined;
  /**
   * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * An identifier that applies to this person in this role.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The name(s) associated with the practitioner.
   * The selection of the use property should ensure that there is a single usual name specified, and others use the nickname (alias), old, or other values as appropriate.  
   * In general, select the value to be used in the ResourceReference.display based on this:
   * 1. There is more than 1 name
   * 2. Use = usual
   * 3. Period is current to the date of the usage
   * 4. Use = official
   * 5. Other order as decided by internal business rules.
   */
  name?: HumanName[] | undefined;
  /**
   * Image of the person.
   */
  photo?: Attachment[] | undefined;
  /**
   * The official qualifications, certifications, accreditations, training, licenses (and other types of educations/skills/capabilities) that authorize or otherwise pertain to the provision of care by the practitioner.
   * For example, a medical license issued by a medical board of licensure authorizing the practitioner to practice medicine within a certain locality.
   * The PractitionerRole.specialty defines the functional role that they are practicing at a given organization or location.  Those specialties may or might not require a qualification, and are not defined on the practitioner.
   */
  qualification?: PractitionerQualification[] | undefined;
  /**
   * A contact detail for the practitioner, e.g. a telephone number or an email address.
   * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and to help with identification.  These typically will have home numbers, or mobile numbers that are not role specific.
   */
  telecom?: ContactPoint[] | undefined;
}
export interface PractitionerRole extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PractitionerRole';
  /**
   * Whether this practitioner role record is in active use. Some systems may use this property to mark non-active practitioners, such as those that are not currently employed.
   * If this value is false, you may refer to the period to see when the role was in active use. If there is no period specified, no inference can be made about when it was active.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * A collection of times the practitioner is available or performing this role at the location and/or healthcareservice.
   * More detailed availability information may be provided in associated Schedule/Slot resources.
   * Systems may choose to render availability differently than it is exchanged on the interface. For example, rather than "Mon, Tue, Wed, Thur, Fri from 9am-12am; Mon, Tue, Wed, Thur, Fri from 1pm-5pm" as would be implied by two availableTime repetitions, an application could render this information as "Mon-Fri 9-12am and 1-5pm".
   * The NotAvailableTime(s) included indicate the general days/periods where the practitioner is not available (for things such as vacation time, or public holidays).
   */
  availability?: Availability[] | undefined;
  /**
   * Collection of characteristics (attributes).
   * These could be such things as is the service mode used by this role.
   */
  characteristic?: CodeableConcept[] | undefined;
  /**
   * Roles which this practitioner is authorized to perform for the organization.
   * A person may have more than one role.
   */
  code?: CodeableConcept[] | undefined;
  /**
   * A language the practitioner can use in patient communication. The practitioner may know several languages (listed in practitioner.communication), however these are the languages that could be advertised in a directory for a patient to search.
   * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
   * Note that for non-patient oriented communication, see Practitioner.communication.  Note that all 'person' type resources (Person, RelatedPerson, Patient, Practitioner) have a communication structure that includes preferences.  Role or service oriented resources such as HealthcareService and PractitionerRole only include languages that are available for interacting with patients.
   */
  communication?: CodeableConcept[] | undefined;
  /**
   * The contact details of communication devices available relevant to the specific PractitionerRole. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.
   */
  contact?: ExtendedContactDetail[] | undefined;
  /**
   * Technical endpoints providing access to services operated for the practitioner with this role. Commonly used for locating scheduling services, or identifying where to send referrals electronically.
   */
  endpoint?: Reference[] | undefined;
  /**
   * The list of healthcare services that this worker provides for this role's Organization/Location(s).
   */
  healthcareService?: Reference[] | undefined;
  /**
   * Business Identifiers that are specific to a role/location.
   * A specific identifier value (e.g. Minnesota Registration ID) may appear on multiple PractitionerRole instances which could be for different periods, or different Roles (or other reasons).  A specific identifier may be included multiple times in the same PractitionerRole instance with different identifier validity periods.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The location(s) at which this practitioner provides care.
   */
  location?: Reference[] | undefined;
  /**
   * The organization where the Practitioner performs the roles associated.
   */
  organization?: Reference | undefined;
  /**
   * The period during which the person is authorized to act as a practitioner in these role(s) for the organization.
   * If a practitioner is performing a role within an organization over multiple, non-adjacent periods, there should be a distinct PractitionerRole instance for each period.  For example, if a nurse is employed at a hospital, leaves the organization for a period of time due to pandemic related stress, but returns post-pandemic to the same job role, there would be two PractitionerRole instances for the different periods of employment.
   */
  period?: Period | undefined;
  /**
   * Practitioner that is able to provide the defined services for the organization.
   */
  practitioner?: Reference | undefined;
  /**
   * The specialty of a practitioner that describes the functional role they are practicing at a given organization or location.
   * The specialty represents the functional role a practitioner is playing within an organization/location. This role may require the individual have certain qualifications, which would be represented in the Practitioner.qualifications property.  Note that qualifications may or might not relate to or be required by the practicing specialty.
   */
  specialty?: CodeableConcept[] | undefined;
}
/**
 * Manipulated, implanted, or removed device
 */
export interface ProcedureFocalDevice extends BackboneElement {
  /**
   * The kind of change that happened to the device during the procedure.
   */
  action?: CodeableConcept | undefined;
  /**
   * The device that was manipulated (changed) during the procedure.
   */
  manipulated: Reference;
}
/**
 * Who performed the procedure and what they did
 */
export interface ProcedurePerformer extends BackboneElement {
  /**
   * Indicates who or what performed the procedure.
   */
  actor: Reference;
  /**
   * Distinguishes the type of involvement of the performer in the procedure. For example, surgeon, anaesthetist, endoscopist.
   */
  function?: CodeableConcept | undefined;
  /**
   * The Organization the Patient, RelatedPerson, Device, CareTeam, and HealthcareService was acting on behalf of.
   * Organization, Patient, RelatedPerson, Device, CareTeam, and HealthcareService can be associated with multiple organizations. This element indicates which organization they were acting on behalf of when performing the action.
   */
  onBehalfOf?: Reference | undefined;
  /**
   * Time period during which the performer performed the procedure.
   */
  period?: Period | undefined;
}
export interface Procedure extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Procedure';
  /**
   * A reference to a resource that contains details of the request for this procedure.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
   * If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [http://hl7.org/fhir/StructureDefinition/procedure-targetBodyStructure](http://hl7.org/fhir/extensions/StructureDefinition-procedure-targetBodyStructure.html).
   */
  bodySite?: CodeableConcept[] | undefined;
  /**
   * A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
   */
  code?: CodeableConcept | undefined;
  /**
   * Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.
   * If complications are only expressed by the narrative text, they can be captured using the CodeableReference.concept.text.
   */
  complication?: CodeableReference[] | undefined;
  /**
   * The Encounter during which this Procedure was created or performed or to which the creation of this record is tightly associated.
   * This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
   */
  encounter?: Reference | undefined;
  /**
   * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
   */
  focalDevice?: ProcedureFocalDevice[] | undefined;
  /**
   * Who is the target of the procedure when it is not the subject of record only.  If focus is not present, then subject is the focus.  If focus is present and the subject is one of the targets of the procedure, include subject as a focus as well. If focus is present and the subject is not included in focus, it implies that the procedure was only targeted on the focus. For example, when a caregiver is given education for a patient, the caregiver would be the focus and the procedure record is associated with the subject (e.g. patient).  For example, use focus when recording the target of the education, training, or counseling is the parent or relative of a patient.
   */
  focus?: Reference | undefined;
  /**
   * If the procedure required specific follow up - e.g. removal of sutures. The follow up may be represented as a simple note or could potentially be more complex, in which case the CarePlan resource can be used.
   */
  followUp?: CodeableConcept[] | undefined;
  /**
   * Business identifiers assigned to this procedure by the performer or other systems which remain constant as the resource is updated and is propagated from server to server.
   * This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and Person resource instances might share the same social insurance number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The URL pointing to a FHIR-defined protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
   */
  instantiatesCanonical?: string[] | undefined;
  _instantiatesCanonical?: Element[] | undefined;
  /**
   * The URL pointing to an externally maintained protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
   * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
   */
  instantiatesUri?: string[] | undefined;
  _instantiatesUri?: Element[] | undefined;
  /**
   * The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.
   */
  location?: Reference | undefined;
  /**
   * Any other notes and comments about the procedure.
   */
  note?: Annotation[] | undefined;
  /**
   * Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   * This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.
   * Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
   */
  occurrenceAge?: Age | undefined;
  /**
   * Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   * This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.
   * Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
   */
  occurrencestring?: string | undefined;
  _occurrencestring?: Element | undefined;
  /**
   * Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   * This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.
   * Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   * This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.
   * Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
   */
  occurrenceRange?: Range | undefined;
  /**
   * Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   * This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.
   * Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
   */
  occurrenceTiming?: Timing | undefined;
  /**
   * The outcome of the procedure - did it resolve the reasons for the procedure being performed?
   * If outcome contains narrative text only, it can be captured using the CodeableConcept.text.
   */
  outcome?: CodeableConcept | undefined;
  /**
   * A larger event of which this particular procedure is a component or step.
   * The MedicationAdministration resource has a partOf reference to Procedure, but this is not a circular reference.   For example, the anesthesia MedicationAdministration is part of the surgical Procedure (MedicationAdministration.partOf = Procedure).  For example, the procedure to insert the IV port for an IV medication administration is part of the medication administration (Procedure.partOf = MedicationAdministration).
   */
  partOf?: Reference[] | undefined;
  /**
   * Indicates who or what performed the procedure and how they were involved.
   */
  performer?: ProcedurePerformer[] | undefined;
  /**
   * The coded reason or reference why the procedure was performed. This may be a coded entity of some type, be present as text, or be a reference to one of several resources that justify the procedure.
   * Use Procedure.reason.concept when a code sufficiently describes the reason. Use Procedure.reason.reference when referencing a resource, which allows more information to be conveyed, such as onset date.  For a single Procedure.reason, if both Procedure.reason.concept and Procedure.reason.reference are present, they are expected to be consistent with each other.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * The date the occurrence of the procedure was first captured in the record regardless of Procedure.status (potentially after the occurrence of the event).
   */
  recorded?: string | undefined;
  _recorded?: Element | undefined;
  /**
   * Individual who recorded the record and takes responsibility for its content.
   */
  recorder?: Reference | undefined;
  /**
   * This could be a histology result, pathology report, surgical report, etc.
   * There could potentially be multiple reports - e.g. if this was a procedure which took multiple biopsies resulting in a number of anatomical pathology reports.
   */
  report?: Reference[] | undefined;
  /**
   * Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
   */
  reportedboolean?: boolean | undefined;
  _reportedboolean?: Element | undefined;
  /**
   * Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
   */
  reportedReference?: Reference | undefined;
  /**
   * A code specifying the state of the procedure. Generally, this will be the in-progress or completed state.
   * The "unknown" code is not to be used to convey other statuses.  The "unknown" code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the procedure.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('preparation'|'in-progress'|'not-done'|'on-hold'|'stopped'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * Captures the reason for the current state of the procedure.
   * This is generally only used for "exception" statuses such as "not-done", "suspended" or "aborted". The reason for performing the event at all is captured in reasonCode, not here.
   */
  statusReason?: CodeableConcept | undefined;
  /**
   * On whom or on what the procedure was performed. This is usually an individual human, but can also be performed on animals, groups of humans or animals, organizations or practitioners (for licensing), locations or devices (for safety inspections or regulatory authorizations).  If the actual focus of the procedure is different from the subject, the focus element specifies the actual focus of the procedure.
   */
  subject: Reference;
  /**
   * Other resources from the patient record that may be relevant to the procedure.  The information from these resources was either used to create the instance or is provided to help with its interpretation. This extension should not be used if more specific inline elements or extensions are available.
   */
  supportingInfo?: Reference[] | undefined;
  /**
   * Identifies medications, devices and any other substance used as part of the procedure.
   * For devices actually implanted or removed, use Procedure.focalDevice.manipulated.
   */
  used?: CodeableReference[] | undefined;
}
/**
 * Actor involved
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 */
export interface ProvenanceAgent extends BackboneElement {
  /**
   * The agent that delegated authority to perform the activity performed by the agent.who element.
   */
  onBehalfOf?: Reference | undefined;
  /**
   * The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.
   * For example: Chief-of-Radiology, Nurse, Physician, Medical-Student, etc.
   */
  role?: CodeableConcept[] | undefined;
  /**
   * The Functional Role of the agent with respect to the activity.
   * For example: assembler, author, prescriber, signer, investigator, etc.
   */
  type?: CodeableConcept | undefined;
  /**
   * Indicates who or what performed in the event.
   */
  who: Reference;
}
/**
 * An entity used in this activity
 */
export interface ProvenanceEntity extends BackboneElement {
  /**
   * The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which used the entity.
   * A usecase where one Provenance.entity.agent is used where the Entity that was used in the creation/updating of the Target, is not in the context of the same custodianship as the Target, and thus the meaning of Provenance.entity.agent is to say that the entity referenced is managed elsewhere and that this Agent provided access to it.  This would be similar to where the Entity being referenced is managed outside FHIR, such as through HL7 V2, v3, or XDS. This might be where the Entity being referenced is managed in another FHIR resource server. Thus it explains the Provenance of that Entity's use in the context of this Provenance activity.
   */
  agent?: ProvenanceAgent[] | undefined;
  /**
   * How the entity was used during the activity.
   */
  role: ('revision'|'quotation'|'source'|'instantiates'|'removal');
  _role?: Element | undefined;
  /**
   * Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
   * whatIdentity should be used for entities that are not a Resource type.
   */
  what: Reference;
}
/**
 * Some parties may be duplicated between the target resource and its provenance.  For instance, the prescriber is usually (but not always) the author of the prescription resource. This resource is defined with close consideration for W3C Provenance.
 */
export interface Provenance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Provenance';
  /**
   * An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
   */
  activity?: CodeableConcept | undefined;
  /**
   * An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.
   * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
   */
  agent: ProvenanceAgent[];
  /**
   * The authorization (e.g., PurposeOfUse) that was used during the event being recorded.
   */
  authorization?: CodeableReference[] | undefined;
  /**
   * Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon.
   */
  basedOn?: Reference[] | undefined;
  /**
   * This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).
   */
  encounter?: Reference | undefined;
  /**
   * An entity used in this activity.
   */
  entity?: ProvenanceEntity[] | undefined;
  /**
   * Where the activity occurred, if relevant.
   */
  location?: Reference | undefined;
  /**
   * The period during which the activity occurred.
   * The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
   */
  occurredstring?: string | undefined;
  _occurredstring?: Element | undefined;
  /**
   * The period during which the activity occurred.
   * The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
   */
  occurredPeriod?: Period | undefined;
  /**
   * The patient element is available to enable deterministic tracking of activities that involve the patient as the subject of the data used in an activity.
   */
  patient?: Reference | undefined;
  /**
   * Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
   * For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
   */
  policy?: string[] | undefined;
  _policy?: Element[] | undefined;
  /**
   * The instant of time at which the activity was recorded.
   * This can be a little different from the time stamp on the resource if there is a delay between recording the event and updating the provenance and target resource.
   */
  recorded?: string | undefined;
  _recorded?: Element | undefined;
  /**
   * A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
   */
  signature?: Signature[] | undefined;
  /**
   * The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.
   * Target references are usually version specific, but might not be, if a version has not been assigned or if the provenance information is part of the set of resources being maintained (i.e. a document). When using the RESTful API, the identity of the resource might not be known (especially not the version specific one); the client may either submit the resource first, and then the provenance, or it may submit both using a single transaction. See the notes on transaction for further discussion.
   */
  target: Reference[];
}
/**
 * Permitted answer
 * This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.
 */
export interface QuestionnaireItemAnswerOption extends BackboneElement {
  /**
   * Indicates whether the answer value is selected when the list of possible answers is initially shown.
   */
  initialSelected?: boolean | undefined;
  _initialSelected?: Element | undefined;
  /**
   * A potential answer that's allowed as the answer to this question.
   * The data type of the value must agree with the item.type.
   */
  valueCoding?: Coding | undefined;
  /**
   * A potential answer that's allowed as the answer to this question.
   * The data type of the value must agree with the item.type.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * A potential answer that's allowed as the answer to this question.
   * The data type of the value must agree with the item.type.
   */
  valuenumber?: number | undefined;
  /**
   * A potential answer that's allowed as the answer to this question.
   * The data type of the value must agree with the item.type.
   */
  valueReference?: Reference | undefined;
}
/**
 * Only allow data when
 * If multiple repetitions of this extension are present, the interpretation is driven by enableBehavior (either all repetitions must evaluate to true for this item to be enabled, or only one must evaluate to true for the item to be enabled).  If the enableWhen.question has multiple answers, the condition evaluates to true if *any* of the answers for the referenced item match the enableWhen condition.  This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.  If enableWhen logic depends on an item that is disabled, the logic should proceed as though the item is not valued - even if a default value or other value might be retained in memory in the event of the item being re-enabled.  In some cases, the comparison between the indicated answer and the specified value may differ only by precision.  For example, the enableWhen might be Q1 > 1970, but the answer to Q1 is 1970-10-15.  There is not a clear answer as to whether 1970-10-15 should be considered 'greater' than 1970, given that it is an imprecise value.  In these indeterminate situations, the form filler has the option of refusing to render the form.  If the form **is** displayed, items where enableWhen is indeterminate SHOULD be treated as enabled with a warning indicating that the questionnaire logic was faulty and it is possible that the item should not be enabled.  Questionnaires SHOULD be designed to take into account challenges around varying precision to minimize non-deterministic situations by setting constraints around expected precision, etc.
 */
export interface QuestionnaireItemEnableWhen extends BackboneElement {
  /**
   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
   */
  answerboolean?: boolean | undefined;
  _answerboolean?: Element | undefined;
  /**
   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
   */
  answerCoding?: Coding | undefined;
  /**
   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
   */
  answerstring?: string | undefined;
  _answerstring?: Element | undefined;
  /**
   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
   */
  answernumber?: number | undefined;
  /**
   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
   */
  answerQuantity?: Quantity | undefined;
  /**
   * A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension.
   */
  answerReference?: Reference | undefined;
  /**
   * Specifies the criteria by which the question is enabled.
   */
  operator: ('exists'|'='|'!='|'>'|'<'|'>='|'<=');
  _operator?: Element | undefined;
  /**
   * The linkId for the question whose answer (or lack of answer) governs whether this item is enabled.
   * If multiple question occurrences are present for the same question (same linkId), then this refers to the nearest question occurrence reachable by tracing first the "ancestor" axis and then the "preceding" axis and then the "following" axis.  If there are multiple items with the same linkId and all are equadistant (e.g. a question references a question that appears in a separate repeating group), that is an error.  (Consider using the enableWhenExpression extension to define logic to handle such a situation.)
   */
  question: string;
  _question?: Element | undefined;
}
/**
 * Initial value(s) when item is first rendered
 * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial.answer[x] must agree with the item.type, and only repeating items can have more then one initial value.
 */
export interface QuestionnaireItemInitial extends BackboneElement {
  /**
   * The actual value to for an initial answer.
   * The type of the initial value must be consistent with the type of the item.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The actual value to for an initial answer.
   * The type of the initial value must be consistent with the type of the item.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The actual value to for an initial answer.
   * The type of the initial value must be consistent with the type of the item.
   */
  valueCoding?: Coding | undefined;
  /**
   * The actual value to for an initial answer.
   * The type of the initial value must be consistent with the type of the item.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The actual value to for an initial answer.
   * The type of the initial value must be consistent with the type of the item.
   */
  valuenumber?: number | undefined;
  /**
   * The actual value to for an initial answer.
   * The type of the initial value must be consistent with the type of the item.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The actual value to for an initial answer.
   * The type of the initial value must be consistent with the type of the item.
   */
  valueReference?: Reference | undefined;
}
/**
 * Questions and sections within the Questionnaire
 * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
 */
export interface QuestionnaireItem extends BackboneElement {
  /**
   * For items that have a defined set of allowed answers (via answerOption or answerValueSet), indicates whether values *other* than those specified can be selected.
   */
  answerConstraint?: ('optionsOnly'|'optionsOrType'|'optionsOrString') | undefined;
  _answerConstraint?: Element | undefined;
  /**
   * One of the permitted answers for the question.
   * This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.
   */
  answerOption?: QuestionnaireItemAnswerOption[] | undefined;
  /**
   * A reference to a value set containing a list of values representing permitted answers for a question.
   * LOINC defines many useful value sets for questionnaire responses. See [LOINC Answer Lists](https://terminology.hl7.org/LOINC.html). The value may come from the ElementDefinition referred to by .definition.
   */
  answerValueSet?: string | undefined;
  _answerValueSet?: Element | undefined;
  /**
   * A terminology code that corresponds to this group or question (e.g. a code from LOINC, which defines many questions and answers).
   * The value may come from the ElementDefinition referred to by .definition.
   */
  code?: Coding[] | undefined;
  /**
   * This element is a URI that refers to an [ElementDefinition](elementdefinition.html) or to an [ObservationDefinition](observationdefinition.html) that provides information about this item, including information that might otherwise be included in the instance of the Questionnaire resource. A detailed description of the construction of the URI is shown in [Comments](questionnaire.html#definition), below.
   * The uri refers to an ElementDefinition in a [StructureDefinition](structuredefinition.html#) or to an [ObservationDefinition](observationdefinition.html) and always starts with the [canonical URL](references.html#canonical) for the target resource. When referring to a StructureDefinition, a fragment identifier is used to specify the element definition by its id [Element.id](types-definitions.html#Element.id). E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x]. In the absence of a fragment identifier, the first/root element definition in the target is the matching element definition.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * Indicates if and how items that are disabled (because enableWhen evaluates to 'false') should be displayed.
   * If not specified, rendering behavior is up to the client.  This element is only meaningful if enableWhen or an equivalent extension is present
   */
  disabledDisplay?: ('hidden'|'protected') | undefined;
  _disabledDisplay?: Element | undefined;
  /**
   * Controls how multiple enableWhen values are interpreted -  whether all or any must be true.
   * This element must be specified if more than one enableWhen value is provided.
   */
  enableBehavior?: ('all'|'any') | undefined;
  _enableBehavior?: Element | undefined;
  /**
   * A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.
   * If multiple repetitions of this extension are present, the interpretation is driven by enableBehavior (either all repetitions must evaluate to true for this item to be enabled, or only one must evaluate to true for the item to be enabled).  If the enableWhen.question has multiple answers, the condition evaluates to true if *any* of the answers for the referenced item match the enableWhen condition.  This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.  If enableWhen logic depends on an item that is disabled, the logic should proceed as though the item is not valued - even if a default value or other value might be retained in memory in the event of the item being re-enabled.  In some cases, the comparison between the indicated answer and the specified value may differ only by precision.  For example, the enableWhen might be Q1 > 1970, but the answer to Q1 is 1970-10-15.  There is not a clear answer as to whether 1970-10-15 should be considered 'greater' than 1970, given that it is an imprecise value.  In these indeterminate situations, the form filler has the option of refusing to render the form.  If the form **is** displayed, items where enableWhen is indeterminate SHOULD be treated as enabled with a warning indicating that the questionnaire logic was faulty and it is possible that the item should not be enabled.  Questionnaires SHOULD be designed to take into account challenges around varying precision to minimize non-deterministic situations by setting constraints around expected precision, etc.
   */
  enableWhen?: QuestionnaireItemEnableWhen[] | undefined;
  /**
   * One or more values that should be pre-populated in the answer when initially rendering the questionnaire for user input.
   * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial.answer[x] must agree with the item.type, and only repeating items can have more then one initial value.
   */
  initial?: QuestionnaireItemInitial[] | undefined;
  /**
   * Text, questions and other groups to be nested beneath a question or group.
   * There is no specified limit to the depth of nesting.  However, Questionnaire authors are encouraged to consider the impact on the user and user interface of overly deep nesting.
   */
  item?: QuestionnaireItem[] | undefined;
  /**
   * An identifier that is unique within the Questionnaire allowing linkage to the equivalent item in a QuestionnaireResponse resource.
   * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.
   * LinkIds can have whitespaces and slashes by design. Tooling should not rely on linkIds being valid XHTML element IDs, and should not directly embed them as such
   */
  linkId: string;
  _linkId?: Element | undefined;
  /**
   * The maximum number of characters that are permitted in the answer to be considered a "valid" QuestionnaireResponse.
   * For base64binary, reflects the number of characters representing the encoded data, not the number of bytes of the binary data. The value may come from the ElementDefinition referred to by .definition.
   */
  maxLength?: number | undefined;
  /**
   * A short label for a particular group, question or set of display text within the questionnaire used for reference by the individual completing the questionnaire.
   * These are generally unique within a questionnaire, though this is not guaranteed. Some questionnaires may have multiple questions with the same label with logic to control which gets exposed.  Typically, these won't be used for "display" items, though such use is not prohibited.  Systems SHOULD NOT generate their own prefixes if prefixes are defined for any items within a Questionnaire.
   */
  prefix?: string | undefined;
  _prefix?: Element | undefined;
  /**
   * An indication, when true, that the value cannot be changed by a human respondent to the Questionnaire.
   * If specified on a 'group', then all items beneath the specified group are read only.  For questions, this only marks the answer associated with the specific item read only.  Descendant questions are not impacted.  The value of readOnly elements can be established by asserting extensions for defaultValues, linkages that support pre-population and/or extensions that support calculation based on other answers.
   */
  readOnly?: boolean | undefined;
  _readOnly?: Element | undefined;
  /**
   * An indication, if true, that a QuestionnaireResponse for this item may include multiple answers associated with a single instance of this item (for question-type items) or multiple repetitions of the item (for group-type items).
   * If a question is marked as repeats=true, then multiple answers can be provided for the question in the corresponding QuestionnaireResponse.  When rendering the questionnaire, it is up to the rendering software whether to render the question text for each answer repetition (i.e. "repeat the question") or to simply allow entry/selection of multiple answers for the question (repeat the answers).  Which is most appropriate visually may depend on the type of answer as well as whether there are nested items.
   * The resulting QuestionnaireResponse will be populated the same way regardless of rendering - one 'question' item with multiple answer values.
   *  The value may come from the ElementDefinition referred to by .definition.  When repeats=true for a group, it'll be represented with multiple items with the same linkId in the QuestionnaireResponse.  For a question, it'll be represented by a single item with that linkId with multiple answers.
   */
  repeats?: boolean | undefined;
  _repeats?: Element | undefined;
  /**
   * An indication, if true, that the item must be present in a "completed" QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire.
   * If the required item is a question, it must have a direct answer (i.e. an answer to the question itself, not merely answers to child questions) in order for the QuestionnaireResponse to be complete.  If the required item is a group, it must have at least one descendant question which has an answer  Questionnaire.item.required only has meaning for elements that are conditionally enabled with enableWhen if the condition evaluates to true.  It also only has meaning if the parent element is present.  If a non-required 'group' item contains a 'required' question item, it's completely fine to omit the group (because it's not required) despite it having a required child.  Similarly, if an item that contains other items is marked as required, that does not automatically make the contained elements required (though required groups must contain at least one descendant item with a populated answer). The value for 'required' may come from the ElementDefinition referred to by .definition.
   */
  required?: boolean | undefined;
  _required?: Element | undefined;
  /**
   * The name of a section, the text of a question or text content for a display item.
   * When using this element to represent the name of a section, use group type item and also make sure to limit the text element to a short string suitable for display as a section heading.  Group item instructions should be included as a display type item within the group.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, Coding, etc.).
   * Additional constraints on the type of answer can be conveyed by extensions. The value may come from the ElementDefinition referred to by .definition.
   */
  type: ('group'|'display'|'question'|'boolean'|'decimal'|'integer'|'date'|'dateTime'|'time'|'string'|'text'|'url'|'coding'|'attachment'|'reference'|'quantity');
  _type?: Element | undefined;
}
export interface Questionnaire extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Questionnaire';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * An identifier for this collection of questions in a particular terminology such as LOINC.
   */
  code?: Coding[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the questionnaire was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the questionnaire changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the questionnaire. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The URL of a Questionnaire that this Questionnaire is based on.
   * This element covers a broad range of relationships, from 'somewhat inspired by' to 'fully compliant with'.         There is a standard extensionthat allows clearer differentiation between the specifics of the derivation relationship where          this is needed - e.g. to determine substitutability and validation expectations -          [http://hl7.org/fhir/StructureDefinition/questionnaire-derivationType](http://hl7.org/fhir/extensions/StructureDefinition-questionnaire-derivationType.html).
   */
  derivedFrom?: string[] | undefined;
  _derivedFrom?: Element[] | undefined;
  /**
   * A free text natural language description of the questionnaire from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the questionnaire as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context. (E.g. the language of the questionnaire is presumed to be the predominant language in the place the questionnaire was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The period during which the questionnaire content was or is planned to be in active use.
   * The effective period for a questionnaire  determines when the content is applicable for usage and is independent of publication and review dates. For example, a questionnaire intended to be used for the year 2016 might be published in 2015.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * A Boolean value to indicate that this questionnaire is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage.
   * Allows filtering of questionnaires that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this questionnaire when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this questionnaire outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A particular question, question grouping or display text that is part of the questionnaire.
   * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
   */
  item?: QuestionnaireItem[] | undefined;
  /**
   * A legal or geographic region in which the questionnaire is intended to be used.
   * It may be possible for the questionnaire to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the questionnaire. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type no-whitespace name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the questionnaire.
   * Usually an organization but may be an individual. The publisher (or steward) of the questionnaire is the organization or individual primarily responsible for the maintenance and upkeep of the questionnaire. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the questionnaire. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this questionnaire is needed and why it has been designed as it has.
   * This element does not describe the usage of the questionnaire. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this questionnaire.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The current state of this questionnaire.
   * A nominal state-transition diagram can be found in the] documentation
   * Unknown does not represent 'other' - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * The types of subjects that can be the subject of responses created for the questionnaire.
   * If none are specified, then the subject is unlimited.
   */
  subjectType?: ('Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription')[] | undefined;
  _subjectType?: Element[] | undefined;
  /**
   * A short, descriptive, user-friendly title for the questionnaire.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this questionnaire is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the questionnaire is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   * The name of the referenced questionnaire can be conveyed using the http://hl7.org/fhir/StructureDefinition/display extension.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate questionnaires.
   * When multiple useContexts are specified, there is no expectation that all or even any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the questionnaire when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the questionnaire author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different questionnaires that have the same url but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the questionnaire with the format. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * The response(s) to the question
 * The value is nested because we cannot have a repeating structure that has variable type.
 */
export interface QuestionnaireResponseItemAnswer extends BackboneElement {
  /**
   * Nested groups and/or questions found within this particular answer.
   * Only used when nesting beneath a question - see item.item for nesting beneath groups
   */
  item?: QuestionnaireResponseItem[] | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
   */
  valueCoding?: Coding | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
   */
  valuenumber?: number | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.     Note that a question is answered using one of the possible choices defined with answerOption, answerValueSet or some other means and the answer has a complex data type, all elements within the answer in the QuestionnaireResponse **SHOULD** match the elements defined corresponding choice value in the Questionnaire.  However, it is possible that not all elements will be propagated.  Also, some systems might use language translations resulting in different displays.  Comparison of value to the values defined in the Questionnaire (whether by answerOption, answerValueSet or answerExpression) **SHALL NOT** pay attention to Coding.display, Reference.display, Quantity.unit unless those are the only elements present.  As well, systems are not required to check for a match on any extensions (e.g. ordinal values, translations, etc.).  Systems **MAY** enforce that if extensions such as ordinal values are present in both Questionnaire and QuestionnaireResponse, they match.
   */
  valueReference?: Reference | undefined;
}
/**
 * Groups and questions
 * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).\nWhen dealing with repeating items, each group repetition will be handled by a separate item.  However, repeating questions are handled with a single question item and potentially multiple answers.
 */
export interface QuestionnaireResponseItem extends BackboneElement {
  /**
   * The respondent's answer(s) to the question.
   * The value is nested because we cannot have a repeating structure that has variable type.
   */
  answer?: QuestionnaireResponseItemAnswer[] | undefined;
  /**
   * A reference to an [ElementDefinition](elementdefinition.html) that provides the details for the item.
   * The ElementDefinition must be in a [StructureDefinition](structuredefinition.html#), and must have a fragment identifier that identifies the specific data element by its id (Element.id). E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x].
   * There is no need for this element if the item pointed to by the linkId has a definition listed.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * Sub-questions, sub-groups or display items nested beneath a group.
   * Only used when nesting beneath a group - see item.answer.item for nesting beneath questions
   */
  item?: QuestionnaireResponseItem[] | undefined;
  /**
   * The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource.
   */
  linkId: string;
  _linkId?: Element | undefined;
  /**
   * Text that is displayed above the contents of the group or as the text of the question being answered.
   * The text for an item SHOULD be identical to the text from the corresponding Questionnaire.item. This can't be strictly enforced because it's possible for the Questionnaire to be updated subsequent to the QuestionnaireResponse having been created, however the intention is that the text in the QuestionnaireResponse reflects what the user saw when completing the Questionnaire.
   */
  text?: string | undefined;
  _text?: Element | undefined;
}
/**
 * The QuestionnaireResponse contains enough information about the questions asked and their organization that it can be interpreted somewhat independently from the Questionnaire it is based on.  I.e. You don't need access to the Questionnaire in order to extract basic information from a QuestionnaireResponse.
 */
export interface QuestionnaireResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'QuestionnaireResponse';
  /**
   * The individual or device that received the answers to the questions in the QuestionnaireResponse and recorded them in the system.
   * Mapping a subject's answers to multiple choice options and determining what to put in the textual answer is a matter of interpretation. Authoring by device would indicate that some portion of the questionnaire had been auto-populated. Device should only be used if it directly determined the answers, not if it was merely used as a capture tool to record answers provided by others. In the latter case, information about the physical device, software, etc. would be captured using Provenance.
   */
  author?: Reference | undefined;
  /**
   * The date and/or time that this questionnaire response was last modified by the user - e.g. changing answers or revising status.
   * May be different from the lastUpdateTime of the resource itself, because that reflects when the data was known to the server, not when the data was captured.
   * This element is optional to allow for systems that might not know the value, however it SHOULD be populated if possible.
   */
  authored?: string | undefined;
  _authored?: Element | undefined;
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this questionnaire response.  For example, a ServiceRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The Encounter during which this questionnaire response was created or to which the creation of this record is tightly associated.
   * This will typically be the encounter the questionnaire response was created during, but some questionnaire responses may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission forms).  A questionnaire that was initiated during an encounter but not fully completed during the encounter would still generally be associated with the encounter.
   */
  encounter?: Reference | undefined;
  /**
   * Business identifiers assigned to this questionnaire response by the performer and/or other systems.  These identifiers remain constant as the resource is updated and propagates from server to server.
   * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).
   */
  identifier?: Identifier[] | undefined;
  /**
   * A group or question item from the original questionnaire for which answers are provided.
   * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).\nWhen dealing with repeating items, each group repetition will be handled by a separate item.  However, repeating questions are handled with a single question item and potentially multiple answers.
   */
  item?: QuestionnaireResponseItem[] | undefined;
  /**
   * A procedure or observation that this questionnaire was performed as part of the execution of.  For example, the surgery a checklist was executed as part of.
   * Not to be used to link an questionnaire response to an Encounter - use 'context' for that.
   * Composition of questionnaire responses will be handled using the Assemble operation defined in the SDC IG.  For relationships to referrals, and other types of requests, use basedOn.
   */
  partOf?: Reference[] | undefined;
  /**
   * The Questionnaire that defines and organizes the questions for which answers are being provided.
   * If a QuestionnaireResponse references a Questionnaire that can be resolved, then the QuestionnaireResponse structure must be consistent with the Questionnaire (i.e. questions must be organized into the same groups, nested questions must still be nested, etc.).  It is possible to have a QuestionnaireResponse whose 'questionnaire' element does not resolve.  It is also possible for the questionnaire element to not have a value but only extensions (e.g. conveying the title or identifier for the questionnaire).  This may happen for legacy data.  If there is no formally defined Questionnaire, it is undefined what the 'correct' values for the linkId elements should be and it is possible that linkIds might be inconsistent for QuestionnaireResponses for the same form if captured by distinct systems.
   */
  questionnaire: string;
  _questionnaire?: Element | undefined;
  /**
   * The individual or device that answered the questions about the subject.
   * If not specified, no inference can be made about who provided the data. Device should only be used if it directly determined the answers, not if it was merely used as a capture tool to record answers provided by others. In the latter case, information about the physical device, software, etc. would be captured using Provenance.
   */
  source?: Reference | undefined;
  /**
   * The current state of the questionnaire response.
   * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   */
  status: ('in-progress'|'completed'|'amended'|'entered-in-error'|'stopped');
  _status?: Element | undefined;
  /**
   * The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.
   * If the Questionnaire declared a subjectType, the resource pointed to by this element must be an instance of one of the listed types.
   */
  subject?: Reference | undefined;
}
/**
 * The case or regulatory procedure for granting or amending a regulated authorization. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page)
 */
export interface RegulatedAuthorizationCase extends BackboneElement {
  /**
   * A regulatory submission from an organization to a regulator, as part of an assessing case. Multiple applications may occur over time, with more or different information to support or modify the submission or the authorization. The applications can be considered as steps within the longer running case or procedure for this authorization process.
   */
  application?: RegulatedAuthorizationCase[] | undefined;
  /**
   * Relevant date for this case.
   */
  datestring?: string | undefined;
  _datestring?: Element | undefined;
  /**
   * Relevant date for this case.
   */
  datePeriod?: Period | undefined;
  /**
   * Identifier by which this case can be referenced.
   */
  identifier?: Identifier | undefined;
  /**
   * The status associated with the case.
   */
  status?: CodeableConcept | undefined;
  /**
   * The defining type of case.
   */
  type?: CodeableConcept | undefined;
}
export interface RegulatedAuthorization extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RegulatedAuthorization';
  /**
   * Additional information or supporting documentation about the authorization.
   */
  attachedDocument?: Reference[] | undefined;
  /**
   * The legal or regulatory framework against which this authorization is granted, or other reasons for it.
   */
  basis?: CodeableConcept[] | undefined;
  /**
   * The case or regulatory procedure for granting or amending a regulated authorization. An authorization is granted in response to submissions/applications by those seeking authorization. A case is the administrative process that deals with the application(s) that relate to this and assesses them. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page).
   */
  case?: RegulatedAuthorizationCase | undefined;
  /**
   * General textual supporting information.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The organization that has been granted this authorization, by some authoritative body (the 'regulator').
   */
  holder?: Reference | undefined;
  /**
   * Business identifier for the authorization, typically assigned by the authorizing body.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Condition for which the use of the regulated product applies.
   */
  indication?: CodeableReference[] | undefined;
  /**
   * The intended use of the product, e.g. prevention, treatment, diagnosis.
   */
  intendedUse?: CodeableConcept | undefined;
  /**
   * The territory (e.g., country, jurisdiction etc.) in which the authorization has been granted.
   */
  region?: CodeableConcept[] | undefined;
  /**
   * The regulatory authority or authorizing body granting the authorization. For example, European Medicines Agency (EMA), Food and Drug Administration (FDA), Health Canada (HC), etc.
   */
  regulator?: Reference | undefined;
  /**
   * The status that is authorised e.g. approved. Intermediate states and actions can be tracked with cases and applications.
   */
  status?: CodeableConcept | undefined;
  /**
   * The date at which the current status was assigned.
   */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;
  /**
   * The product type, treatment, facility or activity that is being authorized.
   */
  subject?: Reference[] | undefined;
  /**
   * Overall type of this authorization, for example drug marketing approval, orphan drug designation.
   */
  type?: CodeableConcept | undefined;
  /**
   * The time period in which the regulatory approval, clearance or licencing is in effect. As an example, a Marketing Authorization includes the date of authorization and/or an expiration date.
   */
  validityPeriod?: Period | undefined;
}
/**
 * A language which may be used to communicate with the related person about the patient's health
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple RelatedPerson.Communication associations.   If the RelatedPerson does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
export interface RelatedPersonCommunication extends BackboneElement {
  /**
   * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-AU" for Australian English.
   * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
   */
  language: CodeableConcept;
  /**
   * Indicates whether or not the related person prefers this language (over other languages he or she masters up a certain level).
   * This language is specifically identified for communicating healthcare information.
   */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;
}
export interface RelatedPerson extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RelatedPerson';
  /**
   * Whether this related person record is in active use.
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Address where the related person can be contacted or visited.
   */
  address?: Address[] | undefined;
  /**
   * The date on which the related person was born.
   */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;
  /**
   * A language which may be used to communicate with the related person about the patient's health.
   * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple RelatedPerson.Communication associations.   If the RelatedPerson does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
   */
  communication?: RelatedPersonCommunication[] | undefined;
  /**
   * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * Identifier for a person within a particular scope.
   * RelatedPerson identifiers might not be unique across instances within a system, as a single human individual may be represented as many different RelatedPerson resources with different roles, periods, or relationships.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A name associated with the person.
   */
  name?: HumanName[] | undefined;
  /**
   * The patient this person is related to.
   */
  patient: Reference;
  /**
   * The period of time during which this relationship is or was active. If there are no dates defined, then the interval is unknown.
   * If an individual has a relationship with a patient over multiple, non-adjacent periods, there should be a distinct RelatedPerson instance for each period.  For example, if a person is a roommate for a period of time, moves out, and is later a roommate with the same person again, you would have two RelatedPerson instances.
   */
  period?: Period | undefined;
  /**
   * Image of the person.
   */
  photo?: Attachment[] | undefined;
  /**
   * The nature of the relationship between the related person and the patient.
   * The directionality of the relationship is from the RelatedPerson to the Patient. For example, if the Patient is a child, and the RelatedPerson is the mother, the relationship would be PRN (parent) or MTH (mother).
   */
  relationship?: CodeableConcept[] | undefined;
  /**
   * A contact detail for the person, e.g. a telephone number or an email address.
   * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Whether or not the action is applicable
 * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
 */
export interface RequestOrchestrationActionCondition extends BackboneElement {
  /**
   * An expression that returns true or false, indicating whether or not the condition is satisfied.
   * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
   */
  expression?: Expression | undefined;
  /**
   * The kind of condition.
   * Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe enter/exit criteria for an action.
   */
  kind: ('applicability'|'start'|'stop');
  _kind?: Element | undefined;
}
/**
 * Dynamic aspects of the definition
 * Dynamic values are applied in the order in which they are defined in the RequestOrchestration resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
 */
export interface RequestOrchestrationActionDynamicValue extends BackboneElement {
  /**
   * An expression specifying the value of the customized element.
   * The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
   */
  expression?: Expression | undefined;
  /**
   * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
   * To specify the path to the current action being realized, the %action environment variable is available in this path. For example, to specify the description element of the target action, the path would be %action.description. The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
   */
  path?: string | undefined;
  _path?: Element | undefined;
}
/**
 * Input data requirements
 */
export interface RequestOrchestrationActionInput extends BackboneElement {
  /**
   * Points to an existing input or output element that provides data to this input.
   * The relatedData element allows indicating that an input to a parent action is an input to specific child actions. It also allows the output of one action to be identified as the input to a different action
   */
  relatedData?: string | undefined;
  _relatedData?: Element | undefined;
  /**
   * Defines the data that is to be provided as input to the action.
   */
  requirement?: DataRequirement | undefined;
  /**
   * A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * Output data definition
 */
export interface RequestOrchestrationActionOutput extends BackboneElement {
  /**
   * Points to an existing input or output element that is results as output from the action.
   * The relatedData element allows indicating that the output of child action is also the output of a parent action. It also allows the input of one action to be identified as the output of a different action
   */
  relatedData?: string | undefined;
  _relatedData?: Element | undefined;
  /**
   * Defines the data that results as output from the action.
   */
  requirement?: DataRequirement | undefined;
  /**
   * A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * Who should perform the action
 * Because request orchestrations represent potential options for performing activities, some specific participants may still be unknown, so this element allows for both definitional participants (in the same way they are specified in ActivityDefinition and PlanDefinition resources) as well as identifying specific participants when they are known.
 */
export interface RequestOrchestrationActionParticipant extends BackboneElement {
  /**
   * A reference to the actual participant.
   */
  actorstring?: string | undefined;
  _actorstring?: Element | undefined;
  /**
   * A reference to the actual participant.
   */
  actorReference?: Reference | undefined;
  /**
   * Indicates how the actor will be involved in the action - author, reviewer, witness, etc.
   */
  function?: CodeableConcept | undefined;
  /**
   * The role the participant should play in performing the described action.
   */
  role?: CodeableConcept | undefined;
  /**
   * The type of participant in the action.
   */
  type?: ('careteam'|'device'|'group'|'healthcareservice'|'location'|'organization'|'patient'|'practitioner'|'practitionerrole'|'relatedperson') | undefined;
  _type?: Element | undefined;
  /**
   * The type of participant in the action.
   */
  typeCanonical?: string | undefined;
  _typeCanonical?: Element | undefined;
  /**
   * The type of participant in the action.
   * When this element is a reference, it SHOULD be a reference to a definitional resource (for example, a location type, rather than a specific location).
   */
  typeReference?: Reference | undefined;
}
/**
 * Relationship to another action
 */
export interface RequestOrchestrationActionRelatedAction extends BackboneElement {
  /**
   * The relationship of the end of this action to the related action.
   */
  endRelationship?: ('before'|'before-start'|'before-end'|'concurrent'|'concurrent-with-start'|'concurrent-with-end'|'after'|'after-start'|'after-end') | undefined;
  _endRelationship?: Element | undefined;
  /**
   * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
   */
  offsetDuration?: Duration | undefined;
  /**
   * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
   */
  offsetRange?: Range | undefined;
  /**
   * The relationship of this action to the related action.
   */
  relationship: ('before'|'before-start'|'before-end'|'concurrent'|'concurrent-with-start'|'concurrent-with-end'|'after'|'after-start'|'after-end');
  _relationship?: Element | undefined;
  /**
   * The element id of the target related action.
   */
  targetId: string;
  _targetId?: Element | undefined;
}
/**
 * Proposed actions, if any
 */
export interface RequestOrchestrationAction extends BackboneElement {
  /**
   * Sub actions.
   */
  action?: RequestOrchestrationAction[] | undefined;
  /**
   * Defines whether the action can be selected multiple times.
   */
  cardinalityBehavior?: ('single'|'multiple') | undefined;
  _cardinalityBehavior?: Element | undefined;
  /**
   * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template.
   */
  code?: CodeableConcept[] | undefined;
  /**
   * An expression that describes applicability criteria, or start/stop conditions for the action.
   * When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
   */
  condition?: RequestOrchestrationActionCondition[] | undefined;
  /**
   * A reference to an ActivityDefinition that describes the action to be taken in detail, a PlanDefinition that describes a series of actions to be taken, a Questionnaire that should be filled out, a SpecimenDefinition describing a specimen to be collected, or an ObservationDefinition that specifies what observation should be captured.
   * Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.
   */
  definitionstring?: string | undefined;
  _definitionstring?: Element | undefined;
  /**
   * A short description of the action used to provide a summary to display to the user.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
   */
  documentation?: RelatedArtifact[] | undefined;
  /**
   * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
   * Dynamic values are applied in the order in which they are defined in the RequestOrchestration resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
   */
  dynamicValue?: RequestOrchestrationActionDynamicValue[] | undefined;
  /**
   * Goals that are intended to be achieved by following the requests in this action.
   */
  goal?: Reference[] | undefined;
  /**
   * Defines the grouping behavior for the action and its children.
   */
  groupingBehavior?: ('visual-group'|'logical-group'|'sentence-group') | undefined;
  _groupingBehavior?: Element | undefined;
  /**
   * Defines input data requirements for the action.
   */
  input?: RequestOrchestrationActionInput[] | undefined;
  /**
   * The linkId of the action from the PlanDefinition that corresponds to this action in the RequestOrchestration resource.
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * Identifies the facility where the action will occur; e.g. home, hospital, specific clinic, etc.
   * May reference a specific clinical location or may just identify a type of location.
   */
  location?: CodeableReference | undefined;
  /**
   * Defines the outputs of the action, if any.
   */
  output?: RequestOrchestrationActionOutput[] | undefined;
  /**
   * The participant that should perform or be responsible for this action.
   * Because request orchestrations represent potential options for performing activities, some specific participants may still be unknown, so this element allows for both definitional participants (in the same way they are specified in ActivityDefinition and PlanDefinition resources) as well as identifying specific participants when they are known.
   */
  participant?: RequestOrchestrationActionParticipant[] | undefined;
  /**
   * Defines whether the action should usually be preselected.
   */
  precheckBehavior?: ('yes'|'no') | undefined;
  _precheckBehavior?: Element | undefined;
  /**
   * A user-visible prefix for the action. For example a section or item numbering such as 1. or A.
   */
  prefix?: string | undefined;
  _prefix?: Element | undefined;
  /**
   * Indicates how quickly the action should be addressed with respect to other actions.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * A relationship to another action such as "before" or "30-60 minutes after start of".
   */
  relatedAction?: RequestOrchestrationActionRelatedAction[] | undefined;
  /**
   * Defines expectations around whether an action is required.
   */
  requiredBehavior?: ('must'|'could'|'must-unless-documented') | undefined;
  _requiredBehavior?: Element | undefined;
  /**
   * The resource that is the target of the action (e.g. CommunicationRequest).
   * The target resource SHALL be a [Request](request.html) resource with a Request.intent set to "option".
   */
  resource?: Reference | undefined;
  /**
   * Defines the selection behavior for the action and its children.
   */
  selectionBehavior?: ('any'|'all'|'all-or-none'|'exactly-one'|'at-most-one'|'one-or-more') | undefined;
  _selectionBehavior?: Element | undefined;
  /**
   * A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
   */
  textEquivalent?: string | undefined;
  _textEquivalent?: Element | undefined;
  /**
   * An optional value describing when the action should be performed.
   * The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
   */
  timingAge?: Age | undefined;
  /**
   * An optional value describing when the action should be performed.
   * The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
   */
  timingstring?: string | undefined;
  _timingstring?: Element | undefined;
  /**
   * An optional value describing when the action should be performed.
   * The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
   */
  timingDuration?: Duration | undefined;
  /**
   * An optional value describing when the action should be performed.
   * The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
   */
  timingPeriod?: Period | undefined;
  /**
   * An optional value describing when the action should be performed.
   * The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
   */
  timingRange?: Range | undefined;
  /**
   * An optional value describing when the action should be performed.
   * The intent of the timing element is to provide timing for when the action should be performed. The timing may be absolute (specified as a dateTime or Period) or relative (specified as an Age, Duration, or Range), or it may be a more complex, potentially repeating timing specified using Timing.
   */
  timingTiming?: Timing | undefined;
  /**
   * The title of the action displayed to a user.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
   * Note that when a referenced ActivityDefinition also defines a transform, the transform specified here generally takes precedence. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
   */
  transform?: string | undefined;
  _transform?: Element | undefined;
  /**
   * The type of action to perform (create, update, remove).
   */
  type?: CodeableConcept | undefined;
}
export interface RequestOrchestration extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RequestOrchestration';
  /**
   * The actions, if any, produced by the evaluation of the artifact.
   */
  action?: RequestOrchestrationAction[] | undefined;
  /**
   * Provides a reference to the author of the request orchestration.
   */
  author?: Reference | undefined;
  /**
   * Indicates when the request orchestration was created.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this request.
   */
  basedOn?: Reference[] | undefined;
  /**
   * A code that identifies what the overall request orchestration is.
   * This element can be used to provide a code that captures the meaning of the request orchestration as a whole, as opposed to the code of the action element, which captures the meaning of the individual actions within the request orchestration.
   */
  code?: CodeableConcept | undefined;
  /**
   * Describes the context of the request orchestration, if any.
   */
  encounter?: Reference | undefined;
  /**
   * Goals that are intended to be achieved by following the requests in this RequestOrchestration.
   */
  goal?: Reference[] | undefined;
  /**
   * A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
   * Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition.  Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
   */
  groupIdentifier?: Identifier | undefined;
  /**
   * Allows a service to provide a unique, business identifier for the request.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A canonical URL referencing a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
   */
  instantiatesCanonical?: string[] | undefined;
  _instantiatesCanonical?: Element[] | undefined;
  /**
   * A URL referencing an externally defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
   */
  instantiatesUri?: string[] | undefined;
  _instantiatesUri?: Element[] | undefined;
  /**
   * Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain.
   */
  intent: ('proposal'|'plan'|'directive'|'order'|'original-order'|'reflex-order'|'filler-order'|'instance-order'|'option');
  _intent?: Element | undefined;
  /**
   * Provides a mechanism to communicate additional information about the response.
   */
  note?: Annotation[] | undefined;
  /**
   * Indicates how quickly the request should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * Describes the reason for the request orchestration in coded or textual form.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * Completed or terminated request(s) whose function is taken by this new request.
   * The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
   */
  replaces?: Reference[] | undefined;
  /**
   * The current state of the request. For request orchestrations, the status reflects the status of all the requests in the orchestration.
   */
  status: ('draft'|'active'|'on-hold'|'revoked'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The subject for which the request orchestration was created.
   */
  subject?: Reference | undefined;
}
/**
 * Actual statement as markdown
 */
export interface RequirementsStatement extends BackboneElement {
  /**
   * This boolean flag is set to true of the text of the requirement is conditional on something e.g. it includes lanauage like 'if x then y'. This conditionality flag is introduced for purposes of filtering and colour highlighting etc.
   * There is no intent that the conditional statement by evaluatable
   */
  conditionality?: boolean | undefined;
  _conditionality?: Element | undefined;
  /**
   * A short human usable label for this statement.
   * The conformance code is extracted from the requirement to make indexing and display easier. The requirement needs to express the conformance verbs directly in the markdown content. It's not unusual to mix verbs in a single sentence (e.g. System SHALL do X and SHOULD do Y)
   */
  conformance?: ('SHALL'|'SHOULD'|'MAY'|'SHOULD-NOT')[] | undefined;
  _conformance?: Element[] | undefined;
  /**
   * Another statement on one of the requirements that this requirement clarifies or restricts.
   * This can be just a key, if there is only one matching statement in the requirements statements referenced in Requirements.derivedFrom. If there is more than one, it should be in the format ```url#key```
   */
  derivedFrom?: string | undefined;
  _derivedFrom?: Element | undefined;
  /**
   * Key that identifies this statement (unique within this resource).
   * Refer directly to the statement by {url}#{key}
   */
  key: string;
  _key?: Element | undefined;
  /**
   * A short human usable label for this statement.
   * The key is intended for computers, while this is intended for humans. In its absence, the key should be convenient for a human to say (e.g. not a UUID)
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * A larger requirement that this requirement helps to refine and enable.
   * Follows the same convention as statement.derivedFrom, where a reference is the canonical of the Requirements followed by '#' and the 'key' of the specific requirement.
   */
  parent?: string | undefined;
  _parent?: Element | undefined;
  /**
   * A reference to another artifact that created this requirement. This could be a Profile, etc., or external regulation, or business requirements expressed elsewhere.
   */
  reference?: string[] | undefined;
  _reference?: Element[] | undefined;
  /**
   * The actual requirement for human consumption.
   */
  requirement: string;
  _requirement?: Element | undefined;
  /**
   * A reference to another artifact that satisfies this requirement. This could be a Profile, extension, or an element in one of those, or a CapabilityStatement, OperationDefinition, SearchParameter, CodeSystem(/code), ValueSet, Libary etc.
   * This is for use when the requirement is met be a pre-existing artifact e.g. a rule that's met by the base FHIR spec, or a national implementation guide.
   */
  satisfiedBy?: string[] | undefined;
  _satisfiedBy?: Element[] | undefined;
  /**
   * Who asked for this statement to be a requirement. By default, it's assumed that the publisher knows who it is if it matters.
   */
  source?: Reference[] | undefined;
}
export interface Requirements extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Requirements';
  /**
   * An actor these requirements are in regard to.
   * If more than one actor is specified, then it's up to the statements to describe in narrative if they don't apply to all actors.
   */
  actor?: string[] | undefined;
  _actor?: Element[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the Requirements and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the Requirements.
   * ...
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the Requirements was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the Requirements changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the Requirements. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Another set of Requirements that this set of Requirements builds on and updates.
   * Existing statements (by key) may be narrowed or clarified, and additional statements added.
   */
  derivedFrom?: string[] | undefined;
  _derivedFrom?: Element[] | undefined;
  /**
   * A free text natural language description of the requirements.
   * This description can be used for a general description of the requirements, and which covers why it was defined.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A Boolean value to indicate that this Requirements is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of Requirements that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this Requirements when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the Requirements is intended to be used.
   * It may be possible for the Requirements to be used in jurisdictions other than those for which it was originally designed or intended
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.).
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A natural language name identifying the Requirements. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the Requirements.
   * Usually an organization but may be an individual. The publisher (or steward) of the Requirements is the organization or individual primarily responsible for the maintenance and upkeep of the Requirements. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the Requirements. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this Requirements is needed and why it has been designed as it has.
   * This element does not describe the usage of the Requirements. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this Requirements.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * A reference to another artifact that created this set of requirements. This could be a Profile, etc., or external regulation, or business requirements expressed elsewhere.
   */
  reference?: string[] | undefined;
  _reference?: Element[] | undefined;
  /**
   * The actual statement of requirement, in markdown format.
   */
  statement?: RequirementsStatement[] | undefined;
  /**
   * The status of this Requirements. Enables tracking the life-cycle of the content.
   * Allows filtering of Requirements that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the Requirements.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this Requirements when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this Requirements is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the Requirements is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate Requirements instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the Requirements when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Requirements author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different Requirements instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the Requirements with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Sponsors, collaborators, and other parties
 * For a Sponsor or a PrincipalInvestigator use the dedicated attributes provided.
 */
export interface ResearchStudyAssociatedParty extends BackboneElement {
  /**
   * A categorization other than role for the associated party.
   */
  classifier?: CodeableConcept[] | undefined;
  /**
   * Name of associated party.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Individual or organization associated with study (use practitionerRole to specify their organisation).
   * Suggestions of a better attribute name are appreciated
   */
  party?: Reference | undefined;
  /**
   * Identifies the start date and the end date of the associated party in the role.
   * The cardinality is 0..* due to the fact that an associated party may be intermittently active in a given role over multiple time periods.
   */
  period?: Period[] | undefined;
  /**
   * Type of association.
   */
  role: CodeableConcept;
}
/**
 * Defined path through the study for a subject
 * In many clinical trials this is refered to as the ARM of the study, but such a term is not used in other sorts of trials even when there is a comparison between two or more groups.
 */
export interface ResearchStudyComparisonGroup extends BackboneElement {
  /**
   * A succinct description of the path through the study that would be followed by a subject adhering to this comparisonGroup.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Interventions or exposures in this comparisonGroup or cohort.
   */
  intendedExposure?: Reference[] | undefined;
  /**
   * Allows the comparisonGroup for the study and the comparisonGroup for the subject to be linked easily.
   */
  linkId?: string | undefined;
  _linkId?: Element | undefined;
  /**
   * Unique, human-readable label for this comparisonGroup of the study.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Group of participants who were enrolled in study comparisonGroup.
   */
  observedGroup?: Reference | undefined;
  /**
   * Categorization of study comparisonGroup, e.g. experimental, active comparator, placebo comparater.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Additional names for the study
 */
export interface ResearchStudyLabel extends BackboneElement {
  /**
   * Kind of name.
   */
  type?: CodeableConcept | undefined;
  /**
   * The name.
   */
  value?: string | undefined;
  _value?: Element | undefined;
}
/**
 * A goal for the study
 */
export interface ResearchStudyObjective extends BackboneElement {
  /**
   * Free text description of the objective of the study.  This is what the study is trying to achieve rather than how it is going to achieve it (see ResearchStudy.description).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Unique, human-readable label for this objective of the study.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The kind of study objective.
   */
  type?: CodeableConcept | undefined;
}
/**
 * A variable measured during the study
 * A study may have multiple distinct outcome measures that can be used to assess the overall goal for a study. The goal of a study is in the objective whereas the metric by which the goal is assessed is the outcomeMeasure. Examples: Time to Local Recurrence (TLR), Disease-free Survival (DFS), 30 Day Mortality, Systolic BP
 */
export interface ResearchStudyOutcomeMeasure extends BackboneElement {
  /**
   * Description of the outcome.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Label for the outcome.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Structured outcome definition.
   */
  reference?: Reference | undefined;
  /**
   * The parameter or characteristic being assessed as one of the values by which the study is assessed.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Status of study with time for that status
 */
export interface ResearchStudyProgressStatus extends BackboneElement {
  /**
   * An indication of whether or not the date is a known date when the state changed or will change. A value of true indicates a known date. A value of false indicates an estimated date.
   */
  actual?: boolean | undefined;
  _actual?: Element | undefined;
  /**
   * Date range.
   */
  period?: Period | undefined;
  /**
   * Label for status or state (e.g. recruitment status).
   */
  state: CodeableConcept;
}
/**
 * Target or actual group of participants enrolled in study
 */
export interface ResearchStudyRecruitment extends BackboneElement {
  /**
   * Group of participants who were enrolled in study.
   */
  actualGroup?: Reference | undefined;
  /**
   * Actual total number of participants enrolled in study.
   */
  actualNumber?: number | undefined;
  /**
   * Inclusion and exclusion criteria.
   */
  eligibility?: Reference | undefined;
  /**
   * Estimated total number of participants to be enrolled.
   */
  targetNumber?: number | undefined;
}
/**
 * Need to make sure we encompass public health studies.
 */
export interface ResearchStudy extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ResearchStudy';
  /**
   * Sponsors, collaborators, and other parties.
   * For a Sponsor or a PrincipalInvestigator use the dedicated attributes provided.
   */
  associatedParty?: ResearchStudyAssociatedParty[] | undefined;
  /**
   * Additional grouping mechanism or categorization of a research study. Example: FDA regulated device, FDA regulated drug, MPG Paragraph 23b (a German legal requirement), IRB-exempt, etc. Implementation Note: do not use the classifier element to support existing semantics that are already supported thru explicit elements in the resource.
   */
  classifier?: CodeableConcept[] | undefined;
  /**
   * Describes an expected event or sequence of events for one of the subjects of a study. E.g. for a living subject: exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up. E.g. for a stability study: {store sample from lot A at 25 degrees for 1 month}, {store sample from lot A at 40 degrees for 1 month}.
   * In many clinical trials this is refered to as the ARM of the study, but such a term is not used in other sorts of trials even when there is a comparison between two or more groups.
   */
  comparisonGroup?: ResearchStudyComparisonGroup[] | undefined;
  /**
   * The condition that is the focus of the study.  For example, In a study to examine risk factors for Lupus, might have as an inclusion criterion "healthy volunteer", but the target condition code would be a Lupus SNOMED code.
   */
  condition?: CodeableConcept[] | undefined;
  /**
   * The date (and optionally time) when the ResearchStudy Resource was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the ResearchStudy Resource changes.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A detailed and human-readable narrative of the study. E.g., study abstract.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A brief text for explaining the study.
   */
  descriptionSummary?: string | undefined;
  _descriptionSummary?: Element | undefined;
  /**
   * The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.
   */
  focus?: CodeableReference[] | undefined;
  /**
   * Identifiers assigned to this research study by the sponsor or other systems.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Key terms to aid in searching for or filtering the study.
   */
  keyword?: CodeableConcept[] | undefined;
  /**
   * Additional names for the study.
   */
  label?: ResearchStudyLabel[] | undefined;
  /**
   * Name for this study (computer friendly).
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Comments made about the study by the performer, subject or other participants.
   */
  note?: Annotation[] | undefined;
  /**
   * A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
   */
  objective?: ResearchStudyObjective[] | undefined;
  /**
   * An "outcome measure", "endpoint", "effect measure" or "measure of effect" is a specific measurement or observation used to quantify the effect of experimental variables on the participants in a study, or for observational studies, to describe patterns of diseases or traits or associations with exposures, risk factors or treatment.
   * A study may have multiple distinct outcome measures that can be used to assess the overall goal for a study. The goal of a study is in the objective whereas the metric by which the goal is assessed is the outcomeMeasure. Examples: Time to Local Recurrence (TLR), Disease-free Survival (DFS), 30 Day Mortality, Systolic BP
   */
  outcomeMeasure?: ResearchStudyOutcomeMeasure[] | undefined;
  /**
   * A larger research study of which this particular study is a component or step.
   */
  partOf?: Reference[] | undefined;
  /**
   * Identifies the start date and the expected (or actual, depending on status) end date for the study.
   */
  period?: Period | undefined;
  /**
   * The stage in the progression of a therapy from initial experimental use in humans in clinical trials to post-market evaluation.
   */
  phase?: CodeableConcept | undefined;
  /**
   * The type of study based upon the intent of the study activities. A classification of the intent of the study.
   */
  primaryPurposeType?: CodeableConcept | undefined;
  /**
   * Status of study with time for that status.
   */
  progressStatus?: ResearchStudyProgressStatus[] | undefined;
  /**
   * The set of steps expected to be performed as part of the execution of the study.
   */
  protocol?: Reference[] | undefined;
  /**
   * Target or actual group of participants enrolled in study.
   */
  recruitment?: ResearchStudyRecruitment | undefined;
  /**
   * A country, state or other area where the study is taking place rather than its precise geographic location or address.
   */
  region?: CodeableConcept[] | undefined;
  /**
   * Citations, references, URLs and other related documents.  When using relatedArtifact to share URLs, the relatedArtifact.type will often be set to one of "documentation" or "supported-with" and the URL value will often be in relatedArtifact.document.url but another possible location is relatedArtifact.resource when it is a canonical URL.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * Link to one or more sets of results generated by the study.  Could also link to a research registry holding the results such as ClinicalTrials.gov.
   */
  result?: Reference[] | undefined;
  /**
   * A facility in which study activities are conducted.
   */
  site?: Reference[] | undefined;
  /**
   * The publication state of the resource (not of the study).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc.
   */
  studyDesign?: CodeableConcept[] | undefined;
  /**
   * The human readable name of the research study.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Canonical identifier for this study resource, represented as a globally unique URI.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The business version for the study record.
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * A description and/or code explaining the premature termination of the study.
   */
  whyStopped?: CodeableConcept | undefined;
}
/**
 * Subject status
 * This is intended to deal with the confusion routinely created by haing two conflated concepts of being in a particular state and having achieved a particular milestone.  In strict terms a milestone is a point of time event that results in a change from one state to another.  The state before the milestone is achieved is often given the same name as the milestone, and sometimes the state may have the same description.  For instance "Randomised" and "Visit 1" may be different milestones but the state remains at "on study" after each of them. 
 * It is likely that more than one "state" pattern will be recorded for a subject and a type has been introduced to allow this simultaneous recording.
 */
export interface ResearchSubjectProgress extends BackboneElement {
  /**
   * The date when the state ended.
   */
  endDate?: string | undefined;
  _endDate?: Element | undefined;
  /**
   * The milestones the subject has passed through.
   * There can be multiple entries but it is also valid to just have the most recent.  This should npt be rlied upon as the full path the subject has taken.
   */
  milestone?: CodeableConcept | undefined;
  /**
   * The reason for the state change.  If coded it should follow the formal subject state model.
   */
  reason?: CodeableConcept | undefined;
  /**
   * The date when the new status started.
   * This is NOT the date the change in state was recorded.
   */
  startDate?: string | undefined;
  _startDate?: Element | undefined;
  /**
   * The current state of the subject.
   */
  subjectState?: ('candidate'|'eligible'|'follow-up'|'ineligible'|'not-registered'|'off-study'|'on-study'|'on-study-intervention'|'on-study-observation'|'pending-on-study'|'potential-candidate'|'screening'|'withdrawn') | undefined;
  /**
   * Identifies the aspect of the subject's journey that the state refers to.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Need to make sure we encompass public health studies.
 */
export interface ResearchSubject extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ResearchSubject';
  /**
   * The name of the arm in the study the subject actually followed as part of this study.
   */
  actualComparisonGroup?: string | undefined;
  _actualComparisonGroup?: Element | undefined;
  /**
   * The name of the arm in the study the subject is expected to follow as part of this study.
   * Maybe this is really PlanDefinition.
   */
  assignedComparisonGroup?: string | undefined;
  _assignedComparisonGroup?: Element | undefined;
  /**
   * A record of the patient's informed agreement to participate in the study.
   */
  consent?: Reference[] | undefined;
  /**
   * Identifiers assigned to this research subject for a study.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The dates the subject began and ended their participation in the study.
   */
  period?: Period | undefined;
  /**
   * The current state (status) of the subject and resons for status change where appropriate.
   * This is intended to deal with the confusion routinely created by haing two conflated concepts of being in a particular state and having achieved a particular milestone.  In strict terms a milestone is a point of time event that results in a change from one state to another.  The state before the milestone is achieved is often given the same name as the milestone, and sometimes the state may have the same description.  For instance "Randomised" and "Visit 1" may be different milestones but the state remains at "on study" after each of them. 
   * It is likely that more than one "state" pattern will be recorded for a subject and a type has been introduced to allow this simultaneous recording.
   */
  progress?: ResearchSubjectProgress[] | undefined;
  /**
   * The publication state of the resource (not of the subject).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * Reference to the study the subject is participating in.
   */
  study: Reference;
  /**
   * The record of the person, animal or other entity involved in the study.
   */
  subject: Reference;
}
export interface Resource extends Base {
  /** Resource Type Name (for serialization) */
  readonly resourceType: string;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   * Within the context of the FHIR RESTful interactions, the resource has an id except for cases like the create and conditional update. Otherwise, the use of the resouce id depends on the given use case.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
   * Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. Often, when used, the URL is a reference to an implementation guide that defines these special rules as part of its narrative along with other profiles, value sets, etc.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   * Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
}
/**
 * Outcome predicted
 * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
 */
export interface RiskAssessmentPrediction extends BackboneElement {
  /**
   * One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
   */
  outcome?: CodeableConcept | undefined;
  /**
   * Indicates how likely the outcome is (in the specified timeframe).
   * If range is used, it represents the lower and upper bounds of certainty; e.g. 40-60%  Decimal values are expressed as percentages as well (max = 100).
   */
  probabilitynumber?: number | undefined;
  /**
   * Indicates how likely the outcome is (in the specified timeframe).
   * If range is used, it represents the lower and upper bounds of certainty; e.g. 40-60%  Decimal values are expressed as percentages as well (max = 100).
   */
  probabilityRange?: Range | undefined;
  /**
   * Indicates how likely the outcome is (in the specified timeframe), expressed as a qualitative value (e.g. low, medium, or high).
   */
  qualitativeRisk?: CodeableConcept | undefined;
  /**
   * Additional information explaining the basis for the prediction.
   */
  rationale?: string | undefined;
  _rationale?: Element | undefined;
  /**
   * Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.).
   */
  relativeRisk?: number | undefined;
  /**
   * Indicates the period of time or age range of the subject to which the specified probability applies.
   * If not specified, the risk applies "over the subject's lifespan".
   */
  whenPeriod?: Period | undefined;
  /**
   * Indicates the period of time or age range of the subject to which the specified probability applies.
   * If not specified, the risk applies "over the subject's lifespan".
   */
  whenRange?: Range | undefined;
}
export interface RiskAssessment extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RiskAssessment';
  /**
   * A reference to the request that is fulfilled by this risk assessment.
   */
  basedOn?: Reference | undefined;
  /**
   * Indicates the source data considered as part of the assessment (for example, FamilyHistory, Observations, Procedures, Conditions, etc.).
   */
  basis?: Reference[] | undefined;
  /**
   * The type of the risk assessment performed.
   */
  code?: CodeableConcept | undefined;
  /**
   * For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
   */
  condition?: Reference | undefined;
  /**
   * The encounter where the assessment was performed.
   */
  encounter?: Reference | undefined;
  /**
   * Business identifier assigned to the risk assessment.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The algorithm, process or mechanism used to evaluate the risk.
   */
  method?: CodeableConcept | undefined;
  /**
   * A description of the steps that might be taken to reduce the identified risk(s).
   */
  mitigation?: string | undefined;
  _mitigation?: Element | undefined;
  /**
   * Additional comments about the risk assessment.
   */
  note?: Annotation[] | undefined;
  /**
   * The date (and possibly time) the risk assessment was performed.
   */
  occurrencestring?: string | undefined;
  _occurrencestring?: Element | undefined;
  /**
   * The date (and possibly time) the risk assessment was performed.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * A reference to a resource that this risk assessment is part of, such as a Procedure.
   */
  parent?: Reference | undefined;
  /**
   * The provider, patient, related person, or software application that performed the assessment.
   */
  performer?: Reference | undefined;
  /**
   * Describes the expected outcome for the subject.
   * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
   */
  prediction?: RiskAssessmentPrediction[] | undefined;
  /**
   * The reason the risk assessment was performed.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * The status of the RiskAssessment, using the same statuses as an Observation.
   */
  status: ('registered'|'preliminary'|'final'|'amended'|'corrected'|'cancelled'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The patient or group the risk assessment applies to.
   */
  subject: Reference;
}
export interface Schedule extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Schedule';
  /**
   * Whether this schedule record is in active use or should not be used (such as was entered in error).
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Slots that reference this schedule resource provide the availability details to these referenced resource(s).
   * The capacity to support multiple referenced resource types should be used in cases where the specific resources themselves cannot be scheduled without the other, and thus only make sense to the system exposing them as a group. Common examples of this are where the combination of a practitioner and a room (Location) are always required by a system.
   */
  actor: Reference[];
  /**
   * Comments on the availability to describe any extended information. Such as custom constraints on the slots that may be associated.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * External Ids for this item.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Further description of the schedule as it would be presented to a consumer while searching.
   * This MAY be used to describe what the schedule is for where it is clearer than just the name of the single actor.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The period of time that the slots that reference this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
   */
  planningHorizon?: Period | undefined;
  /**
   * A broad categorization of the service that is to be performed during this appointment.
   */
  serviceCategory?: CodeableConcept[] | undefined;
  /**
   * The specific service that is to be performed during this appointment.
   */
  serviceType?: CodeableReference[] | undefined;
  /**
   * The specialty of a practitioner that would be required to perform the service requested in this appointment.
   */
  specialty?: CodeableConcept[] | undefined;
}
/**
 * For Composite resources to define the parts
 */
export interface SearchParameterComponent extends BackboneElement {
  /**
   * The definition of the search parameter that describes this part.
   */
  definition: string;
  _definition?: Element | undefined;
  /**
   * A sub-expression that defines how to extract values for this component from the output of the main SearchParameter.expression.
   * This expression overrides the expression in the definition and extracts the index values from the outcome of the composite expression.
   */
  expression: string;
  _expression?: Element | undefined;
}
/**
 * In FHIR, search is not performed directly on a resource (by XML or JSON path), but on a named parameter that maps into the resource content.
 */
export interface SearchParameter extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SearchParameter';
  /**
   * The base resource type(s) that this search parameter can be used against.
   * A search parameter must always apply to at least one resource type. When search parameters apply to more than one resource type, they can be used against any of the listed resource types, or in a cross-type search (see [Cross Resource Search](http.html#xres-search)).
   */
  base: ('Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'Bundle'|'CanonicalResource'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'DomainResource'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MetadataResource'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription'|'BodySite'|'CatalogEntry'|'Conformance'|'DataElement'|'DeviceComponent'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DocumentManifest'|'EffectEvidenceSynthesis'|'EligibilityRequest'|'EligibilityResponse'|'ExpansionProfile'|'ImagingManifest'|'ImagingObjectSelection'|'Media'|'MedicationOrder'|'MedicationUsage'|'MedicinalProduct'|'MedicinalProductAuthorization'|'MedicinalProductContraindication'|'MedicinalProductIndication'|'MedicinalProductIngredient'|'MedicinalProductInteraction'|'MedicinalProductManufactured'|'MedicinalProductPackaged'|'MedicinalProductPharmaceutical'|'MedicinalProductUndesirableEffect'|'Order'|'OrderResponse'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'ReferralRequest'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'RiskEvidenceSynthesis'|'Sequence'|'ServiceDefinition'|'SubstanceSpecification')[];
  _base?: Element[] | undefined;
  /**
   * Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from SearchParameter.code for a parameter on the target resource type.
   * Notes:
   * * Not all systems will declare chain values.  If no chain values are specified at all, then no presumptions can be made about the degree of chaining support available
   * * A server may use a single chain value of '*' to mean that all reference search types supported can be chained rather than enumerating all chain values
   * *  If a particular reference search parameter is supported, but not subsequent chaining, then just list that search parameter name - e.g. for Patient.practitioner, the chain value would be ```practitioner```
   * * If a particular reference search parameter is supported with unlimited chaining beneath it, then follow the search parameter name with '.'.  E.g. ```practitioner.```
   * * If there are specific (not unlimited) chaining paths allowed they can be explicitly enumerated.  E.g. ```practitioner.organization```
   */
  chain?: string[] | undefined;
  _chain?: Element[] | undefined;
  /**
   * The label that is recommended to be used in the URL or the parameter name in a parameters resource for this search parameter.  In some cases, servers may need to use a different CapabilityStatement searchParam.name to differentiate between multiple SearchParameters that happen to have the same code.
   * For maximum compatibility, use only lowercase ASCII characters. Note that HL7 will never define multiple search parameters with the same code.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Comparators supported for the search parameter.
   * If no comparators are listed, clients should not expect servers to support any comparators.
   */
  comparator?: ('eq'|'ne'|'gt'|'lt'|'ge'|'le'|'sa'|'eb'|'ap')[] | undefined;
  _comparator?: Element[] | undefined;
  /**
   * Used to define the parts of a composite search parameter.
   */
  component?: SearchParameterComponent[] | undefined;
  /**
   * FHIRPath expression that defines/sets a complex constraint for when this SearchParameter is applicable.
   */
  constraint?: string | undefined;
  _constraint?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the search parameter and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the search parameter.
   * ...
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the search parameter was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the search parameter. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Where this search parameter is originally defined. If a derivedFrom is provided, then the details in the search parameter must be consistent with the definition from which it is defined. i.e. the parameter should have the same meaning, and (usually) the functionality should be a proper subset of the underlying search parameter.
   * The intent of this is that a server can designate that it provides support for a search parameter defined in the specification itself (e.g.  [`value-quantity`](http://hl7.org/fhir/SearchParameter/Observation-value-quantity), but detail how it is supported by the server.
   */
  derivedFrom?: string | undefined;
  _derivedFrom?: Element | undefined;
  /**
   * And how it used.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the search parameter as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the search parameter is presumed to be the predominant language in the place the search parameter was created).
   */
  description: string;
  _description?: Element | undefined;
  /**
   * A Boolean value to indicate that this search parameter is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of search parameters that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A FHIRPath expression that returns a set of elements for the search parameter.
   * Note that the elements returned by the expression are sometimes complex elements where logic is required to determine quite how to handle them; e.g. CodeableConcepts may contain text and/or multiple codings, where the codings themselves contain a code and a system. For composite search parameters, the outcome of the expression must a collection of base elements from which the composites are derived.
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * A formal identifier that is used to identify this search parameter when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the search parameter is intended to be used.
   * It may be possible for the search parameter to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A modifier supported for the search parameter.
   */
  modifier?: ('missing'|'exact'|'contains'|'not'|'text'|'in'|'not-in'|'below'|'above'|'type'|'identifier'|'of-type'|'code-text'|'text-advanced'|'iterate')[] | undefined;
  _modifier?: Element[] | undefined;
  /**
   * Whether multiple parameters are allowed - e.g. more than one parameter with the same name. The search matches if all the parameters match.
   */
  multipleAnd?: boolean | undefined;
  _multipleAnd?: Element | undefined;
  /**
   * Whether multiple values are allowed for each time the parameter exists. Values are separated by commas, and the parameter matches if any of the values match.
   */
  multipleOr?: boolean | undefined;
  _multipleOr?: Element | undefined;
  /**
   * A natural language name identifying the search parameter. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * How the search parameter relates to the set of elements returned by evaluating the expression query.
   */
  processingMode?: ('normal'|'phonetic'|'other') | undefined;
  _processingMode?: Element | undefined;
  /**
   * The name of the organization or individual tresponsible for the release and ongoing maintenance of the search parameter.
   * Usually an organization but may be an individual. The publisher (or steward) of the search parameter is the organization or individual primarily responsible for the maintenance and upkeep of the search parameter. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the search parameter. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this search parameter is needed and why it has been designed as it has.
   * This element does not describe the usage of the search parameter. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this search parameter.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The status of this search parameter. Enables tracking the life-cycle of the content.
   * Allows filtering of search parameters that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * Types of resource (if a resource is referenced).
   * In some cases, targets may exist for a search parameter that do not exist for the specified FHIRPath for all of the resources identified in SearchParameter.base.  For example, the core clinical-encounter search parameter allows both Encounter and EpisodeOfCare as targets, even though not all of the base resources have EpisodeOfCare as a valid target.
   * However, the list of targets SHOULD cover all targets that might appear that are permitted by the specified FHIRPath.
   */
  target?: ('Account'|'ActivityDefinition'|'ActorDefinition'|'AdministrableProductDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'ArtifactAssessment'|'AuditEvent'|'Basic'|'Binary'|'BiologicallyDerivedProduct'|'BiologicallyDerivedProductDispense'|'BodyStructure'|'Bundle'|'CanonicalResource'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'ChargeItemDefinition'|'Citation'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'ClinicalUseDefinition'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'ConditionDefinition'|'Consent'|'Contract'|'Coverage'|'CoverageEligibilityRequest'|'CoverageEligibilityResponse'|'DetectedIssue'|'Device'|'DeviceAssociation'|'DeviceDefinition'|'DeviceDispense'|'DeviceMetric'|'DeviceRequest'|'DeviceUsage'|'DiagnosticReport'|'DocumentReference'|'DomainResource'|'Encounter'|'EncounterHistory'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'EventDefinition'|'Evidence'|'EvidenceReport'|'EvidenceVariable'|'ExampleScenario'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'FormularyItem'|'GenomicStudy'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingSelection'|'ImagingStudy'|'Immunization'|'ImmunizationEvaluation'|'ImmunizationRecommendation'|'ImplementationGuide'|'Ingredient'|'InsurancePlan'|'InventoryItem'|'InventoryReport'|'Invoice'|'Library'|'Linkage'|'List'|'Location'|'ManufacturedItemDefinition'|'Measure'|'MeasureReport'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationKnowledge'|'MedicationRequest'|'MedicationStatement'|'MedicinalProductDefinition'|'MessageDefinition'|'MessageHeader'|'MetadataResource'|'MolecularSequence'|'NamingSystem'|'NutritionIntake'|'NutritionOrder'|'NutritionProduct'|'Observation'|'ObservationDefinition'|'OperationDefinition'|'OperationOutcome'|'Organization'|'OrganizationAffiliation'|'PackagedProductDefinition'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Permission'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'RegulatedAuthorization'|'RelatedPerson'|'RequestOrchestration'|'Requirements'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'ServiceRequest'|'Slot'|'Specimen'|'SpecimenDefinition'|'StructureDefinition'|'StructureMap'|'Subscription'|'SubscriptionStatus'|'SubscriptionTopic'|'Substance'|'SubstanceDefinition'|'SubstanceNucleicAcid'|'SubstancePolymer'|'SubstanceProtein'|'SubstanceReferenceInformation'|'SubstanceSourceMaterial'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TerminologyCapabilities'|'TestPlan'|'TestReport'|'TestScript'|'Transport'|'ValueSet'|'VerificationResult'|'VisionPrescription'|'BodySite'|'CatalogEntry'|'Conformance'|'DataElement'|'DeviceComponent'|'DeviceUseRequest'|'DeviceUseStatement'|'DiagnosticOrder'|'DocumentManifest'|'EffectEvidenceSynthesis'|'EligibilityRequest'|'EligibilityResponse'|'ExpansionProfile'|'ImagingManifest'|'ImagingObjectSelection'|'Media'|'MedicationOrder'|'MedicationUsage'|'MedicinalProduct'|'MedicinalProductAuthorization'|'MedicinalProductContraindication'|'MedicinalProductIndication'|'MedicinalProductIngredient'|'MedicinalProductInteraction'|'MedicinalProductManufactured'|'MedicinalProductPackaged'|'MedicinalProductPharmaceutical'|'MedicinalProductUndesirableEffect'|'Order'|'OrderResponse'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'ReferralRequest'|'RequestGroup'|'ResearchDefinition'|'ResearchElementDefinition'|'RiskEvidenceSynthesis'|'Sequence'|'ServiceDefinition'|'SubstanceSpecification')[] | undefined;
  _target?: Element[] | undefined;
  /**
   * A short, descriptive, user-friendly title for the search parameter.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * The type of value that a search parameter may contain, and how the content is interpreted.
   */
  type: ('number'|'date'|'string'|'token'|'reference'|'composite'|'quantity'|'uri'|'special');
  _type?: Element | undefined;
  /**
   * An absolute URI that is used to identify this search parameter when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this search parameter is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the search parameter is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate search parameter instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the search parameter when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the search parameter author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different search parameter instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the search parameter with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * The parameter details for the service being requested
 */
export interface ServiceRequestOrderDetailParameter extends BackboneElement {
  /**
   * A value representing the additional detail or instructions for the order (e.g., catheter insertion, body elevation, descriptive device configuration and/or setting instructions).
   */
  code: CodeableConcept;
  /**
   * Indicates a value for the order detail.
   * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * Indicates a value for the order detail.
   * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * Indicates a value for the order detail.
   * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
   */
  valuePeriod?: Period | undefined;
  /**
   * Indicates a value for the order detail.
   * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Indicates a value for the order detail.
   * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
   */
  valueRange?: Range | undefined;
  /**
   * Indicates a value for the order detail.
   * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
   */
  valueRatio?: Ratio | undefined;
  /**
   * Indicates a value for the order detail.
   * CodeableConcept values are indented to express concepts that would normally be coded - when a code is not available for a concept, CodeableConcept.text can be used. When the data is a text or not a single identifiable concept, string should be used.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
}
/**
 * Additional order information
 * For information from the medical record intended to support the delivery of the requested services, use the `supportingInformation` element.
 */
export interface ServiceRequestOrderDetail extends BackboneElement {
  /**
   * The parameter details for the service being requested.
   */
  parameter: ServiceRequestOrderDetailParameter[];
  /**
   * Indicates the context of the order details by reference.
   */
  parameterFocus?: CodeableReference | undefined;
}
/**
 * Patient or consumer-oriented instructions
 */
export interface ServiceRequestPatientInstruction extends BackboneElement {
  /**
   * Instructions in terms that are understood by the patient or consumer.
   */
  instructionstring?: string | undefined;
  _instructionstring?: Element | undefined;
  /**
   * Instructions in terms that are understood by the patient or consumer.
   */
  instructionReference?: Reference | undefined;
}
export interface ServiceRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ServiceRequest';
  /**
   * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
   */
  asNeededboolean?: boolean | undefined;
  _asNeededboolean?: Element | undefined;
  /**
   * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
   */
  asNeededCodeableConcept?: CodeableConcept | undefined;
  /**
   * When the request transitioned to being actionable.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * Plan/proposal/order fulfilled by this request.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Anatomic location where the procedure should be performed. This is the target site.
   * Only used if not implicit in the code found in ServiceRequest.code.  If the use case requires BodySite to be handled as a separate resource instead of an inline coded element (e.g. to identify and track separately)  then use the standard extension [http://hl7.org/fhir/StructureDefinition/procedure-targetBodyStructure](http://hl7.org/fhir/extensions/StructureDefinition-procedure-targetBodyStructure.html).
   */
  bodySite?: CodeableConcept[] | undefined;
  /**
   * Anatomic location where the procedure should be performed. This is the target site.
   */
  bodyStructure?: Reference | undefined;
  /**
   * A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical Procedure").
   * There may be multiple axis of categorization depending on the context or use case for retrieving or displaying the resource.  The level of granularity is defined by the category concepts in the value set.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * A code or reference that identifies a particular service (i.e., procedure, diagnostic investigation, or panel of investigations) that have been requested.
   * Many laboratory and radiology procedure codes embed the specimen/organ system in the test order name, for example,  serum or serum/plasma glucose, or a chest x-ray. The specimen might not be recorded separately from the test code.
   */
  code?: CodeableReference | undefined;
  /**
   * Set this to true if the record is saying that the service/procedure should NOT be performed.
   * In general, only the code and timeframe will be present, though occasional additional qualifiers such as body site or even performer could be included to narrow the scope of the prohibition.  If the ServiceRequest.code and ServiceRequest.doNotPerform both contain negation, that will reinforce prohibition and should not have a double negative interpretation.
   */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;
  /**
   * An encounter that provides additional information about the healthcare context in which this request is made.
   */
  encounter?: Reference | undefined;
  /**
   * The actual focus of a service request when it is not the subject of record representing something or someone associated with the subject such as a spouse, parent, fetus, or donor. The focus of a service request could also be an existing condition,  an intervention, the subject's diet,  another service request on the subject,  or a body structure such as tumor or implanted device.
   */
  focus?: Reference[] | undefined;
  /**
   * Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.
   * The identifier.type element is used to distinguish between the identifiers assigned by the orderer (known as the 'Placer' in HL7 V2) and the producer of the observations in response to the order (known as the 'Filler' in HL7 V2).  For further discussion and examples see the resource notes section below.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
   * The PlanDefinition resource is used to describe series, sequences, or groups of actions to be taken, while the ActivityDefinition resource is used to define each specific step or activity to be performed. More information can be found in the [Boundaries and Relationships](plandefinition.html#12.23.2) section for PlanDefinition.
   */
  instantiatesCanonical?: string[] | undefined;
  _instantiatesCanonical?: Element[] | undefined;
  /**
   * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
   * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
   */
  instantiatesUri?: string[] | undefined;
  _instantiatesUri?: Element[] | undefined;
  /**
   * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
   */
  insurance?: Reference[] | undefined;
  /**
   * Whether the request is a proposal, plan, an original order or a reflex order.
   * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
   */
  intent: ('proposal'|'plan'|'directive'|'order'|'original-order'|'reflex-order'|'filler-order'|'instance-order'|'option');
  _intent?: Element | undefined;
  /**
   * The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
   */
  location?: CodeableReference[] | undefined;
  /**
   * Any other notes and comments made about the service request. For example, internal billing notes.
   */
  note?: Annotation[] | undefined;
  /**
   * The date/time at which the requested service should occur.
   */
  occurrencestring?: string | undefined;
  _occurrencestring?: Element | undefined;
  /**
   * The date/time at which the requested service should occur.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * The date/time at which the requested service should occur.
   */
  occurrenceTiming?: Timing | undefined;
  /**
   * Additional details and instructions about the how the services are to be delivered.   For example, and order for a urinary catheter may have an order detail for an external or indwelling catheter, or an order for a bandage may require additional instructions specifying how the bandage should be applied.
   * For information from the medical record intended to support the delivery of the requested services, use the `supportingInformation` element.
   */
  orderDetail?: ServiceRequestOrderDetail[] | undefined;
  /**
   * Instructions in terms that are understood by the patient or consumer.
   */
  patientInstruction?: ServiceRequestPatientInstruction[] | undefined;
  /**
   * The desired performer for doing the requested service.  For example, the surgeon, dermatopathologist, endoscopist, etc.
   * If multiple performers are present, it is interpreted as a list of *alternative* performers without any preference regardless of order.  If order of preference is needed use the [http://hl7.org/fhir/StructureDefinition/request-performerOrder](http://hl7.org/fhir/extensions/StructureDefinition-request-performerOrder.html).  Use CareTeam to represent a group of performers (for example, Practitioner A *and* Practitioner B).
   */
  performer?: Reference[] | undefined;
  /**
   * Desired type of performer for doing the requested service.
   * This is a  role, not  a participation type.  In other words, does not describe the task but describes the capacity.  For example, “compounding pharmacy”, “psychiatrist” or “internal referral”.
   */
  performerType?: CodeableConcept | undefined;
  /**
   * Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
   */
  quantityQuantity?: Quantity | undefined;
  /**
   * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
   */
  quantityRange?: Range | undefined;
  /**
   * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
   */
  quantityRatio?: Ratio | undefined;
  /**
   * An explanation or justification for why this service is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in `supportingInfo`.
   * This element represents why the referral is being made and may be used to decide how the service will be performed, or even if it will be performed at all. To be as specific as possible,  a reference to  *Observation* or *Condition* should be used if available.  Otherwise, use `concept.text` element if the data is free (uncoded) text as shown in the [CT Scan example](servicerequest-example-di.html).
   */
  reason?: CodeableReference[] | undefined;
  /**
   * Key events in the history of the request.
   * This might not include provenances for all versions of the request – only those deemed “relevant” or important.
   * This SHALL NOT include the Provenance associated with this current version of the resource.  (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update.  Until then, it can be queried directly as the Provenance that points to this version using _revinclude
   * All Provenances should have some historical version of this Request as their subject.
   */
  relevantHistory?: Reference[] | undefined;
  /**
   * The request takes the place of the referenced completed or terminated request(s).
   */
  replaces?: Reference[] | undefined;
  /**
   * The individual who initiated the request and has responsibility for its activation.
   * This not the dispatcher, but rather who is the authorizer.  This element is not intended to handle delegation which would generally be managed through the Provenance resource.
   */
  requester?: Reference | undefined;
  /**
   * A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
   * Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition. Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
   */
  requisition?: Identifier | undefined;
  /**
   * One or more specimens that the laboratory procedure will use.
   * The purpose of the ServiceRequest.specimen is to reflect the actual specimen that the requested test/procedure is asked to be performed on, whether the lab already has it or not.  References to specimens for purposes other than to perform a test/procedure on should be made using the ServiceRequest.supportingInfo or the Specimen.parent where the Specimen.parent would enable descendency and ServiceRequest.supportingInfo a general reference for context.
   */
  specimen?: Reference[] | undefined;
  /**
   * The status of the order.
   * The status is generally fully in the control of the requester - they determine whether the order is draft or active and, after it has been activated, competed, revoked or placed on-hold. States relating to the activities of the performer are reflected on either the corresponding event (see [Event Pattern](event.html) for general discussion) or using the [Task](task.html) resource.
   */
  status: ('draft'|'active'|'on-hold'|'revoked'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
   */
  subject: Reference;
  /**
   * Additional clinical information about the patient or specimen that may influence the services or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.
   * To represent information about how the services are to be delivered use the `instructions` element.
   */
  supportingInfo?: CodeableReference[] | undefined;
}
export interface Slot extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Slot';
  /**
   * The style of appointment or patient that may be booked in the slot (not service type).
   * A slot may be allow multiple appointment types, but when booked, would only be used for one of the given appointment types.
   */
  appointmentType?: CodeableConcept[] | undefined;
  /**
   * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Date/Time that the slot is to conclude.
   */
  end: string;
  _end?: Element | undefined;
  /**
   * External Ids for this item.
   */
  identifier?: Identifier[] | undefined;
  /**
   * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
   */
  overbooked?: boolean | undefined;
  _overbooked?: Element | undefined;
  /**
   * The schedule resource that this slot defines an interval of status information.
   */
  schedule: Reference;
  /**
   * A broad categorization of the service that is to be performed during this appointment.
   */
  serviceCategory?: CodeableConcept[] | undefined;
  /**
   * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the Schedule resource.
   */
  serviceType?: CodeableReference[] | undefined;
  /**
   * The specialty of a practitioner that would be required to perform the service requested in this appointment.
   */
  specialty?: CodeableConcept[] | undefined;
  /**
   * Date/Time that the slot is to begin.
   */
  start: string;
  _start?: Element | undefined;
  /**
   * busy | free | busy-unavailable | busy-tentative | entered-in-error.
   */
  status: ('busy'|'free'|'busy-unavailable'|'busy-tentative'|'entered-in-error');
  _status?: Element | undefined;
}
/**
 * Collection details
 */
export interface SpecimenCollection extends BackboneElement {
  /**
   * Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.
   * Reasons for using BodyStructure reference include: 1.) Need to identify a specific site instance (e.g. a specific mole), 2.) a single pre-coordinated coded concept for the body site does not exist, 3.) a desire to represent bodySite using multiple attributes (e.g. modifiers).
   */
  bodySite?: CodeableReference | undefined;
  /**
   * Time when specimen was collected from subject - the physiologically relevant time.
   */
  collectedstring?: string | undefined;
  _collectedstring?: Element | undefined;
  /**
   * Time when specimen was collected from subject - the physiologically relevant time.
   */
  collectedPeriod?: Period | undefined;
  /**
   * Person who collected the specimen.
   */
  collector?: Reference | undefined;
  /**
   * A coded value specifying the technique that is used to perform the procedure.
   */
  device?: CodeableReference | undefined;
  /**
   * The span of time over which the collection of a specimen occurred.
   */
  duration?: Duration | undefined;
  /**
   * Abstinence or reduction from some or all food, drink, or both, for a period of time prior to sample collection.
   * Representing fasting status using this element is preferred to representing it with an observation using a 'pre-coordinated code'  such as  LOINC 2005-7 (Calcium [Moles/​time] in 2 hour Urine --12 hours fasting), or  using  a component observation ` such as `Observation.component code`  = LOINC 49541-6 (Fasting status - Reported).
   */
  fastingStatusCodeableConcept?: CodeableConcept | undefined;
  /**
   * Abstinence or reduction from some or all food, drink, or both, for a period of time prior to sample collection.
   * Representing fasting status using this element is preferred to representing it with an observation using a 'pre-coordinated code'  such as  LOINC 2005-7 (Calcium [Moles/​time] in 2 hour Urine --12 hours fasting), or  using  a component observation ` such as `Observation.component code`  = LOINC 49541-6 (Fasting status - Reported).
   */
  fastingStatusDuration?: Duration | undefined;
  /**
   * A coded value specifying the technique that is used to perform the procedure.
   */
  method?: CodeableConcept | undefined;
  /**
   * The procedure event during which the specimen was collected (e.g. the surgery leading to the collection of a pathology sample).
   */
  procedure?: Reference | undefined;
  /**
   * The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
   */
  quantity?: Quantity | undefined;
}
/**
 * Direct container of specimen (tube/slide, etc.)
 */
export interface SpecimenContainer extends BackboneElement {
  /**
   * The device resource for the the container holding the specimen. If the container is in a holder then the referenced device will point to a parent device.
   */
  device: Reference;
  /**
   * The location of the container holding the specimen.
   */
  location?: Reference | undefined;
  /**
   * The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
   */
  specimenQuantity?: Quantity | undefined;
}
/**
 * The physical feature of a specimen
 */
export interface SpecimenFeature extends BackboneElement {
  /**
   * Description of the feature of the specimen.
   */
  description: string;
  _description?: Element | undefined;
  /**
   * The landmark or feature being highlighted.
   */
  type: CodeableConcept;
}
/**
 * Processing and processing step details
 */
export interface SpecimenProcessing extends BackboneElement {
  /**
   * Material used in the processing step.
   */
  additive?: Reference[] | undefined;
  /**
   * Textual description of procedure.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A coded value specifying the method used to process the specimen.
   */
  method?: CodeableConcept | undefined;
  /**
   * A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
   */
  timestring?: string | undefined;
  _timestring?: Element | undefined;
  /**
   * A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
   */
  timePeriod?: Period | undefined;
}
export interface Specimen extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Specimen';
  /**
   * The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
   */
  accessionIdentifier?: Identifier | undefined;
  /**
   * Details concerning the specimen collection.
   */
  collection?: SpecimenCollection | undefined;
  /**
   * This element signifies if the specimen is part of a group or pooled.
   */
  combined?: ('grouped'|'pooled') | undefined;
  _combined?: Element | undefined;
  /**
   * A mode or state of being that describes the nature of the specimen.
   * Specimen condition is an observation made about the specimen.  It's a point-in-time assessment.  It can be used to assess its quality or appropriateness for a specific test.
   */
  condition?: CodeableConcept[] | undefined;
  /**
   * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
   */
  container?: SpecimenContainer[] | undefined;
  /**
   * A physical feature or landmark on a specimen, highlighted for context by the collector of the specimen (e.g. surgeon), that identifies the type of feature as well as its meaning (e.g. the red ink indicating the resection margin of the right lobe of the excised prostate tissue or wire loop at radiologically suspected tumor location).
   */
  feature?: SpecimenFeature[] | undefined;
  /**
   * Id for specimen.
   */
  identifier?: Identifier[] | undefined;
  /**
   * To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen).
   */
  note?: Annotation[] | undefined;
  /**
   * Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.
   * The parent specimen could be the source from which the current specimen is derived by some processing step (e.g. an aliquot or isolate or extracted nucleic acids from clinical samples) or one of many specimens that were combined to create a pooled sample.
   */
  parent?: Reference[] | undefined;
  /**
   * Details concerning processing and processing steps for the specimen.
   */
  processing?: SpecimenProcessing[] | undefined;
  /**
   * Time when specimen is received by the testing laboratory for processing or testing.
   */
  receivedTime?: string | undefined;
  _receivedTime?: Element | undefined;
  /**
   * Details concerning a service request that required a specimen to be collected.
   * The request may be explicit or implied such with a ServiceRequest that requires a blood draw.
   */
  request?: Reference[] | undefined;
  /**
   * The role or reason for the specimen in the testing workflow.
   */
  role?: CodeableConcept[] | undefined;
  /**
   * The availability of the specimen.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('available'|'unavailable'|'unsatisfactory'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance, a biologically-derived product, or a device.
   */
  subject?: Reference | undefined;
  /**
   * The kind of material that forms the specimen.
   * The type can change the way that a specimen is handled and drives what kind of analyses can properly be performed on the specimen. It is frequently used in diagnostic work flow decision making systems.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Additive associated with container
 */
export interface SpecimenDefinitionTypeTestedContainerAdditive extends BackboneElement {
  /**
   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  additiveCodeableConcept?: CodeableConcept | undefined;
  /**
   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  additiveReference?: Reference | undefined;
}
/**
 * The specimen's container
 */
export interface SpecimenDefinitionTypeTestedContainer extends BackboneElement {
  /**
   * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  additive?: SpecimenDefinitionTypeTestedContainerAdditive[] | undefined;
  /**
   * Color of container cap.
   */
  cap?: CodeableConcept | undefined;
  /**
   * The capacity (volume or other measure) of this kind of container.
   */
  capacity?: Quantity | undefined;
  /**
   * The textual description of the kind of container.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The type of material of the container.
   * Examples: glass, plastic, metal.
   */
  material?: CodeableConcept | undefined;
  /**
   * The minimum volume to be conditioned in the container.
   */
  minimumVolumeQuantity?: Quantity | undefined;
  /**
   * The minimum volume to be conditioned in the container.
   */
  minimumVolumestring?: string | undefined;
  _minimumVolumestring?: Element | undefined;
  /**
   * Special processing that should be applied to the container for this kind of specimen.
   */
  preparation?: string | undefined;
  _preparation?: Element | undefined;
  /**
   * The type of container used to contain this kind of specimen.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Specimen handling before testing
 */
export interface SpecimenDefinitionTypeTestedHandling extends BackboneElement {
  /**
   * Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'.
   */
  instruction?: string | undefined;
  _instruction?: Element | undefined;
  /**
   * The maximum time interval of preservation of the specimen with these conditions.
   */
  maxDuration?: Duration | undefined;
  /**
   * It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.
   */
  temperatureQualifier?: CodeableConcept | undefined;
  /**
   * The temperature interval for this set of handling instructions.
   */
  temperatureRange?: Range | undefined;
}
/**
 * Specimen in container intended for testing by lab
 */
export interface SpecimenDefinitionTypeTested extends BackboneElement {
  /**
   * The specimen's container.
   */
  container?: SpecimenDefinitionTypeTestedContainer | undefined;
  /**
   * Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
   */
  handling?: SpecimenDefinitionTypeTestedHandling[] | undefined;
  /**
   * Primary of secondary specimen.
   */
  isDerived?: boolean | undefined;
  _isDerived?: Element | undefined;
  /**
   * The preference for this type of conditioned specimen.
   */
  preference: ('preferred'|'alternate');
  _preference?: Element | undefined;
  /**
   * Criterion for rejection of the specimen in its container by the laboratory.
   */
  rejectionCriterion?: CodeableConcept[] | undefined;
  /**
   * Requirements for delivery and special handling of this kind of conditioned specimen.
   */
  requirement?: string | undefined;
  _requirement?: Element | undefined;
  /**
   * The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.
   */
  retentionTime?: Duration | undefined;
  /**
   * Specimen can be used by only one test or panel if the value is "true".
   */
  singleUse?: boolean | undefined;
  _singleUse?: Element | undefined;
  /**
   * Where the specimen will be tested: e.g., lab, sector, device or any combination of these.
   */
  testingDestination?: CodeableConcept[] | undefined;
  /**
   * The kind of specimen conditioned for testing expected by lab.
   */
  type?: CodeableConcept | undefined;
}
export interface SpecimenDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SpecimenDefinition';
  /**
   * The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The date may be more recent than the approval date because of minor changes / editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * The action to be performed for collecting the specimen.
   */
  collection?: CodeableConcept[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * Copyright statement relating to the SpecimenDefinition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SpecimenDefinition.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * For draft definitions, indicates the date of initial creation. For active definitions, represents the date of activation. For withdrawn definitions, indicates the date of withdrawal.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The canonical URL pointing to another FHIR-defined SpecimenDefinition that is adhered to in whole or in part by this definition.
   */
  derivedFromCanonical?: string[] | undefined;
  _derivedFromCanonical?: Element[] | undefined;
  /**
   * The URL pointing to an externally-defined type of specimen, guideline or other definition that is adhered to in whole or in part by this definition.
   */
  derivedFromUri?: string[] | undefined;
  _derivedFromUri?: Element[] | undefined;
  /**
   * A free text natural language description of the SpecimenDefinition from the consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the module as conveyed in the text field of the resource itself. This item SHOULD be populated unless the information is available from context.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The period during which the SpecimenDefinition content was or is planned to be effective.
   * The effective period for a SpecimenDefinition determines when the content is applicable for usage and is independent of publication and review dates.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * A flag to indicate that this SpecimenDefinition is not authored for  genuine usage.
   * Allows filtering of SpecimenDefinition that are appropriate for use vs. not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A business identifier assigned to this SpecimenDefinition.
   */
  identifier?: Identifier | undefined;
  /**
   * A jurisdiction in which the SpecimenDefinition is intended to be used.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date.
   * If specified, this is usually after the approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the {{title}}. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Preparation of the patient for specimen collection.
   */
  patientPreparation?: CodeableConcept[] | undefined;
  /**
   * Helps establish the "authority/credibility" of the SpecimenDefinition. May also allow for contact.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explains why this SpecimeDefinition is needed and why it has been designed as it has.
   * This element does not describe the usage of the SpecimenDefinition. Rather it is for traceability of ''why'' the resource is either needed or ''why'' it is defined as it is. This may be used to point to source materials or specifications that drove the structure of this SpecimenDefinition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The current state of theSpecimenDefinition.
   * A nominal state-transition diagram can be found in the [Definition pattern](definition.html#statemachine) documentation
   * Unknown does not represent "other" - one of the defined statuses must apply. Unknown is used when the authoring system is not sure what the current status is.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A code or group definition that describes the intended subject  from which this kind of specimen is to be collected.
   * Examples: person, animal, device, water ….
   */
  subjectCodeableConcept?: CodeableConcept | undefined;
  /**
   * A code or group definition that describes the intended subject  from which this kind of specimen is to be collected.
   * Examples: person, animal, device, water ….
   */
  subjectReference?: Reference | undefined;
  /**
   * Time aspect of specimen collection (duration or offset).
   */
  timeAspect?: string | undefined;
  _timeAspect?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the SpecimenDefinition.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * The kind of material to be collected.
   */
  typeCollected?: CodeableConcept | undefined;
  /**
   * Specimen conditioned in a container as expected by the testing laboratory.
   */
  typeTested?: SpecimenDefinitionTypeTested[] | undefined;
  /**
   * An absolute URL that is used to identify this SpecimenDefinition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this SpecimenDefinition is (or will be) published. The URL SHOULD include the major version of the SpecimenDefinition. For more information see Technical and Business Versions.
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred. This is the URI that will be used when making canonical references to this resource.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of specimen definitions.
   * When multiple usageContexts are specified, there is no expectation for whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the SpecimenDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the SpecimenDefinition author and is not expected to be globally unique.
   * There may be multiple different instances of a SpecimenDefinition that have the same identifier but different versions.
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * If an extension, where it can be used in instances
 */
export interface StructureDefinitionContext extends BackboneElement {
  /**
   * An expression that defines where an extension can be used in resources.
   */
  expression: string;
  _expression?: Element | undefined;
  /**
   * Defines how to interpret the expression that defines what the context of the extension is.
   */
  type: ('fhirpath'|'element'|'extension');
  _type?: Element | undefined;
}
/**
 * Differential view of the structure
 */
export interface StructureDefinitionDifferential extends BackboneElement {
  /**
   * Captures constraints on each element within the resource.
   */
  element: ElementDefinition[];
}
/**
 * External specification that the content is mapped to
 */
export interface StructureDefinitionMapping extends BackboneElement {
  /**
   * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * An Internal id that is used to identify this mapping set when specific mappings are made.
   * The specification is described once, with general comments, and then specific mappings are made that reference this declaration.
   */
  identity: string;
  _identity?: Element | undefined;
  /**
   * A name for the specification that is being mapped to.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * An absolute URI that identifies the specification that this mapping is expressed to.
   * A formal identity for the specification being mapped to helps with identifying maps consistently.
   */
  uri?: string | undefined;
  _uri?: Element | undefined;
}
/**
 * Snapshot view of the structure
 */
export interface StructureDefinitionSnapshot extends BackboneElement {
  /**
   * Captures constraints on each element within the resource.
   */
  element: ElementDefinition[];
}
export interface StructureDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'StructureDefinition';
  /**
   * Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems.
   * Abstract Resources cannot be instantiated - a concrete sub-type must be used. Abstract datatypes and extensions cannot be used in an instance. For logical models, the exact implication of "abstract" will rest with the author, depending how the logical model is used. Flagging a constraint structure as abstract conveys design intent but makes no difference to how the structure definition is handled. Note that inline declared elements that are given the type "Element" in the StructureDefinition, but have children described, are anonymous concrete types that specialize Element.
   */
  abstract: boolean;
  _abstract?: Element | undefined;
  /**
   * An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.
   * If differential constraints are specified in this structure, they are applied to the base in a "differential" fashion. If there is no base, then the differential constraints cannot be provided (snapshot only). Differential structures are useful for the editing perspective, and snapshot structures are suitable for operational use. The FHIR Project provides a number of tools/services to populate snapshots from differential constraints. Logical Models have a base of "Base", "Element" or another logical model.
   */
  baseDefinition?: string | undefined;
  _baseDefinition?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * Identifies the types of resource or data type elements to which the extension can be applied. For more guidance on using the 'context' element, see the [defining extensions page](defining-extensions.html#context).
   */
  context?: StructureDefinitionContext[] | undefined;
  /**
   * A set of rules as FHIRPath Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). All the rules must be true.
   * The rules are only evaluated when the extension is present. When evaluating the invariant, the FHIRPath focus is the element that holds the extension, and %extension refers to the extension itself.
   */
  contextInvariant?: string[] | undefined;
  _contextInvariant?: Element[] | undefined;
  /**
   * A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.  The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
   * ...
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the structure definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * How the type relates to the baseDefinition.
   * If the definition is a specialization, then it adds to the differential new elements and optionally additional rules to an existing concrete type, and the snapshot includes the inherited elements and rules.  If the definition is a constraint, then it cannot define new elements, it can only make new rules about existing content (see [Profiling Resources](profiling.html#resources)).
   */
  derivation?: ('specialization'|'constraint') | undefined;
  _derivation?: Element | undefined;
  /**
   * A free text natural language description of the structure definition from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the structure definition is presumed to be the predominant language in the place the structure definition was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
   */
  differential?: StructureDefinitionDifferential | undefined;
  /**
   * A Boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of structure definitions that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.6.0. for this version.
   * A StructureDefinition does not need to specify the target it applies to as StructureDefinitions will often be valid across multiple versions of FHIR. FHIR tooling can determine whether a StructureDefinition is consistent with a particular StructureDefinition if desired.
   */
  fhirVersion?: ('0.01'|'0.05'|'0.06'|'0.11'|'0.0'|'0.0.80'|'0.0.81'|'0.0.82'|'0.4'|'0.4.0'|'0.5'|'0.5.0'|'1.0'|'1.0.0'|'1.0.1'|'1.0.2'|'1.1'|'1.1.0'|'1.4'|'1.4.0'|'1.6'|'1.6.0'|'1.8'|'1.8.0'|'3.0'|'3.0.0'|'3.0.1'|'3.0.2'|'3.3'|'3.3.0'|'3.5'|'3.5.0'|'4.0'|'4.0.0'|'4.0.1'|'4.1'|'4.1.0'|'4.2'|'4.2.0'|'4.3'|'4.3.0'|'4.3.0-cibuild'|'4.3.0-snapshot1'|'4.4'|'4.4.0'|'4.5'|'4.5.0'|'4.6'|'4.6.0'|'5.0'|'5.0.0'|'5.0.0-cibuild'|'5.0.0-snapshot1'|'5.0.0-snapshot2'|'5.0.0-ballot'|'5.0.0-snapshot3'|'5.0.0-draft-final') | undefined;
  _fhirVersion?: Element | undefined;
  /**
   * A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this structure definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the structure definition is intended to be used.
   * It may be possible for the structure definition to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * (DEPRECATED) A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.
   * Note that this element is deprecated. Use the [http://hl7.org/fhir/StructureDefinition/artifact-topic](http://hl7.org/fhir/extensions/StructureDefinition-artifact-topic.html) extension instead.
   */
  keyword?: Coding[] | undefined;
  /**
   * Defines the kind of structure that this definition is describing.
   */
  kind: ('primitive-type'|'complex-type'|'resource'|'logical');
  _kind?: Element | undefined;
  /**
   * An external specification that the content is mapped to.
   */
  mapping?: StructureDefinitionMapping[] | undefined;
  /**
   * A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.Some Examples: 
   * * O2SatObservation
   * * PresentationReport
   * * Immunization2
   * * AcmeAdmissionRecordOld.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the structure definition.
   * Usually an organization but may be an individual. The publisher (or steward) of the structure definition is the organization or individual primarily responsible for the maintenance and upkeep of the structure definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this structure definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the structure definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
   */
  snapshot?: StructureDefinitionSnapshot | undefined;
  /**
   * The status of this structure definition. Enables tracking the life-cycle of the content.
   * Allows filtering of structure definitions that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the structure definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.Applications don't have to use this name but can always fall back to it. The title also corresponds to the label for the root element.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * The type this structure describes. If the derivation kind is 'specialization' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type).  References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models, where they are required.
   * Note that in the case of constraints, the type could be determined by chasing through the baseDefinition references until a type defining structure (derivation = specialization) is reached, or by looking at the path of the first element in the snapshot - if present - but providing the type directly makes for simpler tooling and indexing. 
   * The type must match the elements defined in the differential and the snapshot. For all FHIR defined types, the path name of the element will start with the type name. For logical models, where the type SHALL be a fully specified URL, the type name SHOULD start with the final path segment of the type URL where required. E.g. If the type was "http://example.org/fhir/MyLogicalModelType", the type name should start with 'MyLogicalModelType'.
   */
  type: string;
  _type?: Element | undefined;
  /**
   * An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this structure definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure definition is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure definition instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. There is no expectation that versions can be placed in a lexicographical sequence, so authors are encouraged to populate the StructureDefinition.versionAlgorithm[x] element to enable comparisons. If there is no managed version available, authors can consider using ISO date/time syntax (e.g., '2023-01-01').
   * There may be different structure definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the structure definition with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Definition of the constant value used in the map rules
 */
export interface StructureMapConst extends BackboneElement {
  /**
   * Other maps used by this map (canonical URLs).
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A FHIRPath expression that is the value of this variable.
   */
  value?: string | undefined;
  _value?: Element | undefined;
}
/**
 * Named instance provided when invoking the map
 * If no inputs are named, then the entry mappings are type based.
 */
export interface StructureMapGroupInput extends BackboneElement {
  /**
   * Documentation for this instance of data.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * Mode for this instance of data.
   */
  mode: ('source'|'target');
  _mode?: Element | undefined;
  /**
   * Name for this instance of data.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Type for this instance of data.
   */
  type?: string | undefined;
  _type?: Element | undefined;
}
/**
 * Which other rules to apply in the context of this rule
 */
export interface StructureMapGroupRuleDependent extends BackboneElement {
  /**
   * Name of a rule or group to apply.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Parameter to pass to the rule or group.
   */
  parameter: StructureMapGroupRuleTargetParameter[];
}
/**
 * Source inputs to the mapping
 */
export interface StructureMapGroupRuleSource extends BackboneElement {
  /**
   * FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
   */
  check?: string | undefined;
  _check?: Element | undefined;
  /**
   * FHIRPath expression  - must be true or the rule does not apply.
   */
  condition?: string | undefined;
  _condition?: Element | undefined;
  /**
   * Type or variable this rule applies to.
   */
  context: string;
  _context?: Element | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValue?: string | undefined;
  _defaultValue?: Element | undefined;
  /**
   * Optional field for this source.
   */
  element?: string | undefined;
  _element?: Element | undefined;
  /**
   * How to handle the list mode for this element.
   */
  listMode?: ('first'|'not_first'|'last'|'not_last'|'only_one') | undefined;
  _listMode?: Element | undefined;
  /**
   * A FHIRPath expression which specifies a message to put in the transform log when content matching the source rule is found.
   * This is typically used for recording that something Is not transformed to the target for some reason.
   */
  logMessage?: string | undefined;
  _logMessage?: Element | undefined;
  /**
   * Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
   */
  max?: string | undefined;
  _max?: Element | undefined;
  /**
   * Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
   */
  min?: number | undefined;
  /**
   * Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
   */
  type?: string | undefined;
  _type?: Element | undefined;
  /**
   * Named context for field, if a field is specified.
   */
  variable?: string | undefined;
  _variable?: Element | undefined;
}
/**
 * Parameters to the transform
 */
export interface StructureMapGroupRuleTargetParameter extends BackboneElement {
  /**
   * Parameter value - variable or literal.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * Parameter value - variable or literal.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * Parameter value - variable or literal.
   */
  valuenumber?: number | undefined;
}
/**
 * Content to create because of this mapping rule
 */
export interface StructureMapGroupRuleTarget extends BackboneElement {
  /**
   * Variable this rule applies to.
   */
  context?: string | undefined;
  _context?: Element | undefined;
  /**
   * Field to create in the context.
   */
  element?: string | undefined;
  _element?: Element | undefined;
  /**
   * If field is a list, how to manage the list.
   */
  listMode?: ('first'|'share'|'last'|'single')[] | undefined;
  _listMode?: Element[] | undefined;
  /**
   * Internal rule reference for shared list items.
   */
  listRuleId?: string | undefined;
  _listRuleId?: Element | undefined;
  /**
   * Parameters to the transform.
   */
  parameter?: StructureMapGroupRuleTargetParameter[] | undefined;
  /**
   * How the data is copied / created.
   */
  transform?: ('create'|'copy'|'truncate'|'escape'|'cast'|'append'|'translate'|'reference'|'dateOp'|'uuid'|'pointer'|'evaluate'|'cc'|'c'|'qty'|'id'|'cp') | undefined;
  _transform?: Element | undefined;
  /**
   * Named context for field, if desired, and a field is specified.
   */
  variable?: string | undefined;
  _variable?: Element | undefined;
}
/**
 * Transform Rule from source to target
 */
export interface StructureMapGroupRule extends BackboneElement {
  /**
   * Which other rules to apply in the context of this rule.
   */
  dependent?: StructureMapGroupRuleDependent[] | undefined;
  /**
   * Documentation for this instance of data.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * Name of the rule for internal references.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Rules contained in this rule.
   */
  rule?: StructureMapGroupRule[] | undefined;
  /**
   * Source inputs to the mapping.
   */
  source: StructureMapGroupRuleSource[];
  /**
   * Content to create because of this mapping rule.
   */
  target?: StructureMapGroupRuleTarget[] | undefined;
}
/**
 * Named sections for reader convenience
 */
export interface StructureMapGroup extends BackboneElement {
  /**
   * Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * Another group that this group adds rules to.
   */
  extends?: string | undefined;
  _extends?: Element | undefined;
  /**
   * A name assigned to an instance of data. The instance must be provided when the mapping is invoked.
   * If no inputs are named, then the entry mappings are type based.
   */
  input: StructureMapGroupInput[];
  /**
   * A unique name for the group for the convenience of human readers.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Transform Rule from source to target.
   */
  rule?: StructureMapGroupRule[] | undefined;
  /**
   * If this is the default rule set to apply for the source type or this combination of types.
   * Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.
   */
  typeMode?: ('types'|'type-and-types') | undefined;
  _typeMode?: Element | undefined;
}
/**
 * Structure Definition used by this map
 * It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.
 */
export interface StructureMapStructure extends BackboneElement {
  /**
   * The name used for this type in the map.
   * This is needed if both types have the same name (e.g. version conversion).
   */
  alias?: string | undefined;
  _alias?: Element | undefined;
  /**
   * Documentation that describes how the structure is used in the mapping.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * How the referenced structure is used in this mapping.
   */
  mode: ('source'|'queried'|'target'|'produced');
  _mode?: Element | undefined;
  /**
   * The canonical reference to the structure.
   */
  url: string;
  _url?: Element | undefined;
}
export interface StructureMap extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'StructureMap';
  /**
   * Definition of a constant value used in the map rules.
   */
  const?: StructureMapConst[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
   * ...
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the structure map was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the structure map from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure map as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the structure map is presumed to be the predominant language in the place the structure map was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A Boolean value to indicate that this structure map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of structure maps that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Organizes the mapping into managable chunks for human review/ease of maintenance.
   */
  group: StructureMapGroup[];
  /**
   * A formal identifier that is used to identify this structure map when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this structure map outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Other maps used by this map (canonical URLs).
   */
  import?: string[] | undefined;
  _import?: Element[] | undefined;
  /**
   * A legal or geographic region in which the structure map is intended to be used.
   * It may be possible for the structure map to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A natural language name identifying the structure map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the structure map.
   * Usually an organization but may be an individual. The publisher (or steward) of the structure map is the organization or individual primarily responsible for the maintenance and upkeep of the structure map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure map. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this structure map is needed and why it has been designed as it has.
   * This element does not describe the usage of the structure map. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure map.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The status of this structure map. Enables tracking the life-cycle of the content.
   * Allows filtering of structure maps that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.
   * It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.
   */
  structure?: StructureMapStructure[] | undefined;
  /**
   * A short, descriptive, user-friendly title for the structure map.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this structure map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this structure map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure map is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure map instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the structure map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different structure map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the structure map with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Criteria for narrowing the subscription topic stream
 */
export interface SubscriptionFilterBy extends BackboneElement {
  /**
   * Comparator applied to this filter parameter.
   * Must be a comparator allowed by the SubscriptionTopic relevant to this Subscription filter.
   */
  comparator?: ('eq'|'ne'|'gt'|'lt'|'ge'|'le'|'sa'|'eb'|'ap') | undefined;
  _comparator?: Element | undefined;
  /**
   * The filter as defined in the `SubscriptionTopic.canFilterBy.filterParameter` element.
   */
  filterParameter: string;
  _filterParameter?: Element | undefined;
  /**
   * Modifier applied to this filter parameter.
   * Must be a modifier allowed by the SubscriptionTopic relevant to this Subscription filter.
   */
  modifier?: ('missing'|'exact'|'contains'|'not'|'text'|'in'|'not-in'|'below'|'above'|'type'|'identifier'|'of-type'|'code-text'|'text-advanced'|'iterate') | undefined;
  _modifier?: Element | undefined;
  /**
   * A resource listed in the `SubscriptionTopic` this `Subscription` references (`SubscriptionTopic.canFilterBy.resource`). This element can be used to differentiate filters for topics that include more than one resource type.
   */
  resourceType?: string | undefined;
  _resourceType?: Element | undefined;
  /**
   * The literal value or resource path as is legal in search - for example, `Patient/123` or `le1950`.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Channel type
 * Exactly what these mean depend on the channel type. They can convey additional information to the server or recipient and/or meet security requirements; for example, support of multiple headers in the outgoing notifications for rest-hook type subscriptions. Note that names are not required to be unique, but channel definitions can impose restrictions.
 */
export interface SubscriptionParameter extends BackboneElement {
  /**
   * Parameter name for information passed to the channel for notifications, for example in the case of a REST hook wanting to pass through an authorization header, the name would be Authorization.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Parameter value for information passed to the channel for notifications, for example in the case of a REST hook wanting to pass through an authorization header, the value would be `Bearer 0193...`.
   */
  value: string;
  _value?: Element | undefined;
}
export interface Subscription extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Subscription';
  /**
   * The type of channel to send notifications on.
   */
  channelType: Coding;
  /**
   * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
   */
  contact?: ContactPoint[] | undefined;
  /**
   * How much of the resource content to deliver in the notification payload. The choices are an empty payload, only the resource id, or the full resource content.
   * Sending the payload has obvious security implications. The server is responsible for ensuring that the content is appropriately secured.
   */
  content?: ('empty'|'id-only'|'full-resource') | undefined;
  _content?: Element | undefined;
  /**
   * The MIME type to send the payload in - e.g., `application/fhir+xml` or `application/fhir+json`. Note that:
   * * clients may request notifications in a specific FHIR version by using the [FHIR Version Parameter](http.html#version-parameter) - e.g., `application/fhir+json; fhirVersion=4.0`.
   * * additional MIME types can be allowed by channels - e.g., `text/plain` and `text/html` are defined by the Email channel.
   */
  contentType?: string | undefined;
  _contentType?: Element | undefined;
  /**
   * The time for the server to turn the subscription off.
   * The server is permitted to deviate from this time but should observe it.
   */
  end?: string | undefined;
  _end?: Element | undefined;
  /**
   * The url that describes the actual end-point to send notifications to.
   * For rest-hook the end-point must be an `http:` or `https:` URL; for websockets, `ws:` or `wss:`; for email, a `mailto:` url; and for message the endpoint can be in any form of url the server understands (usually, `http/s`: or `mllp:`). The URI is allowed to be relative; in which case, it is relative to the server end-point (since there may be more than one, clients should avoid using relative URIs).
   */
  endpoint?: string | undefined;
  _endpoint?: Element | undefined;
  /**
   * The filter properties to be applied to narrow the subscription topic stream.  When multiple filters are applied, evaluates to true if all the conditions applicable to that resource are met; otherwise it returns false (i.e., logical AND).
   */
  filterBy?: SubscriptionFilterBy[] | undefined;
  /**
   * If present, a 'heartbeat' notification (keep-alive) is sent via this channel with an interval period equal to this elements integer value in seconds.  If not present, a heartbeat notification is not sent.
   */
  heartbeatPeriod?: number | undefined;
  /**
   * A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Entity with authorization to make subsequent revisions to the Subscription and also determines what data the subscription is authorized to disclose.
   */
  managingEntity?: Reference | undefined;
  /**
   * If present, the maximum number of events that will be included in a notification bundle. Note that this is not a strict limit on the number of entries in a bundle, as dependent resources can be included.
   */
  maxCount?: number | undefined;
  /**
   * A natural language name identifying the subscription.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Channel-dependent information to send as part of the notification (e.g., HTTP Headers).
   * Exactly what these mean depend on the channel type. They can convey additional information to the server or recipient and/or meet security requirements; for example, support of multiple headers in the outgoing notifications for rest-hook type subscriptions. Note that names are not required to be unique, but channel definitions can impose restrictions.
   */
  parameter?: SubscriptionParameter[] | undefined;
  /**
   * A description of why this subscription is defined.
   */
  reason?: string | undefined;
  _reason?: Element | undefined;
  /**
   * The status of the subscription, which marks the server state for managing the subscription.
   * A client can only submit subscription resources in the requested or off state. Only the server can  move a subscription from requested to active, and then to error. Either the server or the client can turn a subscription off.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('requested'|'active'|'error'|'off'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * If present, the maximum amount of time a server will allow before failing a notification attempt.
   */
  timeout?: number | undefined;
  /**
   * The reference to the subscription topic to be notified about.
   */
  topic: string;
  _topic?: Element | undefined;
}
/**
 * Detailed information about any events relevant to this notification
 */
export interface SubscriptionStatusNotificationEvent extends BackboneElement {
  /**
   * Additional context information for this event. Generally, this will contain references to additional resources included with the event (e.g., the Patient relevant to an Encounter), however it MAY refer to non-FHIR objects.
   */
  additionalContext?: Reference[] | undefined;
  /**
   * Either the sequential number of this event in this subscription context or a relative event number for this notification.
   * In subscriptions where delivery of notifications IS NOT guaranteed (e.g., REST-Hook), this number is a unique and monotonically-increasing event number for a subscription. In channels where delivery of notifications IS guaranteed, this number is a relative index for the events present in the notification (e.g., 1, 2, etc.).
   */
  eventNumber: string;
  _eventNumber?: Element | undefined;
  /**
   * The focus of this event. While this will usually be a reference to the focus resource of the event, it MAY contain a reference to a non-FHIR object.
   */
  focus?: Reference | undefined;
  /**
   * The actual time this event occurred on the server.
   */
  timestamp?: string | undefined;
  _timestamp?: Element | undefined;
}
export interface SubscriptionStatus extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SubscriptionStatus';
  /**
   * A record of errors that occurred when the server processed a notification.
   * Recommended practice: clear errors when status is updated.
   */
  error?: CodeableConcept[] | undefined;
  /**
   * The total number of actual events which have been generated since the Subscription was created (inclusive of this notification) - regardless of how many have been successfully communicated.  This number is NOT incremented for handshake and heartbeat notifications.
   */
  eventsSinceSubscriptionStart?: string | undefined;
  _eventsSinceSubscriptionStart?: Element | undefined;
  /**
   * Detailed information about events relevant to this subscription notification.
   */
  notificationEvent?: SubscriptionStatusNotificationEvent[] | undefined;
  /**
   * The status of the subscription, which marks the server state for managing the subscription.
   */
  status?: ('requested'|'active'|'error'|'off'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * The reference to the Subscription which generated this notification.
   */
  subscription: Reference;
  /**
   * The reference to the SubscriptionTopic for the Subscription which generated this notification.
   * This value SHOULD NOT be present when using `empty` payloads, MAY be present when using `id-only` payloads, and SHOULD be present when using `full-resource` payloads.
   */
  topic?: string | undefined;
  _topic?: Element | undefined;
  /**
   * The type of event being conveyed with this notification.
   */
  type: ('handshake'|'heartbeat'|'event-notification'|'query-status'|'query-event');
  _type?: Element | undefined;
}
/**
 * Properties by which a Subscription can filter notifications from the SubscriptionTopic
 */
export interface SubscriptionTopicCanFilterBy extends BackboneElement {
  /**
   * Comparators allowed for the filter parameter.
   * If no comparators are listed, clients should not expect servers to support any comparators.
   */
  comparator?: ('eq'|'ne'|'gt'|'lt'|'ge'|'le'|'sa'|'eb'|'ap')[] | undefined;
  _comparator?: Element[] | undefined;
  /**
   * Description of how this filtering parameter is intended to be used.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Either the canonical URL to a search parameter (like "http://hl7.org/fhir/SearchParameter/encounter-patient") or the officially-defined URI for a shared filter concept (like "http://example.org/concepts/shared-common-event").
   * Chained parameters are allowed (like "patient.gender") - but can not use colons or modifiers.
   */
  filterDefinition?: string | undefined;
  _filterDefinition?: Element | undefined;
  /**
   * Either the canonical URL to a search parameter (like "http://hl7.org/fhir/SearchParameter/encounter-patient") or topic-defined parameter (like "hub.event") which is a label for the filter.
   * Chained parameters are allowed (like "patient.gender") - but can not use colons or modifiers.
   */
  filterParameter: string;
  _filterParameter?: Element | undefined;
  /**
   * Modifiers allowed for the filter parameter.
   * If no modifiers are listed, clients should not expect servers to support any modifiers.
   */
  modifier?: ('missing'|'exact'|'contains'|'not'|'text'|'in'|'not-in'|'below'|'above'|'type'|'identifier'|'of-type'|'code-text'|'text-advanced'|'iterate')[] | undefined;
  _modifier?: Element[] | undefined;
  /**
   * URL of the Resource that is the type used in this filter. This is the "focus" of the topic (or one of them if there are more than one). It will be the same, a generality, or a specificity of SubscriptionTopic.resourceTrigger.resource or SubscriptionTopic.eventTrigger.resource when they are present.
   * URL of the Resource that is the type used in this filter. Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to http://hl7.org/fhir/StructureDefinition/Patient. For more information, see <a href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>.
   */
  resource?: string | undefined;
  _resource?: Element | undefined;
}
/**
 * Event definitions the SubscriptionTopic
 */
export interface SubscriptionTopicEventTrigger extends BackboneElement {
  /**
   * The human readable description of an event to trigger a notification for the SubscriptionTopic - for example, "Patient Admission, as defined in HL7v2 via message ADT^A01". Multiple values are considered OR joined (e.g., matching any single event listed).
   * Implementation of particular subscription topics might not use a computable definition and instead base their design on the definition.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A well-defined event which can be used to trigger notifications from the SubscriptionTopic.
   */
  event: CodeableConcept;
  /**
   * URL of the Resource that is the focus type used in this event trigger.  Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>.
   */
  resource: string;
  _resource?: Element | undefined;
}
/**
 * Properties for describing the shape of notifications generated by this topic
 */
export interface SubscriptionTopicNotificationShape extends BackboneElement {
  /**
   * Search-style _include directives, rooted in the resource for this shape. Servers SHOULD include resources listed here, if they exist and the user is authorized to receive them.  Clients SHOULD be prepared to receive these additional resources, but SHALL function properly without them.
   */
  include?: string[] | undefined;
  _include?: Element[] | undefined;
  /**
   * URL of the Resource that is the type used in this shape. This is the 'focus' resource of the topic (or one of them if there are more than one) and the root resource for this shape definition. It will be the same, a generality, or a specificity of SubscriptionTopic.resourceTrigger.resource or SubscriptionTopic.eventTrigger.resource when they are present.
   * URL of the Resource that is the type used in this shape. Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, 'Patient' maps to http://hl7.org/fhir/StructureDefinition/Patient. For more information, see <a href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>.
   */
  resource: string;
  _resource?: Element | undefined;
  /**
   * Search-style _revinclude directives, rooted in the resource for this shape. Servers SHOULD include resources listed here, if they exist and the user is authorized to receive them.  Clients SHOULD be prepared to receive these additional resources, but SHALL function properly without them.
   */
  revInclude?: string[] | undefined;
  _revInclude?: Element[] | undefined;
}
/**
 * Query based trigger rule
 */
export interface SubscriptionTopicResourceTriggerQueryCriteria extends BackboneElement {
  /**
   * The FHIR query based rules are applied to the current resource state (e.g., state after an update).
   * The rules are search criteria (without the [base] part). Like Bundle.entry.request.url, it has no leading slash character (`/`).
   */
  current?: string | undefined;
  _current?: Element | undefined;
  /**
   * The FHIR query based rules are applied to the previous resource state (e.g., state before an update).
   * The rules are search criteria (without the [base] part). Like Bundle.entry.request.url, it has no leading slash character (`/`).
   */
  previous?: string | undefined;
  _previous?: Element | undefined;
  /**
   * If set to `true`, both the `current` and `previous` query criteria must evaluate `true` to trigger a notification for this topic.  If set to `false` or not present, a notification for this topic will be triggered if either the `current` or `previous` tests evaluate to `true`.
   * Please note the interaction between this element and the `resultForCreate`/`resultForDelete` elements during `create` and `delete` interactions.  For example, if `resultForCreate` is set to `test-passes`, setting `requireBoth` to `false` means that every `create` will trigger a notification while setting `requireBoth` to `true` will result in notifications if the `current` test passes.  Similarly, if `resultForCreate` is set to `test-fails`, setting `requireBoth` to `true` means that no `create` will be able to generate a notification while setting `requireBoth` to `false` will result in notifications if the `current` test passes.
   */
  requireBoth?: boolean | undefined;
  _requireBoth?: Element | undefined;
  /**
   * For `create` interactions, should the `previous` criteria count as an automatic pass or an automatic fail. If not present, the testing behavior during `create` interactions is unspecified (server discretion).
   */
  resultForCreate?: ('test-passes'|'test-fails') | undefined;
  _resultForCreate?: Element | undefined;
  /**
   * For 'delete' interactions, should the 'current' query criteria count as an automatic pass or an automatic fail. If not present, the testing behavior during `delete` interactions is unspecified (server discretion).
   */
  resultForDelete?: ('test-passes'|'test-fails') | undefined;
  _resultForDelete?: Element | undefined;
}
/**
 * Definition of a resource-based trigger for the subscription topic
 */
export interface SubscriptionTopicResourceTrigger extends BackboneElement {
  /**
   * The human readable description of this resource trigger for the SubscriptionTopic -  for example, "An Encounter enters the 'in-progress' state".
   * Implementation of particular subscription topics might not use a computable definition and instead base their design on the definition.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The FHIRPath based rules that the server should use to determine when to trigger a notification for this topic.
   * FHIRPath expression with %previous and %current vars.
   */
  fhirPathCriteria?: string | undefined;
  _fhirPathCriteria?: Element | undefined;
  /**
   * The FHIR query based rules that the server should use to determine when to trigger a notification for this subscription topic.
   */
  queryCriteria?: SubscriptionTopicResourceTriggerQueryCriteria | undefined;
  /**
   * URL of the Resource that is the type used in this resource trigger.  Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>.
   */
  resource: string;
  _resource?: Element | undefined;
  /**
   * The FHIR RESTful interaction which can be used to trigger a notification for the SubscriptionTopic. Multiple values are considered OR joined (e.g., CREATE or UPDATE). If not present, all supported interactions are assumed.
   */
  supportedInteraction?: ('create'|'update'|'delete')[] | undefined;
  _supportedInteraction?: Element[] | undefined;
}
export interface SubscriptionTopic extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SubscriptionTopic';
  /**
   * The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The date may be more recent than the approval date because of minor changes / editorial corrections.
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * List of properties by which Subscriptions on the SubscriptionTopic can be filtered. May be defined Search Parameters (e.g., Encounter.patient) or parameters defined within this SubscriptionTopic context (e.g., hub.event).
   */
  canFilterBy?: SubscriptionTopicCanFilterBy[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the SubscriptionTopic and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SubscriptionTopic.
   * ...
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date (and optionally time) when the subscription topic was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the subscription topic changes.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The canonical URL pointing to another FHIR-defined SubscriptionTopic that is adhered to in whole or in part by this SubscriptionTopic.
   */
  derivedFrom?: string[] | undefined;
  _derivedFrom?: Element[] | undefined;
  /**
   * A free text natural language description of the Topic from the consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the module as conveyed in the text field of the resource itself. This item SHOULD be populated unless the information is available from context.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The period during which the SubscriptionTopic content was or is planned to be effective.
   * The effective period for a SubscriptionTopic  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 would be published in 2015.
   */
  effectivePeriod?: Period | undefined;
  /**
   * Event definition which can be used to trigger the SubscriptionTopic.
   */
  eventTrigger?: SubscriptionTopicEventTrigger[] | undefined;
  /**
   * A flag to indicate that this TopSubscriptionTopicic is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of SubscriptionTopic that are appropriate for use vs. not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Business identifiers assigned to this subscription topic by the performer and/or other systems.  These identifiers remain constant as the resource is updated and propagates from server to server.
   * Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A jurisdiction in which the Topic is intended to be used.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date.
   * If specified, this is usually after the approval date.
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the subscription topic This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * List of properties to describe the shape (e.g., resources) included in notifications from this Subscription Topic.
   */
  notificationShape?: SubscriptionTopicNotificationShape[] | undefined;
  /**
   * Helps establish the "authority/credibility" of the SubscriptionTopic.  May also allow for contact.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explains why this Topic is needed and why it has been designed as it has.
   * This element does not describe the usage of the Topic.  Rather it is for traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this Topic.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * A definition of a resource-based event that triggers a notification based on the SubscriptionTopic. The criteria may be just a human readable description and/or a full FHIR search string or FHIRPath expression. Multiple triggers are considered OR joined (e.g., a resource update matching ANY of the definitions will trigger a notification).
   */
  resourceTrigger?: SubscriptionTopicResourceTrigger[] | undefined;
  /**
   * The current state of the SubscriptionTopic.
   * A nominal state-transition diagram can be found in the [Definition pattern](definition.html#statemachine) documentation
   * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the subscription topic.  For example, "admission".
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this subscription topic when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this subscription topic is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the subscription topic is stored on different servers.
   * Can be a `urn:uuid:` or a `urn:oid:` but real `http/s:` addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions).
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   * When this is a locally defined topic or derived from a topic defined in the FHIR spec or an IG, this uniquely identifies the topic and functionality. Ideally this URL resolves to documentation about the use cases.
   * When this is a topic derived from another topic (e.g., it adds additional filters or functionality to a topic defined in an IG), then this URL should be different than the base and the `derivedFromCanonical` should be filled out with the unique uri as defined in the IG.
   * When this is a direct implementation from another IG or registered topic (with no additional filters, etc., so not derived), then this url is the unique url for this topic as defined by the IG.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of code system definitions.
   * When multiple usageContexts are specified, there is no expectation for whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the subscription topic when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Topic author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions are orderable.
   * There may be multiple different instances of a subscription topic that have the same identifier but different versions.
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Composition information about the substance
 */
export interface SubstanceIngredient extends BackboneElement {
  /**
   * The amount of the ingredient in the substance - a concentration ratio.
   */
  quantity?: Ratio | undefined;
  /**
   * Another substance that is a component of this substance.
   */
  substanceCodeableConcept?: CodeableConcept | undefined;
  /**
   * Another substance that is a component of this substance.
   */
  substanceReference?: Reference | undefined;
}
export interface Substance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Substance';
  /**
   * A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.
   * The level of granularity is defined by the category concepts in the value set.   More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in Substance.code.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * A code (or set of codes) that identify this substance.
   * This could be a reference to an externally defined code.  It could also be a locally assigned code (e.g. a formulary),  optionally with translations to the standard drug codes.
   */
  code: CodeableReference;
  /**
   * A description of the substance - its appearance, handling requirements, and other usage notes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
   */
  expiry?: string | undefined;
  _expiry?: Element | undefined;
  /**
   * Unique identifier for the substance. For an instance, an identifier associated with the package/container (usually a label affixed directly).
   */
  identifier?: Identifier[] | undefined;
  /**
   * A substance can be composed of other substances.
   */
  ingredient?: SubstanceIngredient[] | undefined;
  /**
   * A boolean to indicate if this an instance of a substance or a kind of one (a definition).
   */
  instance: boolean;
  _instance?: Element | undefined;
  /**
   * The amount of the substance.
   */
  quantity?: Quantity | undefined;
  /**
   * A code to indicate if the substance is actively used.
   */
  status?: ('active'|'inactive'|'entered-in-error') | undefined;
  _status?: Element | undefined;
}
/**
 * General specifications for this substance
 */
export interface SubstanceDefinitionCharacterization extends BackboneElement {
  /**
   * The description or justification in support of the interpretation of the data file.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The data produced by the analytical instrument or a pictorial representation of that data. Examples: a JCAMP, JDX, or ADX file, or a chromatogram or spectrum analysis.
   */
  file?: Attachment[] | undefined;
  /**
   * Describes the nature of the chemical entity and explains, for instance, whether this is a base or a salt form.
   */
  form?: CodeableConcept | undefined;
  /**
   * The method used to elucidate the characterization of the drug substance. Example: HPLC.
   */
  technique?: CodeableConcept | undefined;
}
/**
 * Codes associated with the substance
 */
export interface SubstanceDefinitionCode extends BackboneElement {
  /**
   * The specific code.
   */
  code?: CodeableConcept | undefined;
  /**
   * Any comment can be provided in this field, if necessary.
   */
  note?: Annotation[] | undefined;
  /**
   * Supporting literature.
   */
  source?: Reference[] | undefined;
  /**
   * Status of the code assignment, for example 'provisional', 'approved'.
   */
  status?: CodeableConcept | undefined;
  /**
   * The date at which the code status was changed as part of the terminology maintenance.
   */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;
}
/**
 * Moiety, for structural modifications
 */
export interface SubstanceDefinitionMoiety extends BackboneElement {
  /**
   * Quantitative value for this moiety.
   */
  amountQuantity?: Quantity | undefined;
  /**
   * Quantitative value for this moiety.
   */
  amountstring?: string | undefined;
  _amountstring?: Element | undefined;
  /**
   * Identifier by which this moiety substance is known.
   */
  identifier?: Identifier | undefined;
  /**
   * The measurement type of the quantitative value. In capturing the actual relative amounts of substances or molecular fragments it may be necessary to indicate whether the amount refers to, for example, a mole ratio or weight ratio.
   */
  measurementType?: CodeableConcept | undefined;
  /**
   * Molecular formula for this moiety of this substance, typically using the Hill system.
   */
  molecularFormula?: string | undefined;
  _molecularFormula?: Element | undefined;
  /**
   * Textual name for this moiety substance.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Optical activity type.
   */
  opticalActivity?: CodeableConcept | undefined;
  /**
   * Role that the moiety is playing.
   */
  role?: CodeableConcept | undefined;
  /**
   * Stereochemistry type.
   */
  stereochemistry?: CodeableConcept | undefined;
}
/**
 * The average mass of a molecule of a compound
 */
export interface SubstanceDefinitionMolecularWeight extends BackboneElement {
  /**
   * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
   */
  amount: Quantity;
  /**
   * The method by which the molecular weight was determined.
   */
  method?: CodeableConcept | undefined;
  /**
   * Type of molecular weight such as exact, average (also known as. number average), weight average.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Details of the official nature of this name
 */
export interface SubstanceDefinitionNameOfficial extends BackboneElement {
  /**
   * Which authority uses this official name.
   */
  authority?: CodeableConcept | undefined;
  /**
   * Date of the official name change.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The status of the official name, for example 'draft', 'active', 'retired'.
   */
  status?: CodeableConcept | undefined;
}
/**
 * Names applicable to this substance
 */
export interface SubstanceDefinitionName extends BackboneElement {
  /**
   * The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
   */
  domain?: CodeableConcept[] | undefined;
  /**
   * The jurisdiction where this name applies.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * Human language that the name is written in.
   */
  language?: CodeableConcept[] | undefined;
  /**
   * The actual name.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Details of the official nature of this name.
   */
  official?: SubstanceDefinitionNameOfficial[] | undefined;
  /**
   * If this is the preferred name for this substance.
   */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;
  /**
   * Supporting literature.
   */
  source?: Reference[] | undefined;
  /**
   * The status of the name, for example 'current', 'proposed'.
   */
  status?: CodeableConcept | undefined;
  /**
   * A synonym of this particular name, by which the substance is also known.
   */
  synonym?: SubstanceDefinitionName[] | undefined;
  /**
   * A translation for this name into another human language.
   */
  translation?: SubstanceDefinitionName[] | undefined;
  /**
   * Name type, for example 'systematic',  'scientific, 'brand'.
   */
  type?: CodeableConcept | undefined;
}
/**
 * General specifications for this substance
 */
export interface SubstanceDefinitionProperty extends BackboneElement {
  /**
   * A code expressing the type of property.
   */
  type: CodeableConcept;
  /**
   * A value for the property.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * A value for the property.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * A value for the property.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * A value for the property.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * A value for the property.
   */
  valueQuantity?: Quantity | undefined;
}
/**
 * A link between this substance and another
 */
export interface SubstanceDefinitionRelationship extends BackboneElement {
  /**
   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
   */
  amountQuantity?: Quantity | undefined;
  /**
   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
   */
  amountRatio?: Ratio | undefined;
  /**
   * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
   */
  amountstring?: string | undefined;
  _amountstring?: Element | undefined;
  /**
   * An operator for the amount, for example "average", "approximately", "less than".
   */
  comparator?: CodeableConcept | undefined;
  /**
   * For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
   */
  isDefining?: boolean | undefined;
  _isDefining?: Element | undefined;
  /**
   * For use when the numeric has an uncertain range.
   */
  ratioHighLimitAmount?: Ratio | undefined;
  /**
   * Supporting literature.
   */
  source?: Reference[] | undefined;
  /**
   * A pointer to another substance, as a resource or just a representational code.
   */
  substanceDefinitionCodeableConcept?: CodeableConcept | undefined;
  /**
   * A pointer to another substance, as a resource or just a representational code.
   */
  substanceDefinitionReference?: Reference | undefined;
  /**
   * For example "salt to parent", "active moiety", "starting material", "polymorph", "impurity of".
   */
  type: CodeableConcept;
}
/**
 * Material or taxonomic/anatomical source
 */
export interface SubstanceDefinitionSourceMaterial extends BackboneElement {
  /**
   * The country or countries where the material is harvested.
   */
  countryOfOrigin?: ('AD'|'AE'|'AF'|'AG'|'AI'|'AL'|'AM'|'AO'|'AQ'|'AR'|'AS'|'AT'|'AU'|'AW'|'AX'|'AZ'|'BA'|'BB'|'BD'|'BE'|'BF'|'BG'|'BH'|'BI'|'BJ'|'BL'|'BM'|'BN'|'BO'|'BQ'|'BR'|'BS'|'BT'|'BV'|'BW'|'BY'|'BZ'|'CA'|'CC'|'CD'|'CF'|'CG'|'CH'|'CI'|'CK'|'CL'|'CM'|'CN'|'CO'|'CR'|'CU'|'CV'|'CW'|'CX'|'CY'|'CZ'|'DE'|'DJ'|'DK'|'DM'|'DO'|'DZ'|'EC'|'EE'|'EG'|'EH'|'ER'|'ES'|'ET'|'FI'|'FJ'|'FK'|'FM'|'FO'|'FR'|'GA'|'GB'|'GD'|'GE'|'GF'|'GG'|'GH'|'GI'|'GL'|'GM'|'GN'|'GP'|'GQ'|'GR'|'GS'|'GT'|'GU'|'GW'|'GY'|'HK'|'HM'|'HN'|'HR'|'HT'|'HU'|'ID'|'IE'|'IL'|'IM'|'IN'|'IO'|'IQ'|'IR'|'IS'|'IT'|'JE'|'JM'|'JO'|'JP'|'KE'|'KG'|'KH'|'KI'|'KM'|'KN'|'KP'|'KR'|'KW'|'KY'|'KZ'|'LA'|'LB'|'LC'|'LI'|'LK'|'LR'|'LS'|'LT'|'LU'|'LV'|'LY'|'MA'|'MC'|'MD'|'ME'|'MF'|'MG'|'MH'|'MK'|'ML'|'MM'|'MN'|'MO'|'MP'|'MQ'|'MR'|'MS'|'MT'|'MU'|'MV'|'MW'|'MX'|'MY'|'MZ'|'NA'|'NC'|'NE'|'NF'|'NG'|'NI'|'NL'|'NO'|'NP'|'NR'|'NU'|'NZ'|'OM'|'PA'|'PE'|'PF'|'PG'|'PH'|'PK'|'PL'|'PM'|'PN'|'PR'|'PS'|'PT'|'PW'|'PY'|'QA'|'RE'|'RO'|'RS'|'RU'|'RW'|'SA'|'SB'|'SC'|'SD'|'SE'|'SG'|'SH'|'SI'|'SJ'|'SK'|'SL'|'SM'|'SN'|'SO'|'SR'|'SS'|'ST'|'SV'|'SX'|'SY'|'SZ'|'TC'|'TD'|'TF'|'TG'|'TH'|'TJ'|'TK'|'TL'|'TM'|'TN'|'TO'|'TR'|'TT'|'TV'|'TW'|'TZ'|'UA'|'UG'|'UM'|'US'|'UY'|'UZ'|'VA'|'VC'|'VE'|'VG'|'VI'|'VN'|'VU'|'WF'|'WS'|'YE'|'YT'|'ZA'|'ZM'|'ZW'|'ABW'|'AFG'|'AGO'|'AIA'|'ALA'|'ALB'|'AND'|'ARE'|'ARG'|'ARM'|'ASM'|'ATA'|'ATF'|'ATG'|'AUS'|'AUT'|'AZE'|'BDI'|'BEL'|'BEN'|'BES'|'BFA'|'BGD'|'BGR'|'BHR'|'BHS'|'BIH'|'BLM'|'BLR'|'BLZ'|'BMU'|'BOL'|'BRA'|'BRB'|'BRN'|'BTN'|'BVT'|'BWA'|'CAF'|'CAN'|'CCK'|'CHE'|'CHL'|'CHN'|'CIV'|'CMR'|'COD'|'COG'|'COK'|'COL'|'COM'|'CPV'|'CRI'|'CUB'|'CUW'|'CXR'|'CYM'|'CYP'|'CZE'|'DEU'|'DJI'|'DMA'|'DNK'|'DOM'|'DZA'|'ECU'|'EGY'|'ERI'|'ESH'|'ESP'|'EST'|'ETH'|'FIN'|'FJI'|'FLK'|'FRA'|'FRO'|'FSM'|'GAB'|'GBR'|'GEO'|'GGY'|'GHA'|'GIB'|'GIN'|'GLP'|'GMB'|'GNB'|'GNQ'|'GRC'|'GRD'|'GRL'|'GTM'|'GUF'|'GUM'|'GUY'|'HKG'|'HMD'|'HND'|'HRV'|'HTI'|'HUN'|'IDN'|'IMN'|'IND'|'IOT'|'IRL'|'IRN'|'IRQ'|'ISL'|'ISR'|'ITA'|'JAM'|'JEY'|'JOR'|'JPN'|'KAZ'|'KEN'|'KGZ'|'KHM'|'KIR'|'KNA'|'KOR'|'KWT'|'LAO'|'LBN'|'LBR'|'LBY'|'LCA'|'LIE'|'LKA'|'LSO'|'LTU'|'LUX'|'LVA'|'MAC'|'MAF'|'MAR'|'MCO'|'MDA'|'MDG'|'MDV'|'MEX'|'MHL'|'MKD'|'MLI'|'MLT'|'MMR'|'MNE'|'MNG'|'MNP'|'MOZ'|'MRT'|'MSR'|'MTQ'|'MUS'|'MWI'|'MYS'|'MYT'|'NAM'|'NCL'|'NER'|'NFK'|'NGA'|'NIC'|'NIU'|'NLD'|'NOR'|'NPL'|'NRU'|'NZL'|'OMN'|'PAK'|'PAN'|'PCN'|'PER'|'PHL'|'PLW'|'PNG'|'POL'|'PRI'|'PRK'|'PRT'|'PRY'|'PSE'|'PYF'|'QAT'|'REU'|'ROU'|'RUS'|'RWA'|'SAU'|'SDN'|'SEN'|'SGP'|'SGS'|'SHN'|'SJM'|'SLB'|'SLE'|'SLV'|'SMR'|'SOM'|'SPM'|'SRB'|'SSD'|'STP'|'SUR'|'SVK'|'SVN'|'SWE'|'SWZ'|'SXM'|'SYC'|'SYR'|'TCA'|'TCD'|'TGO'|'THA'|'TJK'|'TKL'|'TKM'|'TLS'|'TON'|'TTO'|'TUN'|'TUR'|'TUV'|'TWN'|'TZA'|'UGA'|'UKR'|'UMI'|'URY'|'USA'|'UZB'|'VAT'|'VCT'|'VEN'|'VGB'|'VIR'|'VNM'|'VUT'|'WLF'|'WSM'|'YEM'|'ZAF'|'ZMB'|'ZWE'|'004'|'008'|'010'|'012'|'016'|'020'|'024'|'028'|'031'|'032'|'036'|'040'|'044'|'048'|'050'|'051'|'052'|'056'|'060'|'064'|'068'|'070'|'072'|'074'|'076'|'084'|'086'|'090'|'092'|'096'|'100'|'104'|'108'|'112'|'116'|'120'|'124'|'132'|'136'|'140'|'144'|'148'|'152'|'156'|'158'|'162'|'166'|'170'|'174'|'175'|'178'|'180'|'184'|'188'|'191'|'192'|'196'|'203'|'204'|'208'|'212'|'214'|'218'|'222'|'226'|'231'|'232'|'233'|'234'|'238'|'239'|'242'|'246'|'248'|'250'|'254'|'258'|'260'|'262'|'266'|'268'|'270'|'275'|'276'|'288'|'292'|'296'|'300'|'304'|'308'|'312'|'316'|'320'|'324'|'328'|'332'|'334'|'336'|'340'|'344'|'348'|'352'|'356'|'360'|'364'|'368'|'372'|'376'|'380'|'384'|'388'|'392'|'398'|'400'|'404'|'408'|'410'|'414'|'417'|'418'|'422'|'426'|'428'|'430'|'434'|'438'|'440'|'442'|'446'|'450'|'454'|'458'|'462'|'466'|'470'|'474'|'478'|'480'|'484'|'492'|'496'|'498'|'499'|'500'|'504'|'508'|'512'|'516'|'520'|'524'|'528'|'531'|'533'|'534'|'535'|'540'|'548'|'554'|'558'|'562'|'566'|'570'|'574'|'578'|'580'|'581'|'583'|'584'|'585'|'586'|'591'|'598'|'600'|'604'|'608'|'612'|'616'|'620'|'624'|'626'|'630'|'634'|'638'|'642'|'643'|'646'|'652'|'654'|'659'|'660'|'662'|'663'|'666'|'670'|'674'|'678'|'682'|'686'|'688'|'690'|'694'|'702'|'703'|'704'|'705'|'706'|'710'|'716'|'724'|'728'|'729'|'732'|'740'|'744'|'748'|'752'|'756'|'760'|'762'|'764'|'768'|'772'|'776'|'780'|'784'|'788'|'792'|'795'|'796'|'798'|'800'|'804'|'807'|'818'|'826'|'831'|'832'|'833'|'834'|'840'|'850'|'854'|'858'|'860'|'862'|'876'|'882'|'887'|'894')[] | undefined;
  /**
   * The genus of an organism, typically referring to the Latin epithet of the genus element of the plant/animal scientific name.
   */
  genus?: CodeableConcept | undefined;
  /**
   * An anatomical origin of the source material within an organism.
   */
  part?: CodeableConcept | undefined;
  /**
   * The species of an organism, typically referring to the Latin epithet of the species of the plant/animal.
   */
  species?: CodeableConcept | undefined;
  /**
   * A classification that provides the origin of the raw material. Example: cat hair would be an Animal source type.
   */
  type?: CodeableConcept | undefined;
}
/**
 * A depiction of the structure of the substance
 */
export interface SubstanceDefinitionStructureRepresentation extends BackboneElement {
  /**
   * An attached file with the structural representation e.g. a molecular structure graphic of the substance, a JCAMP or AnIML file.
   */
  document?: Reference | undefined;
  /**
   * The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF. The logical content type rather than the physical file format of a document.
   */
  format?: CodeableConcept | undefined;
  /**
   * The structural representation as a text string in a standard format.
   */
  representation?: string | undefined;
  _representation?: Element | undefined;
  /**
   * The kind of structural representation (e.g. full, partial).
   */
  type?: CodeableConcept | undefined;
}
/**
 * Structural information
 */
export interface SubstanceDefinitionStructure extends BackboneElement {
  /**
   * An expression which states the number and type of atoms present in a molecule of a substance.
   */
  molecularFormula?: string | undefined;
  _molecularFormula?: Element | undefined;
  /**
   * Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
   */
  molecularFormulaByMoiety?: string | undefined;
  _molecularFormulaByMoiety?: Element | undefined;
  /**
   * The molecular weight or weight range (for proteins, polymers or nucleic acids).
   */
  molecularWeight?: SubstanceDefinitionMolecularWeight | undefined;
  /**
   * Optical activity type.
   */
  opticalActivity?: CodeableConcept | undefined;
  /**
   * A depiction of the structure of the substance.
   */
  representation?: SubstanceDefinitionStructureRepresentation[] | undefined;
  /**
   * The source of information about the structure.
   */
  sourceDocument?: Reference[] | undefined;
  /**
   * Stereochemistry type.
   */
  stereochemistry?: CodeableConcept | undefined;
  /**
   * The method used to elucidate the structure of the drug substance. Examples: X-ray, NMR, Peptide mapping, Ligand binding assay.
   */
  technique?: CodeableConcept[] | undefined;
}
export interface SubstanceDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SubstanceDefinition';
  /**
   * General specifications for this substance.
   */
  characterization?: SubstanceDefinitionCharacterization[] | undefined;
  /**
   * A high level categorization, e.g. polymer or nucleic acid, or food, chemical, biological, or a lower level such as the general types of polymer (linear or branch chain) or type of impurity (process related or contaminant).
   */
  classification?: CodeableConcept[] | undefined;
  /**
   * Codes associated with the substance.
   */
  code?: SubstanceDefinitionCode[] | undefined;
  /**
   * Textual description of the substance.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * If the substance applies to human or veterinary use.
   */
  domain?: CodeableConcept | undefined;
  /**
   * The quality standard, established benchmark, to which substance complies (e.g. USP/NF, Ph. Eur, JP, BP, Company Standard).
   */
  grade?: CodeableConcept[] | undefined;
  /**
   * Identifier by which this substance is known.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Supporting literature.
   */
  informationSource?: Reference[] | undefined;
  /**
   * The entity that creates, makes, produces or fabricates the substance. This is a set of potential manufacturers but is not necessarily comprehensive.
   */
  manufacturer?: Reference[] | undefined;
  /**
   * Moiety, for structural modifications.
   */
  moiety?: SubstanceDefinitionMoiety[] | undefined;
  /**
   * The average mass of a molecule of a compound compared to 1/12 the mass of carbon 12 and calculated as the sum of the atomic weights of the constituent atoms.
   */
  molecularWeight?: SubstanceDefinitionMolecularWeight[] | undefined;
  /**
   * Names applicable to this substance.
   */
  name?: SubstanceDefinitionName[] | undefined;
  /**
   * Textual comment about the substance's catalogue or registry record.
   */
  note?: Annotation[] | undefined;
  /**
   * Data items specific to nucleic acids.
   */
  nucleicAcid?: Reference | undefined;
  /**
   * Data items specific to polymers.
   */
  polymer?: Reference | undefined;
  /**
   * General specifications for this substance.
   */
  property?: SubstanceDefinitionProperty[] | undefined;
  /**
   * Data items specific to proteins.
   */
  protein?: Reference | undefined;
  /**
   * General information detailing this substance.
   */
  referenceInformation?: Reference | undefined;
  /**
   * A link between this substance and another, with details of the relationship.
   */
  relationship?: SubstanceDefinitionRelationship[] | undefined;
  /**
   * Material or taxonomic/anatomical source for the substance.
   */
  sourceMaterial?: SubstanceDefinitionSourceMaterial | undefined;
  /**
   * Status of substance within the catalogue e.g. active, retired.
   */
  status?: CodeableConcept | undefined;
  /**
   * Structural information.
   */
  structure?: SubstanceDefinitionStructure | undefined;
  /**
   * An entity that is the source for the substance. It may be different from the manufacturer. Supplier is synonymous to a distributor.
   */
  supplier?: Reference[] | undefined;
  /**
   * A business level version identifier of the substance.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * The linkages between sugar residues will also be captured
 */
export interface SubstanceNucleicAcidSubunitLinkage extends BackboneElement {
  /**
   * The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified.
   */
  connectivity?: string | undefined;
  _connectivity?: Element | undefined;
  /**
   * Each linkage will be registered as a fragment and have an ID.
   */
  identifier?: Identifier | undefined;
  /**
   * Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Residues shall be captured as described in 5.3.6.8.3.
   */
  residueSite?: string | undefined;
  _residueSite?: Element | undefined;
}
/**
 * 5.3.6.8.1 Sugar ID (Mandatory)
 */
export interface SubstanceNucleicAcidSubunitSugar extends BackboneElement {
  /**
   * The Substance ID of the sugar or sugar-like component that make up the nucleotide.
   */
  identifier?: Identifier | undefined;
  /**
   * The name of the sugar or sugar-like component that make up the nucleotide.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above.
   */
  residueSite?: string | undefined;
  _residueSite?: Element | undefined;
}
/**
 * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times
 */
export interface SubstanceNucleicAcidSubunit extends BackboneElement {
  /**
   * The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant.
   */
  fivePrime?: CodeableConcept | undefined;
  /**
   * The length of the sequence shall be captured.
   */
  length?: number | undefined;
  /**
   * The linkages between sugar residues will also be captured.
   */
  linkage?: SubstanceNucleicAcidSubunitLinkage[] | undefined;
  /**
   * Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured.
   */
  sequence?: string | undefined;
  _sequence?: Element | undefined;
  /**
   * (TBC).
   */
  sequenceAttachment?: Attachment | undefined;
  /**
   * Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.
   */
  subunit?: number | undefined;
  /**
   * 5.3.6.8.1 Sugar ID (Mandatory).
   */
  sugar?: SubstanceNucleicAcidSubunitSugar[] | undefined;
  /**
   * The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant.
   */
  threePrime?: CodeableConcept | undefined;
}
export interface SubstanceNucleicAcid extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SubstanceNucleicAcid';
  /**
   * The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”.
   */
  areaOfHybridisation?: string | undefined;
  _areaOfHybridisation?: Element | undefined;
  /**
   * The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit.
   */
  numberOfSubunits?: number | undefined;
  /**
   * (TBC).
   */
  oligoNucleotideType?: CodeableConcept | undefined;
  /**
   * The type of the sequence shall be specified based on a controlled vocabulary.
   */
  sequenceType?: CodeableConcept | undefined;
  /**
   * Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
   */
  subunit?: SubstanceNucleicAcidSubunit[] | undefined;
}
/**
 * The starting materials - monomer(s) used in the synthesis of the polymer
 */
export interface SubstancePolymerMonomerSetStartingMaterial extends BackboneElement {
  /**
   * A percentage.
   */
  amount?: Quantity | undefined;
  /**
   * Substance high level category, e.g. chemical substance.
   */
  category?: CodeableConcept | undefined;
  /**
   * The type of substance for this starting material.
   */
  code?: CodeableConcept | undefined;
  /**
   * Used to specify whether the attribute described is a defining element for the unique identification of the polymer.
   */
  isDefining?: boolean | undefined;
  _isDefining?: Element | undefined;
}
/**
 * Todo
 */
export interface SubstancePolymerMonomerSet extends BackboneElement {
  /**
   * Captures the type of ratio to the entire polymer, e.g. Monomer/Polymer ratio, SRU/Polymer Ratio.
   */
  ratioType?: CodeableConcept | undefined;
  /**
   * The starting materials - monomer(s) used in the synthesis of the polymer.
   */
  startingMaterial?: SubstancePolymerMonomerSetStartingMaterial[] | undefined;
}
/**
 * Applies to homopolymer and block co-polymers where the degree of polymerisation within a block can be described
 */
export interface SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation extends BackboneElement {
  /**
   * An average amount of polymerisation.
   */
  average?: number | undefined;
  /**
   * A high expected limit of the amount.
   */
  high?: number | undefined;
  /**
   * A low expected limit of the amount.
   */
  low?: number | undefined;
  /**
   * The type of the degree of polymerisation shall be described, e.g. SRU/Polymer Ratio.
   */
  type?: CodeableConcept | undefined;
}
/**
 * A graphical structure for this SRU
 */
export interface SubstancePolymerRepeatRepeatUnitStructuralRepresentation extends BackboneElement {
  /**
   * An attached file with the structural representation.
   */
  attachment?: Attachment | undefined;
  /**
   * The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.
   */
  format?: CodeableConcept | undefined;
  /**
   * The structural representation as text string in a standard format e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.
   */
  representation?: string | undefined;
  _representation?: Element | undefined;
  /**
   * The type of structure (e.g. Full, Partial, Representative).
   */
  type?: CodeableConcept | undefined;
}
/**
 * An SRU - Structural Repeat Unit
 */
export interface SubstancePolymerRepeatRepeatUnit extends BackboneElement {
  /**
   * Number of repeats of this unit.
   */
  amount?: number | undefined;
  /**
   * Applies to homopolymer and block co-polymers where the degree of polymerisation within a block can be described.
   */
  degreeOfPolymerisation?: SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation[] | undefined;
  /**
   * The orientation of the polymerisation, e.g. head-tail, head-head, random.
   */
  orientation?: CodeableConcept | undefined;
  /**
   * A graphical structure for this SRU.
   */
  structuralRepresentation?: SubstancePolymerRepeatRepeatUnitStructuralRepresentation[] | undefined;
  /**
   * Structural repeat units are essential elements for defining polymers.
   */
  unit?: string | undefined;
  _unit?: Element | undefined;
}
/**
 * Specifies and quantifies the repeated units and their configuration
 */
export interface SubstancePolymerRepeat extends BackboneElement {
  /**
   * A representation of an (average) molecular formula from a polymer.
   */
  averageMolecularFormula?: string | undefined;
  _averageMolecularFormula?: Element | undefined;
  /**
   * An SRU - Structural Repeat Unit.
   */
  repeatUnit?: SubstancePolymerRepeatRepeatUnit[] | undefined;
  /**
   * How the quantitative amount of Structural Repeat Units is captured (e.g. Exact, Numeric, Average).
   */
  repeatUnitAmountType?: CodeableConcept | undefined;
}
export interface SubstancePolymer extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SubstancePolymer';
  /**
   * Overall type of the polymer.
   */
  class?: CodeableConcept | undefined;
  /**
   * Descrtibes the copolymer sequence type (polymer connectivity).
   */
  copolymerConnectivity?: CodeableConcept[] | undefined;
  /**
   * Polymer geometry, e.g. linear, branched, cross-linked, network or dendritic.
   */
  geometry?: CodeableConcept | undefined;
  /**
   * A business idenfier for this polymer, but typically this is handled by a SubstanceDefinition identifier.
   */
  identifier?: Identifier | undefined;
  /**
   * Todo - this is intended to connect to a repeating full modification structure, also used by Protein and Nucleic Acid . String is just a placeholder.
   */
  modification?: string | undefined;
  _modification?: Element | undefined;
  /**
   * Todo.
   */
  monomerSet?: SubstancePolymerMonomerSet[] | undefined;
  /**
   * Specifies and quantifies the repeated units and their configuration.
   */
  repeat?: SubstancePolymerRepeat[] | undefined;
}
/**
 * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times
 */
export interface SubstanceProteinSubunit extends BackboneElement {
  /**
   * The modification at the C-terminal shall be specified.
   */
  cTerminalModification?: string | undefined;
  _cTerminalModification?: Element | undefined;
  /**
   * Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.
   */
  cTerminalModificationId?: Identifier | undefined;
  /**
   * Length of linear sequences of amino acids contained in the subunit.
   */
  length?: number | undefined;
  /**
   * The name of the fragment modified at the N-terminal of the SubstanceProtein shall be specified.
   */
  nTerminalModification?: string | undefined;
  _nTerminalModification?: Element | undefined;
  /**
   * Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.
   */
  nTerminalModificationId?: Identifier | undefined;
  /**
   * The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.
   */
  sequence?: string | undefined;
  _sequence?: Element | undefined;
  /**
   * The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.
   */
  sequenceAttachment?: Attachment | undefined;
  /**
   * Index of primary sequences of amino acids linked through peptide bonds in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.
   */
  subunit?: number | undefined;
}
export interface SubstanceProtein extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SubstanceProtein';
  /**
   * The disulphide bond between two cysteine residues either on the same subunit or on two different subunits shall be described. The position of the disulfide bonds in the SubstanceProtein shall be listed in increasing order of subunit number and position within subunit followed by the abbreviation of the amino acids involved. The disulfide linkage positions shall actually contain the amino acid Cysteine at the respective positions.
   */
  disulfideLinkage?: string[] | undefined;
  _disulfideLinkage?: Element[] | undefined;
  /**
   * Number of linear sequences of amino acids linked through peptide bonds. The number of subunits constituting the SubstanceProtein shall be described. It is possible that the number of subunits can be variable.
   */
  numberOfSubunits?: number | undefined;
  /**
   * The SubstanceProtein descriptive elements will only be used when a complete or partial amino acid sequence is available or derivable from a nucleic acid sequence.
   */
  sequenceType?: CodeableConcept | undefined;
  /**
   * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
   */
  subunit?: SubstanceProteinSubunit[] | undefined;
}
/**
 * Todo
 */
export interface SubstanceReferenceInformationGene extends BackboneElement {
  /**
   * Todo.
   */
  gene?: CodeableConcept | undefined;
  /**
   * Todo.
   */
  geneSequenceOrigin?: CodeableConcept | undefined;
  /**
   * Todo.
   */
  source?: Reference[] | undefined;
}
/**
 * Todo
 */
export interface SubstanceReferenceInformationGeneElement extends BackboneElement {
  /**
   * Todo.
   */
  element?: Identifier | undefined;
  /**
   * Todo.
   */
  source?: Reference[] | undefined;
  /**
   * Todo.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Todo
 */
export interface SubstanceReferenceInformationTarget extends BackboneElement {
  /**
   * Todo.
   */
  amountQuantity?: Quantity | undefined;
  /**
   * Todo.
   */
  amountRange?: Range | undefined;
  /**
   * Todo.
   */
  amountstring?: string | undefined;
  _amountstring?: Element | undefined;
  /**
   * Todo.
   */
  amountType?: CodeableConcept | undefined;
  /**
   * Todo.
   */
  interaction?: CodeableConcept | undefined;
  /**
   * Todo.
   */
  organism?: CodeableConcept | undefined;
  /**
   * Todo.
   */
  organismType?: CodeableConcept | undefined;
  /**
   * Todo.
   */
  source?: Reference[] | undefined;
  /**
   * Todo.
   */
  target?: Identifier | undefined;
  /**
   * Todo.
   */
  type?: CodeableConcept | undefined;
}
export interface SubstanceReferenceInformation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SubstanceReferenceInformation';
  /**
   * Todo.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Todo.
   */
  gene?: SubstanceReferenceInformationGene[] | undefined;
  /**
   * Todo.
   */
  geneElement?: SubstanceReferenceInformationGeneElement[] | undefined;
  /**
   * Todo.
   */
  target?: SubstanceReferenceInformationTarget[] | undefined;
}
/**
 * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels
 */
export interface SubstanceSourceMaterialFractionDescription extends BackboneElement {
  /**
   * This element is capturing information about the fraction of a plant part, or human plasma for fractionation.
   */
  fraction?: string | undefined;
  _fraction?: Element | undefined;
  /**
   * The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1.
   */
  materialType?: CodeableConcept | undefined;
}
/**
 * 4.9.13.6.1 Author type (Conditional)
 */
export interface SubstanceSourceMaterialOrganismAuthor extends BackboneElement {
  /**
   * The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank).
   */
  authorDescription?: string | undefined;
  _authorDescription?: Element | undefined;
  /**
   * The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name.
   */
  authorType?: CodeableConcept | undefined;
}
/**
 * 4.9.13.8.1 Hybrid species maternal organism ID (Optional)
 */
export interface SubstanceSourceMaterialOrganismHybrid extends BackboneElement {
  /**
   * The hybrid type of an organism shall be specified.
   */
  hybridType?: CodeableConcept | undefined;
  /**
   * The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
   */
  maternalOrganismId?: string | undefined;
  _maternalOrganismId?: Element | undefined;
  /**
   * The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
   */
  maternalOrganismName?: string | undefined;
  _maternalOrganismName?: Element | undefined;
  /**
   * The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary.
   */
  paternalOrganismId?: string | undefined;
  _paternalOrganismId?: Element | undefined;
  /**
   * The name of the paternal species constituting the hybrid organism shall be specified.
   */
  paternalOrganismName?: string | undefined;
  _paternalOrganismName?: Element | undefined;
}
/**
 * 4.9.13.7.1 Kingdom (Conditional)
 */
export interface SubstanceSourceMaterialOrganismOrganismGeneral extends BackboneElement {
  /**
   * The class of an organism shall be specified.
   */
  class?: CodeableConcept | undefined;
  /**
   * The kingdom of an organism shall be specified.
   */
  kingdom?: CodeableConcept | undefined;
  /**
   * The order of an organism shall be specified,.
   */
  order?: CodeableConcept | undefined;
  /**
   * The phylum of an organism shall be specified.
   */
  phylum?: CodeableConcept | undefined;
}
/**
 * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf
 */
export interface SubstanceSourceMaterialOrganism extends BackboneElement {
  /**
   * 4.9.13.6.1 Author type (Conditional).
   */
  author?: SubstanceSourceMaterialOrganismAuthor[] | undefined;
  /**
   * The family of an organism shall be specified.
   */
  family?: CodeableConcept | undefined;
  /**
   * The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies.
   */
  genus?: CodeableConcept | undefined;
  /**
   * 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
   */
  hybrid?: SubstanceSourceMaterialOrganismHybrid | undefined;
  /**
   * The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention.
   */
  intraspecificDescription?: string | undefined;
  _intraspecificDescription?: Element | undefined;
  /**
   * The Intraspecific type of an organism shall be specified.
   */
  intraspecificType?: CodeableConcept | undefined;
  /**
   * 4.9.13.7.1 Kingdom (Conditional).
   */
  organismGeneral?: SubstanceSourceMaterialOrganismOrganismGeneral | undefined;
  /**
   * The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies.
   */
  species?: CodeableConcept | undefined;
}
/**
 * To do
 */
export interface SubstanceSourceMaterialPartDescription extends BackboneElement {
  /**
   * Entity of anatomical origin of source material within an organism.
   */
  part?: CodeableConcept | undefined;
  /**
   * The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply.
   */
  partLocation?: CodeableConcept | undefined;
}
export interface SubstanceSourceMaterial extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SubstanceSourceMaterial';
  /**
   * The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate.
   */
  countryOfOrigin?: CodeableConcept[] | undefined;
  /**
   * Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum).
   */
  developmentStage?: CodeableConcept | undefined;
  /**
   * Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
   */
  fractionDescription?: SubstanceSourceMaterialFractionDescription[] | undefined;
  /**
   * The place/region where the plant is harvested or the places/regions where the animal source material has its habitat.
   */
  geographicalLocation?: string[] | undefined;
  _geographicalLocation?: Element[] | undefined;
  /**
   * This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
   */
  organism?: SubstanceSourceMaterialOrganism | undefined;
  /**
   * The unique identifier associated with the source material parent organism shall be specified.
   */
  organismId?: Identifier | undefined;
  /**
   * The organism accepted Scientific name shall be provided based on the organism taxonomy.
   */
  organismName?: string | undefined;
  _organismName?: Element | undefined;
  /**
   * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).
   */
  parentSubstanceId?: Identifier[] | undefined;
  /**
   * The parent substance of the Herbal Drug, or Herbal preparation.
   */
  parentSubstanceName?: string[] | undefined;
  _parentSubstanceName?: Element[] | undefined;
  /**
   * To do.
   */
  partDescription?: SubstanceSourceMaterialPartDescription[] | undefined;
  /**
   * General high level classification of the source material specific to the origin of the material.
   */
  sourceMaterialClass?: CodeableConcept | undefined;
  /**
   * The state of the source material when extracted.
   */
  sourceMaterialState?: CodeableConcept | undefined;
  /**
   * The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent.
   */
  sourceMaterialType?: CodeableConcept | undefined;
}
/**
 * The item that is delivered or supplied
 */
export interface SupplyDeliverySuppliedItem extends BackboneElement {
  /**
   * Identifies the medication, substance, device or biologically derived product being supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  itemCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the medication, substance, device or biologically derived product being supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  itemReference?: Reference | undefined;
  /**
   * The amount of the item that has been supplied.  Unit of measure may be included.
   */
  quantity?: Quantity | undefined;
}
export interface SupplyDelivery extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SupplyDelivery';
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this event.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Identification of the facility/location where the delivery was shipped to.
   */
  destination?: Reference | undefined;
  /**
   * Identifier for the supply delivery event that is used to identify it across multiple disparate systems.
   * This identifier is typically assigned by the supplier, and may be used to reference the delivery when exchanging information about it with other systems.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The date or time(s) the activity occurred.
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrencestring?: string | undefined;
  _occurrencestring?: Element | undefined;
  /**
   * The date or time(s) the activity occurred.
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrencePeriod?: Period | undefined;
  /**
   * The date or time(s) the activity occurred.
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrenceTiming?: Timing | undefined;
  /**
   * A larger event of which this particular event is a component or step.
   * Not to be used to link an event to an Encounter - use Event.context for that.
   * [The allowed reference resources may be adjusted as appropriate for the event resource].
   */
  partOf?: Reference[] | undefined;
  /**
   * A link to a resource representing the person whom the delivered item is for.
   */
  patient?: Reference | undefined;
  /**
   * Identifies the individual or organization that received the delivery.
   */
  receiver?: Reference[] | undefined;
  /**
   * A code specifying the state of the dispense event.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('in-progress'|'completed'|'abandoned'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * The item that is being delivered or has been supplied.
   */
  suppliedItem?: SupplyDeliverySuppliedItem[] | undefined;
  /**
   * The individual or organization responsible for supplying the delivery.
   */
  supplier?: Reference | undefined;
  /**
   * Indicates the type of supply being provided.  Examples include: Medication, Device, Biologically Derived Product.
   */
  type?: ('medication'|'device'|'biologicallyderivedproduct') | undefined;
}
/**
 * Ordered item details
 */
export interface SupplyRequestParameter extends BackboneElement {
  /**
   * A code or string that identifies the device detail being asserted.
   */
  code?: CodeableConcept | undefined;
  /**
   * The value of the device detail.
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of the device detail.
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the device detail.
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the device detail.
   * Range means device should have a value that falls somewhere within the specified range.
   */
  valueRange?: Range | undefined;
}
export interface SupplyRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SupplyRequest';
  /**
   * When the request was made.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * Plan/proposal/order fulfilled by this request.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
   */
  category?: CodeableConcept | undefined;
  /**
   * The patient to whom the supply will be given or for whom they will be used.
   */
  deliverFor?: Reference | undefined;
  /**
   * Where the supply is expected to come from.
   */
  deliverFrom?: Reference | undefined;
  /**
   * Where the supply is destined to go.
   */
  deliverTo?: Reference | undefined;
  /**
   * Business identifiers assigned to this SupplyRequest by the author and/or other systems. These identifiers remain constant as the resource is updated and propagates from server to server.
   * The identifier.type element is used to distinguish between the identifiers assigned by the requester/placer and the performer/filler.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
   */
  item: CodeableReference;
  /**
   * When the request should be fulfilled.
   */
  occurrencestring?: string | undefined;
  _occurrencestring?: Element | undefined;
  /**
   * When the request should be fulfilled.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * When the request should be fulfilled.
   */
  occurrenceTiming?: Timing | undefined;
  /**
   * Specific parameters for the ordered item.  For example, the size of the indicated item.
   */
  parameter?: SupplyRequestParameter[] | undefined;
  /**
   * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * The amount that is being ordered of the indicated item.
   */
  quantity: Quantity;
  /**
   * The reason why the supply item was requested.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * The device, practitioner, etc. who initiated the request.
   */
  requester?: Reference | undefined;
  /**
   * Status of the supply request.
   */
  status?: ('draft'|'active'|'suspended'|'cancelled'|'completed'|'entered-in-error'|'unknown') | undefined;
  _status?: Element | undefined;
  /**
   * Who is intended to fulfill the request.
   */
  supplier?: Reference[] | undefined;
}
/**
 * Information used to perform task
 */
export interface TaskInput extends BackboneElement {
  /**
   * A code or description indicating how the input is intended to be used as part of the task execution.
   * If referencing a BPMN workflow or Protocol, the "system" is the URL for the workflow definition and the code is the "name" of the required input.
   */
  type: CodeableConcept;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAddress?: Address | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAge?: Age | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAvailability?: Availability | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCodeableReference?: CodeableReference | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCoding?: Coding | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueContactDetail?: ContactDetail | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCount?: Count | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDataRequirement?: DataRequirement | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valuenumber?: number | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDistance?: Distance | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDosage?: Dosage | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDuration?: Duration | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueExpression?: Expression | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueExtendedContactDetail?: ExtendedContactDetail | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueHumanName?: HumanName | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueMeta?: Meta | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueMoney?: Money | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueParameterDefinition?: ParameterDefinition | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valuePeriod?: Period | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueRange?: Range | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueRatio?: Ratio | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueRatioRange?: RatioRange | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueReference?: Reference | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueRelatedArtifact?: RelatedArtifact | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueSampledData?: SampledData | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueSignature?: Signature | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueTiming?: Timing | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueTriggerDefinition?: TriggerDefinition | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueUsageContext?: UsageContext | undefined;
}
/**
 * Information produced as part of task
 */
export interface TaskOutput extends BackboneElement {
  /**
   * The name of the Output parameter.
   */
  type: CodeableConcept;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAddress?: Address | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAge?: Age | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAvailability?: Availability | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCodeableReference?: CodeableReference | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCoding?: Coding | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueContactDetail?: ContactDetail | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCount?: Count | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDataRequirement?: DataRequirement | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valuenumber?: number | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDistance?: Distance | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDosage?: Dosage | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDuration?: Duration | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueExpression?: Expression | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueExtendedContactDetail?: ExtendedContactDetail | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueHumanName?: HumanName | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueMeta?: Meta | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueMoney?: Money | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueParameterDefinition?: ParameterDefinition | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valuePeriod?: Period | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueRange?: Range | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueRatio?: Ratio | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueRatioRange?: RatioRange | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueReference?: Reference | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueRelatedArtifact?: RelatedArtifact | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueSampledData?: SampledData | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueSignature?: Signature | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueTiming?: Timing | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueTriggerDefinition?: TriggerDefinition | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueUsageContext?: UsageContext | undefined;
}
/**
 * Who or what performed the task
 */
export interface TaskPerformer extends BackboneElement {
  /**
   * The actor or entity who performed the task.
   */
  actor: Reference;
  /**
   * A code or description of the performer of the task.
   */
  function?: CodeableConcept | undefined;
}
/**
 * Constraints on fulfillment tasks
 * Task.restriction can only be present if the Task is seeking fulfillment of another Request resource, and the restriction identifies what subset of the authorization conveyed by the request is supposed to be fulfilled by this Task. A possible example could be a standing order (the request) covering a significant time period and/or individuals, while the Task seeks fulfillment for only a subset of that time-period and a single individual.
 */
export interface TaskRestriction extends BackboneElement {
  /**
   * The time-period for which fulfillment is sought. This must fall within the overall time period authorized in the referenced request.  E.g. ServiceRequest.occurance[x].
   * This is distinct from Task.executionPeriod. ExecutionPeriod indicates when the task needs to be initiated, while Task.restriction.period specifies the subset of the overall authorization that this period covers. For example, a MedicationRequest with an overall effective period of 1 year might have a Task whose restriction.period is 2 months (i.e. satisfy 2 months of medication therapy), while the execution period might be 'between now and 5 days from now' - i.e. If you say yes to this, then you're agreeing to supply medication for that 2 month period within the next 5 days.
   * Note that period.high is the due date representing the time by which the task should be completed.
   */
  period?: Period | undefined;
  /**
   * For requests that are targeted to more than one potential recipient/target, to identify who is fulfillment is sought for.
   */
  recipient?: Reference[] | undefined;
  /**
   * Indicates the number of times the requested action should occur.
   */
  repetitions?: number | undefined;
}
export interface Task extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Task';
  /**
   * The date and time this task was created.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ServiceRequest, MedicationRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfill.  This latter resource is referenced by focus.  For example, based on a CarePlan (= basedOn), a task is created to fulfill a ServiceRequest ( = focus ) to collect a specimen from a patient.
   * Task.basedOn is never the same as Task.focus.  Task.basedOn will typically not be present for 'please fulfill' Tasks as a distinct authorization is rarely needed to request fulfillment.  If the Task is seeking fulfillment of an order, the order to be fulfilled is always communicated using `focus`, never basedOn.  However, authorization may be needed to perform other types of Task actions.  As an example of when both would be present, a Task seeking suspension of a prescription might have a Task.basedOn pointing to the ServiceRequest ordering surgery (which is the driver for suspending the MedicationRequest - which would be the Task.focus).
   */
  basedOn?: Reference[] | undefined;
  /**
   * Contains business-specific nuances of the business state.
   */
  businessStatus?: CodeableConcept | undefined;
  /**
   * A name or code (or both) briefly describing what the task involves.
   * The title (eg "My Tasks", "Outstanding Tasks for Patient X") should go into the code.
   */
  code?: CodeableConcept | undefined;
  /**
   * A free-text description of what is to be performed.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * If true indicates that the Task is asking for the specified action to *not* occur.
   * The attributes provided with the Task qualify what is not to be done. For example, if a requestedPeriod is provided, the 'do not' request only applies within the specified time. If a requestedPerformer is specified then the 'do not' request only applies to performers of that type. Qualifiers include: code, subject, occurrence, requestedPerformer and performer.
   * In some cases, the Request.code may pre-coordinate prohibition into the requested action. E.g. 'NPO' (nothing by mouth), 'DNR' (do not recussitate). If this happens, doNotPerform SHALL NOT be set to true. I.e. The resource shall not have double negation. (E.g. 'Do not DNR').
   * doNotPerform should ONLY be used with Tasks that are tightly bounded in time or process phase.  E.g. 'Do not fulfill the midnight dose of medication X tonight due to the early morning scheduled procedure, where the nurse could reasonably check off 'Med X not given at midnight as instructed'.  Similarly, a decision support proposal that a patient should not be given a standard intake questionnaire (because the patient is cognitively impaired) would be marked as 'complete' or 'rejected' when the clinician preps the CarePlan or order set after reviewing the decision support results.  If there is a need to create a standing order to not do something that can't be satisfied by a single 'non-action', but rather an ongoing refusal to perform the function, MedicationRequest, ServiceRequest or some other form of authorization should be used.
   */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;
  /**
   * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
   */
  encounter?: Reference | undefined;
  /**
   * Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
   */
  executionPeriod?: Period | undefined;
  /**
   * The request being fulfilled or the resource being manipulated (changed, suspended, etc.) by this task.
   * If multiple resources need to be manipulated, use sub-tasks.  (This ensures that status can be tracked independently for each referenced resource.).
   */
  focus?: Reference | undefined;
  /**
   * The entity who benefits from the performance of the service specified in the task (e.g., the patient).
   */
  for?: Reference | undefined;
  /**
   * A shared identifier common to multiple independent Task and Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
   */
  groupIdentifier?: Identifier | undefined;
  /**
   * The business identifier for this task.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Additional information that may be needed in the execution of the task.
   */
  input?: TaskInput[] | undefined;
  /**
   * The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
   */
  instantiatesCanonical?: string | undefined;
  _instantiatesCanonical?: Element | undefined;
  /**
   * The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
   */
  instantiatesUri?: string | undefined;
  _instantiatesUri?: Element | undefined;
  /**
   * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
   */
  insurance?: Reference[] | undefined;
  /**
   * Indicates the "level" of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.
   * This element is immutable.  Proposed tasks, planned tasks, etc. must be distinct instances.
   * In most cases, Tasks will have an intent of "order".
   */
  intent: ('unknown'|'proposal'|'plan'|'order'|'original-order'|'reflex-order'|'filler-order'|'instance-order'|'option');
  _intent?: Element | undefined;
  /**
   * The date and time of last modification to this task.
   */
  lastModified?: string | undefined;
  _lastModified?: Element | undefined;
  /**
   * Principal physical location where this task is performed.
   * This should only be specified when the Task to be/being performed happens or is expected to happen primarily within the bounds of a single Location.  Other locations (e.g. source, destination, etc.) would either be reflected on the 'basedOn' Request or be conveyed as distinct Task.input values.
   */
  location?: Reference | undefined;
  /**
   * Free-text information captured about the task as it progresses.
   */
  note?: Annotation[] | undefined;
  /**
   * Outputs produced by the Task.
   */
  output?: TaskOutput[] | undefined;
  /**
   * Party responsible for managing task execution.
   * Tasks may be created with an owner not yet identified.
   */
  owner?: Reference | undefined;
  /**
   * Task that this particular task is part of.
   * This should usually be 0..1.
   */
  partOf?: Reference[] | undefined;
  /**
   * The entity who performed the requested task.
   */
  performer?: TaskPerformer[] | undefined;
  /**
   * Indicates how quickly the Task should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * A description, code, or reference indicating why this task needs to be performed.
   * This will typically not be present for Tasks with a code of 'please fulfill' as, for those, the reason for action is conveyed on the Request pointed to by Task.focus.  Some types of tasks will not need a 'reason'.  E.g. a request to discharge a patient can be inferred to be 'because the patient is ready' and this would not need a reason to be stated on the Task.
   */
  reason?: CodeableReference[] | undefined;
  /**
   * Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.
   * This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
   */
  relevantHistory?: Reference[] | undefined;
  /**
   * The kind of participant or specific participant that should perform the task.
   */
  requestedPerformer?: CodeableReference[] | undefined;
  /**
   * Indicates the start and/or end of the period of time when completion of the task is desired to take place.
   * This is typically used when the Task is *not* seeking fulfillment of a focus Request, as in that case the period would be specified on the Request and/or in the Task.restriction.period.  Instead, it is used for stand-alone tasks.
   */
  requestedPeriod?: Period | undefined;
  /**
   * The creator of the task.
   */
  requester?: Reference | undefined;
  /**
   * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
   * Task.restriction can only be present if the Task is seeking fulfillment of another Request resource, and the restriction identifies what subset of the authorization conveyed by the request is supposed to be fulfilled by this Task. A possible example could be a standing order (the request) covering a significant time period and/or individuals, while the Task seeks fulfillment for only a subset of that time-period and a single individual.
   */
  restriction?: TaskRestriction | undefined;
  /**
   * The current status of the task.
   */
  status: ('draft'|'requested'|'received'|'accepted'|'rejected'|'ready'|'cancelled'|'in-progress'|'on-hold'|'failed'|'completed'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * An explanation as to why this task is held, failed, was refused, etc.
   * This applies to the current status.  Look at the history of the task to see reasons for past statuses.
   */
  statusReason?: CodeableReference | undefined;
}
/**
 * Information about the [ConceptMap/$closure](conceptmap-operation-closure.html) operation
 */
export interface TerminologyCapabilitiesClosure extends BackboneElement {
  /**
   * If cross-system closure is supported.
   */
  translation?: boolean | undefined;
  _translation?: Element | undefined;
}
/**
 * Filter Properties supported
 */
export interface TerminologyCapabilitiesCodeSystemVersionFilter extends BackboneElement {
  /**
   * Code of the property supported.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Operations supported for the property.
   */
  op: string[];
  _op?: Element[] | undefined;
}
/**
 * Version of Code System supported
 * Language translations might not be available for all codes.
 */
export interface TerminologyCapabilitiesCodeSystemVersion extends BackboneElement {
  /**
   * For version-less code systems, there should be a single version with no identifier.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * If the compositional grammar defined by the code system is supported.
   */
  compositional?: boolean | undefined;
  _compositional?: Element | undefined;
  /**
   * Filter Properties supported.
   */
  filter?: TerminologyCapabilitiesCodeSystemVersionFilter[] | undefined;
  /**
   * If this is the default version for this code system.
   */
  isDefault?: boolean | undefined;
  _isDefault?: Element | undefined;
  /**
   * Language Displays supported.
   */
  language?: ('ar'|'bg'|'bg-BG'|'bn'|'cs'|'cs-CZ'|'bs'|'bs-BA'|'da'|'da-DK'|'de'|'de-AT'|'de-CH'|'de-DE'|'el'|'el-GR'|'en'|'en-AU'|'en-CA'|'en-GB'|'en-IN'|'en-NZ'|'en-SG'|'en-US'|'es'|'es-AR'|'es-ES'|'es-UY'|'et'|'et-EE'|'fi'|'fr'|'fr-BE'|'fr-CH'|'fr-FR'|'fi-FI'|'fr-CA'|'fy'|'fy-NL'|'hi'|'hr'|'hr-HR'|'is'|'is-IS'|'it'|'it-CH'|'it-IT'|'ja'|'ko'|'lt'|'lt-LT'|'lv'|'lv-LV'|'nl'|'nl-BE'|'nl-NL'|'no'|'no-NO'|'pa'|'pl'|'pl-PL'|'pt'|'pt-PT'|'pt-BR'|'ro'|'ro-RO'|'ru'|'ru-RU'|'sk'|'sk-SK'|'sl'|'sl-SI'|'sr'|'sr-RS'|'sv'|'sv-SE'|'te'|'zh'|'zh-CN'|'zh-HK'|'zh-SG'|'zh-TW')[] | undefined;
  _language?: Element[] | undefined;
  /**
   * Properties supported for $lookup.
   */
  property?: string[] | undefined;
  _property?: Element[] | undefined;
}
/**
 * A code system supported by the server
 * The code system - identified by its system URL - may also be declared explicitly as a Code System Resource at /CodeSystem, but it might not be.
 */
export interface TerminologyCapabilitiesCodeSystem extends BackboneElement {
  /**
   * The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
   */
  content: ('not-present'|'example'|'fragment'|'complete'|'supplement');
  _content?: Element | undefined;
  /**
   * True if subsumption is supported for this version of the code system.
   */
  subsumption?: boolean | undefined;
  _subsumption?: Element | undefined;
  /**
   * Canonical identifier for the code system, represented as a URI.
   */
  uri?: string | undefined;
  _uri?: Element | undefined;
  /**
   * For the code system, a list of versions that are supported by the server.
   * Language translations might not be available for all codes.
   */
  version?: TerminologyCapabilitiesCodeSystemVersion[] | undefined;
}
/**
 * Supported expansion parameter
 */
export interface TerminologyCapabilitiesExpansionParameter extends BackboneElement {
  /**
   * Description of support for parameter.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * Name of the supported expansion parameter.
   */
  name: string;
  _name?: Element | undefined;
}
/**
 * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation
 */
export interface TerminologyCapabilitiesExpansion extends BackboneElement {
  /**
   * Whether the server can return nested value sets.
   */
  hierarchical?: boolean | undefined;
  _hierarchical?: Element | undefined;
  /**
   * True if requests for incomplete expansions are allowed.
   */
  incomplete?: boolean | undefined;
  _incomplete?: Element | undefined;
  /**
   * Whether the server supports paging on expansion.
   */
  paging?: boolean | undefined;
  _paging?: Element | undefined;
  /**
   * Supported expansion parameter.
   */
  parameter?: TerminologyCapabilitiesExpansionParameter[] | undefined;
  /**
   * Documentation about text searching works.
   * This documentation should cover things like case sensitivity,  use of punctuation if not ignored, what wild cards are supported (if any), whether text is starts with or contains, and whether word order matters.
   */
  textFilter?: string | undefined;
  _textFilter?: Element | undefined;
}
/**
 * If this describes a specific instance
 */
export interface TerminologyCapabilitiesImplementation extends BackboneElement {
  /**
   * Information about the specific installation that this terminology capability statement relates to.
   */
  description: string;
  _description?: Element | undefined;
  /**
   * An absolute base URL for the implementation.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * Software that is covered by this terminology capability statement
 */
export interface TerminologyCapabilitiesSoftware extends BackboneElement {
  /**
   * Name the software is known by.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The version identifier for the software covered by this statement.
   * If possible, a version should be specified, as statements are likely to be different for different versions of software.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation
 */
export interface TerminologyCapabilitiesTranslation extends BackboneElement {
  /**
   * Whether the client must identify the map.
   */
  needsMap: boolean;
  _needsMap?: Element | undefined;
}
/**
 * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation
 */
export interface TerminologyCapabilitiesValidateCode extends BackboneElement {
  /**
   * Whether translations are validated.
   */
  translations: boolean;
  _translations?: Element | undefined;
}
export interface TerminologyCapabilities extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'TerminologyCapabilities';
  /**
   * Whether the $closure operation is supported.
   */
  closure?: TerminologyCapabilitiesClosure | undefined;
  /**
   * The degree to which the server supports the code search parameter on ValueSet, if it is supported.
   * See notes on the [ValueSet](valueset.html#) resource.
   */
  codeSearch?: ('in-compose'|'in-expansion'|'in-compose-or-expansion') | undefined;
  _codeSearch?: Element | undefined;
  /**
   * Identifies a code system that is supported by the server. If there is a no code system URL, then this declares the general assumptions a client can make about support for any CodeSystem resource.
   * The code system - identified by its system URL - may also be declared explicitly as a Code System Resource at /CodeSystem, but it might not be.
   */
  codeSystem?: TerminologyCapabilitiesCodeSystem[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the terminology capabilities and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the terminology capabilities.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date  (and optionally time) when the terminology capabilities was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the terminology capabilities changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the terminology capabilities. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date: string;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the terminology capabilities from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the terminology capabilities as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the terminology capabilities is presumed to be the predominant language in the place the terminology capabilities was created).This does not need to be populated if the description is adequately implied by the software or implementation details.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
   */
  expansion?: TerminologyCapabilitiesExpansion | undefined;
  /**
   * A Boolean value to indicate that this terminology capabilities is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of terminology capabilitiess that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this terminology capabilities when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this terminology capabilities outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
   */
  implementation?: TerminologyCapabilitiesImplementation | undefined;
  /**
   * A legal or geographic region in which the terminology capabilities is intended to be used.
   * It may be possible for the terminology capabilities to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
   */
  kind: ('instance'|'capability'|'requirements');
  _kind?: Element | undefined;
  /**
   * Whether the server supports lockedDate.
   */
  lockedDate?: boolean | undefined;
  _lockedDate?: Element | undefined;
  /**
   * A natural language name identifying the terminology capabilities. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the terminology capabilities.
   * Usually an organization but may be an individual. The publisher (or steward) of the terminology capabilities is the organization or individual primarily responsible for the maintenance and upkeep of the terminology capabilities. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the terminology capabilities. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this terminology capabilities is needed and why it has been designed as it has.
   * This element does not describe the usage of the terminology capabilities. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this terminology capabilities.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
   */
  software?: TerminologyCapabilitiesSoftware | undefined;
  /**
   * The status of this terminology capabilities. Enables tracking the life-cycle of the content.
   * Allows filtering of terminology capabilitiess that are appropriate for use versus not.This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the terminology capabilities.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
   */
  translation?: TerminologyCapabilitiesTranslation | undefined;
  /**
   * An absolute URI that is used to identify this terminology capabilities when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this terminology capabilities is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the terminology capabilities is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate terminology capabilities instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
   */
  validateCode?: TerminologyCapabilitiesValidateCode | undefined;
  /**
   * The identifier that is used to identify this version of the terminology capabilities when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the terminology capabilities author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different terminology capabilities instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the terminology capabilities with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * The required criteria to execute the test plan - e.g. preconditions, previous tests
 */
export interface TestPlanDependency extends BackboneElement {
  /**
   * A textual description of the criterium - what is needed for the dependency to be considered met.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Predecessor test plans - those that are expected to be successfully performed as a dependency for the execution of this test plan.
   */
  predecessor?: Reference | undefined;
}
/**
 * Test assertions or expectations
 */
export interface TestPlanTestCaseAssertion extends BackboneElement {
  /**
   * The focus or object of the assertion i.e. a resource.
   */
  object?: CodeableReference[] | undefined;
  /**
   * The test assertion - the expected outcome from the test case execution.
   */
  result?: CodeableReference[] | undefined;
  /**
   * The test assertion type - this can be used to group assertions as 'required' or 'optional', or can be used for other classification of the assertion.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Required criteria to execute the test case
 */
export interface TestPlanTestCaseDependency extends BackboneElement {
  /**
   * Description of the criteria.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Link to predecessor test plans.
   */
  predecessor?: Reference | undefined;
}
/**
 * The test data used in the test case
 */
export interface TestPlanTestCaseTestData extends BackboneElement {
  /**
   * The actual test resources when they exist.
   */
  content?: Reference | undefined;
  /**
   * Pointer to a definition of test resources - narrative or structured e.g. synthetic data generation, etc.
   */
  sourceReference?: Reference | undefined;
  /**
   * Pointer to a definition of test resources - narrative or structured e.g. synthetic data generation, etc.
   */
  sourcestring?: string | undefined;
  _sourcestring?: Element | undefined;
  /**
   * The type of test data description, e.g. 'synthea'.
   */
  type: Coding;
}
/**
 * The test cases in a structured language e.g. gherkin, Postman, or FHIR TestScript
 */
export interface TestPlanTestCaseTestRunScript extends BackboneElement {
  /**
   * The language for the test cases e.g. 'gherkin', 'testscript'.
   */
  language?: CodeableConcept | undefined;
  /**
   * The actual content of the cases - references to TestScripts or externally defined content.
   */
  sourceReference?: Reference | undefined;
  /**
   * The actual content of the cases - references to TestScripts or externally defined content.
   */
  sourcestring?: string | undefined;
  _sourcestring?: Element | undefined;
}
/**
 * The actual test to be executed
 */
export interface TestPlanTestCaseTestRun extends BackboneElement {
  /**
   * The narrative description of the tests.
   */
  narrative?: string | undefined;
  _narrative?: Element | undefined;
  /**
   * The test cases in a structured language e.g. gherkin, Postman, or FHIR TestScript.
   */
  script?: TestPlanTestCaseTestRunScript | undefined;
}
/**
 * The test cases that constitute this plan
 */
export interface TestPlanTestCase extends BackboneElement {
  /**
   * The test assertions - the expectations of test results from the execution of the test case.
   */
  assertion?: TestPlanTestCaseAssertion[] | undefined;
  /**
   * The required criteria to execute the test case - e.g. preconditions, previous tests.
   */
  testCaseDependency?: TestPlanTestCaseDependency[] | undefined;
  /**
   * The scope or artifact covered by the case, when the individual test case is associated with a testable artifact.
   */
  scope?: Reference[] | undefined;
  /**
   * Sequence of test case - an ordinal number that indicates the order for the present test case in the test plan.
   */
  sequence?: number | undefined;
  /**
   * The test data used in the test case.
   */
  testData?: TestPlanTestCaseTestData[] | undefined;
  /**
   * The actual test to be executed.
   */
  testRun?: TestPlanTestCaseTestRun[] | undefined;
}
export interface TestPlan extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'TestPlan';
  /**
   * The category of the Test Plan - can be acceptance, unit, performance, etc.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the test plan and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test plan. The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date (and optionally time) when the test plan was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test plan changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the test plan. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The required criteria to execute the test plan - e.g. preconditions, previous tests...
   */
  dependency?: TestPlanDependency[] | undefined;
  /**
   * A free text natural language description of the test plan from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the test plan as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the test plan is presumed to be the predominant language in the place the test plan was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The threshold or criteria for the test plan to be considered successfully executed - narrative.
   */
  exitCriteria?: string | undefined;
  _exitCriteria?: Element | undefined;
  /**
   * A Boolean value to indicate that this test plan is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of test plans that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this test plan when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this test plan outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the test plan is intended to be used.
   * It may be possible for the test plan to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A natural language name identifying the test plan. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the test plan.
   * Usually an organization but may be an individual. The publisher (or steward) of the test plan is the organization or individual primarily responsible for the maintenance and upkeep of the test plan. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the test plan. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this test plan is needed and why it has been designed as it has.
   * This element does not describe the usage of the test plan Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this test plan.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * What is being tested with this Test Plan - a conformance resource, or narrative criteria, or an external reference...
   */
  scope?: Reference[] | undefined;
  /**
   * The status of this test plan. Enables tracking the life-cycle of the content.
   * Allows filtering of test plans that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * The individual test cases that are part of this plan, when they they are made explicit.
   */
  testCase?: TestPlanTestCase[] | undefined;
  /**
   * A description of test tools to be used in the test plan.
   */
  testTools?: string | undefined;
  _testTools?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the test plan.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this test plan when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this test plan is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the test plan is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test plan instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the test plan when it is referenced in a specification, model, design or instance.  This is an arbitrary value managed by the test plan author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different test plan instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the test plan with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * A participant in the test execution, either the execution engine, a client, or a server
 */
export interface TestReportParticipant extends BackboneElement {
  /**
   * The display name of the participant.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * The type of participant.
   */
  type: ('test-engine'|'client'|'server');
  _type?: Element | undefined;
  /**
   * The uri of the participant. An absolute URL is preferred.
   */
  uri: string;
  _uri?: Element | undefined;
}
/**
 * Links or references to the testing requirements
 * TestScript and TestReport instances are typically (and expected to be) based on known, defined test requirements and documentation. These links provide traceability from the executable/executed TestScript and TestReport tests to these requirements.
 */
export interface TestReportSetupActionAssertRequirement extends BackboneElement {
  /**
   * Link or reference providing traceability to the testing requirement for this test.
   */
  linkstring?: string | undefined;
  _linkstring?: Element | undefined;
}
/**
 * The assertion to perform
 */
export interface TestReportSetupActionAssert extends BackboneElement {
  /**
   * A link to further details on the result.
   */
  detail?: string | undefined;
  _detail?: Element | undefined;
  /**
   * An explanatory message associated with the result.
   */
  message?: string | undefined;
  _message?: Element | undefined;
  /**
   * Links or references providing traceability to the testing requirements for this assert.
   * TestScript and TestReport instances are typically (and expected to be) based on known, defined test requirements and documentation. These links provide traceability from the executable/executed TestScript and TestReport tests to these requirements.
   */
  requirement?: TestReportSetupActionAssertRequirement[] | undefined;
  /**
   * The result of this assertion.
   */
  result: ('pass'|'skip'|'fail'|'warning'|'error');
  _result?: Element | undefined;
}
/**
 * The operation to perform
 */
export interface TestReportSetupActionOperation extends BackboneElement {
  /**
   * A link to further details on the result.
   */
  detail?: string | undefined;
  _detail?: Element | undefined;
  /**
   * An explanatory message associated with the result.
   */
  message?: string | undefined;
  _message?: Element | undefined;
  /**
   * The result of this operation.
   */
  result: ('pass'|'skip'|'fail'|'warning'|'error');
  _result?: Element | undefined;
}
/**
 * A setup operation or assert that was executed
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestReportSetupAction extends BackboneElement {
  /**
   * The results of the assertion performed on the previous operations.
   */
  assert?: TestReportSetupActionAssert | undefined;
  /**
   * The operation performed.
   */
  operation?: TestReportSetupActionOperation | undefined;
}
/**
 * The results of the series of required setup operations before the tests were executed
 */
export interface TestReportSetup extends BackboneElement {
  /**
   * Action would contain either an operation or an assertion.
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  setupAction: TestReportSetupAction[];
}
/**
 * One or more teardown operations performed
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestReportTeardownAction extends BackboneElement {
  /**
   * An operation would involve a REST request to a server.
   */
  operation: TestReportSetupActionOperation;
}
/**
 * The results of running the series of required clean up steps
 */
export interface TestReportTeardown extends BackboneElement {
  /**
   * The teardown action will only contain an operation.
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  teardownAction: TestReportTeardownAction[];
}
/**
 * A test operation or assert that was performed
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestReportTestAction extends BackboneElement {
  /**
   * The results of the assertion performed on the previous operations.
   */
  assert?: TestReportSetupActionAssert | undefined;
  /**
   * An operation would involve a REST request to a server.
   */
  operation?: TestReportSetupActionOperation | undefined;
}
/**
 * A test executed from the test script
 */
export interface TestReportTest extends BackboneElement {
  /**
   * Action would contain either an operation or an assertion.
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  testAction: TestReportTestAction[];
  /**
   * A short description of the test used by test engines for tracking and reporting purposes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The name of this test used for tracking/logging purposes by test engines.
   */
  name?: string | undefined;
  _name?: Element | undefined;
}
export interface TestReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'TestReport';
  /**
   * Identifier for the TestReport assigned for external purposes outside the context of FHIR.
   */
  identifier?: Identifier | undefined;
  /**
   * When the TestScript was executed and this TestReport was generated.
   * Additional specific dates may be added as extensions.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * A free text natural language name identifying the executed TestReport.
   * Not expected to be globally unique.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A participant in the test execution, either the execution engine, a client, or a server.
   */
  participant?: TestReportParticipant[] | undefined;
  /**
   * The overall result from the execution of the TestScript.
   * The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.
   */
  result: ('pass'|'fail'|'pending');
  _result?: Element | undefined;
  /**
   * The final score (percentage of tests passed) resulting from the execution of the TestScript.
   */
  score?: number | undefined;
  /**
   * The results of the series of required setup operations before the tests were executed.
   */
  setup?: TestReportSetup | undefined;
  /**
   * The current state of this test report.
   * The status represents where the execution is currently within the test script execution life cycle.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('completed'|'in-progress'|'waiting'|'stopped'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
   */
  teardown?: TestReportTeardown | undefined;
  /**
   * A test executed from the test script.
   */
  test?: TestReportTest[] | undefined;
  /**
   * Name of the tester producing this report (Organization or individual).
   * Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.
   */
  tester?: string | undefined;
  _tester?: Element | undefined;
  /**
   * Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.
   */
  testScript: string;
  _testScript?: Element | undefined;
}
/**
 * An abstract server representing a destination or receiver in a message exchange
 * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
 */
export interface TestScriptDestination extends BackboneElement {
  /**
   * Abstract name given to a destination server in this test script.  The name is provided as a number starting at 1.
   * A given destination index (e.g. 1) can appear only once in the list (e.g. Destination 1 cannot be specified twice ... once as Form-Manager and again as Form-Processor within the same script as that could get confusing during test configuration). 
   * Different destination indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Manager).
   * The destination indices provided elsewhere in the test script must be one of these destination indices.
   */
  index: number;
  /**
   * The type of destination profile the test system supports.
   * Must be a "receiver"/"server" profile.
   */
  profile: Coding;
  /**
   * The explicit url path of the destination server used in this test script.
   * If provided, the test engine is not expected to prompt for or accept external input of this value.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * Fixture in the test script - by reference (uri)
 */
export interface TestScriptFixture extends BackboneElement {
  /**
   * Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
   */
  autocreate: boolean;
  _autocreate?: Element | undefined;
  /**
   * Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
   */
  autodelete: boolean;
  _autodelete?: Element | undefined;
  /**
   * Reference to the resource (containing the contents of the resource needed for operations). This is allowed to be a Parameters resource.
   * See the [Resource List](resourcelist.html) for complete list of resource types.
   */
  resource?: Reference | undefined;
}
/**
 * Capabilities  that are assumed to function correctly on the FHIR server being tested
 * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
 */
export interface TestScriptMetadataCapability extends BackboneElement {
  /**
   * Minimum capabilities required of server for test script to execute successfully.   If server does not meet at a minimum the referenced capability statement, then all tests in this script are skipped.
   * The conformance statement of the server has to contain at a minimum the contents of the reference pointed to by this element.
   */
  capabilities: string;
  _capabilities?: Element | undefined;
  /**
   * Description of the capabilities that this test script is requiring the server to support.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Which server these requirements apply to.
   */
  destination?: number | undefined;
  /**
   * Links to the FHIR specification that describes this interaction and the resources involved in more detail.
   */
  link?: string[] | undefined;
  _link?: Element[] | undefined;
  /**
   * Which origin server these requirements apply to.
   */
  origin?: number[] | undefined;
  /**
   * Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
   */
  required: boolean;
  _required?: Element | undefined;
  /**
   * Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
   */
  validated: boolean;
  _validated?: Element | undefined;
}
/**
 * Links to the FHIR specification
 */
export interface TestScriptMetadataLink extends BackboneElement {
  /**
   * Short description of the link.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * URL to a particular requirement or feature within the FHIR specification.
   */
  url: string;
  _url?: Element | undefined;
}
/**
 * Required capability that is assumed to function correctly on the FHIR server being tested
 */
export interface TestScriptMetadata extends BackboneElement {
  /**
   * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
   * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
   */
  capability: TestScriptMetadataCapability[];
  /**
   * A link to the FHIR specification that this test is covering.
   */
  link?: TestScriptMetadataLink[] | undefined;
}
/**
 * An abstract server representing a client or sender in a message exchange
 * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
 */
export interface TestScriptOrigin extends BackboneElement {
  /**
   * Abstract name given to an origin server in this test script.  The name is provided as a number starting at 1.
   * A given origin index (e.g. 1) can appear only once in the list (e.g. Origin 1 cannot be specified twice ... once as FormFiller and again as FormProcessor within the same script as that could get confusing during test configuration). 
   * Different origin indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Filler).
   * The origin indices provided elsewhere in the test script must be one of these origin indices.
   */
  index: number;
  /**
   * The type of origin profile the test system supports.
   * Must be a "sender"/"client" profile.
   */
  profile: Coding;
  /**
   * The explicit url path of the origin server used in this test script.
   * If provided, the test engine is not expected to prompt for or accept external input of this value.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * Indication of the artifact(s) that are tested by this test case
 */
export interface TestScriptScope extends BackboneElement {
  /**
   * The specific conformance artifact being tested. The canonical reference can be version-specific.
   */
  artifact: string;
  _artifact?: Element | undefined;
  /**
   * The expectation of whether the test must pass for the system to be considered conformant with the artifact: required - all tests are expected to pass, optional - all test are expected to pass but non-pass status may be allowed, strict - all tests are expected to pass and warnings are treated as a failure.
   */
  conformance?: CodeableConcept | undefined;
  /**
   * The phase of testing for this artifact: unit - development / implementation phase, integration - internal system to system phase, production - live system to system phase (Note, this may involve pii/phi data).
   */
  phase?: CodeableConcept | undefined;
}
/**
 * Links or references to the testing requirements
 * TestScript and TestReport instances are typically (and expected to be) based on known, defined test requirements and documentation. These links provide traceability from the executable/executed TestScript and TestReport tests to these requirements.
 */
export interface TestScriptSetupActionAssertRequirement extends BackboneElement {
  /**
   * Link or reference providing traceability to the testing requirement for this test.
   */
  linkstring?: string | undefined;
  _linkstring?: Element | undefined;
}
/**
 * The assertion to perform
 * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
 */
export interface TestScriptSetupActionAssert extends BackboneElement {
  /**
   * The FHIRPath expression for a specific value to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
   * Thefhirpath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.
   */
  compareToSourceExpression?: string | undefined;
  _compareToSourceExpression?: Element | undefined;
  /**
   * Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition.
   */
  compareToSourceId?: string | undefined;
  _compareToSourceId?: Element | undefined;
  /**
   * XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
   * The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.
   */
  compareToSourcePath?: string | undefined;
  _compareToSourcePath?: Element | undefined;
  /**
   * The mime-type contents to compare against the request or response message 'Content-Type' header.
   * If this is specified, then test engine shall confirm that the content-type of the last operation's headers is set to this value.  If "assert.sourceId" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation's headers).  If you'd like to have more control over the string, then use 'assert.headerField' instead.
   */
  contentType?: string | undefined;
  _contentType?: Element | undefined;
  /**
   * The default manual completion outcome applied to this assertion.
   * Manual completion is used to pause the test engine execution and evaluation allowing an external review of the defined assert condition. The defaultManualCompletion defines the default manual completion outcome applied if one of the enumerated values is not applied.
   */
  defaultManualCompletion?: ('fail'|'pass'|'skip'|'stop') | undefined;
  _defaultManualCompletion?: Element | undefined;
  /**
   * The description would be used by test engines for tracking and reporting purposes.
   * This has no impact on the verification itself.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The direction to use for the assertion.
   * If the direction is specified as "response" (the default), then the processing of this assert is against the received response message. If the direction is specified as "request", then the processing of this assert is against the sent request message.
   */
  direction?: ('response'|'request') | undefined;
  _direction?: Element | undefined;
  /**
   * The FHIRPath expression to be evaluated against the request or response message contents - HTTP headers and payload.
   * If both "expression" and a "fixtureId" are specified, then the expression will be evaluated against the request or response body mapped to the fixtureId. If "expression" is specified and a "fixtureId" is not, then the expression will be evaluated against the response body of the last operation. Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.
   * The FHIRPath expression can be evaluated as either a path to a specific value or as a boolean expression against the given FHIR resource. When the FHIRPath is a boolean expression, the assert.value element is not used. See [Testing FHIR Use Expressions](testing.html#expressions).
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * The HTTP header field name e.g. 'Location'.
   * If "headerField" is specified then "value" must be specified.  If "sourceId" is not specified, then "headerField" will be evaluated against the last operation's response headers.  Test engines are to keep track of the last operation's response body and response headers.
   */
  headerField?: string | undefined;
  _headerField?: Element | undefined;
  /**
   * The label would be used for tracking/logging purposes by test engines.
   * This has no impact on the verification itself.
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * The ID of a fixture. Asserts that the response contains at a minimum the fixture specified by minimumId.
   * Asserts that the response contains all the element/content in another fixture pointed to by minimumId. This can be a statically defined fixture or one that is dynamically set via responseId.
   * See [Testing FHIR Use minimumId](testing.html##minimumId) for a more complete description of the test engine's comparison logic.
   */
  minimumId?: string | undefined;
  _minimumId?: Element | undefined;
  /**
   * Whether or not the test execution performs validation on the bundle navigation links.
   * Asserts that the Bundle contains first, last, and next links.
   */
  navigationLinks?: boolean | undefined;
  _navigationLinks?: Element | undefined;
  /**
   * The operator type defines the conditional behavior of the assert.
   * Operators are useful for both positive and negative testing. If operator is not specified, then the default conditional behavior is implemented as defined in [Testing FHIR Assertions](testing.html#assertion-table).
   */
  operator?: ('equals'|'notEquals'|'in'|'notIn'|'greaterThan'|'lessThan'|'empty'|'notEmpty'|'contains'|'notContains'|'eval'|'manualEval') | undefined;
  _operator?: Element | undefined;
  /**
   * The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
   * If both "path" and a "fixtureId" are specified, then the path will be evaluated against the request or response body mapped to the fixtureId.  If "path" is specified and a "fixtureId" is not, then the path will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.
   */
  path?: string | undefined;
  _path?: Element | undefined;
  /**
   * The request method or HTTP operation code to compare against that used by the client system under test.
   * If "requestMethod" is specified then it will be used in place of "value". The "requestMethod" will evaluate against the last operation's request HTTP operation.
   */
  requestMethod?: ('delete'|'get'|'options'|'patch'|'post'|'put'|'head') | undefined;
  _requestMethod?: Element | undefined;
  /**
   * The value to use in a comparison against the request URL path string.
   * If "requestURL" is specified then it will be used in place of "value". The "requestURL" will evaluate against the last operation's full request URL path string.
   */
  requestURL?: string | undefined;
  _requestURL?: Element | undefined;
  /**
   * Links or references providing traceability to the testing requirements for this assert.
   * TestScript and TestReport instances are typically (and expected to be) based on known, defined test requirements and documentation. These links provide traceability from the executable/executed TestScript and TestReport tests to these requirements.
   */
  requirement?: TestScriptSetupActionAssertRequirement[] | undefined;
  /**
   * The type of the resource.  See the [resource list](resourcelist.html).
   * This will be expected resource type in response body e.g. in read, vread, search, etc.  See the [Resource List](resourcelist.html) for complete list of resource types; e.g. <assert > <resourceType value="Patient" </assert>.
   */
  resource?: string | undefined;
  _resource?: Element | undefined;
  /**
   * continue | switchingProtocols | okay | created | accepted | nonAuthoritativeInformation | noContent | resetContent | partialContent | multipleChoices | movedPermanently | found | seeOther | notModified | useProxy | temporaryRedirect | permanentRedirect | badRequest | unauthorized | paymentRequired | forbidden | notFound | methodNotAllowed | notAcceptable | proxyAuthenticationRequired | requestTimeout | conflict | gone | lengthRequired | preconditionFailed | contentTooLarge | uriTooLong | unsupportedMediaType | rangeNotSatisfiable | expectationFailed | misdirectedRequest | unprocessableContent | upgradeRequired | internalServerError | notImplemented | badGateway | serviceUnavailable | gatewayTimeout | httpVersionNotSupported.
   * This is a shorter way of achieving similar verifications via "assert.responseCode".  If you need more control, then use "assert.responseCode"  e.g. <assert>  <contentType value="json" />  <response value="okay"/> </assert>.
   */
  response?: ('continue'|'switchingProtocols'|'okay'|'created'|'accepted'|'nonAuthoritativeInformation'|'noContent'|'resetContent'|'partialContent'|'multipleChoices'|'movedPermanently'|'found'|'seeOther'|'notModified'|'useProxy'|'temporaryRedirect'|'permanentRedirect'|'badRequest'|'unauthorized'|'paymentRequired'|'forbidden'|'notFound'|'methodNotAllowed'|'notAcceptable'|'proxyAuthenticationRequired'|'requestTimeout'|'conflict'|'gone'|'lengthRequired'|'preconditionFailed'|'contentTooLarge'|'uriTooLong'|'unsupportedMediaType'|'rangeNotSatisfiable'|'expectationFailed'|'misdirectedRequest'|'unprocessableContent'|'upgradeRequired'|'internalServerError'|'notImplemented'|'badGateway'|'serviceUnavailable'|'gatewayTimeout'|'httpVersionNotSupported') | undefined;
  _response?: Element | undefined;
  /**
   * The value of the HTTP response code to be tested.
   * To be used with "operator" attribute value. Asserts that the response code equals this value if "operator" is not specified.   If the operator is "in" or "notIn" then the responseCode would be a comma-separated list of values e.g. "200,201". Otherwise, it's expected to be a numeric value.   If "fixture" is not specified, then the "responseBodyId" value of the last operation is assumed.
   */
  responseCode?: string | undefined;
  _responseCode?: Element | undefined;
  /**
   * Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
   * This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.
   */
  sourceId?: string | undefined;
  _sourceId?: Element | undefined;
  /**
   * Whether or not the current test execution will stop on failure for this assert.
   * If this element is specified and it is true, then assertion failures should not stop the current test execution from proceeding.
   */
  stopTestOnFail: boolean;
  _stopTestOnFail?: Element | undefined;
  /**
   * The ID of the Profile to validate against.
   * The ID of a Profile fixture. Asserts that the response is valid according to the Profile specified by validateProfileId.
   */
  validateProfileId?: string | undefined;
  _validateProfileId?: Element | undefined;
  /**
   * The value to compare to.
   * The string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.
   */
  value?: string | undefined;
  _value?: Element | undefined;
  /**
   * Whether or not the test execution will produce a warning only on error for this assert.
   * If this element is specified and it is true, then assertion failures can be logged by test engine but should not stop the test script execution from proceeding.  There are likely cases where the spec is not clear on what should happen. If the spec says something is optional (maybe a response header for example), but a server doesn’t do it, we could choose to issue a warning.
   */
  warningOnly: boolean;
  _warningOnly?: Element | undefined;
}
/**
 * Each operation can have one or more header elements
 * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  ["If-Match" header](http.html#2.1.0.5.1).  See [Conditional Create using "If-None-Exist"](http.html#2.1.0.11).  See [Invalid "Content-Type" header](http.html#2.1.0.13.1) for negative testing. - etc.
 */
export interface TestScriptSetupActionOperationRequestHeader extends BackboneElement {
  /**
   * The HTTP header field e.g. "Accept".
   * If header element is specified, then field is required.
   */
  field: string;
  _field?: Element | undefined;
  /**
   * The value of the header e.g. "application/fhir+xml".
   * If header element is specified, then value is required.  No conversions will be done by the test engine e.g. "xml" to "application/fhir+xml".  The values will be set in HTTP headers "as-is".  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * The setup operation to perform
 */
export interface TestScriptSetupActionOperation extends BackboneElement {
  /**
   * The mime-type to use for RESTful operation in the 'Accept' header.
   * If this is specified, then test engine shall set the 'Accept' header to the corresponding value.  If you'd like to explicitly set the 'Accept' to some other value then use the 'requestHeader' element.
   */
  accept?: string | undefined;
  _accept?: Element | undefined;
  /**
   * The mime-type to use for RESTful operation in the 'Content-Type' header.
   * If this is specified, then test engine shall set the 'Content-Type' header to the corresponding value.  If you'd like to explicitly set the 'Content-Type' to some other value then use the 'requestHeader' element.
   */
  contentType?: string | undefined;
  _contentType?: Element | undefined;
  /**
   * The description would be used by test engines for tracking and reporting purposes.
   * This has no impact on the verification itself.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section.
   * If multiple TestScript.destination elements are defined and operation.destination is undefined, test engine will report an error as it cannot determine what destination to use for the exchange.
   */
  destination?: number | undefined;
  /**
   * Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
   */
  encodeRequestUrl: boolean;
  _encodeRequestUrl?: Element | undefined;
  /**
   * The label would be used for tracking/logging purposes by test engines.
   * This has no impact on the verification itself.
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * The HTTP method the test engine MUST use for this operation regardless of any other operation details.
   * The primary purpose of the explicit HTTP method is support of  HTTP POST method invocation of the FHIR search. Other uses will include support of negative testing.
   */
  method?: ('delete'|'get'|'options'|'patch'|'post'|'put'|'head') | undefined;
  _method?: Element | undefined;
  /**
   * The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section.
   * If absent, test engine will send the message.  When present, test engine will not send the request message but will wait for the request message to be sent from this origin server.
   */
  origin?: number | undefined;
  /**
   * Path plus parameters after [type].  Used to set parts of the request URL explicitly.
   * If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored.  For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present.  For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url.  For "vread" and "history" operations, the versionId value will also be used.   Test engines would append whatever is specified for "params" to the URL after the resource type without tampering with the string (beyond encoding the URL for HTTP).  The "params" element does not correspond exactly to "search parameters".  Nor is it the "path".  It corresponds to the part of the URL that comes after the [type] (when "resource" element is specified); e.g. It corresponds to "/[id]/_history/[vid] {?_format=[mime-type]}" in the following operation: GET [base]/[type]/[id]/_history/[vid] {?_format=[mime-type]}  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
   */
  params?: string | undefined;
  _params?: Element | undefined;
  /**
   * Header elements would be used to set HTTP headers.
   * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  ["If-Match" header](http.html#2.1.0.5.1).  See [Conditional Create using "If-None-Exist"](http.html#2.1.0.11).  See [Invalid "Content-Type" header](http.html#2.1.0.13.1) for negative testing. - etc.
   */
  requestHeader?: TestScriptSetupActionOperationRequestHeader[] | undefined;
  /**
   * The fixture id (maybe new) to map to the request.
   * If a requestId is supplied, then the resulting request (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by "requestId".  If requestId is not specified, it is the test engine's responsibility to store the request and use it as the requestId in subsequent assertions when assertion path and/or headerField is specified, direction is equal to request, and the requestId in not specified.
   */
  requestId?: string | undefined;
  _requestId?: Element | undefined;
  /**
   * The type of the FHIR resource. See the [resource list](resourcelist.html). Data type of uri is needed when non-HL7 artifacts are identified.
   * If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored. For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present. For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url. For "vread" and "history" operations, the versionId value will also be used.
   */
  resource?: string | undefined;
  _resource?: Element | undefined;
  /**
   * The fixture id (maybe new) to map to the response.
   * If a responseId is supplied, and the server responds, then the resulting response (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by "responseId".  If responseId is not specified, it is the test engine's responsibility to store the response and use it as the responseId in subsequent assertions when assertion path and/or headerField is specified and the responseId is not specified.
   */
  responseId?: string | undefined;
  _responseId?: Element | undefined;
  /**
   * The id of the fixture used as the body of a PUT or POST request.
   */
  sourceId?: string | undefined;
  _sourceId?: Element | undefined;
  /**
   * Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
   * If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored.  For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present.  For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url.  For "vread" and "history" operations, the versionId value will also be used.
   */
  targetId?: string | undefined;
  _targetId?: Element | undefined;
  /**
   * Server interaction or operation type.
   * See the list of [server interactions](http.html).
   */
  type?: Coding | undefined;
  /**
   * Complete request URL.
   * Used to set the request URL explicitly.  If "url" element is defined, then "targetId", "resource", and "params" elements will be ignored.  Test engines would use whatever is specified in "url" without tampering with the string (beyond encoding the URL for HTTP).  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * A setup operation or assert to perform
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestScriptSetupAction extends BackboneElement {
  /**
   * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
   * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
   */
  assert?: TestScriptSetupActionAssert | undefined;
  /**
   * The operation to perform.
   */
  operation?: TestScriptSetupActionOperation | undefined;
}
/**
 * A series of required setup operations before tests are executed
 */
export interface TestScriptSetup extends BackboneElement {
  /**
   * Action would contain either an operation or an assertion.
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  setupAction: TestScriptSetupAction[];
}
/**
 * One or more teardown operations to perform
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestScriptTeardownAction extends BackboneElement {
  /**
   * An operation would involve a REST request to a server.
   */
  operation: TestScriptSetupActionOperation;
}
/**
 * A series of required clean up steps
 */
export interface TestScriptTeardown extends BackboneElement {
  /**
   * The teardown action will only contain an operation.
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  teardownAction: TestScriptTeardownAction[];
}
/**
 * A test operation or assert to perform
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestScriptTestAction extends BackboneElement {
  /**
   * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
   * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
   */
  assert?: TestScriptSetupActionAssert | undefined;
  /**
   * An operation would involve a REST request to a server.
   */
  operation?: TestScriptSetupActionOperation | undefined;
}
/**
 * A test in this script
 */
export interface TestScriptTest extends BackboneElement {
  /**
   * Action would contain either an operation or an assertion.
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  testAction: TestScriptTestAction[];
  /**
   * A short description of the test used by test engines for tracking and reporting purposes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The name of this test used for tracking/logging purposes by test engines.
   */
  name?: string | undefined;
  _name?: Element | undefined;
}
/**
 * Placeholder for evaluated elements
 * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
 */
export interface TestScriptVariable extends BackboneElement {
  /**
   * A default, hard-coded, or user-defined value for this variable.
   * The purpose of this element is to allow for a pre-defined value that can be used as a default or as an override value. Test engines can optionally use this as a placeholder for user-defined execution time values.
   */
  defaultValue?: string | undefined;
  _defaultValue?: Element | undefined;
  /**
   * A free text natural language description of the variable and its purpose.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The FHIRPath expression for a specific value to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.
   * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
   * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.
   */
  headerField?: string | undefined;
  _headerField?: Element | undefined;
  /**
   * Displayable text string with hint help information to the user when entering a default value.
   */
  hint?: string | undefined;
  _hint?: Element | undefined;
  /**
   * Descriptive name for this variable.
   * Placeholders would contain the variable name wrapped in ${} in "operation.params", "operation.requestHeader.value", and "operation.url" elements.  These placeholders would need to be replaced by the variable value before the operation is executed.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified.
   * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.
   */
  path?: string | undefined;
  _path?: Element | undefined;
  /**
   * Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
   * This can be a statically defined fixture (at the top of the TestScript) or a dynamically set fixture created by responseId of the `action.operation` element.
   */
  sourceId?: string | undefined;
  _sourceId?: Element | undefined;
}
export interface TestScript extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'TestScript';
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date (and optionally time) when the test script was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test script changes.
   * The date is often not tracked until the resource is published, but may be present on draft content. Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the test script. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the test script from a consumer's perspective.
   * This description can be used to capture details such as comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the test script as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the test script is presumed to be the predominant language in the place the test script was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An abstract server used in operations within this test script in the destination element.
   * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
   */
  destination?: TestScriptDestination[] | undefined;
  /**
   * A Boolean value to indicate that this test script is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of test scripts that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
   */
  fixture?: TestScriptFixture[] | undefined;
  /**
   * A formal identifier that is used to identify this test script when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this test script outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the test script is intended to be used.
   * It may be possible for the test script to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
   */
  metadata?: TestScriptMetadata | undefined;
  /**
   * A natural language name identifying the test script. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * An abstract server used in operations within this test script in the origin element.
   * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
   */
  origin?: TestScriptOrigin[] | undefined;
  /**
   * Reference to the profile to be used for validation.
   * See the [Resource List](resourcelist.html) for complete list of resource types.
   */
  profile?: string[] | undefined;
  _profile?: Element[] | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the test script.
   * Usually an organization but may be an individual. The publisher (or steward) of the test script is the organization or individual primarily responsible for the maintenance and upkeep of the test script. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the test script. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this test script is needed and why it has been designed as it has.
   * This element does not describe the usage of the test script. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this test script.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The scope indicates a conformance artifact that is tested by the test(s) within this test case and the expectation of the test outcome(s) as well as the intended test phase inclusion.
   */
  scope?: TestScriptScope[] | undefined;
  /**
   * A series of required setup operations before tests are executed.
   */
  setup?: TestScriptSetup | undefined;
  /**
   * The status of this test script. Enables tracking the life-cycle of the content.
   * Allows filtering of test scripts that are appropriate for use versus not.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A series of operations required to clean up after all the tests are executed (successfully or otherwise).
   */
  teardown?: TestScriptTeardown | undefined;
  /**
   * A test in this script.
   */
  test?: TestScriptTest[] | undefined;
  /**
   * A short, descriptive, user-friendly title for the test script.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this test script when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this test script is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the test script is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test script instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * Variable is set based either on element value in response body or on header field value in the response headers.
   * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
   */
  variable?: TestScriptVariable[] | undefined;
  /**
   * The identifier that is used to identify this version of the test script when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the test script author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different test script instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the test script with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Information used to perform transport
 */
export interface TransportInput extends BackboneElement {
  /**
   * A code or description indicating how the input is intended to be used as part of the transport execution.
   * If referencing a BPMN workflow or Protocol, the "system" is the URL for the workflow definition and the code is the "name" of the required input.
   */
  type: CodeableConcept;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAddress?: Address | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAge?: Age | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAvailability?: Availability | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCodeableReference?: CodeableReference | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCoding?: Coding | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueContactDetail?: ContactDetail | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCount?: Count | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDataRequirement?: DataRequirement | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valuenumber?: number | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDistance?: Distance | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDosage?: Dosage | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDuration?: Duration | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueExpression?: Expression | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueExtendedContactDetail?: ExtendedContactDetail | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueHumanName?: HumanName | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueMeta?: Meta | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueMoney?: Money | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueParameterDefinition?: ParameterDefinition | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valuePeriod?: Period | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueRange?: Range | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueRatio?: Ratio | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueRatioRange?: RatioRange | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueReference?: Reference | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueRelatedArtifact?: RelatedArtifact | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueSampledData?: SampledData | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueSignature?: Signature | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueTiming?: Timing | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueTriggerDefinition?: TriggerDefinition | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueUsageContext?: UsageContext | undefined;
}
/**
 * Information produced as part of transport
 */
export interface TransportOutput extends BackboneElement {
  /**
   * The name of the Output parameter.
   */
  type: CodeableConcept;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAddress?: Address | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAge?: Age | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAvailability?: Availability | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCodeableReference?: CodeableReference | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCoding?: Coding | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueContactDetail?: ContactDetail | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCount?: Count | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDataRequirement?: DataRequirement | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valuenumber?: number | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDistance?: Distance | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDosage?: Dosage | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDuration?: Duration | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueExpression?: Expression | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueExtendedContactDetail?: ExtendedContactDetail | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueHumanName?: HumanName | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueMeta?: Meta | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueMoney?: Money | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueParameterDefinition?: ParameterDefinition | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valuePeriod?: Period | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueRange?: Range | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueRatio?: Ratio | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueRatioRange?: RatioRange | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueReference?: Reference | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueRelatedArtifact?: RelatedArtifact | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueSampledData?: SampledData | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueSignature?: Signature | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueTiming?: Timing | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueTriggerDefinition?: TriggerDefinition | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueUsageContext?: UsageContext | undefined;
}
/**
 * Constraints on fulfillment transports
 */
export interface TransportRestriction extends BackboneElement {
  /**
   * Over what time-period is fulfillment sought.
   * Note that period.high is the due date representing the time by which the transport should be completed.
   */
  period?: Period | undefined;
  /**
   * For requests that are targeted to more than one potential recipient/target, to identify who is fulfillment is sought for.
   */
  recipient?: Reference[] | undefined;
  /**
   * Indicates the number of times the requested action should occur.
   */
  repetitions?: number | undefined;
}
export interface Transport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Transport';
  /**
   * The date and time this transport was created.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * BasedOn refers to a higher-level authorization that triggered the creation of the transport.  It references a "request" resource such as a ServiceRequest or Transport, which is distinct from the "request" resource the Transport is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a transport is created to fulfill a procedureRequest ( = FocusOn ) to transport a specimen to the lab.
   */
  basedOn?: Reference[] | undefined;
  /**
   * A name or code (or both) briefly describing what the transport involves.
   * The title (eg "My Transports", "Outstanding Transports for Patient X") should go into the code.
   */
  code?: CodeableConcept | undefined;
  /**
   * Identifies the completion time of the event (the occurrence).
   */
  completionTime?: string | undefined;
  _completionTime?: Element | undefined;
  /**
   * The current location for the entity to be transported.
   */
  currentLocation: Reference;
  /**
   * A free-text description of what is to be performed.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this transport was created.
   */
  encounter?: Reference | undefined;
  /**
   * The request being actioned or the resource being manipulated by this transport.
   * If multiple resources need to be manipulated, use sub-transports.  (This ensures that status can be tracked independently for each referenced resource.).
   */
  focus?: Reference | undefined;
  /**
   * The entity who benefits from the performance of the service specified in the transport (e.g., the patient).
   */
  for?: Reference | undefined;
  /**
   * A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
   */
  groupIdentifier?: Identifier | undefined;
  /**
   * The transport event prior to this one.
   */
  history?: Reference | undefined;
  /**
   * Identifier for the transport event that is used to identify it across multiple disparate systems.
   * This identifier is typically assigned by the dispenser, and may be used to reference the delivery when exchanging information about it with other systems.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Additional information that may be needed in the execution of the transport.
   */
  parameter?: TransportInput[] | undefined;
  /**
   * The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Transport.
   */
  instantiatesCanonical?: string | undefined;
  _instantiatesCanonical?: Element | undefined;
  /**
   * The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Transport.
   */
  instantiatesUri?: string | undefined;
  _instantiatesUri?: Element | undefined;
  /**
   * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Transport.
   */
  insurance?: Reference[] | undefined;
  /**
   * Indicates the "level" of actionability associated with the Transport, i.e. i+R[9]Cs this a proposed transport, a planned transport, an actionable transport, etc.
   * This element is immutable.  Proposed transports, planned transports, etc. must be distinct instances.
   * In most cases, Transports will have an intent of "order".
   */
  intent: ('unknown'|'proposal'|'plan'|'order'|'original-order'|'reflex-order'|'filler-order'|'instance-order'|'option');
  _intent?: Element | undefined;
  /**
   * The date and time of last modification to this transport.
   */
  lastModified?: string | undefined;
  _lastModified?: Element | undefined;
  /**
   * Principal physical location where this transport is performed.
   */
  location?: Reference | undefined;
  /**
   * Free-text information captured about the transport as it progresses.
   */
  note?: Annotation[] | undefined;
  /**
   * Outputs produced by the Transport.
   */
  output?: TransportOutput[] | undefined;
  /**
   * Individual organization or Device currently responsible for transport execution.
   * Transports may be created with an owner not yet identified.
   */
  owner?: Reference | undefined;
  /**
   * A larger event of which this particular event is a component or step.
   * Not to be used to link an event to an Encounter - use Event.context for that.
   * [The allowed reference resources may be adjusted as appropriate for the event resource].
   */
  partOf?: Reference[] | undefined;
  /**
   * The kind of participant that should perform the transport.
   */
  performerType?: CodeableConcept[] | undefined;
  /**
   * Indicates how quickly the Transport should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * A resource reference indicating why this transport needs to be performed.
   * Transports might be justified based on an Observation, a Condition, a past or planned procedure, etc. This should only be included if there is no focus or if it differs from the reason indicated on the focus.    Use the CodeableConcept text element in `Transport.reasonCode` if the data is free (uncoded) text.
   */
  reason?: CodeableReference | undefined;
  /**
   * Links to Provenance records for past versions of this Transport that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the transport.
   * This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
   */
  relevantHistory?: Reference[] | undefined;
  /**
   * The desired or final location for the transport.
   */
  requestedLocation: Reference;
  /**
   * The creator of the transport.
   */
  requester?: Reference | undefined;
  /**
   * If the Transport.focus is a request resource and the transport is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
   */
  restriction?: TransportRestriction | undefined;
  /**
   * A code specifying the state of the transport event.
   */
  status?: ('in-progress'|'completed'|'abandoned'|'cancelled'|'planned'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * An explanation as to why this transport is held, failed, was refused, etc.
   * This applies to the current status.  Look at the history of the transport to see reasons for past statuses.
   */
  statusReason?: CodeableConcept | undefined;
}
/**
 * Additional representations for this concept
 * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
 */
export interface ValueSetComposeIncludeConceptDesignation extends BackboneElement {
  /**
   * Additional codes that detail how this designation would be used, if there is more than one use.
   * This was added rather than increasing the cardinality of .use to 0..* in order to maintain backward compatibility.
   */
  additionalUse?: Coding[] | undefined;
  /**
   * The language this designation is defined for.
   * In the absence of a language, the resource language applies.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * A code that represents types of uses of designations.
   * If no use is provided, the designation can be assumed to be suitable for general display to a human user.
   */
  use?: Coding | undefined;
  /**
   * The text value for this designation.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * A concept defined in the system
 * The list of concepts is considered ordered, though the order might not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.
 */
export interface ValueSetComposeIncludeConcept extends BackboneElement {
  /**
   * Specifies a code for the concept to be included or excluded.
   * Expressions are allowed if defined by the underlying code system.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
   * Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
   */
  designation?: ValueSetComposeIncludeConceptDesignation[] | undefined;
  /**
   * The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.
   * The value set resource allows for an alternative display to be specified for when this concept is used in this particular value set. See notes in the value set narrative about the correct use of this element.
   */
  display?: string | undefined;
  _display?: Element | undefined;
}
/**
 * Select codes/concepts by their properties (including relationships)
 * Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.
 */
export interface ValueSetComposeIncludeFilter extends BackboneElement {
  /**
   * The kind of operation to perform as a part of the filter criteria.
   * In case filter.property represents a property of the system, the operation applies to the selected property. In case filter.property represents a filter of the system, the operation SHALL match one of the CodeSystem.filter.operator values.
   */
  op: ('='|'is-a'|'descendent-of'|'is-not-a'|'regex'|'in'|'not-in'|'generalizes'|'child-of'|'descendent-leaf'|'exists');
  _op?: Element | undefined;
  /**
   * A code that identifies a property or a filter defined in the code system.
   */
  property: string;
  _property?: Element | undefined;
  /**
   * The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value  (if the filter represents a property defined in CodeSystem) or of the system filter value (if the filter represents a filter defined in CodeSystem) when the operation is 'regex', or one of the values (true and false), when the operation is 'exists'.
   * Use regex matching with care - full regex matching on every SNOMED CT term is prohibitive, for example.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Include one or more codes from a code system or other value set(s)
 * All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.
 */
export interface ValueSetComposeInclude extends BackboneElement {
  /**
   * Specifies a concept to be included or excluded.
   * The list of concepts is considered ordered, though the order might not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.
   */
  conceptReference?: ValueSetComposeIncludeConcept[] | undefined;
  /**
   * A copyright statement for the specific code system asserted by the containing ValueSet.compose.include element's system value (if the associated ValueSet.compose.include.version element is not present); or the code system and version combination (if the associated ValueSet.compose.include.version element is present).
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * Select concepts by specifying a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified within the include, they SHALL all be true.
   * Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.
   */
  filter?: ValueSetComposeIncludeFilter[] | undefined;
  /**
   * An absolute URI which is the code system from which the selected codes come from.
   * If there are no codes or filters, the entire code system is included. Note that the set of codes that are included may contain abstract codes. See ''Coding.system'' for further documentation about the correct value for the system element.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * Selects the concepts found in this value set (based on its value set definition). This is an absolute URI that is a reference to ValueSet.url.  If multiple value sets are specified this includes the intersection of the contents of all of the referenced value sets.
   * The value set URI is either a logical reference to a defined value set such as a [SNOMED CT reference set](https://terminology.hl7.org/SNOMEDCT.html), or a direct reference to a value set definition using ValueSet.url. The reference might not refer to an actual FHIR ValueSet resource; in this case, whatever is referred to is an implicit definition of a value set that needs to be clear about how versions are resolved.
   */
  valueSet?: string[] | undefined;
  _valueSet?: Element[] | undefined;
  /**
   * The version of the code system that the codes are selected from, or the special version '*' for all versions.
   * This is used when selecting the descendants of a concept - they may change between versions. If no version is specified, then the exact contents of the value set might not be known until a context of use binds it to a particular version. The special value '*' means all versions; It is at server discretion regarding expansions and which versions must be supported.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Content logical definition of the value set (CLD)
 */
export interface ValueSetCompose extends BackboneElement {
  /**
   * Exclude one or more codes from the value set based on code system filters and/or other value sets.
   * Usually this is used to selectively exclude codes that were included by subsumption in the inclusions. Any display names specified for the codes are ignored.
   */
  exclude?: ValueSetComposeInclude[] | undefined;
  /**
   * Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable $expand parameters (but generally, inactive codes would be expected to be included).
   * Note that in the FHIR terminology framework, "deprecated" does not mean inactive, but in some code systems, e.g. LOINC, "deprecated" does mean inactive. Code systems should define what codes are considered to be inactive. If this is not clearly defined (including in the FHIR code system resource), then all codes are assumed to be active.
   * The Value Set Definition specification defines an ActiveOnly element, which is the reverse of this element e.g. (ValueSet.compose.inactive=FALSE) is the same as (VSD.ActiveOnly=TRUE).
   */
  inactive?: boolean | undefined;
  _inactive?: Element | undefined;
  /**
   * Include one or more codes from a code system or other value set(s).
   * All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.
   */
  conceptSet: ValueSetComposeInclude[];
  /**
   * The Locked Date is  the effective date that is used to determine the version of all referenced Code Systems and Value Set Definitions included in the compose that are not already tied to a specific version.
   * With a defined lockedDate the value set is considered "Locked". Otherwise, the value set may have different expansions as underlying code systems and/or value sets evolve.  The interpretation of lockedDate is often dependent on the context - e.g. a SNOMED CT derived value set with a lockedDate will have a different expansion in USA than in UK.  If a value set specifies a version for include and exclude statements, and also specifies a locked date, the specified versions need to be available that date, or the value set will not be usable.
   */
  lockedDate?: string | undefined;
  _lockedDate?: Element | undefined;
  /**
   * A property to return in the expansion, if the client doesn't ask for any particular properties. May be either a code from the code system definition (convenient) or a the formal URI that refers to the property. The special value '*' means all properties known to the server.
   * Note that property names can clash, so using a URI is recommended.
   */
  property?: string[] | undefined;
  _property?: Element[] | undefined;
}
/**
 * SubProperty value for the concept
 */
export interface ValueSetExpansionContainsPropertySubProperty extends BackboneElement {
  /**
   * A code that is a reference to ValueSet.expansion.property.code.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * The value of this subproperty.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of this subproperty.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The value of this subproperty.
   */
  valueCoding?: Coding | undefined;
  /**
   * The value of this subproperty.
   */
  valuenumber?: number | undefined;
}
/**
 * Property value for the concept
 */
export interface ValueSetExpansionContainsProperty extends BackboneElement {
  /**
   * A code that is a reference to ValueSet.expansion.property.code.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * A subproperty value for this concept.
   */
  conceptSubProperty?: ValueSetExpansionContainsPropertySubProperty[] | undefined;
  /**
   * The value of this property.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of this property.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The value of this property.
   */
  valueCoding?: Coding | undefined;
  /**
   * The value of this property.
   */
  valuenumber?: number | undefined;
}
/**
 * Codes in the value set
 */
export interface ValueSetExpansionContains extends BackboneElement {
  /**
   * If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.
   * This should not be understood to exclude its use for searching (e.g. by subsumption testing). The client should know whether it is appropriate for the user to select an abstract code or not.
   */
  abstract?: boolean | undefined;
  _abstract?: Element | undefined;
  /**
   * The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * Other codes and entries contained under this entry in the hierarchy.
   * If the expansion uses this element, there is  no implication about the logical relationship between them, and the  structure cannot be used for logical inferencing. The structure  exists to provide navigational assistance for helping human users to  locate codes in the expansion.
   */
  contains?: ValueSetExpansionContains[] | undefined;
  /**
   * Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.
   * The designations provided must be based on the value set and code system definitions.
   */
  designation?: ValueSetComposeIncludeConceptDesignation[] | undefined;
  /**
   * The recommended display for this item in the expansion.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. It might not be known or specified whether a concept is inactive (and it may depend on the context of use).
   * This should only have a value if the concept is inactive.
   */
  inactive?: boolean | undefined;
  _inactive?: Element | undefined;
  /**
   * A property value for this concept.
   */
  conceptProperty?: ValueSetExpansionContainsProperty[] | undefined;
  /**
   * An absolute URI which is the code system in which the code for this item in the expansion is defined.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * The version of the code system from this code was taken. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
   * The exact value of the version string is specified by the system from which the code is derived.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Parameter that controlled the expansion process
 * The server decides which parameters to include here, but at a minimum, the list SHOULD include all of the parameters that affect the $expand operation. If the expansion will be persisted all of these parameters SHALL be included. If the codeSystem on the server has a specified version then this version SHALL be provided as a parameter in the expansion (note that not all code systems have a version).
 */
export interface ValueSetExpansionParameter extends BackboneElement {
  /**
   * Name of the input parameter to the $expand operation; may be a server-assigned name for additional default or other server-supplied parameters used to control the expansion process.
   * The names are assigned at the discretion of the server.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The value of the parameter.
   */
  valueboolean?: boolean | undefined;
  _valueboolean?: Element | undefined;
  /**
   * The value of the parameter.
   */
  valuestring?: string | undefined;
  _valuestring?: Element | undefined;
  /**
   * The value of the parameter.
   */
  valuenumber?: number | undefined;
}
/**
 * Additional information supplied about each concept
 */
export interface ValueSetExpansionProperty extends BackboneElement {
  /**
   * A code that is used to identify the property. The code is used in ValueSet.expansion.contains.property.code.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
   */
  uri?: string | undefined;
  _uri?: Element | undefined;
}
/**
 * Used when the value set is "expanded"
 * Expansion is performed to produce a collection of codes that are ready to use for data entry or validation. Value set expansions are always considered to be stateless - they are a record of the set of codes in the value set at a point in time under a given set of conditions, and are not subject to ongoing maintenance.
 * Expansion.parameter is  a simplified list of parameters - a subset of the features of the [Parameters](parameters.html) resource.
 */
export interface ValueSetExpansion extends BackboneElement {
  /**
   * The codes that are contained in the value set expansion.
   */
  contains?: ValueSetExpansionContains[] | undefined;
  /**
   * An identifier that uniquely identifies this expansion of the valueset, based on a unique combination of the provided parameters, the system default parameters, and the underlying system code system versions etc. Systems may re-use the same identifier as long as those factors remain the same, and the expansion is the same, but are not required to do so. This is a business identifier.
   * Typically, this uri is a UUID (e.g. urn:uuid:8230ff20-c97a-4167-a59d-dc2cb9df16dd).
   */
  identifier?: string | undefined;
  _identifier?: Element | undefined;
  /**
   * As per paging Search results, the next URLs are opaque to the client, have no dictated structure, and only the server understands them.
   * Clients SHOULD use the next link, if present, to page through expansion results in preference to using the offset and count parameters. Due to the optional nature of the next link, its absence does not necessarily indicate that it is the last page of results. Instead, as the offset and count parameters SHALL be populated when paging, clients can reliably use the count/offset parameters to determine whether the whole expansion is returned.
   */
  next?: string | undefined;
  _next?: Element | undefined;
  /**
   * If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL NOT be present.
   * Paging only applies to flat expansions. If a filter is applied, the count is the number of concepts that matched the filter, not the number of concepts in an unfiltered view of the expansion.
   */
  offset?: number | undefined;
  /**
   * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
   * The server decides which parameters to include here, but at a minimum, the list SHOULD include all of the parameters that affect the $expand operation. If the expansion will be persisted all of these parameters SHALL be included. If the codeSystem on the server has a specified version then this version SHALL be provided as a parameter in the expansion (note that not all code systems have a version).
   */
  parameter?: ValueSetExpansionParameter[] | undefined;
  /**
   * A property defines an additional slot through which additional information can be provided about a concept.
   */
  property?: ValueSetExpansionProperty[] | undefined;
  /**
   * The time at which the expansion was produced by the expanding system.
   * This SHOULD be a fully populated instant, but in some circumstances, value sets are expanded by hand, and the expansion is published without that precision.
   */
  timestamp: string;
  _timestamp?: Element | undefined;
  /**
   * The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.
   * Paging only applies to flat expansions.
   */
  total?: number | undefined;
}
/**
 * Description of the semantic space the Value Set Expansion is intended to cover and should further clarify the text in ValueSet.description
 */
export interface ValueSetScope extends BackboneElement {
  /**
   * Criteria describing which concepts or codes should be excluded and why.
   */
  exclusionCriteria?: string | undefined;
  _exclusionCriteria?: Element | undefined;
  /**
   * Criteria describing which concepts or codes should be included and why.
   */
  inclusionCriteria?: string | undefined;
  _inclusionCriteria?: Element | undefined;
}
export interface ValueSet extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ValueSet';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * An individiual or organization primarily involved in the creation and maintenance of the ValueSet.
   */
  author?: ContactDetail[] | undefined;
  /**
   * A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).
   */
  compose?: ValueSetCompose | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
   * Frequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
   * The (c) symbol should NOT be included in this string. It will be added by software when rendering the notation. Full details about licensing, restrictions, warrantees, etc. goes in the more general 'copyright' element.
   */
  copyrightLabel?: string | undefined;
  _copyrightLabel?: Element | undefined;
  /**
   * The date (and optionally time) when the value set metadata or content logical definition (.compose) was created or revised.
   * Note that this is not the same as the meta.lastUpdated which is specific to an instance of a value set resource on a server.  Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the value set from a consumer's perspective. The textual description specifies the span of meanings for concepts to be included within the Value Set Expansion, and also may specify the intended use and limitations of the Value Set.
   * Description SHOULD contain instructions for clinical or administrative use and interpretation and information about misuse. Description SHOULD be populated unless the information is available from context. Description SHOULD be populated unless the value set is a contained resource (e.g. a value set defined solely in the context of a profile).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An individual or organization primarily responsible for internal coherence of the ValueSet.
   */
  editor?: ContactDetail[] | undefined;
  /**
   * The period during which the ValueSet content was or is planned to be in active use.
   * The effective period for a ValueSet determines when the content is applicable for usage and is independent of publication and review dates. For example, a valueset intended to be used for the year 2016 might be published in 2015.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  effectivePeriod?: Period | undefined;
  /**
   * An individual or organization asserted by the publisher to be responsible for officially endorsing the ValueSet for use in some setting.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  endorser?: ContactDetail[] | undefined;
  /**
   * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
   * Expansion is performed to produce a collection of codes that are ready to use for data entry or validation. Value set expansions are always considered to be stateless - they are a record of the set of codes in the value set at a point in time under a given set of conditions, and are not subject to ongoing maintenance.
   * Expansion.parameter is  a simplified list of parameters - a subset of the features of the [Parameters](parameters.html) resource.
   */
  expansion?: ValueSetExpansion | undefined;
  /**
   * A Boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
   * Allows filtering of value sets that are appropriate for use versus not.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this value set outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
   * Normally immutability is set to 'false', which is the default assumption if it is not populated.  Note that the implication is that if this is set to 'true', there may be only one ValueSet version for this definition. Immutability tends to be set to 'true' in one of two cases: - Where the value set, by the nature of its usage, cannot change.  For example "All specializations of ACT in ActClassCode" - Where there's no safe way to express the "Purpose" such that someone else could safely make changes to the value set definition. Source workflow control must guarantee that the same URI always yields the same definition.
   */
  immutable?: boolean | undefined;
  _immutable?: Element | undefined;
  /**
   * A legal or geographic region in which the value set is intended to be used.
   * It may be possible for the value set to be used in jurisdictions other than those for which it was originally designed or intended.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'jurisdiction' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#jurisdiction and useContext.valueCodeableConcept indicating the jurisdiction.)
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
   * If specified, this date follows the original approval date.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.A name should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a name.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the organization or individual responsible for the release and ongoing maintenance of the value set.
   * Usually an organization but may be an individual. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the value set. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explanation of why this value set is needed and why it has been designed as it has.
   * This element does not describe the usage of the value set. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this value set.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the ValueSet.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  reviewer?: ContactDetail[] | undefined;
  /**
   * Description of the semantic space the Value Set Expansion is intended to cover and should further clarify the text in ValueSet.description.
   */
  scope?: ValueSetScope | undefined;
  /**
   * The status of this value set. Enables tracking the life-cycle of the content. The status of the value set applies to the value set definition (ValueSet.compose) and the associated ValueSet metadata. Expansions do not have a state.
   * Allows filtering of value sets that are appropriate for use versus not.See also the [http://hl7.org/fhir/StructureDefinition/valueset-workflowStatusDescription](http://hl7.org/fhir/extensions/StructureDefinition-valueset-workflowStatusDescription.html) extension for additional status information related to the editorial process.
   * See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the value set.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptions related to the content of the ValueSet. Topics provide a high-level categorization as well as keywords for the ValueSet that can be useful for filtering and searching.
   * DEPRECATION NOTE: For consistency, implementations are encouraged to migrate to using the new 'topic' code in the useContext element.  (I.e. useContext.code indicating http://terminology.hl7.org/CodeSystem/usage-context-type#topic and useContext.valueCodeableConcept indicating the topic)
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this value set is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the value set is stored on different servers.
   * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
   * The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
   * In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate value set instances.
   * When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different value set instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the value set with the format [url]|[version]. The version SHOULD NOT contain a '#' - see [Business Version](resource.html#bv-format).
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which ValueSet is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmCoding?: Coding | undefined;
  /**
   * Indicates the mechanism used to compare versions to determine which ValueSet is more current.
   * If set as a string, this is a FHIRPath expression that has two additional context variables passed in - %version1 and %version2 and will return a negative number if version1 is newer, a positive number if version2 and a 0 if the version ordering can't be successfully be determined.
   */
  versionAlgorithmstring?: string | undefined;
  _versionAlgorithmstring?: Element | undefined;
}
/**
 * Information about the entity attesting to information
 */
export interface VerificationResultAttestation extends BackboneElement {
  /**
   * The method by which attested information was submitted/retrieved (manual; API; Push).
   */
  communicationMethod?: CodeableConcept | undefined;
  /**
   * The date the information was attested to.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * When the who is asserting on behalf of another (organization or individual).
   */
  onBehalfOf?: Reference | undefined;
  /**
   * A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.
   */
  proxyIdentityCertificate?: string | undefined;
  _proxyIdentityCertificate?: Element | undefined;
  /**
   * Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.
   */
  proxySignature?: Signature | undefined;
  /**
   * A digital identity certificate associated with the attestation source.
   */
  sourceIdentityCertificate?: string | undefined;
  _sourceIdentityCertificate?: Element | undefined;
  /**
   * Signed assertion by the attestation source that they have attested to the information.
   */
  sourceSignature?: Signature | undefined;
  /**
   * The individual or organization attesting to information.
   */
  who?: Reference | undefined;
}
/**
 * Information about the primary source(s) involved in validation
 */
export interface VerificationResultPrimarySource extends BackboneElement {
  /**
   * Ability of the primary source to push updates/alerts (yes; no; undetermined).
   */
  canPushUpdates?: CodeableConcept | undefined;
  /**
   * Method for communicating with the primary source (manual; API; Push).
   */
  communicationMethod?: CodeableConcept[] | undefined;
  /**
   * Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).
   */
  pushTypeAvailable?: CodeableConcept[] | undefined;
  /**
   * Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).
   */
  type?: CodeableConcept[] | undefined;
  /**
   * When the target was validated against the primary source.
   */
  validationDate?: string | undefined;
  _validationDate?: Element | undefined;
  /**
   * Status of the validation of the target against the primary source (successful; failed; unknown).
   */
  validationStatus?: CodeableConcept | undefined;
  /**
   * Reference to the primary source.
   */
  who?: Reference | undefined;
}
/**
 * Information about the entity validating information
 */
export interface VerificationResultValidator extends BackboneElement {
  /**
   * Signed assertion by the validator that they have validated the information.
   */
  attestationSignature?: Signature | undefined;
  /**
   * A digital identity certificate associated with the validator.
   */
  identityCertificate?: string | undefined;
  _identityCertificate?: Element | undefined;
  /**
   * Reference to the organization validating information.
   */
  organization: Reference;
}
export interface VerificationResult extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'VerificationResult';
  /**
   * Information about the entity attesting to information.
   */
  attestation?: VerificationResultAttestation | undefined;
  /**
   * The result if validation fails (fatal; warning; record only; none).
   */
  failureAction?: CodeableConcept | undefined;
  /**
   * Frequency of revalidation.
   */
  frequency?: Timing | undefined;
  /**
   * The date/time validation was last completed (including failed validations).
   */
  lastPerformed?: string | undefined;
  _lastPerformed?: Element | undefined;
  /**
   * The frequency with which the target must be validated (none; initial; periodic).
   */
  need?: CodeableConcept | undefined;
  /**
   * The date when target is next validated, if appropriate.
   */
  nextScheduled?: string | undefined;
  _nextScheduled?: Element | undefined;
  /**
   * Information about the primary source(s) involved in validation.
   */
  primarySource?: VerificationResultPrimarySource[] | undefined;
  /**
   * The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).
   */
  status: ('attested'|'validated'|'in-process'|'req-revalid'|'val-fail'|'reval-fail'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * When the validation status was updated.
   */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;
  /**
   * A resource that was validated.
   */
  target?: Reference[] | undefined;
  /**
   * The fhirpath location(s) within the resource that was validated.
   */
  targetLocation?: string[] | undefined;
  _targetLocation?: Element[] | undefined;
  /**
   * The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).
   */
  validationProcess?: CodeableConcept[] | undefined;
  /**
   * What the target is validated against (nothing; primary source; multiple sources).
   */
  validationType?: CodeableConcept | undefined;
  /**
   * Information about the entity validating information.
   */
  validator?: VerificationResultValidator[] | undefined;
}
/**
 * Eye alignment compensation
 */
export interface VisionPrescriptionLensSpecificationPrism extends BackboneElement {
  /**
   * Amount of prism to compensate for eye alignment in fractional units.
   */
  amount: number;
  /**
   * The relative base, or reference lens edge, for the prism.
   */
  base: ('up'|'down'|'in'|'out');
  _base?: Element | undefined;
}
/**
 * Vision lens authorization
 */
export interface VisionPrescriptionLensSpecification extends BackboneElement {
  /**
   * Power adjustment for multifocal lenses measured in dioptres (0.25 units).
   */
  add?: number | undefined;
  /**
   * Adjustment for astigmatism measured in integer degrees.
   * The limits are +180 and -180 degrees.
   */
  axis?: number | undefined;
  /**
   * Back curvature measured in millimetres.
   */
  backCurve?: number | undefined;
  /**
   * Brand recommendations or restrictions.
   */
  brand?: string | undefined;
  _brand?: Element | undefined;
  /**
   * Special color or pattern.
   */
  color?: string | undefined;
  _color?: Element | undefined;
  /**
   * Power adjustment for astigmatism measured in dioptres (0.25 units).
   */
  cylinder?: number | undefined;
  /**
   * Contact lens diameter measured in millimetres.
   */
  diameter?: number | undefined;
  /**
   * The recommended maximum wear period for the lens.
   */
  duration?: Quantity | undefined;
  /**
   * The eye for which the lens specification applies.
   * May also appear on the paper claim form or in the Medical Records as as OD (oculus dexter) for the right eye and OS (oculus sinister) for the left eye.
   */
  eye: ('right'|'left');
  _eye?: Element | undefined;
  /**
   * Notes for special requirements such as coatings and lens materials.
   */
  note?: Annotation[] | undefined;
  /**
   * Contact lens power measured in dioptres (0.25 units).
   */
  power?: number | undefined;
  /**
   * Allows for adjustment on two axis.
   */
  prism?: VisionPrescriptionLensSpecificationPrism[] | undefined;
  /**
   * Identifies the type of vision correction product which is required for the patient.
   */
  product: CodeableConcept;
  /**
   * Lens power measured in dioptres (0.25 units).
   * The value is negative for near-sighted and positive for far sighted.
   * Often insurance will not cover a lens with power between +75 and -75.
   */
  sphere?: number | undefined;
}
export interface VisionPrescription extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'VisionPrescription';
  /**
   * The date this resource was created.
   */
  created: string;
  _created?: Element | undefined;
  /**
   * The date (and perhaps time) when the prescription was written.
   * Jurisdictions determine the valid lifetime of a prescription. Typically vision prescriptions are valid for two years from the date written.
   */
  dateWritten: string;
  _dateWritten?: Element | undefined;
  /**
   * A reference to a resource that identifies the particular occurrence of contact between patient and health care provider during which the prescription was issued.
   */
  encounter?: Reference | undefined;
  /**
   * A unique identifier assigned to this vision prescription.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
   */
  lensSpecification: VisionPrescriptionLensSpecification[];
  /**
   * A resource reference to the person to whom the vision prescription applies.
   */
  patient: Reference;
  /**
   * The healthcare professional responsible for authorizing the prescription.
   */
  prescriber: Reference;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('active'|'cancelled'|'draft'|'entered-in-error');
  _status?: Element | undefined;
}
/**
 * Resource binding for generic use.
 */
export type FhirResource = 
  Account
  |ActivityDefinition
  |ActorDefinition
  |AdministrableProductDefinition
  |AdverseEvent
  |AllergyIntolerance
  |Appointment
  |AppointmentResponse
  |ArtifactAssessment
  |AuditEvent
  |Basic
  |Binary
  |BiologicallyDerivedProduct
  |BiologicallyDerivedProductDispense
  |BodyStructure
  |Bundle
  |CapabilityStatement
  |CarePlan
  |CareTeam
  |ChargeItem
  |ChargeItemDefinition
  |Citation
  |Claim
  |ClaimResponse
  |ClinicalImpression
  |ClinicalUseDefinition
  |CodeSystem
  |Communication
  |CommunicationRequest
  |CompartmentDefinition
  |Composition
  |ConceptMap
  |Condition
  |ConditionDefinition
  |Consent
  |Contract
  |Coverage
  |CoverageEligibilityRequest
  |CoverageEligibilityResponse
  |DetectedIssue
  |Device
  |DeviceAssociation
  |DeviceDefinition
  |DeviceDispense
  |DeviceMetric
  |DeviceRequest
  |DeviceUsage
  |DiagnosticReport
  |DocumentReference
  |Encounter
  |EncounterHistory
  |Endpoint
  |EnrollmentRequest
  |EnrollmentResponse
  |EpisodeOfCare
  |EventDefinition
  |Evidence
  |EvidenceReport
  |EvidenceVariable
  |ExampleScenario
  |ExplanationOfBenefit
  |FamilyMemberHistory
  |Flag
  |FormularyItem
  |GenomicStudy
  |Goal
  |GraphDefinition
  |Group
  |GuidanceResponse
  |HealthcareService
  |ImagingSelection
  |ImagingStudy
  |Immunization
  |ImmunizationEvaluation
  |ImmunizationRecommendation
  |ImplementationGuide
  |Ingredient
  |InsurancePlan
  |InventoryItem
  |InventoryReport
  |Invoice
  |Library
  |Linkage
  |List
  |Location
  |ManufacturedItemDefinition
  |Measure
  |MeasureReport
  |Medication
  |MedicationAdministration
  |MedicationDispense
  |MedicationKnowledge
  |MedicationRequest
  |MedicationStatement
  |MedicinalProductDefinition
  |MessageDefinition
  |MessageHeader
  |MolecularSequence
  |NamingSystem
  |NutritionIntake
  |NutritionOrder
  |NutritionProduct
  |Observation
  |ObservationDefinition
  |OperationDefinition
  |OperationOutcome
  |Organization
  |OrganizationAffiliation
  |PackagedProductDefinition
  |Parameters
  |Patient
  |PaymentNotice
  |PaymentReconciliation
  |Permission
  |Person
  |PlanDefinition
  |Practitioner
  |PractitionerRole
  |Procedure
  |Provenance
  |Questionnaire
  |QuestionnaireResponse
  |RegulatedAuthorization
  |RelatedPerson
  |RequestOrchestration
  |Requirements
  |ResearchStudy
  |ResearchSubject
  |RiskAssessment
  |Schedule
  |SearchParameter
  |ServiceRequest
  |Slot
  |Specimen
  |SpecimenDefinition
  |StructureDefinition
  |StructureMap
  |Subscription
  |SubscriptionStatus
  |SubscriptionTopic
  |Substance
  |SubstanceDefinition
  |SubstanceNucleicAcid
  |SubstancePolymer
  |SubstanceProtein
  |SubstanceReferenceInformation
  |SubstanceSourceMaterial
  |SupplyDelivery
  |SupplyRequest
  |Task
  |TerminologyCapabilities
  |TestPlan
  |TestReport
  |TestScript
  |Transport
  |ValueSet
  |VerificationResult
  |VisionPrescription;
