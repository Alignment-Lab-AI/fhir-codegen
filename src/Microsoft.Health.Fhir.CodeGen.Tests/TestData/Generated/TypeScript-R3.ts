// <auto-generated/>
// Contents of: hl7.fhir.r3.core#3.0.2, hl7.fhir.r3.expansions#3.0.2
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Option: "Namespace" = "fhir{VersionNumber}"
  // Option: "MinTsVersion" = "3.7"
  // Option: "ExportKeys" = ""
  // Option: "IncludeExperimental" = "False"
  // Option: "FhirCacheDirectory" = "~/.fhir"
  // Option: "OutputDirectory" = "./generated"
  // Option: "Packages" = ""
  // Option: "OfflineMode" = "False"
// Minimum TypeScript Version: 3.7
/**
 * Note: address is for postal addresses, not physical locations.
 */
export interface Address extends Element {
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Age extends Quantity {
}
/**
 * For systems that do not have structured annotations, they can simply communicate a single annotation with no author or time.  This element may need to be included in narrative because of the potential for modifying information.  *Annotations SHOULD NOT* be used to communicate "modifying" information that could be computable. (This is a SHOULD because enforcing user behavior is nearly impossible).
 */
export interface Annotation extends Element {
}
/**
 * When providing a summary view (for example with Observation.value[x]) Attachment should be represented with a brief display text such as "Attachment".
 */
export interface Attachment extends Element {
}
export interface BackboneElement extends Element {
}
/**
 * Not all terminology uses fit this general pattern. In some cases, models should not use CodeableConcept and use Coding directly and provide their own structure for managing text, codings, translations and the relationship between elements and pre- and post-coordination.
 */
export interface CodeableConcept extends Element {
}
/**
 * Codes may be defined very casually in enumerations or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.
 */
export interface Coding extends Element {
}
export interface ContactDetail extends Element {
}
export interface ContactPoint extends Element {
}
export interface Contributor extends Element {
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Count extends Quantity {
}
/**
 * What codes are expected
 */
export interface DataRequirementCodeFilter extends Element {
}
/**
 * What dates/date ranges are expected
 */
export interface DataRequirementDateFilter extends Element {
}
export interface DataRequirement extends Element {
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Distance extends Quantity {
}
export interface Dosage extends Element {
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Duration extends Quantity {
}
export interface Element {
}
/**
 * Base definition information for tools
 * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. So they are deformalised into this location for tooling convenience, and to ensure that the base information is available without dependencies.
 */
export interface ElementDefinitionBase extends Element {
}
/**
 * ValueSet details if this is coded
 * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
 */
export interface ElementDefinitionBinding extends Element {
}
/**
 * Condition that must evaluate to true
 * Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
 */
export interface ElementDefinitionConstraint extends Element {
}
/**
 * Example value (as defined for type)
 * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
 */
export interface ElementDefinitionExample extends Element {
}
/**
 * Map element to another set of definitions
 * Mappings are not necessarily specific enough for safe translation.
 */
export interface ElementDefinitionMapping extends Element {
}
/**
 * Element values that are used to distinguish the slices
 * If there is no discriminator, the content is hard to process, so this should be avoided. If the base element has a cardinality of ..1, and there is a choice of types, the discriminator must be "@type".
 */
export interface ElementDefinitionSlicingDiscriminator extends Element {
}
/**
 * This element is sliced - slices follow
 * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
 */
export interface ElementDefinitionSlicing extends Element {
}
/**
 * Data type and Profile for this element
 * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
 */
export interface ElementDefinitionType extends Element {
}
export interface ElementDefinition extends Element {
}
export interface Extension extends Element {
}
/**
 * Names may be changed, or repudiated, or people may have different names in different contexts. Names may be divided into parts of different type that have variable significance depending on context, though the division into parts does not always matter. With personal names, the different parts may or may not be imbued with some implicit meaning; various cultures associate different importance with the name parts and the degree to which systems must care about name parts around the world varies widely.
 */
export interface HumanName extends Element {
}
export interface Identifier extends Element {
}
export interface Meta extends Element {
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Money extends Quantity {
}
export interface Narrative extends Element {
}
export interface ParameterDefinition extends Element {
}
/**
 * This is not a duration - that's a measure of time (a separate type), but a duration that occurs at a fixed value of time. A Period specifies a range of time; the context of use will specify whether the entire range applies (e.g. "the patient was an inpatient of the hospital for this time range") or one value from the range applies (e.g. "give to the patient between these two times"). If duration is required, specify the type as Interval|Duration.
 */
export interface Period extends Element {
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Quantity extends Element {
}
/**
 * The stated low and high value are assumed to have arbitrarily high precision when it comes to determining which values are in the range. I.e. 1.99 is not in the range 2 -> 3.
 */
export interface Range extends Element {
}
export interface Ratio extends Element {
}
/**
 * References SHALL be a reference to an actual FHIR resource, and SHALL be resolveable (allowing for access control, temporary unavailability, etc). Resolution can be either by retrieval from the URL, or, where applicable by resource type, by treating an absolute reference as a canonical URL and looking it up in a local registry/repository.
 */
export interface Reference extends Element {
}
/**
 * Each related artifact is either an attachment, or a reference to another knowledge resource, but not both.
 */
export interface RelatedArtifact extends Element {
}
/**
 * The data is not interpretable without at least origin, period, and dimensions, but these are optional to allow a separation between the template of measurement and the actual measurement, such as between DeviceCapabilities and DeviceLog.  When providing a summary view (for example with Observation.value[x]) SampledData should be represented with a brief display text such as "Sampled Data".
 */
export interface SampledData extends Element {
}
/**
 * The elements of the Signature Resource are for ease of access of these elements. Foro digital signatures (Xml DigSig, JWT), the non-repudiation proof comes from the Signature  validation, which includes validation of the referenced objects (e.g. Resources) (a.k.a., Content) in the XML-Signature Detached form.
 */
export interface Signature extends Element {
}
/**
 * When the event is to occur
 */
export interface TimingRepeat extends Element {
}
/**
 * A timing schedule can be either a list of events - intervals on which the event occurs, or a single event with repeating criteria or just repeating criteria with no actual event.  When both event and a repeating specification are provided, the list of events should be understood as an interpretation of the information in the repeat structure.
 */
export interface Timing extends Element {
}
export interface TriggerDefinition extends Element {
}
export interface UsageContext extends Element {
}
/**
 * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account
 * Typically this may be some form of insurance, internal charges, or self-pay.
 * Local or jurisdicational business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
 * Where the order is important, a local/jurisdicational extension may be defined to specify the order for the type of charge.
 */
export interface AccountCoverage extends BackboneElement {
}
/**
 * Responsible for the account
 */
export interface AccountGuarantor extends BackboneElement {
}
export interface Account extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Account';
}
/**
 * Dynamic aspects of the definition
 */
export interface ActivityDefinitionDynamicValue extends BackboneElement {
}
/**
 * Who should participate in the action
 */
export interface ActivityDefinitionParticipant extends BackboneElement {
}
export interface ActivityDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ActivityDefinition';
}
/**
 * The suspected agent causing the adverse event
 */
export interface AdverseEventSuspectEntity extends BackboneElement {
}
export interface AdverseEvent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AdverseEvent';
}
/**
 * Adverse Reaction Events linked to exposure to substance
 */
export interface AllergyIntoleranceReaction extends BackboneElement {
}
/**
 * Substances include, but are not limited to: a therapeutic substance administered correctly at an appropriate dosage for the individual; food; material derived from plants or animals; or venom from insect stings.
 */
export interface AllergyIntolerance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AllergyIntolerance';
}
/**
 * Participants involved in appointment
 */
export interface AppointmentParticipant extends BackboneElement {
}
export interface Appointment extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Appointment';
}
export interface AppointmentResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AppointmentResponse';
}
/**
 * Logical network location for application activity
 */
export interface AuditEventAgentNetwork extends BackboneElement {
}
/**
 * Actor involved in the event
 * Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
 * For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
 */
export interface AuditEventAgent extends BackboneElement {
}
/**
 * Additional Information about the entity
 */
export interface AuditEventEntityDetail extends BackboneElement {
}
/**
 * Data or objects used
 * Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
 */
export interface AuditEventEntity extends BackboneElement {
}
/**
 * Audit Event Reporter
 * Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
 */
export interface AuditEventSource extends BackboneElement {
}
/**
 * Based on ATNA (RFC 3881).
 */
export interface AuditEvent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AuditEvent';
}
export interface Basic extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Basic';
}
/**
 * Typically, Binary resources are used for handling content such as:  * CDA Documents (i.e. with XDS) * PDF Documents * Images (the Media resource is preferred for handling images, but not possible when the content is already binary - e.g. XDS).
 */
export interface Binary extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Binary';
}
export interface BodySite extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'BodySite';
}
/**
 * Transaction Related Information
 */
export interface BundleEntryRequest extends BackboneElement {
}
/**
 * Transaction Related Information
 */
export interface BundleEntryResponse extends BackboneElement {
}
/**
 * Search related information
 */
export interface BundleEntrySearch extends BackboneElement {
}
/**
 * Entry in the bundle - will have a resource, or information
 */
export interface BundleEntry<BundleContentType = FhirResource> extends BackboneElement {
}
/**
 * Links related to this Bundle
 */
export interface BundleLink extends BackboneElement {
}
export interface Bundle<BundleContentType = FhirResource> extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Bundle';
}
/**
 * Document definition
 */
export interface CapabilityStatementDocument extends BackboneElement {
}
/**
 * If this describes a specific instance
 */
export interface CapabilityStatementImplementation extends BackboneElement {
}
/**
 * Where messages should be sent
 */
export interface CapabilityStatementMessagingEndpoint extends BackboneElement {
}
/**
 * Declare support for this event
 * The same event may be listed up to two times - once as sender and once as receiver.
 */
export interface CapabilityStatementMessagingEvent extends BackboneElement {
}
/**
 * Messages supported by this system
 * This is a proposed alternative to the messaging.event structure.
 */
export interface CapabilityStatementMessagingSupportedMessage extends BackboneElement {
}
/**
 * If messaging is supported
 * Multiple repetitions allow the documentation of multiple endpoints per solution.
 */
export interface CapabilityStatementMessaging extends BackboneElement {
}
/**
 * What operations are supported?
 */
export interface CapabilityStatementRestInteraction extends BackboneElement {
}
/**
 * Definition of an operation or a custom query
 */
export interface CapabilityStatementRestOperation extends BackboneElement {
}
/**
 * What operations are supported?
 */
export interface CapabilityStatementRestResourceInteraction extends BackboneElement {
}
/**
 * Search parameters supported by implementation
 */
export interface CapabilityStatementRestResourceSearchParam extends BackboneElement {
}
/**
 * Resource served on the REST interface
 * Max of one repetition per resource type.
 */
export interface CapabilityStatementRestResource extends BackboneElement {
}
/**
 * Certificates associated with security profiles
 */
export interface CapabilityStatementRestSecurityCertificate extends BackboneElement {
}
/**
 * Information about security of implementation
 */
export interface CapabilityStatementRestSecurity extends BackboneElement {
}
/**
 * If the endpoint is a RESTful one
 * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
 */
export interface CapabilityStatementRest extends BackboneElement {
}
/**
 * Software that is covered by this capability statement
 */
export interface CapabilityStatementSoftware extends BackboneElement {
}
export interface CapabilityStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CapabilityStatement';
}
/**
 * In-line definition of activity
 */
export interface CarePlanActivityDetail extends BackboneElement {
}
/**
 * Action to occur as part of plan
 */
export interface CarePlanActivity extends BackboneElement {
}
export interface CarePlan extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CarePlan';
}
/**
 * Members of the team
 */
export interface CareTeamParticipant extends BackboneElement {
}
export interface CareTeam extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CareTeam';
}
/**
 * Who performed charged service
 */
export interface ChargeItemParticipant extends BackboneElement {
}
export interface ChargeItem extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ChargeItem';
}
/**
 * Details about an accident
 */
export interface ClaimAccident extends BackboneElement {
}
/**
 * Members of the care team
 */
export interface ClaimCareTeam extends BackboneElement {
}
/**
 * List of Diagnosis
 */
export interface ClaimDiagnosis extends BackboneElement {
}
/**
 * Exceptions, special considerations, the condition, situation, prior or concurrent issues
 */
export interface ClaimInformation extends BackboneElement {
}
/**
 * Insurance or medical plan
 */
export interface ClaimInsurance extends BackboneElement {
}
/**
 * Additional items
 */
export interface ClaimItemDetailSubDetail extends BackboneElement {
}
/**
 * Additional items
 */
export interface ClaimItemDetail extends BackboneElement {
}
/**
 * Goods and Services
 */
export interface ClaimItem extends BackboneElement {
}
/**
 * Party to be paid any benefits payable
 */
export interface ClaimPayee extends BackboneElement {
}
/**
 * Procedures performed
 */
export interface ClaimProcedure extends BackboneElement {
}
/**
 * Related Claims which may be revelant to processing this claimn
 */
export interface ClaimRelated extends BackboneElement {
}
export interface Claim extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Claim';
}
/**
 * Added items details
 */
export interface ClaimResponseAddItemDetail extends BackboneElement {
}
/**
 * Insurer added line items
 */
export interface ClaimResponseAddItem extends BackboneElement {
}
/**
 * Processing errors
 */
export interface ClaimResponseError extends BackboneElement {
}
/**
 * Insurance or medical plan
 */
export interface ClaimResponseInsurance extends BackboneElement {
}
/**
 * Adjudication details
 */
export interface ClaimResponseItemAdjudication extends BackboneElement {
}
/**
 * Subdetail line items
 */
export interface ClaimResponseItemDetailSubDetail extends BackboneElement {
}
/**
 * Detail line items
 */
export interface ClaimResponseItemDetail extends BackboneElement {
}
/**
 * Line items
 */
export interface ClaimResponseItem extends BackboneElement {
}
/**
 * Payment details, if paid
 */
export interface ClaimResponsePayment extends BackboneElement {
}
/**
 * Processing notes
 */
export interface ClaimResponseProcessNote extends BackboneElement {
}
export interface ClaimResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ClaimResponse';
}
/**
 * Possible or likely findings and diagnoses
 */
export interface ClinicalImpressionFinding extends BackboneElement {
}
/**
 * One or more sets of investigations (signs, symptions, etc.)
 */
export interface ClinicalImpressionInvestigation extends BackboneElement {
}
export interface ClinicalImpression extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ClinicalImpression';
}
/**
 * Additional representations for the concept
 */
export interface CodeSystemConceptDesignation extends BackboneElement {
}
/**
 * Property value for the concept
 */
export interface CodeSystemConceptProperty extends BackboneElement {
}
/**
 * Concepts in the code system
 * If this is empty, it means that the code system resource does not represent the content of the code system.
 */
export interface CodeSystemConcept extends BackboneElement {
}
/**
 * Filter that can be used in a value set
 */
export interface CodeSystemFilter extends BackboneElement {
}
/**
 * Additional information supplied about each concept
 */
export interface CodeSystemProperty extends BackboneElement {
}
export interface CodeSystem extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CodeSystem';
}
/**
 * Message payload
 */
export interface CommunicationPayload extends BackboneElement {
}
export interface Communication extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Communication';
}
/**
 * Message payload
 */
export interface CommunicationRequestPayload extends BackboneElement {
}
/**
 * Who/what is requesting service
 */
export interface CommunicationRequestRequester extends BackboneElement {
}
export interface CommunicationRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CommunicationRequest';
}
/**
 * How a resource is related to the compartment
 */
export interface CompartmentDefinitionResource extends BackboneElement {
}
/**
 * In FHIR, search is not performed directly on a resource (by XML or JSON path), but on a named parameter that maps into the resource content.
 */
export interface CompartmentDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CompartmentDefinition';
}
/**
 * Attests to accuracy of composition
 * Only list each attester once.
 */
export interface CompositionAttester extends BackboneElement {
}
/**
 * The clinical service(s) being documented
 * The event needs to be consistent with the type element, though can provide further information if desired.
 */
export interface CompositionEvent extends BackboneElement {
}
/**
 * Relationships to other compositions/documents
 * A document is a version specific composition.
 */
export interface CompositionRelatesTo extends BackboneElement {
}
/**
 * Composition is broken into sections
 */
export interface CompositionSection extends BackboneElement {
}
/**
 * While the focus of this specification is on patient-specific clinical statements, this resource can also apply to other healthcare-related statements such as study protocol designs, healthcare invoices and other activities that are not necessarily patient-specific or clinical.
 */
export interface Composition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Composition';
}
/**
 * Other elements required for this mapping (from context)
 */
export interface ConceptMapGroupElementTargetDependsOn extends BackboneElement {
}
/**
 * Concept in target system for element
 * Ideally there would only be one map, with equal or equivalent mapping. But multiple maps are allowed for several narrower options, or to assert that other concepts are unmatched.
 */
export interface ConceptMapGroupElementTarget extends BackboneElement {
}
/**
 * Mappings for a concept from the source set
 * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
 */
export interface ConceptMapGroupElement extends BackboneElement {
}
/**
 * When no match in the mappings
 * This only applies if the source code is in the system defined for the group.
 */
export interface ConceptMapGroupUnmapped extends BackboneElement {
}
/**
 * Same source and target systems
 */
export interface ConceptMapGroup extends BackboneElement {
}
export interface ConceptMap extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ConceptMap';
}
/**
 * Supporting evidence
 * The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.
 */
export interface ConditionEvidence extends BackboneElement {
}
/**
 * Stage/grade, usually assessed formally
 */
export interface ConditionStage extends BackboneElement {
}
export interface Condition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Condition';
}
/**
 * Who|what controlled by this consent (or group, by role)
 */
export interface ConsentActor extends BackboneElement {
}
/**
 * Data controlled by this consent
 */
export interface ConsentData extends BackboneElement {
}
/**
 * Who|what controlled by this exception (or group, by role)
 */
export interface ConsentExceptActor extends BackboneElement {
}
/**
 * Data controlled by this exception
 */
export interface ConsentExceptData extends BackboneElement {
}
/**
 * Additional rule -  addition or removal of permissions
 */
export interface ConsentExcept extends BackboneElement {
}
/**
 * Policies covered by this consent
 */
export interface ConsentPolicy extends BackboneElement {
}
/**
 * Broadly, there are 3 key areas of consent for patients: Consent around sharing information (aka Privacy Consent Directive - Authorization to Collect, Use, or Disclose information), consent for specific treatment, or kinds of treatment, and general advance care directives.
 */
export interface Consent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Consent';
}
/**
 * Entity being ascribed responsibility
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 * For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
 */
export interface ContractAgent extends BackboneElement {
}
/**
 * Contract Friendly Language
 */
export interface ContractFriendly extends BackboneElement {
}
/**
 * Contract Legal Language
 */
export interface ContractLegal extends BackboneElement {
}
/**
 * Computable Contract Language
 */
export interface ContractRule extends BackboneElement {
}
/**
 * Contract Signatory
 * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
 * For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
 */
export interface ContractSigner extends BackboneElement {
}
/**
 * Contract Term Agent List
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 * For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
 */
export interface ContractTermAgent extends BackboneElement {
}
/**
 * Contract Term Valued Item List
 */
export interface ContractTermValuedItem extends BackboneElement {
}
/**
 * Contract Term List
 */
export interface ContractTerm extends BackboneElement {
}
/**
 * Contract Valued Item List
 */
export interface ContractValuedItem extends BackboneElement {
}
export interface Contract extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Contract';
}
/**
 * Additional coverage classifications
 */
export interface CoverageGrouping extends BackboneElement {
}
export interface Coverage extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Coverage';
}
/**
 * External specification mapped to
 */
export interface DataElementMapping extends BackboneElement {
}
/**
 * Often called a clinical template.
 */
export interface DataElement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DataElement';
}
/**
 * Step taken to address
 */
export interface DetectedIssueMitigation extends BackboneElement {
}
export interface DetectedIssue extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DetectedIssue';
}
/**
 * Unique Device Identifier (UDI) Barcode string
 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
 */
export interface DeviceUdi extends BackboneElement {
}
export interface Device extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Device';
}
/**
 * Specification details such as Component Revisions, or Serial Numbers
 */
export interface DeviceComponentProductionSpecification extends BackboneElement {
}
/**
 * For the initial scope, this DeviceComponent resource is only applicable to describe a single node in the containment tree that is produced by the context scanner in any medical device that implements or derives from the ISO/IEEE 11073 standard and that does not represent a metric. Examples for such a node are MDS, VMD, or Channel.
 */
export interface DeviceComponent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceComponent';
}
/**
 * Describes the calibrations that have been performed or that are required to be performed
 */
export interface DeviceMetricCalibration extends BackboneElement {
}
/**
 * For the initial scope, this DeviceMetric resource is only applicable to describe a single metric node in the containment tree that is produced by the context scanner in any medical device that implements or derives from the ISO/IEEE 11073 standard.
 */
export interface DeviceMetric extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceMetric';
}
/**
 * Who/what is requesting diagnostics
 */
export interface DeviceRequestRequester extends BackboneElement {
}
export interface DeviceRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceRequest';
}
export interface DeviceUseStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceUseStatement';
}
/**
 * Key images associated with this report
 */
export interface DiagnosticReportImage extends BackboneElement {
}
/**
 * Participants in producing the report
 */
export interface DiagnosticReportPerformer extends BackboneElement {
}
/**
 * This is intended to capture a single report, and is not suitable for use in displaying summary information that covers multiple reports.  For example, this resource has not been designed for laboratory cumulative reporting formats nor detailed structured reports for sequencing.
 */
export interface DiagnosticReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DiagnosticReport';
}
/**
 * The items included
 */
export interface DocumentManifestContent extends BackboneElement {
}
/**
 * Related things
 * May be identifiers or resources that caused the DocumentManifest to be created.
 */
export interface DocumentManifestRelated extends BackboneElement {
}
export interface DocumentManifest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DocumentManifest';
}
/**
 * Document referenced
 */
export interface DocumentReferenceContent extends BackboneElement {
}
/**
 * Related identifiers or resources
 * May be identifiers or resources that caused the DocumentReference or referenced Document to be created.
 */
export interface DocumentReferenceContextRelated extends BackboneElement {
}
/**
 * Clinical context of document
 * These values are primarily added to help with searching for interesting/relevant documents.
 */
export interface DocumentReferenceContext extends BackboneElement {
}
/**
 * Relationships to other documents
 * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
 */
export interface DocumentReferenceRelatesTo extends BackboneElement {
}
/**
 * Usually, this is used for documents other than those defined by FHIR.
 */
export interface DocumentReference extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DocumentReference';
}
export interface DomainResource extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: string;
}
export interface EligibilityRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EligibilityRequest';
}
/**
 * Processing errors
 */
export interface EligibilityResponseError extends BackboneElement {
}
/**
 * Benefit Summary
 */
export interface EligibilityResponseInsuranceBenefitBalanceFinancial extends BackboneElement {
}
/**
 * Benefits by Category
 */
export interface EligibilityResponseInsuranceBenefitBalance extends BackboneElement {
}
/**
 * Details by insurance coverage
 */
export interface EligibilityResponseInsurance extends BackboneElement {
}
export interface EligibilityResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EligibilityResponse';
}
/**
 * List of past encounter classes
 */
export interface EncounterClassHistory extends BackboneElement {
}
/**
 * The list of diagnosis relevant to this encounter
 */
export interface EncounterDiagnosis extends BackboneElement {
}
/**
 * Details about the admission to a healthcare service
 * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.
 * The duration recorded in the period of this encounter covers the entire scope of this hospitalization record.
 */
export interface EncounterHospitalization extends BackboneElement {
}
/**
 * List of locations where the patient has been
 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
 */
export interface EncounterLocation extends BackboneElement {
}
/**
 * List of participants involved in the encounter
 */
export interface EncounterParticipant extends BackboneElement {
}
/**
 * List of past encounter statuses
 * The current status is always found in the current version of the resource, not the status history.
 */
export interface EncounterStatusHistory extends BackboneElement {
}
export interface Encounter extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Encounter';
}
export interface Endpoint extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Endpoint';
}
export interface EnrollmentRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EnrollmentRequest';
}
export interface EnrollmentResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EnrollmentResponse';
}
/**
 * The list of diagnosis relevant to this episode of care
 */
export interface EpisodeOfCareDiagnosis extends BackboneElement {
}
/**
 * Past list of status codes (the current status may be included to cover the start date of the status)
 */
export interface EpisodeOfCareStatusHistory extends BackboneElement {
}
export interface EpisodeOfCare extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EpisodeOfCare';
}
/**
 * The designation to be excluded
 * At least one of designation.language or designation.use must be provided for each exclude.designation element.
 */
export interface ExpansionProfileDesignationExcludeDesignation extends BackboneElement {
}
/**
 * Designations to be excluded
 */
export interface ExpansionProfileDesignationExclude extends BackboneElement {
}
/**
 * The designation to be included
 * At least one of designation.language or designation.use must be provided for each include.designation element.
 */
export interface ExpansionProfileDesignationIncludeDesignation extends BackboneElement {
}
/**
 * Designations to be included
 */
export interface ExpansionProfileDesignationInclude extends BackboneElement {
}
/**
 * When the expansion profile imposes designation contraints
 */
export interface ExpansionProfileDesignation extends BackboneElement {
}
/**
 * Systems/Versions to be exclude
 * When a system is excluded, and this makes a material difference to the expansion, the exclusion SHALL  be noted in the expansion parameters using a parameter 'excluded'.
 */
export interface ExpansionProfileExcludedSystem extends BackboneElement {
}
/**
 * Fix use of a code system to a particular version
 */
export interface ExpansionProfileFixedVersion extends BackboneElement {
}
export interface ExpansionProfile extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ExpansionProfile';
}
/**
 * Details of an accident
 */
export interface ExplanationOfBenefitAccident extends BackboneElement {
}
/**
 * Added items details
 */
export interface ExplanationOfBenefitAddItemDetail extends BackboneElement {
}
/**
 * Insurer added line items
 */
export interface ExplanationOfBenefitAddItem extends BackboneElement {
}
/**
 * Benefit Summary
 */
export interface ExplanationOfBenefitBenefitBalanceFinancial extends BackboneElement {
}
/**
 * Balance by Benefit Category
 */
export interface ExplanationOfBenefitBenefitBalance extends BackboneElement {
}
/**
 * Care Team members
 */
export interface ExplanationOfBenefitCareTeam extends BackboneElement {
}
/**
 * List of Diagnosis
 */
export interface ExplanationOfBenefitDiagnosis extends BackboneElement {
}
/**
 * Exceptions, special considerations, the condition, situation, prior or concurrent issues
 */
export interface ExplanationOfBenefitInformation extends BackboneElement {
}
/**
 * Insurance or medical plan
 */
export interface ExplanationOfBenefitInsurance extends BackboneElement {
}
/**
 * Adjudication details
 */
export interface ExplanationOfBenefitItemAdjudication extends BackboneElement {
}
/**
 * Additional items
 */
export interface ExplanationOfBenefitItemDetailSubDetail extends BackboneElement {
}
/**
 * Additional items
 */
export interface ExplanationOfBenefitItemDetail extends BackboneElement {
}
/**
 * Goods and Services
 */
export interface ExplanationOfBenefitItem extends BackboneElement {
}
/**
 * Party to be paid any benefits payable
 */
export interface ExplanationOfBenefitPayee extends BackboneElement {
}
/**
 * Payment (if paid)
 */
export interface ExplanationOfBenefitPayment extends BackboneElement {
}
/**
 * Procedures performed
 */
export interface ExplanationOfBenefitProcedure extends BackboneElement {
}
/**
 * Processing notes
 */
export interface ExplanationOfBenefitProcessNote extends BackboneElement {
}
/**
 * Related Claims which may be revelant to processing this claim
 */
export interface ExplanationOfBenefitRelated extends BackboneElement {
}
export interface ExplanationOfBenefit extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ExplanationOfBenefit';
}
/**
 * Condition that the related person had
 * If none of the conditions listed have an outcome of "death" specified, that indicates that none of the specified conditions are known to have been the primary cause of death.
 */
export interface FamilyMemberHistoryCondition extends BackboneElement {
}
export interface FamilyMemberHistory extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'FamilyMemberHistory';
}
export interface Flag extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Flag';
}
/**
 * Target outcome for the goal
 */
export interface GoalTarget extends BackboneElement {
}
/**
 * Goal can be achieving a particular change or merely maintaining a current state or even slowing a decline.
 */
export interface Goal extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Goal';
}
/**
 * Compartment Consistency Rules
 */
export interface GraphDefinitionLinkTargetCompartment extends BackboneElement {
}
/**
 * Potential target for the link
 */
export interface GraphDefinitionLinkTarget extends BackboneElement {
}
/**
 * Links this graph makes rules about
 */
export interface GraphDefinitionLink extends BackboneElement {
}
export interface GraphDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'GraphDefinition';
}
/**
 * Trait of group members
 * All the identified characteristics must be true for an entity to a member of the group.
 */
export interface GroupCharacteristic extends BackboneElement {
}
/**
 * Who or what is in group
 */
export interface GroupMember extends BackboneElement {
}
export interface Group extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Group';
}
export interface GuidanceResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'GuidanceResponse';
}
/**
 * Times the Service Site is available
 * More detailed availability information may be provided in associated Schedule/Slot resources.
 */
export interface HealthcareServiceAvailableTime extends BackboneElement {
}
/**
 * Not available during this time due to provided reason
 */
export interface HealthcareServiceNotAvailable extends BackboneElement {
}
export interface HealthcareService extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'HealthcareService';
}
/**
 * The selected instance
 * SOP Instance component identify the instance selected, along with the study and series identities to form the DICOM identity hierarchy.
 */
export interface ImagingManifestStudySeriesInstance extends BackboneElement {
}
/**
 * Series identity of the selected instances
 * Series component represents the series level identity and locator information of the DICOM SOP instances in the selection.
 */
export interface ImagingManifestStudySeries extends BackboneElement {
}
/**
 * Study identity of the selected instances
 * Study component represents the study level identity and locator information of the DICOM SOP instances in the selection. It is the top level identity of the hierarchical identification of the instances.
 */
export interface ImagingManifestStudy extends BackboneElement {
}
export interface ImagingManifest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImagingManifest';
}
/**
 * A single SOP instance from the series
 */
export interface ImagingStudySeriesInstance extends BackboneElement {
}
/**
 * Each study has one or more series of instances
 */
export interface ImagingStudySeries extends BackboneElement {
}
export interface ImagingStudy extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImagingStudy';
}
/**
 * Administration/non-administration reasons
 */
export interface ImmunizationExplanation extends BackboneElement {
}
/**
 * Who performed event
 */
export interface ImmunizationPractitioner extends BackboneElement {
}
/**
 * Details of a reaction that follows immunization
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case,  it should be recorded as a new [AllergyIntolerance](allergyintolerance.html) resource instance as most systems will not query against  past Immunization.reaction elements.
 */
export interface ImmunizationReaction extends BackboneElement {
}
/**
 * What protocol was followed
 */
export interface ImmunizationVaccinationProtocol extends BackboneElement {
}
export interface Immunization extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Immunization';
}
/**
 * Dates governing proposed immunization
 */
export interface ImmunizationRecommendationRecommendationDateCriterion extends BackboneElement {
}
/**
 * Protocol used by recommendation
 */
export interface ImmunizationRecommendationRecommendationProtocol extends BackboneElement {
}
/**
 * Vaccine administration recommendations
 */
export interface ImmunizationRecommendationRecommendation extends BackboneElement {
}
export interface ImmunizationRecommendation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImmunizationRecommendation';
}
/**
 * Another Implementation guide this depends on
 */
export interface ImplementationGuideDependency extends BackboneElement {
}
/**
 * Profiles that apply globally
 * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
 */
export interface ImplementationGuideGlobal extends BackboneElement {
}
/**
 * Resource in the implementation guide
 */
export interface ImplementationGuidePackageResource extends BackboneElement {
}
/**
 * Group of resources as used in .page.package
 */
export interface ImplementationGuidePackage extends BackboneElement {
}
/**
 * Page/Section in the Guide
 * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
 */
export interface ImplementationGuidePage extends BackboneElement {
}
export interface ImplementationGuide extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImplementationGuide';
}
export interface Library extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Library';
}
/**
 * Item to be linked
 */
export interface LinkageItem extends BackboneElement {
}
export interface Linkage extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Linkage';
}
/**
 * Entries in the list
 * If there are no entries in the list, an emptyReason SHOULD be provided.
 */
export interface ListEntry extends BackboneElement {
}
export interface List extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'List';
}
/**
 * The absolute geographic location
 */
export interface LocationPosition extends BackboneElement {
}
export interface Location extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Location';
}
/**
 * Population criteria
 */
export interface MeasureGroupPopulation extends BackboneElement {
}
/**
 * Stratifier criteria for the measure
 */
export interface MeasureGroupStratifier extends BackboneElement {
}
/**
 * Population criteria group
 */
export interface MeasureGroup extends BackboneElement {
}
/**
 * What other data should be reported with the measure
 * Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.
 */
export interface MeasureSupplementalData extends BackboneElement {
}
export interface Measure extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Measure';
}
/**
 * The populations in the group
 */
export interface MeasureReportGroupPopulation extends BackboneElement {
}
/**
 * Population results in this stratum
 */
export interface MeasureReportGroupStratifierStratumPopulation extends BackboneElement {
}
/**
 * Stratum results, one for each unique value in the stratifier
 */
export interface MeasureReportGroupStratifierStratum extends BackboneElement {
}
/**
 * Stratification results
 */
export interface MeasureReportGroupStratifier extends BackboneElement {
}
/**
 * Measure results for each group
 */
export interface MeasureReportGroup extends BackboneElement {
}
export interface MeasureReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MeasureReport';
}
export interface Media extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Media';
}
/**
 * Active or inactive ingredient
 * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
 */
export interface MedicationIngredient extends BackboneElement {
}
/**
 * Identifies a single production run
 */
export interface MedicationPackageBatch extends BackboneElement {
}
/**
 * What is  in the package
 */
export interface MedicationPackageContent extends BackboneElement {
}
/**
 * Details about packaged medications
 */
export interface MedicationPackage extends BackboneElement {
}
export interface Medication extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Medication';
}
/**
 * Details of how medication was taken
 */
export interface MedicationAdministrationDosage extends BackboneElement {
}
/**
 * Who administered substance
 */
export interface MedicationAdministrationPerformer extends BackboneElement {
}
/**
 * The WG will be updating the MedicationAdministration resource  to adjust each affected resource to align with the workflow pattern (see workflow.html).
 */
export interface MedicationAdministration extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationAdministration';
}
/**
 * Who performed event
 * The performer will be reviewed as part of STU4.
 */
export interface MedicationDispensePerformer extends BackboneElement {
}
/**
 * Whether a substitution was performed on the dispense
 */
export interface MedicationDispenseSubstitution extends BackboneElement {
}
/**
 * The WG will be updating the MedicationDispense resource  to adjust each affected resource to align with the workflow pattern (see workflow.html).
 */
export interface MedicationDispense extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationDispense';
}
/**
 * Medication supply authorization
 */
export interface MedicationRequestDispenseRequest extends BackboneElement {
}
/**
 * Who/What requested the Request
 */
export interface MedicationRequestRequester extends BackboneElement {
}
/**
 * Any restrictions on medication substitution
 */
export interface MedicationRequestSubstitution extends BackboneElement {
}
export interface MedicationRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationRequest';
}
/**
 * When interpreting a medicationStatement, the value of the status and NotTaken needed to be considered:
 * MedicationStatement.status + MedicationStatement.wasNotTaken
 * Status=Active + NotTaken=T = Not currently taking
 * Status=Completed + NotTaken=T = Not taken in the past
 * Status=Intended + NotTaken=T = No intention of taking
 * Status=Active + NotTaken=F = Taking, but not as prescribed
 * Status=Active + NotTaken=F = Taking
 * Status=Intended +NotTaken= F = Will be taking (not started)
 * Status=Completed + NotTaken=F = Taken in past
 * Status=In Error + NotTaken=N/A = In Error.
 */
export interface MedicationStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationStatement';
}
/**
 * Responses to this message
 * This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
 */
export interface MessageDefinitionAllowedResponse extends BackboneElement {
}
/**
 * Resource(s) that are the subject of the event
 */
export interface MessageDefinitionFocus extends BackboneElement {
}
/**
 * This would be a MIF-level artifact.
 */
export interface MessageDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MessageDefinition';
}
/**
 * Message destination application(s)
 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
 */
export interface MessageHeaderDestination extends BackboneElement {
}
/**
 * If this is a reply to prior message
 */
export interface MessageHeaderResponse extends BackboneElement {
}
/**
 * Message source application
 */
export interface MessageHeaderSource extends BackboneElement {
}
export interface MessageHeader extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MessageHeader';
}
/**
 * Unique identifiers used for system
 * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
 */
export interface NamingSystemUniqueId extends BackboneElement {
}
export interface NamingSystem extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'NamingSystem';
}
/**
 * Formula feeding instruction as structured data
 * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
 */
export interface NutritionOrderEnteralFormulaAdministration extends BackboneElement {
}
/**
 * Enteral formula components
 */
export interface NutritionOrderEnteralFormula extends BackboneElement {
}
/**
 * Required  nutrient modifications
 */
export interface NutritionOrderOralDietNutrient extends BackboneElement {
}
/**
 * Required  texture modifications
 */
export interface NutritionOrderOralDietTexture extends BackboneElement {
}
/**
 * Oral diet components
 */
export interface NutritionOrderOralDiet extends BackboneElement {
}
/**
 * Supplement components
 */
export interface NutritionOrderSupplement extends BackboneElement {
}
/**
 * Referenced by an Order Request (workflow).
 */
export interface NutritionOrder extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'NutritionOrder';
}
/**
 * Component results
 * For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
 */
export interface ObservationComponent extends BackboneElement {
}
/**
 * Provides guide for interpretation
 * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this may not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
 */
export interface ObservationReferenceRange extends BackboneElement {
}
/**
 * Resource related to this observation
 * For a discussion on the ways Observations can assembled in groups together see [Notes below](observation.html#4.20.4).
 */
export interface ObservationRelated extends BackboneElement {
}
/**
 * Used for simple observations such as device measurements, laboratory atomic results, vital signs, height, weight, smoking status, comments, etc.  Other resources are used to provide context for observations such as lab reports, etc.
 */
export interface Observation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Observation';
}
/**
 * Define overloaded variants for when  generating code
 * The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
 */
export interface OperationDefinitionOverload extends BackboneElement {
}
/**
 * ValueSet details if this is coded
 */
export interface OperationDefinitionParameterBinding extends BackboneElement {
}
/**
 * Parameters for the operation/query
 * Query Definitions only have one output parameter, named "result". This may not be described, but can be to allow a profile to be defined.
 */
export interface OperationDefinitionParameter extends BackboneElement {
}
export interface OperationDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'OperationDefinition';
}
/**
 * A single issue associated with the action
 */
export interface OperationOutcomeIssue extends BackboneElement {
}
/**
 * Can result from the failure of a REST call or be part of the response message returned from a request message.  If sent with extensions overriding particular issues, might even appear as part of a request message.
 */
export interface OperationOutcome extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'OperationOutcome';
}
/**
 * Contact for the organization for a certain purpose
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
export interface OrganizationContact extends BackboneElement {
}
export interface Organization extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Organization';
}
/**
 * Operation Parameter
 */
export interface ParametersParameter extends BackboneElement {
}
/**
 * The parameters that may be used are defined by the OperationDefinition resource.
 */
export interface Parameters extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Parameters';
}
/**
 * This patient is known to be an animal (non-human)
 * The animal element is labeled "Is Modifier" since patients may be non-human. Systems SHALL either handle patient details appropriately (e.g. inform users patient is not human) or reject declared animal records.   The absense of the animal element does not imply that the patient is a human. If a system requires such a positive assertion that the patient is human, an extension will be required.  (Do not use a species of homo-sapiens in animal species, as this would incorrectly infer that the patient is an animal).
 */
export interface PatientAnimal extends BackboneElement {
}
/**
 * A list of Languages which may be used to communicate with the patient about his or her health
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
export interface PatientCommunication extends BackboneElement {
}
/**
 * A contact party (e.g. guardian, partner, friend) for the patient
 * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
 */
export interface PatientContact extends BackboneElement {
}
/**
 * Link to another patient resource that concerns the same actual person
 * There is no assumption that linked patient records have mutual links. 
 * This element is labelled as a modifier because it may not be the main Patient resource, and the referenced patient should be used instead of this Patient record. This is when the link.type value is 'replaced-by'.
 */
export interface PatientLink extends BackboneElement {
}
export interface Patient extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Patient';
}
export interface PaymentNotice extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PaymentNotice';
}
/**
 * List of settlements
 */
export interface PaymentReconciliationDetail extends BackboneElement {
}
/**
 * Processing comments
 */
export interface PaymentReconciliationProcessNote extends BackboneElement {
}
export interface PaymentReconciliation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PaymentReconciliation';
}
/**
 * Link to a resource that concerns the same actual person
 */
export interface PersonLink extends BackboneElement {
}
/**
 * The Person resource does justice to person registries that keep track of persons regardless of their role. The Person resource is also a primary resource to point to for people acting in a particular role such as SubjectofCare, Practitioner, and Agent. Very few attributes are specific to any role and so Person is kept lean. Most attributes are expected to be tied to the role the Person plays rather than the Person himself. Examples of that are Guardian (SubjectofCare), ContactParty (SubjectOfCare, Practitioner), and multipleBirthInd (SubjectofCare).
 */
export interface Person extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Person';
}
/**
 * Whether or not the action is applicable
 */
export interface PlanDefinitionActionCondition extends BackboneElement {
}
/**
 * Dynamic aspects of the definition
 */
export interface PlanDefinitionActionDynamicValue extends BackboneElement {
}
/**
 * Who should participate in the action
 */
export interface PlanDefinitionActionParticipant extends BackboneElement {
}
/**
 * Relationship to another action
 * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
 */
export interface PlanDefinitionActionRelatedAction extends BackboneElement {
}
/**
 * Action defined by the plan
 */
export interface PlanDefinitionAction extends BackboneElement {
}
/**
 * Target outcome for the goal
 */
export interface PlanDefinitionGoalTarget extends BackboneElement {
}
/**
 * What the plan is trying to accomplish
 */
export interface PlanDefinitionGoal extends BackboneElement {
}
export interface PlanDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PlanDefinition';
}
/**
 * Qualifications obtained by training and certification
 */
export interface PractitionerQualification extends BackboneElement {
}
/**
 * Note that a cab driver no longer fits the bill. You probably would be interested in the organization rather than the individual?
 */
export interface Practitioner extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Practitioner';
}
/**
 * Times the Service Site is available
 * More detailed availability information may be provided in associated Schedule/Slot resources.
 */
export interface PractitionerRoleAvailableTime extends BackboneElement {
}
/**
 * Not available during this time due to provided reason
 */
export interface PractitionerRoleNotAvailable extends BackboneElement {
}
export interface PractitionerRole extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PractitionerRole';
}
/**
 * Device changed in procedure
 */
export interface ProcedureFocalDevice extends BackboneElement {
}
/**
 * The people who performed the procedure
 */
export interface ProcedurePerformer extends BackboneElement {
}
export interface Procedure extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Procedure';
}
/**
 * Who/what is requesting procedure or diagnostic
 * This not the dispatcher, but rather who is the authorizer.
 */
export interface ProcedureRequestRequester extends BackboneElement {
}
export interface ProcedureRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ProcedureRequest';
}
/**
 * Items to re-adjudicate
 */
export interface ProcessRequestItem extends BackboneElement {
}
export interface ProcessRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ProcessRequest';
}
/**
 * Processing comments or additional requirements
 */
export interface ProcessResponseProcessNote extends BackboneElement {
}
export interface ProcessResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ProcessResponse';
}
/**
 * Actor involved
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 */
export interface ProvenanceAgent extends BackboneElement {
}
/**
 * An entity used in this activity
 * Multiple userIds may be associated with the same Practitioner or other individual across various appearances, each with distinct privileges.
 */
export interface ProvenanceEntity extends BackboneElement {
}
/**
 * Some parties may be duplicated between the target resource and its provenance.  For instance, the prescriber is usually (but not always) the author of the prescription resource. This resource is defined with close consideration for W3C Provenance.
 */
export interface Provenance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Provenance';
}
/**
 * Only allow data when
 * If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.
 * This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met.
 */
export interface QuestionnaireItemEnableWhen extends BackboneElement {
}
/**
 * Permitted answer
 * This element can be used when the value set machinery of options is deemed too cumbersome or when there's a need to capture options that are not codes.
 */
export interface QuestionnaireItemOption extends BackboneElement {
}
/**
 * Questions and sections within the Questionnaire
 * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
 */
export interface QuestionnaireItem extends BackboneElement {
}
export interface Questionnaire extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Questionnaire';
}
/**
 * The response(s) to the question
 * The value is nested because we cannot have a repeating structure that has variable type.
 */
export interface QuestionnaireResponseItemAnswer extends BackboneElement {
}
/**
 * Groups and questions
 * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).
 */
export interface QuestionnaireResponseItem extends BackboneElement {
}
/**
 * The QuestionnaireResponse contains enough information about the questions asked and their organization that it can be interpreted somewhat independently from the Questionnaire it is based on.  I.e. You don't need access to the Questionnaire in order to extract basic information from a QuestionnaireResponse.
 */
export interface QuestionnaireResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'QuestionnaireResponse';
}
/**
 * Who/what is requesting service
 */
export interface ReferralRequestRequester extends BackboneElement {
}
export interface ReferralRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ReferralRequest';
}
export interface RelatedPerson extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RelatedPerson';
}
/**
 * Whether or not the action is applicable
 */
export interface RequestGroupActionCondition extends BackboneElement {
}
/**
 * Relationship to another action
 */
export interface RequestGroupActionRelatedAction extends BackboneElement {
}
/**
 * Proposed actions, if any
 */
export interface RequestGroupAction extends BackboneElement {
}
export interface RequestGroup extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RequestGroup';
}
/**
 * Defined path through the study for a subject
 */
export interface ResearchStudyArm extends BackboneElement {
}
/**
 * Need to make sure we encompass public health studies.
 */
export interface ResearchStudy extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ResearchStudy';
}
/**
 * Need to make sure we encompass public health studies.
 */
export interface ResearchSubject extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ResearchSubject';
}
export interface Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: string;
}
/**
 * Outcome predicted
 * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
 */
export interface RiskAssessmentPrediction extends BackboneElement {
}
export interface RiskAssessment extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RiskAssessment';
}
export interface Schedule extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Schedule';
}
/**
 * For Composite resources to define the parts
 */
export interface SearchParameterComponent extends BackboneElement {
}
/**
 * In FHIR, search is not performed directly on a resource (by XML or JSON path), but on a named parameter that maps into the resource content.
 */
export interface SearchParameter extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SearchParameter';
}
/**
 * An set of value as quality of sequence
 */
export interface SequenceQuality extends BackboneElement {
}
/**
 * A sequence used as reference
 */
export interface SequenceReferenceSeq extends BackboneElement {
}
/**
 * External repository which contains detailed report related with observedSeq in this resource
 */
export interface SequenceRepository extends BackboneElement {
}
/**
 * Variant in sequence
 */
export interface SequenceVariant extends BackboneElement {
}
export interface Sequence extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Sequence';
}
export interface ServiceDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ServiceDefinition';
}
export interface Slot extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Slot';
}
/**
 * Collection details
 */
export interface SpecimenCollection extends BackboneElement {
}
/**
 * Direct container of specimen (tube/slide, etc.)
 */
export interface SpecimenContainer extends BackboneElement {
}
/**
 * Processing and processing step details
 */
export interface SpecimenProcessing extends BackboneElement {
}
export interface Specimen extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Specimen';
}
/**
 * Differential view of the structure
 */
export interface StructureDefinitionDifferential extends BackboneElement {
}
/**
 * External specification that the content is mapped to
 */
export interface StructureDefinitionMapping extends BackboneElement {
}
/**
 * Snapshot view of the structure
 */
export interface StructureDefinitionSnapshot extends BackboneElement {
}
export interface StructureDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'StructureDefinition';
}
/**
 * Named instance provided when invoking the map
 * If no inputs are named, then the entry mappings are type based.
 */
export interface StructureMapGroupInput extends BackboneElement {
}
/**
 * Which other rules to apply in the context of this rule
 */
export interface StructureMapGroupRuleDependent extends BackboneElement {
}
/**
 * Source inputs to the mapping
 */
export interface StructureMapGroupRuleSource extends BackboneElement {
}
/**
 * Parameters to the transform
 */
export interface StructureMapGroupRuleTargetParameter extends BackboneElement {
}
/**
 * Content to create because of this mapping rule
 */
export interface StructureMapGroupRuleTarget extends BackboneElement {
}
/**
 * Transform Rule from source to target
 */
export interface StructureMapGroupRule extends BackboneElement {
}
/**
 * Named sections for reader convenience
 */
export interface StructureMapGroup extends BackboneElement {
}
/**
 * Structure Definition used by this map
 * It is not necessary for a structure map to identify any dependent structures, though not losting them may restrict its usefulness.
 */
export interface StructureMapStructure extends BackboneElement {
}
export interface StructureMap extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'StructureMap';
}
/**
 * The channel on which to report matches to the criteria
 */
export interface SubscriptionChannel extends BackboneElement {
}
export interface Subscription extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Subscription';
}
/**
 * Composition information about the substance
 */
export interface SubstanceIngredient extends BackboneElement {
}
/**
 * If this describes a specific package/container of the substance
 */
export interface SubstanceInstance extends BackboneElement {
}
export interface Substance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Substance';
}
/**
 * The item that is delivered or supplied
 */
export interface SupplyDeliverySuppliedItem extends BackboneElement {
}
export interface SupplyDelivery extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SupplyDelivery';
}
/**
 * The item being requested
 */
export interface SupplyRequestOrderedItem extends BackboneElement {
}
/**
 * Who/what is requesting service
 */
export interface SupplyRequestRequester extends BackboneElement {
}
export interface SupplyRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SupplyRequest';
}
/**
 * Information used to perform task
 */
export interface TaskInput extends BackboneElement {
}
/**
 * Information produced as part of task
 */
export interface TaskOutput extends BackboneElement {
}
/**
 * Who is asking for task to be done
 */
export interface TaskRequester extends BackboneElement {
}
/**
 * Constraints on fulfillment tasks
 */
export interface TaskRestriction extends BackboneElement {
}
export interface Task extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Task';
}
/**
 * A participant in the test execution, either the execution engine, a client, or a server
 */
export interface TestReportParticipant extends BackboneElement {
}
/**
 * The assertion to perform
 */
export interface TestReportSetupActionAssert extends BackboneElement {
}
/**
 * The operation to perform
 */
export interface TestReportSetupActionOperation extends BackboneElement {
}
/**
 * A setup operation or assert that was executed
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestReportSetupAction extends BackboneElement {
}
/**
 * The results of the series of required setup operations before the tests were executed
 */
export interface TestReportSetup extends BackboneElement {
}
/**
 * One or more teardown operations performed
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestReportTeardownAction extends BackboneElement {
}
/**
 * The results of running the series of required clean up steps
 */
export interface TestReportTeardown extends BackboneElement {
}
/**
 * A test operation or assert that was performed
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestReportTestAction extends BackboneElement {
}
/**
 * A test executed from the test script
 */
export interface TestReportTest extends BackboneElement {
}
export interface TestReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'TestReport';
}
/**
 * An abstract server representing a destination or receiver in a message exchange
 * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
 */
export interface TestScriptDestination extends BackboneElement {
}
/**
 * Fixture in the test script - by reference (uri)
 */
export interface TestScriptFixture extends BackboneElement {
}
/**
 * Capabilities  that are assumed to function correctly on the FHIR server being tested
 * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
 */
export interface TestScriptMetadataCapability extends BackboneElement {
}
/**
 * Links to the FHIR specification
 */
export interface TestScriptMetadataLink extends BackboneElement {
}
/**
 * Required capability that is assumed to function correctly on the FHIR server being tested
 */
export interface TestScriptMetadata extends BackboneElement {
}
/**
 * An abstract server representing a client or sender in a message exchange
 * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
 */
export interface TestScriptOrigin extends BackboneElement {
}
/**
 * Rule parameter template
 * The parameter value can be dynamic at runtime.
 */
export interface TestScriptRuleParam extends BackboneElement {
}
/**
 * Assert rule used within the test script
 * Each rule should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.
 */
export interface TestScriptRule extends BackboneElement {
}
/**
 * Ruleset rule parameter template
 * The parameter value can be dynamic at runtime.
 */
export interface TestScriptRulesetRuleParam extends BackboneElement {
}
/**
 * The referenced rule within the ruleset
 * This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.
 */
export interface TestScriptRulesetRule extends BackboneElement {
}
/**
 * Assert ruleset used within the test script
 * Each rule within a ruleset should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.
 */
export interface TestScriptRuleset extends BackboneElement {
}
/**
 * Rule parameter template
 * The parameter value can be dynamic at runtime.
 */
export interface TestScriptSetupActionAssertRuleParam extends BackboneElement {
}
/**
 * The reference to a TestScript.rule
 * Each rule should get evaluated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.
 */
export interface TestScriptSetupActionAssertRule extends BackboneElement {
}
/**
 * Rule parameter template
 * The parameter value can be dynamic at runtime.
 */
export interface TestScriptSetupActionAssertRulesetRuleParam extends BackboneElement {
}
/**
 * The referenced rule within the ruleset
 * This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.
 */
export interface TestScriptSetupActionAssertRulesetRule extends BackboneElement {
}
/**
 * The reference to a TestScript.ruleset
 * Each rule within a ruleset should get evaluated by test engines as a separate assertion.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.  If the first rule within the ruleset results in a failed assertion, then test engines do not have to evaluate the rest of the rules within the ruleset.
 */
export interface TestScriptSetupActionAssertRuleset extends BackboneElement {
}
/**
 * The assertion to perform
 * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
 */
export interface TestScriptSetupActionAssert extends BackboneElement {
}
/**
 * Each operation can have one or more header elements
 * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://hl7.org/fhir/STU3/http.html#2.1.0.5.1 - "If-Match" header.  See http://hl7.org/fhir/STU3/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://hl7.org/fhir/STU3/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
 */
export interface TestScriptSetupActionOperationRequestHeader extends BackboneElement {
}
/**
 * The setup operation to perform
 */
export interface TestScriptSetupActionOperation extends BackboneElement {
}
/**
 * A setup operation or assert to perform
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestScriptSetupAction extends BackboneElement {
}
/**
 * A series of required setup operations before tests are executed
 */
export interface TestScriptSetup extends BackboneElement {
}
/**
 * One or more teardown operations to perform
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestScriptTeardownAction extends BackboneElement {
}
/**
 * A series of required clean up steps
 */
export interface TestScriptTeardown extends BackboneElement {
}
/**
 * A test operation or assert to perform
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestScriptTestAction extends BackboneElement {
}
/**
 * A test in this script
 */
export interface TestScriptTest extends BackboneElement {
}
/**
 * Placeholder for evaluated elements
 * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
 */
export interface TestScriptVariable extends BackboneElement {
}
export interface TestScript extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'TestScript';
}
/**
 * Additional representations for this concept
 */
export interface ValueSetComposeIncludeConceptDesignation extends BackboneElement {
}
/**
 * A concept defined in the system
 * The list of concepts is considered ordered, though the order may not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.
 */
export interface ValueSetComposeIncludeConcept extends BackboneElement {
}
/**
 * Select codes/concepts by their properties (including relationships)
 * Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.
 */
export interface ValueSetComposeIncludeFilter extends BackboneElement {
}
/**
 * Include one or more codes from a code system or other value set(s)
 * All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.
 */
export interface ValueSetComposeInclude extends BackboneElement {
}
/**
 * Definition of the content of the value set (CLD)
 */
export interface ValueSetCompose extends BackboneElement {
}
/**
 * Codes in the value set
 */
export interface ValueSetExpansionContains extends BackboneElement {
}
/**
 * Parameter that controlled the expansion process
 * The server decides which parameters to include here, but at a minimum, the list SHOULD include the date, filter, and profile parameters passed to the $expand operation (if any).
 */
export interface ValueSetExpansionParameter extends BackboneElement {
}
/**
 * Used when the value set is "expanded"
 * Expansion is performed to produce a collection of codes that are ready to use for data entry or validation.
 */
export interface ValueSetExpansion extends BackboneElement {
}
export interface ValueSet extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ValueSet';
}
/**
 * Vision supply authorization
 */
export interface VisionPrescriptionDispense extends BackboneElement {
}
export interface VisionPrescription extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'VisionPrescription';
}
/**
 * Resource binding for generic use.
 */
export type FhirResource = 
  Account
  |ActivityDefinition
  |AdverseEvent
  |AllergyIntolerance
  |Appointment
  |AppointmentResponse
  |AuditEvent
  |Basic
  |Binary
  |BodySite
  |Bundle
  |CapabilityStatement
  |CarePlan
  |CareTeam
  |ChargeItem
  |Claim
  |ClaimResponse
  |ClinicalImpression
  |CodeSystem
  |Communication
  |CommunicationRequest
  |CompartmentDefinition
  |Composition
  |ConceptMap
  |Condition
  |Consent
  |Contract
  |Coverage
  |DataElement
  |DetectedIssue
  |Device
  |DeviceComponent
  |DeviceMetric
  |DeviceRequest
  |DeviceUseStatement
  |DiagnosticReport
  |DocumentManifest
  |DocumentReference
  |EligibilityRequest
  |EligibilityResponse
  |Encounter
  |Endpoint
  |EnrollmentRequest
  |EnrollmentResponse
  |EpisodeOfCare
  |ExpansionProfile
  |ExplanationOfBenefit
  |FamilyMemberHistory
  |Flag
  |Goal
  |GraphDefinition
  |Group
  |GuidanceResponse
  |HealthcareService
  |ImagingManifest
  |ImagingStudy
  |Immunization
  |ImmunizationRecommendation
  |ImplementationGuide
  |Library
  |Linkage
  |List
  |Location
  |Measure
  |MeasureReport
  |Media
  |Medication
  |MedicationAdministration
  |MedicationDispense
  |MedicationRequest
  |MedicationStatement
  |MessageDefinition
  |MessageHeader
  |NamingSystem
  |NutritionOrder
  |Observation
  |OperationDefinition
  |OperationOutcome
  |Organization
  |Parameters
  |Patient
  |PaymentNotice
  |PaymentReconciliation
  |Person
  |PlanDefinition
  |Practitioner
  |PractitionerRole
  |Procedure
  |ProcedureRequest
  |ProcessRequest
  |ProcessResponse
  |Provenance
  |Questionnaire
  |QuestionnaireResponse
  |ReferralRequest
  |RelatedPerson
  |RequestGroup
  |ResearchStudy
  |ResearchSubject
  |RiskAssessment
  |Schedule
  |SearchParameter
  |Sequence
  |ServiceDefinition
  |Slot
  |Specimen
  |StructureDefinition
  |StructureMap
  |Subscription
  |Substance
  |SupplyDelivery
  |SupplyRequest
  |Task
  |TestReport
  |TestScript
  |ValueSet
  |VisionPrescription;
