// <auto-generated/>
// Contents of: hl7.fhir.r3.core#3.0.2, hl7.fhir.r3.expansions#3.0.2
  // Primitive Naming Style: None
  // Complex Type / Resource Naming Style: PascalCase
  // Interaction Naming Style: None
  // Export structures: PrimitiveType|ComplexType|Resource|Extension|Operation|SearchParameter|CodeSystem|ValueSet|Profile|LogicalModel|Compartment
  // Option: "Namespace" = "fhir{VersionNumber}"
  // Option: "MinTsVersion" = "3.7"
  // Option: "InlineEnums" = "True"
  // Option: "ExportKeys" = ""
  // Option: "IncludeExperimental" = "False"
  // Option: "FhirCacheDirectory" = "~/.fhir"
  // Option: "OutputDirectory" = "./generated"
  // Option: "Packages" = ""
  // Option: "OfflineMode" = "False"
// Minimum TypeScript Version: 3.7
/**
 * Note: address is for postal addresses, not physical locations.
 */
export interface Address extends Element {
  /**
   * The name of the city, town, village or other community or delivery center.
   */
  city?: string | undefined;
  _city?: Element | undefined;
  /**
   * Country - a nation as commonly understood or generally accepted.
   * ISO 3166 3 letter codes can be used in place of a full country name.
   */
  country?: string | undefined;
  _country?: Element | undefined;
  /**
   * The name of the administrative area (county).
   * District is sometimes known as county, but in some regions 'county' is used in place of city (municipality), so county name should be conveyed in city instead.
   */
  district?: string | undefined;
  _district?: Element | undefined;
  /**
   * This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
   */
  line?: string[] | undefined;
  _line?: Element[] | undefined;
  /**
   * Time period when address was/is in use.
   */
  period?: Period | undefined;
  /**
   * A postal code designating a region defined by the postal service.
   */
  postalCode?: string | undefined;
  _postalCode?: Element | undefined;
  /**
   * Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes).
   */
  state?: string | undefined;
  _state?: Element | undefined;
  /**
   * A full text representation of the address.
   * Can provide both a text representation and parts.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
   */
  type?: ('postal'|'physical'|'both') | undefined;
  _type?: Element | undefined;
  /**
   * The purpose of this address.
   * This is labeled as "Is Modifier" because applications should not mistake a temporary or old address etc.for a current/permanent one. Applications can assume that an address is current unless it explicitly says that it is temporary or old.
   */
  use?: ('home'|'work'|'temp'|'old') | undefined;
  _use?: Element | undefined;
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Age extends Quantity {
}
/**
 * For systems that do not have structured annotations, they can simply communicate a single annotation with no author or time.  This element may need to be included in narrative because of the potential for modifying information.  *Annotations SHOULD NOT* be used to communicate "modifying" information that could be computable. (This is a SHOULD because enforcing user behavior is nearly impossible).
 */
export interface Annotation extends Element {
  /**
   * The individual responsible for making the annotation.
   */
  authorReference?: Reference | undefined;
  /**
   * The individual responsible for making the annotation.
   */
  authorString?: string | undefined;
  _authorString?: Element | undefined;
  /**
   * The text of the annotation.
   */
  text: string;
  _text?: Element | undefined;
  /**
   * Indicates when this particular annotation was made.
   */
  time?: string | undefined;
  _time?: Element | undefined;
}
/**
 * When providing a summary view (for example with Observation.value[x]) Attachment should be represented with a brief display text such as "Attachment".
 */
export interface Attachment extends Element {
  /**
   * Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
   */
  contentType?: string | undefined;
  _contentType?: Element | undefined;
  /**
   * The date that the attachment was first created.
   */
  creation?: string | undefined;
  _creation?: Element | undefined;
  /**
   * The actual data of the attachment - a sequence of bytes. In XML, represented using base64.
   * The base64-encoded data SHALL be expressed in the same character set as the base resource XML or JSON.
   */
  data?: string | undefined;
  _data?: Element | undefined;
  /**
   * The calculated hash of the data using SHA-1. Represented using base64.
   * The hash is calculated on the data prior to base64 encoding, if the data is based64 encoded.
   */
  hash?: string | undefined;
  _hash?: Element | undefined;
  /**
   * The human language of the content. The value can be any valid value according to BCP 47.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
   * The number of bytes is redundant if the data is provided as a base64binary, but is useful if the data is provided as a url reference.
   */
  size?: number | undefined;
  /**
   * A label or set of text to display in place of the data.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An alternative location where the data can be accessed.
   * If both data and url are provided, the url SHALL point to the same content as the data contains. Urls may be relative references or may reference transient locations such as a wrapping envelope using cid: though this has ramifications for using signatures. Relative URLs are interpreted relative to the service url, like a resource reference, rather than relative to the resource itself. If a URL is provided, it SHALL resolve to actual data.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
export interface BackboneElement extends Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  modifierExtension?: Extension[] | undefined;
}
/**
 * Not all terminology uses fit this general pattern. In some cases, models should not use CodeableConcept and use Coding directly and provide their own structure for managing text, codings, translations and the relationship between elements and pre- and post-coordination.
 */
export interface CodeableConcept extends Element {
  /**
   * A reference to a code defined by a terminology system.
   * Codes may be defined very casually in enumerations, or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.  Ordering of codings is undefined and SHALL NOT be used to infer meaning. Generally, at most only one of the coding values will be labeled as UserSelected = true.
   */
  coding?: Coding[] | undefined;
  /**
   * A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
   * Very often the text is the same as a displayName of one of the codings.
   */
  text?: string | undefined;
  _text?: Element | undefined;
}
/**
 * Codes may be defined very casually in enumerations or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.
 */
export interface Coding extends Element {
  /**
   * A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * A representation of the meaning of the code in the system, following the rules of the system.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * The identification of the code system that defines the meaning of the symbol in the code.
   * The URI may be an OID (urn:oid:...) or a UUID (urn:uuid:...).  OIDs and UUIDs SHALL be references to the HL7 OID registry. Otherwise, the URI should come from HL7's list of FHIR defined special URIs or it should de-reference to some definition that establish the system clearly and unambiguously.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * Indicates that this coding was chosen by a user directly - i.e. off a pick list of available items (codes or displays).
   * Amongst a set of alternatives, a directly chosen code is the most appropriate starting point for new translations. There is some ambiguity about what exactly 'directly chosen' implies, and trading partner agreement may be needed to clarify the use of this element and its consequences more completely.
   */
  userSelected?: boolean | undefined;
  _userSelected?: Element | undefined;
  /**
   * The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured. and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
   * Where the terminology does not clearly define what string should be used to identify code system versions, the recommendation is to use the date (expressed in FHIR date format) on which that version was officially published as the version date.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
export interface ContactDetail extends Element {
  /**
   * The name of an individual to contact.
   * If there is no named individual, the telecom information is for the organization as a whole.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The contact details for the individual (if a name was provided) or the organization.
   */
  telecom?: ContactPoint[] | undefined;
}
export interface ContactPoint extends Element {
  /**
   * Time period when the contact point was/is in use.
   */
  period?: Period | undefined;
  /**
   * Specifies a preferred order in which to use a set of contacts. Contacts are ranked with lower values coming before higher values.
   * Note that rank does not necessarily follow the order in which the contacts are represented in the instance.
   */
  rank?: number | undefined;
  /**
   * Telecommunications form for contact point - what communications system is required to make use of the contact.
   */
  system?: ('phone'|'fax'|'email'|'pager'|'url'|'sms'|'other') | undefined;
  _system?: Element | undefined;
  /**
   * Identifies the purpose for the contact point.
   * This is labeled as "Is Modifier" because applications should not mistake a temporary or old contact etc.for a current/permanent one. Applications can assume that a contact is current unless it explicitly says that it is temporary or old.
   */
  use?: ('home'|'work'|'temp'|'old'|'mobile') | undefined;
  _use?: Element | undefined;
  /**
   * The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
   * Additional text data such as phone extension numbers, or notes about use of the contact are sometimes included in the value.
   */
  value?: string | undefined;
  _value?: Element | undefined;
}
export interface Contributor extends Element {
  /**
   * Contact details to assist a user in finding and communicating with the contributor.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * The name of the individual or organization responsible for the contribution.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The type of contributor.
   */
  type: ('author'|'editor'|'reviewer'|'endorser');
  _type?: Element | undefined;
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Count extends Quantity {
}
/**
 * What codes are expected
 */
export interface DataRequirementCodeFilter extends Element {
  /**
   * The code-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.
   */
  path: string;
  _path?: Element | undefined;
  /**
   * The codes for the code filter. Only one of valueSet, valueCode, valueCoding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes.
   */
  valueCode?: string[] | undefined;
  _valueCode?: Element[] | undefined;
  /**
   * The CodeableConcepts for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified CodeableConcepts.
   */
  valueCodeableConcept?: CodeableConcept[] | undefined;
  /**
   * The Codings for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified Codings.
   */
  valueCoding?: Coding[] | undefined;
  /**
   * The valueset for the code filter. The valueSet and value elements are exclusive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.
   */
  valueSetReference?: Reference | undefined;
  /**
   * The valueset for the code filter. The valueSet and value elements are exclusive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.
   */
  valueSetString?: string | undefined;
  _valueSetString?: Element | undefined;
}
/**
 * What dates/date ranges are expected
 */
export interface DataRequirementDateFilter extends Element {
  /**
   * The date-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type dateTime, Period, Schedule, or Timing.
   */
  path: string;
  _path?: Element | undefined;
  /**
   * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration from now.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration from now.
   */
  valueDuration?: Duration | undefined;
  /**
   * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration from now.
   */
  valuePeriod?: Period | undefined;
}
export interface DataRequirement extends Element {
  /**
   * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data.
   */
  codeFilter?: DataRequirementCodeFilter[] | undefined;
  /**
   * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements.
   */
  dateFilter?: DataRequirementDateFilter[] | undefined;
  /**
   * Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. Note that the value for this element can be a path to allow references to nested elements. In that case, all the elements along the path must be supported.
   */
  mustSupport?: string[] | undefined;
  _mustSupport?: Element[] | undefined;
  /**
   * The profile of the required data, specified as the uri of the profile definition.
   */
  profile?: string[] | undefined;
  _profile?: Element[] | undefined;
  /**
   * The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.
   */
  type: ('Address'|'Age'|'Annotation'|'Attachment'|'BackboneElement'|'CodeableConcept'|'Coding'|'ContactDetail'|'ContactPoint'|'Contributor'|'Count'|'DataRequirement'|'Distance'|'Dosage'|'Duration'|'Element'|'ElementDefinition'|'Extension'|'HumanName'|'Identifier'|'Meta'|'Money'|'Narrative'|'ParameterDefinition'|'Period'|'Quantity'|'Range'|'Ratio'|'Reference'|'RelatedArtifact'|'SampledData'|'Signature'|'SimpleQuantity'|'Timing'|'TriggerDefinition'|'UsageContext'|'base64Binary'|'boolean'|'code'|'date'|'dateTime'|'decimal'|'id'|'instant'|'integer'|'markdown'|'oid'|'positiveInt'|'string'|'time'|'unsignedInt'|'uri'|'uuid'|'xhtml'|'Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription'|'Type'|'Any');
  _type?: Element | undefined;
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Distance extends Quantity {
}
export interface Dosage extends Element {
  /**
   * Supplemental instruction - e.g. "with meals".
   */
  additionalInstruction?: CodeableConcept[] | undefined;
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
   * Can express "as needed" without a reason by setting the Boolean = True.  In this case the CodeableConcept is not populated.  Or you can express "as needed" with a reason by including the CodeableConcept.  In this case the Boolean is assumed to be True.  If you set the Boolean to False, then the dose is given according to the schedule and is not "prn" or "as needed".
   */
  asNeededBoolean?: boolean | undefined;
  _asNeededBoolean?: Element | undefined;
  /**
   * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
   * Can express "as needed" without a reason by setting the Boolean = True.  In this case the CodeableConcept is not populated.  Or you can express "as needed" with a reason by including the CodeableConcept.  In this case the Boolean is assumed to be True.  If you set the Boolean to False, then the dose is given according to the schedule and is not "prn" or "as needed".
   */
  asNeededCodeableConcept?: CodeableConcept | undefined;
  /**
   * Amount of medication per dose.
   * Note that this specifies the quantity of the specified medication, not the quantity for each active ingredient(s). Each ingredient amount can be communicated in the Medication resource. For example, if one wants to communicate that a tablet was 375 mg, where the dose was one tablet, you can use the Medication resource to document that the tablet was comprised of 375 mg of drug XYZ. Alternatively if the dose was 375 mg, then you may only need to use the Medication resource to indicate this was a tablet. If the example were an IV such as dopamine and you wanted to communicate that 400mg of dopamine was mixed in 500 ml of some IV solution, then this would all be communicated in the Medication resource. If the administration is not intended to be instantaneous (rate is present or timing has a duration), this can be specified to convey the total amount to be administered over the period of time as indicated by the schedule e.g. 500 ml in dose, with timing used to convey that this should be done over 4 hours.
   */
  doseQuantity?: Quantity | undefined;
  /**
   * Amount of medication per dose.
   * Note that this specifies the quantity of the specified medication, not the quantity for each active ingredient(s). Each ingredient amount can be communicated in the Medication resource. For example, if one wants to communicate that a tablet was 375 mg, where the dose was one tablet, you can use the Medication resource to document that the tablet was comprised of 375 mg of drug XYZ. Alternatively if the dose was 375 mg, then you may only need to use the Medication resource to indicate this was a tablet. If the example were an IV such as dopamine and you wanted to communicate that 400mg of dopamine was mixed in 500 ml of some IV solution, then this would all be communicated in the Medication resource. If the administration is not intended to be instantaneous (rate is present or timing has a duration), this can be specified to convey the total amount to be administered over the period of time as indicated by the schedule e.g. 500 ml in dose, with timing used to convey that this should be done over 4 hours.
   */
  doseRange?: Range | undefined;
  /**
   * Upper limit on medication per administration.
   * This is intended for use as an adjunct to the dosage when there is an upper cap.  For example, a body surface area related dose with a maximum amount, such as 1.5 mg/m2 (maximum 2 mg) IV over 5 – 10 minutes would have doseQuantity of 1.5 mg/m2 and maxDosePerAdministration of 2 mg.
   */
  maxDosePerAdministration?: Quantity | undefined;
  /**
   * Upper limit on medication per lifetime of the patient.
   */
  maxDosePerLifetime?: Quantity | undefined;
  /**
   * Upper limit on medication per unit of time.
   * This is intended for use as an adjunct to the dosage when there is an upper cap.  For example "2 tablets every 4 hours to a maximum of 8/day".
   */
  maxDosePerPeriod?: Ratio | undefined;
  /**
   * Technique for administering medication.
   * Terminologies used often pre-coordinate this term with the route and or form of administration.
   */
  method?: CodeableConcept | undefined;
  /**
   * Instructions in terms that are understood by the patient or consumer.
   */
  patientInstruction?: string | undefined;
  _patientInstruction?: Element | undefined;
  /**
   * Amount of medication per unit of time.
   * It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.
   */
  rateQuantity?: Quantity | undefined;
  /**
   * Amount of medication per unit of time.
   * It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.
   */
  rateRange?: Range | undefined;
  /**
   * Amount of medication per unit of time.
   * It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.
   */
  rateRatio?: Ratio | undefined;
  /**
   * How drug should enter body.
   */
  route?: CodeableConcept | undefined;
  /**
   * Indicates the order in which the dosage instructions should be applied or interpreted.
   */
  sequence?: number | undefined;
  /**
   * Body site to administer to.
   * If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [body-site-instance](extension-body-site-instance.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
   */
  site?: CodeableConcept | undefined;
  /**
   * Free text dosage instructions e.g. SIG.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * When medication should be administered.
   * This attribute may not always be populated while the Dosage.text is expected to be populated.  If both are populated, then the Dosage.text should reflect the content of the Dosage.timing.
   */
  timing?: Timing | undefined;
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Duration extends Quantity {
}
export interface Element {
  /**
   * May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  extension?: Extension[] | undefined;
  /**
   * unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
   */
  id?: string | undefined;
  _id?: Element | undefined;
}
/**
 * Base definition information for tools
 * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. So they are deformalised into this location for tooling convenience, and to ensure that the base information is available without dependencies.
 */
export interface ElementDefinitionBase extends Element {
  /**
   * Maximum cardinality of the base element identified by the path.
   * This is provided to code generation, since the serialization representation in JSON differs depending on whether the base element has max > 1. Also, some forms of code generation may differ.
   */
  max: string;
  _max?: Element | undefined;
  /**
   * Minimum cardinality of the base element identified by the path.
   * This is provided for consistency with max, and may affect code generation of mandatory elements of the base resource are generated differently (some reference implementations have done this).
   */
  min: number;
  /**
   * The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.
   */
  path: string;
  _path?: Element | undefined;
}
/**
 * ValueSet details if this is coded
 * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
 */
export interface ElementDefinitionBinding extends Element {
  /**
   * Describes the intended use of this particular set of codes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
   * For further discussion, see [Using Terminologies](terminologies.html).
   */
  strength: ('required'|'extensible'|'preferred'|'example');
  _strength?: Element | undefined;
  /**
   * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used. If the binding refers to an explicit value set - the normal case - then use a Reference(ValueSet) preferably containing the canonical URL for the value set. If the reference is to an implicit value set - usually, an IETF RFC that defines a grammar, such as mime types - then use a uri.
   * For value sets with a referenceResource, the display can contain the value set description.  The reference may be version-specific or not.
   */
  valueSetReference?: Reference | undefined;
  /**
   * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used. If the binding refers to an explicit value set - the normal case - then use a Reference(ValueSet) preferably containing the canonical URL for the value set. If the reference is to an implicit value set - usually, an IETF RFC that defines a grammar, such as mime types - then use a uri.
   * For value sets with a referenceResource, the display can contain the value set description.  The reference may be version-specific or not.
   */
  valueSetString?: string | undefined;
  _valueSetString?: Element | undefined;
}
/**
 * Condition that must evaluate to true
 * Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
 */
export interface ElementDefinitionConstraint extends Element {
  /**
   * A [FHIRPath](http://hl7.org/fluentpath) expression of constraint that can be executed to see if this constraint is met.
   */
  expression: string;
  _expression?: Element | undefined;
  /**
   * Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
   * Should be expressed in business terms as much as possible.
   */
  human: string;
  _human?: Element | undefined;
  /**
   * Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
   */
  key: string;
  _key?: Element | undefined;
  /**
   * Description of why this constraint is necessary or appropriate.
   * To be used if the reason for the constraint may not be intuitive to all implementers.
   */
  requirements?: string | undefined;
  _requirements?: Element | undefined;
  /**
   * Identifies the impact constraint violation has on the conformance of the instance.
   * This allows constraints to be asserted as "shall" (error) and "should" (warning).
   */
  severity: ('error'|'warning');
  _severity?: Element | undefined;
  /**
   * A reference to the original source of the constraint, for traceability purposes.
   * This is used when, e.g. rendering, where it is not useful to present inherited constraints when rendering the snapshot.
   */
  source?: string | undefined;
  _source?: Element | undefined;
  /**
   * An XPath expression of constraint that can be executed to see if this constraint is met.
   * Elements SHALL use "f" as the namespace prefix for the FHIR namespace, and "x" for the xhtml namespace, and SHALL NOT use any other prefixes. 
   * Note: we are considering deprecating the xpath element. Implementer feedback is welcome.
   */
  xpath?: string | undefined;
  _xpath?: Element | undefined;
}
/**
 * Example value (as defined for type)
 * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
 */
export interface ElementDefinitionExample extends Element {
  /**
   * Describes the purpose of this example amoung the set of examples.
   */
  label: string;
  _label?: Element | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueAddress?: Address | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueAge?: Age | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueCoding?: Coding | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueCount?: Count | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueNumber?: number | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueDistance?: Distance | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueDuration?: Duration | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueHumanName?: HumanName | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueMeta?: Meta | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueMoney?: Money | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valuePeriod?: Period | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueRange?: Range | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueRatio?: Ratio | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueReference?: Reference | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueSampledData?: SampledData | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueSignature?: Signature | undefined;
  /**
   * The actual value for the element, which must be one of the types allowed for this element.
   */
  valueTiming?: Timing | undefined;
}
/**
 * Map element to another set of definitions
 * Mappings are not necessarily specific enough for safe translation.
 */
export interface ElementDefinitionMapping extends Element {
  /**
   * Comments that provide information about the mapping or its use.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * An internal reference to the definition of a mapping.
   */
  identity: string;
  _identity?: Element | undefined;
  /**
   * Identifies the computable language in which mapping.map is expressed.
   * If omitted, then there can be no expectation of computational interpretation of the mapping.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * Expresses what part of the target specification corresponds to this element.
   * For most mappings, the syntax is undefined.  Syntax will be provided for mappings to the RIM.  Multiple mappings may be possible and may include constraints on other resource elements that identify when a particular mapping applies.
   */
  map: string;
  _map?: Element | undefined;
}
/**
 * Element values that are used to distinguish the slices
 * If there is no discriminator, the content is hard to process, so this should be avoided. If the base element has a cardinality of ..1, and there is a choice of types, the discriminator must be "@type".
 */
export interface ElementDefinitionSlicingDiscriminator extends Element {
  /**
   * A FHIRPath expression, using a restricted subset of FHIRPath, that is used to identify the element on which discrimination is based.
   * The only FHIRPath functions that are allowed are resolve(), and extension(url).
   */
  path: string;
  _path?: Element | undefined;
  /**
   * How the element value is interpreted when discrimination is evaluated.
   */
  type: ('value'|'exists'|'pattern'|'type'|'profile');
  _type?: Element | undefined;
}
/**
 * This element is sliced - slices follow
 * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
 */
export interface ElementDefinitionSlicing extends Element {
  /**
   * A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
   * If it's really not possible to differentiate them, the design should be re-evaluated to make the content usable.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
   * If there is no discriminator, the content is hard to process, so this should be avoided. If the base element has a cardinality of ..1, and there is a choice of types, the discriminator must be "@type".
   */
  discriminator?: ElementDefinitionSlicingDiscriminator[] | undefined;
  /**
   * If the matching elements have to occur in the same order as defined in the profile.
   * Order should only be required when it is a pressing concern for presentation. Profile authors should consider making the order a feature of the rules about the narrative, not the rules about the data - requiring ordered data makes the profile much less re-usable.
   */
  ordered?: boolean | undefined;
  _ordered?: Element | undefined;
  /**
   * Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
   * Allowing additional elements makes for a much for flexible template - it's open for use in wider contexts, but also means that the content of the resource is not closed, and applications have to decide how to handle content not described by the profile.
   */
  rules: ('closed'|'open'|'openAtEnd');
  _rules?: Element | undefined;
}
/**
 * Data type and Profile for this element
 * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
 */
export interface ElementDefinitionType extends Element {
  /**
   * If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
   */
  aggregation?: ('contained'|'referenced'|'bundled')[] | undefined;
  _aggregation?: Element[] | undefined;
  /**
   * URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.
   * If the element is a reference to another resource, this element contains "Reference", and the targetProfile element defines what resources can be referenced. The targetProfile may be a reference to the general definition of a resource (e.g. http://hl7.org/fhir/StructureDefinition/Patient). There would be one pair of type/code for each allowed target resource type.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Identifies a profile structure or implementation Guide that SHALL hold for the datatype this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.
   */
  profile?: string | undefined;
  _profile?: Element | undefined;
  /**
   * Identifies a profile structure or implementation Guide that SHALL hold for the target of the reference this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.
   */
  targetProfile?: string | undefined;
  _targetProfile?: Element | undefined;
  /**
   * Whether this reference needs to be version specific or version independent, or whether either can be used.
   * The base specification never makes a rule as to which form is allowed, but implementation guides may do this.
   */
  versioning?: ('either'|'independent'|'specific') | undefined;
  _versioning?: Element | undefined;
}
export interface ElementDefinition extends Element {
  /**
   * Identifies additional names by which this element might also be known.
   */
  alias?: string[] | undefined;
  _alias?: Element[] | undefined;
  /**
   * Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is provided when the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot.
   * The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. So they are deformalised into this location for tooling convenience, and to ensure that the base information is available without dependencies.
   */
  base?: ElementDefinitionBase | undefined;
  /**
   * Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
   * For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
   */
  binding?: ElementDefinitionBinding | undefined;
  /**
   * A code that has the same meaning as the element in a particular terminology.
   * The concept SHALL be properly aligned with the data element definition and other constraints, as defined in the code system, including relationships, of any code listed here.  Where multiple codes exist in a terminology that could correspond to the data element, the most granular code(s) should be selected, so long as they are not more restrictive than the data element itself. The mappings may be used to provide more or less granular or structured equivalences in the code system.
   */
  code?: Coding[] | undefined;
  /**
   * Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc.
   * If it is possible to capture usage rules using constraints, that mechanism should be used in preference to this element.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
   */
  condition?: string[] | undefined;
  _condition?: Element[] | undefined;
  /**
   * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
   * Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
   */
  constraint?: ElementDefinitionConstraint[] | undefined;
  /**
   * Identifies the identity of an element defined elsewhere in the profile whose content rules should be applied to the current element.
   */
  contentReference?: string | undefined;
  _contentReference?: Element | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueAddress?: Address | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueAge?: Age | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueAnnotation?: Annotation | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueAttachment?: Attachment | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueString?: string | undefined;
  _defaultValueString?: Element | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueBoolean?: boolean | undefined;
  _defaultValueBoolean?: Element | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueCoding?: Coding | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueContactPoint?: ContactPoint | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueCount?: Count | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueNumber?: number | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueDistance?: Distance | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueDuration?: Duration | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueHumanName?: HumanName | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueIdentifier?: Identifier | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueMeta?: Meta | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueMoney?: Money | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValuePeriod?: Period | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueQuantity?: Quantity | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueRange?: Range | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueRatio?: Ratio | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueReference?: Reference | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueSampledData?: SampledData | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueSignature?: Signature | undefined;
  /**
   * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
   * Default values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed. For these reasons, default values are (and should be) used extremely sparingly.
   */
  defaultValueTiming?: Timing | undefined;
  /**
   * Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource.
   * It is easy for a different definition to change the meaning of an element and this can have nasty downstream consequences. Please be careful when providing definitions.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * A sample value for this element demonstrating the type of information that would typically be found in the element.
   * Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
   */
  example?: ElementDefinitionExample[] | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedAddress?: Address | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedAge?: Age | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedAnnotation?: Annotation | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedAttachment?: Attachment | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedString?: string | undefined;
  _fixedString?: Element | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedBoolean?: boolean | undefined;
  _fixedBoolean?: Element | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedCoding?: Coding | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedContactPoint?: ContactPoint | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedCount?: Count | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedNumber?: number | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedDistance?: Distance | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedDuration?: Duration | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedHumanName?: HumanName | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedIdentifier?: Identifier | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedMeta?: Meta | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedMoney?: Money | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedPeriod?: Period | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedQuantity?: Quantity | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedRange?: Range | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedRatio?: Ratio | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedReference?: Reference | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedSampledData?: SampledData | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedSignature?: Signature | undefined;
  /**
   * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
   * This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
   */
  fixedTiming?: Timing | undefined;
  /**
   * If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
   * Only the definition of an element can set IsModifier true - either the specification itself or where an extension is originally defined. Once set, it cannot be changed in derived profiles. An element/extension that has isModifier=true SHOULD also have a minimum cardinality of 1, so that there is no lack of clarity about what to do if it is missing. If it can be missing, the definition SHALL make the meaning of a missing element clear.
   */
  isModifier?: boolean | undefined;
  _isModifier?: Element | undefined;
  /**
   * Whether the element should be included if a client requests a search with the parameter _summary=true.
   * Some resources include a set of simple metadata, and some very large data. This element is used to reduce the quantity of data returned in searches. Note that servers may pre-cache summarized resources for optimal performance, so servers may not support per-profile use of the isSummary flag. When a request is made with _summary=true, serailisers only include elements marked as 'isSummary = true'. Other than Attachment.data, all data type properties are included in the summary form. Modifier elements or elements with minimum cardinality = 1 must be marked as summary elements.
   */
  isSummary?: boolean | undefined;
  _isSummary?: Element | undefined;
  /**
   * A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
   * See also the extension (http://hl7.org/fhir/StructureDefinition/elementdefinition-question)[extension-elementdefinition-question.html].
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * Identifies a concept from an external specification that roughly corresponds to this element.
   * Mappings are not necessarily specific enough for safe translation.
   */
  mapping?: ElementDefinitionMapping[] | undefined;
  /**
   * The maximum number of times this element is permitted to appear in the instance.
   */
  max?: string | undefined;
  _max?: Element | undefined;
  /**
   * Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
   * Receivers are not required to reject instances that exceed the maximum length.  The full length could be stored.  In some cases, data might be truncated, though truncation should be undertaken with care and an understanding of the consequences of doing so. If not specified, there is no conformance expectation for length support.
   */
  maxLength?: number | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
   */
  maxValueString?: string | undefined;
  _maxValueString?: Element | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
   */
  maxValueNumber?: number | undefined;
  /**
   * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
   */
  maxValueQuantity?: Quantity | undefined;
  /**
   * The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'.
   * Implicit meanings for missing values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. An implicit meaning for a missing value can never be changed, and specifying one has the consequence that constraining its use in profiles eliminates use cases as possibilities, not merely moving them out of scope.
   */
  meaningWhenMissing?: string | undefined;
  _meaningWhenMissing?: Element | undefined;
  /**
   * The minimum number of times this element SHALL appear in the instance.
   */
  min?: number | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
   */
  minValueString?: string | undefined;
  _minValueString?: Element | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
   */
  minValueNumber?: number | undefined;
  /**
   * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
   * Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a a [Duration](datatypes.html#duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
   */
  minValueQuantity?: Quantity | undefined;
  /**
   * If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported.
   * "Something useful" is context dependent and impossible to describe in the base FHIR specification. For this reason, tue mustSupport flag is never set to true by the FHIR specification itself - it is only set to true in profiles. 
   * This is done in [Resource Profiles](profiling.html#mustsupport), where the profile labels an element as mustSupport=true. When a profile does this, it SHALL also make clear exactly what kind of "support" is required, as this can mean many things.
   * Note that an element that has the property IsModifier is not necessarily a "key" element (e.g. one of the important elements to make use of the resource), nor is it automatically mustSupport - however both of these things are more likely to be true for IsModifier elements than for other elements.
   */
  mustSupport?: boolean | undefined;
  _mustSupport?: Element | undefined;
  /**
   * If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
   * This element can only be asserted on repeating elements and can only be introduced when defining resources or data types.  It can be further refined profiled elements but if absent in the base type, a profile cannot assert meaning.
   */
  orderMeaning?: string | undefined;
  _orderMeaning?: Element | undefined;
  /**
   * The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
   */
  path: string;
  _path?: Element | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternAddress?: Address | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternAge?: Age | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternAnnotation?: Annotation | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternAttachment?: Attachment | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternString?: string | undefined;
  _patternString?: Element | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternBoolean?: boolean | undefined;
  _patternBoolean?: Element | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternCoding?: Coding | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternContactPoint?: ContactPoint | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternCount?: Count | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternNumber?: number | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternDistance?: Distance | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternDuration?: Duration | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternHumanName?: HumanName | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternIdentifier?: Identifier | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternMeta?: Meta | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternMoney?: Money | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternPeriod?: Period | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternQuantity?: Quantity | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternRange?: Range | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternRatio?: Ratio | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternReference?: Reference | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternSampledData?: SampledData | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternSignature?: Signature | undefined;
  /**
   * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
   * Mostly used for fixing values of CodeableConcept. At present, pattern[x] is not recommended as a basis for slicing while issues related to this are investigated during the STU period.
   */
  patternTiming?: Timing | undefined;
  /**
   * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
   * In resources, this is rarely used except for special cases where the representation deviates from the normal, and can only be done in the base standard (and profiles must reproduce what the base standard does). This element is used quite commonly in Logical models when the logical models represent a specific serialization format (e.g. CDA, v2 etc).
   */
  representation?: ('xmlAttr'|'xmlText'|'typeAttr'|'cdaText'|'xhtml')[] | undefined;
  _representation?: Element[] | undefined;
  /**
   * This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
   * This element does not describe the usage of the element (that's done in comments), rather it's for traceability of *why* the element is either needed or why the constraints exist as they do.  This may be used to point to source materials or specifications that drove the structure of this data element.
   */
  requirements?: string | undefined;
  _requirements?: Element | undefined;
  /**
   * A concise description of what this element means (e.g. for use in autogenerated summaries).
   * May change the term to provide language more appropriate to the context of the profile or to reflect slicing.
   */
  short?: string | undefined;
  _short?: Element | undefined;
  /**
   * The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
   * The name SHALL be unique within the structure within the context of the constrained resource element.  (Though to avoid confusion, uniqueness across all elements is recommended.).
   */
  sliceName?: string | undefined;
  _sliceName?: Element | undefined;
  /**
   * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
   * The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
   */
  slicing?: ElementDefinitionSlicing | undefined;
  /**
   * The data type or resource that the value of this element is permitted to be.
   * The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
   */
  type?: ElementDefinitionType[] | undefined;
}
export interface Extension extends Element {
  /**
   * Source of the definition for the extension code - a logical name or a URL.
   * The definition may point directly to a computable or human-readable definition of the extensibility codes, or it may be a logical URI as declared in some other specification. The definition SHALL be a URI for the Structure Definition defining the extension.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueAddress?: Address | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueAge?: Age | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueAttachment?: Attachment | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueCoding?: Coding | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueCount?: Count | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueNumber?: number | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueDistance?: Distance | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueDuration?: Duration | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueHumanName?: HumanName | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueMeta?: Meta | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueMoney?: Money | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valuePeriod?: Period | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueRange?: Range | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueRatio?: Ratio | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueReference?: Reference | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueSampledData?: SampledData | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueSignature?: Signature | undefined;
  /**
   * Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).
   */
  valueTiming?: Timing | undefined;
}
/**
 * Names may be changed, or repudiated, or people may have different names in different contexts. Names may be divided into parts of different type that have variable significance depending on context, though the division into parts does not always matter. With personal names, the different parts may or may not be imbued with some implicit meaning; various cultures associate different importance with the name parts and the degree to which systems must care about name parts around the world varies widely.
 */
export interface HumanName extends Element {
  /**
   * The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
   * Family Name may be decomposed into specific parts using extensions (de, nl, es related cultures).
   */
  family?: string | undefined;
  _family?: Element | undefined;
  /**
   * Given name.
   * If only initials are recorded, they may be used in place of the full name.  Not called "first name" since given names do not always come first.
   */
  given?: string[] | undefined;
  _given?: Element[] | undefined;
  /**
   * Indicates the period of time when this name was valid for the named person.
   */
  period?: Period | undefined;
  /**
   * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
   */
  prefix?: string[] | undefined;
  _prefix?: Element[] | undefined;
  /**
   * Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
   */
  suffix?: string[] | undefined;
  _suffix?: Element[] | undefined;
  /**
   * A full text representation of the name.
   * Can provide both a text representation and structured parts.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * Identifies the purpose for this name.
   * This is labeled as "Is Modifier" because applications should not mistake a temporary or old name etc.for a current/permanent one. Applications can assume that a name is current unless it explicitly says that it is temporary or old.
   */
  use?: ('usual'|'official'|'temp'|'nickname'|'anonymous'|'old'|'maiden') | undefined;
  _use?: Element | undefined;
}
export interface Identifier extends Element {
  /**
   * Organization that issued/manages the identifier.
   * The Identifier.assigner may omit the .reference element and only contain a .display element reflecting the name or other textual information about the assigning organization.
   */
  assigner?: Reference | undefined;
  /**
   * Time period during which identifier is/was valid for use.
   */
  period?: Period | undefined;
  /**
   * Establishes the namespace for the value - that is, a URL that describes a set values that are unique.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
   * This element deals only with general categories of identifiers.  It SHOULD not be used for codes that correspond 1..1 with the Identifier.system. Some identifiers may fall into multiple categories due to common usage. 
   * Where the system is known, a type is unnecessary because the type is always part of the system definition. However systems often need to handle identifiers where the system is not known. There is not a 1:1 relationship between type and system, since many different systems have the same type.
   */
  type?: CodeableConcept | undefined;
  /**
   * The purpose of this identifier.
   * This is labeled as "Is Modifier" because applications should not mistake a temporary id for a permanent one. Applications can assume that an identifier is permanent unless it explicitly says that it is temporary.
   */
  use?: ('usual'|'official'|'temp'|'secondary') | undefined;
  _use?: Element | undefined;
  /**
   * The portion of the identifier typically relevant to the user and which is unique within the context of the system.
   * If the value is a full URI, then the system SHALL be urn:ietf:rfc:3986.  The value's primary purpose is computational mapping.  As a result, it may be normalized for comparison purposes (e.g. removing non-significant whitespace, dashes, etc.)  A value formatted for human display can be conveyed using the [Rendered Value extension](extension-rendered-value.html).
   */
  value?: string | undefined;
  _value?: Element | undefined;
}
export interface Meta extends Element {
  /**
   * When the resource last changed - e.g. when the version changed.
   * This value is always populated except when the resource is first being created. The server / resource manager sets this value; what a client provides is irrelevant.
   */
  lastUpdated?: string | undefined;
  _lastUpdated?: Element | undefined;
  /**
   * A list of profiles (references to [StructureDefinition](structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url]().
   * It is up to the server and/or other infrastructure of policy to determine whether/how these claims are verified and/or updated over time.  The list of profile URLs is a set.
   */
  profile?: string[] | undefined;
  _profile?: Element[] | undefined;
  /**
   * Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
   * The security labels can be updated without changing the stated version of the resource  The list of security labels is a set. Uniqueness is based the system/code, and version and display are ignored.
   */
  security?: Coding[] | undefined;
  /**
   * Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.
   * The tags can be updated without changing the stated version of the resource.  The list of tags is a set. Uniqueness is based the system/code, and version and display are ignored.
   */
  tag?: Coding[] | undefined;
  /**
   * The version specific identifier, as it appears in the version portion of the URL. This values changes when the resource is created, updated, or deleted.
   * The server assigns this value, and ignores what the client specifies, except in the case that the server is imposing version integrity on updates/deletes.
   */
  versionId?: string | undefined;
  _versionId?: Element | undefined;
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Money extends Quantity {
}
export interface Narrative extends Element {
  /**
   * The actual narrative content, a stripped down version of XHTML.
   * The contents of the html element are an XHTML fragment containing only the basic html formatting elements described in chapters 7-11 and 15 of the HTML 4.0 standard, <a> elements (either name or href), images and internally contained stylesheets. The XHTML content may not contain a head, a body, external stylesheet references, scripts, forms, base/link/xlink, frames, iframes and objects.
   */
  div: string;
  _div?: Element | undefined;
  /**
   * The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
   */
  status: ('generated'|'extensions'|'additional'|'empty');
  _status?: Element | undefined;
}
export interface ParameterDefinition extends Element {
  /**
   * A brief discussion of what the parameter is for and how it is used by the module.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * The maximum number of times this element is permitted to appear in the request or response.
   */
  max?: string | undefined;
  _max?: Element | undefined;
  /**
   * The minimum number of times this parameter SHALL appear in the request or response.
   */
  min?: number | undefined;
  /**
   * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
   */
  profile?: Reference | undefined;
  /**
   * The type of the parameter.
   */
  type: ('Address'|'Age'|'Annotation'|'Attachment'|'BackboneElement'|'CodeableConcept'|'Coding'|'ContactDetail'|'ContactPoint'|'Contributor'|'Count'|'DataRequirement'|'Distance'|'Dosage'|'Duration'|'Element'|'ElementDefinition'|'Extension'|'HumanName'|'Identifier'|'Meta'|'Money'|'Narrative'|'ParameterDefinition'|'Period'|'Quantity'|'Range'|'Ratio'|'Reference'|'RelatedArtifact'|'SampledData'|'Signature'|'SimpleQuantity'|'Timing'|'TriggerDefinition'|'UsageContext'|'base64Binary'|'boolean'|'code'|'date'|'dateTime'|'decimal'|'id'|'instant'|'integer'|'markdown'|'oid'|'positiveInt'|'string'|'time'|'unsignedInt'|'uri'|'uuid'|'xhtml'|'Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription'|'Type'|'Any');
  _type?: Element | undefined;
  /**
   * Whether the parameter is input or output for the module.
   */
  use: ('in'|'out');
  _use?: Element | undefined;
}
/**
 * This is not a duration - that's a measure of time (a separate type), but a duration that occurs at a fixed value of time. A Period specifies a range of time; the context of use will specify whether the entire range applies (e.g. "the patient was an inpatient of the hospital for this time range") or one value from the range applies (e.g. "give to the patient between these two times"). If duration is required, specify the type as Interval|Duration.
 */
export interface Period extends Element {
  /**
   * The end of the period. If the end of the period is missing, it means that the period is ongoing. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
   * The high value includes any matching date/time. i.e. 2012-02-03T10:00:00 is in a period that has a end value of 2012-02-03.
   */
  end?: string | undefined;
  _end?: Element | undefined;
  /**
   * The start of the period. The boundary is inclusive.
   * If the low element is missing, the meaning is that the low boundary is not known.
   */
  start?: string | undefined;
  _start?: Element | undefined;
}
/**
 * The context of use may frequently define what kind of quantity this is and therefore what kind of units can be used. The context of use may also restrict the values for the comparator.
 */
export interface Quantity extends Element {
  /**
   * A computer processable form of the unit in some unit representation system.
   * The preferred system is UCUM, but SNOMED CT can also be used (for customary units) or ISO 4217 for currency.  The context of use may additionally require a code from a particular system.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
   * This is labeled as "Is Modifier" because the comparator modifies the interpretation of the value significantly. If there is no comparator, then there is no modification of the value.
   */
  comparator?: ('<'|'<='|'>='|'>') | undefined;
  _comparator?: Element | undefined;
  /**
   * The identification of the system that provides the coded form of the unit.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * A human-readable form of the unit.
   */
  unit?: string | undefined;
  _unit?: Element | undefined;
  /**
   * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
   * The implicit precision in the value should always be honored. Monetary values have their own rules for handling precision (refer to standard accounting text books).
   */
  value?: number | undefined;
}
/**
 * The stated low and high value are assumed to have arbitrarily high precision when it comes to determining which values are in the range. I.e. 1.99 is not in the range 2 -> 3.
 */
export interface Range extends Element {
  /**
   * The high limit. The boundary is inclusive.
   * If the high element is missing, the high boundary is not known.
   */
  high?: Quantity | undefined;
  /**
   * The low limit. The boundary is inclusive.
   * If the low element is missing, the low boundary is not known.
   */
  low?: Quantity | undefined;
}
export interface Ratio extends Element {
  /**
   * The value of the denominator.
   */
  denominator?: Quantity | undefined;
  /**
   * The value of the numerator.
   */
  numerator?: Quantity | undefined;
}
/**
 * References SHALL be a reference to an actual FHIR resource, and SHALL be resolveable (allowing for access control, temporary unavailability, etc). Resolution can be either by retrieval from the URL, or, where applicable by resource type, by treating an absolute reference as a canonical URL and looking it up in a local registry/repository.
 */
export interface Reference extends Element {
  /**
   * Plain text narrative that identifies the resource in addition to the resource reference.
   * This is generally not the same as the Resource.text of the referenced resource.  The purpose is to identify what's being referenced, not to fully describe it.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * An identifier for the other resource. This is used when there is no way to reference the other resource directly, either because the entity is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
   * When an identifier is provided in place of a reference, any system processing the reference will only be able to resolve the identifier to a reference if it understands the business context in which the identifier is used. Sometimes this is global (e.g. a national identifier) but often it is not. For this reason, none of the useful mechanisms described for working with references (e.g. chaining, includes) are possible, nor should servers be expected to be able resolve the reference. Servers may accept an identifier based reference untouched, resolve it, and/or reject it - see CapabilityStatement.rest.resource.referencePolicy. 
   * When both an identifier and a literal reference are provided, the literal reference is preferred. Applications processing the resource are allowed - but not required - to check that the identifier matches the literal reference
   * Applications converting a logical reference to a literal reference may choose to leave the logical reference present, or remove it.
   */
  identifier?: Identifier | undefined;
  /**
   * A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
   * Using absolute URLs provides a stable scalable approach suitable for a cloud/web context, while using relative/logical references provides a flexible approach suitable for use when trading across closed eco-system boundaries.   Absolute URLs do not need to point to a FHIR RESTful server, though this is the preferred approach. If the URL conforms to the structure "/[type]/[id]" then it should be assumed that the reference is to a FHIR RESTful server.
   */
  reference?: string | undefined;
  _reference?: Element | undefined;
}
/**
 * Each related artifact is either an attachment, or a reference to another knowledge resource, but not both.
 */
export interface RelatedArtifact extends Element {
  /**
   * A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.
   * Additional structured information about citations should be captured as extensions.
   */
  citation?: string | undefined;
  _citation?: Element | undefined;
  /**
   * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * The document being referenced, represented as an attachment. This is exclusive with the resource element.
   */
  document?: Attachment | undefined;
  /**
   * The related resource, such as a library, value set, profile, or other knowledge resource.
   * If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource.
   */
  resource?: Reference | undefined;
  /**
   * The type of relationship to the related artifact.
   */
  type: ('documentation'|'justification'|'citation'|'predecessor'|'successor'|'derived-from'|'depends-on'|'composed-of');
  _type?: Element | undefined;
  /**
   * A url for the artifact that can be followed to access the actual content.
   * If a document or resource element is present, this element SHALL NOT be provided (use the url or reference in the Attachment or resource reference).
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * The data is not interpretable without at least origin, period, and dimensions, but these are optional to allow a separation between the template of measurement and the actual measurement, such as between DeviceCapabilities and DeviceLog.  When providing a summary view (for example with Observation.value[x]) SampledData should be represented with a brief display text such as "Sampled Data".
 */
export interface SampledData extends Element {
  /**
   * A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
   */
  data: string;
  _data?: Element | undefined;
  /**
   * The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
   * If there is more than one dimension, the code for the type of data will define the meaning of the dimensions (typically ECG data).
   */
  dimensions: number;
  /**
   * A correction factor that is applied to the sampled data points before they are added to the origin.
   */
  factor?: number | undefined;
  /**
   * The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
   */
  lowerLimit?: number | undefined;
  /**
   * The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
   */
  origin: Quantity;
  /**
   * The length of time between sampling times, measured in milliseconds.
   * This is usually a whole number.
   */
  period: number;
  /**
   * The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
   */
  upperLimit?: number | undefined;
}
/**
 * The elements of the Signature Resource are for ease of access of these elements. Foro digital signatures (Xml DigSig, JWT), the non-repudiation proof comes from the Signature  validation, which includes validation of the referenced objects (e.g. Resources) (a.k.a., Content) in the XML-Signature Detached form.
 */
export interface Signature extends Element {
  /**
   * The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.
   * Where the signature type is an XML DigSig, the signed content is a FHIR Resource(s), the signature is of the XML form of the Resource(s) using  XML-Signature (XMLDIG) "Detached Signature" form.
   */
  blob?: string | undefined;
  _blob?: Element | undefined;
  /**
   * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jwt for JWT, and image/* for a graphical image of a signature, etc.
   */
  contentType?: string | undefined;
  _contentType?: Element | undefined;
  /**
   * A reference to an application-usable description of the identity that is represented by the signature.
   * The party that can't sign. For example a child.
   */
  onBehalfOfReference?: Reference | undefined;
  /**
   * A reference to an application-usable description of the identity that is represented by the signature.
   * The party that can't sign. For example a child.
   */
  onBehalfOfString?: string | undefined;
  _onBehalfOfString?: Element | undefined;
  /**
   * An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
   * Examples include attesting to: authorship, correct transcription, and witness of specific event. Also known as a &quot;Commitment Type Indication&quot;.
   */
  type: Coding[];
  /**
   * When the digital signature was signed.
   * This should agree with the information in the signature.
   */
  when: string;
  _when?: Element | undefined;
  /**
   * A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).
   * This should agree with the information in the signature.
   */
  whoReference?: Reference | undefined;
  /**
   * A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).
   * This should agree with the information in the signature.
   */
  whoString?: string | undefined;
  _whoString?: Element | undefined;
}
/**
 * When the event is to occur
 */
export interface TimingRepeat extends Element {
  /**
   * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
   */
  boundsDuration?: Duration | undefined;
  /**
   * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
   */
  boundsPeriod?: Period | undefined;
  /**
   * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
   */
  boundsRange?: Range | undefined;
  /**
   * A total count of the desired number of repetitions.
   * If you have both bounds and count, then this should be understood as within the bounds period, until count times happens.
   */
  count?: number | undefined;
  /**
   * A maximum value for the count of the desired repetitions (e.g. do something 6-8 times).
   */
  countMax?: number | undefined;
  /**
   * If one or more days of week is provided, then the action happens only on the specified day(s).
   * If no days are specified, the action is assumed to happen every day as otherwise specified. The elements frequency and period cannot be used as well as dayOfWeek.
   */
  dayOfWeek?: ('mon'|'tue'|'wed'|'thu'|'fri'|'sat'|'sun')[] | undefined;
  _dayOfWeek?: Element[] | undefined;
  /**
   * How long this thing happens for when it happens.
   * For some events the duration is part of the definition of the event (e.g. IV infusions, where the duration is implicit in the specified quantity and rate). For others, it's part of the timing specification (e.g. exercise).
   */
  duration?: number | undefined;
  /**
   * The upper limit of how long this thing happens for when it happens.
   * For some events the duration is part of the definition of the event (e.g. IV infusions, where the duration is implicit in the specified quantity and rate). For others, it's part of the timing specification (e.g. exercise).
   */
  durationMax?: number | undefined;
  /**
   * The units of time for the duration, in UCUM units.
   */
  durationUnit?: string | undefined;
  _durationUnit?: Element | undefined;
  /**
   * The number of times to repeat the action within the specified period / period range (i.e. both period and periodMax provided).
   */
  frequency?: number | undefined;
  /**
   * If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
   */
  frequencyMax?: number | undefined;
  /**
   * The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
   */
  offset?: number | undefined;
  /**
   * Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period.
   */
  period?: number | undefined;
  /**
   * If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
   */
  periodMax?: number | undefined;
  /**
   * The units of time for the period in UCUM units.
   */
  periodUnit?: string | undefined;
  _periodUnit?: Element | undefined;
  /**
   * Specified time of day for action to take place.
   * When time of day is specified, it is inferred that the action happens every day (as filtered by dayofWeek) on the specified times. The elements when, frequency and period cannot be used as well as timeOfDay.
   */
  timeOfDay?: string[] | undefined;
  _timeOfDay?: Element[] | undefined;
  /**
   * Real world events that the occurrence of the event should be tied to.
   * When more than one event is listed, the event is tied to the union of the specified events.
   */
  when?: ('MORN'|'AFT'|'EVE'|'NIGHT'|'PHS'|'HS'|'WAKE'|'C'|'CM'|'CD'|'CV'|'AC'|'ACM'|'ACD'|'ACV'|'PC'|'PCM'|'PCD'|'PCV')[] | undefined;
  _when?: Element[] | undefined;
}
/**
 * A timing schedule can be either a list of events - intervals on which the event occurs, or a single event with repeating criteria or just repeating criteria with no actual event.  When both event and a repeating specification are provided, the list of events should be understood as an interpretation of the information in the repeat structure.
 */
export interface Timing extends Element {
  /**
   * A code for the timing schedule. Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
   * BID etc are defined as 'at institutionally specified times'. For example, an institution may choose that BID is "always at 7am and 6pm".  If it is inappropriate for this choice to be made, the code BID should not be used. Instead, a distinct organization-specific code should be used in place of the HL7-defined BID code and/or the a structured representation should be used (in this case, specifying the two event times).
   */
  code?: CodeableConcept | undefined;
  /**
   * Identifies specific times when the event occurs.
   */
  event?: string[] | undefined;
  _event?: Element[] | undefined;
  /**
   * A set of rules that describe when the event is scheduled.
   */
  repeat?: TimingRepeat | undefined;
}
export interface TriggerDefinition extends Element {
  /**
   * The triggering data of the event (if this is a data trigger).
   */
  eventData?: DataRequirement | undefined;
  /**
   * The name of the event (if this is a named-event trigger).
   */
  eventName?: string | undefined;
  _eventName?: Element | undefined;
  /**
   * The timing of the event (if this is a period trigger).
   */
  eventTimingString?: string | undefined;
  _eventTimingString?: Element | undefined;
  /**
   * The timing of the event (if this is a period trigger).
   */
  eventTimingReference?: Reference | undefined;
  /**
   * The timing of the event (if this is a period trigger).
   */
  eventTimingTiming?: Timing | undefined;
  /**
   * The type of triggering event.
   */
  type: ('named-event'|'periodic'|'data-added'|'data-modified'|'data-removed'|'data-accessed'|'data-access-ended');
  _type?: Element | undefined;
}
export interface UsageContext extends Element {
  /**
   * A code that identifies the type of context being specified by this usage context.
   */
  code: Coding;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
   */
  valueRange?: Range | undefined;
}
/**
 * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account
 * Typically this may be some form of insurance, internal charges, or self-pay.
 * Local or jurisdicational business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
 * Where the order is important, a local/jurisdicational extension may be defined to specify the order for the type of charge.
 */
export interface AccountCoverage extends BackboneElement {
  /**
   * The party(s) that are responsible for payment (or part of) of charges applied to this account (including self-pay).
   * A coverage may only be resposible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.
   */
  coverage: Reference;
  /**
   * The priority of the coverage in the context of this account.
   * It is common in some jurisdictions for there to be multiple coverages allocated to an account, and a sequence is required to order the settling of the account (often with insurance claiming).
   */
  priority?: number | undefined;
}
/**
 * Responsible for the account
 */
export interface AccountGuarantor extends BackboneElement {
  /**
   * A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.
   */
  onHold?: boolean | undefined;
  _onHold?: Element | undefined;
  /**
   * The entity who is responsible.
   */
  party: Reference;
  /**
   * The timeframe during which the guarantor accepts responsibility for the account.
   */
  period?: Period | undefined;
}
export interface Account extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Account';
  /**
   * Indicates the period of time over which the account is allowed to have transactions posted to it.
   * This period may be different to the coveragePeriod which is the duration of time that services may occur.
   */
  active?: Period | undefined;
  /**
   * Represents the sum of all credits less all debits associated with the account.  Might be positive, zero or negative.
   */
  balance?: Money | undefined;
  /**
   * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
   * Typically this may be some form of insurance, internal charges, or self-pay.
   * Local or jurisdicational business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
   * Where the order is important, a local/jurisdicational extension may be defined to specify the order for the type of charge.
   */
  coverage?: AccountCoverage[] | undefined;
  /**
   * Provides additional information about what the account tracks and how it is used.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Parties financially responsible for the account.
   */
  guarantor?: AccountGuarantor[] | undefined;
  /**
   * Unique identifier used to reference the account.  May or may not be intended for human use (e.g. credit card number).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Name used for the account when displaying it to humans in reports, etc.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Indicates the organization, department, etc. with responsibility for the account.
   */
  owner?: Reference | undefined;
  /**
   * Identifies the period of time the account applies to; e.g. accounts created per fiscal year, quarter, etc.
   * It is possible for transactions relevant to a coverage period to be posted to the account before or after the coverage period, however the services that are being charged for must be within this period.
   */
  period?: Period | undefined;
  /**
   * Indicates whether the account is presently used/usable or not.
   * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the Account as not currently valid.
   */
  status?: ('active'|'inactive'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * Identifies the patient, device, practitioner, location or other object the account is associated with.
   * Accounts can be applied to non patients for tracking other non patient related activities, such as group services (patients not tracked, and costs charged to another body), or may not be allocated.
   */
  subject?: Reference | undefined;
  /**
   * Categorizes the account for reporting and searching purposes.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Dynamic aspects of the definition
 */
export interface ActivityDefinitionDynamicValue extends BackboneElement {
  /**
   * A brief, natural language description of the intended semantics of the dynamic value.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An expression specifying the value of the customized element.
   * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * The media type of the language for the expression.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression.
   */
  path?: string | undefined;
  _path?: Element | undefined;
}
/**
 * Who should participate in the action
 */
export interface ActivityDefinitionParticipant extends BackboneElement {
  /**
   * The role the participant should play in performing the described action.
   */
  role?: CodeableConcept | undefined;
  /**
   * The type of participant in the action.
   */
  type: ('patient'|'practitioner'|'related-person');
  _type?: Element | undefined;
}
export interface ActivityDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ActivityDefinition';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites).
   * Only used if not implicit in the code found in ProcedureRequest.type.
   */
  bodySite?: CodeableConcept[] | undefined;
  /**
   * Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter.
   * Tends to be less relevant for activities involving particular products.
   */
  code?: CodeableConcept | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A contributor to the content of the asset, including authors, editors, reviewers, and endorsers.
   */
  contributor?: Contributor[] | undefined;
  /**
   * A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the activity definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the activity definition changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the activity definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the activity definition from a consumer's perspective.
   * This description can be used to capture details such as why the activity definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the activity definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Provides detailed dosage instructions in the same way that they are described for MedicationRequest resources.
   * If a dosage instruction is used, the definition should not specify timing or quantity.
   */
  dosage?: Dosage[] | undefined;
  /**
   * Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the intent resource that would contain the result.
   */
  dynamicValue?: ActivityDefinitionDynamicValue[] | undefined;
  /**
   * The period during which the activity definition content was or is planned to be in active use.
   * The effective period for a activity definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  effectivePeriod?: Period | undefined;
  /**
   * A boolean value to indicate that this activity definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of activity definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental activity definition in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this activity definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this activity definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the activity definition is intended to be used.
   * It may be possible for the activity definition to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A description of the kind of resource the activity definition is representing. For example, a MedicationRequest, a ProcedureRequest, or a CommunicationRequest. Typically, but not always, this is a Request resource.
   * May determine what types of extensions are permitted.
   */
  kind?: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription') | undefined;
  _kind?: Element | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date.
   * If specified, this is usually after the approval date.
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A reference to a Library resource containing any formal logic used by the asset.
   */
  library?: Reference[] | undefined;
  /**
   * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
   * May reference a specific clinical location or may just identify a type of location.
   */
  location?: Reference | undefined;
  /**
   * A natural language name identifying the activity definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Indicates who should participate in performing the action described.
   */
  participant?: ActivityDefinitionParticipant[] | undefined;
  /**
   * Identifies the food, drug or other product being consumed or supplied in the activity.
   */
  productCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the food, drug or other product being consumed or supplied in the activity.
   */
  productReference?: Reference | undefined;
  /**
   * The name of the individual or organization that published the activity definition.
   * Usually an organization, but may be an individual. The publisher (or steward) of the activity definition is the organization or individual primarily responsible for the maintenance and upkeep of the activity definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the activity definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this activity definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the activity definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this activity definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
   */
  quantity?: Quantity | undefined;
  /**
   * Related artifacts such as additional documentation, justification, or bibliographic references.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * The status of this activity definition. Enables tracking the life-cycle of the content.
   * Allows filtering of activity definitions that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired activity definition without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  timingString?: string | undefined;
  _timingString?: Element | undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  timingPeriod?: Period | undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  timingRange?: Range | undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  timingTiming?: Timing | undefined;
  /**
   * A short, descriptive, user-friendly title for the activity definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
   */
  transform?: Reference | undefined;
  /**
   * An absolute URI that is used to identify this activity definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this activity definition is (or will be) published. The URL SHOULD include the major version of the activity definition. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * A detailed description of how the asset is used from a clinical perspective.
   */
  usage?: string | undefined;
  _usage?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate activity definition instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the activity definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the activity definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.
   * There may be different activity definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the activity definition with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * The suspected agent causing the adverse event
 */
export interface AdverseEventSuspectEntity extends BackboneElement {
  /**
   * causality1 | causality2.
   */
  causality?: ('causality1'|'causality2') | undefined;
  _causality?: Element | undefined;
  /**
   * assess1 | assess2.
   */
  causalityAssessment?: CodeableConcept | undefined;
  /**
   * AdverseEvent.suspectEntity.causalityAuthor.
   */
  causalityAuthor?: Reference | undefined;
  /**
   * method1 | method2.
   */
  causalityMethod?: CodeableConcept | undefined;
  /**
   * AdverseEvent.suspectEntity.causalityProductRelatedness.
   */
  causalityProductRelatedness?: string | undefined;
  _causalityProductRelatedness?: Element | undefined;
  /**
   * result1 | result2.
   */
  causalityResult?: CodeableConcept | undefined;
  /**
   * Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device.
   */
  instance: Reference;
}
export interface AdverseEvent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AdverseEvent';
  /**
   * The type of event which is important to characterize what occurred and caused harm to the subject, or had the potential to cause harm to the subject.
   */
  category?: ('AE'|'PAE') | undefined;
  _category?: Element | undefined;
  /**
   * The date (and perhaps time) when the adverse event occurred.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Describes the adverse event in text.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Parties that may or should contribute or have contributed information to the Act. Such information includes information leading to the decision to perform the Act and how to perform the Act (e.g. consultant), information that the Act itself seeks to reveal (e.g. informant of clinical history), or information about what Act was performed (e.g. informant witness).
   */
  eventParticipant?: Reference | undefined;
  /**
   * The identifier(s) of this adverse event that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itsefl is not appropriate.
   */
  identifier?: Identifier | undefined;
  /**
   * The information about where the adverse event occurred.
   */
  location?: Reference | undefined;
  /**
   * Describes the type of outcome from the adverse event.
   */
  outcome?: CodeableConcept | undefined;
  /**
   * Includes information about the reaction that occurred as a result of exposure to a substance (for example, a drug or a chemical).
   */
  reaction?: Reference[] | undefined;
  /**
   * Information on who recorded the adverse event.  May be the patient or a practitioner.
   */
  recorder?: Reference | undefined;
  /**
   * AdverseEvent.referenceDocument.
   */
  referenceDocument?: Reference[] | undefined;
  /**
   * Describes the seriousness or severity of the adverse event.
   */
  seriousness?: CodeableConcept | undefined;
  /**
   * AdverseEvent.study.
   */
  study?: Reference[] | undefined;
  /**
   * This subject or group impacted by the event.  With a prospective adverse event, there will be no subject as the adverse event was prevented.
   */
  subject?: Reference | undefined;
  /**
   * AdverseEvent.subjectMedicalHistory.
   */
  subjectMedicalHistory?: Reference[] | undefined;
  /**
   * Describes the entity that is suspected to have caused the adverse event.
   */
  suspectEntity?: AdverseEventSuspectEntity[] | undefined;
  /**
   * This element defines the specific type of event that occurred or that was prevented from occurring.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Adverse Reaction Events linked to exposure to substance
 */
export interface AllergyIntoleranceReaction extends BackboneElement {
  /**
   * Text description about the reaction as a whole, including details of the manifestation if required.
   * Use the description to provide any details of a particular event of the occurred reaction such as circumstances, reaction specifics, what happened before/after. Information, related to the event, but not describing a particular care should be captured in the comment field. For example: at the age of four, the patient was given penicillin for strep throat and subsequently developed severe hives.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Identification of the route by which the subject was exposed to the substance.
   * Coding of the route of exposure with a terminology should be used wherever possible.
   */
  exposureRoute?: CodeableConcept | undefined;
  /**
   * Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
   * Manifestation can be expressed as a single word, phrase or brief description. For example: nausea, rash or no reaction. It is preferable that manifestation should be coded with a terminology, where possible. The values entered here may be used to display on an application screen as part of a list of adverse reactions, as recommended in the UK NHS CUI guidelines.  Terminologies commonly used include, but are not limited to, SNOMED CT or ICD10.
   */
  manifestation: CodeableConcept[];
  /**
   * Additional text about the adverse reaction event not captured in other fields.
   * Use this field to record information indirectly related to a particular event and not captured in the description. For example: Clinical records are no longer available, recorded based on information provided to the patient by her mother and her mother is deceased.
   */
  note?: Annotation[] | undefined;
  /**
   * Record of the date and/or time of the onset of the Reaction.
   */
  onset?: string | undefined;
  _onset?: Element | undefined;
  /**
   * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
   * It is acknowledged that this assessment is very subjective. There may be some some specific practice domains where objective scales have been applied. Objective scales can be included in this model as extensions.
   */
  severity?: ('mild'|'moderate'|'severe') | undefined;
  _severity?: Element | undefined;
  /**
   * Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.
   * Coding of the specific substance (or pharmaceutical product) with a terminology capable of triggering decision support should be used wherever possible.  The 'code' element allows for the use of a specific substance or pharmaceutical product, or a group or class of substances. In the case of an allergy or intolerance to a class of substances, (for example, "penicillins"), the 'reaction.substance' element could be used to code the specific substance that was identifed as having caused the reaction (for example, "amoxycillin"). Duplication of the value in the 'code' and 'reaction.substance' elements is acceptable when a specific substance has been recorded in 'code'.
   */
  substance?: CodeableConcept | undefined;
}
/**
 * Substances include, but are not limited to: a therapeutic substance administered correctly at an appropriate dosage for the individual; food; material derived from plants or animals; or venom from insect stings.
 */
export interface AllergyIntolerance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AllergyIntolerance';
  /**
   * The date on which the existance of the AllergyIntolerance was first asserted or acknowledged.
   */
  assertedDate?: string | undefined;
  _assertedDate?: Element | undefined;
  /**
   * The source of the information about the allergy that is recorded.
   * The recorder takes repsonsibility for the content, but can reference the source from where they got it.
   */
  asserter?: Reference | undefined;
  /**
   * Category of the identified substance.
   * This data element has been included because it is currently being captured in some clinical systems. This data can be derived from the substance where coding systems are used, and is effectively redundant in that situation.  When searching on category, consider the implications of AllergyIntolerance resources without a category.  For example, when searching on category = medication, medication allergies that don't have a category valued will not be returned.  Refer to [search](search.html) for more information on how to search category with a :missing modifier to get allergies that don't have a category.  Additionally, category should be used with caution because category can be subjective based on the sender.
   */
  category?: ('food'|'medication'|'environment'|'biologic')[] | undefined;
  _category?: Element[] | undefined;
  /**
   * The clinical status of the allergy or intolerance.
   * This element is labeled as a modifier because the status contains the codes inactive and resolved that mark the AllergyIntolerance as not currently valid.
   */
  clinicalStatus?: ('active'|'inactive'|'resolved') | undefined;
  _clinicalStatus?: Element | undefined;
  /**
   * Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").
   * It is strongly recommended that this element be populated using a terminology, where possible. For example, some terminologies used include RxNorm, SNOMED CT, DM+D, NDFRT, ICD-9, IDC-10, UNI, ATC and CPT. Plain text should only be used if there is no appropriate terminology available. Additional details can be specified in the text.
   * When a substance or product code is specified for the 'code' element, the "default" semantic context is that this is a positive statement of an allergy or intolerance (depending on the value of the 'type' element, if present) condition to the specified substance/product.  In the corresponding SNOMED CT allergy model, the specified substance/product is the target (destination) of the "Causative agent" relationship.
   * The 'substanceExposureRisk' extension is available as a structured and more flexible alternative to the 'code' element for making positive or negative allergy or intolerance statements.  This extension provides the capability to make "no known allergy" (or "no risk of adverse reaction") statements regarding any coded substance/product (including cases when a pre-coordinated "no allergy to x" concept for that substance/product does not exist).  If the 'substanceExposureRisk' extension is present, the AllergyIntolerance.code element SHALL be omitted.
   */
  code?: CodeableConcept | undefined;
  /**
   * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
   * The default criticality value for any propensity to an adverse reaction should be 'Low Risk', indicating at the very least a relative contraindication to deliberate or voluntary exposure to the substance. 'High Risk' is flagged if the clinician has identified a propensity for a more serious or potentially life-threatening reaction, such as anaphylaxis, and implies an absolute contraindication to deliberate or voluntary exposure to the substance. If this element is missing, the criticality is unknown (though it may be known elsewhere).
   * Systems that capture a severity at the condition level are actually representing the concept of criticality whereas the severity documented at the reaction level is representing the true reaction severity.  Existing systems that are capturing both condition criticality and reaction severity may use the term "severity" to represent both.  Criticality is the worst it could be in the future (i.e. situation-agnostic) whereas severity is situation-dependent.
   */
  criticality?: ('low'|'high'|'unable-to-assess') | undefined;
  _criticality?: Element | undefined;
  /**
   * This records identifiers associated with this allergy/intolerance concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Represents the date and/or time of the last known occurrence of a reaction event.
   * This date may be replicated by one of the Onset of Reaction dates. Where a textual representation of the date of last occurrence is required e.g. 'In Childhood, '10 years ago' the Comment element should be used.
   */
  lastOccurrence?: string | undefined;
  _lastOccurrence?: Element | undefined;
  /**
   * Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
   * For example: including reason for flagging a seriousness of 'High Risk'; and instructions related to future exposure or administration of the substance, such as administration within an Intensive Care Unit or under corticosteroid cover. The notes should be related to an allergy or intolerance as a condition in general and not related to any particular episode of it. For episode notes and descriptions, use AllergyIntolerance.event.description and  AllergyIntolerance.event.notes.
   */
  note?: Annotation[] | undefined;
  /**
   * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
   */
  onsetAge?: Age | undefined;
  /**
   * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
   */
  onsetString?: string | undefined;
  _onsetString?: Element | undefined;
  /**
   * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
   */
  onsetPeriod?: Period | undefined;
  /**
   * Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
   */
  onsetRange?: Range | undefined;
  /**
   * The patient who has the allergy or intolerance.
   */
  patient: Reference;
  /**
   * Details about each adverse reaction event linked to exposure to the identified substance.
   */
  reaction?: AllergyIntoleranceReaction[] | undefined;
  /**
   * Individual who recorded the record and takes responsibility for its content.
   */
  recorder?: Reference | undefined;
  /**
   * Identification of the underlying physiological mechanism for the reaction risk.
   * Allergic (typically immune-mediated) reactions have been traditionally regarded as an indicator for potential escalation to significant future risk. Contemporary knowledge suggests that some reactions previously thought to be immune-mediated are, in fact, non-immune, but in some cases can still pose a life threatening risk. It is acknowledged that many clinicians may not be in a position to distinguish the mechanism of a particular reaction. Often the term "allergy" is used rather generically and may overlap with the use of "intolerance" - in practice the boundaries between these two concepts may not be well-defined or understood. This data element is included nevertheless, because many legacy systems have captured this attribute. Immunologic testing may provide supporting evidence for the basis of the reaction and the causative substance, but no tests are 100% sensitive or specific for sensitivity to a particular substance. If, as is commonly the case, it is unclear whether the reaction is due to an allergy or an intolerance, then the type element should be omitted from the resource.
   */
  type?: ('allergy'|'intolerance') | undefined;
  _type?: Element | undefined;
  /**
   * Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).
   * This element is labeled as a modifier because the status contains the codes refuted and entered-in-error that mark the AllergyIntolerance as not currently valid.
   */
  verificationStatus: ('unconfirmed'|'confirmed'|'refuted'|'entered-in-error');
  _verificationStatus?: Element | undefined;
}
/**
 * Participants involved in appointment
 */
export interface AppointmentParticipant extends BackboneElement {
  /**
   * A Person, Location/HealthcareService or Device that is participating in the appointment.
   */
  actor?: Reference | undefined;
  /**
   * Is this participant required to be present at the meeting. This covers a use-case where 2 doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.
   */
  required?: ('required'|'optional'|'information-only') | undefined;
  _required?: Element | undefined;
  /**
   * Participation status of the actor.
   */
  status: ('accepted'|'declined'|'tentative'|'needs-action');
  _status?: Element | undefined;
  /**
   * Role of participant in the appointment.
   * The role of the participant can be used to declare what the actor will be doing in the scope of this appointment.
   * If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
   * This value SHALL be the same when creating an AppointmentResponse so that they can be matched, and subsequently update the Appointment.
   */
  type?: CodeableConcept[] | undefined;
}
export interface Appointment extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Appointment';
  /**
   * The style of appointment or patient that has been booked in the slot (not service type).
   */
  appointmentType?: CodeableConcept | undefined;
  /**
   * Additional comments about the appointment.
   * Additional text to aid in facilitating the appointment. For instance, a comment might be, "patient should proceed immediately to infusion room upon arrival"
   * Where this is a planned appointment and the start/end dates are not set then this field can be used to provide additional guidance on the details of the appointment request, including any restrictions on when to book it.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * The date that this appointment was initially created. This could be different to the meta.lastModified value on the initial entry, as this could have been before the resource was created on the FHIR server, and should remain unchanged over the lifespan of the appointment.
   * This property is required for many use cases where the age of an appointment is considered in processing workflows for scheduling and billing of appointments.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Date/Time that the appointment is to conclude.
   */
  end?: string | undefined;
  _end?: Element | undefined;
  /**
   * This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * The referral request this appointment is allocated to assess (incoming referral).
   */
  incomingReferral?: Reference[] | undefined;
  /**
   * Reason the appointment has been scheduled to take place, as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
   */
  indication?: Reference[] | undefined;
  /**
   * Number of minutes that the appointment is to take. This can be less than the duration between the start and end times (where actual time of appointment is only an estimate or is a planned appointment request).
   */
  minutesDuration?: number | undefined;
  /**
   * List of participants involved in the appointment.
   */
  participant: AppointmentParticipant[];
  /**
   * The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).
   * Seeking implementer feedback on this property and how interoperable it is.
   * Using an extension to record a codeableconcept for named values may be tested at a future connectathon.
   */
  priority?: number | undefined;
  /**
   * The reason that this appointment is being scheduled. This is more clinical than administrative.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * A set of date ranges (potentially including times) that the appointment is preferred to be scheduled within. When using these values, the minutes duration should be provided to indicate the length of the appointment to fill and populate the start/end times for the actual allocated time.
   * This does not introduce a capacity for recurring appointments.
   */
  requestedPeriod?: Period[] | undefined;
  /**
   * A broad categorisation of the service that is to be performed during this appointment.
   */
  serviceCategory?: CodeableConcept | undefined;
  /**
   * The specific service that is to be performed during this appointment.
   */
  serviceType?: CodeableConcept[] | undefined;
  /**
   * The slots from the participants' schedules that will be filled by the appointment.
   */
  slot?: Reference[] | undefined;
  /**
   * The specialty of a practitioner that would be required to perform the service requested in this appointment.
   */
  specialty?: CodeableConcept[] | undefined;
  /**
   * Date/Time that the appointment is to take place.
   */
  start?: string | undefined;
  _start?: Element | undefined;
  /**
   * The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
   * If the Appointment's status is "cancelled" then all participants are expected to have their calendars released for the appointment period, and as such any Slots that were marked as BUSY can be re-set to FREE.
   * This element is labeled as a modifier because the status contains the code entered-in-error that mark the Appointment as not currently valid.
   */
  status: ('proposed'|'pending'|'booked'|'arrived'|'fulfilled'|'cancelled'|'noshow'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * Additional information to support the appointment provided when making the appointment.
   */
  supportingInformation?: Reference[] | undefined;
}
export interface AppointmentResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AppointmentResponse';
  /**
   * A Person, Location/HealthcareService or Device that is participating in the appointment.
   */
  actor?: Reference | undefined;
  /**
   * Appointment that this response is replying to.
   */
  appointment: Reference;
  /**
   * Additional comments about the appointment.
   * This comment is particularly important when the responder is declining, tentatively accepting or requesting another time to indicate the reasons why.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
   */
  end?: string | undefined;
  _end?: Element | undefined;
  /**
   * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
   */
  participantStatus: ('accepted'|'declined'|'tentative'|'needs-action');
  _participantStatus?: Element | undefined;
  /**
   * Role of participant in the appointment.
   * The role of the participant can be used to declare what the actor will be doing in the scope of the referenced appointment.
   * If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.
   * This value SHALL be the same as specified on the referenced Appointment so that they can be matched, and subsequently updated.
   */
  participantType?: CodeableConcept[] | undefined;
  /**
   * Date/Time that the appointment is to take place, or requested new start time.
   * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the start time.
   */
  start?: string | undefined;
  _start?: Element | undefined;
}
/**
 * Logical network location for application activity
 */
export interface AuditEventAgentNetwork extends BackboneElement {
  /**
   * An identifier for the network access point of the user device for the audit event.
   * This could be a device id, IP address or some other identifier associated with a device.
   */
  address?: string | undefined;
  _address?: Element | undefined;
  /**
   * An identifier for the type of network access point that originated the audit event.
   */
  type?: ('1'|'2'|'3'|'4'|'5') | undefined;
  _type?: Element | undefined;
}
/**
 * Actor involved in the event
 * Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
 * For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
 */
export interface AuditEventAgent extends BackboneElement {
  /**
   * Alternative agent Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign-on), if available.
   */
  altId?: string | undefined;
  _altId?: Element | undefined;
  /**
   * Where the event occurred.
   */
  location?: Reference | undefined;
  /**
   * Type of media involved. Used when the event is about exporting/importing onto media.
   */
  media?: Coding | undefined;
  /**
   * Human-meaningful name for the agent.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Logical network location for application activity, if the activity has a network location.
   */
  network?: AuditEventAgentNetwork | undefined;
  /**
   * The policy or plan that authorized the activity being recorded. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.
   * For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
   */
  policy?: string[] | undefined;
  _policy?: Element[] | undefined;
  /**
   * The reason (purpose of use), specific to this agent, that was used during the event being recorded.
   * Use AuditEvent.agent.purposeOfUse when you know that is specific to the agent, otherwise use AuditEvent.purposeOfEvent. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
   */
  purposeOfUse?: CodeableConcept[] | undefined;
  /**
   * Direct reference to a resource that identifies the agent.
   */
  reference?: Reference | undefined;
  /**
   * Indicator that the user is or is not the requestor, or initiator, for the event being audited.
   * There can only be one initiator. If the initiator is not clear, then do not choose any one agent as the initiator.
   */
  requestor: boolean;
  _requestor?: Element | undefined;
  /**
   * The security role that the user was acting under, that come from local codes defined by the access control security system (e.g. RBAC, ABAC) used in the local context.
   * Should be roles relevant to the event. Should  not be an exhaustive list of roles.
   */
  role?: CodeableConcept[] | undefined;
  /**
   * Unique identifier for the user actively participating in the event.
   * A unique value within the Audit Source ID. For node-based authentication -- where only the system hardware or process, but not a human user, is identified -- User ID would be the node name.
   */
  userId?: Identifier | undefined;
}
/**
 * Additional Information about the entity
 */
export interface AuditEventEntityDetail extends BackboneElement {
  /**
   * The type of extra detail provided in the value.
   */
  type: string;
  _type?: Element | undefined;
  /**
   * The details, base64 encoded. Used to carry bulk information.
   * The value is base64 encoded to enable various encodings or binary content.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Data or objects used
 * Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
 */
export interface AuditEventEntity extends BackboneElement {
  /**
   * Text that describes the entity in more detail.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Tagged value pairs for conveying additional information about the entity.
   */
  detail?: AuditEventEntityDetail[] | undefined;
  /**
   * Identifies a specific instance of the entity. The reference should always be version specific.
   * Identifier detail depends on entity type.
   */
  identifier?: Identifier | undefined;
  /**
   * Identifier for the data life-cycle stage for the entity.
   * This can be used to provide an audit trail for data, over time, as it passes through the system.
   */
  lifecycle?: Coding | undefined;
  /**
   * A name of the entity in the audit event.
   * This field may be used in a query/report to identify audit events for a specific person.  For example, where multiple synonymous entity identifiers (patient number, medical record number, encounter number, etc.) have been used.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The query parameters for a query-type entities.
   */
  query?: string | undefined;
  _query?: Element | undefined;
  /**
   * Identifies a specific instance of the entity. The reference should be version specific.
   */
  reference?: Reference | undefined;
  /**
   * Code representing the role the entity played in the event being audited.
   */
  role?: Coding | undefined;
  /**
   * Security labels for the identified entity.
   * Copied from entity meta security tags.
   */
  securityLabel?: Coding[] | undefined;
  /**
   * The type of the object that was involved in this audit event.
   * This value is distinct from the user's role or any user relationship to the entity.
   */
  type?: Coding | undefined;
}
/**
 * Audit Event Reporter
 * Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
 */
export interface AuditEventSource extends BackboneElement {
  /**
   * Identifier of the source where the event was detected.
   */
  identifier: Identifier;
  /**
   * Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.
   */
  site?: string | undefined;
  _site?: Element | undefined;
  /**
   * Code specifying the type of source where event originated.
   */
  type?: Coding[] | undefined;
}
/**
 * Based on ATNA (RFC 3881).
 */
export interface AuditEvent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'AuditEvent';
  /**
   * Indicator for type of action performed during the event that generated the audit.
   */
  action?: ('C'|'R'|'U'|'D'|'E') | undefined;
  _action?: Element | undefined;
  /**
   * An actor taking an active role in the event or activity that is logged.
   * Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
   * For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
   */
  agent: AuditEventAgent[];
  /**
   * Specific instances of data or objects that have been accessed.
   * Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
   */
  entity?: AuditEventEntity[] | undefined;
  /**
   * Indicates whether the event succeeded or failed.
   * In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
   */
  outcome?: ('0'|'4'|'8'|'12') | undefined;
  _outcome?: Element | undefined;
  /**
   * A free text description of the outcome of the event.
   */
  outcomeDesc?: string | undefined;
  _outcomeDesc?: Element | undefined;
  /**
   * The purposeOfUse (reason) that was used during the event being recorded.
   * Use AuditEvent.agent.purposeOfUse when you know that it is specific to the agent, otherwise use AuditEvent.purposeOfEvent. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
   */
  purposeOfEvent?: CodeableConcept[] | undefined;
  /**
   * The time when the event occurred on the source.
   * In a distributed system, some sort of common time base (e.g. an NTP [RFC1305] server) is a good implementation tactic.
   */
  recorded: string;
  _recorded?: Element | undefined;
  /**
   * The system that is reporting the event.
   * Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
   */
  source: AuditEventSource;
  /**
   * Identifier for the category of event.
   */
  subtype?: Coding[] | undefined;
  /**
   * Identifier for a family of the event.  For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function.
   */
  type: Coding;
}
export interface Basic extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Basic';
  /**
   * Indicates who was responsible for creating the resource instance.
   */
  author?: Reference | undefined;
  /**
   * Identifies the 'type' of resource - equivalent to the resource name for other resources.
   * Because resource references will only be able to indicate 'Basic', the type of reference will need to be specified in a Profile identified as part of the resource.  Refer to the resource notes section for information on appropriate terminologies for this code.
   * This element is labeled as a modifier because the it defines the meaning of the resource and cannot be ignored.
   */
  code: CodeableConcept;
  /**
   * Identifies when the resource was first created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * Identifier assigned to the resource for business purposes, outside the context of FHIR.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource.
   * Optional as not all potential resources will have subjects.  Resources associated with multiple subjects can handle this via extension.
   */
  subject?: Reference | undefined;
}
/**
 * Typically, Binary resources are used for handling content such as:  * CDA Documents (i.e. with XDS) * PDF Documents * Images (the Media resource is preferred for handling images, but not possible when the content is already binary - e.g. XDS).
 */
export interface Binary extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Binary';
  /**
   * The actual content, base64 encoded.
   * If the content type is itself base64 encoding, then this will be base64 encoded twice - what is created by un-base64ing the content must be the specified content type.
   */
  content: string;
  _content?: Element | undefined;
  /**
   * MimeType of the binary content represented as a standard MimeType (BCP 13).
   */
  contentType: string;
  _contentType?: Element | undefined;
  /**
   * Treat this binary as if it was this other resource for access control purposes.
   */
  securityContext?: Reference | undefined;
}
export interface BodySite extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'BodySite';
  /**
   * Whether this body site is in active use.
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Named anatomical location - ideally coded where possible.
   */
  code?: CodeableConcept | undefined;
  /**
   * A summary, charactarization or explanation of the anatomic location.
   * This description could include any visual markings used to orientate the viewer e.g. external reference points, special sutures, ink markings.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Identifier for this instance of the anatomical location.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Image or images used to identify a location.
   */
  image?: Attachment[] | undefined;
  /**
   * The person to which the body site belongs.
   */
  patient: Reference;
  /**
   * Qualifier to refine the anatomical location.  These include qualifiers for laterality, relative location, directionality, number, and plane.
   */
  qualifier?: CodeableConcept[] | undefined;
}
/**
 * Transaction Related Information
 */
export interface BundleEntryRequest extends BackboneElement {
  /**
   * Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency).
   */
  ifMatch?: string | undefined;
  _ifMatch?: Element | undefined;
  /**
   * Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread).
   */
  ifModifiedSince?: string | undefined;
  _ifModifiedSince?: Element | undefined;
  /**
   * Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL - what follows the "?" (not including the "?").
   */
  ifNoneExist?: string | undefined;
  _ifNoneExist?: Element | undefined;
  /**
   * If the ETag values match, return a 304 Not Modified status. See the API documentation for ["Conditional Read"](http.html#cread).
   */
  ifNoneMatch?: string | undefined;
  _ifNoneMatch?: Element | undefined;
  /**
   * The HTTP verb for this entry in either a change history, or a transaction/ transaction response.
   */
  method: ('GET'|'POST'|'PUT'|'DELETE');
  _method?: Element | undefined;
  /**
   * The URL for this entry, relative to the root (the address to which the request is posted).
   * E.g. for a Patient Create, the method would be "POST" and the URL would be "Patient". For a Patient Update, the method would be PUT, and the URL would be "Patient/[id]".
   */
  url: string;
  _url?: Element | undefined;
}
/**
 * Transaction Related Information
 */
export interface BundleEntryResponse extends BackboneElement {
  /**
   * The etag for the resource, it the operation for the entry produced a versioned resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource Contention](http.html#concurrency)).
   * Etags match the Resource.meta.versionId. The ETag has to match the version id in the header if a resource is included.
   */
  etag?: string | undefined;
  _etag?: Element | undefined;
  /**
   * The date/time that the resource was modified on the server.
   * This has to match the same time in the meta header if a resource is included.
   */
  lastModified?: string | undefined;
  _lastModified?: Element | undefined;
  /**
   * The location header created by processing this operation.
   */
  location?: string | undefined;
  _location?: Element | undefined;
  /**
   * An OperationOutcome containing hints and warnings produced as part of processing this entry in a batch or transaction.
   * For a POST/PUT operation, this is the equivalent outcome that would be returned for prefer = operationoutcome - except that the resource is always returned whether or not the outcome is returned.
   */
  outcome?: FhirResource | undefined;
  /**
   * The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code.
   */
  status: string;
  _status?: Element | undefined;
}
/**
 * Search related information
 */
export interface BundleEntrySearch extends BackboneElement {
  /**
   * Why this entry is in the result set - whether it's included as a match or because of an _include requirement.
   * There is only one mode. In some corner cases, a resource may be included because it is both a match and an include. In these circumstances, 'match' takes precedence.
   */
  mode?: ('match'|'include'|'outcome') | undefined;
  _mode?: Element | undefined;
  /**
   * When searching, the server's search ranking score for the entry.
   * Servers are not required to return a ranking score. 1 is most relevant, and 0 is least relevant. Often, search results are sorted by score, but the client may specify a different sort order.
   */
  score?: number | undefined;
}
/**
 * Entry in the bundle - will have a resource, or information
 */
export interface BundleEntry<BundleContentType = FhirResource> extends BackboneElement {
  /**
   * The Absolute URL for the resource.  The fullUrl SHALL not disagree with the id in the resource. The fullUrl is a version independent reference to the resource. The fullUrl element SHALL have a value except that: 
   * * fullUrl can be empty on a POST (although it does not need to when specifying a temporary id for reference in the bundle)
   * * Results from operations might involve resources that are not identified.
   * fullUrl may not be [unique in the context of a resource](bundle.html#bundle-unique). Note that since [FHIR resources do not need to be served through the FHIR API](references.html), the absolute URL may not end with the logical id of the resource (Resource.id), but if the fullUrl does look like a RESTful server URL (e.g. meets the [regex](references.html#regex), then it SHALL end with the Resource.id.
   */
  fullUrl?: string | undefined;
  _fullUrl?: Element | undefined;
  /**
   * A series of links that provide context to this entry.
   */
  link?: BundleLink[] | undefined;
  /**
   * Additional information about how this entry should be processed as part of a transaction.
   */
  request?: BundleEntryRequest | undefined;
  /**
   * The Resources for the entry.
   */
  resource?: BundleContentType | undefined;
  /**
   * Additional information about how this entry should be processed as part of a transaction.
   */
  response?: BundleEntryResponse | undefined;
  /**
   * Information about the search process that lead to the creation of this entry.
   */
  search?: BundleEntrySearch | undefined;
}
/**
 * Links related to this Bundle
 */
export interface BundleLink extends BackboneElement {
  /**
   * A name which details the functional use for this link - see [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1).
   */
  relation: string;
  _relation?: Element | undefined;
  /**
   * The reference details for the link.
   */
  url: string;
  _url?: Element | undefined;
}
export interface Bundle<BundleContentType = FhirResource> extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Bundle';
  /**
   * An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).
   */
  entry?: BundleEntry<BundleContentType>[] | undefined;
  /**
   * A persistent identifier for the batch that won't change as a batch is copied from server to server.
   * Persistent identity generally only matters for batches of type Document, Message, and Collection. It would not normally be populated for search and history results, and servers ignore Bundle.identifier when processing batches and transactions. For Documents  the .identifier SHALL be populated such that the .identifier is globally unique.
   */
  identifier?: Identifier | undefined;
  /**
   * A series of links that provide context to this bundle.
   */
  link?: BundleLink[] | undefined;
  /**
   * Digital Signature - base64 encoded. XML-DSIg or a JWT.
   * The signature could be created by the "author" of the bundle or by the originating device.   Requirements around inclusion of a signature, verification of signatures and treatment of signed/non-signed bundles is implementation-environment specific.
   */
  signature?: Signature | undefined;
  /**
   * If a set of search matches, this is the total number of matches for the search (as opposed to the number of results in this bundle).
   * Only used if the bundle is a search result set. The total does not include resources such as OperationOutcome and included resources, only the total number of matching resources.
   */
  total?: number | undefined;
  /**
   * Indicates the purpose of this bundle - how it was intended to be used.
   * It's possible to use a bundle for other purposes (e.g. a document can be accepted as a transaction). This is primarily defined so that there can be specific rules for some of the bundle types.
   */
  type: ('document'|'message'|'transaction'|'transaction-response'|'batch'|'batch-response'|'history'|'searchset'|'collection');
  _type?: Element | undefined;
}
/**
 * Document definition
 */
export interface CapabilityStatementDocument extends BackboneElement {
  /**
   * A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * Mode of this document declaration - whether an application is a producer or consumer.
   */
  mode: ('producer'|'consumer');
  _mode?: Element | undefined;
  /**
   * A constraint on a resource used in the document.
   * The first resource is the document resource.
   */
  profile: Reference;
}
/**
 * If this describes a specific instance
 */
export interface CapabilityStatementImplementation extends BackboneElement {
  /**
   * Information about the specific installation that this capability statement relates to.
   */
  description: string;
  _description?: Element | undefined;
  /**
   * An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * Where messages should be sent
 */
export interface CapabilityStatementMessagingEndpoint extends BackboneElement {
  /**
   * The network address of the end-point. For solutions that do not use network addresses for routing, it can be just an identifier.
   */
  address: string;
  _address?: Element | undefined;
  /**
   * A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
   */
  protocol: Coding;
}
/**
 * Declare support for this event
 * The same event may be listed up to two times - once as sender and once as receiver.
 */
export interface CapabilityStatementMessagingEvent extends BackboneElement {
  /**
   * The impact of the content of the message.
   */
  category?: ('Consequence'|'Currency'|'Notification') | undefined;
  _category?: Element | undefined;
  /**
   * A coded identifier of a supported messaging event.
   */
  code: Coding;
  /**
   * Guidance on how this event is handled, such as internal system trigger points, business rules, etc.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * A resource associated with the event.  This is the resource that defines the event.
   * This SHALL be provided if the event type supports multiple different resource types.
   */
  focus: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription');
  _focus?: Element | undefined;
  /**
   * The mode of this event declaration - whether an application is a sender or receiver.
   */
  mode: ('sender'|'receiver');
  _mode?: Element | undefined;
  /**
   * Information about the request for this event.
   */
  request: Reference;
  /**
   * Information about the response for this event.
   */
  response: Reference;
}
/**
 * Messages supported by this system
 * This is a proposed alternative to the messaging.event structure.
 */
export interface CapabilityStatementMessagingSupportedMessage extends BackboneElement {
  /**
   * Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.
   */
  definition: Reference;
  /**
   * The mode of this event declaration - whether application is sender or receiver.
   */
  mode: ('sender'|'receiver');
  _mode?: Element | undefined;
}
/**
 * If messaging is supported
 * Multiple repetitions allow the documentation of multiple endpoints per solution.
 */
export interface CapabilityStatementMessaging extends BackboneElement {
  /**
   * Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * An endpoint (network accessible address) to which messages and/or replies are to be sent.
   */
  endpoint?: CapabilityStatementMessagingEndpoint[] | undefined;
  /**
   * A description of the solution's support for an event at this end-point.
   * The same event may be listed up to two times - once as sender and once as receiver.
   */
  event?: CapabilityStatementMessagingEvent[] | undefined;
  /**
   * Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
   * If this value is missing then the application does not implement (receiver) or depend on (sender) reliable messaging.
   */
  reliableCache?: number | undefined;
  /**
   * References to message definitions for messages this system can send or receive.
   * This is a proposed alternative to the messaging.event structure.
   */
  supportedMessage?: CapabilityStatementMessagingSupportedMessage[] | undefined;
}
/**
 * What operations are supported?
 */
export interface CapabilityStatementRestInteraction extends BackboneElement {
  /**
   * A coded identifier of the operation, supported by the system.
   */
  code: ('transaction'|'batch'|'search-system'|'history-system');
  _code?: Element | undefined;
  /**
   * Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
}
/**
 * Definition of an operation or a custom query
 */
export interface CapabilityStatementRestOperation extends BackboneElement {
  /**
   * Where the formal definition can be found.
   * This can be used to build an HTML form to invoke the operation, for instance.
   */
  definition: Reference;
  /**
   * The name of the operation or query. For an operation, this is the name  prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called.
   * The name here SHOULD be the same as the name in the definition, unless there is a name clash and the name cannot be used. The name does not include the "$" portion that is always included in the URL.
   */
  name: string;
  _name?: Element | undefined;
}
/**
 * What operations are supported?
 */
export interface CapabilityStatementRestResourceInteraction extends BackboneElement {
  /**
   * Coded identifier of the operation, supported by the system resource.
   */
  code: ('read'|'vread'|'update'|'patch'|'delete'|'history-instance'|'history-type'|'create'|'search-type');
  _code?: Element | undefined;
  /**
   * Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
}
/**
 * Search parameters supported by implementation
 */
export interface CapabilityStatementRestResourceSearchParam extends BackboneElement {
  /**
   * An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url]()).
   * This SHOULD be present, and matches refers to a SearchParameter by its canonical url. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * The name of the search parameter used in the interface.
   * Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The type of value a search parameter refers to, and how the content is interpreted.
   * While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.
   */
  type: ('number'|'date'|'string'|'token'|'reference'|'composite'|'quantity'|'uri');
  _type?: Element | undefined;
}
/**
 * Resource served on the REST interface
 * Max of one repetition per resource type.
 */
export interface CapabilityStatementRestResource extends BackboneElement {
  /**
   * A flag that indicates that the server supports conditional create.
   * Conditional Create is mainly appropriate for interface engine scripts converting from other formats, such as v2.
   */
  conditionalCreate?: boolean | undefined;
  _conditionalCreate?: Element | undefined;
  /**
   * A code that indicates how the server supports conditional delete.
   * Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.
   */
  conditionalDelete?: ('not-supported'|'single'|'multiple') | undefined;
  _conditionalDelete?: Element | undefined;
  /**
   * A code that indicates how the server supports conditional read.
   * Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.
   */
  conditionalRead?: ('not-supported'|'modified-since'|'not-match'|'full-support') | undefined;
  _conditionalRead?: Element | undefined;
  /**
   * A flag that indicates that the server supports conditional update.
   * Conditional Update is mainly appropriate for interface engine scripts converting from other formats, such as v2.
   */
  conditionalUpdate?: boolean | undefined;
  _conditionalUpdate?: Element | undefined;
  /**
   * Additional information about the resource type used by the system.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * Identifies a restful operation supported by the solution.
   */
  interaction: CapabilityStatementRestResourceInteraction[];
  /**
   * A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles](profiling.html#profile-uses).
   * The profile applies to all  resources of this type - i.e. it is the superset of what is supported by the system.
   */
  profile?: Reference | undefined;
  /**
   * A flag for whether the server is able to return past versions as part of the vRead operation.
   * It is useful to support the vRead operation for current operations, even if past versions aren't available.
   */
  readHistory?: boolean | undefined;
  _readHistory?: Element | undefined;
  /**
   * A set of flags that defines how references are supported.
   */
  referencePolicy?: ('literal'|'logical'|'resolves'|'enforced'|'local')[] | undefined;
  _referencePolicy?: Element[] | undefined;
  /**
   * A list of _include values supported by the server.
   * If this list is empty, the server does not support includes.
   */
  searchInclude?: string[] | undefined;
  _searchInclude?: Element[] | undefined;
  /**
   * Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
   */
  searchParam?: CapabilityStatementRestResourceSearchParam[] | undefined;
  /**
   * A list of _revinclude (reverse include) values supported by the server.
   * If this list is empty, the server does not support reverse includes.
   */
  searchRevInclude?: string[] | undefined;
  _searchRevInclude?: Element[] | undefined;
  /**
   * A type of resource exposed via the restful interface.
   */
  type: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription');
  _type?: Element | undefined;
  /**
   * A flag to indicate that the server allows or needs to allow the client to create new identities on the server (e.g. that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
   * Allowing the clients to create new identities on the server means that the system administrator needs to have confidence that the clients do not create clashing identities between them. Obviously, if there is only one client, this won't happen. While creating identities on the client means that the clients need to be managed, it's much more convenient for many scenarios if such management can be put in place.
   */
  updateCreate?: boolean | undefined;
  _updateCreate?: Element | undefined;
  /**
   * This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
   * If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.
   */
  versioning?: ('no-version'|'versioned'|'versioned-update') | undefined;
  _versioning?: Element | undefined;
}
/**
 * Certificates associated with security profiles
 */
export interface CapabilityStatementRestSecurityCertificate extends BackboneElement {
  /**
   * Actual certificate.
   */
  blob?: string | undefined;
  _blob?: Element | undefined;
  /**
   * Mime type for a certificate.
   */
  type?: string | undefined;
  _type?: Element | undefined;
}
/**
 * Information about security of implementation
 */
export interface CapabilityStatementRestSecurity extends BackboneElement {
  /**
   * Certificates associated with security profiles.
   */
  certificate?: CapabilityStatementRestSecurityCertificate[] | undefined;
  /**
   * Server adds CORS headers when responding to requests - this enables javascript applications to use the server.
   * The easiest CORS headers to add are Access-Control-Allow-Origin: * & Access-Control-Request-Method: GET, POST, PUT, DELETE. All servers SHOULD support CORS.
   */
  cors?: boolean | undefined;
  _cors?: Element | undefined;
  /**
   * General description of how security works.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Types of security services that are supported/required by the system.
   */
  service?: CodeableConcept[] | undefined;
}
/**
 * If the endpoint is a RESTful one
 * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
 */
export interface CapabilityStatementRest extends BackboneElement {
  /**
   * An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .
   * At present, the only defined compartments are at [CompartmentDefinition](compartmentdefinition.html).
   */
  compartment?: string[] | undefined;
  _compartment?: Element[] | undefined;
  /**
   * Information about the system's restful capabilities that apply across all applications, such as security.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * A specification of restful operations supported by the system.
   */
  interaction?: CapabilityStatementRestInteraction[] | undefined;
  /**
   * Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
   */
  mode: ('client'|'server');
  _mode?: Element | undefined;
  /**
   * Definition of an operation or a named query together with its parameters and their meaning and type.
   */
  operation?: CapabilityStatementRestOperation[] | undefined;
  /**
   * A specification of the restful capabilities of the solution for a specific resource type.
   * Max of one repetition per resource type.
   */
  resource?: CapabilityStatementRestResource[] | undefined;
  /**
   * Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
   * Typically, the only search parameters supported for all searchse are those that apply to all resources - tags, profiles, text search etc.
   */
  searchParam?: CapabilityStatementRestResourceSearchParam[] | undefined;
  /**
   * Information about security implementation from an interface perspective - what a client needs to know.
   */
  security?: CapabilityStatementRestSecurity | undefined;
}
/**
 * Software that is covered by this capability statement
 */
export interface CapabilityStatementSoftware extends BackboneElement {
  /**
   * Name software is known by.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Date this version of the software was released.
   */
  releaseDate?: string | undefined;
  _releaseDate?: Element | undefined;
  /**
   * The version identifier for the software covered by this statement.
   * If possible, a version should be specified, as statements are likely to be different for different versions of software.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
export interface CapabilityStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CapabilityStatement';
  /**
   * A code that indicates whether the application accepts unknown elements or extensions when reading resources.
   * Unknown elements in a resource can only arise as later versions of the specification are published, because this is the only place where such elements can be defined. Hence accepting unknown elements is about inter-version compatibility.
   * Applications are recommended to accept unknown extensions and elements ('both'), but this is not always possible.
   */
  acceptUnknown: ('no'|'extensions'|'elements'|'both');
  _acceptUnknown?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the capability statement was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the capability statement changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the capability statement. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the capability statement from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
   * This description can be used to capture details such as why the capability statement was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the capability statement as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created). This does not need to be populated if the description is adequately implied by the software or implementation details.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A document definition.
   */
  document?: CapabilityStatementDocument[] | undefined;
  /**
   * A boolean value to indicate that this capability statement is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of capability statement that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental capability statement in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * The version of the FHIR specification on which this capability statement is based.
   */
  fhirVersion: string;
  _fhirVersion?: Element | undefined;
  /**
   * A list of the formats supported by this implementation using their content types.
   * "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
   */
  format: string[];
  _format?: Element[] | undefined;
  /**
   * Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
   */
  implementation?: CapabilityStatementImplementation | undefined;
  /**
   * A list of implementation guides that the server does (or should) support in their entirety.
   */
  implementationGuide?: string[] | undefined;
  _implementationGuide?: Element[] | undefined;
  /**
   * Reference to a canonical URL of another CapabilityStatement that this software implements or uses. This capability statement is a published API description that corresponds to a business service. The rest of the capability statement does not need to repeat the details of the referenced resource, but can do so.
   * HL7 defines the following Services: [Terminology Service](terminology-service.html).
   * Many [Implementation Guides](http://fhir.org/guides/registry) define additional services.
   */
  instantiates?: string[] | undefined;
  _instantiates?: Element[] | undefined;
  /**
   * A legal or geographic region in which the capability statement is intended to be used.
   * It may be possible for the capability statement to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind not instance of software) or a class of implementation (e.g. a desired purchase).
   */
  kind: ('instance'|'capability'|'requirements');
  _kind?: Element | undefined;
  /**
   * A description of the messaging capabilities of the solution.
   * Multiple repetitions allow the documentation of multiple endpoints per solution.
   */
  messaging?: CapabilityStatementMessaging[] | undefined;
  /**
   * A natural language name identifying the capability statement. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A list of the patch formats supported by this implementation using their content types.
   * At present, the patch mime types application/json-patch+json and application/xml-patch+xml are legal. Generally, if a server supports PATCH, it would be expected to support the patch formats and match the formats it supports, but this is not always possible or necessary.
   */
  patchFormat?: string[] | undefined;
  _patchFormat?: Element[] | undefined;
  /**
   * A list of profiles that represent different use cases supported by the system. For a server, "supported by the system" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles](profiling.html#profile-uses).
   * Supported profiles are different than the profiles that apply to a particular resource in rest.resource.profile. The resource profile is a general statement of what features of the resource are supported overall by the system - the sum total of the facilities it supports. A supported profile is a deeper statement about the functionality of the data and services provided by the server (or used by the client). A typical case is a laboratory system that produces a set of different reports - this is the list of types of data that it publishes. A key aspect of declaring profiles here is the question of how the client converts knowledge that the server publishes this data into working with the data; the client can inspect individual resources to determine whether they conform to a particular profile, but how does it find the ones that does? It does so by searching using the _profile parameter, so any resources listed here must be valid values for the _profile resource (using the identifier in the target profile).  Typically, supported profiles cross resource types to describe a network of related resources, so they are listed here rather than by resource. However, they do not need to describe more than one resource.
   */
  profile?: Reference[] | undefined;
  /**
   * The name of the individual or organization that published the capability statement.
   * Usually an organization, but may be an individual. The publisher (or steward) of the capability statement is the organization or individual primarily responsible for the maintenance and upkeep of the capability statement. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the capability statement. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this capability statement is needed and why it has been designed as it has.
   * This element does not describe the usage of the capability statement Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this capability statement.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * A definition of the restful capabilities of the solution, if any.
   * Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
   */
  rest?: CapabilityStatementRest[] | undefined;
  /**
   * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
   */
  software?: CapabilityStatementSoftware | undefined;
  /**
   * The status of this capability statement. Enables tracking the life-cycle of the content.
   * Allows filtering of capability statements that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired capability statement without due consideration. This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the capability statement.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this capability statement when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this capability statement is (or will be) published. The URL SHOULD include the major version of the capability statement. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate capability statement instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the capability statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the capability statement author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different capability statement instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the capability statement with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * In-line definition of activity
 */
export interface CarePlanActivityDetail extends BackboneElement {
  /**
   * High-level categorization of the type of activity in a care plan.
   */
  category?: CodeableConcept | undefined;
  /**
   * Detailed description of the type of planned activity; e.g. What lab test, what procedure, what kind of encounter.
   * Tends to be less relevant for activities involving particular products.  Codes should not convey negation - use "prohibited" instead.
   */
  code?: CodeableConcept | undefined;
  /**
   * Identifies the quantity expected to be consumed in a given day.
   */
  dailyAmount?: Quantity | undefined;
  /**
   * Identifies the protocol, questionnaire, guideline or other specification the planned activity should be conducted in accordance with.
   */
  definition?: Reference | undefined;
  /**
   * This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Internal reference that identifies the goals that this activity is intended to contribute towards meeting.
   */
  goal?: Reference[] | undefined;
  /**
   * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
   * May reference a specific clinical location or may identify a type of location.
   */
  location?: Reference | undefined;
  /**
   * Identifies who's expected to be involved in the activity.
   * A performer MAY also be a participant in the care plan.
   */
  performer?: Reference[] | undefined;
  /**
   * Identifies the food, drug or other product to be consumed or supplied in the activity.
   */
  productCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the food, drug or other product to be consumed or supplied in the activity.
   */
  productReference?: Reference | undefined;
  /**
   * If true, indicates that the described activity is one that must NOT be engaged in when following the plan.  If false, indicates that the described activity is one that should be engaged in when following the plan.
   * This element is labeled as a modifier because it marks an activity as an activity that is not to be performed.
   */
  prohibited?: boolean | undefined;
  _prohibited?: Element | undefined;
  /**
   * Identifies the quantity expected to be supplied, administered or consumed by the subject.
   */
  quantity?: Quantity | undefined;
  /**
   * Provides the rationale that drove the inclusion of this particular activity as part of the plan or the reason why the activity was prohibited.
   * This could be a diagnosis code.  If a full condition record exists or additional detail is needed, use reasonCondition instead.
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * Provides the health condition(s) that drove the inclusion of this particular activity as part of the plan.
   * Conditions can be identified at the activity level that are not identified as reasons for the overall plan.
   */
  reasonReference?: Reference[] | undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  scheduledPeriod?: Period | undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  scheduledString?: string | undefined;
  _scheduledString?: Element | undefined;
  /**
   * The period, timing or frequency upon which the described activity is to occur.
   */
  scheduledTiming?: Timing | undefined;
  /**
   * Identifies what progress is being made for the specific activity.
   * Some aspects of status can be inferred based on the resources linked in actionTaken.  Note that "status" is only as current as the plan was most recently updated.  
   * The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the activity.
   */
  status: ('not-started'|'scheduled'|'in-progress'|'on-hold'|'completed'|'cancelled'|'unknown');
  _status?: Element | undefined;
  /**
   * Provides reason why the activity isn't yet started, is on hold, was cancelled, etc.
   * Will generally not be present if status is "complete".  Be sure to prompt to update this (or at least remove the existing value) if the status is changed.
   */
  statusReason?: string | undefined;
  _statusReason?: Element | undefined;
}
/**
 * Action to occur as part of plan
 */
export interface CarePlanActivity extends BackboneElement {
  /**
   * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
   */
  detail?: CarePlanActivityDetail | undefined;
  /**
   * Identifies the outcome at the point when the status of the activity is assessed.  For example, the outcome of an education activity could be patient understands (or not).
   * Note that this should not duplicate the activity status (e.g. completed or in progress).
   */
  outcomeCodeableConcept?: CodeableConcept[] | undefined;
  /**
   * Details of the outcome or action resulting from the activity.  The reference to an "event" resource, such as Procedure or Encounter or Observation, is the result/outcome of the activity itself.  The activity can be conveyed using CarePlan.activity.detail OR using the CarePlan.activity.reference (a reference to a “request” resource).
   * The activity outcome is independent of the outcome of the related goal(s).  For example, if the goal is to achieve a target body weight of 150 lb and an activity is defined to diet, then the activity outcome could be calories consumed whereas the goal outcome is an observation for the actual body weight measured.
   */
  outcomeReference?: Reference[] | undefined;
  /**
   * Notes about the adherence/status/progress of the activity.
   * This element should NOT be used to describe the activity to be performed - that occurs either within the resource pointed to by activity.detail.reference or in activity.detail.description.
   */
  progress?: Annotation[] | undefined;
  /**
   * The details of the proposed activity represented in a specific resource.
   * Standard extension exists ([goal-pertainstogoal](extension-goal-pertainstogoal.html)) that allows goals to be referenced from any of the referenced resources in CarePlan.activity.reference.  
   * The goal should be visible when the resource referenced by CarePlan.activity.reference is viewed indepedently from the CarePlan.  Requests that are pointed to by a CarePlan using this element should *not* point to this CarePlan using the "basedOn" element.  i.e. Requests that are part of a CarePlan are not "based on" the CarePlan.
   */
  reference?: Reference | undefined;
}
export interface CarePlan extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CarePlan';
  /**
   * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
   */
  activity?: CarePlanActivity[] | undefined;
  /**
   * Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
   */
  addresses?: Reference[] | undefined;
  /**
   * Identifies the individual(s) or ogranization who is responsible for the content of the care plan.
   * Collaborative care plans may have multiple authors.
   */
  author?: Reference[] | undefined;
  /**
   * A care plan that is fulfilled in whole or in part by this care plan.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
   */
  careTeam?: Reference[] | undefined;
  /**
   * Identifies what "kind" of plan this is to support differentiation between multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc.
   * There may be multiple axis of categorization and one plan may serve multiple purposes.  In some cases, this may be redundant with references to CarePlan.concern.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Identifies the original context in which this particular CarePlan was created.
   * Activities conducted as a result of the care plan may well occur as part of other encounters/episodes.
   */
  context?: Reference | undefined;
  /**
   * Identifies the protocol, questionnaire, guideline or other specification the care plan should be conducted in accordance with.
   */
  definition?: Reference[] | undefined;
  /**
   * A description of the scope and nature of the plan.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Describes the intended objective(s) of carrying out the care plan.
   * Goal can be achieving a particular change or merely maintaining a current state or even slowing a decline.
   */
  goal?: Reference[] | undefined;
  /**
   * This records identifiers associated with this care plan that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Indicates the level of authority/intentionality associated with the care plan and where the care plan fits into the workflow chain.
   * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
   */
  intent: ('proposal'|'plan'|'order'|'option');
  _intent?: Element | undefined;
  /**
   * General notes about the care plan not covered elsewhere.
   */
  note?: Annotation[] | undefined;
  /**
   * A larger care plan of which this particular care plan is a component or step.
   * Each care plan is an independent request, such that having a care plan be part of another care plan can cause issues with cascading statuses.  As such, this element is still being discussed.
   */
  partOf?: Reference[] | undefined;
  /**
   * Indicates when the plan did (or is intended to) come into effect and end.
   * Any activities scheduled as part of the plan should be constrained to the specified period regardless of whether the activities are planned within a single encounter/episode or across multiple encounters/episodes (e.g. the longitudinal management of a chronic condition).
   */
  period?: Period | undefined;
  /**
   * Completed or terminated care plan whose function is taken by this new care plan.
   * The replacement could be because the initial care plan was immediately rejected (due to an issue) or because the previous care plan was completed, but the need for the action described by the care plan remains ongoing.
   */
  replaces?: Reference[] | undefined;
  /**
   * Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
   * The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the care plan.
   * This element is labeled as a modifier because the status contains the code entered-in-error] that marks the plan as not currently valid.
   */
  status: ('draft'|'active'|'suspended'|'completed'|'entered-in-error'|'cancelled'|'unknown');
  _status?: Element | undefined;
  /**
   * Identifies the patient or group whose intended care is described by the plan.
   */
  subject: Reference;
  /**
   * Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include co-morbidities, recent procedures, limitations, recent assessments, etc.
   * Use "concern" to identify specific conditions addressed by the care plan.
   */
  supportingInfo?: Reference[] | undefined;
  /**
   * Human-friendly name for the CarePlan.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * Members of the team
 */
export interface CareTeamParticipant extends BackboneElement {
  /**
   * The specific person or organization who is participating/expected to participate in the care team.
   * Patient only needs to be listed if they have a role other than "subject of care".
   * Member is optional because some participants may be known only by their role, particularly in draft plans.
   */
  member?: Reference | undefined;
  /**
   * The organization of the practitioner.
   */
  onBehalfOf?: Reference | undefined;
  /**
   * Indicates when the specific member or organization did (or is intended to) come into effect and end.
   */
  period?: Period | undefined;
  /**
   * Indicates specific responsibility of an individual within the care team, such as "Primary care physician", "Trained social worker counselor", "Caregiver", etc.
   * Roles may sometimes be inferred by type of Practitioner.  These are relationships that hold only within the context of the care team.  General relationships should be handled as properties of the Patient resource directly.
   */
  role?: CodeableConcept | undefined;
}
export interface CareTeam extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CareTeam';
  /**
   * Identifies what kind of team.  This is to support differentiation between multiple co-existing teams, such as care plan team, episode of care team, longitudinal care team.
   * There may be multiple axis of categorization and one team may serve multiple purposes.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The encounter or episode of care that establishes the context for this care team.
   */
  context?: Reference | undefined;
  /**
   * This records identifiers associated with this care team that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization responsible for the care team.
   */
  managingOrganization?: Reference[] | undefined;
  /**
   * A label for human use intended to distinguish like teams.  E.g. the "red" vs. "green" trauma teams.
   * The meaning/purpose of the team is conveyed in CareTeam.category.  This element may also convey semantics of the team (e.g. "Red trauma team"), but its primary purpose is to distinguish between identical teams in a human-friendly way.  ("Team 18735" isn't as friendly . ).
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Comments made about the CareTeam.
   */
  note?: Annotation[] | undefined;
  /**
   * Identifies all people and organizations who are expected to be involved in the care team.
   */
  participant?: CareTeamParticipant[] | undefined;
  /**
   * Indicates when the team did (or is intended to) come into effect and end.
   */
  period?: Period | undefined;
  /**
   * Describes why the care team exists.
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * Condition(s) that this care team addresses.
   */
  reasonReference?: Reference[] | undefined;
  /**
   * Indicates the current state of the care team.
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the care team as not currently valid.
   */
  status?: ('proposed'|'active'|'suspended'|'inactive'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * Identifies the patient or group whose intended care is handled by the team.
   */
  subject?: Reference | undefined;
}
/**
 * Who performed charged service
 */
export interface ChargeItemParticipant extends BackboneElement {
  /**
   * The device, practitioner, etc. who performed or participated in the service.
   */
  actor: Reference;
  /**
   * Describes the type of performance or participation(e.g. primary surgeon, anaesthesiologiest, etc.).
   */
  role?: CodeableConcept | undefined;
}
export interface ChargeItem extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ChargeItem';
  /**
   * Account into which this ChargeItems belongs.
   * Systems posting the ChargeItems may not always be able to determine, which accounts the Items need to be places into. It is up to the potprocessing Financial System to apply internal rules to decide based on the Encounter/EpisodeOfCare/Patient/Coverage context and the type of ChargeItem, which Account is appropriate.
   */
  account?: Reference[] | undefined;
  /**
   * The anatomical location where the related service has been applied.
   * Only used if not implicit in code found in Condition.code. If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [body-site-instance](extension-body-site-instance.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
   */
  bodysite?: CodeableConcept[] | undefined;
  /**
   * A code that identifies the charge, like a billing code.
   */
  code: CodeableConcept;
  /**
   * The encounter or episode of care that establishes the context for this event.
   */
  context?: Reference | undefined;
  /**
   * References the source of pricing information, rules of application for the code this ChargeItem uses.
   * Target Resource is yet to be defined as a container that holds information about list prices and rules applicable to the charge item code. Once defined, change type back to Reference(Definition Type).
   */
  definition?: string[] | undefined;
  _definition?: Element[] | undefined;
  /**
   * Date the charge item was entered.
   * The actual date when the service associated with the charge has been rendered is captured in occurrence[x].
   */
  enteredDate?: string | undefined;
  _enteredDate?: Element | undefined;
  /**
   * The device, practitioner, etc. who entered the charge item.
   * The enterer is also te person considered responsible for factor/priceOverrides if applicable.
   */
  enterer?: Reference | undefined;
  /**
   * Factor overriding the factor determined by the rules associated with the code.
   * There is no reason to carry the factor in the instance of a ChargeItem unless special circumstances require a manual override. The factors are usually defined by a set of rules in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overriden.
   */
  factorOverride?: number | undefined;
  /**
   * Identifiers assigned to this event performer or other systems.
   */
  identifier?: Identifier | undefined;
  /**
   * Comments made about the event by the performer, subject or other participants.
   */
  note?: Annotation[] | undefined;
  /**
   * Date/time(s) or duration when the charged service was applied.
   * The list of types may be constrained as appropriate for the type of charge item.
   */
  occurrenceString?: string | undefined;
  _occurrenceString?: Element | undefined;
  /**
   * Date/time(s) or duration when the charged service was applied.
   * The list of types may be constrained as appropriate for the type of charge item.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * Date/time(s) or duration when the charged service was applied.
   * The list of types may be constrained as appropriate for the type of charge item.
   */
  occurrenceTiming?: Timing | undefined;
  /**
   * If the list price or the rule based factor associated with the code is overridden, this attribute can capture a text to indicate the  reason for this action.
   * Derived Profiles may chose to add invariants requiring this field to be populated if either priceOverride or factorOverride have been filled.
   */
  overrideReason?: string | undefined;
  _overrideReason?: Element | undefined;
  /**
   * Indicates who or what performed or participated in the charged service.
   */
  participant?: ChargeItemParticipant[] | undefined;
  /**
   * ChargeItems can be grouped to larger ChargeItems covering the whole set.
   */
  partOf?: Reference[] | undefined;
  /**
   * The organization requesting the service.
   * Practitioners and Devices can be associated with multiple organizations. It has to be made clear, on behalf of which Organization the services have been rendered.
   */
  performingOrganization?: Reference | undefined;
  /**
   * Total price of the charge overriding the list price associated with the code.
   * There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overriden.
   */
  priceOverride?: Money | undefined;
  /**
   * Quantity of which the charge item has been serviced.
   * In many cases this may just be a value, if the underlying units are implicit in the definition of the charge item code.
   */
  quantity?: Quantity | undefined;
  /**
   * Describes why the event occurred in coded or textual form.
   * If the application of the charge item requires a reason to be given, it can be captured here. Textual reasons can be captured using reasonCode.text.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * The organization performing the service.
   * The rendered Service may not be associated with a Request. It has to be made clear, ob which Organization's Request, the services have been rendered. (In many cases, this may just be the Department associated with the Encounter.location).
   */
  requestingOrganization?: Reference | undefined;
  /**
   * Indicated the rendered service that caused this charge.
   */
  service?: Reference[] | undefined;
  /**
   * The current state of the ChargeItem.
   * Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the charge item as not currently valid.
   */
  status: ('planned'|'billable'|'not-billable'|'aborted'|'billed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The individual or set of individuals the action is being or was performed on.
   */
  subject: Reference;
  /**
   * Further information supporting the this charge.
   */
  supportingInformation?: Reference[] | undefined;
}
/**
 * Details about an accident
 */
export interface ClaimAccident extends BackboneElement {
  /**
   * Date of an accident which these services are addressing.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * Accident Place.
   */
  locationAddress?: Address | undefined;
  /**
   * Accident Place.
   */
  locationReference?: Reference | undefined;
  /**
   * Type of accident: work, auto, etc.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Members of the care team
 */
export interface ClaimCareTeam extends BackboneElement {
  /**
   * Member of the team who provided the overall service.
   */
  provider: Reference;
  /**
   * The qualification which is applicable for this service.
   */
  qualification?: CodeableConcept | undefined;
  /**
   * The party who is billing and responsible for the claimed good or service rendered to the patient.
   */
  responsible?: boolean | undefined;
  _responsible?: Element | undefined;
  /**
   * The lead, assisting or supervising practitioner and their discipline if a multidisiplinary team.
   */
  role?: CodeableConcept | undefined;
  /**
   * Sequence of the careTeam which serves to order and provide a link.
   */
  sequence: number;
}
/**
 * List of Diagnosis
 */
export interface ClaimDiagnosis extends BackboneElement {
  /**
   * The diagnosis.
   */
  diagnosisCodeableConcept?: CodeableConcept | undefined;
  /**
   * The diagnosis.
   */
  diagnosisReference?: Reference | undefined;
  /**
   * The package billing code, for example DRG, based on the assigned grouping code system.
   */
  packageCode?: CodeableConcept | undefined;
  /**
   * Sequence of diagnosis which serves to provide a link.
   */
  sequence: number;
  /**
   * The type of the Diagnosis, for example: admitting, primary, secondary, discharge.
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Exceptions, special considerations, the condition, situation, prior or concurrent issues
 */
export interface ClaimInformation extends BackboneElement {
  /**
   * The general class of the information supplied: information; exception; accident, employment; onset, etc.
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  category: CodeableConcept;
  /**
   * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought which may influence the adjudication.
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  code?: CodeableConcept | undefined;
  /**
   * For example, provides the reason for: the additional stay, or missing tooth or any other situation where a reason code is required in addition to the content.
   */
  reason?: CodeableConcept | undefined;
  /**
   * Sequence of the information element which serves to provide a link.
   */
  sequence: number;
  /**
   * The date when or period to which this information refers.
   */
  timingString?: string | undefined;
  _timingString?: Element | undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingPeriod?: Period | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   */
  valueReference?: Reference | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
}
/**
 * Insurance or medical plan
 */
export interface ClaimInsurance extends BackboneElement {
  /**
   * The contract number of a business agreement which describes the terms and conditions.
   */
  businessArrangement?: string | undefined;
  _businessArrangement?: Element | undefined;
  /**
   * The Coverages adjudication details.
   */
  claimResponse?: Reference | undefined;
  /**
   * Reference to the program or plan identification, underwriter or payor.
   */
  coverage: Reference;
  /**
   * A flag to indicate that this Coverage is the focus for adjudication. The Coverage against which the claim is to be adjudicated.
   */
  focal: boolean;
  _focal?: Element | undefined;
  /**
   * A list of references from the Insurer to which these services pertain.
   */
  preAuthRef?: string[] | undefined;
  _preAuthRef?: Element[] | undefined;
  /**
   * Sequence of coverage which serves to provide a link and convey coordination of benefit order.
   */
  sequence: number;
}
/**
 * Additional items
 */
export interface ClaimItemDetailSubDetail extends BackboneElement {
  /**
   * Health Care Service Type Codes  to identify the classification of service or benefits.
   */
  category?: CodeableConcept | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of reveneu or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * A service line number.
   */
  sequence: number;
  /**
   * A code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI).
   */
  service?: CodeableConcept | undefined;
  /**
   * List of Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
  /**
   * The fee for an addittional service or product or charge.
   */
  unitPrice?: Money | undefined;
}
/**
 * Additional items
 */
export interface ClaimItemDetail extends BackboneElement {
  /**
   * Health Care Service Type Codes  to identify the classification of service or benefits.
   */
  category?: CodeableConcept | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of reveneu or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * A service line number.
   */
  sequence: number;
  /**
   * If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.
   */
  service?: CodeableConcept | undefined;
  /**
   * Third tier of goods and services.
   */
  subDetail?: ClaimItemDetailSubDetail[] | undefined;
  /**
   * List of Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
  /**
   * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Goods and Services
 */
export interface ClaimItem extends BackboneElement {
  /**
   * Physical service site on the patient (limb, tooth, etc).
   */
  bodySite?: CodeableConcept | undefined;
  /**
   * CareTeam applicable for this service or product line.
   */
  careTeamLinkId?: number[] | undefined;
  /**
   * Health Care Service Type Codes  to identify the classification of service or benefits.
   */
  category?: CodeableConcept | undefined;
  /**
   * Second tier of goods and services.
   */
  detail?: ClaimItemDetail[] | undefined;
  /**
   * Diagnosis applicable for this service or product line.
   */
  diagnosisLinkId?: number[] | undefined;
  /**
   * A billed item may include goods or services provided in multiple encounters.
   */
  encounter?: Reference[] | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * Exceptions, special conditions and supporting information pplicable for this service or product line.
   */
  informationLinkId?: number[] | undefined;
  /**
   * Where the service was provided.
   */
  locationAddress?: Address | undefined;
  /**
   * Where the service was provided.
   */
  locationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Where the service was provided.
   */
  locationReference?: Reference | undefined;
  /**
   * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * Procedures applicable for this service or product line.
   */
  procedureLinkId?: number[] | undefined;
  /**
   * For programs which require reason codes for the inclusion or covering of this billed item under the program or sub-program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of reveneu or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * A service line number.
   */
  sequence: number;
  /**
   * If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,RXNorm,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.
   */
  service?: CodeableConcept | undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  servicedString?: string | undefined;
  _servicedString?: Element | undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  servicedPeriod?: Period | undefined;
  /**
   * A region or surface of the site, eg. limb region or tooth surface(s).
   */
  subSite?: CodeableConcept[] | undefined;
  /**
   * List of Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
  /**
   * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Party to be paid any benefits payable
 */
export interface ClaimPayee extends BackboneElement {
  /**
   * Party to be reimbursed: Subscriber, provider, other.
   */
  party?: Reference | undefined;
  /**
   * organization | patient | practitioner | relatedperson.
   */
  resourceType?: Coding | undefined;
  /**
   * Type of Party to be reimbursed: Subscriber, provider, other.
   */
  type: CodeableConcept;
}
/**
 * Procedures performed
 */
export interface ClaimProcedure extends BackboneElement {
  /**
   * Date and optionally time the procedure was performed .
   * SB DateTime??
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The procedure code.
   */
  procedureCodeableConcept?: CodeableConcept | undefined;
  /**
   * The procedure code.
   */
  procedureReference?: Reference | undefined;
  /**
   * Sequence of procedures which serves to order and provide a link.
   */
  sequence: number;
}
/**
 * Related Claims which may be revelant to processing this claimn
 */
export interface ClaimRelated extends BackboneElement {
  /**
   * Other claims which are related to this claim such as prior claim versions or for related services.
   * Do we need a relationship code?
   */
  claim?: Reference | undefined;
  /**
   * An alternate organizational reference to the case or file to which this particular claim pertains - eg Property/Casualy insurer claim # or Workers Compensation case # .
   */
  reference?: Identifier | undefined;
  /**
   * For example prior or umbrella.
   */
  relationship?: CodeableConcept | undefined;
}
export interface Claim extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Claim';
  /**
   * An accident which resulted in the need for healthcare services.
   */
  accident?: ClaimAccident | undefined;
  /**
   * The billable period for which charges are being submitted.
   */
  billablePeriod?: Period | undefined;
  /**
   * The members of the team who provided the overall service as well as their role and whether responsible and qualifications.
   */
  careTeam?: ClaimCareTeam[] | undefined;
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * List of patient diagnosis for which care is sought.
   */
  diagnosis?: ClaimDiagnosis[] | undefined;
  /**
   * The start and optional end dates of when the patient was precluded from working due to the treatable condition(s).
   */
  employmentImpacted?: Period | undefined;
  /**
   * Person who created the invoice/claim/pre-determination or pre-authorization.
   */
  enterer?: Reference | undefined;
  /**
   * Facility where the services were provided.
   */
  facility?: Reference | undefined;
  /**
   * In the case of a Pre-Determination/Pre-Authorization the provider may request that funds in the amount of the expected Benefit be reserved ('Patient' or 'Provider') to pay for the Benefits determined on the subsequent claim(s). 'None' explicitly indicates no funds reserving is requested.
   */
  fundsReserve?: CodeableConcept | undefined;
  /**
   * The start and optional end dates of when the patient was confined to a treatment center.
   */
  hospitalization?: Period | undefined;
  /**
   * The business identifier for the instance: claim number, pre-determination or pre-authorization number.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required.
   */
  information?: ClaimInformation[] | undefined;
  /**
   * Financial instrument by which payment information for health care.
   */
  insurance?: ClaimInsurance[] | undefined;
  /**
   * The Insurer who is target of the request.
   */
  insurer?: Reference | undefined;
  /**
   * First tier of goods and services.
   */
  item?: ClaimItem[] | undefined;
  /**
   * The organization which is responsible for the bill, claim pre-determination, pre-authorization.
   */
  organization?: Reference | undefined;
  /**
   * Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products. For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new precription for an alternate medication which has the same theraputic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   * as above.
   */
  originalPrescription?: Reference | undefined;
  /**
   * Patient Resource.
   */
  patient?: Reference | undefined;
  /**
   * The party to be reimbursed for the services.
   */
  payee?: ClaimPayee | undefined;
  /**
   * Prescription to support the dispensing of Pharmacy or Vision products.
   * Should we create a group to hold multiple prescriptions and add a sequence number and on the line items a link to the sequence.
   */
  prescription?: Reference | undefined;
  /**
   * Immediate (STAT), best effort (NORMAL), deferred (DEFER).
   */
  priority?: CodeableConcept | undefined;
  /**
   * Ordered list of patient procedures performed to support the adjudication.
   */
  procedure?: ClaimProcedure[] | undefined;
  /**
   * The provider which is responsible for the bill, claim pre-determination, pre-authorization.
   */
  provider?: Reference | undefined;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  referral?: Reference | undefined;
  /**
   * Other claims which are related to this claim such as prior claim versions or for related services.
   */
  related?: ClaimRelated[] | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the claim as not currently valid.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * A finer grained suite of claim subtype codes which may convey Inpatient vs Outpatient and/or a specialty service. In the US the BillType.
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  subType?: CodeableConcept[] | undefined;
  /**
   * The total value of the claim.
   */
  total?: Money | undefined;
  /**
   * The category of claim, eg, oral, pharmacy, vision, insitutional, professional.
   * Affects which fields and value sets are used.
   */
  type?: CodeableConcept | undefined;
  /**
   * Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory (Pre-determination).
   */
  use?: ('complete'|'proposed'|'exploratory'|'other') | undefined;
  _use?: Element | undefined;
}
/**
 * Added items details
 */
export interface ClaimResponseAddItemDetail extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseItemAdjudication[] | undefined;
  /**
   * Health Care Service Type Codes  to identify the classification of service or benefits.
   */
  category?: CodeableConcept | undefined;
  /**
   * The fee charged for the professional service or product..
   */
  fee?: Money | undefined;
  /**
   * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * A list of note references to the notes provided below.
   */
  noteNumber?: number[] | undefined;
  /**
   * The type of reveneu or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * A code to indicate the Professional Service or Product supplied.
   */
  service?: CodeableConcept | undefined;
}
/**
 * Insurer added line items
 */
export interface ClaimResponseAddItem extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseItemAdjudication[] | undefined;
  /**
   * Health Care Service Type Codes  to identify the classification of service or benefits.
   */
  category?: CodeableConcept | undefined;
  /**
   * The second tier service adjudications for payor added services.
   */
  detail?: ClaimResponseAddItemDetail[] | undefined;
  /**
   * The fee charged for the professional service or product..
   */
  fee?: Money | undefined;
  /**
   * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * A list of note references to the notes provided below.
   */
  noteNumber?: number[] | undefined;
  /**
   * The type of reveneu or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * List of input service items which this service line is intended to replace.
   */
  sequenceLinkId?: number[] | undefined;
  /**
   * A code to indicate the Professional Service or Product supplied.
   */
  service?: CodeableConcept | undefined;
}
/**
 * Processing errors
 */
export interface ClaimResponseError extends BackboneElement {
  /**
   * An error code,from a specified code system, which details why the claim could not be adjudicated.
   */
  code: CodeableConcept;
  /**
   * The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
   */
  detailSequenceLinkId?: number | undefined;
  /**
   * The sequence number of the line item submitted which contains the error. This value is omitted when the error is elsewhere.
   */
  sequenceLinkId?: number | undefined;
  /**
   * The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.
   */
  subdetailSequenceLinkId?: number | undefined;
}
/**
 * Insurance or medical plan
 */
export interface ClaimResponseInsurance extends BackboneElement {
  /**
   * The contract number of a business agreement which describes the terms and conditions.
   */
  businessArrangement?: string | undefined;
  _businessArrangement?: Element | undefined;
  /**
   * The Coverages adjudication details.
   */
  claimResponse?: Reference | undefined;
  /**
   * Reference to the program or plan identification, underwriter or payor.
   */
  coverage: Reference;
  /**
   * The instance number of the Coverage which is the focus for adjudication. The Coverage against which the claim is to be adjudicated.
   */
  focal: boolean;
  _focal?: Element | undefined;
  /**
   * A list of references from the Insurer to which these services pertain.
   */
  preAuthRef?: string[] | undefined;
  _preAuthRef?: Element[] | undefined;
  /**
   * A service line item.
   */
  sequence: number;
}
/**
 * Adjudication details
 */
export interface ClaimResponseItemAdjudication extends BackboneElement {
  /**
   * Monetary amount associated with the code.
   */
  amount?: Money | undefined;
  /**
   * Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
   */
  category: CodeableConcept;
  /**
   * Adjudication reason such as limit reached.
   */
  reason?: CodeableConcept | undefined;
  /**
   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
   */
  value?: number | undefined;
}
/**
 * Subdetail line items
 */
export interface ClaimResponseItemDetailSubDetail extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseItemAdjudication[] | undefined;
  /**
   * A list of note references to the notes provided below.
   */
  noteNumber?: number[] | undefined;
  /**
   * A service line number.
   */
  sequenceLinkId: number;
}
/**
 * Detail line items
 */
export interface ClaimResponseItemDetail extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ClaimResponseItemAdjudication[] | undefined;
  /**
   * A list of note references to the notes provided below.
   */
  noteNumber?: number[] | undefined;
  /**
   * A service line number.
   */
  sequenceLinkId: number;
  /**
   * The third tier service adjudications for submitted services.
   */
  subDetail?: ClaimResponseItemDetailSubDetail[] | undefined;
}
/**
 * Line items
 */
export interface ClaimResponseItem extends BackboneElement {
  /**
   * The adjudication results.
   */
  adjudication?: ClaimResponseItemAdjudication[] | undefined;
  /**
   * The second tier service adjudications for submitted services.
   */
  detail?: ClaimResponseItemDetail[] | undefined;
  /**
   * A list of note references to the notes provided below.
   */
  noteNumber?: number[] | undefined;
  /**
   * A service line number.
   */
  sequenceLinkId: number;
}
/**
 * Payment details, if paid
 */
export interface ClaimResponsePayment extends BackboneElement {
  /**
   * Adjustment to the payment of this transaction which is not related to adjudication of this transaction.
   */
  adjustment?: Money | undefined;
  /**
   * Reason for the payment adjustment.
   */
  adjustmentReason?: CodeableConcept | undefined;
  /**
   * Payable less any payment adjustment.
   */
  amount?: Money | undefined;
  /**
   * Estimated payment data.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Payment identifier.
   */
  identifier?: Identifier | undefined;
  /**
   * Whether this represents partial or complete payment of the claim.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Processing notes
 */
export interface ClaimResponseProcessNote extends BackboneElement {
  /**
   * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
   */
  language?: CodeableConcept | undefined;
  /**
   * An integer associated with each note which may be referred to from each service line item.
   */
  number?: number | undefined;
  /**
   * The note text.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The note purpose: Print/Display.
   */
  type?: CodeableConcept | undefined;
}
export interface ClaimResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ClaimResponse';
  /**
   * The first tier service adjudications for payor added services.
   */
  addItem?: ClaimResponseAddItem[] | undefined;
  /**
   * Request for additional supporting or authorizing information, such as: documents, images or resources.
   */
  communicationRequest?: Reference[] | undefined;
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * Mutually exclusive with Services Provided (Item).
   */
  error?: ClaimResponseError[] | undefined;
  /**
   * The form to be used for printing the content.
   */
  form?: CodeableConcept | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Financial instrument by which payment information for health care.
   */
  insurance?: ClaimResponseInsurance[] | undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  insurer?: Reference | undefined;
  /**
   * The first tier service adjudications for submitted services.
   */
  item?: ClaimResponseItem[] | undefined;
  /**
   * Processing outcome errror, partial or complete processing.
   */
  outcome?: CodeableConcept | undefined;
  /**
   * Patient Resource.
   */
  patient?: Reference | undefined;
  /**
   * Party to be reimbursed: Subscriber, provider, other.
   */
  payeeType?: CodeableConcept | undefined;
  /**
   * Payment details for the claim if the claim has been paid.
   */
  payment?: ClaimResponsePayment | undefined;
  /**
   * Note text.
   */
  processNote?: ClaimResponseProcessNote[] | undefined;
  /**
   * Original request resource referrence.
   */
  request?: Reference | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference | undefined;
  /**
   * Status of funds reservation (For provider, for Patient, None).
   */
  reserved?: Coding | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains the code cancelled and entered-in-error that mark the response as not currently valid.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductible).
   */
  totalBenefit?: Money | undefined;
  /**
   * The total cost of the services reported.
   */
  totalCost?: Money | undefined;
  /**
   * The amount of deductible applied which was not allocated to any particular service line.
   */
  unallocDeductable?: Money | undefined;
}
/**
 * Possible or likely findings and diagnoses
 */
export interface ClinicalImpressionFinding extends BackboneElement {
  /**
   * Which investigations support finding or diagnosis.
   */
  basis?: string | undefined;
  _basis?: Element | undefined;
  /**
   * Specific text, code or reference for finding or diagnosis, which may include ruled-out or resolved conditions.
   */
  itemCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specific text, code or reference for finding or diagnosis, which may include ruled-out or resolved conditions.
   */
  itemReference?: Reference | undefined;
}
/**
 * One or more sets of investigations (signs, symptions, etc.)
 */
export interface ClinicalImpressionInvestigation extends BackboneElement {
  /**
   * A name/code for the group ("set") of investigations. Typically, this will be something like "signs", "symptoms", "clinical", "diagnostic", but the list is not constrained, and others such groups such as (exposure|family|travel|nutitirional) history may be used.
   */
  code: CodeableConcept;
  /**
   * A record of a specific investigation that was undertaken.
   * Most investigations are observations of one kind of or another but some other specific types of data collection resources can also be used.
   */
  item?: Reference[] | undefined;
}
export interface ClinicalImpression extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ClinicalImpression';
  /**
   * Action taken as part of assessment procedure.
   * Actions recommended as a result of the impression should not be captured using the 'action' element.
   */
  action?: Reference[] | undefined;
  /**
   * The clinician performing the assessment.
   */
  assessor?: Reference | undefined;
  /**
   * Categorizes the type of clinical assessment performed.
   * This is present as a place-holder only and may be removed based on feedback/work group opinion.
   */
  code?: CodeableConcept | undefined;
  /**
   * The encounter or episode of care this impression was created as part of.
   */
  context?: Reference | undefined;
  /**
   * Indicates when the documentation of the assessment was complete.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A summary of the context and/or cause of the assessment - why / where was it performed, and what patient events/status prompted it.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The point in time or period over which the subject was assessed.
   * This SHOULD be accurate to at least the minute, though some assessments only have a known date.
   */
  effectiveString?: string | undefined;
  _effectiveString?: Element | undefined;
  /**
   * The point in time or period over which the subject was assessed.
   * This SHOULD be accurate to at least the minute, though some assessments only have a known date.
   */
  effectivePeriod?: Period | undefined;
  /**
   * Specific findings or diagnoses that was considered likely or relevant to ongoing treatment.
   */
  finding?: ClinicalImpressionFinding[] | undefined;
  /**
   * A unique identifier assigned to the clinical impression that remains consistent regardless of what server the impression is stored on.
   */
  identifier?: Identifier[] | undefined;
  /**
   * One or more sets of investigations (signs, symptions, etc.). The actual grouping of investigations vary greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.
   */
  investigation?: ClinicalImpressionInvestigation[] | undefined;
  /**
   * Commentary about the impression, typically recorded after the impression itself was made, though supplemental notes by the original author could also appear.
   * Don't use this element for content that should more properly appear as one of the specific elements of the impression.
   */
  note?: Annotation[] | undefined;
  /**
   * A reference to the last assesment that was conducted bon this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes.
   * It is always likely that multiple previous assessments exist for a patient. The point of quoting a previous assessment is that this assessment is relative to it (see resolved).
   */
  previous?: Reference | undefined;
  /**
   * This a list of the relevant problems/conditions for a patient.
   * e.g. The patient is a pregnant, and cardiac congestive failure, ‎Adenocarcinoma, and is allergic to penicillin.
   */
  problem?: Reference[] | undefined;
  /**
   * Estimate of likely outcome.
   */
  prognosisCodeableConcept?: CodeableConcept[] | undefined;
  /**
   * RiskAssessment expressing likely outcome.
   */
  prognosisReference?: Reference[] | undefined;
  /**
   * Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.
   */
  protocol?: string[] | undefined;
  _protocol?: Element[] | undefined;
  /**
   * Identifies the workflow status of the assessment.
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the clinical impression as not currently valid.
   */
  status: ('draft'|'completed'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The patient or group of individuals assessed as part of this record.
   */
  subject: Reference;
  /**
   * A text summary of the investigations and the diagnosis.
   */
  summary?: string | undefined;
  _summary?: Element | undefined;
}
/**
 * Additional representations for the concept
 */
export interface CodeSystemConceptDesignation extends BackboneElement {
  /**
   * The language this designation is defined for.
   * In the absence of a language, the resource language applies.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * A code that details how this designation would be used.
   * If no use is provided, the designation can be assumed to be suitable for general display to a human user.
   */
  use?: Coding | undefined;
  /**
   * The text value for this designation.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Property value for the concept
 */
export interface CodeSystemConceptProperty extends BackboneElement {
  /**
   * A code that is a reference to CodeSystem.property.code.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * The value of this property.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * The value of this property.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * The value of this property.
   */
  valueCoding?: Coding | undefined;
  /**
   * The value of this property.
   */
  valueNumber?: number | undefined;
}
/**
 * Concepts in the code system
 * If this is empty, it means that the code system resource does not represent the content of the code system.
 */
export interface CodeSystemConcept extends BackboneElement {
  /**
   * A code - a text symbol - that uniquely identifies the concept within the code system.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
   */
  concept?: CodeSystemConcept[] | undefined;
  /**
   * The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
   */
  designation?: CodeSystemConceptDesignation[] | undefined;
  /**
   * A human readable string that is the recommended default way to present this concept to a user.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * A property value for this concept.
   */
  property?: CodeSystemConceptProperty[] | undefined;
}
/**
 * Filter that can be used in a value set
 */
export interface CodeSystemFilter extends BackboneElement {
  /**
   * The code that identifies this filter when it is used in the instance.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * A description of how or why the filter is used.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A list of operators that can be used with the filter.
   */
  operator: ('='|'is-a'|'descendent-of'|'is-not-a'|'regex'|'in'|'not-in'|'generalizes'|'exists')[];
  _operator?: Element[] | undefined;
  /**
   * A description of what the value for the filter should be.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Additional information supplied about each concept
 */
export interface CodeSystemProperty extends BackboneElement {
  /**
   * A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * A description of the property- why it is defined, and how its value might be used.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to anotherr defined concept).
   */
  type: ('code'|'Coding'|'string'|'integer'|'boolean'|'dateTime');
  _type?: Element | undefined;
  /**
   * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
   */
  uri?: string | undefined;
  _uri?: Element | undefined;
}
export interface CodeSystem extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CodeSystem';
  /**
   * If code comparison is case sensitive when codes within this system are compared to each other.
   * If this value is missing, then it is not specified whether a code system is case sensitive or not. When the rule is not known, Postel's law should be followed: produce codes with the correct case, and accept codes in any case. This element is primarily provided to support validation software.
   */
  caseSensitive?: boolean | undefined;
  _caseSensitive?: Element | undefined;
  /**
   * True If code system defines a post-composition grammar.
   * Note that the code system resource does not define what the compositional grammar is, only whether or not there is one.
   */
  compositional?: boolean | undefined;
  _compositional?: Element | undefined;
  /**
   * Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.
   * If this is empty, it means that the code system resource does not represent the content of the code system.
   */
  concept?: CodeSystemConcept[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * How much of the content of the code system - the concepts and codes it defines - are represented in this resource.
   */
  content: ('not-present'|'example'|'fragment'|'complete');
  _content?: Element | undefined;
  /**
   * A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system.
   * ... Sometimes, the copyright differs between the code system and the codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The total number of concepts defined by the code system. Where the code system has a compositional grammar, the count refers to the number of base (primitive) concepts.
   * The count of concepts defined in this resource cannot be more than this value, but may be less for several reasons - see the content value.
   */
  count?: number | undefined;
  /**
   * The date  (and optionally time) when the code system was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the code system changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the code system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the code system from a consumer's perspective.
   * This description can be used to capture details such as why the code system was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the code system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A boolean value to indicate that this code system is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of code system that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental code system in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A filter that can be used in a value set compose statement when selecting concepts using a filter.
   */
  filter?: CodeSystemFilter[] | undefined;
  /**
   * The meaning of the hierarchy of concepts.
   */
  hierarchyMeaning?: ('grouped-by'|'is-a'|'part-of'|'classified-with') | undefined;
  _hierarchyMeaning?: Element | undefined;
  /**
   * A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this code system outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier | undefined;
  /**
   * A legal or geographic region in which the code system is intended to be used.
   * It may be possible for the code system to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A natural language name identifying the code system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A property defines an additional slot through which additional information can be provided about a concept.
   */
  property?: CodeSystemProperty[] | undefined;
  /**
   * The name of the individual or organization that published the code system.
   * Usually an organization, but may be an individual. The publisher (or steward) of the code system is the organization or individual primarily responsible for the maintenance and upkeep of the code system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the code system. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this code system is needed and why it has been designed as it has.
   * This element does not describe the usage of the code system Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this code system.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The status of this code system. Enables tracking the life-cycle of the content.
   * Allows filtering of code systems that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired code system without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the code system.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this code system when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this code system is (or will be) published. The URL SHOULD include the major version of the code system. For more information see [Technical and Business Versions](resource.html#versions). This is used in [Coding]{datatypes.html#Coding}.system.
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate code system instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * Canonical URL of value set that contains the entire code system.
   * The definition of the value set SHALL include all codes from this code system, and it SHALL be immutable.
   */
  valueSet?: string | undefined;
  _valueSet?: Element | undefined;
  /**
   * The identifier that is used to identify this version of the code system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the code system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. This is used in [Coding]{datatypes.html#Coding}.version.
   * There may be different code system instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the code system with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * This flag is used to signify that the code system has not (or does not) maintain the definitions, and a version must be specified when referencing this code system.
   * Best practice is that code systems do not redefine concepts, or that if concepts are redefined, a new code system definition is created. But this is not always possible, so some code systems may be defined as 'versionNeeded'.
   */
  versionNeeded?: boolean | undefined;
  _versionNeeded?: Element | undefined;
}
/**
 * Message payload
 */
export interface CommunicationPayload extends BackboneElement {
  /**
   * A communicated content (or for multi-part communications, one portion of the communication).
   */
  contentAttachment?: Attachment | undefined;
  /**
   * A communicated content (or for multi-part communications, one portion of the communication).
   */
  contentReference?: Reference | undefined;
  /**
   * A communicated content (or for multi-part communications, one portion of the communication).
   */
  contentString?: string | undefined;
  _contentString?: Element | undefined;
}
export interface Communication extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Communication';
  /**
   * An order, proposal or plan fulfilled in whole or in part by this Communication.
   * This must point to some sort of a 'Request' resource, such as CarePlan, CommunicationRequest, ReferralRequest, MedicationRequest, etc.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The type of message conveyed such as alert, notification, reminder, instruction, etc.
   * There may be multiple axes of categorization and one communication may serve multiple purposes.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The encounter within which the communication was sent.
   */
  context?: Reference | undefined;
  /**
   * A protocol, guideline, or other definition that was adhered to in whole or in part by this communication event.
   */
  definition?: Reference[] | undefined;
  /**
   * Identifiers associated with this Communication that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * A channel that was used for this communication (e.g. email, fax).
   */
  medium?: CodeableConcept[] | undefined;
  /**
   * If true, indicates that the described communication event did not actually occur.
   * This element is labeled as a modifier because it marks the communication as a communication that did not occur.  The more attributes are populated, the more constrained the negated statement is.
   */
  notDone?: boolean | undefined;
  _notDone?: Element | undefined;
  /**
   * Describes why the communication event did not occur in coded and/or textual form.
   */
  notDoneReason?: CodeableConcept | undefined;
  /**
   * Additional notes or commentary about the communication by the sender, receiver or other interested parties.
   */
  note?: Annotation[] | undefined;
  /**
   * Part of this action.
   */
  partOf?: Reference[] | undefined;
  /**
   * Text, attachment(s), or resource(s) that was communicated to the recipient.
   */
  payload?: CommunicationPayload[] | undefined;
  /**
   * The reason or justification for the communication.
   * Textual reasons can be caprued using reasonCode.text.
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * Indicates another resource whose existence justifies this communication.
   */
  reasonReference?: Reference[] | undefined;
  /**
   * The time when this communication arrived at the destination.
   */
  received?: string | undefined;
  _received?: Element | undefined;
  /**
   * The entity (e.g. person, organization, clinical information system, or device) which was the target of the communication. If receipts need to be tracked by individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either a receipt(s) is not tracked (e.g. a mass mail-out) or is captured in aggregate (all emails confirmed received by a particular time).
   */
  recipient?: Reference[] | undefined;
  /**
   * The entity (e.g. person, organization, clinical information system, or device) which was the source of the communication.
   */
  sender?: Reference | undefined;
  /**
   * The time when this communication was sent.
   */
  sent?: string | undefined;
  _sent?: Element | undefined;
  /**
   * The status of the transmission.
   * This element is labeled as a modifier because the status contains the codes aborted and entered-in-error that mark the communication as not currently valid.
   */
  status: ('preparation'|'in-progress'|'suspended'|'aborted'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The patient or group that was the focus of this communication.
   */
  subject?: Reference | undefined;
  /**
   * The resources which were responsible for or related to producing this communication.
   */
  topic?: Reference[] | undefined;
}
/**
 * Message payload
 */
export interface CommunicationRequestPayload extends BackboneElement {
  /**
   * The communicated content (or for multi-part communications, one portion of the communication).
   */
  contentAttachment?: Attachment | undefined;
  /**
   * The communicated content (or for multi-part communications, one portion of the communication).
   */
  contentReference?: Reference | undefined;
  /**
   * The communicated content (or for multi-part communications, one portion of the communication).
   */
  contentString?: string | undefined;
  _contentString?: Element | undefined;
}
/**
 * Who/what is requesting service
 */
export interface CommunicationRequestRequester extends BackboneElement {
  /**
   * The device, practitioner, etc. who initiated the request.
   */
  agent: Reference;
  /**
   * The organization the device or practitioner was acting on behalf of.
   */
  onBehalfOf?: Reference | undefined;
}
export interface CommunicationRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CommunicationRequest';
  /**
   * For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * A plan or proposal that is fulfilled in whole or in part by this request.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The type of message to be sent such as alert, notification, reminder, instruction, etc.
   * There may be multiple axes of categorization and one communication request may serve multiple purposes.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The encounter or episode of care within which the communication request was created.
   */
  context?: Reference | undefined;
  /**
   * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form.
   * Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition.  Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
   */
  groupIdentifier?: Identifier | undefined;
  /**
   * A unique ID of this request for reference purposes. It must be provided if user wants it returned as part of any output, otherwise it will be autogenerated, if needed, by CDS system. Does not need to be the actual ID of the source system.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A channel that was used for this communication (e.g. email, fax).
   */
  medium?: CodeableConcept[] | undefined;
  /**
   * Comments made about the request by the requester, sender, recipient, subject or other participants.
   */
  note?: Annotation[] | undefined;
  /**
   * The time when this communication is to occur.
   */
  occurrenceString?: string | undefined;
  _occurrenceString?: Element | undefined;
  /**
   * The time when this communication is to occur.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * Text, attachment(s), or resource(s) to be communicated to the recipient.
   */
  payload?: CommunicationRequestPayload[] | undefined;
  /**
   * Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * Describes why the request is being made in coded or textual form.
   * Textual reasons can be caprued using reasonCode.text.
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * Indicates another resource whose existence justifies this request.
   */
  reasonReference?: Reference[] | undefined;
  /**
   * The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication.
   */
  recipient?: Reference[] | undefined;
  /**
   * Completed or terminated request(s) whose function is taken by this new request.
   * The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
   */
  replaces?: Reference[] | undefined;
  /**
   * The individual who initiated the request and has responsibility for its activation.
   */
  requester?: CommunicationRequestRequester | undefined;
  /**
   * The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
   */
  sender?: Reference | undefined;
  /**
   * The status of the proposal or order.
   * This element is labeled as a modifier because the status contains the codes cancelled and entered-in-error that mark the request as not currently valid.
   */
  status: ('draft'|'active'|'suspended'|'cancelled'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The patient or group that is the focus of this communication request.
   */
  subject?: Reference | undefined;
  /**
   * The resources which were related to producing this communication request.
   */
  topic?: Reference[] | undefined;
}
/**
 * How a resource is related to the compartment
 */
export interface CompartmentDefinitionResource extends BackboneElement {
  /**
   * The name of a resource supported by the server.
   */
  code: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription');
  _code?: Element | undefined;
  /**
   * Additional documentation about the resource and compartment.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * The name of a search parameter that represents the link to the compartment. More than one may be listed because a resource may be linked to a compartment in more than one way,.
   * If no search parameters are listed, then the resource is not linked to the compartment.
   */
  param?: string[] | undefined;
  _param?: Element[] | undefined;
}
/**
 * In FHIR, search is not performed directly on a resource (by XML or JSON path), but on a named parameter that maps into the resource content.
 */
export interface CompartmentDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'CompartmentDefinition';
  /**
   * Which compartment this definition describes.
   * Only the specification can define the compartments that can exist. Servers can choose to support them.
   */
  code: ('Patient'|'Encounter'|'RelatedPerson'|'Practitioner'|'Device');
  _code?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * The date  (and optionally time) when the compartment definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the compartment definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the compartment definition from a consumer's perspective.
   * This description can be used to capture details such as why the compartment definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the compartment definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A boolean value to indicate that this compartment definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of compartment definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental compartment definition in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A legal or geographic region in which the compartment definition is intended to be used.
   * It may be possible for the compartment definition to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A natural language name identifying the compartment definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly. This is often the same as the code for the parameter, but does not need to be.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the compartment definition.
   * Usually an organization, but may be an individual. The publisher (or steward) of the compartment definition is the organization or individual primarily responsible for the maintenance and upkeep of the compartment definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the compartment definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this compartment definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the compartment definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this compartment definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Information about how a resource is related to the compartment.
   */
  resource?: CompartmentDefinitionResource[] | undefined;
  /**
   * Whether the search syntax is supported,.
   * Servers may define and use compartments to manage logical access without implementing the compartment related syntax.
   */
  search: boolean;
  _search?: Element | undefined;
  /**
   * The status of this compartment definition. Enables tracking the life-cycle of the content.
   * Allows filtering of compartment definitions that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired compartment definition without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the compartment definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this compartment definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this compartment definition is (or will be) published. The URL SHOULD include the major version of the compartment definition. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate compartment definition instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
}
/**
 * Attests to accuracy of composition
 * Only list each attester once.
 */
export interface CompositionAttester extends BackboneElement {
  /**
   * The type of attestation the authenticator offers.
   * Use more than one code where a single attester has more than one mode (professional and legal are often paired).
   */
  mode: ('personal'|'professional'|'legal'|'official')[];
  _mode?: Element[] | undefined;
  /**
   * Who attested the composition in the specified way.
   */
  party?: Reference | undefined;
  /**
   * When the composition was attested by the party.
   */
  time?: string | undefined;
  _time?: Element | undefined;
}
/**
 * The clinical service(s) being documented
 * The event needs to be consistent with the type element, though can provide further information if desired.
 */
export interface CompositionEvent extends BackboneElement {
  /**
   * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
   * An event can further specialize the act inherent in the typeCode, such as where it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or more eventCodes are included, they SHALL NOT conflict with the values inherent in the classCode, practiceSettingCode or typeCode, as such a conflict would create an ambiguous situation. This short list of codes is provided to be used as key words for certain types of queries.
   */
  code?: CodeableConcept[] | undefined;
  /**
   * The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
   */
  detail?: Reference[] | undefined;
  /**
   * The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
   */
  period?: Period | undefined;
}
/**
 * Relationships to other compositions/documents
 * A document is a version specific composition.
 */
export interface CompositionRelatesTo extends BackboneElement {
  /**
   * The type of relationship that this composition has with anther composition or document.
   * If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
   */
  code: ('replaces'|'transforms'|'signs'|'appends');
  _code?: Element | undefined;
  /**
   * The target composition/document of this relationship.
   */
  targetIdentifier?: Identifier | undefined;
  /**
   * The target composition/document of this relationship.
   */
  targetReference?: Reference | undefined;
}
/**
 * Composition is broken into sections
 */
export interface CompositionSection extends BackboneElement {
  /**
   * A code identifying the kind of content contained within the section. This must be consistent with the section title.
   * The code identifies the section for an automated processor of the document. This is particularly relevant when using profiles to control the structure of the document.   If the section has content (instead of sub-sections), the section.code does not change the meaning or interpretation of the resource that is the content of the section in the comments for the section.code.
   */
  code?: CodeableConcept | undefined;
  /**
   * If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
   * The various reasons for an empty section make a significant interpretation to its interpretation. Note that this code is for use when the entire section content has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
   */
  emptyReason?: CodeableConcept | undefined;
  /**
   * A reference to the actual resource from which the narrative in the section is derived.
   * If there are no entries in the list, an emptyReason SHOULD be provided.
   */
  entry?: Reference[] | undefined;
  /**
   * How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
   * This element is labeled as a modifier because a change list must not be mis-understood as a complete list.
   */
  mode?: ('working'|'snapshot'|'changes') | undefined;
  _mode?: Element | undefined;
  /**
   * Specifies the order applied to the items in the section entries.
   * Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
   */
  orderedBy?: CodeableConcept | undefined;
  /**
   * A nested sub-section within this section.
   * Nested sections are primarily used to help human readers navigate to particular portions of the document.
   */
  section?: CompositionSection[] | undefined;
  /**
   * A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
   * Document profiles may define what content should be represented in the narrative to ensure clinical safety.
   */
  text?: Narrative | undefined;
  /**
   * The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
   * The title identifies the section for a human reader. The title must be consistent with the narrative of the resource that is the target of the section.content reference. Generally, sections SHOULD have titles, but in some documents, it is unnecessary or inappropriate. Typically, this is where a section has subsections that have their own adequately distinguishing title,  or documents that only have a single section. Most Implementation Guides will make section title to be a required element.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * While the focus of this specification is on patient-specific clinical statements, this resource can also apply to other healthcare-related statements such as study protocol designs, healthcare invoices and other activities that are not necessarily patient-specific or clinical.
 */
export interface Composition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Composition';
  /**
   * A participant who has attested to the accuracy of the composition/document.
   * Only list each attester once.
   */
  attester?: CompositionAttester[] | undefined;
  /**
   * Identifies who is responsible for the information in the composition, not necessarily who typed it in.
   */
  author: Reference[];
  /**
   * A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
   * This is a metadata field from [XDS/MHD](http://wiki.ihe.net/index.php?title=Mobile_access_to_Health_Documents_(MHD)).
   */
  class?: CodeableConcept | undefined;
  /**
   * The code specifying the level of confidentiality of the Composition.
   * The exact use of this element, and enforcement and issues related to highly sensitive documents are out of scope for the base specification, and delegated to implementation profiles (see security section).
   * This element is labeled as a modifier because highly confidential documents must not be treated as if they are not.
   */
  confidentiality?: ('U'|'L'|'M'|'N'|'R'|'V') | undefined;
  _confidentiality?: Element | undefined;
  /**
   * Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
   * This is useful when documents are derived from a composition - provides guidance for how to get the latest version of the document. This is optional because this is sometimes not known by the authoring system, and can be inferred by context. However, it is important that this information be known when working with a derived document, so providing a custodian is encouraged.
   */
  custodian?: Reference | undefined;
  /**
   * The composition editing time, when the composition was last logically changed by the author.
   * The Last Modified Date on the composition may be after the date of the document was attested without being changed.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * Describes the clinical encounter or type of care this documentation is associated with.
   */
  encounter?: Reference | undefined;
  /**
   * The clinical service, such as a colonoscopy or an appendectomy, being documented.
   * The event needs to be consistent with the type element, though can provide further information if desired.
   */
  event?: CompositionEvent[] | undefined;
  /**
   * Logical identifier for the composition, assigned when created. This identifier stays constant as the composition is changed over time.
   * See discussion in resource definition for how these relate.
   */
  identifier?: Identifier | undefined;
  /**
   * Relationships that this composition has with other compositions or documents that already exist.
   * A document is a version specific composition.
   */
  relatesTo?: CompositionRelatesTo[] | undefined;
  /**
   * The root of the sections that make up the composition.
   */
  section?: CompositionSection[] | undefined;
  /**
   * The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
   * If a composition is marked as withdrawn, the compositions/documents in the series, or data from the composition or document series, should never be displayed to a user without being clearly marked as untrustworthy. The flag "entered-in-error" is why this element is labeled as a modifier of other elements. 
   * Some reporting work flows require that the original narrative of a final document never be altered; instead, only new narrative can be added. The composition resource has no explicit status for explicitly noting whether this business rule is in effect. This would be handled by an extension if required.
   */
  status: ('preliminary'|'final'|'amended'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
   * For clinical documents, this is usually the patient.
   */
  subject: Reference;
  /**
   * Official human-readable label for the composition.
   * For many compositions, the title is the same as the text or a display name of Composition.type (e.g. a "consultation" or "progress note"). Note that CDA does not make title mandatory, but there are no known cases where it is useful for title to be omitted, so it is mandatory here. Feedback on this requirement is welcome during the trial use period.
   */
  title: string;
  _title?: Element | undefined;
  /**
   * Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
   * For Composition type, LOINC is ubiquitous and strongly endorsed by HL7. Most implementation guides will require a specific LOINC code, or use LOINC as an extensible binding.
   */
  type: CodeableConcept;
}
/**
 * Other elements required for this mapping (from context)
 */
export interface ConceptMapGroupElementTargetDependsOn extends BackboneElement {
  /**
   * Identity (code or path) or the element/item/ValueSet that the map depends on / refers to.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * The display for the code. The display is only provided to help editors when editing the concept map.
   * The display is ignored when processing the map.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * A reference to an element that holds a coded value that corresponds to a code system property. The idea is that the information model carries an element somwhere that is labeled to correspond with a code system property.
   */
  property: string;
  _property?: Element | undefined;
  /**
   * An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).
   */
  system?: string | undefined;
  _system?: Element | undefined;
}
/**
 * Concept in target system for element
 * Ideally there would only be one map, with equal or equivalent mapping. But multiple maps are allowed for several narrower options, or to assert that other concepts are unmatched.
 */
export interface ConceptMapGroupElementTarget extends BackboneElement {
  /**
   * Identity (code or path) or the element/item that the map refers to.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * A description of status/issues in mapping that conveys additional information not represented in  the structured data.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
   */
  dependsOn?: ConceptMapGroupElementTargetDependsOn[] | undefined;
  /**
   * The display for the code. The display is only provided to help editors when editing the concept map.
   * The display is ignored when processing the map.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source).
   * This element is labeled as a modifier because it may indicate that a target does not apply.
   */
  equivalence?: ('relatedto'|'equivalent'|'equal'|'wider'|'subsumes'|'narrower'|'specializes'|'inexact'|'unmatched'|'disjoint') | undefined;
  _equivalence?: Element | undefined;
  /**
   * A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.
   */
  product?: ConceptMapGroupElementTargetDependsOn[] | undefined;
}
/**
 * Mappings for a concept from the source set
 * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
 */
export interface ConceptMapGroupElement extends BackboneElement {
  /**
   * Identity (code or path) or the element/item being mapped.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * The display for the code. The display is only provided to help editors when editing the concept map.
   * The display is ignored when processing the map.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * A concept from the target value set that this concept maps to.
   * Ideally there would only be one map, with equal or equivalent mapping. But multiple maps are allowed for several narrower options, or to assert that other concepts are unmatched.
   */
  target?: ConceptMapGroupElementTarget[] | undefined;
}
/**
 * When no match in the mappings
 * This only applies if the source code is in the system defined for the group.
 */
export interface ConceptMapGroupUnmapped extends BackboneElement {
  /**
   * The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single fixed code.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * The display for the code. The display is only provided to help editors when editing the concept map.
   * The display is ignored when processing the map.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * Defines which action to take if there is no match in the group. One of 3 actions is possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).
   */
  mode: ('provided'|'fixed'|'other-map');
  _mode?: Element | undefined;
  /**
   * The canonical URL of the map to use if this map contains no mapping.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * Same source and target systems
 */
export interface ConceptMapGroup extends BackboneElement {
  /**
   * Mappings for an individual concept in the source to one or more concepts in the target.
   * Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
   */
  element: ConceptMapGroupElement[];
  /**
   * An absolute URI that identifies the Code System (if the source is a value set that crosses more than one code system).
   */
  source?: string | undefined;
  _source?: Element | undefined;
  /**
   * The specific version of the code system, as determined by the code system authority.
   * The specification of a particular code system version may be required for code systems which lack concept permanence.
   */
  sourceVersion?: string | undefined;
  _sourceVersion?: Element | undefined;
  /**
   * An absolute URI that identifies the code system of the target code (if the target is a value set that cross code systems).
   * Target may be omitted if all the targget element equivalence values are 'unmatched'.
   */
  target?: string | undefined;
  _target?: Element | undefined;
  /**
   * The specific version of the code system, as determined by the code system authority.
   * The specification of a particular code system version may be required for code systems which lack concept permanence.
   */
  targetVersion?: string | undefined;
  _targetVersion?: Element | undefined;
  /**
   * What to do when there is no match in the mappings in the group.
   * This only applies if the source code is in the system defined for the group.
   */
  unmapped?: ConceptMapGroupUnmapped | undefined;
}
export interface ConceptMap extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ConceptMap';
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the concept map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the concept map.
   * null Frequently, the copyright differs between the concept map, and codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the concept map was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the concept map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the concept map from a consumer's perspective.
   * The description is not intended to describe the semantics of the concept map. The description should capture its intended use, which is needed for ensuring integrity for its use in models across future changes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A boolean value to indicate that this concept map is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of concept map that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental concept map in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A group of mappings that all have the same source and target system.
   */
  group?: ConceptMapGroup[] | undefined;
  /**
   * A formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this concept map outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier | undefined;
  /**
   * A legal or geographic region in which the concept map is intended to be used.
   * It may be possible for the concept map to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A natural language name identifying the concept map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the concept map.
   * Usually an organization, but may be an individual. The publisher (or steward) of the concept map is the organization or individual primarily responsible for the maintenance and upkeep of the concept map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the concept map. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this concept map is needed and why it has been designed as it has.
   * This element does not describe the usage of the concept map Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this concept map.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The source value set that specifies the concepts that are being mapped.
   * Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.
   */
  sourceReference?: Reference | undefined;
  /**
   * The source value set that specifies the concepts that are being mapped.
   * Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.
   */
  sourceString?: string | undefined;
  _sourceString?: Element | undefined;
  /**
   * The status of this concept map. Enables tracking the life-cycle of the content.
   * Allows filtering of concept maps that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired concept map without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
   * Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.
   */
  targetReference?: Reference | undefined;
  /**
   * The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
   * Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.
   */
  targetString?: string | undefined;
  _targetString?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the concept map.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this concept map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this concept map is (or will be) published. The URL SHOULD include the major version of the concept map. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate concept map instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the concept map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different concept map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the concept map with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Supporting evidence
 * The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.
 */
export interface ConditionEvidence extends BackboneElement {
  /**
   * A manifestation or symptom that led to the recording of this condition.
   */
  code?: CodeableConcept[] | undefined;
  /**
   * Links to other relevant information, including pathology reports.
   */
  detail?: Reference[] | undefined;
}
/**
 * Stage/grade, usually assessed formally
 */
export interface ConditionStage extends BackboneElement {
  /**
   * Reference to a formal record of the evidence on which the staging assessment is based.
   */
  assessment?: Reference[] | undefined;
  /**
   * A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
   */
  summary?: CodeableConcept | undefined;
}
export interface Condition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Condition';
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
   */
  abatementAge?: Age | undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
   */
  abatementBoolean?: boolean | undefined;
  _abatementBoolean?: Element | undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
   */
  abatementString?: string | undefined;
  _abatementString?: Element | undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
   */
  abatementPeriod?: Period | undefined;
  /**
   * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
   * There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
   */
  abatementRange?: Range | undefined;
  /**
   * The date on which the existance of the Condition was first asserted or acknowledged.
   * The assertedDate represents the date when this particular Condition record was created in the EHR, not the date of the most recent update in terms of when severity, abatement, etc. were specified.  The date of the last record modification can be retrieved from the resource metadata.
   */
  assertedDate?: string | undefined;
  _assertedDate?: Element | undefined;
  /**
   * Individual who is making the condition statement.
   */
  asserter?: Reference | undefined;
  /**
   * The anatomical location where this condition manifests itself.
   * Only used if not implicit in code found in Condition.code. If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [body-site-instance](extension-body-site-instance.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
   */
  bodySite?: CodeableConcept[] | undefined;
  /**
   * A category assigned to the condition.
   * The categorization is often highly contextual and may appear poorly differentiated or not very useful in other contexts.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * The clinical status of the condition.
   * This element is labeled as a modifier because the status contains codes that mark the condition as not currently valid or of concern.
   */
  clinicalStatus?: ('active'|'recurrence'|'inactive'|'remission'|'resolved') | undefined;
  _clinicalStatus?: Element | undefined;
  /**
   * Identification of the condition, problem or diagnosis.
   */
  code?: CodeableConcept | undefined;
  /**
   * Encounter during which the condition was first asserted.
   * This record indicates the encounter this particular record is associated with.  In the case of a "new" diagnosis reflecting ongoing/revised information about the condition, this might be distinct from the first encounter in which the underlying condition was first "known".
   */
  context?: Reference | undefined;
  /**
   * Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.
   * The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.
   */
  evidence?: ConditionEvidence[] | undefined;
  /**
   * This records identifiers associated with this condition that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
   */
  note?: Annotation[] | undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   * Age is generally used when the patient reports an age at which the Condition began to occur.
   */
  onsetAge?: Age | undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   * Age is generally used when the patient reports an age at which the Condition began to occur.
   */
  onsetString?: string | undefined;
  _onsetString?: Element | undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   * Age is generally used when the patient reports an age at which the Condition began to occur.
   */
  onsetPeriod?: Period | undefined;
  /**
   * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
   * Age is generally used when the patient reports an age at which the Condition began to occur.
   */
  onsetRange?: Range | undefined;
  /**
   * A subjective assessment of the severity of the condition as evaluated by the clinician.
   * Coding of the severity with a terminology is preferred, where possible.
   */
  severity?: CodeableConcept | undefined;
  /**
   * Clinical stage or grade of a condition. May include formal severity assessments.
   */
  stage?: ConditionStage | undefined;
  /**
   * Indicates the patient or group who the condition record is associated with.
   */
  subject: Reference;
  /**
   * The verification status to support the clinical status of the condition.
   * verificationStatus is not required.  For example, when a patient has abdominal pain in the ED, there is not likely going to be a verification status.
   * This element is labeled as a modifier because the status contains the code refuted and entered-in-error that mark the Condition as not currently valid.
   */
  verificationStatus?: ('provisional'|'differential'|'confirmed'|'refuted'|'entered-in-error'|'unknown') | undefined;
  _verificationStatus?: Element | undefined;
}
/**
 * Who|what controlled by this consent (or group, by role)
 */
export interface ConsentActor extends BackboneElement {
  /**
   * The resource that identifies the actor. To identify a actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
   */
  reference: Reference;
  /**
   * How the individual is involved in the resources content that is described in the consent.
   */
  role: CodeableConcept;
}
/**
 * Data controlled by this consent
 */
export interface ConsentData extends BackboneElement {
  /**
   * How the resource reference is interpreted when testing consent restrictions.
   */
  meaning: ('instance'|'related'|'dependents'|'authoredby');
  _meaning?: Element | undefined;
  /**
   * A reference to a specific resource that defines which resources are covered by this consent.
   */
  reference: Reference;
}
/**
 * Who|what controlled by this exception (or group, by role)
 */
export interface ConsentExceptActor extends BackboneElement {
  /**
   * The resource that identifies the actor. To identify a actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
   */
  reference: Reference;
  /**
   * How the individual is involved in the resources content that is described in the exception.
   */
  role: CodeableConcept;
}
/**
 * Data controlled by this exception
 */
export interface ConsentExceptData extends BackboneElement {
  /**
   * How the resource reference is interpreted when testing consent restrictions.
   */
  meaning: ('instance'|'related'|'dependents'|'authoredby');
  _meaning?: Element | undefined;
  /**
   * A reference to a specific resource that defines which resources are covered by this consent.
   */
  reference: Reference;
}
/**
 * Additional rule -  addition or removal of permissions
 */
export interface ConsentExcept extends BackboneElement {
  /**
   * Actions controlled by this Exception.
   * Note that this is the direct action (not the grounds for the action covered in the purpose element). At present, the only action in the understood and tested scope of this resource is 'read'.
   */
  action?: CodeableConcept[] | undefined;
  /**
   * Who or what is controlled by this Exception. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
   */
  actor?: ConsentExceptActor[] | undefined;
  /**
   * The class of information covered by this exception. The type can be a FHIR resource type, a profile on a type, or a CDA document, or some other type that indicates what sort of information the consent relates to.
   * Multiple types are or'ed together. The intention of the contentType element is that the codes refer to profiles or document types defined in a standard or an implementation guide somewhere.
   */
  class?: Coding[] | undefined;
  /**
   * If this code is found in an instance, then the exception applies.
   * Typical use of this is a Document code with class = CDA.
   */
  code?: Coding[] | undefined;
  /**
   * The resources controlled by this exception, if specific resources are referenced.
   */
  data?: ConsentExceptData[] | undefined;
  /**
   * Clinical or Operational Relevant period of time that bounds the data controlled by this exception.
   * This has a different sense to the Consent.period - that is when the consent agreement holds. This is the time period of the data that is controlled by the agreement.
   */
  dataPeriod?: Period | undefined;
  /**
   * The timeframe in this exception is valid.
   */
  period?: Period | undefined;
  /**
   * The context of the activities a user is taking - why the user is accessing the data - that are controlled by this exception.
   * E.g. if the purpose is 'research', then the operational context must be research, in order for the consent to apply. Not all of the security labels make sense for use in this element (may define a narrower value set?).
   */
  purpose?: Coding[] | undefined;
  /**
   * A set of security labels that define which resources are controlled by this exception. If more than one label is specified, all resources must have all the specified labels.
   * If the consent specifies a security label of "R" then it applies to all resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high water mark. For other kinds of security labels, subsumption logic applies. Not all of the security labels make sense for use in this element (may define a narrower value set?).
   */
  securityLabel?: Coding[] | undefined;
  /**
   * Action  to take - permit or deny - when the exception conditions are met.
   */
  type: ('deny'|'permit');
  _type?: Element | undefined;
}
/**
 * Policies covered by this consent
 */
export interface ConsentPolicy extends BackboneElement {
  /**
   * Entity or Organization having regulatory jurisdiction or accountability for  enforcing policies pertaining to Consent Directives.
   */
  authority?: string | undefined;
  _authority?: Element | undefined;
  /**
   * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
   * This element is for discoverability / documentation, and does not modify or qualify the policy rules.
   */
  uri?: string | undefined;
  _uri?: Element | undefined;
}
/**
 * Broadly, there are 3 key areas of consent for patients: Consent around sharing information (aka Privacy Consent Directive - Authorization to Collect, Use, or Disclose information), consent for specific treatment, or kinds of treatment, and general advance care directives.
 */
export interface Consent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Consent';
  /**
   * Actions controlled by this consent.
   * Note that this is the direct action (not the grounds for the action covered in the purpose element). At present, the only action in the understood and tested scope of this resource is 'read'.
   */
  action?: CodeableConcept[] | undefined;
  /**
   * Who or what is controlled by this consent. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
   */
  actor?: ConsentActor[] | undefined;
  /**
   * A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Either the Grantor, which is the entity responsible for granting the rights listed in a Consent Directive or the Grantee, which is the entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions.
   * Commonly, the patient the consent pertains to is the consentor, but particularly for young and old people, it may be some other person - e.g. a legal guardian.
   */
  consentingParty?: Reference[] | undefined;
  /**
   * The resources controlled by this consent, if specific resources are referenced.
   */
  data?: ConsentData[] | undefined;
  /**
   * Clinical or Operational Relevant period of time that bounds the data controlled by this consent.
   * This has a different sense to the Consent.period - that is when the consent agreement holds. This is the time period of the data that is controlled by the agreement.
   */
  dataPeriod?: Period | undefined;
  /**
   * When this  Consent was issued / created / indexed.
   * This is not the time of the original consent, but the time that this statement was made or derived.
   */
  dateTime?: string | undefined;
  _dateTime?: Element | undefined;
  /**
   * An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
   */
  except?: ConsentExcept[] | undefined;
  /**
   * Unique identifier for this copy of the Consent Statement.
   * This identifier is identifies this copy of the consent. Where this identifier is also used elsewhere as the identifier for a consent record (e.g. a CDA consent document) then the consent details are expected to be the same.
   */
  identifier?: Identifier | undefined;
  /**
   * The organization that manages the consent, and the framework within which it is executed.
   */
  organization?: Reference[] | undefined;
  /**
   * The patient/healthcare consumer to whom this consent applies.
   * Commonly, the patient the consent pertains to is the author, but for young and old people, it may be some other person.
   */
  patient: Reference;
  /**
   * Relevant time or time-period when this Consent is applicable.
   * This can be a subset of the period of the original statement.
   */
  period?: Period | undefined;
  /**
   * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
   */
  policy?: ConsentPolicy[] | undefined;
  /**
   * A referece to the specific computable policy.
   * If the policy reference is not known, the resource cannot be processed. Where the reference is absent, there is no particular policy other than what is expressed directly in the consent resource.
   */
  policyRule?: string | undefined;
  _policyRule?: Element | undefined;
  /**
   * The context of the activities a user is taking - why the user is accessing the data - that are controlled by this consent.
   * This element is for discoverability / documentation, and does not modify or qualify the policy (e.g. the policy itself describes the purposes for which it applies).
   */
  purpose?: Coding[] | undefined;
  /**
   * A set of security labels that define which resources are controlled by this consent. If more than one label is specified, all resources must have all the specified labels.
   * If the consent specifies a security label of "R" then it applies to all resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high water mark. For other kinds of security labels, subsumption logic applies. Not all of the security labels make sense for use in this element (may define a narrower value set?).
   */
  securityLabel?: Coding[] | undefined;
  /**
   * The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
   * The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
   */
  sourceAttachment?: Attachment | undefined;
  /**
   * The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
   * The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
   */
  sourceIdentifier?: Identifier | undefined;
  /**
   * The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
   * The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
   */
  sourceReference?: Reference | undefined;
  /**
   * Indicates the current state of this consent.
   * This element is labeled as a modifier because the status contains the codes rejected and entered-in-error that mark the Consent as not currently valid.
   */
  status: ('draft'|'proposed'|'active'|'rejected'|'inactive'|'entered-in-error');
  _status?: Element | undefined;
}
/**
 * Entity being ascribed responsibility
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 * For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
 */
export interface ContractAgent extends BackboneElement {
  /**
   * Who or what parties are assigned roles in this Contract.
   */
  actor: Reference;
  /**
   * Role type of agent assigned roles in this Contract.
   */
  role?: CodeableConcept[] | undefined;
}
/**
 * Contract Friendly Language
 */
export interface ContractFriendly extends BackboneElement {
  /**
   * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
   */
  contentAttachment?: Attachment | undefined;
  /**
   * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
   */
  contentReference?: Reference | undefined;
}
/**
 * Contract Legal Language
 */
export interface ContractLegal extends BackboneElement {
  /**
   * Contract legal text in human renderable form.
   */
  contentAttachment?: Attachment | undefined;
  /**
   * Contract legal text in human renderable form.
   */
  contentReference?: Reference | undefined;
}
/**
 * Computable Contract Language
 */
export interface ContractRule extends BackboneElement {
  /**
   * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
   */
  contentAttachment?: Attachment | undefined;
  /**
   * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
   */
  contentReference?: Reference | undefined;
}
/**
 * Contract Signatory
 * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
 * For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
 */
export interface ContractSigner extends BackboneElement {
  /**
   * Party which is a signator to this Contract.
   */
  party: Reference;
  /**
   * Legally binding Contract DSIG signature contents in Base64.
   */
  signature: Signature[];
  /**
   * Role of this Contract signer, e.g. notary, grantee.
   */
  type: Coding;
}
/**
 * Contract Term Agent List
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 * For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
 */
export interface ContractTermAgent extends BackboneElement {
  /**
   * The agent assigned a role in this Contract Provision.
   */
  actor: Reference;
  /**
   * Role played by the agent assigned this role in the execution of this Contract Provision.
   */
  role?: CodeableConcept[] | undefined;
}
/**
 * Contract Term Valued Item List
 */
export interface ContractTermValuedItem extends BackboneElement {
  /**
   * Indicates the time during which this Contract Term ValuedItem information is effective.
   */
  effectiveTime?: string | undefined;
  _effectiveTime?: Element | undefined;
  /**
   * Specific type of Contract Provision Valued Item that may be priced.
   */
  entityCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specific type of Contract Provision Valued Item that may be priced.
   */
  entityReference?: Reference | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of the Contract Provision Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * Identifies a Contract Provision Valued Item instance.
   */
  identifier?: Identifier | undefined;
  /**
   * Expresses the product of the Contract Provision Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Provision Valued Item delivered. The concept of Points allows for assignment of point values for a Contract ProvisionValued Item, such that a monetary amount can be assigned to each point.
   */
  points?: number | undefined;
  /**
   * Specifies the units by which the Contract Provision Valued Item is measured or counted, and quantifies the countable or measurable Contract Term Valued Item instances.
   */
  quantity?: Quantity | undefined;
  /**
   * A Contract Provision Valued Item unit valuation measure.
   */
  unitPrice?: Money | undefined;
}
/**
 * Contract Term List
 */
export interface ContractTerm extends BackboneElement {
  /**
   * Action stipulated by this Contract Provision.
   */
  action?: CodeableConcept[] | undefined;
  /**
   * Reason or purpose for the action stipulated by this Contract Provision.
   */
  actionReason?: CodeableConcept[] | undefined;
  /**
   * An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
   * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
   * For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
   */
  agent?: ContractTermAgent[] | undefined;
  /**
   * Relevant time or time-period when this Contract Provision is applicable.
   */
  applies?: Period | undefined;
  /**
   * Nested group of Contract Provisions.
   */
  group?: ContractTerm[] | undefined;
  /**
   * Unique identifier for this particular Contract Provision.
   */
  identifier?: Identifier | undefined;
  /**
   * When this Contract Provision was issued.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * A set of security labels that define which terms are controlled by this condition.
   */
  securityLabel?: Coding[] | undefined;
  /**
   * Subtype of this Contract Provision, e.g. life time maximum payment for a contract term for specific valued item, e.g. disability payment.
   */
  subType?: CodeableConcept | undefined;
  /**
   * Human readable form of this Contract Provision.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The matter of concern in the context of this provision of the agrement.
   * The Contract.term.topic, as a Contract Resource subpart, is handled in the same manner as the Contract Resource as discussed above.
   */
  topic?: Reference[] | undefined;
  /**
   * Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
   */
  type?: CodeableConcept | undefined;
  /**
   * Contract Provision Valued Item List.
   */
  valuedItem?: ContractTermValuedItem[] | undefined;
}
/**
 * Contract Valued Item List
 */
export interface ContractValuedItem extends BackboneElement {
  /**
   * Indicates the time during which this Contract ValuedItem information is effective.
   */
  effectiveTime?: string | undefined;
  _effectiveTime?: Element | undefined;
  /**
   * Specific type of Contract Valued Item that may be priced.
   */
  entityCodeableConcept?: CodeableConcept | undefined;
  /**
   * Specific type of Contract Valued Item that may be priced.
   */
  entityReference?: Reference | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * Identifies a Contract Valued Item instance.
   */
  identifier?: Identifier | undefined;
  /**
   * Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
   */
  points?: number | undefined;
  /**
   * Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
   */
  quantity?: Quantity | undefined;
  /**
   * A Contract Valued Item unit valuation measure.
   */
  unitPrice?: Money | undefined;
}
export interface Contract extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Contract';
  /**
   * Action stipulated by this Contract.
   */
  action?: CodeableConcept[] | undefined;
  /**
   * Reason for action stipulated by this Contract.
   */
  actionReason?: CodeableConcept[] | undefined;
  /**
   * An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
   * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
   * For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
   */
  agent?: ContractAgent[] | undefined;
  /**
   * Relevant time or time-period when this Contract is applicable.
   */
  applies?: Period | undefined;
  /**
   * A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
   */
  authority?: Reference[] | undefined;
  /**
   * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
   */
  bindingAttachment?: Attachment | undefined;
  /**
   * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
   */
  bindingReference?: Reference | undefined;
  /**
   * The minimal content derived from the basal information source at a specific stage in its lifecycle.
   */
  contentDerivative?: CodeableConcept | undefined;
  /**
   * The type of decision made by a grantor with respect to an offer made by a grantee.
   */
  decisionType?: CodeableConcept | undefined;
  /**
   * Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
   */
  domain?: Reference[] | undefined;
  /**
   * The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
   */
  friendly?: ContractFriendly[] | undefined;
  /**
   * Unique identifier for this Contract.
   */
  identifier?: Identifier | undefined;
  /**
   * When this  Contract was issued.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * List of Legal expressions or representations of this Contract.
   */
  legal?: ContractLegal[] | undefined;
  /**
   * List of Computable Policy Rule Language Representations of this Contract.
   */
  rule?: ContractRule[] | undefined;
  /**
   * A set of security labels that define which resources are controlled by this consent. If more than one label is specified, all resources must have all the specified labels.
   */
  securityLabel?: Coding[] | undefined;
  /**
   * Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.
   * Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
   * For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
   */
  signer?: ContractSigner[] | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the contract as not currently valid or active.
   */
  status?: ('amended'|'appended'|'cancelled'|'disputed'|'entered-in-error'|'executable'|'executed'|'negotiable'|'offered'|'policy'|'rejected'|'renewed'|'revoked'|'resolved'|'terminated') | undefined;
  _status?: Element | undefined;
  /**
   * The target entity impacted by or of interest to parties to the agreement.
   * The Contract.subject is an entity that has some role with respect to the Contract.topic and Contract.topic.term, which is of focal interest to the parties to the contract and likely impacted in a significant way by the Contract.action/Contract.action.reason and the Contract.term.action/Contract.action.reason. 
   * In many cases, the Contract.subject is a Contract.signer if the subject is an adult; has a legal interest in the contract; and incompetent to participate in the contract agreement.
   */
  subject?: Reference[] | undefined;
  /**
   * More specific type or specialization of an overarching or more general contract such as auto insurance, home owner  insurance, prenupial agreement, Advanced-Directive, or privacy consent.
   */
  subType?: CodeableConcept[] | undefined;
  /**
   * One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
   */
  term?: ContractTerm[] | undefined;
  /**
   * The matter of concern in the context of this agreement.
   * The Contract.topic may be an application for or offer of a policy or service (e.g., uri to a consent directive form or a health insurance policy), which becomes the Contract once accepted by both the grantor and grantee. 
   * The Contract Resource may function simply as the computable representation of the executed contract, which may be the attached to the Contract Resource as the “binding” or as the “friendly” electronic form.  For example, a Contract Resource may be automatically populated with the values expressed in a related QuestionnaireResponse. 
   * However, the Contract Resource may be considered the legally binding contract if it is the only “executed” form of this contract, and includes the signatures as *The Contract Resource may function as the computable representation of an application or offer in a pre-executed Contract if the grantor has not entered any values.  In this case, it is populated with values in a “legal” form of the application or offer or by the values in an associated Questionnaire.  If the grantor has filled in the legal form or the associated Questionnaire Response, then these values are used to populate a pre-executed Contract Resource.
   * If the Contract.topic is considered an application or offer, then the policy is often required to be attached as the “legal” basis for the application to ensure “informed consent” to the contract, and that any discrepancy between the application and the policy are interpreted against the policy.  Implementers should check organizational and jurisdictional policies to determine the relationship among multiple representations of a contract pre- and post-execution.
   */
  topic?: Reference[] | undefined;
  /**
   * Type of Contract such as an insurance policy, real estate contract, a will, power of attorny, Privacy or Security policy , trust framework agreement, etc.
   */
  type?: CodeableConcept | undefined;
  /**
   * Contract Valued Item List.
   */
  valuedItem?: ContractValuedItem[] | undefined;
}
/**
 * Additional coverage classifications
 */
export interface CoverageGrouping extends BackboneElement {
  /**
   * Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage such as a level of deductables or co-payment.
   */
  class?: string | undefined;
  _class?: Element | undefined;
  /**
   * A short description for the class.
   */
  classDisplay?: string | undefined;
  _classDisplay?: Element | undefined;
  /**
   * Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify an employer group. May also be referred to as a Policy or Group ID.
   */
  group?: string | undefined;
  _group?: Element | undefined;
  /**
   * A short description for the group.
   */
  groupDisplay?: string | undefined;
  _groupDisplay?: Element | undefined;
  /**
   * Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify a collection of benefits provided to employees. May be referred to as a Section or Division ID.
   */
  plan?: string | undefined;
  _plan?: Element | undefined;
  /**
   * A short description for the plan.
   */
  planDisplay?: string | undefined;
  _planDisplay?: Element | undefined;
  /**
   * Identifies a sub-style or sub-collective of coverage issues by the underwriter, for example may be used to identify a subclass of coverage such as a sub-level of deductables or co-payment.
   */
  subClass?: string | undefined;
  _subClass?: Element | undefined;
  /**
   * A short description for the subclass.
   */
  subClassDisplay?: string | undefined;
  _subClassDisplay?: Element | undefined;
  /**
   * Identifies a style or collective of coverage issued by the underwriter, for example may be used to identify a subset of an employer group.
   */
  subGroup?: string | undefined;
  _subGroup?: Element | undefined;
  /**
   * A short description for the subgroup.
   */
  subGroupDisplay?: string | undefined;
  _subGroupDisplay?: Element | undefined;
  /**
   * Identifies a sub-style or sub-collective of coverage issued by the underwriter, for example may be used to identify a subset of a collection of benefits provided to employees.
   */
  subPlan?: string | undefined;
  _subPlan?: Element | undefined;
  /**
   * A short description for the subplan.
   */
  subPlanDisplay?: string | undefined;
  _subPlanDisplay?: Element | undefined;
}
export interface Coverage extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Coverage';
  /**
   * The party who benefits from the insurance coverage., the patient when services are provided.
   */
  beneficiary?: Reference | undefined;
  /**
   * The policy(s) which constitute this insurance coverage.
   */
  contract?: Reference[] | undefined;
  /**
   * A unique identifier for a dependent under the coverage.
   */
  dependent?: string | undefined;
  _dependent?: Element | undefined;
  /**
   * A suite of underwrite specific classifiers, for example may be used to identify a class of coverage or employer group, Policy, Plan.
   */
  grouping?: CoverageGrouping | undefined;
  /**
   * The main (and possibly only) identifier for the coverage - often referred to as a Member Id, Certificate number, Personal Health Number or Case ID. May be constructed as the concatination of the Coverage.SubscriberID and the Coverage.dependant.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply.
   */
  network?: string | undefined;
  _network?: Element | undefined;
  /**
   * The order of applicability of this coverage relative to other coverages which are currently inforce. Note, there may be gaps in the numbering and this does not imply primary, secondard etc. as the specific positioning of coverages depends upon the episode of care.
   */
  order?: number | undefined;
  /**
   * The program or plan underwriter or payor including both insurance and non-insurance agreements, such as patient-pay agreements. May provide multiple identifiers such as insurance company identifier or business identifier (BIN number).
   */
  payor?: Reference[] | undefined;
  /**
   * Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
   */
  period?: Period | undefined;
  /**
   * The party who 'owns' the insurance policy,  may be an individual, corporation or the subscriber's employer.
   */
  policyHolder?: Reference | undefined;
  /**
   * The relationship of beneficiary (patient) to the subscriber.
   */
  relationship?: CodeableConcept | undefined;
  /**
   * An optional counter for a particular instance of the identified coverage which increments upon each renewal.
   */
  sequence?: string | undefined;
  _sequence?: Element | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains the code entered-in-error that marks the coverage as not currently valid.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due.
   */
  subscriber?: Reference | undefined;
  /**
   * The insurer assigned ID for the Subscriber.
   */
  subscriberId?: string | undefined;
  _subscriberId?: Element | undefined;
  /**
   * The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.
   */
  type?: CodeableConcept | undefined;
}
/**
 * External specification mapped to
 */
export interface DataElementMapping extends BackboneElement {
  /**
   * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * An internal id that is used to identify this mapping set when specific mappings are made on a per-element basis.
   * The specification is described once, with general comments, and then specific mappings are made that reference this declaration.
   */
  identity: string;
  _identity?: Element | undefined;
  /**
   * A name for the specification that is being mapped to.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * An absolute URI that identifies the specification that this mapping is expressed to.
   * A formal identity for the specification being mapped to helps with identifying maps consistently.
   */
  uri?: string | undefined;
  _uri?: Element | undefined;
}
/**
 * Often called a clinical template.
 */
export interface DataElement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DataElement';
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the data element and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the data element.
   * null The copyright statement does not apply to values for the data element, only to its definition.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the data element was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the data element changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the data element. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Defines the structure, type, allowed values and other constraining characteristics of the data element.
   * For simple data types there will only be one repetition.  For complex data types, multiple repetitions will be present defining a nested structure using the "path" element.
   */
  element: ElementDefinition[];
  /**
   * A boolean value to indicate that this data element is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of data element that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental data element in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this data element when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this data element outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the data element is intended to be used.
   * It may be possible for the data element to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * Identifies a specification (other than a terminology) that the elements which make up the DataElement have some correspondence with.
   */
  mapping?: DataElementMapping[] | undefined;
  /**
   * A natural language name identifying the data element. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the data element.
   * Usually an organization, but may be an individual. The publisher (or steward) of the data element is the organization or individual primarily responsible for the maintenance and upkeep of the data element. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the data element. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * The status of this data element. Enables tracking the life-cycle of the content.
   * Allows filtering of data elements that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired data element without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * Identifies how precise the data element is in its definition.
   */
  stringency?: ('comparable'|'fully-specified'|'equivalent'|'convertable'|'scaleable'|'flexible') | undefined;
  _stringency?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the data element.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc. This may be similar to the question used to prompt someone for a data element value, but the purpose is communicating about the data element, not asking the question.  (Refer to the 'question' element for the latter.).
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this data element when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this data element is (or will be) published. The URL SHOULD include the major version of the data element. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate data element instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the data element when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the data element author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different data element instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the data element with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Step taken to address
 */
export interface DetectedIssueMitigation extends BackboneElement {
  /**
   * Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.
   * The "text" component can be used for detail or when no appropriate code exists.
   */
  action: CodeableConcept;
  /**
   * Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
   */
  author?: Reference | undefined;
  /**
   * Indicates when the mitigating action was documented.
   * This may not be the same as when the mitigating step was actually taken.
   */
  date?: string | undefined;
  _date?: Element | undefined;
}
export interface DetectedIssue extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DetectedIssue';
  /**
   * Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
   */
  author?: Reference | undefined;
  /**
   * Identifies the general type of issue identified.
   */
  category?: CodeableConcept | undefined;
  /**
   * The date or date-time when the detected issue was initially identified.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A textual explanation of the detected issue.
   * Should focus on information not covered elsewhere as discrete data - no need to duplicate the narrative.
   */
  detail?: string | undefined;
  _detail?: Element | undefined;
  /**
   * Business identifier associated with the detected issue record.
   */
  identifier?: Identifier | undefined;
  /**
   * Indicates the resource representing the current activity or proposed activity that is potentially problematic.
   * There's an implicit constraint on the number of implicated resources based on DetectedIssue.type; e.g. For drug-drug, there would be more than one.  For timing, there would typically only be one.
   */
  implicated?: Reference[] | undefined;
  /**
   * Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
   */
  mitigation?: DetectedIssueMitigation[] | undefined;
  /**
   * Indicates the patient whose record the detected issue is associated with.
   */
  patient?: Reference | undefined;
  /**
   * The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
   */
  reference?: string | undefined;
  _reference?: Element | undefined;
  /**
   * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
   */
  severity?: ('high'|'moderate'|'low') | undefined;
  _severity?: Element | undefined;
  /**
   * Indicates the status of the detected issue.
   * This element is labeled as a modifier because the status contains the codes cancelled and entered-in-error that mark the issue as not currently valid.
   */
  status: ('registered'|'preliminary'|'final'|'amended'|'corrected'|'cancelled'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
}
/**
 * Unique Device Identifier (UDI) Barcode string
 * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
 */
export interface DeviceUdi extends BackboneElement {
  /**
   * The full UDI carrier of the Automatic Identification and Data Capture (AIDC) technology representation of the barcode string as printed on the packaging of the device - E.g a barcode or RFID.   Because of limitations on character sets in XML and the need to round-trip JSON data through XML, AIDC Formats *SHALL* be base64 encoded.
   * The AIDC form of UDIs should be scanned or otherwise used for the identification of the device whenever possible to minimize errors in records resulting from manual transcriptions. If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
   */
  carrierAIDC?: string | undefined;
  _carrierAIDC?: Element | undefined;
  /**
   * The full UDI carrier as the human readable form (HRF) representation of the barcode string as printed on the packaging of the device.
   * If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
   */
  carrierHRF?: string | undefined;
  _carrierHRF?: Element | undefined;
  /**
   * The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
   */
  deviceIdentifier?: string | undefined;
  _deviceIdentifier?: Element | undefined;
  /**
   * A coded entry to indicate how the data was entered.
   */
  entryType?: ('barcode'|'rfid'|'manual'|'card'|'self-reported'|'unknown') | undefined;
  _entryType?: Element | undefined;
  /**
   * Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :
   * 1) GS1: 
   * http://hl7.org/fhir/NamingSystem/gs1-di, 
   * 2) HIBCC:
   * http://hl7.org/fhir/NamingSystem/hibcc-dI, 
   * 3) ICCBBA for blood containers:
   * http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 
   * 4) ICCBA for other devices:
   * http://hl7.org/fhir/NamingSystem/iccbba-other-di.
   */
  issuer?: string | undefined;
  _issuer?: Element | undefined;
  /**
   * The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace. with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.
   */
  jurisdiction?: string | undefined;
  _jurisdiction?: Element | undefined;
  /**
   * Name of device as used in labeling or catalog.
   * Use the `Device.type`  for a generic type or kind of device name.  Note the [GUDID](http://www.fda.gov/medicaldevices/deviceregulationandguidance/uniquedeviceidentification/globaludidatabasegudid/default.htm) lists the name as the 'Brand Name'.
   */
  name?: string | undefined;
  _name?: Element | undefined;
}
export interface Device extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Device';
  /**
   * Contact details for an organization or a particular human that is responsible for the device.
   * used for troubleshooting etc.
   */
  contact?: ContactPoint[] | undefined;
  /**
   * The date and time beyond which this device is no longer valid or should not be used (if applicable).
   */
  expirationDate?: string | undefined;
  _expirationDate?: Element | undefined;
  /**
   * Unique instance identifiers assigned to a device by manufacturers other organizations or owners.
   * The barcode string from a barcode present on a device label or package may identify the instance, include names given to the device in local usage, or may identify the type of device. If the identifier identifies the type of device, Device.type element should be used.  For [UDI](device.html#5.11.3.2.2),  this element corresponds to the variable portion of the UDI that identifies the serial number of a specific device. See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The place where the device can be found.
   */
  location?: Reference | undefined;
  /**
   * Lot number assigned by the manufacturer.
   */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;
  /**
   * The date and time when the device was manufactured.
   */
  manufactureDate?: string | undefined;
  _manufactureDate?: Element | undefined;
  /**
   * A name of the manufacturer.
   */
  manufacturer?: string | undefined;
  _manufacturer?: Element | undefined;
  /**
   * The "model" is an identifier assigned by the manufacturer to identify the product by its type. This number is shared by the all devices sold as the same type.
   */
  model?: string | undefined;
  _model?: Element | undefined;
  /**
   * Descriptive information, usage information or implantation information that is not captured in an existing element.
   */
  note?: Annotation[] | undefined;
  /**
   * An organization that is responsible for the provision and ongoing maintenance of the device.
   */
  owner?: Reference | undefined;
  /**
   * Patient information, If the device is affixed to a person.
   */
  patient?: Reference | undefined;
  /**
   * Provides additional safety characteristics about a medical device.  For example devices containing latex.
   */
  safety?: CodeableConcept[] | undefined;
  /**
   * Status of the Device availability.
   * This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the device (record)as not currently valid.
   */
  status?: ('active'|'inactive'|'entered-in-error'|'unknown') | undefined;
  _status?: Element | undefined;
  /**
   * Code or identifier to identify a kind of device.
   */
  type?: CodeableConcept | undefined;
  /**
   * [Unique device identifier (UDI)](device.html#5.11.3.2.2) assigned to device label or package.
   * UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
   */
  udi?: DeviceUdi | undefined;
  /**
   * A network address on which the device may be contacted directly.
   * If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The version of the device, if the device has multiple releases under the same model, or if the device is software or carries firmware.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Specification details such as Component Revisions, or Serial Numbers
 */
export interface DeviceComponentProductionSpecification extends BackboneElement {
  /**
   * The internal component unique identification. This is a provision for manufacture specific standard components using a private OID. 11073-10101 has a partition for private OID semantic that the manufacturer can make use of.
   */
  componentId?: Identifier | undefined;
  /**
   * The printable string defining the component.
   */
  productionSpec?: string | undefined;
  _productionSpec?: Element | undefined;
  /**
   * The specification type, such as, serial number, part number, hardware revision, software revision, etc.
   */
  specType?: CodeableConcept | undefined;
}
/**
 * For the initial scope, this DeviceComponent resource is only applicable to describe a single node in the containment tree that is produced by the context scanner in any medical device that implements or derives from the ISO/IEEE 11073 standard and that does not represent a metric. Examples for such a node are MDS, VMD, or Channel.
 */
export interface DeviceComponent extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceComponent';
  /**
   * The locally assigned unique identification by the software. For example: handle ID.
   */
  identifier: Identifier;
  /**
   * The language code for the human-readable text string produced by the device. This language code will follow the IETF language tag. Example: en-US.
   */
  languageCode?: CodeableConcept | undefined;
  /**
   * The timestamp for the most recent system change which includes device configuration or setting change.
   */
  lastSystemChange?: string | undefined;
  _lastSystemChange?: Element | undefined;
  /**
   * The physical principle of the measurement. For example: thermal, chemical, acoustical, etc.
   */
  measurementPrinciple?: ('other'|'chemical'|'electrical'|'impedance'|'nuclear'|'optical'|'thermal'|'biological'|'mechanical'|'acoustical'|'manual') | undefined;
  _measurementPrinciple?: Element | undefined;
  /**
   * The current operational status of the device. For example: On, Off, Standby, etc.
   * OperationalStatus for the MDS, VMD, or Channel will be bound to a specific ValueSet that is defined in its profile.
   */
  operationalStatus?: CodeableConcept[] | undefined;
  /**
   * The parameter group supported by the current device component that is based on some nomenclature, e.g. cardiovascular.
   */
  parameterGroup?: CodeableConcept | undefined;
  /**
   * The link to the parent resource. For example: Channel is linked to its VMD parent.
   */
  parent?: Reference | undefined;
  /**
   * The production specification such as component revision, serial number, etc.
   */
  productionSpecification?: DeviceComponentProductionSpecification[] | undefined;
  /**
   * The link to the source Device that contains administrative device information such as manufacture, serial number, etc.
   */
  source?: Reference | undefined;
  /**
   * The component type as defined in the object-oriented or metric nomenclature partition.
   * DeviceComponent.type can be referred to either GDMN (nomenclature system supported by FDA Global UDI Database) or preferable RTMMS coding system.
   */
  type: CodeableConcept;
}
/**
 * Describes the calibrations that have been performed or that are required to be performed
 */
export interface DeviceMetricCalibration extends BackboneElement {
  /**
   * Describes the state of the calibration.
   */
  state?: ('not-calibrated'|'calibration-required'|'calibrated'|'unspecified') | undefined;
  _state?: Element | undefined;
  /**
   * Describes the time last calibration has been performed.
   */
  time?: string | undefined;
  _time?: Element | undefined;
  /**
   * Describes the type of the calibration method.
   */
  type?: ('unspecified'|'offset'|'gain'|'two-point') | undefined;
  _type?: Element | undefined;
}
/**
 * For the initial scope, this DeviceMetric resource is only applicable to describe a single metric node in the containment tree that is produced by the context scanner in any medical device that implements or derives from the ISO/IEEE 11073 standard.
 */
export interface DeviceMetric extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceMetric';
  /**
   * Describes the calibrations that have been performed or that are required to be performed.
   */
  calibration?: DeviceMetricCalibration[] | undefined;
  /**
   * Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
   */
  category: ('measurement'|'setting'|'calculation'|'unspecified');
  _category?: Element | undefined;
  /**
   * Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta.
   */
  color?: ('black'|'red'|'green'|'yellow'|'blue'|'magenta'|'cyan'|'white') | undefined;
  _color?: Element | undefined;
  /**
   * Describes the unique identification of this metric that has been assigned by the device or gateway software. For example: handle ID.  It should be noted that in order to make the identifier unique, the system element of the identifier should be set to the unique identifier of the device.
   */
  identifier: Identifier;
  /**
   * Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured.
   */
  measurementPeriod?: Timing | undefined;
  /**
   * Indicates current operational state of the device. For example: On, Off, Standby, etc.
   */
  operationalStatus?: ('on'|'off'|'standby'|'entered-in-error') | undefined;
  _operationalStatus?: Element | undefined;
  /**
   * Describes the link to the  DeviceComponent that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a DeviceComponent that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location.
   */
  parent?: Reference | undefined;
  /**
   * Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacturer, serial number, etc.
   */
  source?: Reference | undefined;
  /**
   * Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
   * DeviceMetric.type can be referred to either IEEE 11073-10101 or LOINC.
   */
  type: CodeableConcept;
  /**
   * Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.
   * DeviceMetric.unit can refer to either UCUM or preferable a RTMMS coding system.
   */
  unit?: CodeableConcept | undefined;
}
/**
 * Who/what is requesting diagnostics
 */
export interface DeviceRequestRequester extends BackboneElement {
  /**
   * The device, practitioner, etc. who initiated the request.
   */
  agent: Reference;
  /**
   * The organization the device or practitioner was acting on behalf of.
   */
  onBehalfOf?: Reference | undefined;
}
export interface DeviceRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceRequest';
  /**
   * When the request transitioned to being actionable.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * Plan/proposal/order fulfilled by this request.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The details of the device to be used.
   */
  codeCodeableConcept?: CodeableConcept | undefined;
  /**
   * The details of the device to be used.
   */
  codeReference?: Reference | undefined;
  /**
   * An encounter that provides additional context in which this request is made.
   */
  context?: Reference | undefined;
  /**
   * Protocol or definition followed by this request. For example: The proposed act must be performed if the indicated conditions occur, e.g.., shortness of breath, SpO2 less than x%.
   */
  definition?: Reference[] | undefined;
  /**
   * Composite request this is part of.
   */
  groupIdentifier?: Identifier | undefined;
  /**
   * Identifiers assigned to this order by the orderer or by the receiver.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Whether the request is a proposal, plan, an original order or a reflex order.
   */
  intent: CodeableConcept;
  /**
   * Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
   */
  note?: Annotation[] | undefined;
  /**
   * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  occurrenceString?: string | undefined;
  _occurrenceString?: Element | undefined;
  /**
   * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  occurrencePeriod?: Period | undefined;
  /**
   * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
   */
  occurrenceTiming?: Timing | undefined;
  /**
   * The desired perfomer for doing the diagnostic testing.
   */
  performer?: Reference | undefined;
  /**
   * Desired type of performer for doing the diagnostic testing.
   */
  performerType?: CodeableConcept | undefined;
  /**
   * Indicates how quickly the {{title}} should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * The request takes the place of the referenced completed or terminated request(s).
   */
  priorRequest?: Reference[] | undefined;
  /**
   * Reason or justification for the use of this device.
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * Reason or justification for the use of this device.
   */
  reasonReference?: Reference[] | undefined;
  /**
   * Key events in the history of the request.
   * This may not include provenances for all versions of the request – only those deemed “relevant” or important.
   * This SHALL NOT include the Provenance associated with this current version of the resource.  (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update.  Until then, it can be queried directly as the Provenance that points to this version using _revinclude
   * All Provenances should have some historical version of this Request as their subject.
   */
  relevantHistory?: Reference[] | undefined;
  /**
   * The individual who initiated the request and has responsibility for its activation.
   */
  requester?: DeviceRequestRequester | undefined;
  /**
   * The status of the request.
   * This element is labeled as a modifier because the status contains the codes cancelled and entered-in-error that mark the request as not currently valid.
   */
  status?: ('draft'|'active'|'suspended'|'cancelled'|'completed'|'entered-in-error'|'unknown') | undefined;
  _status?: Element | undefined;
  /**
   * The patient who will use the device.
   */
  subject: Reference;
  /**
   * Additional clinical information about the patient that may influence the request fulfilment.  For example, this may includes body where on the subject's the device will be used ( i.e. the target site).
   */
  supportingInfo?: Reference[] | undefined;
}
export interface DeviceUseStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DeviceUseStatement';
  /**
   * Indicates the site on the subject's body where the device was used ( i.e. the target site).
   */
  bodySite?: CodeableConcept | undefined;
  /**
   * The details of the device used.
   */
  device: Reference;
  /**
   * An external identifier for this statement such as an IRI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Reason or justification for the use of the device.
   */
  indication?: CodeableConcept[] | undefined;
  /**
   * Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
   */
  note?: Annotation[] | undefined;
  /**
   * The time at which the statement was made/recorded.
   */
  recordedOn?: string | undefined;
  _recordedOn?: Element | undefined;
  /**
   * Who reported the device was being used by the patient.
   */
  source?: Reference | undefined;
  /**
   * A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed.
   * DeviceUseStatment is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for contains codes that assert the status of the use  by the patient (for example, stopped or on hold) as well as codes that assert the status of the resource itself (for example, entered in error).
   * This element is labeled as a modifier because the status contains the codes that mark the statement as not currently valid.
   */
  status: ('active'|'completed'|'entered-in-error'|'intended'|'stopped'|'on-hold');
  _status?: Element | undefined;
  /**
   * The patient who used the device.
   */
  subject: Reference;
  /**
   * How often the device was used.
   */
  timingString?: string | undefined;
  _timingString?: Element | undefined;
  /**
   * How often the device was used.
   */
  timingPeriod?: Period | undefined;
  /**
   * How often the device was used.
   */
  timingTiming?: Timing | undefined;
  /**
   * The time period over which the device was used.
   */
  whenUsed?: Period | undefined;
}
/**
 * Key images associated with this report
 */
export interface DiagnosticReportImage extends BackboneElement {
  /**
   * A comment about the image. Typically, this is used to provide an explanation for why the image is included, or to draw the viewer's attention to important features.
   * The comment should be displayed with the image. It would be common for the report to include additional discussion of the image contents in other sections such as the conclusion.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Reference to the image source.
   */
  link: Reference;
}
/**
 * Participants in producing the report
 */
export interface DiagnosticReportPerformer extends BackboneElement {
  /**
   * The reference to the  practitioner or organization involved in producing the report. For example, the diagnostic service that is responsible for issuing the report.
   * This is not necessarily the source of the atomic data items. It is the entity that takes responsibility for the clinical report.
   */
  actor: Reference;
  /**
   * Describes the type of participation (e.g.  a responsible party, author, or verifier).
   */
  role?: CodeableConcept | undefined;
}
/**
 * This is intended to capture a single report, and is not suitable for use in displaying summary information that covers multiple reports.  For example, this resource has not been designed for laboratory cumulative reporting formats nor detailed structured reports for sequencing.
 */
export interface DiagnosticReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DiagnosticReport';
  /**
   * Details concerning a test or procedure requested.
   * Note: Usually there is one test request for each result, however in some circumstances multiple test requests may be represented using a single test result resource. Note that there are also cases where one request leads to multiple reports.
   */
  basedOn?: Reference[] | undefined;
  /**
   * A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.
   * The level of granularity is defined by the category concepts in the value set. More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in DiagnosticReport.code.
   */
  category?: CodeableConcept | undefined;
  /**
   * A code or name that describes this diagnostic report.
   */
  code: CodeableConcept;
  /**
   * Codes for the conclusion.
   */
  codedDiagnosis?: CodeableConcept[] | undefined;
  /**
   * Concise and clinically contextualized impression / summary of the diagnostic report.
   */
  conclusion?: string | undefined;
  _conclusion?: Element | undefined;
  /**
   * The healthcare event  (e.g. a patient and healthcare provider interaction) which this DiagnosticReport per is about.
   * This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter or episode but still be tied to the context of the encounter or episode (e.g. pre-admission lab tests).
   */
  context?: Reference | undefined;
  /**
   * The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
   * If the diagnostic procedure was performed on the patient, this is the time it was performed. If there are specimens, the diagnostically relevant time can be derived from the specimen collection times, but the specimen information is not always available, and the exact relationship between the specimens and the diagnostically relevant time is not always automatic.
   */
  effectiveString?: string | undefined;
  _effectiveString?: Element | undefined;
  /**
   * The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
   * If the diagnostic procedure was performed on the patient, this is the time it was performed. If there are specimens, the diagnostically relevant time can be derived from the specimen collection times, but the specimen information is not always available, and the exact relationship between the specimens and the diagnostically relevant time is not always automatic.
   */
  effectivePeriod?: Period | undefined;
  /**
   * Identifiers assigned to this report by the performer or other systems.
   * Usually assigned by the Information System of the diagnostic service provider (filler id).
   */
  identifier?: Identifier[] | undefined;
  /**
   * A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
   */
  image?: DiagnosticReportImage[] | undefined;
  /**
   * One or more links to full details of any imaging performed during the diagnostic investigation. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images.
   * ImagingStudy and ImageManifest and the image element are somewhat overlapping - typically, the list of image references in the image element will also be found in one of the imaging study resources. However each caters to different types of displays for different types of purposes. Neither, either, or both may be provided.
   */
  imagingStudy?: Reference[] | undefined;
  /**
   * The date and time that this version of the report was released from the source diagnostic service.
   * May be different from the update time of the resource itself, because that is the status of the record (potentially a secondary copy), not the actual release time of the report.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * Indicates who or what participated in producing the report.
   */
  performer?: DiagnosticReportPerformer[] | undefined;
  /**
   * Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent.
   * "application/pdf" is recommended as the most reliable and interoperable in this context.
   */
  presentedForm?: Attachment[] | undefined;
  /**
   * Observations that are part of this diagnostic report. Observations can be simple name/value pairs (e.g. "atomic" results), or they can be grouping observations that include references to other members of the group (e.g. "panels").
   */
  result?: Reference[] | undefined;
  /**
   * Details about the specimens on which this diagnostic report is based.
   * If the specimen is sufficiently specified with a code in the test result name, then this additional data may be redundant. If there are multiple specimens, these may be represented per observation or group.
   */
  specimen?: Reference[] | undefined;
  /**
   * The status of the diagnostic report as a whole.
   * This is labeled as "Is Modifier" because applications need to take appropriate action if a report is withdrawn.
   */
  status: ('registered'|'partial'|'preliminary'|'final'|'amended'|'corrected'|'appended'|'cancelled'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The subject of the report. Usually, but not always, this is a patient. However diagnostic services also perform analyses on specimens collected from a variety of other sources.
   */
  subject?: Reference | undefined;
}
/**
 * The items included
 */
export interface DocumentManifestContent extends BackboneElement {
  /**
   * The list of references to document content, or Attachment that consist of the parts of this document manifest. Usually, these would be document references, but direct references to Media or Attachments are also allowed.
   * The intended focus of the DocumentManifest is for the reference to target either DocumentReference or Media Resources, and most implementation guides will restrict to these resources. The reference is to "Any" to support EN 13606 usage, where an extract is DocumentManifest that references  List and Composition resources.
   */
  pAttachment?: Attachment | undefined;
  /**
   * The list of references to document content, or Attachment that consist of the parts of this document manifest. Usually, these would be document references, but direct references to Media or Attachments are also allowed.
   * The intended focus of the DocumentManifest is for the reference to target either DocumentReference or Media Resources, and most implementation guides will restrict to these resources. The reference is to "Any" to support EN 13606 usage, where an extract is DocumentManifest that references  List and Composition resources.
   */
  pReference?: Reference | undefined;
}
/**
 * Related things
 * May be identifiers or resources that caused the DocumentManifest to be created.
 */
export interface DocumentManifestRelated extends BackboneElement {
  /**
   * Related identifier to this DocumentManifest.  For example, Order numbers, accession numbers, XDW workflow numbers.
   * If both identifier and ref elements are present they shall refer to the same thing.
   */
  identifier?: Identifier | undefined;
  /**
   * Related Resource to this DocumentManifest. For example, Order, ProcedureRequest,  Procedure, EligibilityRequest, etc.
   * If both identifier and ref elements are present they shall refer to the same thing.
   */
  ref?: Reference | undefined;
}
export interface DocumentManifest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DocumentManifest';
  /**
   * Identifies who is responsible for creating the manifest, and adding  documents to it.
   * Not necessarily who did the actual data entry (i.e. typist) or who was the source (informant).
   */
  author?: Reference[] | undefined;
  /**
   * The list of Documents included in the manifest.
   */
  content: DocumentManifestContent[];
  /**
   * When the document manifest was created for submission to the server (not necessarily the same thing as the actual resource last modified time, since it may be modified, replicated, etc.).
   * Creation time is used for tracking, organizing versions and searching. This is the creation time of the document set, not the documents on which it is based.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * Human-readable description of the source document. This is sometimes known as the "title".
   * What the document is about, rather than a terse summary of the document. It is commonly the case that records do not have a title and are collectively referred to by the display name of Record code (e.g. a "consultation" or "progress note").
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Other identifiers associated with the document manifest, including version independent  identifiers.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts.
   */
  masterIdentifier?: Identifier | undefined;
  /**
   * A patient, practitioner, or organization for which this set of documents is intended.
   * How the recipient receives the document set or is notified of it is up to the implementation. This element is just a statement of intent. If the recipient is a person, and it is not known whether the person is a patient or a practitioner, RelatedPerson would be the default choice.
   */
  recipient?: Reference[] | undefined;
  /**
   * Related identifiers or resources associated with the DocumentManifest.
   * May be identifiers or resources that caused the DocumentManifest to be created.
   */
  related?: DocumentManifestRelated[] | undefined;
  /**
   * Identifies the source system, application, or software that produced the document manifest.
   */
  source?: string | undefined;
  _source?: Element | undefined;
  /**
   * The status of this document manifest.
   * This element is labeled as a modifier because the status contains the codes that mark the manifest as not currently valid.
   */
  status: ('current'|'superseded'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).
   */
  subject?: Reference | undefined;
  /**
   * Specifies the kind of this set of documents (e.g. Patient Summary, Discharge Summary, Prescription, etc.). The type of a set of documents may be the same as one of the documents in it - especially if there is only one - but it may be wider.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Document referenced
 */
export interface DocumentReferenceContent extends BackboneElement {
  /**
   * The document or URL of the document along with critical metadata to prove content has integrity.
   */
  attachment: Attachment;
  /**
   * An identifier of the document encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.
   * Note that while IHE mostly issues URNs for format types, not all documents can be identified by a URI.
   */
  format?: Coding | undefined;
}
/**
 * Related identifiers or resources
 * May be identifiers or resources that caused the DocumentReference or referenced Document to be created.
 */
export interface DocumentReferenceContextRelated extends BackboneElement {
  /**
   * Related identifier to this DocumentReference. If both id and ref are present they shall refer to the same thing.
   * Order numbers, accession numbers, XDW workflow numbers.
   */
  identifier?: Identifier | undefined;
  /**
   * Related Resource to this DocumentReference. If both id and ref are present they shall refer to the same thing.
   * Order, ProcedureRequest,  Procedure, EligibilityRequest, etc.
   */
  ref?: Reference | undefined;
}
/**
 * Clinical context of document
 * These values are primarily added to help with searching for interesting/relevant documents.
 */
export interface DocumentReferenceContext extends BackboneElement {
  /**
   * Describes the clinical encounter or type of care that the document content is associated with.
   */
  encounter?: Reference | undefined;
  /**
   * This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
   * An event can further specialize the act inherent in the type, such as  where it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or more event codes are included, they shall not conflict with the values inherent in the class or type elements as such a conflict would create an ambiguous situation.
   */
  event?: CodeableConcept[] | undefined;
  /**
   * The kind of facility where the patient was seen.
   */
  facilityType?: CodeableConcept | undefined;
  /**
   * The time period over which the service that is described by the document was provided.
   */
  period?: Period | undefined;
  /**
   * This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty.
   * The value set for this content has an example binding because it is a value set decided by community policy. Other examples exist for consideration: * HITSP created the table HITSP/C80 Table 2-148 Clinical Specialty Value Set (a value set based upon SNOMED CT which is referenced by Direct (XDR and XDM for Direct Messaging Specification, Version 1), as well as Nationwide Health Information Network (NHIN).  Query for Documents, Web Service Interface Specification, V 3.0, 07/27/2011 * ELGA (Austria) (ELGA CDA Implementie-rungsleitfäden Registrierung von CDA Dokumenten für ELGA mit IHE Cross-Enterprise Document Sharing: XDS Metadaten (XDSDocumentEntry), [1.2.40.0.34.7.6.3] * XDS Connect-a-thon practiceSettingCode.
   */
  practiceSetting?: CodeableConcept | undefined;
  /**
   * Related identifiers or resources associated with the DocumentReference.
   * May be identifiers or resources that caused the DocumentReference or referenced Document to be created.
   */
  related?: DocumentReferenceContextRelated[] | undefined;
  /**
   * The Patient Information as known when the document was published. May be a reference to a version specific, or contained.
   */
  sourcePatientInfo?: Reference | undefined;
}
/**
 * Relationships to other documents
 * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
 */
export interface DocumentReferenceRelatesTo extends BackboneElement {
  /**
   * The type of relationship that this document has with anther document.
   * If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
   */
  code: ('replaces'|'transforms'|'signs'|'appends');
  _code?: Element | undefined;
  /**
   * The target document of this relationship.
   */
  target: Reference;
}
/**
 * Usually, this is used for documents other than those defined by FHIR.
 */
export interface DocumentReference extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'DocumentReference';
  /**
   * Which person or organization authenticates that this document is valid.
   * Represents a participant within the author institution who has legally authenticated or attested the document. Legal authentication implies that a document has been signed manually or electronically by the legal Authenticator.
   */
  authenticator?: Reference | undefined;
  /**
   * Identifies who is responsible for adding the information to the document.
   * Not necessarily who did the actual data entry (i.e. typist) it in or who was the source (informant).
   */
  author?: Reference[] | undefined;
  /**
   * A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.
   * This is a metadata field from [XDS/MHD](http://wiki.ihe.net/index.php?title=Mobile_access_to_Health_Documents_(MHD)).
   */
  class?: CodeableConcept | undefined;
  /**
   * The document and format referenced. There may be multiple content element repetitions, each with a different format.
   */
  content: DocumentReferenceContent[];
  /**
   * The clinical context in which the document was prepared.
   * These values are primarily added to help with searching for interesting/relevant documents.
   */
  context?: DocumentReferenceContext | undefined;
  /**
   * When the document was created.
   * Creation time is used for tracking, organizing versions and searching. This is the creation time of the document, not the source material on which it is based.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
   * Identifies the logical organization to go to find the current version, where to report issues, etc. This is different from the physical location of the document, which is the technical location of the document, which host may be delegated to the management of some other organization.
   */
  custodian?: Reference | undefined;
  /**
   * Human-readable description of the source document. This is sometimes known as the "title".
   * What the document is about, rather than a terse summary of the document. It is commonly the case that records do not have a title and are collectively referred to by the display name of Record code (e.g. a "consultation" or "progress note").
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The status of the underlying document.
   * The document that is pointed to might be in various lifecycle states.
   */
  docStatus?: ('preliminary'|'final'|'amended'|'entered-in-error') | undefined;
  _docStatus?: Element | undefined;
  /**
   * Other identifiers associated with the document, including version independent identifiers.
   */
  identifier?: Identifier[] | undefined;
  /**
   * When the document reference was created.
   * Referencing/indexing time is used for tracking, organizing versions and searching.
   */
  indexed: string;
  _indexed?: Element | undefined;
  /**
   * Document identifier as assigned by the source of the document. This identifier is specific to this version of the document. This unique identifier may be used elsewhere to identify this version of the document.
   * CDA Document Id extension and root.
   */
  masterIdentifier?: Identifier | undefined;
  /**
   * Relationships that this document has with other document references that already exist.
   * This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
   */
  relatesTo?: DocumentReferenceRelatesTo[] | undefined;
  /**
   * A set of Security-Tag codes specifying the level of privacy/security of the Document. Note that DocumentReference.meta.security contains the security labels of the "reference" to the document, while DocumentReference.securityLabel contains a snapshot of the security labels on the document the reference refers to.
   * The confidentiality codes can carry multiple vocabulary items. HL7 has developed an understanding of security and privacy tags that might be desirable in a Document Sharing environment, called HL7 Healthcare Privacy and Security Classification System (HCS). The following specification is recommended but not mandated, as the vocabulary bindings are an administrative domain responsibility. The use of this method is up to the policy domain such as the XDS Affinity Domain or other Trust Domain where all parties including sender and recipients are trusted to appropriately tag and enforce.   In the HL7 Healthcare Privacy and Security Classification (HCS) there are code systems specific to Confidentiality, Sensitivity, Integrity, and Handling Caveats. Some values would come from a local vocabulary as they are related to workflow roles and special projects.
   */
  securityLabel?: CodeableConcept[] | undefined;
  /**
   * The status of this document reference.
   * This is the status of the DocumentReference object, which might be independent from the docStatus element.
   * This element is labeled as a modifier because the status contains the codes that mark the document or reference as not currently valid.
   */
  status: ('current'|'superseded'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
   */
  subject?: Reference | undefined;
  /**
   * Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
   * Key metadata element describing the document, used in searching/filtering.
   */
  type: CodeableConcept;
}
export interface DomainResource extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: string;
  /**
   * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
   * This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again.
   */
  contained?: FhirResource[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  extension?: Extension[] | undefined;
  /**
   * May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
   * There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
   */
  modifierExtension?: Extension[] | undefined;
  /**
   * A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
   * Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded in formation is added later.
   */
  text?: Narrative | undefined;
}
export interface EligibilityRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EligibilityRequest';
  /**
   * Dental, Vision, Medical, Pharmacy, Rehab etc.
   */
  benefitCategory?: CodeableConcept | undefined;
  /**
   * Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.
   */
  benefitSubCategory?: CodeableConcept | undefined;
  /**
   * The contract number of a business agreement which describes the terms and conditions.
   */
  businessArrangement?: string | undefined;
  _businessArrangement?: Element | undefined;
  /**
   * Financial instrument by which payment information for health care.
   * 1..1.
   */
  coverage?: Reference | undefined;
  /**
   * The date when this resource was created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * Person who created the invoice/claim/pre-determination or pre-authorization.
   */
  enterer?: Reference | undefined;
  /**
   * Facility where the services were provided.
   */
  facility?: Reference | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The Insurer who is target  of the request.
   */
  insurer?: Reference | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  organization?: Reference | undefined;
  /**
   * Patient Resource.
   * 1..1.
   */
  patient?: Reference | undefined;
  /**
   * Immediate (STAT), best effort (NORMAL), deferred (DEFER).
   */
  priority?: CodeableConcept | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: Reference | undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  servicedString?: string | undefined;
  _servicedString?: Element | undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  servicedPeriod?: Period | undefined;
  /**
   * The status of the resource instance.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
}
/**
 * Processing errors
 */
export interface EligibilityResponseError extends BackboneElement {
  /**
   * An error code,from a specified code system, which details why the eligibility check could not be performed.
   */
  code: CodeableConcept;
}
/**
 * Benefit Summary
 */
export interface EligibilityResponseInsuranceBenefitBalanceFinancial extends BackboneElement {
  /**
   * Benefits allowed.
   */
  allowedMoney?: Money | undefined;
  /**
   * Benefits allowed.
   */
  allowedString?: string | undefined;
  _allowedString?: Element | undefined;
  /**
   * Benefits allowed.
   */
  allowedNumber?: number | undefined;
  /**
   * Deductable, visits, benefit amount.
   */
  type: CodeableConcept;
  /**
   * Benefits used.
   */
  usedMoney?: Money | undefined;
  /**
   * Benefits used.
   */
  usedNumber?: number | undefined;
}
/**
 * Benefits by Category
 */
export interface EligibilityResponseInsuranceBenefitBalance extends BackboneElement {
  /**
   * Dental, Vision, Medical, Pharmacy, Rehab etc.
   */
  category: CodeableConcept;
  /**
   * A richer description of the benefit, for example 'DENT2 covers 100% of basic, 50% of major but exclused Ortho, Implants and Costmetic services'.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * True if the indicated class of service is excluded from the plan, missing or False indicated the service is included in the coverage.
   */
  excluded?: boolean | undefined;
  _excluded?: Element | undefined;
  /**
   * Benefits Used to date.
   */
  financial?: EligibilityResponseInsuranceBenefitBalanceFinancial[] | undefined;
  /**
   * A short name or tag for the benefit, for example MED01, or DENT2.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Network designation.
   */
  network?: CodeableConcept | undefined;
  /**
   * Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.
   */
  subCategory?: CodeableConcept | undefined;
  /**
   * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual vistis'.
   */
  term?: CodeableConcept | undefined;
  /**
   * Unit designation: individual or family.
   */
  unit?: CodeableConcept | undefined;
}
/**
 * Details by insurance coverage
 */
export interface EligibilityResponseInsurance extends BackboneElement {
  /**
   * Benefits and optionally current balances by Category.
   */
  benefitBalance?: EligibilityResponseInsuranceBenefitBalance[] | undefined;
  /**
   * The contract resource which may provide more detailed information.
   */
  contract?: Reference | undefined;
  /**
   * A suite of updated or additional Coverages from the Insurer.
   */
  coverage?: Reference | undefined;
}
export interface EligibilityResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EligibilityResponse';
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * Mutually exclusive with Services Provided (Item).
   */
  error?: EligibilityResponseError[] | undefined;
  /**
   * The form to be used for printing the content.
   */
  form?: CodeableConcept | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Flag indicating if the coverage provided is inforce currently  if no service date(s) specified or for the whole duration of the service dates.
   */
  inforce?: boolean | undefined;
  _inforce?: Element | undefined;
  /**
   * The insurer may provide both the details for the requested coverage as well as details for additional coverages known to the insurer.
   */
  insurance?: EligibilityResponseInsurance[] | undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  insurer?: Reference | undefined;
  /**
   * Transaction status: error, complete.
   */
  outcome?: CodeableConcept | undefined;
  /**
   * Original request resource reference.
   */
  request?: Reference | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
}
/**
 * List of past encounter classes
 */
export interface EncounterClassHistory extends BackboneElement {
  /**
   * inpatient | outpatient | ambulatory | emergency +.
   */
  class: Coding;
  /**
   * The time that the episode was in the specified class.
   */
  period: Period;
}
/**
 * The list of diagnosis relevant to this encounter
 */
export interface EncounterDiagnosis extends BackboneElement {
  /**
   * Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
   * For systems that need to know which was the primary diagnosis, these will be marked with the standard extension primaryDiagnosis (which is a sequence value rather than a flag, 1 = primary diagnosis).
   */
  condition: Reference;
  /**
   * Ranking of the diagnosis (for each role type).
   */
  rank?: number | undefined;
  /**
   * Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).
   */
  role?: CodeableConcept | undefined;
}
/**
 * Details about the admission to a healthcare service
 * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.
 * The duration recorded in the period of this encounter covers the entire scope of this hospitalization record.
 */
export interface EncounterHospitalization extends BackboneElement {
  /**
   * From where patient was admitted (physician referral, transfer).
   */
  admitSource?: CodeableConcept | undefined;
  /**
   * Location to which the patient is discharged.
   */
  destination?: Reference | undefined;
  /**
   * Diet preferences reported by the patient.
   * For example a patient may request both a dairy-free and nut-free diet preference (not mutually exclusive).
   */
  dietPreference?: CodeableConcept[] | undefined;
  /**
   * Category or kind of location after discharge.
   */
  dischargeDisposition?: CodeableConcept | undefined;
  /**
   * The location from which the patient came before admission.
   */
  origin?: Reference | undefined;
  /**
   * Pre-admission identifier.
   */
  preAdmissionIdentifier?: Identifier | undefined;
  /**
   * Whether this hospitalization is a readmission and why if known.
   */
  reAdmission?: CodeableConcept | undefined;
  /**
   * Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things.
   */
  specialArrangement?: CodeableConcept[] | undefined;
  /**
   * Special courtesies (VIP, board member).
   */
  specialCourtesy?: CodeableConcept[] | undefined;
}
/**
 * List of locations where the patient has been
 * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
 */
export interface EncounterLocation extends BackboneElement {
  /**
   * The location where the encounter takes place.
   */
  location: Reference;
  /**
   * Time period during which the patient was present at the location.
   */
  period?: Period | undefined;
  /**
   * The status of the participants' presence at the specified location during the period specified. If the participant is is no longer at the location, then the period will have an end date/time.
   * When the patient is no longer active at a location, then the period end date is entered, and the status may be changed to completed.
   */
  status?: ('planned'|'active'|'reserved'|'completed') | undefined;
  _status?: Element | undefined;
}
/**
 * List of participants involved in the encounter
 */
export interface EncounterParticipant extends BackboneElement {
  /**
   * Persons involved in the encounter other than the patient.
   */
  individual?: Reference | undefined;
  /**
   * The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.
   */
  period?: Period | undefined;
  /**
   * Role of participant in encounter.
   * The participant type indicates how an individual partitipates in an encounter. It includes non-practitioner participants, and for practitioners this is to describe the action type in the context of this encounter (e.g. Admitting Dr, Attending Dr, Translator, Consulting Dr). This is different to the practitioner roles which are functional roles, derived from terms of employment, education, licensing, etc.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * List of past encounter statuses
 * The current status is always found in the current version of the resource, not the status history.
 */
export interface EncounterStatusHistory extends BackboneElement {
  /**
   * The time that the episode was in the specified status.
   */
  period: Period;
  /**
   * planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
   */
  status: ('planned'|'arrived'|'triaged'|'in-progress'|'onleave'|'finished'|'cancelled'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
}
export interface Encounter extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Encounter';
  /**
   * The set of accounts that may be used for billing for this Encounter.
   * The billing system may choose to allocate billable items associated with the Encounter to different referenced Accounts based on internal business rules.
   */
  account?: Reference[] | undefined;
  /**
   * The appointment that scheduled this encounter.
   */
  appointment?: Reference | undefined;
  /**
   * inpatient | outpatient | ambulatory | emergency +.
   */
  class?: Coding | undefined;
  /**
   * The class history permits the tracking of the encounters transitions without needing to go  through the resource history.
   * This would be used for a case where an admission starts of as an emergency encounter, then transisions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kindof discharge from emergency to inpatient.
   */
  classHistory?: EncounterClassHistory[] | undefined;
  /**
   * The list of diagnosis relevant to this encounter.
   */
  diagnosis?: EncounterDiagnosis[] | undefined;
  /**
   * Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care, and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
   */
  episodeOfCare?: Reference[] | undefined;
  /**
   * Details about the admission to a healthcare service.
   * An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.
   * The duration recorded in the period of this encounter covers the entire scope of this hospitalization record.
   */
  hospitalization?: EncounterHospitalization | undefined;
  /**
   * Identifier(s) by which this encounter is known.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The referral request this encounter satisfies (incoming referral).
   */
  incomingReferral?: Reference[] | undefined;
  /**
   * Quantity of time the encounter lasted. This excludes the time during leaves of absence.
   * May differ from the time the Encounter.period lasted because of leave of absence.
   */
  length?: Duration | undefined;
  /**
   * List of locations where  the patient has been during this encounter.
   * Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
   */
  location?: EncounterLocation[] | undefined;
  /**
   * The list of people responsible for providing the service.
   */
  participant?: EncounterParticipant[] | undefined;
  /**
   * Another Encounter of which this encounter is a part of (administratively or in time).
   * This is also used for associating a child's encounter back to the mother's encounter.
   * Refer to the Notes section in the Patient resource for further details.
   */
  partOf?: Reference | undefined;
  /**
   * The start and end time of the encounter.
   * If not (yet) known, the end of the Period may be omitted.
   */
  period?: Period | undefined;
  /**
   * Indicates the urgency of the encounter.
   */
  priority?: CodeableConcept | undefined;
  /**
   * Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
   * For systems that need to know which was the primary diagnosis, these will be marked with the standard extension primaryDiagnosis (which is a sequence value rather than a flag, 1 = primary diagnosis).
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * An organization that is in charge of maintaining the information of this Encounter (e.g. who maintains the report or the master service catalog item, etc.). This MAY be the same as the organization on the Patient record, however it could be different. This MAY not be not the Service Delivery Location's Organization.
   */
  serviceProvider?: Reference | undefined;
  /**
   * planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
   * Note that internal business rules will detemine the appropraite transitions that may occur between statuses (and also classes).
   * This element is labeled as a modifier because the status contains codes that mark the encounter as not currently valid.
   */
  status: ('planned'|'arrived'|'triaged'|'in-progress'|'onleave'|'finished'|'cancelled'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
   * The current status is always found in the current version of the resource, not the status history.
   */
  statusHistory?: EncounterStatusHistory[] | undefined;
  /**
   * The patient ro group present at the encounter.
   * While the encounter is always about the patient, the patient may not actually be known in all contexts of use, and there may be a group of patients that could be anonymous (such as in a group therapy for Alcoholics Anonymous - where the recording of the encounter could be used for billing on the number of people/staff and not important to the context of the specific patients) or alternately in veterinary care a herd of sheep receiving treatment (where the animals are not individually tracked).
   */
  subject?: Reference | undefined;
  /**
   * Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
   * Since there are many ways to further classify encounters, this element is 0..*.
   */
  type?: CodeableConcept[] | undefined;
}
export interface Endpoint extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Endpoint';
  /**
   * The uri that describes the actual end-point to connect to.
   * For rest-hook, and websocket, the end-point must be an http: or https: URL; for email, a mailto: url, for sms, a tel: url, and for message the endpoint can be in any form of url the server understands (usually, http: or mllp:). The URI is allowed to be relative; in which case, it is relative to the server end-point (since their may be more than one, clients should avoid using relative URIs)
   * This address will be to the service base, without any parameters, or sub-services or resources tacked on.
   * E.g. for a WADO-RS endpoint, the url should be "https://pacs.hospital.org/wado-rs"
   * and not "https://pacs.hospital.org/wado-rs/studies/1.2.250.1.59.40211.12345678.678910/series/1.2.250.1.59.40211.789001276.14556172.67789/instances/...".
   */
  address: string;
  _address?: Element | undefined;
  /**
   * A coded value that represents the technical details of the usage of this endpoint, such as what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds-hook).
   * For additional connectivity details for the protocol, extensions will be used at this point, as in the XDS example.
   */
  connectionType: Coding;
  /**
   * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
   */
  contact?: ContactPoint[] | undefined;
  /**
   * Additional headers / information to send as part of the notification.
   * Exactly what these mean depend on the channel type. The can convey additional information to the recipient and/or meet security requirements.
   */
  header?: string[] | undefined;
  _header?: Element[] | undefined;
  /**
   * Identifier for the organization that is used to identify the endpoint across multiple disparate systems.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization that manages this endpoint (even if technically another organisation is hosting this in the cloud, it is the organisation associated with the data).
   * This property is not typically used when searching for Endpoint resources for usage. The typical usage is via the reference from an aplicable Organization/Location/Practitioner resource, which is where the context is provided. Multiple Locations may reference a single endpoint, and don't have to be within the same organization resource, but most likely within the same organizational hierarchy.
   */
  managingOrganization?: Reference | undefined;
  /**
   * A friendly name that this endpoint can be referred to with.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If the mime type is not specified, then the sender could send any content (including no content depending on the connectionType).
   * Sending the payload has obvious security consequences. The server is responsible for ensuring that the content is appropriately secured.
   */
  payloadMimeType?: string[] | undefined;
  _payloadMimeType?: Element[] | undefined;
  /**
   * The payload type describes the acceptable content that can be communicated on the endpoint.
   * The payloadFormat describes the serialization format of the data, where the payloadType indicates the specific document/schema that is being transferred; e.g. DischargeSummary or CarePlan.
   */
  payloadType: CodeableConcept[];
  /**
   * The interval during which the endpoint is expected to be operational.
   */
  period?: Period | undefined;
  /**
   * active | suspended | error | off | test.
   * This element is labeled as a modifier because the status contains codes that mark the endpoint as not currently valid.
   */
  status: ('active'|'suspended'|'error'|'off'|'entered-in-error'|'test');
  _status?: Element | undefined;
}
export interface EnrollmentRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EnrollmentRequest';
  /**
   * Reference to the program or plan identification, underwriter or payor.
   */
  coverage?: Reference | undefined;
  /**
   * The date when this resource was created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The Insurer who is target  of the request.
   */
  insurer?: Reference | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  organization?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: Reference | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the request as not currently valid.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * Patient Resource.
   */
  subject?: Reference | undefined;
}
export interface EnrollmentResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EnrollmentResponse';
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: Reference | undefined;
  /**
   * Processing status: error, complete.
   */
  outcome?: CodeableConcept | undefined;
  /**
   * Original request resource reference.
   */
  request?: Reference | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
}
/**
 * The list of diagnosis relevant to this episode of care
 */
export interface EpisodeOfCareDiagnosis extends BackboneElement {
  /**
   * A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
   */
  condition: Reference;
  /**
   * Ranking of the diagnosis (for each role type).
   */
  rank?: number | undefined;
  /**
   * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
   */
  role?: CodeableConcept | undefined;
}
/**
 * Past list of status codes (the current status may be included to cover the start date of the status)
 */
export interface EpisodeOfCareStatusHistory extends BackboneElement {
  /**
   * The period during this EpisodeOfCare that the specific status applied.
   */
  period: Period;
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   */
  status: ('planned'|'waitlist'|'active'|'onhold'|'finished'|'cancelled'|'entered-in-error');
  _status?: Element | undefined;
}
export interface EpisodeOfCare extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'EpisodeOfCare';
  /**
   * The set of accounts that may be used for billing for this EpisodeOfCare.
   * The billing system may choose to allocate billable items associated with the EpisodeOfCare to different referenced Accounts based on internal business rules.
   */
  account?: Reference[] | undefined;
  /**
   * The practitioner that is the care manager/care co-ordinator for this patient.
   */
  careManager?: Reference | undefined;
  /**
   * The list of diagnosis relevant to this episode of care.
   */
  diagnosis?: EpisodeOfCareDiagnosis[] | undefined;
  /**
   * The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization that has assumed the specific responsibilities for the specified duration.
   */
  managingOrganization?: Reference | undefined;
  /**
   * The patient who is the focus of this episode of care.
   */
  patient: Reference;
  /**
   * The interval during which the managing organization assumes the defined responsibility.
   */
  period?: Period | undefined;
  /**
   * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
   */
  referralRequest?: Reference[] | undefined;
  /**
   * planned | waitlist | active | onhold | finished | cancelled.
   * This element is labeled as a modifier because the status contains codes that mark the episode as not currently valid.
   */
  status: ('planned'|'waitlist'|'active'|'onhold'|'finished'|'cancelled'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
   */
  statusHistory?: EpisodeOfCareStatusHistory[] | undefined;
  /**
   * The list of practitioners that may be facilitating this episode of care for specific purposes.
   */
  team?: Reference[] | undefined;
  /**
   * A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
   * The type can be very important in processing as this could be used in determining if the EpisodeOfCare is relevant to specific government reporting, or other types of classifications.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * The designation to be excluded
 * At least one of designation.language or designation.use must be provided for each exclude.designation element.
 */
export interface ExpansionProfileDesignationExcludeDesignation extends BackboneElement {
  /**
   * The language this designation is defined for.
   * In the absence of a language, all designations are excluded which match the designation.use parameter for this exclude.designation element.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * Which kinds of designation to exclude from the expansion.
   * In the absence of a use, all designations are retained which match the designation.language parameter for this exclude.designation element.
   */
  use?: Coding | undefined;
}
/**
 * Designations to be excluded
 */
export interface ExpansionProfileDesignationExclude extends BackboneElement {
  /**
   * A data group for each designation to be excluded.
   * At least one of designation.language or designation.use must be provided for each exclude.designation element.
   */
  designation?: ExpansionProfileDesignationExcludeDesignation[] | undefined;
}
/**
 * The designation to be included
 * At least one of designation.language or designation.use must be provided for each include.designation element.
 */
export interface ExpansionProfileDesignationIncludeDesignation extends BackboneElement {
  /**
   * The language this designation is defined for.
   * In the absence of a language, all designations are retained which match the designation.use parameter for this include.designation.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * Which kinds of designation to include in the expansion.
   * In the absence of a use, all designations are retained which match the designation.language parameter for this include.designation element.
   */
  use?: Coding | undefined;
}
/**
 * Designations to be included
 */
export interface ExpansionProfileDesignationInclude extends BackboneElement {
  /**
   * A data group for each designation to be included.
   * At least one of designation.language or designation.use must be provided for each include.designation element.
   */
  designation?: ExpansionProfileDesignationIncludeDesignation[] | undefined;
}
/**
 * When the expansion profile imposes designation contraints
 */
export interface ExpansionProfileDesignation extends BackboneElement {
  /**
   * Designations to be excluded.
   */
  exclude?: ExpansionProfileDesignationExclude | undefined;
  /**
   * Designations to be included.
   */
  include?: ExpansionProfileDesignationInclude | undefined;
}
/**
 * Systems/Versions to be exclude
 * When a system is excluded, and this makes a material difference to the expansion, the exclusion SHALL  be noted in the expansion parameters using a parameter 'excluded'.
 */
export interface ExpansionProfileExcludedSystem extends BackboneElement {
  /**
   * An absolute URI which is the code system to be excluded.
   * See ''Coding.system'' for further documentation.
   */
  system: string;
  _system?: Element | undefined;
  /**
   * The version of the code system from which codes in the expansion should be excluded.
   * This is used to apply version specifc exclusion contraints. If no version is specified, then all codes from the code system present in the expansion (prior to application of the expansion profile) will be excluded.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Fix use of a code system to a particular version
 */
export interface ExpansionProfileFixedVersion extends BackboneElement {
  /**
   * How to manage the intersection between a fixed version in a value set, and this fixed version of the system in the expansion profile.
   */
  mode: ('default'|'check'|'override');
  _mode?: Element | undefined;
  /**
   * The specific system for which to fix the version.
   * See ''Coding.system'' for further documentation.
   */
  system: string;
  _system?: Element | undefined;
  /**
   * The version of the code system from which codes in the expansion should be included.
   */
  version: string;
  _version?: Element | undefined;
}
export interface ExpansionProfile extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ExpansionProfile';
  /**
   * Controls whether inactive concepts are included or excluded in value set expansions.
   * Inactive codes are included if activeOnly is present and has a value of "true". Note that if the value set explicitly specifies that inactive codes are included, this property can still remove them from a specific expansion, but this parameter cannot include them if the value set excludes them.
   */
  activeOnly?: boolean | undefined;
  _activeOnly?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * The date  (and optionally time) when the expansion profile was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the expansion profile changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the expansion profile. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the expansion profile from a consumer's perspective.
   * This description can be used to capture details such as why the expansion profile was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the expansion profile as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A set of criteria that provide the constraints imposed on the value set expansion by including or excluding designations.
   */
  designation?: ExpansionProfileDesignation | undefined;
  /**
   * Specifies the language to be used for description in the expansions i.e. the language to be used for ValueSet.expansion.contains.display.
   */
  displayLanguage?: string | undefined;
  _displayLanguage?: Element | undefined;
  /**
   * Code system, or a particular version of a code system to be excluded from value set expansions.
   * When a system is excluded, and this makes a material difference to the expansion, the exclusion SHALL  be noted in the expansion parameters using a parameter 'excluded'.
   */
  excludedSystem?: ExpansionProfileExcludedSystem | undefined;
  /**
   * Controls whether or not the value set expansion nests codes or not (i.e. ValueSet.expansion.contains.contains).
   * Nesting of codes is excluded if excludeNested is present and has a value of "true".
   */
  excludeNested?: boolean | undefined;
  _excludeNested?: Element | undefined;
  /**
   * Controls whether or not the value set expansion includes codes which cannot be displayed in user interfaces.
   * Codes which cannot be used in user interfaces will be excluded if excludeNotForUI is present and has a value of "true".
   */
  excludeNotForUI?: boolean | undefined;
  _excludeNotForUI?: Element | undefined;
  /**
   * Controls whether or not the value set expansion includes post coordinated codes.
   * Post coordinated codes are excluded if excludePostCoordinated is present and has a value of "true".
   */
  excludePostCoordinated?: boolean | undefined;
  _excludePostCoordinated?: Element | undefined;
  /**
   * A boolean value to indicate that this expansion profile is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of expansion profile that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental expansion profile in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Fix use of a particular code system to a particular version.
   */
  fixedVersion?: ExpansionProfileFixedVersion[] | undefined;
  /**
   * A formal identifier that is used to identify this expansion profile when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this expansion profile outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier | undefined;
  /**
   * Controls whether the value set definition is included or excluded in value set expansions.
   * The ValueSet defintion refers to all fields in the ValueSet definition apart from  ValueSet.contains. The definition is only included if includeDefinition is present and has a value of "true".
   */
  includeDefinition?: boolean | undefined;
  _includeDefinition?: Element | undefined;
  /**
   * Controls whether concept designations are to be included or excluded in value set expansions.
   * ExpansionProfile.designation.include and ExpansionProfile.designation.exclude are only evaluated if includeDesignations is present and set to "true". If includeDesignations is present with a value of "true" and both ExpansionProfile.designation.include and ExpansionProfile.designation.exclude are absent, then all designations are returned in the expansion.
   */
  includeDesignations?: boolean | undefined;
  _includeDesignations?: Element | undefined;
  /**
   * A legal or geographic region in which the expansion profile is intended to be used.
   * It may be possible for the expansion profile to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * If the value set being expanded is incomplete (because it is too big to expand), return a limited expansion (a subset) with an indicator that expansion is incomplete, using the extension [http://hl7.org/fhir/StructureDefinition/valueset-toocostly](extension-valueset-toocostly.html).
   * This field overides the default behaviour (which is to return an error). This does not apply to expansions which are unbounded. Clients SHALL process the extension [http://hl7.org/fhir/StructureDefinition/valueset-toocostly](extension-valueset-toocostly.html) correctly if limitedExpansion = true.
   */
  limitedExpansion?: boolean | undefined;
  _limitedExpansion?: Element | undefined;
  /**
   * A natural language name identifying the expansion profile. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the expansion profile.
   * Usually an organization, but may be an individual. The publisher (or steward) of the expansion profile is the organization or individual primarily responsible for the maintenance and upkeep of the expansion profile. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the expansion profile. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * The status of this expansion profile. Enables tracking the life-cycle of the content.
   * Allows filtering of expansion profiles that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired expansion profile without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * An absolute URI that is used to identify this expansion profile when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this expansion profile is (or will be) published. The URL SHOULD include the major version of the expansion profile. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate expansion profile instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the expansion profile when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the expansion profile author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different expansion profile instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the expansion profile with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Details of an accident
 */
export interface ExplanationOfBenefitAccident extends BackboneElement {
  /**
   * Date of an accident which these services are addressing.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Where the accident occurred.
   */
  locationAddress?: Address | undefined;
  /**
   * Where the accident occurred.
   */
  locationReference?: Reference | undefined;
  /**
   * Type of accident: work, auto, etc.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Added items details
 */
export interface ExplanationOfBenefitAddItemDetail extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ExplanationOfBenefitItemAdjudication[] | undefined;
  /**
   * Health Care Service Type Codes  to identify the classification of service or benefits.
   */
  category?: CodeableConcept | undefined;
  /**
   * The fee charged for the professional service or product.
   */
  fee?: Money | undefined;
  /**
   * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * A list of note references to the notes provided below.
   */
  noteNumber?: number[] | undefined;
  /**
   * The type of reveneu or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * A code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI).
   */
  service?: CodeableConcept | undefined;
}
/**
 * Insurer added line items
 */
export interface ExplanationOfBenefitAddItem extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ExplanationOfBenefitItemAdjudication[] | undefined;
  /**
   * Health Care Service Type Codes  to identify the classification of service or benefits.
   */
  category?: CodeableConcept | undefined;
  /**
   * The second tier service adjudications for payor added services.
   */
  detail?: ExplanationOfBenefitAddItemDetail[] | undefined;
  /**
   * The fee charged for the professional service or product.
   */
  fee?: Money | undefined;
  /**
   * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * A list of note references to the notes provided below.
   */
  noteNumber?: number[] | undefined;
  /**
   * The type of reveneu or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * List of input service items which this service line is intended to replace.
   */
  sequenceLinkId?: number[] | undefined;
  /**
   * If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.
   */
  service?: CodeableConcept | undefined;
}
/**
 * Benefit Summary
 */
export interface ExplanationOfBenefitBenefitBalanceFinancial extends BackboneElement {
  /**
   * Benefits allowed.
   */
  allowedMoney?: Money | undefined;
  /**
   * Benefits allowed.
   */
  allowedString?: string | undefined;
  _allowedString?: Element | undefined;
  /**
   * Benefits allowed.
   */
  allowedNumber?: number | undefined;
  /**
   * Deductable, visits, benefit amount.
   */
  type: CodeableConcept;
  /**
   * Benefits used.
   */
  usedMoney?: Money | undefined;
  /**
   * Benefits used.
   */
  usedNumber?: number | undefined;
}
/**
 * Balance by Benefit Category
 */
export interface ExplanationOfBenefitBenefitBalance extends BackboneElement {
  /**
   * Dental, Vision, Medical, Pharmacy, Rehab etc.
   */
  category: CodeableConcept;
  /**
   * A richer description of the benefit, for example 'DENT2 covers 100% of basic, 50% of major but exclused Ortho, Implants and Costmetic services'.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * True if the indicated class of service is excluded from the plan, missing or False indicated the service is included in the coverage.
   */
  excluded?: boolean | undefined;
  _excluded?: Element | undefined;
  /**
   * Benefits Used to date.
   */
  financial?: ExplanationOfBenefitBenefitBalanceFinancial[] | undefined;
  /**
   * A short name or tag for the benefit, for example MED01, or DENT2.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Network designation.
   */
  network?: CodeableConcept | undefined;
  /**
   * Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.
   */
  subCategory?: CodeableConcept | undefined;
  /**
   * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual vistis'.
   */
  term?: CodeableConcept | undefined;
  /**
   * Unit designation: individual or family.
   */
  unit?: CodeableConcept | undefined;
}
/**
 * Care Team members
 */
export interface ExplanationOfBenefitCareTeam extends BackboneElement {
  /**
   * The members of the team who provided the overall service.
   */
  provider: Reference;
  /**
   * The qualification which is applicable for this service.
   */
  qualification?: CodeableConcept | undefined;
  /**
   * The practitioner who is billing and responsible for the claimed services rendered to the patient.
   */
  responsible?: boolean | undefined;
  _responsible?: Element | undefined;
  /**
   * The lead, assisting or supervising practitioner and their discipline if a multidisiplinary team.
   */
  role?: CodeableConcept | undefined;
  /**
   * Sequence of careteam which serves to order and provide a link.
   */
  sequence: number;
}
/**
 * List of Diagnosis
 */
export interface ExplanationOfBenefitDiagnosis extends BackboneElement {
  /**
   * The diagnosis.
   */
  diagnosisCodeableConcept?: CodeableConcept | undefined;
  /**
   * The diagnosis.
   */
  diagnosisReference?: Reference | undefined;
  /**
   * The package billing code, for example DRG, based on the assigned grouping code system.
   */
  packageCode?: CodeableConcept | undefined;
  /**
   * Sequence of diagnosis which serves to provide a link.
   */
  sequence: number;
  /**
   * The type of the Diagnosis, for example: admitting, primary, secondary, discharge.
   * Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Exceptions, special considerations, the condition, situation, prior or concurrent issues
 */
export interface ExplanationOfBenefitInformation extends BackboneElement {
  /**
   * The general class of the information supplied: information; exception; accident, employment; onset, etc.
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  category: CodeableConcept;
  /**
   * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought which may influence the adjudication.
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  code?: CodeableConcept | undefined;
  /**
   * For example, provides the reason for: the additional stay, or missing tooth or any other situation where a reason code is required in addition to the content.
   */
  reason?: Coding | undefined;
  /**
   * Sequence of the information element which serves to provide a link.
   */
  sequence: number;
  /**
   * The date when or period to which this information refers.
   */
  timingString?: string | undefined;
  _timingString?: Element | undefined;
  /**
   * The date when or period to which this information refers.
   */
  timingPeriod?: Period | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   */
  valueReference?: Reference | undefined;
  /**
   * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
}
/**
 * Insurance or medical plan
 */
export interface ExplanationOfBenefitInsurance extends BackboneElement {
  /**
   * Reference to the program or plan identification, underwriter or payor.
   */
  coverage?: Reference | undefined;
  /**
   * A list of references from the Insurer to which these services pertain.
   */
  preAuthRef?: string[] | undefined;
  _preAuthRef?: Element[] | undefined;
}
/**
 * Adjudication details
 */
export interface ExplanationOfBenefitItemAdjudication extends BackboneElement {
  /**
   * Monitory amount associated with the code.
   */
  amount?: Money | undefined;
  /**
   * Code indicating: Co-Pay, deductable, elegible, benefit, tax, etc.
   */
  category: CodeableConcept;
  /**
   * Adjudication reason such as limit reached.
   */
  reason?: CodeableConcept | undefined;
  /**
   * A non-monetary value for example a percentage. Mutually exclusive to the amount element above.
   */
  value?: number | undefined;
}
/**
 * Additional items
 */
export interface ExplanationOfBenefitItemDetailSubDetail extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ExplanationOfBenefitItemAdjudication[] | undefined;
  /**
   * Health Care Service Type Codes  to identify the classification of service or benefits.
   */
  category?: CodeableConcept | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * A list of note references to the notes provided below.
   */
  noteNumber?: number[] | undefined;
  /**
   * For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of reveneu or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * A service line number.
   */
  sequence: number;
  /**
   * A code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI).
   */
  service?: CodeableConcept | undefined;
  /**
   * The type of product or service.
   */
  type: CodeableConcept;
  /**
   * List of Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
  /**
   * The fee for an addittional service or product or charge.
   */
  unitPrice?: Money | undefined;
}
/**
 * Additional items
 */
export interface ExplanationOfBenefitItemDetail extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ExplanationOfBenefitItemAdjudication[] | undefined;
  /**
   * Health Care Service Type Codes  to identify the classification of service or benefits.
   */
  category?: CodeableConcept | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * A list of note references to the notes provided below.
   */
  noteNumber?: number[] | undefined;
  /**
   * For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of reveneu or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * A service line number.
   */
  sequence: number;
  /**
   * If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.
   */
  service?: CodeableConcept | undefined;
  /**
   * Third tier of goods and services.
   */
  subDetail?: ExplanationOfBenefitItemDetailSubDetail[] | undefined;
  /**
   * The type of product or service.
   * ItemType.
   */
  type: CodeableConcept;
  /**
   * List of Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
  /**
   * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Goods and Services
 */
export interface ExplanationOfBenefitItem extends BackboneElement {
  /**
   * The adjudications results.
   */
  adjudication?: ExplanationOfBenefitItemAdjudication[] | undefined;
  /**
   * Physical service site on the patient (limb, tooth, etc).
   */
  bodySite?: CodeableConcept | undefined;
  /**
   * Careteam applicable for this service or product line.
   */
  careTeamLinkId?: number[] | undefined;
  /**
   * Health Care Service Type Codes  to identify the classification of service or benefits.
   */
  category?: CodeableConcept | undefined;
  /**
   * Second tier of goods and services.
   */
  detail?: ExplanationOfBenefitItemDetail[] | undefined;
  /**
   * Diagnosis applicable for this service or product line.
   */
  diagnosisLinkId?: number[] | undefined;
  /**
   * A billed item may include goods or services provided in multiple encounters.
   */
  encounter?: Reference[] | undefined;
  /**
   * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
   */
  factor?: number | undefined;
  /**
   * Exceptions, special conditions and supporting information pplicable for this service or product line.
   */
  informationLinkId?: number[] | undefined;
  /**
   * Where the service was provided.
   */
  locationAddress?: Address | undefined;
  /**
   * Where the service was provided.
   */
  locationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Where the service was provided.
   */
  locationReference?: Reference | undefined;
  /**
   * Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or for medical whether the treatment was outside the clinic or out of office hours.
   */
  modifier?: CodeableConcept[] | undefined;
  /**
   * The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
   */
  net?: Money | undefined;
  /**
   * A list of note references to the notes provided below.
   */
  noteNumber?: number[] | undefined;
  /**
   * Procedures applicable for this service or product line.
   */
  procedureLinkId?: number[] | undefined;
  /**
   * For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.
   */
  programCode?: CodeableConcept[] | undefined;
  /**
   * The number of repetitions of a service or product.
   */
  quantity?: Quantity | undefined;
  /**
   * The type of reveneu or cost center providing the product and/or service.
   */
  revenue?: CodeableConcept | undefined;
  /**
   * A service line number.
   */
  sequence: number;
  /**
   * If this is an actual service or product line, ie. not a Group, then use code to indicate the Professional Service or Product supplied (eg. CTP, HCPCS,USCLS,ICD10, NCPDP,DIN,ACHI,CCI). If a grouping item then use a group code to indicate the type of thing being grouped eg. 'glasses' or 'compound'.
   */
  service?: CodeableConcept | undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  servicedString?: string | undefined;
  _servicedString?: Element | undefined;
  /**
   * The date or dates when the enclosed suite of services were performed or completed.
   */
  servicedPeriod?: Period | undefined;
  /**
   * A region or surface of the site, eg. limb region or tooth surface(s).
   */
  subSite?: CodeableConcept[] | undefined;
  /**
   * List of Unique Device Identifiers associated with this line item.
   */
  udi?: Reference[] | undefined;
  /**
   * If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.
   */
  unitPrice?: Money | undefined;
}
/**
 * Party to be paid any benefits payable
 */
export interface ExplanationOfBenefitPayee extends BackboneElement {
  /**
   * Party to be reimbursed: Subscriber, provider, other.
   */
  party?: Reference | undefined;
  /**
   * organization | patient | practitioner | relatedperson.
   */
  resourceType?: CodeableConcept | undefined;
  /**
   * Type of Party to be reimbursed: Subscriber, provider, other.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Payment (if paid)
 */
export interface ExplanationOfBenefitPayment extends BackboneElement {
  /**
   * Adjustment to the payment of this transaction which is not related to adjudication of this transaction.
   */
  adjustment?: Money | undefined;
  /**
   * Reason for the payment adjustment.
   */
  adjustmentReason?: CodeableConcept | undefined;
  /**
   * Payable less any payment adjustment.
   */
  amount?: Money | undefined;
  /**
   * Estimated payment date.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Payment identifer.
   */
  identifier?: Identifier | undefined;
  /**
   * Whether this represents partial or complete payment of the claim.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Procedures performed
 */
export interface ExplanationOfBenefitProcedure extends BackboneElement {
  /**
   * Date and optionally time the procedure was performed .
   * SB DateTime??
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The procedure code.
   */
  procedureCodeableConcept?: CodeableConcept | undefined;
  /**
   * The procedure code.
   */
  procedureReference?: Reference | undefined;
  /**
   * Sequence of procedures which serves to order and provide a link.
   */
  sequence: number;
}
/**
 * Processing notes
 */
export interface ExplanationOfBenefitProcessNote extends BackboneElement {
  /**
   * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
   */
  language?: CodeableConcept | undefined;
  /**
   * An integer associated with each note which may be referred to from each service line item.
   */
  number?: number | undefined;
  /**
   * The note text.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The note purpose: Print/Display.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Related Claims which may be revelant to processing this claim
 */
export interface ExplanationOfBenefitRelated extends BackboneElement {
  /**
   * Other claims which are related to this claim such as prior claim versions or for related services.
   * Do we need a relationship code?
   */
  claim?: Reference | undefined;
  /**
   * An alternate organizational reference to the case or file to which this particular claim pertains - eg Property/Casualy insurer claim # or Workers Compensation case # .
   */
  reference?: Identifier | undefined;
  /**
   * For example prior or umbrella.
   */
  relationship?: CodeableConcept | undefined;
}
export interface ExplanationOfBenefit extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ExplanationOfBenefit';
  /**
   * An accident which resulted in the need for healthcare services.
   */
  accident?: ExplanationOfBenefitAccident | undefined;
  /**
   * The first tier service adjudications for payor added services.
   */
  addItem?: ExplanationOfBenefitAddItem[] | undefined;
  /**
   * Balance by Benefit Category.
   */
  benefitBalance?: ExplanationOfBenefitBenefitBalance[] | undefined;
  /**
   * The billable period for which charges are being submitted.
   */
  billablePeriod?: Period | undefined;
  /**
   * The members of the team who provided the overall service as well as their role and whether responsible and qualifications.
   */
  careTeam?: ExplanationOfBenefitCareTeam[] | undefined;
  /**
   * The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
   */
  claim?: Reference | undefined;
  /**
   * The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.
   */
  claimResponse?: Reference | undefined;
  /**
   * The date when the EOB was created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * Ordered list of patient diagnosis for which care is sought.
   */
  diagnosis?: ExplanationOfBenefitDiagnosis[] | undefined;
  /**
   * A description of the status of the adjudication.
   * Do we need a disposition code?
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * The start and optional end dates of when the patient was precluded from working due to the treatable condition(s).
   */
  employmentImpacted?: Period | undefined;
  /**
   * The person who created the explanation of benefit.
   */
  enterer?: Reference | undefined;
  /**
   * Facility where the services were provided.
   */
  facility?: Reference | undefined;
  /**
   * The form to be used for printing the content.
   */
  form?: CodeableConcept | undefined;
  /**
   * The start and optional end dates of when the patient was confined to a treatment center.
   */
  hospitalization?: Period | undefined;
  /**
   * The EOB Business Identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required.
   */
  information?: ExplanationOfBenefitInformation[] | undefined;
  /**
   * Financial instrument by which payment information for health care.
   */
  insurance?: ExplanationOfBenefitInsurance | undefined;
  /**
   * The insurer which is responsible for the explanation of benefit.
   */
  insurer?: Reference | undefined;
  /**
   * First tier of goods and services.
   */
  item?: ExplanationOfBenefitItem[] | undefined;
  /**
   * The provider which is responsible for the claim.
   */
  organization?: Reference | undefined;
  /**
   * Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products. For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new precription for an alternate medication which has the same theraputic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
   */
  originalPrescription?: Reference | undefined;
  /**
   * Processing outcome errror, partial or complete processing.
   */
  outcome?: CodeableConcept | undefined;
  /**
   * Patient Resource.
   */
  patient?: Reference | undefined;
  /**
   * The party to be reimbursed for the services.
   */
  payee?: ExplanationOfBenefitPayee | undefined;
  /**
   * Payment details for the claim if the claim has been paid.
   */
  payment?: ExplanationOfBenefitPayment | undefined;
  /**
   * Precedence (primary, secondary, etc.).
   */
  precedence?: number | undefined;
  /**
   * Prescription to support the dispensing of Pharmacy or Vision products.
   */
  prescription?: Reference | undefined;
  /**
   * Ordered list of patient procedures performed to support the adjudication.
   */
  procedure?: ExplanationOfBenefitProcedure[] | undefined;
  /**
   * Note text.
   */
  processNote?: ExplanationOfBenefitProcessNote[] | undefined;
  /**
   * The provider which is responsible for the claim.
   */
  provider?: Reference | undefined;
  /**
   * The referral resource which lists the date, practitioner, reason and other supporting information.
   */
  referral?: Reference | undefined;
  /**
   * Other claims which are related to this claim such as prior claim versions or for related services.
   */
  related?: ExplanationOfBenefitRelated[] | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * A finer grained suite of claim subtype codes which may convey Inpatient vs Outpatient and/or a specialty service. In the US the BillType.
   * This may contain the local bill type codes such as the US UB-04 bill type code.
   */
  subType?: CodeableConcept[] | undefined;
  /**
   * Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductable).
   */
  totalBenefit?: Money | undefined;
  /**
   * The total cost of the services reported.
   */
  totalCost?: Money | undefined;
  /**
   * The category of claim, eg, oral, pharmacy, vision, insitutional, professional.
   * Affects which fields and value sets are used.
   */
  type?: CodeableConcept | undefined;
  /**
   * The amount of deductable applied which was not allocated to any particular service line.
   */
  unallocDeductable?: Money | undefined;
}
/**
 * Condition that the related person had
 * If none of the conditions listed have an outcome of "death" specified, that indicates that none of the specified conditions are known to have been the primary cause of death.
 */
export interface FamilyMemberHistoryCondition extends BackboneElement {
  /**
   * The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
   */
  code: CodeableConcept;
  /**
   * An area where general notes can be placed about this specific condition.
   */
  note?: Annotation[] | undefined;
  /**
   * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
   */
  onsetAge?: Age | undefined;
  /**
   * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
   */
  onsetPeriod?: Period | undefined;
  /**
   * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
   */
  onsetRange?: Range | undefined;
  /**
   * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
   */
  onsetString?: string | undefined;
  _onsetString?: Element | undefined;
  /**
   * Indicates what happened as a result of this condition.  If the condition resulted in death, deceased date is captured on the relation.
   */
  outcome?: CodeableConcept | undefined;
}
export interface FamilyMemberHistory extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'FamilyMemberHistory';
  /**
   * The age of the relative at the time the family member history is recorded.
   * use estimatedAge to indicate whether the age is actual or not.
   */
  ageAge?: Age | undefined;
  /**
   * The age of the relative at the time the family member history is recorded.
   * use estimatedAge to indicate whether the age is actual or not.
   */
  ageRange?: Range | undefined;
  /**
   * The age of the relative at the time the family member history is recorded.
   * use estimatedAge to indicate whether the age is actual or not.
   */
  ageString?: string | undefined;
  _ageString?: Element | undefined;
  /**
   * The actual or approximate date of birth of the relative.
   */
  bornString?: string | undefined;
  _bornString?: Element | undefined;
  /**
   * The actual or approximate date of birth of the relative.
   */
  bornPeriod?: Period | undefined;
  /**
   * The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
   * If none of the conditions listed have an outcome of "death" specified, that indicates that none of the specified conditions are known to have been the primary cause of death.
   */
  condition?: FamilyMemberHistoryCondition[] | undefined;
  /**
   * The date (and possibly time) when the family member history was taken.
   * This should be captured even if the same as the date on the List aggregating the full family history.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedAge?: Age | undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedBoolean?: boolean | undefined;
  _deceasedBoolean?: Element | undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedString?: string | undefined;
  _deceasedString?: Element | undefined;
  /**
   * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
   */
  deceasedRange?: Range | undefined;
  /**
   * A protocol or questionnaire that was adhered to in whole or in part by this event.
   */
  definition?: Reference[] | undefined;
  /**
   * If true, indicates that the age value specified is an estimated value.
   * This element is labeled as a modifier because the fact tha age is estimated can/should change the results of any algorithm that calculates based on the specified age.
   */
  estimatedAge?: boolean | undefined;
  _estimatedAge?: Element | undefined;
  /**
   * Administrative Gender - the gender that the relative is considered to have for administration and record keeping purposes.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * This records identifiers associated with this family member history record that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair".
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * If true, indicates the taking of an individual family member's history did not occur. The notDone element should not be used to document negated conditions, such as a family member that did not have a condition.
   * This element is labeled as a modifier because it marks the family member history as a family member history that did not occur.  The more attributes are populated, the more constrained the negated statement is.  This notDone element is being evaluated and will likely be removed in a subsequent release.
   */
  notDone?: boolean | undefined;
  _notDone?: Element | undefined;
  /**
   * Describes why the family member's history is absent.
   * This notDoneReason element is being evaluated and will likely be replaced in a subsequent release (e.g. dataAbsentReason).
   */
  notDoneReason?: CodeableConcept | undefined;
  /**
   * This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
   */
  note?: Annotation[] | undefined;
  /**
   * The person who this history concerns.
   */
  patient: Reference;
  /**
   * Describes why the family member history occurred in coded or textual form.
   * Textual reasons can be caprued using reasonCode.text.
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event.
   */
  reasonReference?: Reference[] | undefined;
  /**
   * The type of relationship this person has to the patient (father, mother, brother etc.).
   */
  relationship: CodeableConcept;
  /**
   * A code specifying the status of the record of the family history of a specific family member.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('partial'|'completed'|'entered-in-error'|'health-unknown');
  _status?: Element | undefined;
}
export interface Flag extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Flag';
  /**
   * The person, organization or device that created the flag.
   */
  author?: Reference | undefined;
  /**
   * Allows an flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.
   */
  category?: CodeableConcept | undefined;
  /**
   * The coded value or textual component of the flag to display to the user.
   * If non coded, use CodeableConcept.text.  This element should always be included in the narrative.
   */
  code: CodeableConcept;
  /**
   * This alert is only relevant during the encounter.
   * If both Flag.encounter and Flag.period are valued, then Flag.period.start shall not be before Encounter.period.start and Flag.period.end shall not be after Encounter.period.end.
   */
  encounter?: Reference | undefined;
  /**
   * Identifier assigned to the flag for external use (outside the FHIR environment).
   */
  identifier?: Identifier[] | undefined;
  /**
   * The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
   */
  period?: Period | undefined;
  /**
   * Supports basic workflow.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('active'|'inactive'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The patient, location, group , organization , or practitioner, etc. this is about record this flag is associated with.
   */
  subject: Reference;
}
/**
 * Target outcome for the goal
 */
export interface GoalTarget extends BackboneElement {
  /**
   * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
   */
  detailCodeableConcept?: CodeableConcept | undefined;
  /**
   * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
   */
  detailQuantity?: Quantity | undefined;
  /**
   * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
   */
  detailRange?: Range | undefined;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  dueString?: string | undefined;
  _dueString?: Element | undefined;
  /**
   * Indicates either the date or the duration after start by which the goal should be met.
   */
  dueDuration?: Duration | undefined;
  /**
   * The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
   */
  measure?: CodeableConcept | undefined;
}
/**
 * Goal can be achieving a particular change or merely maintaining a current state or even slowing a decline.
 */
export interface Goal extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Goal';
  /**
   * The identified conditions and other health record elements that are intended to be addressed by the goal.
   */
  addresses?: Reference[] | undefined;
  /**
   * Indicates a category the goal falls within.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
   * If no code is available, use CodeableConcept.text.
   */
  description: CodeableConcept;
  /**
   * Indicates whose goal this is - patient goal, practitioner goal, etc.
   * This is the individual reponsible for establishing the goal, not necessarily who recorded it.  (For that, use the Provenance resource.).
   */
  expressedBy?: Reference | undefined;
  /**
   * This records identifiers associated with this care plan that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Any comments related to the goal.
   * May be used for progress notes, concerns or other related information that doesn't actually describe the goal itself.
   */
  note?: Annotation[] | undefined;
  /**
   * Identifies the change (or lack of change) at the point when the status of the goal is assessed.
   * Note that this should not duplicate the goal status.
   */
  outcomeCode?: CodeableConcept[] | undefined;
  /**
   * Details of what's changed (or not changed).
   * The goal outcome is independent of the outcome of the related activities.  For example, if the Goal is to achieve a target body weight of 150 lb and a care plan activity is defined to diet, then the care plan’s activity outcome could be calories consumed whereas goal outcome is an observation for the actual body weight measured.
   */
  outcomeReference?: Reference[] | undefined;
  /**
   * Identifies the mutually agreed level of importance associated with reaching/sustaining the goal.
   * Extensions are available to track priorities as established by each participant (i.e. Priority from the patient's perspective, different practitioners' perspectives, family member's perspectives)
   * The ordinal extension on Coding can be used to convey a numerically comparable ranking to priority.  (Keep in mind that different coding systems may use a "low value=important".
   */
  priority?: CodeableConcept | undefined;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  startCodeableConcept?: CodeableConcept | undefined;
  /**
   * The date or event after which the goal should begin being pursued.
   */
  startString?: string | undefined;
  _startString?: Element | undefined;
  /**
   * Indicates whether the goal has been reached and is still considered relevant.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('proposed'|'accepted'|'planned'|'in-progress'|'on-target'|'ahead-of-target'|'behind-target'|'sustaining'|'achieved'|'on-hold'|'cancelled'|'entered-in-error'|'rejected');
  _status?: Element | undefined;
  /**
   * Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
   * To see the date for past statuses, query history.
   */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;
  /**
   * Captures the reason for the current status.
   * This will typically be captured for statuses such as rejected, on-hold or cancelled, but could be present for others.
   */
  statusReason?: string | undefined;
  _statusReason?: Element | undefined;
  /**
   * Identifies the patient, group or organization for whom the goal is being established.
   */
  subject?: Reference | undefined;
  /**
   * Indicates what should be done by when.
   */
  target?: GoalTarget | undefined;
}
/**
 * Compartment Consistency Rules
 */
export interface GraphDefinitionLinkTargetCompartment extends BackboneElement {
  /**
   * Identifies the compartment.
   */
  code: ('Patient'|'Encounter'|'RelatedPerson'|'Practitioner'|'Device');
  _code?: Element | undefined;
  /**
   * Documentation for FHIRPath expression.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Custom rule, as a FHIRPath expression.
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * identical | matching | different | no-rule | custom.
   */
  rule: ('identical'|'matching'|'different'|'custom');
  _rule?: Element | undefined;
}
/**
 * Potential target for the link
 */
export interface GraphDefinitionLinkTarget extends BackboneElement {
  /**
   * Compartment Consistency Rules.
   */
  compartment?: GraphDefinitionLinkTargetCompartment[] | undefined;
  /**
   * Additional links from target resource.
   */
  link?: GraphDefinitionLink[] | undefined;
  /**
   * Profile for the target resource.
   */
  profile?: string | undefined;
  _profile?: Element | undefined;
  /**
   * Type of resource this link refers to.
   */
  type: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription');
  _type?: Element | undefined;
}
/**
 * Links this graph makes rules about
 */
export interface GraphDefinitionLink extends BackboneElement {
  /**
   * Information about why this link is of interest in this graph definition.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Maximum occurrences for this link.
   */
  max?: string | undefined;
  _max?: Element | undefined;
  /**
   * Minimum occurrences for this link.
   */
  min?: number | undefined;
  /**
   * Path in the resource that contains the link.
   * The path can be a literal path (e.g. Observation.subject), or it can be a query for reverse links (e.g. Provenance?target=[id]).
   */
  path: string;
  _path?: Element | undefined;
  /**
   * Which slice (if profiled).
   */
  sliceName?: string | undefined;
  _sliceName?: Element | undefined;
  /**
   * Potential target for the link.
   */
  target: GraphDefinitionLinkTarget[];
}
export interface GraphDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'GraphDefinition';
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * The date  (and optionally time) when the graph definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the graph definition changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the graph definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the graph definition from a consumer's perspective.
   * This description can be used to capture details such as why the graph definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the graph definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A boolean value to indicate that this graph definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of graph definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental graph definition in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A legal or geographic region in which the graph definition is intended to be used.
   * It may be possible for the graph definition to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * Links this graph makes rules about.
   */
  link?: GraphDefinitionLink[] | undefined;
  /**
   * A natural language name identifying the graph definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The profile that describes the use of the base resource.
   * The code does not include the '$' prefix that is always included in the URL when the operation is invoked.
   */
  profile?: string | undefined;
  _profile?: Element | undefined;
  /**
   * The name of the individual or organization that published the graph definition.
   * Usually an organization, but may be an individual. The publisher (or steward) of the graph definition is the organization or individual primarily responsible for the maintenance and upkeep of the graph definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the graph definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this graph definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the graph definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this graph definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The type of FHIR resource at which instances of this graph start.
   */
  start: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription');
  _start?: Element | undefined;
  /**
   * The status of this graph definition. Enables tracking the life-cycle of the content.
   * Allows filtering of graph definitions that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired graph definition without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * An absolute URI that is used to identify this graph definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this graph definition is (or will be) published. The URL SHOULD include the major version of the graph definition. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate graph definition instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the graph definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the graph definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different graph definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the graph definition with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Trait of group members
 * All the identified characteristics must be true for an entity to a member of the group.
 */
export interface GroupCharacteristic extends BackboneElement {
  /**
   * A code that identifies the kind of trait being asserted.
   */
  code: CodeableConcept;
  /**
   * If true, indicates the characteristic is one that is NOT held by members of the group.
   * This is labeled as "Is Modifier" because applications cannot wrongly include excluded members as included or vice versa.
   */
  exclude: boolean;
  _exclude?: Element | undefined;
  /**
   * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
   */
  period?: Period | undefined;
  /**
   * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
   * For Range, it means members of the group have a value that falls somewhere within the specified range.
   */
  valueRange?: Range | undefined;
}
/**
 * Who or what is in group
 */
export interface GroupMember extends BackboneElement {
  /**
   * A reference to the entity that is a member of the group. Must be consistent with Group.type.
   */
  entity: Reference;
  /**
   * A flag to indicate that the member is no longer in the group, but previously may have been a member.
   */
  inactive?: boolean | undefined;
  _inactive?: Element | undefined;
  /**
   * The period that the member was in the group, if known.
   */
  period?: Period | undefined;
}
export interface Group extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Group';
  /**
   * Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
   */
  actual: boolean;
  _actual?: Element | undefined;
  /**
   * Identifies the traits shared by members of the group.
   * All the identified characteristics must be true for an entity to a member of the group.
   */
  characteristic?: GroupCharacteristic[] | undefined;
  /**
   * Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
   * This would generally be omitted for Person resources.
   */
  code?: CodeableConcept | undefined;
  /**
   * A unique business identifier for this group.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies the resource instances that are members of the group.
   */
  member?: GroupMember[] | undefined;
  /**
   * A label assigned to the group for human identification and communication.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A count of the number of resource instances that are part of the group.
   * Note that the quantity may be less than the number of members if some of the members are not active.
   */
  quantity?: number | undefined;
  /**
   * Identifies the broad classification of the kind of resources the group includes.
   * Group members SHALL be of the appropriate resource type (Patient for person or animal; or Practitioner, Device, Medicaiton or Substance for the other types.).
   */
  type: ('person'|'animal'|'practitioner'|'device'|'medication'|'substance');
  _type?: Element | undefined;
}
export interface GuidanceResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'GuidanceResponse';
  /**
   * Allows the context of the guidance response to be provided if available. In a service context, this would likely be unavailable.
   */
  context?: Reference | undefined;
  /**
   * If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data.
   */
  dataRequirement?: DataRequirement[] | undefined;
  /**
   * Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element.
   */
  evaluationMessage?: Reference[] | undefined;
  /**
   * Allows a service to provide a unique, business identifier for the response.
   */
  identifier?: Identifier | undefined;
  /**
   * A reference to the knowledge module that was invoked.
   */
  module: Reference;
  /**
   * Provides a mechanism to communicate additional information about the response.
   */
  note?: Annotation[] | undefined;
  /**
   * Indicates when the guidance response was processed.
   */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;
  /**
   * The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element.
   */
  outputParameters?: Reference | undefined;
  /**
   * Provides a reference to the device that performed the guidance.
   */
  performer?: Reference | undefined;
  /**
   * Indicates the reason the request was initiated. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
   */
  reasonCodeableConcept?: CodeableConcept | undefined;
  /**
   * Indicates the reason the request was initiated. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
   */
  reasonReference?: Reference | undefined;
  /**
   * The id of the request associated with this response. If an id was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi-request scenario.
   */
  requestId?: string | undefined;
  _requestId?: Element | undefined;
  /**
   * The actions, if any, produced by the evaluation of the artifact.
   */
  result?: Reference | undefined;
  /**
   * The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('success'|'data-requested'|'data-required'|'in-progress'|'failure'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The patient for which the request was processed.
   */
  subject?: Reference | undefined;
}
/**
 * Times the Service Site is available
 * More detailed availability information may be provided in associated Schedule/Slot resources.
 */
export interface HealthcareServiceAvailableTime extends BackboneElement {
  /**
   * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
   */
  allDay?: boolean | undefined;
  _allDay?: Element | undefined;
  /**
   * The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
   * The timezone is expected to be for where this HealthcareService is provided at.
   */
  availableEndTime?: string | undefined;
  _availableEndTime?: Element | undefined;
  /**
   * The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
   * The timezone is expected to be for where this HealthcareService is provided at.
   */
  availableStartTime?: string | undefined;
  _availableStartTime?: Element | undefined;
  /**
   * Indicates which days of the week are available between the start and end Times.
   */
  daysOfWeek?: ('mon'|'tue'|'wed'|'thu'|'fri'|'sat'|'sun')[] | undefined;
  _daysOfWeek?: Element[] | undefined;
}
/**
 * Not available during this time due to provided reason
 */
export interface HealthcareServiceNotAvailable extends BackboneElement {
  /**
   * The reason that can be presented to the user as to why this time is not available.
   */
  description: string;
  _description?: Element | undefined;
  /**
   * Service is not available (seasonally or for a public holiday) from this date.
   */
  during?: Period | undefined;
}
export interface HealthcareService extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'HealthcareService';
  /**
   * Whether this healthcareservice record is in active use.
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
   */
  appointmentRequired?: boolean | undefined;
  _appointmentRequired?: Element | undefined;
  /**
   * A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
   */
  availabilityExceptions?: string | undefined;
  _availabilityExceptions?: Element | undefined;
  /**
   * A collection of times that the Service Site is available.
   * More detailed availability information may be provided in associated Schedule/Slot resources.
   */
  availableTime?: HealthcareServiceAvailableTime[] | undefined;
  /**
   * Identifies the broad category of service being performed or delivered.
   * Selecting a Service Category then determines the list of relevant service types that can be selected in the primary service type.
   */
  category?: CodeableConcept | undefined;
  /**
   * Collection of characteristics (attributes).
   * These could be such things as is wheelchair accessible.
   */
  characteristic?: CodeableConcept[] | undefined;
  /**
   * Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.
   * Would expect that a user would not see this information on a search results, and it would only be available when viewing the complete details of the service.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * The location(s) that this service is available to (not where the service is provided).
   * The locations referenced by the coverage area can include both specific locations, including areas, and also conceptual domains too (mode = kind), such as a physical area (tri-state area) and some other attribute (covered by Example Care Organization). These types of Locations are often not managed by any specific organization. This could also include generic locations such as "in-home".
   */
  coverageArea?: Reference[] | undefined;
  /**
   * Does this service have specific eligibility requirements that need to be met in order to use the service?
   */
  eligibility?: CodeableConcept | undefined;
  /**
   * Describes the eligibility conditions for the service.
   * The description of service eligibility should, in general, not exceed one or two paragraphs. It should be sufficient for a prospective consumer to determine if they are likely to be eligible or not. Where eligibility requirements and conditions are complex, it may simply be noted that an eligibility assessment is required. Where eligibility is determined by an outside source, such as an Act of Parliament, this should be noted, preferably with a reference to a commonly available copy of the source document such as a web page.
   */
  eligibilityNote?: string | undefined;
  _eligibilityNote?: Element | undefined;
  /**
   * Technical endpoints providing access to services operated for the specific healthcare services defined at this resource.
   */
  endpoint?: Reference[] | undefined;
  /**
   * Extra details about the service that can't be placed in the other fields.
   */
  extraDetails?: string | undefined;
  _extraDetails?: Element | undefined;
  /**
   * External identifiers for this item.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The location(s) where this healthcare service may be provided.
   */
  location?: Reference[] | undefined;
  /**
   * Further description of the service as it would be presented to a consumer while searching.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The HealthcareService is not available during this period of time due to the provided reason.
   */
  notAvailable?: HealthcareServiceNotAvailable[] | undefined;
  /**
   * If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
   */
  photo?: Attachment | undefined;
  /**
   * Program Names that can be used to categorize the service.
   * Programs are often defined externally to an Organization, commonly by governments; e.g. Home and Community Care Programs, Homeless Program, ….
   */
  programName?: string[] | undefined;
  _programName?: Element[] | undefined;
  /**
   * The organization that provides this healthcare service.
   * This property is recommended to be the same as the Location's managingOrganization, and if not provided should be interpreted as such. If the Location does not have a managing Organization, then this property should be populated.
   */
  providedBy?: Reference | undefined;
  /**
   * Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
   */
  referralMethod?: CodeableConcept[] | undefined;
  /**
   * The code(s) that detail the conditions under which the healthcare service is available/offered.
   * The provision means being commissioned by, contractually obliged or financially sourced. Types of costings that may apply to this healthcare service, such if the service may be available for free, some discounts available, or fees apply.
   */
  serviceProvisionCode?: CodeableConcept[] | undefined;
  /**
   * Collection of specialties handled by the service site. This is more of a medical term.
   */
  specialty?: CodeableConcept[] | undefined;
  /**
   * List of contacts related to this specific healthcare service.
   * If this is empty, then refer to the location's contacts.
   */
  telecom?: ContactPoint[] | undefined;
  /**
   * The specific type of service that may be delivered or performed.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * The selected instance
 * SOP Instance component identify the instance selected, along with the study and series identities to form the DICOM identity hierarchy.
 */
export interface ImagingManifestStudySeriesInstance extends BackboneElement {
  /**
   * SOP class UID of the selected instance.
   * SOP class UID identifies the type of the selected instances, e.g. CT image, Gray scale softcopy presentation state, ECG waveform, etc.
   */
  sopClass: string;
  _sopClass?: Element | undefined;
  /**
   * SOP Instance UID of the selected instance.
   * SOP instance UID identifies the instance.
   */
  uid: string;
  _uid?: Element | undefined;
}
/**
 * Series identity of the selected instances
 * Series component represents the series level identity and locator information of the DICOM SOP instances in the selection.
 */
export interface ImagingManifestStudySeries extends BackboneElement {
  /**
   * The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.type.
   */
  endpoint?: Reference[] | undefined;
  /**
   * Identity and locating information of the selected DICOM SOP instances.
   * SOP Instance component identify the instance selected, along with the study and series identities to form the DICOM identity hierarchy.
   */
  instance: ImagingManifestStudySeriesInstance[];
  /**
   * Series instance UID of the SOP instances in the selection.
   */
  uid: string;
  _uid?: Element | undefined;
}
/**
 * Study identity of the selected instances
 * Study component represents the study level identity and locator information of the DICOM SOP instances in the selection. It is the top level identity of the hierarchical identification of the instances.
 */
export interface ImagingManifestStudy extends BackboneElement {
  /**
   * The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.type.
   */
  endpoint?: Reference[] | undefined;
  /**
   * Reference to the Imaging Study in FHIR form.
   */
  imagingStudy?: Reference | undefined;
  /**
   * Series identity and locating information of the DICOM SOP instances in the selection.
   * Series component represents the series level identity and locator information of the DICOM SOP instances in the selection.
   */
  series: ImagingManifestStudySeries[];
  /**
   * Study instance UID of the SOP instances in the selection.
   */
  uid: string;
  _uid?: Element | undefined;
}
export interface ImagingManifest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImagingManifest';
  /**
   * Author of ImagingManifest. It can be a human author or a device which made the decision of the SOP instances selected. For example, a radiologist selected a set of imaging SOP instances to attach in a diagnostic report, and a CAD application may author a selection to describe SOP instances it used to generate a detection conclusion.
   */
  author?: Reference | undefined;
  /**
   * Date and time when the selection of the referenced instances were made. It is (typically) different from the creation date of the selection resource, and from dates associated with the referenced instances (e.g. capture time of the referenced image).
   */
  authoringTime?: string | undefined;
  _authoringTime?: Element | undefined;
  /**
   * Free text narrative description of the ImagingManifest.  
   * The value may be derived from the DICOM Standard Part 16, CID-7010 descriptions (e.g. Best in Set, Complete Study Content). Note that those values cover the wide range of uses of the DICOM Key Object Selection object, several of which are not supported by ImagingManifest. Specifically, there is no expected behavior associated with descriptions that suggest referenced images be removed or not used.
   * Free text narrative description of the ImagingManifest.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Unique identifier of the DICOM Key Object Selection (KOS) that this resource represents.
   */
  identifier?: Identifier | undefined;
  /**
   * A patient resource reference which is the patient subject of all DICOM SOP Instances in this ImagingManifest.
   * SOP instances selected in the ImagingManifest can be from different studies, but must be of the same patient.
   */
  patient: Reference;
  /**
   * Study identity and locating information of the DICOM SOP instances in the selection.
   * Study component represents the study level identity and locator information of the DICOM SOP instances in the selection. It is the top level identity of the hierarchical identification of the instances.
   */
  study: ImagingManifestStudy[];
}
/**
 * A single SOP instance from the series
 */
export interface ImagingStudySeriesInstance extends BackboneElement {
  /**
   * The number of instance in the series.
   */
  number?: number | undefined;
  /**
   * DICOM instance  type.
   */
  sopClass: string;
  _sopClass?: Element | undefined;
  /**
   * The description of the instance.
   * Particularly for post-acquisition analytic objects, such as SR, presentation states, value mapping, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Formal identifier for this image or other content.
   */
  uid: string;
  _uid?: Element | undefined;
}
/**
 * Each study has one or more series of instances
 */
export interface ImagingStudySeries extends BackboneElement {
  /**
   * Availability of series (online, offline or nearline).
   */
  availability?: ('ONLINE'|'OFFLINE'|'NEARLINE'|'UNAVAILABLE') | undefined;
  _availability?: Element | undefined;
  /**
   * The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.
   */
  bodySite?: Coding | undefined;
  /**
   * A description of the series.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.type.
   * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG) formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; and DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances.
   */
  endpoint?: Reference[] | undefined;
  /**
   * A single SOP instance within the series, e.g. an image, or presentation state.
   */
  instance?: ImagingStudySeriesInstance[] | undefined;
  /**
   * The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.
   */
  laterality?: Coding | undefined;
  /**
   * The modality of this series sequence.
   */
  modality: Coding;
  /**
   * The numeric identifier of this series in the study.
   */
  number?: number | undefined;
  /**
   * Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
   */
  numberOfInstances?: number | undefined;
  /**
   * The physician or operator (often the radiology technician)  who performed the series. The performer is recorded at the series level, since each series in a study may be performed by a different practitioner, at different times, and using different devices. A series may be performed by multiple practitioners.
   */
  performer?: Reference[] | undefined;
  /**
   * The date and time the series was started.
   */
  started?: string | undefined;
  _started?: Element | undefined;
  /**
   * Formal identifier for this series.
   */
  uid: string;
  _uid?: Element | undefined;
}
export interface ImagingStudy extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImagingStudy';
  /**
   * Accession Number is an identifier related to some aspect of imaging workflow and data management. Usage may vary across different institutions.  See for instance [IHE Radiology Technical Framework Volume 1 Appendix A](http://www.ihe.net/uploadedFiles/Documents/Radiology/IHE_RAD_TF_Rev13.0_Vol1_FT_2014-07-30.pdf).
   */
  accession?: Identifier | undefined;
  /**
   * Availability of study (online, offline, or nearline).
   */
  availability?: ('ONLINE'|'OFFLINE'|'NEARLINE'|'UNAVAILABLE') | undefined;
  _availability?: Element | undefined;
  /**
   * A list of the diagnostic requests that resulted in this imaging study being performed.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The encounter or episode at which the request is initiated.
   */
  context?: Reference | undefined;
  /**
   * Institution-generated description or classification of the Study performed.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.type.
   * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG), formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances; or IHE Invoke Image Display (IID), which provides standard invocation of an imaging web viewer.
   */
  endpoint?: Reference[] | undefined;
  /**
   * Other identifiers for the study.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Who read the study and interpreted the images or other content.
   */
  interpreter?: Reference[] | undefined;
  /**
   * A list of all the Series.ImageModality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
   */
  modalityList?: Coding[] | undefined;
  /**
   * Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
   */
  numberOfInstances?: number | undefined;
  /**
   * Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present.
   */
  numberOfSeries?: number | undefined;
  /**
   * The patient imaged in the study.
   */
  patient: Reference;
  /**
   * The code for the performed procedure type.
   */
  procedureCode?: CodeableConcept[] | undefined;
  /**
   * A reference to the performed Procedure.
   */
  procedureReference?: Reference[] | undefined;
  /**
   * Description of clinical condition indicating why the ImagingStudy was requested.
   */
  reason?: CodeableConcept | undefined;
  /**
   * The requesting/referring physician.
   */
  referrer?: Reference | undefined;
  /**
   * Each study has one or more series of images or other content.
   */
  series?: ImagingStudySeries[] | undefined;
  /**
   * Date and time the study started.
   */
  started?: string | undefined;
  _started?: Element | undefined;
  /**
   * Formal identifier for the study.
   */
  uid: string;
  _uid?: Element | undefined;
}
/**
 * Administration/non-administration reasons
 */
export interface ImmunizationExplanation extends BackboneElement {
  /**
   * Reasons why a vaccine was administered.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * Reason why a vaccine was not administered.
   */
  reasonNotGiven?: CodeableConcept[] | undefined;
}
/**
 * Who performed event
 */
export interface ImmunizationPractitioner extends BackboneElement {
  /**
   * The device, practitioner, etc. who performed the action.
   */
  actor: Reference;
  /**
   * Describes the type of performance (e.g. ordering provider, administering provider, etc.).
   */
  role?: CodeableConcept | undefined;
}
/**
 * Details of a reaction that follows immunization
 * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case,  it should be recorded as a new [AllergyIntolerance](allergyintolerance.html) resource instance as most systems will not query against  past Immunization.reaction elements.
 */
export interface ImmunizationReaction extends BackboneElement {
  /**
   * Date of reaction to the immunization.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Details of the reaction.
   */
  detail?: Reference | undefined;
  /**
   * Self-reported indicator.
   */
  reported?: boolean | undefined;
  _reported?: Element | undefined;
}
/**
 * What protocol was followed
 */
export interface ImmunizationVaccinationProtocol extends BackboneElement {
  /**
   * Indicates the authority who published the protocol.  E.g. ACIP.
   */
  authority?: Reference | undefined;
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Nominal position in a series.
   */
  doseSequence?: number | undefined;
  /**
   * Indicates if the immunization event should "count" against  the protocol.
   * May need to differentiate between status declarations by a provider vs. a CDS engine.
   */
  doseStatus: CodeableConcept;
  /**
   * Provides an explanation as to why an immunization event should or should not count against the protocol.
   */
  doseStatusReason?: CodeableConcept | undefined;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string | undefined;
  _series?: Element | undefined;
  /**
   * The recommended number of doses to achieve immunity.
   */
  seriesDoses?: number | undefined;
  /**
   * The targeted disease.
   */
  targetDisease: CodeableConcept[];
}
export interface Immunization extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Immunization';
  /**
   * Date vaccine administered or was to be administered.
   * When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The quantity of vaccine product that was administered.
   */
  doseQuantity?: Quantity | undefined;
  /**
   * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
   */
  encounter?: Reference | undefined;
  /**
   * Date vaccine batch expires.
   */
  expirationDate?: string | undefined;
  _expirationDate?: Element | undefined;
  /**
   * Reasons why a vaccine was or was not administered.
   */
  explanation?: ImmunizationExplanation | undefined;
  /**
   * A unique identifier assigned to this immunization record.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The service delivery location where the vaccine administration occurred.
   */
  location?: Reference | undefined;
  /**
   * Lot number of the  vaccine product.
   */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;
  /**
   * Name of vaccine manufacturer.
   */
  manufacturer?: Reference | undefined;
  /**
   * Extra information about the immunization that is not conveyed by the other attributes.
   */
  note?: Annotation[] | undefined;
  /**
   * Indicates if the vaccination was or was not given.
   * This element is labeled as a modifier because it indicates that an immunization didn't happen.
   */
  notGiven: boolean;
  _notGiven?: Element | undefined;
  /**
   * The patient who either received or did not receive the immunization.
   */
  patient: Reference;
  /**
   * Indicates who or what performed the event.
   */
  practitioner?: ImmunizationPractitioner[] | undefined;
  /**
   * An indication that the content of the record is based on information from the person who administered the vaccine. This reflects the context under which the data was originally recorded.
   * Reflects the “reliability” of the content.
   */
  primarySource: boolean;
  _primarySource?: Element | undefined;
  /**
   * Categorical data indicating that an adverse event is associated in time to an immunization.
   * A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case,  it should be recorded as a new [AllergyIntolerance](allergyintolerance.html) resource instance as most systems will not query against  past Immunization.reaction elements.
   */
  reaction?: ImmunizationReaction[] | undefined;
  /**
   * The source of the data when the report of the immunization event is not based on information from the person who administered the vaccine.
   * Should not be populated if primarySource = True, will not be required even if primarySource = False.
   */
  reportOrigin?: CodeableConcept | undefined;
  /**
   * The path by which the vaccine product is taken into the body.
   */
  route?: CodeableConcept | undefined;
  /**
   * Body site where vaccine was administered.
   */
  site?: CodeableConcept | undefined;
  /**
   * Indicates the current status of the vaccination event.
   * Will generally be set to show that the immunization has been completed.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('completed'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * Contains information about the protocol(s) under which the vaccine was administered.
   */
  vaccinationProtocol?: ImmunizationVaccinationProtocol[] | undefined;
  /**
   * Vaccine that was administered or was to be administered.
   */
  vaccineCode: CodeableConcept;
}
/**
 * Dates governing proposed immunization
 */
export interface ImmunizationRecommendationRecommendationDateCriterion extends BackboneElement {
  /**
   * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
   */
  code: CodeableConcept;
  /**
   * The date whose meaning is specified by dateCriterion.code.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Protocol used by recommendation
 */
export interface ImmunizationRecommendationRecommendationProtocol extends BackboneElement {
  /**
   * Indicates the authority who published the protocol.  For example, ACIP.
   */
  authority?: Reference | undefined;
  /**
   * Contains the description about the protocol under which the vaccine was administered.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Indicates the nominal position in a series of the next dose.  This is the recommended dose number as per a specified protocol.
   */
  doseSequence?: number | undefined;
  /**
   * One possible path to achieve presumed immunity against a disease - within the context of an authority.
   */
  series?: string | undefined;
  _series?: Element | undefined;
}
/**
 * Vaccine administration recommendations
 */
export interface ImmunizationRecommendationRecommendation extends BackboneElement {
  /**
   * The date the immunization recommendation was created.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
   */
  dateCriterion?: ImmunizationRecommendationRecommendationDateCriterion[] | undefined;
  /**
   * The next recommended dose number (e.g. dose 2 is the next recommended dose).
   * May need other dose concepts such as administered vs. valid.
   */
  doseNumber?: number | undefined;
  /**
   * Vaccine administration status.
   */
  forecastStatus: CodeableConcept;
  /**
   * Contains information about the protocol under which the vaccine was administered.
   */
  protocol?: ImmunizationRecommendationRecommendationProtocol | undefined;
  /**
   * Immunization event history that supports the status and recommendation.
   */
  supportingImmunization?: Reference[] | undefined;
  /**
   * Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
   */
  supportingPatientInformation?: Reference[] | undefined;
  /**
   * The targeted disease for the recommendation.
   */
  targetDisease?: CodeableConcept | undefined;
  /**
   * Vaccine that pertains to the recommendation.
   */
  vaccineCode?: CodeableConcept | undefined;
}
export interface ImmunizationRecommendation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImmunizationRecommendation';
  /**
   * A unique identifier assigned to this particular recommendation record.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The patient the recommendations are for.
   */
  patient: Reference;
  /**
   * Vaccine administration recommendations.
   */
  recommendation: ImmunizationRecommendationRecommendation[];
}
/**
 * Another Implementation guide this depends on
 */
export interface ImplementationGuideDependency extends BackboneElement {
  /**
   * How the dependency is represented when the guide is published.
   * For information about processing included guides, see [Including Guides]{implementationguide.html#include}.
   */
  type: ('reference'|'inclusion');
  _type?: Element | undefined;
  /**
   * Where the dependency is located.
   * When a guide is published, and the type is 'include', this will be a relative reference within the guide.
   */
  uri: string;
  _uri?: Element | undefined;
}
/**
 * Profiles that apply globally
 * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
 */
export interface ImplementationGuideGlobal extends BackboneElement {
  /**
   * A reference to the profile that all instances must conform to.
   */
  profile: Reference;
  /**
   * The type of resource that all instances must conform to.
   * The type must match that of the profile that is referred to, but is made explicit here as a denormalization so that a system processing the implementation guide resource knows which resources the profile applies to even if the profile itself is not available.
   */
  type: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription');
  _type?: Element | undefined;
}
/**
 * Resource in the implementation guide
 */
export interface ImplementationGuidePackageResource extends BackboneElement {
  /**
   * A short code that may be used to identify the resource throughout the implementation guide.
   * This is used when generating schematrons from profiles, for example, but has other uses. Publishing tooling may autogenerate this value, but a human assigned value is more useful. This value must be unique within an implementation guide (across included guides as well).
   */
  acronym?: string | undefined;
  _acronym?: Element | undefined;
  /**
   * A description of the reason that a resource has been included in the implementation guide.
   * This is mostly used with examples to explain why it is present (though they can have extensive comments in the examples).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Whether a resource is included in the guide as part of the rules defined by the guide, or just as an example of a resource that conforms to the rules and/or help implementers understand the intent of the guide.
   * Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.
   */
  example: boolean;
  _example?: Element | undefined;
  /**
   * Another resource that this resource is an example for. This is mostly used for resources that are included as examples of StructureDefinitions.
   * Examples:
   * * StructureDefinition -> Any
   * * ValueSet -> expansion
   * * OperationDefinition -> Parameters
   * * Questionnaire -> QuestionnaireResponse.
   */
  exampleFor?: Reference | undefined;
  /**
   * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Where this resource is found.
   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
   */
  sourceReference?: Reference | undefined;
  /**
   * Where this resource is found.
   * Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
   */
  sourceString?: string | undefined;
  _sourceString?: Element | undefined;
}
/**
 * Group of resources as used in .page.package
 */
export interface ImplementationGuidePackage extends BackboneElement {
  /**
   * Human readable text describing the package.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The name for the group, as used in page.package.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
   */
  resource: ImplementationGuidePackageResource[];
}
/**
 * Page/Section in the Guide
 * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
 */
export interface ImplementationGuidePage extends BackboneElement {
  /**
   * The format of the page.
   * This is primarily for the publishing tool, that will convert all pages to html format. HTML pages are pre-processed, see xxxx.
   */
  format?: string | undefined;
  _format?: Element | undefined;
  /**
   * The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
   */
  kind: ('page'|'example'|'list'|'include'|'directory'|'dictionary'|'toc'|'resource');
  _kind?: Element | undefined;
  /**
   * For constructed pages, a list of packages to include in the page (or else empty for everything).
   */
  package?: string[] | undefined;
  _package?: Element[] | undefined;
  /**
   * Nested Pages/Sections under this page.
   * The implementation guide breadcrumbs are generated from this structure.
   */
  page?: ImplementationGuidePage[] | undefined;
  /**
   * The source address for the page.
   * The publishing tool will autogenerate source for list (source = n/a), and inject included implementations for include (source = uri of guide to include).
   */
  source: string;
  _source?: Element | undefined;
  /**
   * A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
   */
  title: string;
  _title?: Element | undefined;
  /**
   * For constructed pages, what kind of resources to include in the list.
   */
  type?: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription')[] | undefined;
  _type?: Element[] | undefined;
}
export interface ImplementationGuide extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ImplementationGuide';
  /**
   * A binary file that is included in the  implementation guide when it is published.
   * This is principally included for the FHIR publishing tool, but may be useful when extracting and reusing content from the implementation guide.
   */
  binary?: string[] | undefined;
  _binary?: Element[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the implementation guide was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the implementation guide. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
   */
  dependency?: ImplementationGuideDependency[] | undefined;
  /**
   * A free text natural language description of the implementation guide from a consumer's perspective.
   * This description can be used to capture details such as why the implementation guide was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the implementation guide as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of implementation guide that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental implementation guide in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * The version of the FHIR specification on which this ImplementationGuide is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 3.0.2 for this version.
   * An Implementation Guide should specify the target it applies to, as ImplementationGuides are rarely valid across multiple versions of FHIR.
   */
  fhirVersion?: string | undefined;
  _fhirVersion?: Element | undefined;
  /**
   * A set of profiles that all resources covered by this implementation guide must conform to.
   * See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
   */
  global?: ImplementationGuideGlobal[] | undefined;
  /**
   * A legal or geographic region in which the implementation guide is intended to be used.
   * It may be possible for the implementation guide to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A natural language name identifying the implementation guide. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * A logical group of resources. Logical groups can be used when building pages.
   */
  package?: ImplementationGuidePackage[] | undefined;
  /**
   * A page / section in the implementation guide. The root page is the implementation guide home page.
   * Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
   */
  page?: ImplementationGuidePage | undefined;
  /**
   * The name of the individual or organization that published the implementation guide.
   * Usually an organization, but may be an individual. The publisher (or steward) of the implementation guide is the organization or individual primarily responsible for the maintenance and upkeep of the implementation guide. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the implementation guide. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * The status of this implementation guide. Enables tracking the life-cycle of the content.
   * Allows filtering of implementation guides that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired implementation guide without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * An absolute URI that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this implementation guide is (or will be) published. The URL SHOULD include the major version of the implementation guide. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate implementation guide instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different implementation guide instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the implementation guide with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
export interface Library extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Library';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the contentType of the attachment determines how to interpret the content.
   */
  content?: Attachment[] | undefined;
  /**
   * A contributor to the content of the library, including authors, editors, reviewers, and endorsers.
   */
  contributor?: Contributor[] | undefined;
  /**
   * A copyright statement relating to the library and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the library.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * Describes a set of data that must be provided in order to be able to successfully perform the computations defined by the library.
   */
  dataRequirement?: DataRequirement[] | undefined;
  /**
   * The date  (and optionally time) when the library was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the library changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the library. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the library from a consumer's perspective.
   * This description can be used to capture details such as why the library was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the library as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The period during which the library content was or is planned to be in active use.
   * The effective period for a library  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  effectivePeriod?: Period | undefined;
  /**
   * A boolean value to indicate that this library is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of library that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental library in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this library when it is represented in other formats, or referenced in a specification, model, design or an instance. e.g. CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this library outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the library is intended to be used.
   * It may be possible for the library to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date.
   * If specified, this is usually after the approval date.
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the library. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The parameter element defines parameters used by the library.
   */
  parameter?: ParameterDefinition[] | undefined;
  /**
   * The name of the individual or organization that published the library.
   * Usually an organization, but may be an individual. The publisher (or steward) of the library is the organization or individual primarily responsible for the maintenance and upkeep of the library. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the library. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this library is needed and why it has been designed as it has.
   * This element does not describe the usage of the library Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this library.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Related artifacts such as additional documentation, justification, or bibliographic references.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * The status of this library. Enables tracking the life-cycle of the content.
   * Allows filtering of librarys that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired library without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the library.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptive topics related to the content of the library. Topics provide a high-level categorization of the library that can be useful for filtering and searching.
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * Identifies the type of library such as a Logic Library, Model Definition, Asset Collection, or Module Definition.
   */
  type: CodeableConcept;
  /**
   * An absolute URI that is used to identify this library when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this library is (or will be) published. The URL SHOULD include the major version of the library. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * A detailed description of how the library is used from a clinical perspective.
   */
  usage?: string | undefined;
  _usage?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate library instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the library when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the library author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
   * There may be different library instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the library with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Item to be linked
 */
export interface LinkageItem extends BackboneElement {
  /**
   * The resource instance being linked as part of the group.
   */
  resource: Reference;
  /**
   * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
   */
  type: ('source'|'alternate'|'historical');
  _type?: Element | undefined;
}
export interface Linkage extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Linkage';
  /**
   * Indicates whether the asserted set of linkages are considered to be "in effect".
   * If false, any asserted linkages should not be considered current/relevant/applicable.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Identifies the user or organization responsible for asserting the linkages and who establishes the context for evaluating the nature of each linkage.
   */
  author?: Reference | undefined;
  /**
   * Identifies one of the records that is considered to refer to the same real-world occurrence as well as how the items hould be evaluated within the collection of linked items.
   */
  item: LinkageItem[];
}
/**
 * Entries in the list
 * If there are no entries in the list, an emptyReason SHOULD be provided.
 */
export interface ListEntry extends BackboneElement {
  /**
   * When this item was added to the list.
   * This is only useful and meaningful when the mode is "working".
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * True if this item is marked as deleted in the list.
   * If the flag means that the entry has actually been deleted from the list, the deleted element SHALL be true. Both flag and deleted can only be used if the List.mode is "changes". A deleted entry should be displayed in narrative as deleted.
   * This element is labeled as a modifier because it indicates that an item is (to be) no longer in the list.
   */
  deleted?: boolean | undefined;
  _deleted?: Element | undefined;
  /**
   * The flag allows the system constructing the list to indicate the role and significance of the item in the list.
   * The flag can only be understood in the context of the List.code. If the flag means that the entry has actually been deleted from the list, the deleted element SHALL be true. Deleted can only be used if the List.mode is "changes".
   */
  flag?: CodeableConcept | undefined;
  /**
   * A reference to the actual resource from which data was derived.
   */
  item: Reference;
}
export interface List extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'List';
  /**
   * This code defines the purpose of the list - why it was created.
   * If there is no code, the purpose of the list is implied where it is used, such as in a document section using Document.section.code.
   */
  code?: CodeableConcept | undefined;
  /**
   * The date that the list was prepared.
   * The actual important date is the date of currency of the resources that were summarized, but it is usually assumed that these are current when the preparation occurs.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * If the list is empty, why the list is empty.
   * The various reasons for an empty list make a significant interpretation to its interpretation. Note that this code is for use when the entire list has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
   */
  emptyReason?: CodeableConcept | undefined;
  /**
   * The encounter that is the context in which this list was created.
   */
  encounter?: Reference | undefined;
  /**
   * Entries in this list.
   * If there are no entries in the list, an emptyReason SHOULD be provided.
   */
  entry?: ListEntry[] | undefined;
  /**
   * Identifier for the List assigned for business purposes outside the context of FHIR.
   */
  identifier?: Identifier[] | undefined;
  /**
   * How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
   * This element is labeled as a modifier because a change list must not be mis-understood as a complete list.
   */
  mode: ('working'|'snapshot'|'changes');
  _mode?: Element | undefined;
  /**
   * Comments that apply to the overall list.
   */
  note?: Annotation[] | undefined;
  /**
   * What order applies to the items in the list.
   * Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
   */
  orderedBy?: CodeableConcept | undefined;
  /**
   * The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list.
   * The primary source is the entity that made the decisions what items are in the list. This may be software or user.
   */
  source?: Reference | undefined;
  /**
   * Indicates the current state of this list.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('current'|'retired'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The common subject (or patient) of the resources that are in the list, if there is one.
   * Some purely arbitrary lists do not have a common subject, so this is optional.
   */
  subject?: Reference | undefined;
  /**
   * A label for the list assigned by the author.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * The absolute geographic location
 */
export interface LocationPosition extends BackboneElement {
  /**
   * Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).
   */
  altitude?: number | undefined;
  /**
   * Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below).
   */
  latitude: number;
  /**
   * Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below).
   */
  longitude: number;
}
export interface Location extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Location';
  /**
   * Physical location.
   * This was kept as 0..1 as there is no use property on the address, so wouldn't be able to identify different address types.
   */
  address?: Address | undefined;
  /**
   * A list of alternate names that the location is known as, or was known as in the past.
   * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the location.
   */
  alias?: string[] | undefined;
  _alias?: Element[] | undefined;
  /**
   * Description of the Location, which helps in finding or referencing the place.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Technical endpoints providing access to services operated for the location.
   */
  endpoint?: Reference[] | undefined;
  /**
   * Unique code or number identifying the location to its users.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization responsible for the provisioning and upkeep of the location.
   * This can also be used as the part of the organization hierarchy where this location provides services. These services can be defined through the HealthcareService resource.
   */
  managingOrganization?: Reference | undefined;
  /**
   * Indicates whether a resource instance represents a specific location or a class of locations.
   * This is labeled as a modifer because whether or not the location is a class of locations changes how it can be used and understood.
   */
  mode?: ('instance'|'kind') | undefined;
  _mode?: Element | undefined;
  /**
   * Name of the location as used by humans. Does not need to be unique.
   * If the name of an location changes, consider putting the old name in the alias column so that it can still be located through searches.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The Operational status covers operation values most relevant to beds (but can also apply to rooms/units/chair/etc such as an isolation unit/dialisys chair). This typically covers concepts such as contamination, housekeeping and other activities like maintenance.
   */
  operationalStatus?: Coding | undefined;
  /**
   * Another Location which this Location is physically part of.
   */
  partOf?: Reference | undefined;
  /**
   * Physical form of the location, e.g. building, room, vehicle, road.
   */
  physicalType?: CodeableConcept | undefined;
  /**
   * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
   */
  position?: LocationPosition | undefined;
  /**
   * The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('active'|'suspended'|'inactive') | undefined;
  _status?: Element | undefined;
  /**
   * The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
   */
  telecom?: ContactPoint[] | undefined;
  /**
   * Indicates the type of function performed at the location.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Population criteria
 */
export interface MeasureGroupPopulation extends BackboneElement {
  /**
   * The type of population criteria.
   */
  code?: CodeableConcept | undefined;
  /**
   * The name of a valid referenced CQL expression (may be namespaced) that defines this population criteria.
   * In the case of a continuous variable or ratio measure, this may be the name of a function that calculates the value of the individual observation for each patient or event in the population. For these types of measures, individual observations are reported as observation resources included in the evaluatedResources bundle for each patient. See the MeasureReport resource or the Quality Reporting topic for more information.
   */
  criteria: string;
  _criteria?: Element | undefined;
  /**
   * The human readable description of this population criteria.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A unique identifier for the population criteria. This identifier is used to report data against this criteria within the measure report.
   */
  identifier?: Identifier | undefined;
  /**
   * Optional name or short description of this population.
   */
  name?: string | undefined;
  _name?: Element | undefined;
}
/**
 * Stratifier criteria for the measure
 */
export interface MeasureGroupStratifier extends BackboneElement {
  /**
   * The criteria for the stratifier. This must be the name of an expression defined within a referenced library.
   */
  criteria?: string | undefined;
  _criteria?: Element | undefined;
  /**
   * The identifier for the stratifier used to coordinate the reported data back to this stratifier.
   */
  identifier?: Identifier | undefined;
  /**
   * The path to an element that defines the stratifier, specified as a valid FHIR resource path.
   */
  path?: string | undefined;
  _path?: Element | undefined;
}
/**
 * Population criteria group
 */
export interface MeasureGroup extends BackboneElement {
  /**
   * The human readable description of this population group.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A unique identifier for the group. This identifier will used to report data for the group in the measure report.
   */
  identifier: Identifier;
  /**
   * Optional name or short description of this group.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A population criteria for the measure.
   */
  population?: MeasureGroupPopulation[] | undefined;
  /**
   * The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library, or a valid FHIR Resource Path.
   */
  stratifier?: MeasureGroupStratifier[] | undefined;
}
/**
 * What other data should be reported with the measure
 * Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.
 */
export interface MeasureSupplementalData extends BackboneElement {
  /**
   * The criteria for the supplemental data. This must be the name of a valid expression defined within a referenced library, and defines the data to be returned for this element.
   */
  criteria?: string | undefined;
  _criteria?: Element | undefined;
  /**
   * An identifier for the supplemental data.
   */
  identifier?: Identifier | undefined;
  /**
   * The supplemental data to be supplied as part of the measure response, specified as a valid FHIR Resource Path.
   */
  path?: string | undefined;
  _path?: Element | undefined;
  /**
   * An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation.
   */
  usage?: CodeableConcept[] | undefined;
}
export interface Measure extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Measure';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * Provides a summary of relevant clinical guidelines or other clinical recommendations supporting the measure.
   */
  clinicalRecommendationStatement?: string | undefined;
  _clinicalRecommendationStatement?: Element | undefined;
  /**
   * If this is a composite measure, the scoring method used to combine the component measures to determine the composite score.
   */
  compositeScoring?: CodeableConcept | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A contributor to the content of the measure, including authors, editors, reviewers, and endorsers.
   */
  contributor?: Contributor[] | undefined;
  /**
   * A copyright statement relating to the measure and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the measure.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the measure was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the measure changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the measure. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Provides a description of an individual term used within the measure.
   */
  definition?: string[] | undefined;
  _definition?: Element[] | undefined;
  /**
   * A free text natural language description of the measure from a consumer's perspective.
   * This description can be used to capture details such as why the measure was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the measure as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Notices and disclaimers regarding the use of the measure, or related to intellectual property (such as code systems) referenced by the measure.
   */
  disclaimer?: string | undefined;
  _disclaimer?: Element | undefined;
  /**
   * The period during which the measure content was or is planned to be in active use.
   * The effective period for a measure  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  effectivePeriod?: Period | undefined;
  /**
   * A boolean value to indicate that this measure is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of measure that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental measure in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A group of population criteria for the measure.
   */
  group?: MeasureGroup[] | undefined;
  /**
   * Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure.
   */
  guidance?: string | undefined;
  _guidance?: Element | undefined;
  /**
   * A formal identifier that is used to identify this measure when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this measure outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is whthin a range).
   */
  improvementNotation?: string | undefined;
  _improvementNotation?: Element | undefined;
  /**
   * A legal or geographic region in which the measure is intended to be used.
   * It may be possible for the measure to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date.
   * If specified, this is usually after the approval date.
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A reference to a Library resource containing the formal logic used by the measure.
   */
  library?: Reference[] | undefined;
  /**
   * A natural language name identifying the measure. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the measure.
   * Usually an organization, but may be an individual. The publisher (or steward) of the measure is the organization or individual primarily responsible for the maintenance and upkeep of the measure. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the measure. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this measure is needed and why it has been designed as it has.
   * This element does not describe the usage of the measure Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this measure.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result.
   * The measure rate for an organization or clinician is based upon the entities’ aggregate data and summarizes the performance of the entity over a given time period (e.g., monthly, quarterly, yearly). The aggregated data are derived from the results of a specific measure algorithm and, if appropriate, the application of specific risk adjustment models.  Can also be used to describe how to risk adjust the data based on supplemental data elements described in the eMeasure (e.g., pneumonia hospital measures antibiotic selection in the ICU versus non-ICU and then the roll-up of the two). This could be applied to aggregated cohort measure definitions (e.g., CDC's aggregate reporting for TB at the state level).
   */
  rateAggregation?: string | undefined;
  _rateAggregation?: Element | undefined;
  /**
   * Provides a succint statement of the need for the measure. Usually includes statements pertaining to importance criterion: impact, gap in care, and evidence.
   */
  rationale?: string | undefined;
  _rationale?: Element | undefined;
  /**
   * Related artifacts such as additional documentation, justification, or bibliographic references.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * A description of the risk adjustment factors that may impact the resulting score for the measure and how they may be accounted for when computing and reporting measure results.
   * Describes the method of adjusting for clinical severity and conditions present at the start of care that can influence patient outcomes for making valid comparisons of outcome measures across providers. Indicates whether an eMeasure is subject to the statistical process for reducing, removing, or clarifying the influences of confounding factors to allow more useful comparisons.
   */
  riskAdjustment?: string | undefined;
  _riskAdjustment?: Element | undefined;
  /**
   * Indicates how the calculation is performed for the measure, including proportion, ratio, continuous variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.
   */
  scoring?: CodeableConcept | undefined;
  /**
   * The measure set, e.g. Preventive Care and Screening.
   */
  set?: string | undefined;
  _set?: Element | undefined;
  /**
   * The status of this measure. Enables tracking the life-cycle of the content.
   * Allows filtering of measures that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired measure without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.
   * Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.
   */
  supplementalData?: MeasureSupplementalData[] | undefined;
  /**
   * A short, descriptive, user-friendly title for the measure.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptive topics related to the content of the measure. Topics provide a high-level categorization of the type of the measure that can be useful for filtering and searching.
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.
   */
  type?: CodeableConcept[] | undefined;
  /**
   * An absolute URI that is used to identify this measure when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this measure is (or will be) published. The URL SHOULD include the major version of the measure. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * A detailed description of how the measure is used from a clinical perspective.
   */
  usage?: string | undefined;
  _usage?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate measure instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the measure when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the measure author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
   * There may be different measure instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the measure with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * The populations in the group
 */
export interface MeasureReportGroupPopulation extends BackboneElement {
  /**
   * The type of the population.
   */
  code?: CodeableConcept | undefined;
  /**
   * The number of members of the population.
   */
  count?: number | undefined;
  /**
   * The identifier of the population being reported, as defined by the population element of the measure.
   */
  identifier?: Identifier | undefined;
  /**
   * This element refers to a List of patient level MeasureReport resources, one for each patient in this population.
   */
  patients?: Reference | undefined;
}
/**
 * Population results in this stratum
 */
export interface MeasureReportGroupStratifierStratumPopulation extends BackboneElement {
  /**
   * The type of the population.
   */
  code?: CodeableConcept | undefined;
  /**
   * The number of members of the population in this stratum.
   */
  count?: number | undefined;
  /**
   * The identifier of the population being reported, as defined by the population element of the measure.
   */
  identifier?: Identifier | undefined;
  /**
   * This element refers to a List of patient level MeasureReport resources, one for each patient in this population in this stratum.
   */
  patients?: Reference | undefined;
}
/**
 * Stratum results, one for each unique value in the stratifier
 */
export interface MeasureReportGroupStratifierStratum extends BackboneElement {
  /**
   * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
   */
  measureScore?: number | undefined;
  /**
   * The populations that make up the stratum, one for each type of population appropriate to the measure.
   */
  population?: MeasureReportGroupStratifierStratumPopulation[] | undefined;
  /**
   * The value for this stratum, expressed as a string. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Stratification results
 */
export interface MeasureReportGroupStratifier extends BackboneElement {
  /**
   * The identifier of this stratifier, as defined in the measure definition.
   */
  identifier?: Identifier | undefined;
  /**
   * This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
   */
  stratum?: MeasureReportGroupStratifierStratum[] | undefined;
}
/**
 * Measure results for each group
 */
export interface MeasureReportGroup extends BackboneElement {
  /**
   * The identifier of the population group as defined in the measure definition.
   */
  identifier: Identifier;
  /**
   * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
   */
  measureScore?: number | undefined;
  /**
   * The populations that make up the population group, one for each type of population appropriate for the measure.
   */
  population?: MeasureReportGroupPopulation[] | undefined;
  /**
   * When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
   */
  stratifier?: MeasureReportGroupStratifier[] | undefined;
}
export interface MeasureReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MeasureReport';
  /**
   * The date this measure report was generated.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A reference to a Bundle containing the Resources that were used in the evaluation of this report.
   */
  evaluatedResources?: Reference | undefined;
  /**
   * The results of the calculation, one for each population group in the measure.
   */
  group?: MeasureReportGroup[] | undefined;
  /**
   * A formal identifier that is used to identify this report when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 v3 II data type - e.g. to identify this {{title}} outside of FHIR, where the logical URL is not possible to use.
   */
  identifier?: Identifier | undefined;
  /**
   * A reference to the Measure that was evaluated to produce this report.
   */
  measure: Reference;
  /**
   * Optional Patient if the report was requested for a single patient.
   */
  patient?: Reference | undefined;
  /**
   * The reporting period for which the report was calculated.
   */
  period: Period;
  /**
   * Reporting Organization.
   */
  reportingOrganization?: Reference | undefined;
  /**
   * The report status. No data will be available until the report status is complete.
   */
  status: ('complete'|'pending'|'error');
  _status?: Element | undefined;
  /**
   * The type of measure report. This may be an individual report, which provides a single patient's score for the measure; a patient listing, which returns the list of patients that meet the various criteria in the measure; or a summary report, which returns a population count for each of the criteria in the measure.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  type: ('individual'|'patient-list'|'summary');
  _type?: Element | undefined;
}
export interface Media extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Media';
  /**
   * A procedure that is fulfilled in whole or in part by the creation of this media.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Indicates the site on the subject's body where the media was collected (i.e. the target site).
   * If the use case requires BodySite to be handled as a separate resource (e.g. to identify and track separately) then use The standard extension[ body-site-instance](extension-body-site-instance.html).
   */
  bodySite?: CodeableConcept | undefined;
  /**
   * The actual content of the media - inline or by direct reference to the media source file.
   * Recommended content types: image/jpeg, image/png, image/tiff, video/mpeg, audio/mp4, application/dicom. Application/dicom can contain the transfer syntax as a parameter.  For an media that covers a period of time (video/sound), the content.creationTime is the end time. Creation time is used for tracking, organizing versions and searching.
   */
  content: Attachment;
  /**
   * The encounter or episode of care that establishes the context for this media.
   * This will typically be the encounter the media occurred within.
   */
  context?: Reference | undefined;
  /**
   * The device used to collect the media.
   * An extension should be used if further typing of the device is needed.  Scondary devices used to support collecting a media can be represented using either extension or through the Observation.related element.
   */
  device?: Reference | undefined;
  /**
   * The duration of the recording in seconds - for audio and video.
   * The duration might differ from occurrencePeriod if recording was paused.
   */
  duration?: number | undefined;
  /**
   * The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
   */
  frames?: number | undefined;
  /**
   * Height of the image in pixels (photo/video).
   */
  height?: number | undefined;
  /**
   * Identifiers associated with the image - these may include identifiers for the image itself, identifiers for the context of its collection (e.g. series ids) and context ids such as accession numbers or other workflow identifiers.
   * The identifier label and use can be used to determine what kind of identifier it is.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Comments made about the media by the performer, subject or other participants.
   */
  note?: Annotation[] | undefined;
  /**
   * The date and time(s) at which the media was collected.
   */
  occurrenceString?: string | undefined;
  _occurrenceString?: Element | undefined;
  /**
   * The date and time(s) at which the media was collected.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * The person who administered the collection of the image.
   */
  operator?: Reference | undefined;
  /**
   * Describes why the event occurred in coded or textual form.
   * Textual reasons can be caprued using reasonCode.text.
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * Who/What this Media is a record of.
   */
  subject?: Reference | undefined;
  /**
   * Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
   */
  subtype?: CodeableConcept | undefined;
  /**
   * Whether the media is a photo (still image), an audio recording, or a video recording.
   */
  type: ('photo'|'video'|'audio');
  _type?: Element | undefined;
  /**
   * The name of the imaging view e.g. Lateral or Antero-posterior (AP).
   */
  view?: CodeableConcept | undefined;
  /**
   * Width of the image in pixels (photo/video).
   */
  width?: number | undefined;
}
/**
 * Active or inactive ingredient
 * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
 */
export interface MedicationIngredient extends BackboneElement {
  /**
   * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet.
   */
  amount?: Ratio | undefined;
  /**
   * Indication of whether this ingredient affects the therapeutic action of the drug.
   */
  isActive?: boolean | undefined;
  _isActive?: Element | undefined;
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication.
   */
  itemCodeableConcept?: CodeableConcept | undefined;
  /**
   * The actual ingredient - either a substance (simple ingredient) or another medication.
   */
  itemReference?: Reference | undefined;
}
/**
 * Identifies a single production run
 */
export interface MedicationPackageBatch extends BackboneElement {
  /**
   * When this specific batch of product will expire.
   */
  expirationDate?: string | undefined;
  _expirationDate?: Element | undefined;
  /**
   * The assigned lot number of a batch of the specified product.
   */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;
}
/**
 * What is  in the package
 */
export interface MedicationPackageContent extends BackboneElement {
  /**
   * The amount of the product that is in the package.
   */
  amount?: Quantity | undefined;
  /**
   * Identifies one of the items in the package.
   */
  itemCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies one of the items in the package.
   */
  itemReference?: Reference | undefined;
}
/**
 * Details about packaged medications
 */
export interface MedicationPackage extends BackboneElement {
  /**
   * Information about a group of medication produced or packaged from one production run.
   */
  batch?: MedicationPackageBatch[] | undefined;
  /**
   * The kind of container that this package comes as.
   */
  container?: CodeableConcept | undefined;
  /**
   * A set of components that go to make up the described item.
   */
  content?: MedicationPackageContent[] | undefined;
}
export interface Medication extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Medication';
  /**
   * A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
   * Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc.
   */
  code?: CodeableConcept | undefined;
  /**
   * Describes the form of the item.  Powder; tablets; capsule.
   * When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
   */
  form?: CodeableConcept | undefined;
  /**
   * Photo(s) or graphic representation(s) of the medication.
   */
  image?: Attachment[] | undefined;
  /**
   * Identifies a particular constituent of interest in the product.
   * The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
   */
  ingredient?: MedicationIngredient[] | undefined;
  /**
   * Set to true if the item is attributable to a specific manufacturer.
   */
  isBrand?: boolean | undefined;
  _isBrand?: Element | undefined;
  /**
   * Set to true if the medication can be obtained without an order from a prescriber.
   */
  isOverTheCounter?: boolean | undefined;
  _isOverTheCounter?: Element | undefined;
  /**
   * Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
   */
  manufacturer?: Reference | undefined;
  /**
   * Information that only applies to packages (not products).
   */
  package?: MedicationPackage | undefined;
  /**
   * A code to indicate if the medication is in active use.
   * This status is not intended to specify if a medication is part of a formulary.
   */
  status?: ('active'|'inactive'|'entered-in-error') | undefined;
  _status?: Element | undefined;
}
/**
 * Details of how medication was taken
 */
export interface MedicationAdministrationDosage extends BackboneElement {
  /**
   * The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.
   * If the administration is not instantaneous (rate is present), this can be specified to convey the total amount administered over period of time of a single administration.
   */
  dose?: Quantity | undefined;
  /**
   * A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
   * One of the reasons this attribute is not used often, is that the method is often pre-coordinated with the route and/or form of administration.  This means the codes used in route or form may pre-coordinate the method in the route code or the form code.  The implementation decision about what coding system to use for route or form code will determine how frequently the method code will be populated e.g. if route or form code pre-coordinate method code, then this attribute will not be populated often; if there is no pre-coordination then method code may  be used frequently.
   */
  method?: CodeableConcept | undefined;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   * If the rate changes over time, and you want to capture this in MedicationAdministration, then each change should be captured as a distinct MedicationAdministration, with a specific MedicationAdministration.dosage.rate, and the date time when the rate change occurred. Typically, the MedicationAdministration.dosage.rate element is not used to convey an average rate.
   */
  rateQuantity?: Quantity | undefined;
  /**
   * Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
   * If the rate changes over time, and you want to capture this in MedicationAdministration, then each change should be captured as a distinct MedicationAdministration, with a specific MedicationAdministration.dosage.rate, and the date time when the rate change occurred. Typically, the MedicationAdministration.dosage.rate element is not used to convey an average rate.
   */
  rateRatio?: Ratio | undefined;
  /**
   * A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.
   */
  route?: CodeableConcept | undefined;
  /**
   * A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
   * If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [body-site-instance](extension-body-site-instance.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
   */
  site?: CodeableConcept | undefined;
  /**
   * Free text dosage can be used for cases where the dosage administered is too complex to code. When coded dosage is present, the free text dosage may still be present for display to humans.
   * The dosage instructions should reflect the dosage of the medication that was administered.
   */
  text?: string | undefined;
  _text?: Element | undefined;
}
/**
 * Who administered substance
 */
export interface MedicationAdministrationPerformer extends BackboneElement {
  /**
   * The device, practitioner, etc. who performed the action.
   */
  actor: Reference;
  /**
   * The organization the device or practitioner was acting on behalf of.
   */
  onBehalfOf?: Reference | undefined;
}
/**
 * The WG will be updating the MedicationAdministration resource  to adjust each affected resource to align with the workflow pattern (see workflow.html).
 */
export interface MedicationAdministration extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationAdministration';
  /**
   * Indicates the type of medication administration and where the medication is expected to be consumed or administered.
   */
  category?: CodeableConcept | undefined;
  /**
   * The visit, admission or other contact between patient and health care provider the medication administration was performed as part of.
   */
  context?: Reference | undefined;
  /**
   * A protocol, guideline, orderset or other definition that was adhered to in whole or in part by this event.
   */
  definition?: Reference[] | undefined;
  /**
   * The device used in administering the medication to the patient.  For example, a particular infusion pump.
   */
  device?: Reference[] | undefined;
  /**
   * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
   */
  dosage?: MedicationAdministrationDosage | undefined;
  /**
   * A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
   */
  effectiveString?: string | undefined;
  _effectiveString?: Element | undefined;
  /**
   * A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
   */
  effectivePeriod?: Period | undefined;
  /**
   * A summary of the events of interest that have occurred, such as when the administration was verified.
   * This may not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.
   */
  eventHistory?: Reference[] | undefined;
  /**
   * External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
   */
  medicationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
   */
  medicationReference?: Reference | undefined;
  /**
   * Extra information about the medication administration that is not conveyed by the other attributes.
   */
  note?: Annotation[] | undefined;
  /**
   * Set this to true if the record is saying that the medication was NOT administered.
   * This element is labeled as a modifier because it indicates that a administration didn't happen.
   */
  notGiven?: boolean | undefined;
  _notGiven?: Element | undefined;
  /**
   * A larger event of which this particular event is a component or step.
   */
  partOf?: Reference[] | undefined;
  /**
   * The individual who was responsible for giving the medication to the patient.
   */
  performer?: MedicationAdministrationPerformer[] | undefined;
  /**
   * The original request, instruction or authority to perform the administration.
   */
  prescription?: Reference | undefined;
  /**
   * A code indicating why the medication was given.
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * A code indicating why the administration was not performed.
   */
  reasonNotGiven?: CodeableConcept[] | undefined;
  /**
   * Condition or observation that supports why the medication was administered.
   * This is a reference to a condition that is the reason for the medication request.  If only a code exists, use reasonCode.
   */
  reasonReference?: Reference[] | undefined;
  /**
   * Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions it is possible for an administration to be started but not completed or it may be paused while some other process is under way.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('in-progress'|'on-hold'|'completed'|'entered-in-error'|'stopped'|'unknown');
  _status?: Element | undefined;
  /**
   * The person or animal or group receiving the medication.
   */
  subject: Reference;
  /**
   * Additional information (for example, patient height and weight) that supports the administration of the medication.
   */
  supportingInformation?: Reference[] | undefined;
}
/**
 * Who performed event
 * The performer will be reviewed as part of STU4.
 */
export interface MedicationDispensePerformer extends BackboneElement {
  /**
   * The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication.
   */
  actor: Reference;
  /**
   * The organization the device or practitioner was acting on behalf of.
   */
  onBehalfOf?: Reference | undefined;
}
/**
 * Whether a substitution was performed on the dispense
 */
export interface MedicationDispenseSubstitution extends BackboneElement {
  /**
   * Indicates the reason for the substitution of (or lack of substitution) from what was prescribed.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * The person or organization that has primary responsibility for the substitution.
   */
  responsibleParty?: Reference[] | undefined;
  /**
   * A code signifying whether a different drug was dispensed from what was prescribed.
   */
  type?: CodeableConcept | undefined;
  /**
   * True if the dispenser dispensed a different drug or product from what was prescribed.
   */
  wasSubstituted: boolean;
  _wasSubstituted?: Element | undefined;
}
/**
 * The WG will be updating the MedicationDispense resource  to adjust each affected resource to align with the workflow pattern (see workflow.html).
 */
export interface MedicationDispense extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationDispense';
  /**
   * Indicates the medication order that is being dispensed against.
   * Maps to basedOn in Event logical model.
   */
  authorizingPrescription?: Reference[] | undefined;
  /**
   * Indicates type of medication dispense and where the medication is expected to be consumed or administered.
   */
  category?: CodeableConcept | undefined;
  /**
   * The encounter or episode of care that establishes the context for this event.
   */
  context?: Reference | undefined;
  /**
   * The amount of medication expressed as a timing amount.
   */
  daysSupply?: Quantity | undefined;
  /**
   * Identification of the facility/location where the medication was shipped to, as part of the dispense event.
   */
  destination?: Reference | undefined;
  /**
   * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
   */
  detectedIssue?: Reference[] | undefined;
  /**
   * Indicates how the medication is to be used by the patient.
   * When the dose or rate is intended to change over the entire administration period (e.g. Tapering dose prescriptions), multiple instances of dosage instructions will need to be supplied to convey the different doses/rates.
   * The pharmacist reviews the medication order prior to dispense and updates the dosageInstruction based on the actual product being dispensed.
   */
  dosageInstruction?: Dosage[] | undefined;
  /**
   * A summary of the events of interest that have occurred, such as when the dispense was verified.
   * This may not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
   */
  eventHistory?: Reference[] | undefined;
  /**
   * Identifier assigned by the dispensing facility - this is an identifier assigned outside FHIR.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
   */
  medicationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
   */
  medicationReference?: Reference | undefined;
  /**
   * True if the dispense was not performed for some reason.
   */
  notDone?: boolean | undefined;
  _notDone?: Element | undefined;
  /**
   * Indicates the reason why a dispense was not performed.
   */
  notDoneReasonCodeableConcept?: CodeableConcept | undefined;
  /**
   * Indicates the reason why a dispense was not performed.
   */
  notDoneReasonReference?: Reference | undefined;
  /**
   * Extra information about the dispense that could not be conveyed in the other attributes.
   */
  note?: Annotation[] | undefined;
  /**
   * The procedure that the dispense is done because of.
   */
  partOf?: Reference[] | undefined;
  /**
   * Indicates who or what performed the event.  It should be assumed that the performer is the dispenser of the medication.
   * The performer will be reviewed as part of STU4.
   */
  performer?: MedicationDispensePerformer[] | undefined;
  /**
   * The amount of medication that has been dispensed. Includes unit of measure.
   */
  quantity?: Quantity | undefined;
  /**
   * Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
   */
  receiver?: Reference[] | undefined;
  /**
   * A code specifying the state of the set of dispense events.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('preparation'|'in-progress'|'on-hold'|'completed'|'entered-in-error'|'stopped') | undefined;
  _status?: Element | undefined;
  /**
   * A link to a resource representing the person or the group to whom the medication will be given.
   * SubstanceAdministration->subject->Patient.
   */
  subject?: Reference | undefined;
  /**
   * Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
   */
  substitution?: MedicationDispenseSubstitution | undefined;
  /**
   * Additional information that supports the medication being dispensed.
   */
  supportingInformation?: Reference[] | undefined;
  /**
   * Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  type?: CodeableConcept | undefined;
  /**
   * The time the dispensed product was provided to the patient or their representative.
   */
  whenHandedOver?: string | undefined;
  _whenHandedOver?: Element | undefined;
  /**
   * The time when the dispensed product was packaged and reviewed.
   */
  whenPrepared?: string | undefined;
  _whenPrepared?: Element | undefined;
}
/**
 * Medication supply authorization
 */
export interface MedicationRequestDispenseRequest extends BackboneElement {
  /**
   * Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
   * In some situations, this attribute may be used instead of quantity to identify the amount supplied by how long it is expected to last, rather than the physical quantity issued, e.g. 90 days supply of medication (based on an ordered dosage) When possible, it is always better to specify quantity, as this tends to be more precise. expectedSupplyDuration will always be an estimate that can be influenced by external factors.
   */
  expectedSupplyDuration?: Duration | undefined;
  /**
   * An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.
   * If displaying "number of authorized fills", add 1 to this number.
   */
  numberOfRepeatsAllowed?: number | undefined;
  /**
   * Indicates the intended dispensing Organization specified by the prescriber.
   */
  performer?: Reference | undefined;
  /**
   * The amount that is to be dispensed for one fill.
   */
  quantity?: Quantity | undefined;
  /**
   * This indicates the validity period of a prescription (stale dating the Prescription).
   * It reflects the prescribers' perspective for the validity of the prescription. Dispenses must not be made against the prescription outside of this period. The lower-bound of the Dispensing Window signifies the earliest date that the prescription can be filled for the first time. If an upper-bound is not specified then the Prescription is open-ended or will default to a stale-date based on regulations.
   */
  validityPeriod?: Period | undefined;
}
/**
 * Who/What requested the Request
 */
export interface MedicationRequestRequester extends BackboneElement {
  /**
   * The healthcare professional responsible for authorizing the initial prescription.
   * It is expected that the type of requester will be restricted for different stages of a MedicationRequest.  For example, Proposals can be created by a patient, relatedPerson, Practitioner or Device.  Plans can be created by Practitioners, Patients, RelatedPersons and Devices.  Original orders can be created by a Practitioner only.
   */
  agent: Reference;
  /**
   * The organization the device or practitioner was acting on behalf of.
   */
  onBehalfOf?: Reference | undefined;
}
/**
 * Any restrictions on medication substitution
 */
export interface MedicationRequestSubstitution extends BackboneElement {
  /**
   * True if the prescriber allows a different drug to be dispensed from what was prescribed.
   * This element is labeled as a modifer because whether substitution is allow or not cannot be ignored.
   */
  allowed: boolean;
  _allowed?: Element | undefined;
  /**
   * Indicates the reason for the substitution, or why substitution must or must not be performed.
   */
  reason?: CodeableConcept | undefined;
}
export interface MedicationRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationRequest';
  /**
   * The date (and perhaps time) when the prescription was initially written or authored on.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * A plan or request that is fulfilled in whole or in part by this medication request.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Indicates the type of medication order and where the medication is expected to be consumed or administered.
   */
  category?: CodeableConcept | undefined;
  /**
   * A link to an encounter, or episode of care, that identifies the particular occurrence or set occurrences of contact between patient and health care provider.
   * SubstanceAdministration->component->EncounterEvent.
   */
  context?: Reference | undefined;
  /**
   * Protocol or definition followed by this request.
   */
  definition?: Reference[] | undefined;
  /**
   * Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
   */
  detectedIssue?: Reference[] | undefined;
  /**
   * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
   */
  dispenseRequest?: MedicationRequestDispenseRequest | undefined;
  /**
   * Indicates how the medication is to be used by the patient.
   * There are examples where a medication request may include the option of an oral dose or an Intravenous or Intramuscular dose.  For example, "Ondansetron 8mg orally or IV twice a day as needed for nausea" or "Compazine® (prochlorperazine) 5-10mg PO or 25mg PR bid prn nausea or vomiting".  In these cases, two medication requests would be created that could be grouped together.  The decision on which dose and route of administration to use is based on the patient's condition at the time the dose is needed.
   */
  dosageInstruction?: Dosage[] | undefined;
  /**
   * Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
   * This may not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
   */
  eventHistory?: Reference[] | undefined;
  /**
   * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription.
   */
  groupIdentifier?: Identifier | undefined;
  /**
   * This records identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. For example a re-imbursement system might issue its own id for each prescription that is created.  This is particularly important where FHIR only provides part of an entire workflow process where records must be tracked through an entire system.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Whether the request is a proposal, plan, or an original order.
   * It is expected that the type of requester will be restricted for different stages of a MedicationRequest.  For example, Proposals can be created by a patient, relatedPerson, Practitioner or Device.  Plans can be created by Practitioners, Patients, RelatedPersons and Devices.  Original orders can be created by a Practitioner only.
   * An instance-order is an instantiation of a request or order and may be used to populate Medication Administration Record.
   * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
   */
  intent: ('proposal'|'plan'|'order'|'instance-order');
  _intent?: Element | undefined;
  /**
   * Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number or if the medication is compounded or extemporaneously prepared, then you must reference the Medication resource. .
   */
  medicationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number or if the medication is compounded or extemporaneously prepared, then you must reference the Medication resource. .
   */
  medicationReference?: Reference | undefined;
  /**
   * Extra information about the prescription that could not be conveyed by the other attributes.
   */
  note?: Annotation[] | undefined;
  /**
   * Indicates how quickly the Medication Request should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'stat'|'asap') | undefined;
  _priority?: Element | undefined;
  /**
   * A link to a resource representing an earlier order related order or prescription.
   */
  priorPrescription?: Reference | undefined;
  /**
   * The reason or the indication for ordering the medication.
   * This could be a diagnosis code. If a full condition record exists or additional detail is needed, use reasonReference.
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * Condition or observation that supports why the medication was ordered.
   * This is a reference to a condition or observation that is the reason for the medication order.  If only a code exists, use reasonCode.
   */
  reasonReference?: Reference[] | undefined;
  /**
   * The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
   */
  recorder?: Reference | undefined;
  /**
   * The individual, organization or device that initiated the request and has responsibility for its activation.
   */
  requester?: MedicationRequestRequester | undefined;
  /**
   * A code specifying the current state of the order.  Generally this will be active or completed state.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('active'|'on-hold'|'cancelled'|'completed'|'entered-in-error'|'stopped'|'draft'|'unknown') | undefined;
  _status?: Element | undefined;
  /**
   * A link to a resource representing the person or set of individuals to whom the medication will be given.
   * The subject on a medication request is mandatory.  For the secondary use case where the actual subject is not provided, there still must be an anonymized subject specified.
   */
  subject: Reference;
  /**
   * Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
   */
  substitution?: MedicationRequestSubstitution | undefined;
  /**
   * Include additional information (for example, patient height and weight) that supports the ordering of the medication.
   */
  supportingInformation?: Reference[] | undefined;
}
/**
 * When interpreting a medicationStatement, the value of the status and NotTaken needed to be considered:
 * MedicationStatement.status + MedicationStatement.wasNotTaken
 * Status=Active + NotTaken=T = Not currently taking
 * Status=Completed + NotTaken=T = Not taken in the past
 * Status=Intended + NotTaken=T = No intention of taking
 * Status=Active + NotTaken=F = Taking, but not as prescribed
 * Status=Active + NotTaken=F = Taking
 * Status=Intended +NotTaken= F = Will be taking (not started)
 * Status=Completed + NotTaken=F = Taken in past
 * Status=In Error + NotTaken=N/A = In Error.
 */
export interface MedicationStatement extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MedicationStatement';
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this event.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Indicates where type of medication statement and where the medication is expected to be consumed or administered.
   */
  category?: CodeableConcept | undefined;
  /**
   * The encounter or episode of care that establishes the context for this MedicationStatement.
   */
  context?: Reference | undefined;
  /**
   * The date when the medication statement was asserted by the information source.
   */
  dateAsserted?: string | undefined;
  _dateAsserted?: Element | undefined;
  /**
   * Allows linking the MedicationStatement to the underlying MedicationRequest, or to other information that supports or is used to derive the MedicationStatement.
   * Likely references would be to MedicationRequest, MedicationDispense, Claim, Observation or QuestionnaireAnswers.  The most common use cases for deriving a MedicationStatement comes from creating a MedicationStatement from a MedicationRequest or from a lab observation or a claim.  it should be noted that the amount of information that is available varies from the type resource that you derive the MedicationStatement from.
   */
  derivedFrom?: Reference[] | undefined;
  /**
   * Indicates how the medication is/was or should be taken by the patient.
   * The dates included in the dosage on a Medication Statement reflect the dates for a given dose.  For example, "from November 1, 2016 to November 3, 2016, take one tablet daily and from November 4, 2016 to November 7, 2016, take two tablets daily."  It is expected that this specificity may only be populated where the patient brings in their labeled container or where the Medication Statement is derived from a MedicationRequest.
   */
  dosage?: Dosage[] | undefined;
  /**
   * The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
   * This attribute reflects the period over which the patient consumed the medication and is expected to be populated on the majority of Medication Statements. If the medication is still being taken at the time the statement is recorded, the "end" date will be omitted.
   */
  effectiveString?: string | undefined;
  _effectiveString?: Element | undefined;
  /**
   * The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).
   * This attribute reflects the period over which the patient consumed the medication and is expected to be populated on the majority of Medication Statements. If the medication is still being taken at the time the statement is recorded, the "end" date will be omitted.
   */
  effectivePeriod?: Period | undefined;
  /**
   * External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The person or organization that provided the information about the taking of this medication. Note: Use derivedFrom when a MedicationStatement is derived from other resources, e.g Claim or MedicationRequest.
   */
  informationSource?: Reference | undefined;
  /**
   * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
   */
  medicationCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
   * If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example if you require form or lot number, then you must reference the Medication resource. .
   */
  medicationReference?: Reference | undefined;
  /**
   * Provides extra information about the medication statement that is not conveyed by the other attributes.
   */
  note?: Annotation[] | undefined;
  /**
   * A larger event of which this particular event is a component or step.
   */
  partOf?: Reference[] | undefined;
  /**
   * A reason for why the medication is being/was taken.
   * This could be a diagnosis code. If a full condition record exists or additional detail is needed, use reasonForUseReference.
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * A code indicating why the medication was not taken.
   */
  reasonNotTaken?: CodeableConcept[] | undefined;
  /**
   * Condition or observation that supports why the medication is being/was taken.
   * This is a reference to a condition that is the reason why the medication is being/was taken.  If only a code exists, use reasonForUseCode.
   */
  reasonReference?: Reference[] | undefined;
  /**
   * A code representing the patient or other source's judgment about the state of the medication used that this statement is about.  Generally this will be active or completed.
   * MedicationStatement is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for MedicationStatement.status contains codes that assert the status of the use of the medication by the patient (for example, stopped or on hold) as well as codes that assert the status of the medication statement itself (for example, entered in error).
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('active'|'completed'|'entered-in-error'|'intended'|'stopped'|'on-hold');
  _status?: Element | undefined;
  /**
   * The person, animal or group who is/was taking the medication.
   */
  subject: Reference;
  /**
   * Indicator of the certainty of whether the medication was taken by the patient.
   * This element is labeled as a modifier because it indicates that the medication was not taken.
   */
  taken: ('y'|'n'|'unk'|'na');
  _taken?: Element | undefined;
}
/**
 * Responses to this message
 * This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
 */
export interface MessageDefinitionAllowedResponse extends BackboneElement {
  /**
   * A reference to the message definition that must be adhered to by this supported response.
   */
  message: Reference;
  /**
   * Provides a description of the circumstances in which this response should be used (as opposed to one of the alternative responses).
   */
  situation?: string | undefined;
  _situation?: Element | undefined;
}
/**
 * Resource(s) that are the subject of the event
 */
export interface MessageDefinitionFocus extends BackboneElement {
  /**
   * The kind of resource that must be the focus for this message.
   * Multiple focuses addressing different resources may occasionally occur.  E.g. to link or unlink a resource from a particular account or encounter, etc.
   */
  code: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription');
  _code?: Element | undefined;
  /**
   * Identifies the maximum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
   */
  max?: string | undefined;
  _max?: Element | undefined;
  /**
   * Identifies the minimum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
   */
  min?: number | undefined;
  /**
   * A profile that reflects constraints for the focal resource (and potentially for related resources).
   * This should be present for most message definitions.  However, if the message focus is only a single resource and there is no need to include referenced resources or otherwise enforce the presence of particular elements, it can be omitted.
   */
  profile?: Reference | undefined;
}
/**
 * This would be a MIF-level artifact.
 */
export interface MessageDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MessageDefinition';
  /**
   * Indicates what types of messages may be sent as an application-level response to this message.
   * This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
   */
  allowedResponse?: MessageDefinitionAllowedResponse[] | undefined;
  /**
   * The MessageDefinition that is the basis for the contents of this resource.
   */
  base?: Reference | undefined;
  /**
   * The impact of the content of the message.
   */
  category?: ('Consequence'|'Currency'|'Notification') | undefined;
  _category?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the message definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the message definition.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the message definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the message definition changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the message definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the message definition from a consumer's perspective.
   * This description can be used to capture details such as why the message definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the message definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A coded identifier of a supported messaging event.
   */
  event: Coding;
  /**
   * A boolean value to indicate that this message definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of message definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental message definition in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
   */
  focus?: MessageDefinitionFocus[] | undefined;
  /**
   * A formal identifier that is used to identify this message definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this message definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier | undefined;
  /**
   * A legal or geographic region in which the message definition is intended to be used.
   * It may be possible for the message definition to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A natural language name identifying the message definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Identifies a protocol or workflow that this MessageDefinition represents a step in.
   */
  parent?: Reference[] | undefined;
  /**
   * The name of the individual or organization that published the message definition.
   * Usually an organization, but may be an individual. The publisher (or steward) of the message definition is the organization or individual primarily responsible for the maintenance and upkeep of the message definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the message definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this message definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the message definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this message definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * A MessageDefinition that is superseded by this definition.
   */
  replaces?: Reference[] | undefined;
  /**
   * Indicates whether a response is required for this message.
   */
  responseRequired?: boolean | undefined;
  _responseRequired?: Element | undefined;
  /**
   * The status of this message definition. Enables tracking the life-cycle of the content.
   * Allows filtering of message definitions that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired message definition without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the message definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this message definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this message definition is (or will be) published. The URL SHOULD include the major version of the message definition. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate message definition instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the message definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the message definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different message definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the message definition with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Message destination application(s)
 * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
 */
export interface MessageHeaderDestination extends BackboneElement {
  /**
   * Indicates where the message should be routed to.
   * The id may be a non-resolvable URI for systems that do not use standard network-based addresses.
   */
  endpoint: string;
  _endpoint?: Element | undefined;
  /**
   * Human-readable name for the target system.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Identifies the target end system in situations where the initial message transmission is to an intermediary system.
   */
  target?: Reference | undefined;
}
/**
 * If this is a reply to prior message
 */
export interface MessageHeaderResponse extends BackboneElement {
  /**
   * Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.
   * This is a generic response to the request message. Specific data for the response will be found in MessageHeader.focus.
   */
  code: ('ok'|'transient-error'|'fatal-error');
  _code?: Element | undefined;
  /**
   * Full details of any issues found in the message.
   * This SHALL be contained in the bundle. If any of the issues are errors, the response code SHALL be an error.
   */
  details?: Reference | undefined;
  /**
   * The MessageHeader.id of the message to which this message is a response.
   */
  identifier: string;
  _identifier?: Element | undefined;
}
/**
 * Message source application
 */
export interface MessageHeaderSource extends BackboneElement {
  /**
   * An e-mail, phone, website or other contact point to use to resolve issues with message communications.
   */
  contact?: ContactPoint | undefined;
  /**
   * Identifies the routing target to send acknowledgements to.
   * The id may be a non-resolvable URI for systems that do not use standard network-based addresses.
   */
  endpoint: string;
  _endpoint?: Element | undefined;
  /**
   * Human-readable name for the source system.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * May include configuration or other information useful in debugging.
   */
  software?: string | undefined;
  _software?: Element | undefined;
  /**
   * Can convey versions of multiple systems in situations where a message passes through multiple hands.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
export interface MessageHeader extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'MessageHeader';
  /**
   * The logical author of the message - the person or device that decided the described event should happen. When there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.
   * Usually only for the request, but can be used in a response.
   */
  author?: Reference | undefined;
  /**
   * The destination application which the message is intended for.
   * There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
   */
  destination?: MessageHeaderDestination[] | undefined;
  /**
   * The person or device that performed the data entry leading to this message. When there is more than one candidate, pick the most proximal to the message. Can provide other enterers in extensions.
   * Usually only for the request, but can be used in a response.
   */
  enterer?: Reference | undefined;
  /**
   * Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value "http://hl7.org/fhir/message-events".
   */
  event: Coding;
  /**
   * The actual data of the message - a reference to the root/focus class of the event.
   * The data is defined where the transaction type is defined. The transaction data is always included in the bundle that is the full message.  Only the root resource is specified.  The resources it references should be contained in the bundle but are not also listed here.  Multiple repetitions are allowed to cater for merges and other situations with multiple focal targets.
   */
  focus?: Reference[] | undefined;
  /**
   * Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.
   */
  reason?: CodeableConcept | undefined;
  /**
   * Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.
   */
  receiver?: Reference | undefined;
  /**
   * Information about the message that this message is a response to.  Only present if this message is a response.
   */
  response?: MessageHeaderResponse | undefined;
  /**
   * The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.
   * Usually only for the request, but can be used in a response.
   */
  responsible?: Reference | undefined;
  /**
   * Identifies the sending system to allow the use of a trust relationship.
   * Use case is for where a (trusted) sending system is responsible for multiple organizations, and therefore cannot differentiate based on source endpoint / authentication alone.
   */
  sender?: Reference | undefined;
  /**
   * The source application from which this message originated.
   */
  source: MessageHeaderSource;
  /**
   * The time that the message was sent.
   */
  timestamp: string;
  _timestamp?: Element | undefined;
}
/**
 * Unique identifiers used for system
 * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
 */
export interface NamingSystemUniqueId extends BackboneElement {
  /**
   * Notes about the past or intended usage of this identifier.
   * e.g. "must be used in Germany" or "was initially published in error with this value".
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic.
   * Within a registry, a given identifier should only be "active" for a single namespace at a time.  (Ideally, an identifier should only ever be associated with a single namespace across all time).
   */
  period?: Period | undefined;
  /**
   * Indicates whether this identifier is the "preferred" identifier of this type.
   */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;
  /**
   * Identifies the unique identifier scheme used for this particular identifier.
   * Different identifier types may be used in different types of communications (OIDs for v3, URIs for FHIR, etc.).  Other includes RUIDs from v3, standard v2 code name strings, etc.
   */
  type: ('oid'|'uuid'|'uri'|'other');
  _type?: Element | undefined;
  /**
   * The string that should be sent over the wire to identify the code system or identifier system.
   * If the value is a URI intended for use as FHIR system identifier, the URI should not contain "\" or "?" or "," since this makes escaping very difficult.
   */
  value: string;
  _value?: Element | undefined;
}
export interface NamingSystem extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'NamingSystem';
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * The date  (and optionally time) when the naming system was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the naming system changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the naming system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date: string;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the naming system from a consumer's perspective. Details about what the namespace identifies including scope, granularity, version labeling, etc.
   * This description can be used to capture details such as why the naming system was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the naming system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A legal or geographic region in which the naming system is intended to be used.
   * It may be possible for the naming system to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * Indicates the purpose for the naming system - what kinds of things does it make unique?
   */
  kind: ('codesystem'|'identifier'|'root');
  _kind?: Element | undefined;
  /**
   * A natural language name identifying the naming system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly. The"symbolic name" for an OID would be captured as an extension.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the naming system.
   * Usually an organization, but may be an individual. The publisher (or steward) of the naming system is the organization or individual primarily responsible for the maintenance and upkeep of the naming system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the naming system. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * For naming systems that are retired, indicates the naming system that should be used in their place (if any).
   */
  replacedBy?: Reference | undefined;
  /**
   * The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.
   * This is the primary organization.  Responsibility for some aspects of a namespace may be delegated.
   */
  responsible?: string | undefined;
  _responsible?: Element | undefined;
  /**
   * The status of this naming system. Enables tracking the life-cycle of the content.
   * Allows filtering of naming systems that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired naming system without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * Categorizes a naming system for easier search by grouping related naming systems.
   * This will most commonly be used for identifier namespaces, but categories could potentially be useful for code systems and authorities as well.
   */
  type?: CodeableConcept | undefined;
  /**
   * Indicates how the system may be identified when referenced in electronic exchange.
   * Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
   */
  uniqueId: NamingSystemUniqueId[];
  /**
   * Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
   */
  usage?: string | undefined;
  _usage?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate naming system instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
}
/**
 * Formula feeding instruction as structured data
 * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
 */
export interface NutritionOrderEnteralFormulaAdministration extends BackboneElement {
  /**
   * The volume of formula to provide to the patient per the specified administration schedule.
   */
  quantity?: Quantity | undefined;
  /**
   * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
   * Ratio is used when the quantity value in the denominator is not "1", otherwise use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus the Quantity datatype for "50 mL/hr".
   */
  rateQuantity?: Quantity | undefined;
  /**
   * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
   * Ratio is used when the quantity value in the denominator is not "1", otherwise use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus the Quantity datatype for "50 mL/hr".
   */
  rateRatio?: Ratio | undefined;
  /**
   * The time period and frequency at which the enteral formula should be delivered to the patient.
   */
  schedule?: Timing | undefined;
}
/**
 * Enteral formula components
 */
export interface NutritionOrderEnteralFormula extends BackboneElement {
  /**
   * The product or brand name of the type of modular component to be added to the formula.
   */
  additiveProductName?: string | undefined;
  _additiveProductName?: Element | undefined;
  /**
   * Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
   */
  additiveType?: CodeableConcept | undefined;
  /**
   * Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
   * See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
   */
  administration?: NutritionOrderEnteralFormulaAdministration[] | undefined;
  /**
   * Free text formula administration, feeding instructions or additional instructions or information.
   * Free text dosage instructions can be used for cases where the instructions are too complex to code.
   */
  administrationInstruction?: string | undefined;
  _administrationInstruction?: Element | undefined;
  /**
   * The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula".
   */
  baseFormulaProductName?: string | undefined;
  _baseFormulaProductName?: Element | undefined;
  /**
   * The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.
   */
  baseFormulaType?: CodeableConcept | undefined;
  /**
   * The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL.
   */
  caloricDensity?: Quantity | undefined;
  /**
   * The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
   */
  maxVolumeToDeliver?: Quantity | undefined;
  /**
   * The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
   */
  routeofAdministration?: CodeableConcept | undefined;
}
/**
 * Required  nutrient modifications
 */
export interface NutritionOrderOralDietNutrient extends BackboneElement {
  /**
   * The quantity of the specified nutrient to include in diet.
   */
  amount?: Quantity | undefined;
  /**
   * The nutrient that is being modified such as carbohydrate or sodium.
   */
  modifier?: CodeableConcept | undefined;
}
/**
 * Required  texture modifications
 */
export interface NutritionOrderOralDietTexture extends BackboneElement {
  /**
   * The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types.
   * Coupled with the textureModifier; could be (All Foods).
   */
  foodType?: CodeableConcept | undefined;
  /**
   * Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed.
   * Coupled with the foodType (Meat).
   */
  modifier?: CodeableConcept | undefined;
}
/**
 * Oral diet components
 */
export interface NutritionOrderOralDiet extends BackboneElement {
  /**
   * The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.
   */
  fluidConsistencyType?: CodeableConcept[] | undefined;
  /**
   * Free text or additional instructions or information pertaining to the oral diet.
   * Free text dosage instructions can be used for cases where the instructions are too complex to code.
   */
  instruction?: string | undefined;
  _instruction?: Element | undefined;
  /**
   * Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
   */
  nutrient?: NutritionOrderOralDietNutrient[] | undefined;
  /**
   * The time period and frequency at which the diet should be given.  The diet should be given for the combination of all schedules if more than one schedule is present.
   */
  schedule?: Timing[] | undefined;
  /**
   * Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
   */
  texture?: NutritionOrderOralDietTexture[] | undefined;
  /**
   * The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Supplement components
 */
export interface NutritionOrderSupplement extends BackboneElement {
  /**
   * Free text or additional instructions or information pertaining to the oral supplement.
   * Free text dosage instructions can be used for cases where the instructions are too complex to code.
   */
  instruction?: string | undefined;
  _instruction?: Element | undefined;
  /**
   * The product or brand name of the nutritional supplement such as "Acme Protein Shake".
   */
  productName?: string | undefined;
  _productName?: Element | undefined;
  /**
   * The amount of the nutritional supplement to be given.
   */
  quantity?: Quantity | undefined;
  /**
   * The time period and frequency at which the supplement(s) should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present.
   */
  schedule?: Timing[] | undefined;
  /**
   * The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Referenced by an Order Request (workflow).
 */
export interface NutritionOrder extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'NutritionOrder';
  /**
   * A link to a record of allergies or intolerances  which should be included in the nutrition order.
   * Information on a patient's food allergies and intolerances to inform healthcare personnel about the type of foods that the patient shouldn't receive or consume.
   */
  allergyIntolerance?: Reference[] | undefined;
  /**
   * The date and time that this nutrition order was requested.
   */
  dateTime: string;
  _dateTime?: Element | undefined;
  /**
   * An encounter that provides additional information about the healthcare context in which this request is made.
   */
  encounter?: Reference | undefined;
  /**
   * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
   */
  enteralFormula?: NutritionOrderEnteralFormula | undefined;
  /**
   * This modifier is used to convey order-specific modifiers about the type of food that should NOT be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced AllergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
   * Information on a patient's food allergies, intolerances and preferences to inform healthcare personnel about the type  of foods that the patient shouldn't receive or consume.
   */
  excludeFoodModifier?: CodeableConcept[] | undefined;
  /**
   * This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.
   * Information on a patient's food preferences that inform healthcare personnel about the food that the patient should receive or consume.
   */
  foodPreferenceModifier?: CodeableConcept[] | undefined;
  /**
   * Identifiers assigned to this order by the order sender or by the order receiver.
   * The Identifier.type element can be to indicate filler vs. placer if needed.  This is explained in further detail [here](procedurerequest.html#notes).
   */
  identifier?: Identifier[] | undefined;
  /**
   * Diet given orally in contrast to enteral (tube) feeding.
   */
  oralDiet?: NutritionOrderOralDiet | undefined;
  /**
   * The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
   */
  orderer?: Reference | undefined;
  /**
   * The person (patient) who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
   */
  patient: Reference;
  /**
   * The workflow status of the nutrition order/request.
   * Typically the system placing the order sets the status to "requested". Thereafter, the order is maintained by the receiver that updates the status as the request is handled.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('proposed'|'draft'|'planned'|'requested'|'active'|'on-hold'|'completed'|'cancelled'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * Oral nutritional products given in order to add further nutritional value to the patient's diet.
   */
  supplement?: NutritionOrderSupplement[] | undefined;
}
/**
 * Component results
 * For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
 */
export interface ObservationComponent extends BackboneElement {
  /**
   * Describes what was observed. Sometimes this is called the observation "code".
   */
  code: CodeableConcept;
  /**
   * Provides a reason why the expected value in the element Observation.value[x] is missing.
   * "Null" or exceptional values can be represented two ways in FHIR Observations.  One way is to simply include them in the value set and represent the exceptions in the value.  For example, measurement values for a serology test could be  "detected", "not detected", "inconclusive", or  "test not done".   The alternate way is to use the value element for actual observations and use the explicit dataAbsentReason element to record exceptional values.  For example, the dataAbsentReason code "error" could be used when the measurement was not completed.  Because of these options, use-case agreements are required to interpret general observations for exceptional values.
   */
  dataAbsentReason?: CodeableConcept | undefined;
  /**
   * The assessment made based on the result of the observation.  Intended as a simple compact code often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result. Otherwise known as abnormal flag.
   * The component interpretation applies only to the individual component value.  For an overall interpretation all components together use thes Observation.interpretation element.
   */
  interpretation?: CodeableConcept | undefined;
  /**
   * Guidance on how to interpret the value by comparison to a normal or recommended range.
   * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this may not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
   */
  referenceRange?: ObservationReferenceRange[] | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
   */
  valuePeriod?: Period | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
   */
  valueRange?: Range | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
   */
  valueRatio?: Ratio | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Observation.code defines a coded value.   For boolean values use valueCodeableConcept and select codes from <http://hl7.org/fhir/ValueSet/v2-0136> (these "yes/no" concepts can be mapped to the display name "true/false" or other mutually exclusive terms that may be needed").  The element, Observation.value[x], has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueRatio, valueChoice, valuePeriod, valueSampleData, or valueString (the name format is "'value' + the type name" with a capital on the first letter of the type).
   */
  valueSampledData?: SampledData | undefined;
}
/**
 * Provides guide for interpretation
 * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this may not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
 */
export interface ObservationReferenceRange extends BackboneElement {
  /**
   * The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
   */
  age?: Range | undefined;
  /**
   * Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.
   * This SHOULD be populated if there is more than one range.  If this element is not present then the normal population is assumed.
   */
  appliesTo?: CodeableConcept[] | undefined;
  /**
   * The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9).   If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
   */
  high?: Quantity | undefined;
  /**
   * The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9).   If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
   */
  low?: Quantity | undefined;
  /**
   * Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of 'normals'.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
   * This SHOULD be populated if there is more than one range.  If this element is not present then the normal range is assumed.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Resource related to this observation
 * For a discussion on the ways Observations can assembled in groups together see [Notes below](observation.html#4.20.4).
 */
export interface ObservationRelated extends BackboneElement {
  /**
   * A reference to the observation or [QuestionnaireResponse](questionnaireresponse.html#) resource that is related to this observation.
   */
  target: Reference;
  /**
   * A code specifying the kind of relationship that exists with the target resource.
   * The "derived-from" type is the only logical choice when referencing the QuestionnaireAnswer resource.
   */
  type?: ('has-member'|'derived-from'|'sequel-to'|'replaces'|'qualified-by'|'interfered-by') | undefined;
  _type?: Element | undefined;
}
/**
 * Used for simple observations such as device measurements, laboratory atomic results, vital signs, height, weight, smoking status, comments, etc.  Other resources are used to provide context for observations such as lab reports, etc.
 */
export interface Observation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Observation';
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this event.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Indicates the site on the subject's body where the observation was made (i.e. the target site).
   * Only used if not implicit in code found in Observation.code.  In many systems, this may be represented as a related observation instead of an inline component.   If the use case requires BodySite to be handled as a separate resource (e.g. to identify and track separately) then use the standard extension[ body-site-instance](extension-body-site-instance.html).
   */
  bodySite?: CodeableConcept | undefined;
  /**
   * A code that classifies the general type of observation being made.
   * In addition to the required category valueset, this element allows various categorization schemes based on the owner’s definition of the category and effectively multiple categories can be used at once.  The level of granularity is defined by the category concepts in the value set.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Describes what was observed. Sometimes this is called the observation "name".
   */
  code: CodeableConcept;
  /**
   * May include statements about significant, unexpected or unreliable values, or information about the source of the value where this may be relevant to the interpretation of the result.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
   * For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
   */
  component?: ObservationComponent[] | undefined;
  /**
   * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
   * This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter or episode but still be tied to the context of the encounter or episode (e.g. pre-admission lab tests).
   */
  context?: Reference | undefined;
  /**
   * Provides a reason why the expected value in the element Observation.value[x] is missing.
   * Null or exceptional values can be represented two ways in FHIR Observations.  One way is to simply include them in the value set and represent the exceptions in the value.  For example, measurement values for a serology test could be  "detected", "not detected", "inconclusive", or  "specimen unsatisfactory".   The alternate way is to use the value element for actual observations and use the explicit dataAbsentReason element to record exceptional values.  For example, the dataAbsentReason code "error" could be used when the measurement was not completed. Note that an observation may only be reported if there are values to report. For example differential cell counts values may be reported only when > 0.  Because of these options, use-case agreements are required to interpret general observations for null or exceptional values.
   */
  dataAbsentReason?: CodeableConcept | undefined;
  /**
   * The device used to generate the observation data.
   * An extension should be used if further typing of the device is needed.  Devices used to support obtaining an observation can be represented using either an extension or through the Observation.related element.
   */
  device?: Reference | undefined;
  /**
   * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
   * At least a date should be present unless this observation is a historical report.
   */
  effectiveString?: string | undefined;
  _effectiveString?: Element | undefined;
  /**
   * The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
   * At least a date should be present unless this observation is a historical report.
   */
  effectivePeriod?: Period | undefined;
  /**
   * A unique identifier assigned to this observation.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The assessment made based on the result of the observation.  Intended as a simple compact code often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result. Otherwise known as abnormal flag.
   */
  interpretation?: CodeableConcept | undefined;
  /**
   * The date and time this observation was made available to providers, typically after the results have been reviewed and verified.
   * Updated when the result is updated.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * Indicates the mechanism used to perform the observation.
   * Only used if not implicit in code for Observation.code.
   */
  method?: CodeableConcept | undefined;
  /**
   * Who was responsible for asserting the observed value as "true".
   */
  performer?: Reference[] | undefined;
  /**
   * Guidance on how to interpret the value by comparison to a normal or recommended range.
   * Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this may not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
   */
  referenceRange?: ObservationReferenceRange[] | undefined;
  /**
   * A  reference to another resource (usually another Observation) whose relationship is defined by the relationship type code.
   * For a discussion on the ways Observations can assembled in groups together see [Notes below](observation.html#4.20.4).
   */
  related?: ObservationRelated[] | undefined;
  /**
   * The specimen that was used when this observation was made.
   * Should only be used if not implicit in code found in `Observation.code`.  Observations are not made on specimens themselves; they are made on a subject, but in many cases by the means of a specimen. Note that although specimens are often involved, they are not always tracked and reported explicitly. Also note that observation resources may be used in contexts that track the specimen explicitly (e.g. Diagnostic Report).
   */
  specimen?: Reference | undefined;
  /**
   * The status of the result value.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('registered'|'preliminary'|'final'|'amended'|'corrected'|'cancelled'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The patient, or group of patients, location, or device whose characteristics (direct or indirect) are described by the observation and into whose record the observation is placed.  Comments: Indirect characteristics may be those of a specimen, fetus, donor,  other observer (for example a relative or EMT), or any observation made about the subject.
   * One would expect this element to be a cardinality  of 1..1.  The only circumstance in which the subject can be missing is when the observation is made by a device that does not know the patient. In this case, the observation SHALL be matched to a patient through some context/channel matching technique, and at this point, the observation should be updated.
   * If the target of the observation is different than the subject, the general extension [observation-focal-subject](extension-observation-focal-subject.html).  may be used.  However, the distinction between the patient's own value for an observation versus that of the fetus, or the donor or blood product unit, etc., are often specified in the observation code.
   */
  subject?: Reference | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).
   * 
   * If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).
   * 
   * If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).
   * 
   * If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).
   * 
   * If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).
   * 
   * If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
   */
  valuePeriod?: Period | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).
   * 
   * If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).
   * 
   * If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
   */
  valueRange?: Range | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).
   * 
   * If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
   */
  valueRatio?: Ratio | undefined;
  /**
   * The information determined as a result of making the observation, if the information has a simple value.
   * Normally, an observation will have either a single value or a set of related observations. A few observations (e.g. Apgar score) may have both a value and related observations (for an Apgar score, the observations from which the measure is derived). If a value is present, the datatype for this element should be determined by Observation.code. This element has a variable name depending on the type as follows: valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueRange, valueRatio, valueSampledData, valueAttachment, valueTime, valueDateTime, or valuePeriod. (The name format is "'value' + the type name" with a capital on the first letter of the type).
   * 
   * If the data element is usually coded or if the type associated with the Observation.value defines a coded value, use CodeableConcept instead of string datatype even if the value is uncoded text.  A value set is bound to the ValueCodeableConcept element.    For further discussion and examples see the  [notes section](observation.html#notes) below.
   */
  valueSampledData?: SampledData | undefined;
}
/**
 * Define overloaded variants for when  generating code
 * The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
 */
export interface OperationDefinitionOverload extends BackboneElement {
  /**
   * Comments to go on overload.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Name of parameter to include in overload.
   */
  parameterName?: string[] | undefined;
  _parameterName?: Element[] | undefined;
}
/**
 * ValueSet details if this is coded
 */
export interface OperationDefinitionParameterBinding extends BackboneElement {
  /**
   * Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
   * For further discussion, see [Using Terminologies](terminologies.html).
   */
  strength: ('required'|'extensible'|'preferred'|'example');
  _strength?: Element | undefined;
  /**
   * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
   * For value sets with a referenceResource, the display can contain the value set description.  The reference may be version-specific or not.
   */
  valueSetReference?: Reference | undefined;
  /**
   * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
   * For value sets with a referenceResource, the display can contain the value set description.  The reference may be version-specific or not.
   */
  valueSetString?: string | undefined;
  _valueSetString?: Element | undefined;
}
/**
 * Parameters for the operation/query
 * Query Definitions only have one output parameter, named "result". This may not be described, but can be to allow a profile to be defined.
 */
export interface OperationDefinitionParameter extends BackboneElement {
  /**
   * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
   */
  binding?: OperationDefinitionParameterBinding | undefined;
  /**
   * Describes the meaning or use of this parameter.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * The maximum number of times this element is permitted to appear in the request or response.
   */
  max: string;
  _max?: Element | undefined;
  /**
   * The minimum number of times this parameter SHALL appear in the request or response.
   */
  min: number;
  /**
   * The name of used to identify the parameter.
   * This name must be a token (start with a letter in a..z, and only contain letters, numerals, and underscore. Note that for search parameters (type = string, with a search type), the name may be altered by the search modifiers.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The parts of a nested Parameter.
   * Query Definitions only have one output parameter, named "result". This may not be described, but can be to allow a profile to be defined.
   */
  part?: OperationDefinitionParameter[] | undefined;
  /**
   * A profile the specifies the rules that this parameter must conform to.
   */
  profile?: Reference | undefined;
  /**
   * How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'.
   */
  searchType?: ('number'|'date'|'string'|'token'|'reference'|'composite'|'quantity'|'uri') | undefined;
  _searchType?: Element | undefined;
  /**
   * The type for this parameter.
   * if there is no stated parameter, then the parameter is a multi-part parameter; type and must have at least one part defined.
   */
  type?: ('Address'|'Age'|'Annotation'|'Attachment'|'BackboneElement'|'CodeableConcept'|'Coding'|'ContactDetail'|'ContactPoint'|'Contributor'|'Count'|'DataRequirement'|'Distance'|'Dosage'|'Duration'|'Element'|'ElementDefinition'|'Extension'|'HumanName'|'Identifier'|'Meta'|'Money'|'Narrative'|'ParameterDefinition'|'Period'|'Quantity'|'Range'|'Ratio'|'Reference'|'RelatedArtifact'|'SampledData'|'Signature'|'SimpleQuantity'|'Timing'|'TriggerDefinition'|'UsageContext'|'base64Binary'|'boolean'|'code'|'date'|'dateTime'|'decimal'|'id'|'instant'|'integer'|'markdown'|'oid'|'positiveInt'|'string'|'time'|'unsignedInt'|'uri'|'uuid'|'xhtml'|'Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription'|'Type'|'Any') | undefined;
  _type?: Element | undefined;
  /**
   * Whether this is an input or an output parameter.
   * If a parameter name is used for both an input and an output parameter, the parameter should be defined twice.
   */
  use: ('in'|'out');
  _use?: Element | undefined;
}
export interface OperationDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'OperationDefinition';
  /**
   * Indicates that this operation definition is a constraining profile on the base.
   * A constrained profile can make optional parameters required or not used and clarify documentation.
   */
  base?: Reference | undefined;
  /**
   * The name used to invoke the operation.
   * The code does not include the '$' prefix that is always included in the URL when the operation is invoked.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Additional information about how to use this operation or named query.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * The date  (and optionally time) when the operation definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the operation definition changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the operation definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the operation definition from a consumer's perspective.
   * This description can be used to capture details such as why the operation definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the operation definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A boolean value to indicate that this operation definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of operation definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental operation definition in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Operations that are idempotent (see [HTTP specification definition of idempotent](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)) may be invoked by performing an HTTP GET operation instead of a POST.
   */
  idempotent?: boolean | undefined;
  _idempotent?: Element | undefined;
  /**
   * Indicates whether this operation can be invoked on a particular instance of one of the given types.
   */
  instance: boolean;
  _instance?: Element | undefined;
  /**
   * A legal or geographic region in which the operation definition is intended to be used.
   * It may be possible for the operation definition to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * Whether this is an operation or a named query.
   * Named queries are invoked differently, and have different capabilities.
   */
  kind: ('operation'|'query');
  _kind?: Element | undefined;
  /**
   * A natural language name identifying the operation definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.
   * The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
   */
  overload?: OperationDefinitionOverload[] | undefined;
  /**
   * The parameters for the operation/query.
   * Query Definitions only have one output parameter, named "result". This may not be described, but can be to allow a profile to be defined.
   */
  parameter?: OperationDefinitionParameter[] | undefined;
  /**
   * The name of the individual or organization that published the operation definition.
   * Usually an organization, but may be an individual. The publisher (or steward) of the operation definition is the organization or individual primarily responsible for the maintenance and upkeep of the operation definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the operation definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this operation definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the operation definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this operation definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The types on which this operation can be executed.
   * If the type is an abstract resource ("Resource" or "DomainResource") then the operation can be invoked on any concrete specialization.
   */
  resource?: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription')[] | undefined;
  _resource?: Element[] | undefined;
  /**
   * The status of this operation definition. Enables tracking the life-cycle of the content.
   * Allows filtering of operation definitions that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired operation definition without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
   */
  system: boolean;
  _system?: Element | undefined;
  /**
   * Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context).
   */
  type: boolean;
  _type?: Element | undefined;
  /**
   * An absolute URI that is used to identify this operation definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this operation definition is (or will be) published. The URL SHOULD include the major version of the operation definition. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate operation definition instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the operation definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the operation definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different operation definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the operation definition with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * A single issue associated with the action
 */
export interface OperationOutcomeIssue extends BackboneElement {
  /**
   * Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.
   */
  code: ('invalid'|'structure'|'required'|'value'|'invariant'|'security'|'login'|'unknown'|'expired'|'forbidden'|'suppressed'|'processing'|'not-supported'|'duplicate'|'not-found'|'too-long'|'code-invalid'|'extension'|'too-costly'|'business-rule'|'conflict'|'incomplete'|'transient'|'lock-error'|'no-store'|'exception'|'timeout'|'throttled'|'informational');
  _code?: Element | undefined;
  /**
   * Additional details about the error. This may be a text description of the error, or a system code that identifies the error.
   * A human readable description of the error issue SHOULD be placed in details.text.
   */
  details?: CodeableConcept | undefined;
  /**
   * Additional diagnostic information about the issue.  Typically, this may be a description of how a value is erroneous, or a stack dump to help trace the issue.
   * Typically this field is used to provide troubleshooting information about the error.
   */
  diagnostics?: string | undefined;
  _diagnostics?: Element | undefined;
  /**
   * A simple FHIRPath limited to element names, repetition indicators and the default child access that identifies one of the elements in the resource that caused this issue to be raised.
   * The root of the FHIRPath is the resource or bundle that generated OperationOutcome.  Each FHIRPath SHALL resolve to a single node.
   */
  expression?: string[] | undefined;
  _expression?: Element[] | undefined;
  /**
   * For resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child access that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be "http." + the parameter name.
   * The root of the XPath is the resource or bundle that generated OperationOutcome.  Each XPath SHALL resolve to a single node.  The XPath syntax is used whether the referenced instance is expressed in XML or JSON. Note that expression is being trialed as an alternative to XPath.
   */
  location?: string[] | undefined;
  _location?: Element[] | undefined;
  /**
   * Indicates whether the issue indicates a variation from successful processing.
   * This is labeled as "Is Modifier" because applications should not confuse hints and warnings with errors.
   */
  severity: ('fatal'|'error'|'warning'|'information');
  _severity?: Element | undefined;
}
/**
 * Can result from the failure of a REST call or be part of the response message returned from a request message.  If sent with extensions overriding particular issues, might even appear as part of a request message.
 */
export interface OperationOutcome extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'OperationOutcome';
  /**
   * An error, warning or information message that results from a system action.
   */
  issue: OperationOutcomeIssue[];
}
/**
 * Contact for the organization for a certain purpose
 * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
 */
export interface OrganizationContact extends BackboneElement {
  /**
   * Visiting or postal addresses for the contact.
   */
  address?: Address | undefined;
  /**
   * A name associated with the contact.
   */
  name?: HumanName | undefined;
  /**
   * Indicates a purpose for which the contact can be reached.
   */
  purpose?: CodeableConcept | undefined;
  /**
   * A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
   */
  telecom?: ContactPoint[] | undefined;
}
export interface Organization extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Organization';
  /**
   * Whether the organization's record is still in active use.
   * Default is true.
   * This active flag is not intended to be used to mark an organizations as temporarily closed or under construction. Instead the Location(s) within the Organization should have the suspended status. If further details of the reason for the suspension are required, then an extension on this element should be used.
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * An address for the organization.
   * Organization may have multiple addresses with different uses or applicable periods. The use code home is not to be used.
   */
  address?: Address[] | undefined;
  /**
   * A list of alternate names that the organization is known as, or was known as in the past.
   * There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the organization.
   */
  alias?: string[] | undefined;
  _alias?: Element[] | undefined;
  /**
   * Contact for the organization for a certain purpose.
   * Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
   */
  contact?: OrganizationContact[] | undefined;
  /**
   * Technical endpoints providing access to services operated for the organization.
   */
  endpoint?: Reference[] | undefined;
  /**
   * Identifier for the organization that is used to identify the organization across multiple disparate systems.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A name associated with the organization.
   * If the name of an organization changes, consider putting the old name in the alias column so that it can still be located through searches.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The organization of which this organization forms a part.
   */
  partOf?: Reference | undefined;
  /**
   * A contact detail for the organization.
   * The use code home is not to be used. Note that these contacts are not the contact details of people who are employed by or represent the organization, but official contacts for the organization itself.
   */
  telecom?: ContactPoint[] | undefined;
  /**
   * The kind(s) of organization that this is.
   * Organizations can be corporations, wards, sections, clinical teams, government departments, etc. Note that code is generally a classifier of the type of organization; in many applications, codes are used to identity a particular organization (say, ward) as opposed to another of the same type - these are identifiers, not codes
   * When considering if multiple types are appropriate, you should evaluate if child organizations would be a more appropriate use of the concept, as different types likely are in different sub-areas of the organization. This is most likely to be used where type values have orthogonal values, such as a religious, academic and medical center.
   * We expect that some jurisdictions will profile this optionality to be a single cardinality.
   */
  type?: CodeableConcept[] | undefined;
}
/**
 * Operation Parameter
 */
export interface ParametersParameter extends BackboneElement {
  /**
   * The name of the parameter (reference to the operation definition).
   */
  name: string;
  _name?: Element | undefined;
  /**
   * A named part of a multi-part parameter.
   * Only one level of nested parameters is allowed.
   */
  part?: ParametersParameter[] | undefined;
  /**
   * If the parameter is a whole resource.
   */
  resource?: FhirResource | undefined;
  /**
   * If the parameter is a data type.
   */
  valueAddress?: Address | undefined;
  /**
   * If the parameter is a data type.
   */
  valueAge?: Age | undefined;
  /**
   * If the parameter is a data type.
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * If the parameter is a data type.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * If the parameter is a data type.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * If the parameter is a data type.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * If the parameter is a data type.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * If the parameter is a data type.
   */
  valueCoding?: Coding | undefined;
  /**
   * If the parameter is a data type.
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * If the parameter is a data type.
   */
  valueCount?: Count | undefined;
  /**
   * If the parameter is a data type.
   */
  valueNumber?: number | undefined;
  /**
   * If the parameter is a data type.
   */
  valueDistance?: Distance | undefined;
  /**
   * If the parameter is a data type.
   */
  valueDuration?: Duration | undefined;
  /**
   * If the parameter is a data type.
   */
  valueHumanName?: HumanName | undefined;
  /**
   * If the parameter is a data type.
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * If the parameter is a data type.
   */
  valueMeta?: Meta | undefined;
  /**
   * If the parameter is a data type.
   */
  valueMoney?: Money | undefined;
  /**
   * If the parameter is a data type.
   */
  valuePeriod?: Period | undefined;
  /**
   * If the parameter is a data type.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * If the parameter is a data type.
   */
  valueRange?: Range | undefined;
  /**
   * If the parameter is a data type.
   */
  valueRatio?: Ratio | undefined;
  /**
   * If the parameter is a data type.
   */
  valueReference?: Reference | undefined;
  /**
   * If the parameter is a data type.
   */
  valueSampledData?: SampledData | undefined;
  /**
   * If the parameter is a data type.
   */
  valueSignature?: Signature | undefined;
  /**
   * If the parameter is a data type.
   */
  valueTiming?: Timing | undefined;
}
/**
 * The parameters that may be used are defined by the OperationDefinition resource.
 */
export interface Parameters extends Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Parameters';
  /**
   * A parameter passed to or received from the operation.
   */
  parameter?: ParametersParameter[] | undefined;
}
/**
 * This patient is known to be an animal (non-human)
 * The animal element is labeled "Is Modifier" since patients may be non-human. Systems SHALL either handle patient details appropriately (e.g. inform users patient is not human) or reject declared animal records.   The absense of the animal element does not imply that the patient is a human. If a system requires such a positive assertion that the patient is human, an extension will be required.  (Do not use a species of homo-sapiens in animal species, as this would incorrectly infer that the patient is an animal).
 */
export interface PatientAnimal extends BackboneElement {
  /**
   * Identifies the detailed categorization of the kind of animal.
   * Breed MAY be used to provide further taxonomic or non-taxonomic classification.  It may involve local or proprietary designation--such as commercial strain--and/or additional information such as production type.
   */
  breed?: CodeableConcept | undefined;
  /**
   * Indicates the current state of the animal's reproductive organs.
   */
  genderStatus?: CodeableConcept | undefined;
  /**
   * Identifies the high level taxonomic categorization of the kind of animal.
   * If the patient is non-human, at least a species SHALL be specified. Species SHALL be a widely recognised taxonomic classification.  It may or may not be Linnaean taxonomy and may or may not be at the level of species. If the level is finer than species--such as a breed code--the code system used SHALL allow inference of the species.  (The common example is that the word "Hereford" does not allow inference of the species Bos taurus, because there is a Hereford pig breed, but the SNOMED CT code for "Hereford Cattle Breed" does.).
   */
  species: CodeableConcept;
}
/**
 * A list of Languages which may be used to communicate with the patient about his or her health
 * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
 */
export interface PatientCommunication extends BackboneElement {
  /**
   * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
   * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
   */
  language: CodeableConcept;
  /**
   * Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
   * This language is specifically identified for communicating healthcare information.
   */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;
}
/**
 * A contact party (e.g. guardian, partner, friend) for the patient
 * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
 */
export interface PatientContact extends BackboneElement {
  /**
   * Address for the contact person.
   */
  address?: Address | undefined;
  /**
   * Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * A name associated with the contact person.
   */
  name?: HumanName | undefined;
  /**
   * Organization on behalf of which the contact is acting or for which the contact is working.
   */
  organization?: Reference | undefined;
  /**
   * The period during which this contact person or organization is valid to be contacted relating to this patient.
   */
  period?: Period | undefined;
  /**
   * The nature of the relationship between the patient and the contact person.
   */
  relationship?: CodeableConcept[] | undefined;
  /**
   * A contact detail for the person, e.g. a telephone number or an email address.
   * Contact may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Link to another patient resource that concerns the same actual person
 * There is no assumption that linked patient records have mutual links. 
 * This element is labelled as a modifier because it may not be the main Patient resource, and the referenced patient should be used instead of this Patient record. This is when the link.type value is 'replaced-by'.
 */
export interface PatientLink extends BackboneElement {
  /**
   * The other patient resource that the link refers to.
   * Referencing a RelatedPerson here removes the need to use a Person record to associate a Patient and RelatedPerson as the same individual.
   */
  other: Reference;
  /**
   * The type of link between this patient resource and another patient resource.
   */
  type: ('replaced-by'|'replaces'|'refer'|'seealso');
  _type?: Element | undefined;
}
export interface Patient extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Patient';
  /**
   * Whether this patient record is in active use.
   * Default is true. If a record is inactive, and linked to an active record, then future patient/record updates should occur on the other patient
   * This element is labeled as a modifier because when the patient record is marked as not active it is not expected to be used/referenced without being changed back to active.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Addresses for the individual.
   * Patient may have multiple addresses with different uses or applicable periods.
   */
  address?: Address[] | undefined;
  /**
   * This patient is known to be an animal.
   * The animal element is labeled "Is Modifier" since patients may be non-human. Systems SHALL either handle patient details appropriately (e.g. inform users patient is not human) or reject declared animal records.   The absense of the animal element does not imply that the patient is a human. If a system requires such a positive assertion that the patient is human, an extension will be required.  (Do not use a species of homo-sapiens in animal species, as this would incorrectly infer that the patient is an animal).
   */
  animal?: PatientAnimal | undefined;
  /**
   * The date of birth for the individual.
   * At least an estimated year should be provided as a guess if the real DOB is unknown  There is a standard extension "patient-birthTime" available that should be used where Time is required (such as in maternaty/infant care systems).
   */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;
  /**
   * Languages which may be used to communicate with the patient about his or her health.
   * If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
   */
  communication?: PatientCommunication[] | undefined;
  /**
   * A contact party (e.g. guardian, partner, friend) for the patient.
   * Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
   */
  contact?: PatientContact[] | undefined;
  /**
   * Indicates if the individual is deceased or not.
   * If there's no value in the instance it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
   * This element is labeled as a modifier because once a patient is marked as deceased, the actions that are appropriate to perform on the patient may be significantly different.
   */
  deceasedBoolean?: boolean | undefined;
  _deceasedBoolean?: Element | undefined;
  /**
   * Indicates if the individual is deceased or not.
   * If there's no value in the instance it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
   * This element is labeled as a modifier because once a patient is marked as deceased, the actions that are appropriate to perform on the patient may be significantly different.
   */
  deceasedString?: string | undefined;
  _deceasedString?: Element | undefined;
  /**
   * Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
   * The gender may not match the biological sex as determined by genetics, or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than M and F, though the vast majority of systems and contexts only support M and F.  Systems providing decision support or enforcing business rules should ideally do this on the basis of Observations dealing with the specific gender aspect of interest (anatomical, chromosonal, social, etc.)  However, because these observations are infrequently recorded, defaulting to the administrative gender is common practice.  Where such defaulting occurs, rule enforcement should allow for the variation between administrative and biological, chromosonal and other gender aspects.  For example, an alert about a hysterectomy on a male should be handled as a warning or overrideable error, not a "hard" error.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * Patient's nominated care provider.
   * This may be the primary care provider (in a GP context), or it may be a patient nominated care manager in a community/disablity setting, or even organization that will provide people to perform the care provider roles.
   * It is not to be used to record Care Teams, these should be in a CareTeam resource that may be linked to the CarePlan or EpisodeOfCare resources.
   */
  generalPractitioner?: Reference[] | undefined;
  /**
   * An identifier for this patient.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Link to another patient resource that concerns the same actual patient.
   * There is no assumption that linked patient records have mutual links. 
   * This element is labelled as a modifier because it may not be the main Patient resource, and the referenced patient should be used instead of this Patient record. This is when the link.type value is 'replaced-by'.
   */
  link?: PatientLink[] | undefined;
  /**
   * Organization that is the custodian of the patient record.
   * There is only one managing organization for a specific patient record. Other organizations will have their own Patient record, and may use the Link property to join the records together (or a Person resource which can include confidence ratings for the association).
   */
  managingOrganization?: Reference | undefined;
  /**
   * This field contains a patient's most recent marital (civil) status.
   */
  maritalStatus?: CodeableConcept | undefined;
  /**
   * Indicates whether the patient is part of a multiple (bool) or indicates the actual birth order (integer).
   * Where the valueInteger is provided, the number is the birth number in the sequence.
   * E.g. The middle birth in tripplets would be valueInteger=2 and the third born would have valueInteger=3
   * If a bool value was provided for this tripplets examle, then all 3 patient records would have valueBool=true (the ordering is not indicated).
   */
  multipleBirthBoolean?: boolean | undefined;
  _multipleBirthBoolean?: Element | undefined;
  /**
   * Indicates whether the patient is part of a multiple (bool) or indicates the actual birth order (integer).
   * Where the valueInteger is provided, the number is the birth number in the sequence.
   * E.g. The middle birth in tripplets would be valueInteger=2 and the third born would have valueInteger=3
   * If a bool value was provided for this tripplets examle, then all 3 patient records would have valueBool=true (the ordering is not indicated).
   */
  multipleBirthNumber?: number | undefined;
  /**
   * A name associated with the individual.
   * A patient may have multiple names with different uses or applicable periods. For animals, the name is a "HumanName" in the sense that is assigned and used by humans and has the same patterns.
   */
  name?: HumanName[] | undefined;
  /**
   * Image of the patient.
   */
  photo?: Attachment[] | undefined;
  /**
   * A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
   * A Patient may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and also to help with identification. The address may not go directly to the individual, but may reach another party that is able to proxy for the patient (i.e. home phone, or pet owner's phone).
   */
  telecom?: ContactPoint[] | undefined;
}
export interface PaymentNotice extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PaymentNotice';
  /**
   * The date when this resource was created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * The notice business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  organization?: Reference | undefined;
  /**
   * The payment status, typically paid: payment sent, cleared: payment received.
   */
  paymentStatus?: CodeableConcept | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  provider?: Reference | undefined;
  /**
   * Reference of resource for which payment is being made.
   */
  request?: Reference | undefined;
  /**
   * Reference of response to resource for which payment is being made.
   */
  response?: Reference | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * The date when the above payment action occurrred.
   */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;
  /**
   * The Insurer who is target  of the request.
   */
  target?: Reference | undefined;
}
/**
 * List of settlements
 */
export interface PaymentReconciliationDetail extends BackboneElement {
  /**
   * Amount paid for this detail.
   */
  amount?: Money | undefined;
  /**
   * The date of the invoice or financial resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * The organization which is receiving the payment.
   */
  payee?: Reference | undefined;
  /**
   * The claim or financial resource.
   */
  request?: Reference | undefined;
  /**
   * The claim response resource.
   */
  response?: Reference | undefined;
  /**
   * The Organization which submitted the claim or financial transaction.
   */
  submitter?: Reference | undefined;
  /**
   * Code to indicate the nature of the payment, adjustment, funds advance, etc.
   */
  type: CodeableConcept;
}
/**
 * Processing comments
 */
export interface PaymentReconciliationProcessNote extends BackboneElement {
  /**
   * The note text.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The note purpose: Print/Display.
   */
  type?: CodeableConcept | undefined;
}
export interface PaymentReconciliation extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PaymentReconciliation';
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * List of individual settlement amounts and the corresponding transaction.
   */
  detail?: PaymentReconciliationDetail[] | undefined;
  /**
   * A description of the status of the adjudication.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * The form to be used for printing the content.
   */
  form?: CodeableConcept | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The Insurer who produced this adjudicated response.
   */
  organization?: Reference | undefined;
  /**
   * Transaction status: error, complete.
   */
  outcome?: CodeableConcept | undefined;
  /**
   * The period of time for which payments have been gathered into this bulk payment for settlement.
   */
  period?: Period | undefined;
  /**
   * Suite of notes.
   */
  processNote?: PaymentReconciliationProcessNote[] | undefined;
  /**
   * Original request resource reference.
   */
  request?: Reference | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * Total payment amount.
   */
  total?: Money | undefined;
}
/**
 * Link to a resource that concerns the same actual person
 */
export interface PersonLink extends BackboneElement {
  /**
   * Level of assurance that this link is actually associated with the target resource.
   */
  assurance?: ('level1'|'level2'|'level3'|'level4') | undefined;
  _assurance?: Element | undefined;
  /**
   * The resource to which this actual person is associated.
   */
  target: Reference;
}
/**
 * The Person resource does justice to person registries that keep track of persons regardless of their role. The Person resource is also a primary resource to point to for people acting in a particular role such as SubjectofCare, Practitioner, and Agent. Very few attributes are specific to any role and so Person is kept lean. Most attributes are expected to be tied to the role the Person plays rather than the Person himself. Examples of that are Guardian (SubjectofCare), ContactParty (SubjectOfCare, Practitioner), and multipleBirthInd (SubjectofCare).
 */
export interface Person extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Person';
  /**
   * Whether this person's record is in active use.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * One or more addresses for the person.
   * Person may have multiple addresses with different uses or applicable periods.
   */
  address?: Address[] | undefined;
  /**
   * The birth date for the person.
   * At least an estimated year should be provided as a guess if the real DOB is unknown.
   */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;
  /**
   * Administrative Gender.
   * The gender may not match the biological sex as determined by genetics, or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than M and F, though the vast majority of systems and contexts only support M and F.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * Identifier for a person within a particular scope.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Link to a resource that concerns the same actual person.
   */
  link?: PersonLink[] | undefined;
  /**
   * The organization that is the custodian of the person record.
   */
  managingOrganization?: Reference | undefined;
  /**
   * A name associated with the person.
   * Person may have multiple names with different uses or applicable periods.
   */
  name?: HumanName[] | undefined;
  /**
   * An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
   */
  photo?: Attachment | undefined;
  /**
   * A contact detail for the person, e.g. a telephone number or an email address.
   * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Whether or not the action is applicable
 */
export interface PlanDefinitionActionCondition extends BackboneElement {
  /**
   * A brief, natural language description of the condition that effectively communicates the intended semantics.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An expression that returns true or false, indicating whether or not the condition is satisfied.
   * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * The kind of condition.
   * Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe when enter/exit criteria for an action.
   */
  kind: ('applicability'|'start'|'stop');
  _kind?: Element | undefined;
  /**
   * The media type of the language for the expression.
   */
  language?: string | undefined;
  _language?: Element | undefined;
}
/**
 * Dynamic aspects of the definition
 */
export interface PlanDefinitionActionDynamicValue extends BackboneElement {
  /**
   * A brief, natural language description of the intended semantics of the dynamic value.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An expression specifying the value of the customized element.
   * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * The media type of the language for the expression.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression.
   */
  path?: string | undefined;
  _path?: Element | undefined;
}
/**
 * Who should participate in the action
 */
export interface PlanDefinitionActionParticipant extends BackboneElement {
  /**
   * The role the participant should play in performing the described action.
   */
  role?: CodeableConcept | undefined;
  /**
   * The type of participant in the action.
   */
  type: ('patient'|'practitioner'|'related-person');
  _type?: Element | undefined;
}
/**
 * Relationship to another action
 * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
 */
export interface PlanDefinitionActionRelatedAction extends BackboneElement {
  /**
   * The element id of the related action.
   */
  actionId: string;
  _actionId?: Element | undefined;
  /**
   * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
   */
  offsetDuration?: Duration | undefined;
  /**
   * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
   */
  offsetRange?: Range | undefined;
  /**
   * The relationship of this action to the related action.
   */
  relationship: ('before-start'|'before'|'before-end'|'concurrent-with-start'|'concurrent'|'concurrent-with-end'|'after-start'|'after'|'after-end');
  _relationship?: Element | undefined;
}
/**
 * Action defined by the plan
 */
export interface PlanDefinitionAction extends BackboneElement {
  /**
   * Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.
   */
  action?: PlanDefinitionAction[] | undefined;
  /**
   * Defines whether the action can be selected multiple times.
   */
  cardinalityBehavior?: ('single'|'multiple') | undefined;
  _cardinalityBehavior?: Element | undefined;
  /**
   * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a the section of a documentation template.
   */
  code?: CodeableConcept[] | undefined;
  /**
   * An expression that describes applicability criteria, or start/stop conditions for the action.
   */
  condition?: PlanDefinitionActionCondition[] | undefined;
  /**
   * A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken.
   * Note that the definition is optional, and if no definition is specified, a dynamicValue with a root (~) path can be used to define the entire resource dynamically.
   */
  definition?: Reference | undefined;
  /**
   * A short description of the action used to provide a summary to display to the user.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
   */
  documentation?: RelatedArtifact[] | undefined;
  /**
   * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
   */
  dynamicValue?: PlanDefinitionActionDynamicValue[] | undefined;
  /**
   * Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition.
   */
  goalId?: string[] | undefined;
  _goalId?: Element[] | undefined;
  /**
   * Defines the grouping behavior for the action and its children.
   */
  groupingBehavior?: ('visual-group'|'logical-group'|'sentence-group') | undefined;
  _groupingBehavior?: Element | undefined;
  /**
   * Defines input data requirements for the action.
   */
  input?: DataRequirement[] | undefined;
  /**
   * A user-visible label for the action.
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * Defines the outputs of the action, if any.
   */
  output?: DataRequirement[] | undefined;
  /**
   * Indicates who should participate in performing the action described.
   */
  participant?: PlanDefinitionActionParticipant[] | undefined;
  /**
   * Defines whether the action should usually be preselected.
   */
  precheckBehavior?: ('yes'|'no') | undefined;
  _precheckBehavior?: Element | undefined;
  /**
   * A description of why this action is necessary or appropriate.
   * This is different than the clinical evidence documentation, it's an actual business description of the reason for performing the action.
   */
  reason?: CodeableConcept[] | undefined;
  /**
   * A relationship to another action such as "before" or "30-60 minutes after start of".
   * When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
   */
  relatedAction?: PlanDefinitionActionRelatedAction[] | undefined;
  /**
   * Defines the requiredness behavior for the action.
   */
  requiredBehavior?: ('must'|'could'|'must-unless-documented') | undefined;
  _requiredBehavior?: Element | undefined;
  /**
   * Defines the selection behavior for the action and its children.
   */
  selectionBehavior?: ('any'|'all'|'all-or-none'|'exactly-one'|'at-most-one'|'one-or-more') | undefined;
  _selectionBehavior?: Element | undefined;
  /**
   * A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that may not be capable of interpreting it dynamically.
   */
  textEquivalent?: string | undefined;
  _textEquivalent?: Element | undefined;
  /**
   * An optional value describing when the action should be performed.
   */
  timingString?: string | undefined;
  _timingString?: Element | undefined;
  /**
   * An optional value describing when the action should be performed.
   */
  timingDuration?: Duration | undefined;
  /**
   * An optional value describing when the action should be performed.
   */
  timingPeriod?: Period | undefined;
  /**
   * An optional value describing when the action should be performed.
   */
  timingRange?: Range | undefined;
  /**
   * An optional value describing when the action should be performed.
   */
  timingTiming?: Timing | undefined;
  /**
   * The title of the action displayed to a user.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
   */
  transform?: Reference | undefined;
  /**
   * A description of when the action should be triggered.
   */
  triggerDefinition?: TriggerDefinition[] | undefined;
  /**
   * The type of action to perform (create, update, remove).
   */
  type?: Coding | undefined;
}
/**
 * Target outcome for the goal
 */
export interface PlanDefinitionGoalTarget extends BackboneElement {
  /**
   * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. Whan a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
   */
  detailCodeableConcept?: CodeableConcept | undefined;
  /**
   * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. Whan a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
   */
  detailQuantity?: Quantity | undefined;
  /**
   * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. Whan a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
   */
  detailRange?: Range | undefined;
  /**
   * Indicates the timeframe after the start of the goal in which the goal should be met.
   */
  due?: Duration | undefined;
  /**
   * The parameter whose value is to be tracked, e.g. body weigth, blood pressure, or hemoglobin A1c level.
   */
  measure?: CodeableConcept | undefined;
}
/**
 * What the plan is trying to accomplish
 */
export interface PlanDefinitionGoal extends BackboneElement {
  /**
   * Identifies problems, conditions, issues, or concerns the goal is intended to address.
   */
  addresses?: CodeableConcept[] | undefined;
  /**
   * Indicates a category the goal falls within.
   */
  category?: CodeableConcept | undefined;
  /**
   * Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
   * If no code is available, use CodeableConcept.text.
   */
  description: CodeableConcept;
  /**
   * Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.
   */
  documentation?: RelatedArtifact[] | undefined;
  /**
   * Identifies the expected level of importance associated with reaching/sustaining the defined goal.
   */
  priority?: CodeableConcept | undefined;
  /**
   * The event after which the goal should begin being pursued.
   */
  start?: CodeableConcept | undefined;
  /**
   * Indicates what should be done and within what timeframe.
   */
  target?: PlanDefinitionGoalTarget[] | undefined;
}
export interface PlanDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PlanDefinition';
  /**
   * An action to be taken as part of the plan.
   */
  action?: PlanDefinitionAction[] | undefined;
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A contributor to the content of the asset, including authors, editors, reviewers, and endorsers.
   */
  contributor?: Contributor[] | undefined;
  /**
   * A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the plan definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the plan definition changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the plan definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the plan definition from a consumer's perspective.
   * This description can be used to capture details such as why the plan definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the plan definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The period during which the plan definition content was or is planned to be in active use.
   * The effective period for a plan definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  effectivePeriod?: Period | undefined;
  /**
   * A boolean value to indicate that this plan definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of plan definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental plan definition in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
   */
  goal?: PlanDefinitionGoal[] | undefined;
  /**
   * A formal identifier that is used to identify this plan definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this plan definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the plan definition is intended to be used.
   * It may be possible for the plan definition to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date.
   * If specified, this is usually after the approval date.
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A reference to a Library resource containing any formal logic used by the plan definition.
   */
  library?: Reference[] | undefined;
  /**
   * A natural language name identifying the plan definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the plan definition.
   * Usually an organization, but may be an individual. The publisher (or steward) of the plan definition is the organization or individual primarily responsible for the maintenance and upkeep of the plan definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the plan definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this plan definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the plan definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this plan definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Related artifacts such as additional documentation, justification, or bibliographic references.
   * Each related artifact is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * The status of this plan definition. Enables tracking the life-cycle of the content.
   * Allows filtering of plan definitions that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired plan definition without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the plan definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * The type of asset the plan definition represents, e.g. an order set, protocol, or event-condition-action rule.
   */
  type?: CodeableConcept | undefined;
  /**
   * An absolute URI that is used to identify this plan definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this plan definition is (or will be) published. The URL SHOULD include the major version of the plan definition. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * A detailed description of how the asset is used from a clinical perspective.
   */
  usage?: string | undefined;
  _usage?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate plan definition instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the plan definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the plan definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
   * There may be different plan definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the plan definition with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Qualifications obtained by training and certification
 */
export interface PractitionerQualification extends BackboneElement {
  /**
   * Coded representation of the qualification.
   */
  code: CodeableConcept;
  /**
   * An identifier that applies to this person's qualification in this role.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Organization that regulates and issues the qualification.
   */
  issuer?: Reference | undefined;
  /**
   * Period during which the qualification is valid.
   */
  period?: Period | undefined;
}
/**
 * Note that a cab driver no longer fits the bill. You probably would be interested in the organization rather than the individual?
 */
export interface Practitioner extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Practitioner';
  /**
   * Whether this practitioner's record is in active use.
   * Default is true. 
   * If the practitioner is not in use by one organization, then it should mark the period on the PractitonerRole with an end date (even if they are active) as they may be active in another role.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Address(es) of the practitioner that are not role specific (typically home address). 
   * Work addresses are not typically entered in this property as they are usually role dependent.
   * The PractitionerRole does not have an address value on it, as it is expected that the location property be used for this purpose (which has an address).
   */
  address?: Address[] | undefined;
  /**
   * The date of birth for the practitioner.
   */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;
  /**
   * A language the practitioner is able to use in patient communication.
   * The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
   */
  communication?: CodeableConcept[] | undefined;
  /**
   * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * An identifier that applies to this person in this role.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The name(s) associated with the practitioner.
   * The selection of the use property should ensure that there is a single usual name specified, and others use the nickname (alias), old, or other values as appropriate.
   * In general select the value to be used in the ResourceReference.display based on this:
   * 1. There is more than 1 name
   * 2. Use = usual
   * 3. Period is current to the date of the usage
   * 4. Use = official
   * 5. Other order as decided by internal business rules.
   */
  name?: HumanName[] | undefined;
  /**
   * Image of the person.
   */
  photo?: Attachment[] | undefined;
  /**
   * Qualifications obtained by training and certification.
   */
  qualification?: PractitionerQualification[] | undefined;
  /**
   * A contact detail for the practitioner, e.g. a telephone number or an email address.
   * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification
   * These typically will have home numbers, or mobile numbers that are not role specific.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Times the Service Site is available
 * More detailed availability information may be provided in associated Schedule/Slot resources.
 */
export interface PractitionerRoleAvailableTime extends BackboneElement {
  /**
   * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
   */
  allDay?: boolean | undefined;
  _allDay?: Element | undefined;
  /**
   * The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
   * The timezone is expected to be for where this HealthcareService is provided at.
   */
  availableEndTime?: string | undefined;
  _availableEndTime?: Element | undefined;
  /**
   * The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
   * The timezone is expected to be for where this HealthcareService is provided at.
   */
  availableStartTime?: string | undefined;
  _availableStartTime?: Element | undefined;
  /**
   * Indicates which days of the week are available between the start and end Times.
   */
  daysOfWeek?: ('mon'|'tue'|'wed'|'thu'|'fri'|'sat'|'sun')[] | undefined;
  _daysOfWeek?: Element[] | undefined;
}
/**
 * Not available during this time due to provided reason
 */
export interface PractitionerRoleNotAvailable extends BackboneElement {
  /**
   * The reason that can be presented to the user as to why this time is not available.
   */
  description: string;
  _description?: Element | undefined;
  /**
   * Service is not available (seasonally or for a public holiday) from this date.
   */
  during?: Period | undefined;
}
export interface PractitionerRole extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'PractitionerRole';
  /**
   * Whether this practitioner's record is in active use.
   * Default is true. 
   * If the practitioner is not in use by one organization, then it should mark the period on the PractitonerRole with an end date (even if they are active) as they may be active in another role.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
   */
  availabilityExceptions?: string | undefined;
  _availabilityExceptions?: Element | undefined;
  /**
   * A collection of times that the Service Site is available.
   * More detailed availability information may be provided in associated Schedule/Slot resources.
   */
  availableTime?: PractitionerRoleAvailableTime[] | undefined;
  /**
   * Roles which this practitioner is authorized to perform for the organization.
   * A person may have more than one role. At least one role is required.
   */
  code?: CodeableConcept[] | undefined;
  /**
   * Technical endpoints providing access to services operated for the practitioner with this role.
   */
  endpoint?: Reference[] | undefined;
  /**
   * The list of healthcare services that this worker provides for this role's Organization/Location(s).
   */
  healthcareService?: Reference[] | undefined;
  /**
   * Business Identifiers that are specific to a role/location.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The location(s) at which this practitioner provides care.
   */
  location?: Reference[] | undefined;
  /**
   * The HealthcareService is not available during this period of time due to the provided reason.
   */
  notAvailable?: PractitionerRoleNotAvailable[] | undefined;
  /**
   * The organization where the Practitioner performs the roles associated.
   */
  organization?: Reference | undefined;
  /**
   * The period during which the person is authorized to act as a practitioner in these role(s) for the organization.
   */
  period?: Period | undefined;
  /**
   * Practitioner that is able to provide the defined services for the organation.
   */
  practitioner?: Reference | undefined;
  /**
   * Specific specialty of the practitioner.
   */
  specialty?: CodeableConcept[] | undefined;
  /**
   * Contact details that are specific to the role/location/service.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Device changed in procedure
 */
export interface ProcedureFocalDevice extends BackboneElement {
  /**
   * The kind of change that happened to the device during the procedure.
   */
  action?: CodeableConcept | undefined;
  /**
   * The device that was manipulated (changed) during the procedure.
   */
  manipulated: Reference;
}
/**
 * The people who performed the procedure
 */
export interface ProcedurePerformer extends BackboneElement {
  /**
   * The practitioner who was involved in the procedure.
   */
  actor: Reference;
  /**
   * The organization the device or practitioner was acting on behalf of.
   */
  onBehalfOf?: Reference | undefined;
  /**
   * For example: surgeon, anaethetist, endoscopist.
   */
  role?: CodeableConcept | undefined;
}
export interface Procedure extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Procedure';
  /**
   * A reference to a resource that contains details of the request for this procedure.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.
   */
  bodySite?: CodeableConcept[] | undefined;
  /**
   * A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
   */
  category?: CodeableConcept | undefined;
  /**
   * The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
   */
  code?: CodeableConcept | undefined;
  /**
   * Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.
   * If complications are only expressed by the narrative text, they can be captured using the CodeableConcept.text.
   */
  complication?: CodeableConcept[] | undefined;
  /**
   * Any complications that occurred during the procedure, or in the immediate post-performance period.
   */
  complicationDetail?: Reference[] | undefined;
  /**
   * The encounter during which the procedure was performed.
   */
  context?: Reference | undefined;
  /**
   * A protocol, guideline, orderset or other definition that was adhered to in whole or in part by this procedure.
   */
  definition?: Reference[] | undefined;
  /**
   * A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
   */
  focalDevice?: ProcedureFocalDevice[] | undefined;
  /**
   * If the procedure required specific follow up - e.g. removal of sutures. The followup may be represented as a simple note, or could potentially be more complex in which case the CarePlan resource can be used.
   */
  followUp?: CodeableConcept[] | undefined;
  /**
   * This records identifiers associated with this procedure that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
   */
  identifier?: Identifier[] | undefined;
  /**
   * The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.
   */
  location?: Reference | undefined;
  /**
   * Set this to true if the record is saying that the procedure was NOT performed.
   * If true, it means the procedure did not occur as described.  Typically it would be accompanied by attributes describing the type of activity.  It might also be accompanied by body site information or time information (i.e. no procedure was done to the left arm or no procedure was done in this 2-year period).  Specifying additional information such as performer, outcome, etc. is generally inappropriate.  For example, it's not that useful to say "There was no appendectomy done at 12:03pm June 6th by Dr. Smith with a successful outcome" as it implies that there *could* have been an appendectomy done at any other time, by any other clinician or with any other outcome.
   * This element is labeled as a modifier because it indicates that a procedure didn't happen.
   */
  notDone?: boolean | undefined;
  _notDone?: Element | undefined;
  /**
   * A code indicating why the procedure was not performed.
   */
  notDoneReason?: CodeableConcept | undefined;
  /**
   * Any other notes about the procedure.  E.g. the operative notes.
   */
  note?: Annotation[] | undefined;
  /**
   * The outcome of the procedure - did it resolve reasons for the procedure being performed?
   * If outcome contains narrative text only, it can be captured using the CodeableConcept.text.
   */
  outcome?: CodeableConcept | undefined;
  /**
   * A larger event of which this particular procedure is a component or step.
   * The MedicationAdministration has a partOf reference to Procedure, but this is not a circular reference.  For a surgical procedure, the anesthesia related medicationAdministration is part of the procedure.  For an IV medication administration,  the procedure to insert the IV port is part of the medication administration.
   */
  partOf?: Reference[] | undefined;
  /**
   * The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   */
  performedString?: string | undefined;
  _performedString?: Element | undefined;
  /**
   * The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
   */
  performedPeriod?: Period | undefined;
  /**
   * Limited to 'real' people rather than equipment.
   */
  performer?: ProcedurePerformer[] | undefined;
  /**
   * The coded reason why the procedure was performed. This may be coded entity of some type, or may simply be present as text.
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * The condition that is the reason why the procedure was performed.
   * e.g. endoscopy for dilatation and biopsy, combination diagnosis and therapeutic.
   */
  reasonReference?: Reference[] | undefined;
  /**
   * This could be a histology result, pathology report, surgical report, etc..
   * There could potentially be multiple reports - e.g. if this was a procedure which took multiple biopsies resulting in a number of anatomical pathology reports.
   */
  report?: Reference[] | undefined;
  /**
   * A code specifying the state of the procedure. Generally this will be in-progress or completed state.
   * The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the procedure.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('preparation'|'in-progress'|'suspended'|'aborted'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The person, animal or group on which the procedure was performed.
   */
  subject: Reference;
  /**
   * Identifies coded items that were used as part of the procedure.
   * For devices actually implanted or removed, use Procedure.device.
   */
  usedCode?: CodeableConcept[] | undefined;
  /**
   * Identifies medications, devices and any other substance used as part of the procedure.
   * For devices actually implanted or removed, use Procedure.device.
   */
  usedReference?: Reference[] | undefined;
}
/**
 * Who/what is requesting procedure or diagnostic
 * This not the dispatcher, but rather who is the authorizer.
 */
export interface ProcedureRequestRequester extends BackboneElement {
  /**
   * The device, practitioner or organization who initiated the request.
   */
  agent: Reference;
  /**
   * The organization the device or practitioner was acting on behalf of.
   */
  onBehalfOf?: Reference | undefined;
}
export interface ProcedureRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ProcedureRequest';
  /**
   * If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.  For example "pain", "on flare-up", etc.
   */
  asNeededBoolean?: boolean | undefined;
  _asNeededBoolean?: Element | undefined;
  /**
   * If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.  For example "pain", "on flare-up", etc.
   */
  asNeededCodeableConcept?: CodeableConcept | undefined;
  /**
   * When the request transitioned to being actionable.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * Plan/proposal/order fulfilled by this request.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Anatomic location where the procedure should be performed. This is the target site.
   * Only used if not implicit in the code found in ProcedureRequest.type.  If the use case requires BodySite to be handled as a separate resource instead of an inline coded element (e.g. to identify and track separately)  then use the standard extension [procedurerequest-targetBodySite](extension-procedurerequest-targetbodysite.html).
   */
  bodySite?: CodeableConcept[] | undefined;
  /**
   * A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
   * There may be multiple axis of categorization depending on the context or use case for retrieving or displaying the resource.  The level of granularity is defined by the category concepts in the value set.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * A code that identifies a particular procedure, diagnostic investigation, or panel of investigations, that have been requested.
   * Many laboratory and radiology procedure codes embed the specimen/organ system in the test ordeer name, for example,  serum or serum/plasma glucose, or a chest xray. The specimen may not be recorded separately from the test code.
   */
  code: CodeableConcept;
  /**
   * An encounter or episode of care that provides additional information about the healthcare context in which this request is made.
   */
  context?: Reference | undefined;
  /**
   * Protocol or definition followed by this request.
   */
  definition?: Reference[] | undefined;
  /**
   * Set this to true if the record is saying that the procedure should NOT be performed.
   * This element is labeled as a [modifier](conformance-rules.html#isModifier.html) because it indicates that a procedure shouldn't happen, instead of a request for it to happen.  In general, only the code and timeframe will be present, though occasional additional qualifiers such as body site or even performer could be included to narrow the scope of the prohibition.  If the ProcedureRequest.code and ProcedureRequest.doNotPerform both contain negation, that will reinforce prohibition and should not have a double negative interpretation.
   */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;
  /**
   * Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.
   * The identifier.type element is used to distinguish between the identifiers assigned by the orderer (known as the 'Placer' in HL7 v2) and the producer of the observations in response to the order (known as the 'Filler' in HL7 v2).  For further discussion and examples see the resource notes section below.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Whether the request is a proposal, plan, an original order or a reflex order.
   * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
   */
  intent: ('proposal'|'plan'|'order'|'original-order'|'reflex-order'|'filler-order'|'instance-order'|'option');
  _intent?: Element | undefined;
  /**
   * Any other notes and comments made about the service request. For example, letting provider know that "patient hates needles" or other provider instructions.
   */
  note?: Annotation[] | undefined;
  /**
   * The date/time at which the diagnostic testing should occur.
   */
  occurrenceString?: string | undefined;
  _occurrenceString?: Element | undefined;
  /**
   * The date/time at which the diagnostic testing should occur.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * The date/time at which the diagnostic testing should occur.
   */
  occurrenceTiming?: Timing | undefined;
  /**
   * The desired perfomer for doing the diagnostic testing.  For example, the surgeon, dermatopathologist, endoscopist, etc.
   * If needed, use an [extension](extensibility.html) for listing alternative performers and/or roles and/or preference.
   */
  performer?: Reference | undefined;
  /**
   * Desired type of performer for doing the diagnostic testing.
   * this is a  role, not  a participation type.  I.e. does not describe the task, but describes the capacity.  For example, “compounding pharmacy” or “psychiatrist” or “internal referral”.
   */
  performerType?: CodeableConcept | undefined;
  /**
   * Indicates how quickly the ProcedureRequest should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * An explanation or justification for why this diagnostic investigation is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in supportingInformation.
   * This may be used to decide how the diagnostic investigation will be performed, or even if it will be performed at all.   Use CodeableConcept text element if the data is free (uncoded) text as shown in the [CT Scan example](procedurerequest-example-di.html).
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * Indicates another resource that provides a justification for why this diagnostic investigation is being requested.   May relate to the resources referred to in supportingInformation.
   * This may be used to decide how the diagnostic investigation will be performed, or even if it will be performed at all.   Use CodeableConcept text element if the data is free (uncoded) text as shown in the [CT Scan example](procedurerequest-example-di.html).
   */
  reasonReference?: Reference[] | undefined;
  /**
   * Key events in the history of the request.
   * This may not include provenances for all versions of the request – only those deemed “relevant” or important.
   * This SHALL NOT include the Provenance associated with this current version of the resource.  (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update.  Until then, it can be queried directly as the Provenance that points to this version using _revinclude
   * All Provenances should have some historical version of this Request as their subject.
   */
  relevantHistory?: Reference[] | undefined;
  /**
   * The request takes the place of the referenced completed or terminated request(s).
   */
  replaces?: Reference[] | undefined;
  /**
   * The individual who initiated the request and has responsibility for its activation.
   * This not the dispatcher, but rather who is the authorizer.
   */
  requester?: ProcedureRequestRequester | undefined;
  /**
   * A shared identifier common to all procedure or diagnostic requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
   * Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition. Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
   */
  requisition?: Identifier | undefined;
  /**
   * One or more specimens that the laboratory procedure will use.
   * Many diagnostic procedures need a specimen, but the request itself is not actually about the specimen. This element is for when the diagnostic is requested on already existing specimens and the request points to the specimen it applies to.    Conversely, If the request is entered first with an unknown specimen, The [Specimen](specimen.html) resource references to the ProcedureRequest.
   */
  specimen?: Reference[] | undefined;
  /**
   * The status of the order.
   * The status is generally fully in the control of the requester - they determine whether the order is draft or active and, after it has been activated, competed, cancelled or suspended. States relating to the activities of the performer are reflected on either the corresponding event (see [Event Pattern](event.html) for general discussion) or using the [Task](task.html) resource.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('draft'|'active'|'suspended'|'cancelled'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * On whom or what the procedure or diagnostic is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
   */
  subject: Reference;
  /**
   * Additional clinical information about the patient or specimen that may influence the procedure or diagnostics or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.
   */
  supportingInfo?: Reference[] | undefined;
}
/**
 * Items to re-adjudicate
 */
export interface ProcessRequestItem extends BackboneElement {
  /**
   * A service line number.
   */
  sequenceLinkId: number;
}
export interface ProcessRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ProcessRequest';
  /**
   * The type of processing action being requested, for example Reversal, Readjudication, StatusRequest,PendedRequest.
   */
  action?: ('cancel'|'poll'|'reprocess'|'status') | undefined;
  _action?: Element | undefined;
  /**
   * The date when this resource was created.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * Names of resource types to exclude.
   */
  exclude?: string[] | undefined;
  _exclude?: Element[] | undefined;
  /**
   * The ProcessRequest business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Names of resource types to include.
   */
  include?: string[] | undefined;
  _include?: Element[] | undefined;
  /**
   * List of top level items to be re-adjudicated, if none specified then the entire submission is re-adjudicated.
   */
  item?: ProcessRequestItem[] | undefined;
  /**
   * If true remove all history excluding audit.
   */
  nullify?: boolean | undefined;
  _nullify?: Element | undefined;
  /**
   * The organization which is responsible for the action speccified in this request.
   */
  organization?: Reference | undefined;
  /**
   * A period of time during which the fulfilling resources would have been created.
   */
  period?: Period | undefined;
  /**
   * The practitioner who is responsible for the action specified in this request.
   */
  provider?: Reference | undefined;
  /**
   * A reference to supply which authenticates the process.
   */
  reference?: string | undefined;
  _reference?: Element | undefined;
  /**
   * Reference of resource which is the target or subject of this action.
   */
  request?: Reference | undefined;
  /**
   * Reference of a prior response to resource which is the target or subject of this action.
   */
  response?: Reference | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * The organization which is the target of the request.
   */
  target?: Reference | undefined;
}
/**
 * Processing comments or additional requirements
 */
export interface ProcessResponseProcessNote extends BackboneElement {
  /**
   * The note text.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The note purpose: Print/Display.
   */
  type?: CodeableConcept | undefined;
}
export interface ProcessResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ProcessResponse';
  /**
   * Request for additional supporting or authorizing information, such as: documents, images or resources.
   */
  communicationRequest?: Reference[] | undefined;
  /**
   * The date when the enclosed suite of services were performed or completed.
   */
  created?: string | undefined;
  _created?: Element | undefined;
  /**
   * A description of the status of the adjudication or processing.
   */
  disposition?: string | undefined;
  _disposition?: Element | undefined;
  /**
   * Processing errors.
   */
  error?: CodeableConcept[] | undefined;
  /**
   * The form to be used for printing the content.
   */
  form?: CodeableConcept | undefined;
  /**
   * The Response business identifier.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The organization who produced this adjudicated response.
   */
  organization?: Reference | undefined;
  /**
   * Transaction status: error, complete, held.
   */
  outcome?: CodeableConcept | undefined;
  /**
   * Suite of processing notes or additional requirements if the processing has been held.
   */
  processNote?: ProcessResponseProcessNote[] | undefined;
  /**
   * Original request resource reference.
   */
  request?: Reference | undefined;
  /**
   * The organization which is responsible for the services rendered to the patient.
   */
  requestOrganization?: Reference | undefined;
  /**
   * The practitioner who is responsible for the services rendered to the patient.
   */
  requestProvider?: Reference | undefined;
  /**
   * The status of the resource instance.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
}
/**
 * Actor involved
 * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
 */
export interface ProvenanceAgent extends BackboneElement {
  /**
   * The individual, device, or organization for whom the change was made.
   */
  onBehalfOfReference?: Reference | undefined;
  /**
   * The individual, device, or organization for whom the change was made.
   */
  onBehalfOfString?: string | undefined;
  _onBehalfOfString?: Element | undefined;
  /**
   * The type of relationship between agents.
   */
  relatedAgentType?: CodeableConcept | undefined;
  /**
   * The function of the agent with respect to the activity. The security role enabling the agent with respect to the activity.
   * For example: author, performer, enterer, attester, doctor, nurse, clerk, etc.
   */
  role?: CodeableConcept[] | undefined;
  /**
   * The individual, device or organization that participated in the event.
   */
  whoReference?: Reference | undefined;
  /**
   * The individual, device or organization that participated in the event.
   */
  whoString?: string | undefined;
  _whoString?: Element | undefined;
}
/**
 * An entity used in this activity
 * Multiple userIds may be associated with the same Practitioner or other individual across various appearances, each with distinct privileges.
 */
export interface ProvenanceEntity extends BackboneElement {
  /**
   * The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity.
   * A usecase where one Provenance.entity.agent is used where the Entity that was used in the creation/updating of the Target, is not in the context of the same custodianship as the Target, and thus the meaning of Provenance.entity.agent is to say that the entity referenced is managed elsewhere and that this Agent provided access to it.  This would be similar to where the Entity being referenced is managed outside FHIR, such as through HL7 v2, v3, or XDS. This might be where the Entity being referenced is managed in another FHIR resource server. Thus it explains the Provenance of that Entity's use in the context of this Provenance activity.
   */
  agent?: ProvenanceAgent[] | undefined;
  /**
   * How the entity was used during the activity.
   */
  role: ('derivation'|'revision'|'quotation'|'source'|'removal');
  _role?: Element | undefined;
  /**
   * Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
   * Identity may be a reference to a resource or to something else, depending on the type.
   */
  whatIdentifier?: Identifier | undefined;
  /**
   * Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
   * Identity may be a reference to a resource or to something else, depending on the type.
   */
  whatReference?: Reference | undefined;
  /**
   * Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
   * Identity may be a reference to a resource or to something else, depending on the type.
   */
  whatString?: string | undefined;
  _whatString?: Element | undefined;
}
/**
 * Some parties may be duplicated between the target resource and its provenance.  For instance, the prescriber is usually (but not always) the author of the prescription resource. This resource is defined with close consideration for W3C Provenance.
 */
export interface Provenance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Provenance';
  /**
   * An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
   */
  activity?: Coding | undefined;
  /**
   * An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.
   * Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
   */
  agent: ProvenanceAgent[];
  /**
   * An entity used in this activity.
   * Multiple userIds may be associated with the same Practitioner or other individual across various appearances, each with distinct privileges.
   */
  entity?: ProvenanceEntity[] | undefined;
  /**
   * Where the activity occurred, if relevant.
   */
  location?: Reference | undefined;
  /**
   * The period during which the activity occurred.
   * The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
   */
  period?: Period | undefined;
  /**
   * Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
   * For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
   */
  policy?: string[] | undefined;
  _policy?: Element[] | undefined;
  /**
   * The reason that the activity was taking place.
   */
  reason?: Coding[] | undefined;
  /**
   * The instant of time at which the activity was recorded.
   * This can be a little different from the time stamp on the resource if there is a delay between recording the event and updating the provenance and target resource.
   */
  recorded: string;
  _recorded?: Element | undefined;
  /**
   * A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
   */
  signature?: Signature[] | undefined;
  /**
   * The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.
   * Target references are usually version specific, but may not be, if a version has not been assigned or if the provenance information is part of the set of resources being maintained (i.e. a document). When using the RESTful API, the identity of the resource may not be known (especially not the version specific one); the client may either submit the resource first, and then the provenance, or it may submit both using a single transaction. See the notes on transaction for further discussion.
   */
  target: Reference[];
}
/**
 * Only allow data when
 * If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.
 * This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met.
 */
export interface QuestionnaireItemEnableWhen extends BackboneElement {
  /**
   * An answer that the referenced question must match in order for the item to be enabled.
   * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
   * Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
   * The dataType of this element must be the same as the data type of the question being referenced.
   */
  answerAttachment?: Attachment | undefined;
  /**
   * An answer that the referenced question must match in order for the item to be enabled.
   * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
   * Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
   * The dataType of this element must be the same as the data type of the question being referenced.
   */
  answerBoolean?: boolean | undefined;
  _answerBoolean?: Element | undefined;
  /**
   * An answer that the referenced question must match in order for the item to be enabled.
   * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
   * Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
   * The dataType of this element must be the same as the data type of the question being referenced.
   */
  answerCoding?: Coding | undefined;
  /**
   * An answer that the referenced question must match in order for the item to be enabled.
   * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
   * Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
   * The dataType of this element must be the same as the data type of the question being referenced.
   */
  answerString?: string | undefined;
  _answerString?: Element | undefined;
  /**
   * An answer that the referenced question must match in order for the item to be enabled.
   * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
   * Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
   * The dataType of this element must be the same as the data type of the question being referenced.
   */
  answerNumber?: number | undefined;
  /**
   * An answer that the referenced question must match in order for the item to be enabled.
   * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
   * Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
   * The dataType of this element must be the same as the data type of the question being referenced.
   */
  answerQuantity?: Quantity | undefined;
  /**
   * An answer that the referenced question must match in order for the item to be enabled.
   * Multiple answers are treated as "or".  E.g. Enable if question 1 = A, C or E.  
   * Components not specified in the answer do not need to match.  For example, if enableWhen specifies code + system for a Coding, it is ok if the answer has a "display" element.  I.e. treat the answer as a 'pattern'.
   * The dataType of this element must be the same as the data type of the question being referenced.
   */
  answerReference?: Reference | undefined;
  /**
   * An indication that this item should be enabled only if the specified question is answered (hasAnswer=true) or not answered (hasAnswer=false).
   * If answered=false and answer values are also provided, then they are treated as "or".  I.e. "Enable if the question is unanswered or the answer is one of the specified values".  If answered=true and answers are present, one of the specified answers must be met. (So there's little reason to specify answered=true if answers are present.).
   */
  hasAnswer?: boolean | undefined;
  _hasAnswer?: Element | undefined;
  /**
   * The linkId for the question whose answer (or lack of answer) governs whether this item is enabled.
   * If multiple question occurrences are present for the same question (same linkId), then this refers to the nearest question occurrence reachable by tracing first the "ancestor" axis and then the "preceding" axis and then the "following" axis.
   */
  question: string;
  _question?: Element | undefined;
}
/**
 * Permitted answer
 * This element can be used when the value set machinery of options is deemed too cumbersome or when there's a need to capture options that are not codes.
 */
export interface QuestionnaireItemOption extends BackboneElement {
  /**
   * A potential answer that's allowed as the answer to this question.
   * The data type of the value must agree with the item.type.
   */
  valueCoding?: Coding | undefined;
  /**
   * A potential answer that's allowed as the answer to this question.
   * The data type of the value must agree with the item.type.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * A potential answer that's allowed as the answer to this question.
   * The data type of the value must agree with the item.type.
   */
  valueNumber?: number | undefined;
}
/**
 * Questions and sections within the Questionnaire
 * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
 */
export interface QuestionnaireItem extends BackboneElement {
  /**
   * A terminology code that corresponds to this group or question (e.g. a code from LOINC, which defines many questions and answers).
   * The value may come from the ElementDefinition referred to by .definition.
   */
  code?: Coding[] | undefined;
  /**
   * A reference to an [ElementDefinition](elementdefinition.html) that provides the details for the item. If a definition is provided, then the following element values can be inferred from the definition: 
   * * code (ElementDefinition.code)
   * * type (ElementDefinition.type)
   * * required (ElementDefinition.min)
   * * repeats (ElementDefinition.max)
   * * maxLength (ElementDefinition.maxLength)
   * * options (ElementDefinition.binding)
   * Any information provided in these elements on a Questionnaire Item overrides the information from the definition.
   * the URI refers to an ElementDefinition in either a [StructureDefinition](structuredefinition.html#) or a [DataElement](dataelement.html#), and always starts with the canonical URL for the target resource. When referring to a StructureDefinition, a fragment identifier is used to specify the element definition by its id [Element.id](element-definitions.html#Element.id). E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x]. In the absence of a fragment identifier, the first/root element definition in the target is the matching element definition. Note that [LOINC codes](loinc.html#dataelements) implicitly define DataElement resources.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.
   * If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.
   * This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met.
   */
  enableWhen?: QuestionnaireItemEnableWhen[] | undefined;
  /**
   * The value that should be defaulted when initially rendering the questionnaire for user input.
   * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
   * The data type of initial[x] must agree with the item.type.
   */
  initialAttachment?: Attachment | undefined;
  /**
   * The value that should be defaulted when initially rendering the questionnaire for user input.
   * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
   * The data type of initial[x] must agree with the item.type.
   */
  initialBoolean?: boolean | undefined;
  _initialBoolean?: Element | undefined;
  /**
   * The value that should be defaulted when initially rendering the questionnaire for user input.
   * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
   * The data type of initial[x] must agree with the item.type.
   */
  initialCoding?: Coding | undefined;
  /**
   * The value that should be defaulted when initially rendering the questionnaire for user input.
   * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
   * The data type of initial[x] must agree with the item.type.
   */
  initialString?: string | undefined;
  _initialString?: Element | undefined;
  /**
   * The value that should be defaulted when initially rendering the questionnaire for user input.
   * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
   * The data type of initial[x] must agree with the item.type.
   */
  initialNumber?: number | undefined;
  /**
   * The value that should be defaulted when initially rendering the questionnaire for user input.
   * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
   * The data type of initial[x] must agree with the item.type.
   */
  initialQuantity?: Quantity | undefined;
  /**
   * The value that should be defaulted when initially rendering the questionnaire for user input.
   * The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that default values can influence results.
   * The data type of initial[x] must agree with the item.type.
   */
  initialReference?: Reference | undefined;
  /**
   * Text, questions and other groups to be nested beneath a question or group.
   * There is no specified limit to the depth of nesting.  However, Questionnaire authors are encouraged to consider the impact on the user and user interface of overly deep nesting.
   */
  item?: QuestionnaireItem[] | undefined;
  /**
   * An identifier that is unique within the Questionnaire allowing linkage to the equivalent item in a QuestionnaireResponse resource.
   * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.
   */
  linkId: string;
  _linkId?: Element | undefined;
  /**
   * The maximum number of characters that are permitted in the answer to be considered a "valid" QuestionnaireResponse.
   * For base64binary, reflects the number of characters representing the encoded data, not the number of bytes of the binary data. The value may come from the ElementDefinition referred to by .definition.
   */
  maxLength?: number | undefined;
  /**
   * One of the permitted answers for a "choice" or "open-choice" question.
   * This element can be used when the value set machinery of options is deemed too cumbersome or when there's a need to capture options that are not codes.
   */
  option?: QuestionnaireItemOption[] | undefined;
  /**
   * A reference to a value set containing a list of codes representing permitted answers for a "choice" or "open-choice" question.
   * LOINC defines many useful value sets for questionnaire responses. See [LOINC Answer Lists](loinc.html#alist). The value may come from the ElementDefinition referred to by .definition.
   */
  options?: Reference | undefined;
  /**
   * A short label for a particular group, question or set of display text within the questionnaire used for reference by the individual completing the questionnaire.
   * These are generally unique within a questionnaire, though this is not guaranteed. Some questionnaires may have multiple questions with the same label with logic to control which gets exposed.
   * Typically these won't be used for "display" items, though such use is not prohibited.
   * Systems SHOULD NOT generate their own prefixes if prefixes are defined for any items within a Questionnaire.
   */
  prefix?: string | undefined;
  _prefix?: Element | undefined;
  /**
   * An indication, when true, that the value cannot be changed by a human respondent to the Questionnaire.
   * The value of readOnly elements can be established by asserting  extensions for defaultValues, linkages that support pre-population and/or extensions that support calculation based on other answers.
   */
  readOnly?: boolean | undefined;
  _readOnly?: Element | undefined;
  /**
   * An indication, if true, that the item may occur multiple times in the response, collecting multiple answers answers for questions or multiple sets of answers for groups.
   * If a question is marked as repeats=true, then multiple answers can be provided for the question in the corresponding QuestionnaireResponse.  When rendering the questionnaire, it is up to the rendering software whether to render the question text for each answer repetition or to simply list each of the answers beneath the question.  (Which is most appropriate visually may depend on the type of answer as well as whether there are nested items.). The value may come from the ElementDefinition referred to by .definition.
   */
  repeats?: boolean | undefined;
  _repeats?: Element | undefined;
  /**
   * An indication, if true, that the item must be present in a "completed" QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire.
   * Questionnaire.item.required only has meaning for elements that are conditionally enabled with enableWhen if the condition evaluates to true.  If an item that contains other items is marked as required, that does not automatically make the contained elements required (though required groups must contain at least one child element). The value may come from the ElementDefinition referred to by .definition.
   */
  required?: boolean | undefined;
  _required?: Element | undefined;
  /**
   * The name of a section, the text of a question or text content for a display item.
   */
  text?: string | undefined;
  _text?: Element | undefined;
  /**
   * The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, coded choice, etc.).
   * Additional constraints on the type of answer can be conveyed by extensions. The value may come from the ElementDefinition referred to by .definition.
   */
  type: ('group'|'display'|'boolean'|'decimal'|'integer'|'date'|'dateTime'|'time'|'string'|'text'|'url'|'choice'|'open-choice'|'attachment'|'reference'|'quantity');
  _type?: Element | undefined;
}
export interface Questionnaire extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Questionnaire';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * An identifier for this question or group of questions in a particular terminology such as LOINC.
   */
  code?: Coding[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the questionnaire was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the questionnaire changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the questionnaire. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the questionnaire from a consumer's perspective.
   * This description can be used to capture details such as why the questionnaire was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the questionnaire as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The period during which the questionnaire content was or is planned to be in active use.
   * The effective period for a questionnaire  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  effectivePeriod?: Period | undefined;
  /**
   * A boolean value to indicate that this questionnaire is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of questionnaire that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental questionnaire in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this questionnaire when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this questionnaire outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A particular question, question grouping or display text that is part of the questionnaire.
   * The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
   */
  item?: QuestionnaireItem[] | undefined;
  /**
   * A legal or geographic region in which the questionnaire is intended to be used.
   * It may be possible for the questionnaire to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date.
   * If specified, this is usually after the approval date.
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the questionnaire. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the questionnaire.
   * Usually an organization, but may be an individual. The publisher (or steward) of the questionnaire is the organization or individual primarily responsible for the maintenance and upkeep of the questionnaire. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the questionnaire. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this questionnaire is needed and why it has been designed as it has.
   * This element does not describe the usage of the questionnaire Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this questionnaire.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The status of this questionnaire. Enables tracking the life-cycle of the content.
   * Allows filtering of questionnaires that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired questionnaire without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * The types of subjects that can be the subject of responses created for the questionnaire.
   * If none are specified, then the subject is unlimited.
   */
  subjectType?: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription')[] | undefined;
  _subjectType?: Element[] | undefined;
  /**
   * A short, descriptive, user-friendly title for the questionnaire.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this questionnaire is (or will be) published. The URL SHOULD include the major version of the questionnaire. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate questionnaire instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the questionnaire when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the questionnaire author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different questionnaire instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the questionnaire with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * The response(s) to the question
 * The value is nested because we cannot have a repeating structure that has variable type.
 */
export interface QuestionnaireResponseItemAnswer extends BackboneElement {
  /**
   * Nested groups and/or questions found within this particular answer.
   */
  item?: QuestionnaireResponseItem[] | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
   */
  valueCoding?: Coding | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
   */
  valueNumber?: number | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The answer (or one of the answers) provided by the respondent to the question.
   * More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions.
   */
  valueReference?: Reference | undefined;
}
/**
 * Groups and questions
 * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).
 */
export interface QuestionnaireResponseItem extends BackboneElement {
  /**
   * The respondent's answer(s) to the question.
   * The value is nested because we cannot have a repeating structure that has variable type.
   */
  answer?: QuestionnaireResponseItemAnswer[] | undefined;
  /**
   * A reference to an [ElementDefinition](elementdefinition.html) that provides the details for the item.
   * The ElementDefinition must be in a [StructureDefinition](structuredefinition.html) or a [DataElement](dataelement.html), and must have a fragment identifier that identifies the specific data element by its id (Element.id). E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x].
   * There is no need for this element if the item pointed to by the linkId has a definition listed.
   */
  definition?: string | undefined;
  _definition?: Element | undefined;
  /**
   * Questions or sub-groups nested beneath a question or group.
   */
  item?: QuestionnaireResponseItem[] | undefined;
  /**
   * The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource.
   */
  linkId: string;
  _linkId?: Element | undefined;
  /**
   * More specific subject this section's answers are about, details the subject given in QuestionnaireResponse.
   */
  subject?: Reference | undefined;
  /**
   * Text that is displayed above the contents of the group or as the text of the question being answered.
   */
  text?: string | undefined;
  _text?: Element | undefined;
}
/**
 * The QuestionnaireResponse contains enough information about the questions asked and their organization that it can be interpreted somewhat independently from the Questionnaire it is based on.  I.e. You don't need access to the Questionnaire in order to extract basic information from a QuestionnaireResponse.
 */
export interface QuestionnaireResponse extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'QuestionnaireResponse';
  /**
   * Person who received the answers to the questions in the QuestionnaireResponse and recorded them in the system.
   * Mapping a subject's answers to multiple choice options and determining what to put in the textual answer is a matter of interpretation.  Authoring by device would indicate that some portion of the questionnaire had been auto-populated.
   */
  author?: Reference | undefined;
  /**
   * The date and/or time that this set of answers were last changed.
   * May be different from the lastUpdateTime of the resource itself, because that reflects when the data was known to the server, not when the data was captured.
   * This element is optional to allow for systems that may not know the value, however it SHOULD be populated if possible.
   */
  authored?: string | undefined;
  _authored?: Element | undefined;
  /**
   * The order, proposal or plan that is fulfilled in whole or in part by this QuestionnaireResponse.  For example, a ProcedureRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The encounter or episode of care with primary association to the questionnaire response.
   * A questionnaire that was initiated during an encounter but not fully completed during the encounter would still generally be associated with the encounter.
   */
  context?: Reference | undefined;
  /**
   * A business identifier assigned to a particular completed (or partially completed) questionnaire.
   */
  identifier?: Identifier | undefined;
  /**
   * A group or question item from the original questionnaire for which answers are provided.
   * Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).
   */
  item?: QuestionnaireResponseItem[] | undefined;
  /**
   * A procedure or observation that this questionnaire was performed as part of the execution of.  For example, the surgery a checklist was executed as part of.
   * Composition of questionnaire responses will be handled by the parent questionnaire having answers that reference the child questionnaire.  For relationships to referrals, and other types of requests, use basedOn.
   */
  parent?: Reference[] | undefined;
  /**
   * The Questionnaire that defines and organizes the questions for which answers are being provided.
   * If a QuestionnaireResponse references a Questionnaire, then the QuestionnaireResponse structure must be consistent with the Questionnaire (i.e. questions must be organized into the same groups, nested questions must still be nested, etc.).
   */
  questionnaire?: Reference | undefined;
  /**
   * The person who answered the questions about the subject.
   * If not specified, no inference can be made about who provided the data.
   */
  source?: Reference | undefined;
  /**
   * The position of the questionnaire response within its overall lifecycle.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('in-progress'|'completed'|'amended'|'entered-in-error'|'stopped');
  _status?: Element | undefined;
  /**
   * The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.
   * If the Questionnaire declared a subjectType, the resource pointed to by this element must be an instance of one of the listed types.
   */
  subject?: Reference | undefined;
}
/**
 * Who/what is requesting service
 */
export interface ReferralRequestRequester extends BackboneElement {
  /**
   * The device, practitioner, etc. who initiated the request.
   */
  agent: Reference;
  /**
   * The organization the device or practitioner was acting on behalf of.
   */
  onBehalfOf?: Reference | undefined;
}
export interface ReferralRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ReferralRequest';
  /**
   * Date/DateTime of creation for draft requests and date of activation for active requests.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * Indicates any plans, proposals or orders that this request is intended to satisfy - in whole or in part.
   */
  basedOn?: Reference[] | undefined;
  /**
   * The encounter at which the request for referral or transfer of care is initiated.
   */
  context?: Reference | undefined;
  /**
   * A protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
   */
  definition?: Reference[] | undefined;
  /**
   * The reason element gives a short description of why the referral is being made, the description expands on this to support a more complete clinical summary.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The business identifier of the logical "grouping" request/order that this referral is a part of.
   */
  groupIdentifier?: Identifier | undefined;
  /**
   * Business identifier that uniquely identifies the referral/care transfer request instance.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Distinguishes the "level" of authorization/demand implicit in this request.
   */
  intent: ('proposal'|'plan'|'order'|'original-order'|'reflex-order'|'filler-order'|'instance-order'|'option');
  _intent?: Element | undefined;
  /**
   * Comments made about the referral request by any of the participants.
   */
  note?: Annotation[] | undefined;
  /**
   * The period of time within which the services identified in the referral/transfer of care is specified or required to occur.
   * When the occurrenceDateTime is used, then it is indicating that the requested service must happen before the specified date.
   */
  occurrenceString?: string | undefined;
  _occurrenceString?: Element | undefined;
  /**
   * The period of time within which the services identified in the referral/transfer of care is specified or required to occur.
   * When the occurrenceDateTime is used, then it is indicating that the requested service must happen before the specified date.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * An indication of the urgency of referral (or where applicable the type of transfer of care) request.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * Description of clinical condition indicating why referral/transfer of care is requested.  For example:  Pathological Anomalies, Disabled (physical or mental),  Behavioral Management.
   */
  reasonCode?: CodeableConcept[] | undefined;
  /**
   * Indicates another resource whose existence justifies this request.
   */
  reasonReference?: Reference[] | undefined;
  /**
   * The healthcare provider(s) or provider organization(s) who/which is to receive the referral/transfer of care request.
   * There will be a primary receiver. But the request can be received by any number of "copied to" providers or organizations.
   */
  recipient?: Reference[] | undefined;
  /**
   * Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
   * This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
   */
  relevantHistory?: Reference[] | undefined;
  /**
   * Completed or terminated request(s) whose function is taken by this new request.
   * The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
   */
  replaces?: Reference[] | undefined;
  /**
   * The individual who initiated the request and has responsibility for its activation.
   */
  requester?: ReferralRequestRequester | undefined;
  /**
   * The service(s) that is/are requested to be provided to the patient.  For example: cardiac pacemaker insertion.
   */
  serviceRequested?: CodeableConcept[] | undefined;
  /**
   * Indication of the clinical domain or discipline to which the referral or transfer of care request is sent.  For example: Cardiology Gastroenterology Diabetology.
   */
  specialty?: CodeableConcept | undefined;
  /**
   * The status of the authorization/intention reflected by the referral request record.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('draft'|'active'|'suspended'|'cancelled'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The patient who is the subject of a referral or transfer of care request.
   * Referral of family, group or community is to be catered for by profiles.
   */
  subject: Reference;
  /**
   * Any additional (administrative, financial or clinical) information required to support request for referral or transfer of care.  For example: Presenting problems/chief complaints Medical History Family History Alerts Allergy/Intolerance and Adverse Reactions Medications Observations/Assessments (may include cognitive and fundtional assessments) Diagnostic Reports Care Plan.
   */
  supportingInfo?: Reference[] | undefined;
  /**
   * An indication of the type of referral (or where applicable the type of transfer of care) request.
   */
  type?: CodeableConcept | undefined;
}
export interface RelatedPerson extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RelatedPerson';
  /**
   * Whether this related person record is in active use.
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * Address where the related person can be contacted or visited.
   */
  address?: Address[] | undefined;
  /**
   * The date on which the related person was born.
   */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;
  /**
   * Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
   */
  gender?: ('male'|'female'|'other'|'unknown') | undefined;
  _gender?: Element | undefined;
  /**
   * Identifier for a person within a particular scope.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A name associated with the person.
   */
  name?: HumanName[] | undefined;
  /**
   * The patient this person is related to.
   */
  patient: Reference;
  /**
   * The period of time that this relationship is considered to be valid. If there are no dates defined, then the interval is unknown.
   */
  period?: Period | undefined;
  /**
   * Image of the person.
   */
  photo?: Attachment[] | undefined;
  /**
   * The nature of the relationship between a patient and the related person.
   */
  relationship?: CodeableConcept | undefined;
  /**
   * A contact detail for the person, e.g. a telephone number or an email address.
   * Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification.
   */
  telecom?: ContactPoint[] | undefined;
}
/**
 * Whether or not the action is applicable
 */
export interface RequestGroupActionCondition extends BackboneElement {
  /**
   * A brief, natural language description of the condition that effectively communicates the intended semantics.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An expression that returns true or false, indicating whether or not the condition is satisfied.
   * The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * The kind of condition.
   * Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe when enter/exit criteria for an action.
   */
  kind: ('applicability'|'start'|'stop');
  _kind?: Element | undefined;
  /**
   * The media type of the language for the expression.
   */
  language?: string | undefined;
  _language?: Element | undefined;
}
/**
 * Relationship to another action
 */
export interface RequestGroupActionRelatedAction extends BackboneElement {
  /**
   * The element id of the action this is related to.
   */
  actionId: string;
  _actionId?: Element | undefined;
  /**
   * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
   */
  offsetDuration?: Duration | undefined;
  /**
   * A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
   */
  offsetRange?: Range | undefined;
  /**
   * The relationship of this action to the related action.
   */
  relationship: ('before-start'|'before'|'before-end'|'concurrent-with-start'|'concurrent'|'concurrent-with-end'|'after-start'|'after'|'after-end');
  _relationship?: Element | undefined;
}
/**
 * Proposed actions, if any
 */
export interface RequestGroupAction extends BackboneElement {
  /**
   * Sub actions.
   */
  action?: RequestGroupAction[] | undefined;
  /**
   * Defines whether the action can be selected multiple times.
   */
  cardinalityBehavior?: ('single'|'multiple') | undefined;
  _cardinalityBehavior?: Element | undefined;
  /**
   * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a the section of a documentation template.
   */
  code?: CodeableConcept[] | undefined;
  /**
   * An expression that describes applicability criteria, or start/stop conditions for the action.
   */
  condition?: RequestGroupActionCondition[] | undefined;
  /**
   * A short description of the action used to provide a summary to display to the user.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
   */
  documentation?: RelatedArtifact[] | undefined;
  /**
   * Defines the grouping behavior for the action and its children.
   */
  groupingBehavior?: ('visual-group'|'logical-group'|'sentence-group') | undefined;
  _groupingBehavior?: Element | undefined;
  /**
   * A user-visible label for the action.
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * The participant that should perform or be responsible for this action.
   */
  participant?: Reference[] | undefined;
  /**
   * Defines whether the action should usually be preselected.
   */
  precheckBehavior?: ('yes'|'no') | undefined;
  _precheckBehavior?: Element | undefined;
  /**
   * A relationship to another action such as "before" or "30-60 minutes after start of".
   */
  relatedAction?: RequestGroupActionRelatedAction[] | undefined;
  /**
   * Defines the requiredness behavior for the action.
   */
  requiredBehavior?: ('must'|'could'|'must-unless-documented') | undefined;
  _requiredBehavior?: Element | undefined;
  /**
   * The resource that is the target of the action (e.g. CommunicationRequest).
   * The target resource SHALL be a [Request](request.html) resource with a Request.intent set to "option".
   */
  resource?: Reference | undefined;
  /**
   * Defines the selection behavior for the action and its children.
   */
  selectionBehavior?: ('any'|'all'|'all-or-none'|'exactly-one'|'at-most-one'|'one-or-more') | undefined;
  _selectionBehavior?: Element | undefined;
  /**
   * A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that may not be capable of interpreting it dynamically.
   */
  textEquivalent?: string | undefined;
  _textEquivalent?: Element | undefined;
  /**
   * An optional value describing when the action should be performed.
   */
  timingString?: string | undefined;
  _timingString?: Element | undefined;
  /**
   * An optional value describing when the action should be performed.
   */
  timingDuration?: Duration | undefined;
  /**
   * An optional value describing when the action should be performed.
   */
  timingPeriod?: Period | undefined;
  /**
   * An optional value describing when the action should be performed.
   */
  timingRange?: Range | undefined;
  /**
   * An optional value describing when the action should be performed.
   */
  timingTiming?: Timing | undefined;
  /**
   * The title of the action displayed to a user.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * The type of action to perform (create, update, remove).
   */
  type?: Coding | undefined;
}
export interface RequestGroup extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RequestGroup';
  /**
   * The actions, if any, produced by the evaluation of the artifact.
   */
  action?: RequestGroupAction[] | undefined;
  /**
   * Provides a reference to the author of the request group.
   */
  author?: Reference | undefined;
  /**
   * Indicates when the request group was created.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this request.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Describes the context of the request group, if any.
   */
  context?: Reference | undefined;
  /**
   * A protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
   */
  definition?: Reference[] | undefined;
  /**
   * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form.
   * Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition.  Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
   */
  groupIdentifier?: Identifier | undefined;
  /**
   * Allows a service to provide a unique, business identifier for the request.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain.
   * This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
   */
  intent: ('proposal'|'plan'|'order'|'original-order'|'reflex-order'|'filler-order'|'instance-order'|'option');
  _intent?: Element | undefined;
  /**
   * Provides a mechanism to communicate additional information about the response.
   */
  note?: Annotation[] | undefined;
  /**
   * Indicates how quickly the request should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * Indicates the reason the request group was created. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
   */
  reasonCodeableConcept?: CodeableConcept | undefined;
  /**
   * Indicates the reason the request group was created. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
   */
  reasonReference?: Reference | undefined;
  /**
   * Completed or terminated request(s) whose function is taken by this new request.
   * The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
   */
  replaces?: Reference[] | undefined;
  /**
   * The current state of the request. For request groups, the status reflects the status of all the requests in the group.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('draft'|'active'|'suspended'|'cancelled'|'completed'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The subject for which the request group was created.
   */
  subject?: Reference | undefined;
}
/**
 * Defined path through the study for a subject
 */
export interface ResearchStudyArm extends BackboneElement {
  /**
   * Categorization of study arm, e.g. experimental, active comparator, placebo comparater.
   */
  code?: CodeableConcept | undefined;
  /**
   * A succinct description of the path through the study that would be followed by a subject adhering to this arm.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Unique, human-readable label for this arm of the study.
   */
  name: string;
  _name?: Element | undefined;
}
/**
 * Need to make sure we encompass public health studies.
 */
export interface ResearchStudy extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ResearchStudy';
  /**
   * Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
   */
  arm?: ResearchStudyArm[] | undefined;
  /**
   * Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * Contact details to assist a user in learning more about or engaging with the study.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A full description of how the study is being conducted.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Reference to a Group that defines the criteria for and quantity of subjects participating in the study.  E.g. " 200 female Europeans between the ages of 20 and 45 with early onset diabetes".
   * The Group referenced should not generally enumerate specific subjects.  Subjects will be linked to the study using the ResearchSubject resource.
   */
  enrollment?: Reference[] | undefined;
  /**
   * The condition(s), medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.
   */
  focus?: CodeableConcept[] | undefined;
  /**
   * Identifiers assigned to this research study by the sponsor or other systems.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Indicates a country, state or other region where the study is taking place.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * Key terms to aid in searching for or filtering the study.
   */
  keyword?: CodeableConcept[] | undefined;
  /**
   * Comments made about the event by the performer, subject or other participants.
   */
  note?: Annotation[] | undefined;
  /**
   * A larger research study of which this particular study is a component or step.
   */
  partOf?: Reference[] | undefined;
  /**
   * Identifies the start date and the expected (or actual, depending on status) end date for the study.
   */
  period?: Period | undefined;
  /**
   * Indicates the individual who has primary oversite of the execution of the study.
   */
  principalInvestigator?: Reference | undefined;
  /**
   * The set of steps expected to be performed as part of the execution of the study.
   */
  protocol?: Reference[] | undefined;
  /**
   * A description and/or code explaining the premature termination of the study.
   */
  reasonStopped?: CodeableConcept | undefined;
  /**
   * Citations, references and other related documents.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * Clinic, hospital or other healthcare location that is participating in the study.
   */
  site?: Reference[] | undefined;
  /**
   * The organization responsible for the execution of the study.
   */
  sponsor?: Reference | undefined;
  /**
   * The current state of the study.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('draft'|'in-progress'|'suspended'|'stopped'|'completed'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * A short, descriptive user-friendly label for the study.
   */
  title?: string | undefined;
  _title?: Element | undefined;
}
/**
 * Need to make sure we encompass public health studies.
 */
export interface ResearchSubject extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ResearchSubject';
  /**
   * The name of the arm in the study the subject actually followed as part of this study.
   */
  actualArm?: string | undefined;
  _actualArm?: Element | undefined;
  /**
   * The name of the arm in the study the subject is expected to follow as part of this study.
   */
  assignedArm?: string | undefined;
  _assignedArm?: Element | undefined;
  /**
   * A record of the patient's informed agreement to participate in the study.
   */
  consent?: Reference | undefined;
  /**
   * Identifiers assigned to this research study by the sponsor or other systems.
   */
  identifier?: Identifier | undefined;
  /**
   * The record of the person or animal who is involved in the study.
   */
  individual: Reference;
  /**
   * The dates the subject began and ended their participation in the study.
   */
  period?: Period | undefined;
  /**
   * The current state of the subject.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('candidate'|'enrolled'|'active'|'suspended'|'withdrawn'|'completed');
  _status?: Element | undefined;
  /**
   * Reference to the study the subject is participating in.
   */
  study: Reference;
}
export interface Resource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: string;
  /**
   * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
   * The only time that a resource does not have an id is when it is being submitted to the server using a create operation.
   */
  id?: string | undefined;
  _id?: Element | undefined;
  /**
   * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.
   * Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. 
   * This element is labelled as a modifier because the implicit rules may provide additional knowledge about the resource that modifies it's meaning or interpretation.
   */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;
  /**
   * The base language in which the resource is written.
   * Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource  Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.
   */
  meta?: Meta | undefined;
}
/**
 * Outcome predicted
 * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
 */
export interface RiskAssessmentPrediction extends BackboneElement {
  /**
   * One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
   */
  outcome: CodeableConcept;
  /**
   * How likely is the outcome (in the specified timeframe).
   * If range is used, it represents the lower and upper bounds of certainty; e.g. 40-60%  Decimal values are expressed as percentages as well (max = 100).
   */
  probabilityNumber?: number | undefined;
  /**
   * How likely is the outcome (in the specified timeframe).
   * If range is used, it represents the lower and upper bounds of certainty; e.g. 40-60%  Decimal values are expressed as percentages as well (max = 100).
   */
  probabilityRange?: Range | undefined;
  /**
   * How likely is the outcome (in the specified timeframe), expressed as a qualitative value (e.g. low, medium, high).
   */
  qualitativeRisk?: CodeableConcept | undefined;
  /**
   * Additional information explaining the basis for the prediction.
   */
  rationale?: string | undefined;
  _rationale?: Element | undefined;
  /**
   * Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.).
   */
  relativeRisk?: number | undefined;
  /**
   * Indicates the period of time or age range of the subject to which the specified probability applies.
   * If not specified, the risk applies "over the subject's lifespan".
   */
  whenPeriod?: Period | undefined;
  /**
   * Indicates the period of time or age range of the subject to which the specified probability applies.
   * If not specified, the risk applies "over the subject's lifespan".
   */
  whenRange?: Range | undefined;
}
export interface RiskAssessment extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'RiskAssessment';
  /**
   * A reference to the request that is fulfilled by this risk assessment.
   */
  basedOn?: Reference | undefined;
  /**
   * Indicates the source data considered as part of the assessment (FamilyHistory, Observations, Procedures, Conditions, etc.).
   */
  basis?: Reference[] | undefined;
  /**
   * The type of the risk assessment performed.
   */
  code?: CodeableConcept | undefined;
  /**
   * Additional comments about the risk assessment.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
   */
  condition?: Reference | undefined;
  /**
   * The encounter where the assessment was performed.
   */
  context?: Reference | undefined;
  /**
   * Business identifier assigned to the risk assessment.
   */
  identifier?: Identifier | undefined;
  /**
   * The algorithm, process or mechanism used to evaluate the risk.
   */
  method?: CodeableConcept | undefined;
  /**
   * A description of the steps that might be taken to reduce the identified risk(s).
   */
  mitigation?: string | undefined;
  _mitigation?: Element | undefined;
  /**
   * The date (and possibly time) the risk assessment was performed.
   */
  occurrenceString?: string | undefined;
  _occurrenceString?: Element | undefined;
  /**
   * The date (and possibly time) the risk assessment was performed.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * A reference to a resource that this risk assessment is part of, such as a Procedure.
   */
  parent?: Reference | undefined;
  /**
   * The provider or software application that performed the assessment.
   */
  performer?: Reference | undefined;
  /**
   * Describes the expected outcome for the subject.
   * Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
   */
  prediction?: RiskAssessmentPrediction[] | undefined;
  /**
   * The reason the risk assessment was performed.
   */
  reasonCodeableConcept?: CodeableConcept | undefined;
  /**
   * The reason the risk assessment was performed.
   */
  reasonReference?: Reference | undefined;
  /**
   * The status of the RiskAssessment, using the same statuses as an Observation.
   */
  status: ('registered'|'preliminary'|'final'|'amended'|'corrected'|'cancelled'|'entered-in-error'|'unknown');
  _status?: Element | undefined;
  /**
   * The patient or group the risk assessment applies to.
   */
  subject?: Reference | undefined;
}
export interface Schedule extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Schedule';
  /**
   * Whether this schedule record is in active use, or should not be used (such as was entered in error).
   * This element is labeled as a modifier because it may be used to mark that the resource was created in error.
   */
  active?: boolean | undefined;
  _active?: Element | undefined;
  /**
   * The resource this Schedule resource is providing availability information for. These are expected to usually be one of HealthcareService, Location, Practitioner, PractitionerRole, Device, Patient or RelatedPerson.
   * The capacity to support multiple referenced resource types should be used in cases where the specific resources themselves cannot be scheduled without the other, and thus only make sense to the system exposing them as a group. Common examples of this are where the combination of a pracitioner and a room(location) are always required by a system.
   */
  actor: Reference[];
  /**
   * Comments on the availability to describe any extended information. Such as custom constraints on the slots that may be associated.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * External Ids for this item.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The period of time that the slots that are attached to this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
   */
  planningHorizon?: Period | undefined;
  /**
   * A broad categorisation of the service that is to be performed during this appointment.
   */
  serviceCategory?: CodeableConcept | undefined;
  /**
   * The specific service that is to be performed during this appointment.
   */
  serviceType?: CodeableConcept[] | undefined;
  /**
   * The specialty of a practitioner that would be required to perform the service requested in this appointment.
   */
  specialty?: CodeableConcept[] | undefined;
}
/**
 * For Composite resources to define the parts
 */
export interface SearchParameterComponent extends BackboneElement {
  /**
   * The definition of the search parameter that describes this part.
   */
  definition: Reference;
  /**
   * A sub-expression that defines how to extract values for this component from the output of the main SearchParameter.expression.
   * This expression overrides the expression in the definition, and extracts the index values from the outcome of the composite expression.
   */
  expression: string;
  _expression?: Element | undefined;
}
/**
 * In FHIR, search is not performed directly on a resource (by XML or JSON path), but on a named parameter that maps into the resource content.
 */
export interface SearchParameter extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SearchParameter';
  /**
   * The base resource type(s) that this search parameter can be used against.
   * A search parameter must always have at least one type. When search parameters have more than one resource, they can be used against any of the listed resource types, or in a cross-type search (see [Cross Resource Search](http.html#xres-search)).
   */
  base: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription')[];
  _base?: Element[] | undefined;
  /**
   * Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference, and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from SearchParameter.code for a parameter on the target resource type.
   * Systems are not required to list all the chain names they support, but if they don't list them, clients may not know to use them.
   */
  chain?: string[] | undefined;
  _chain?: Element[] | undefined;
  /**
   * The code used in the URL or the parameter name in a parameters resource for this search parameter.
   * For maximum compatibility, use only lowercase ASCII characters.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Comparators supported for the search parameter.
   * If no comparators are listed, clients should not expect servers to support any comparators.
   */
  comparator?: ('eq'|'ne'|'gt'|'lt'|'ge'|'le'|'sa'|'eb'|'ap')[] | undefined;
  _comparator?: Element[] | undefined;
  /**
   * Used to define the parts of a composite search parameter.
   */
  component?: SearchParameterComponent[] | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * The date  (and optionally time) when the search parameter was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the search parameter. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * Where this search parameter is originally defined. If a derivedFrom is provided, then the details in the search parameter must be consistent with the definition from which it is defined. I.e. the parameter should have the same meaning, and (usually) the functionality should be a proper subset of the underlying search parameter.
   * The intent of this is that a server can designate that it provides support for a search parameter defined in the specification itself (e.g.  [`value-quantity`](http://hl7.org/fhir/SearchParameter/Observation-value-quantity), but detail how it is supported by the server.
   */
  derivedFrom?: string | undefined;
  _derivedFrom?: Element | undefined;
  /**
   * A free text natural language description of the search parameter from a consumer's perspective. and how it used.
   * This description can be used to capture details such as why the search parameter was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the search parameter as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description: string;
  _description?: Element | undefined;
  /**
   * A boolean value to indicate that this search parameter is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of search parameter that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental search parameter in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A FHIRPath expression that returns a set of elements for the search parameter.
   * Note that the elements returned by the expression are sometimes complex elements where logic is required to determine quite how to handle them; e.g. CodeableConcepts may contain text and/or multiple codings, where the codings themselves contain a code and a system. For composite search parameters, the outcome of the expression must a collection of base elements from which the composites are derived.
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * A legal or geographic region in which the search parameter is intended to be used.
   * It may be possible for the search parameter to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A modifier supported for the search parameter.
   */
  modifier?: ('missing'|'exact'|'contains'|'not'|'text'|'in'|'not-in'|'below'|'above'|'type')[] | undefined;
  _modifier?: Element[] | undefined;
  /**
   * A natural language name identifying the search parameter. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the search parameter.
   * Usually an organization, but may be an individual. The publisher (or steward) of the search parameter is the organization or individual primarily responsible for the maintenance and upkeep of the search parameter. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the search parameter. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this search parameter is needed and why it has been designed as it has.
   * This element does not describe the usage of the search parameter Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this search parameter.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The status of this search parameter. Enables tracking the life-cycle of the content.
   * Allows filtering of search parameters that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired search parameter without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * Types of resource (if a resource is referenced).
   */
  target?: ('Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription')[] | undefined;
  _target?: Element[] | undefined;
  /**
   * The type of value a search parameter refers to, and how the content is interpreted.
   */
  type: ('number'|'date'|'string'|'token'|'reference'|'composite'|'quantity'|'uri');
  _type?: Element | undefined;
  /**
   * An absolute URI that is used to identify this search parameter when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this search parameter is (or will be) published. The URL SHOULD include the major version of the search parameter. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate search parameter instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the search parameter when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the search parameter author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different search parameter instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the search parameter with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
  /**
   * An XPath expression that returns a set of elements for the search parameter.
   * Note that the elements returned by the XPath are sometimes complex elements where logic is required to determine quite how to handle them; e.g. CodeableConcepts may contain text and/or multiple codings, where the codings themselves contain a code and a system.
   */
  xpath?: string | undefined;
  _xpath?: Element | undefined;
  /**
   * How the search parameter relates to the set of elements returned by evaluating the xpath query.
   */
  xpathUsage?: ('normal'|'phonetic'|'nearby'|'distance'|'other') | undefined;
  _xpathUsage?: Element | undefined;
}
/**
 * An set of value as quality of sequence
 */
export interface SequenceQuality extends BackboneElement {
  /**
   * End position of the sequence.If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
   */
  end?: number | undefined;
  /**
   * Harmonic mean of Recall and Precision, computed as: 2 * precision * recall / (precision + recall).
   */
  fScore?: number | undefined;
  /**
   * The number of false positives where the non-REF alleles in the Truth and Query Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or similar).
   */
  gtFP?: number | undefined;
  /**
   * Which method is used to get sequence quality.
   */
  method?: CodeableConcept | undefined;
  /**
   * QUERY.TP / (QUERY.TP + QUERY.FP).
   */
  precision?: number | undefined;
  /**
   * False positives, i.e. the number of sites in the Query Call Set for which there is no path through the Truth Call Set that is consistent with this site. Sites with correct variant but incorrect genotype are counted here.
   */
  queryFP?: number | undefined;
  /**
   * True positives, from the perspective of the query data, i.e. the number of sites in the Query Call Set for which there are paths through the Truth Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
   */
  queryTP?: number | undefined;
  /**
   * TRUTH.TP / (TRUTH.TP + TRUTH.FN).
   */
  recall?: number | undefined;
  /**
   * The score of an experimentally derived feature such as a p-value ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).
   */
  score?: Quantity | undefined;
  /**
   * Gold standard sequence used for comparing against.
   */
  standardSequence?: CodeableConcept | undefined;
  /**
   * Start position of the sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
   */
  start?: number | undefined;
  /**
   * False negatives, i.e. the number of sites in the Truth Call Set for which there is no path through the Query Call Set that is consistent with all of the alleles at this site, or sites for which there is an inaccurate genotype call for the event. Sites with correct variant but incorrect genotype are counted here.
   */
  truthFN?: number | undefined;
  /**
   * True positives, from the perspective of the truth data, i.e. the number of sites in the Truth Call Set for which there are paths through the Query Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
   */
  truthTP?: number | undefined;
  /**
   * INDEL / SNP / Undefined variant.
   */
  type: ('indel'|'snp'|'unknown');
  _type?: Element | undefined;
}
/**
 * A sequence used as reference
 */
export interface SequenceReferenceSeq extends BackboneElement {
  /**
   * Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
   */
  chromosome?: CodeableConcept | undefined;
  /**
   * The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'.  Version number must be included if a versioned release of a primary build was used.
   */
  genomeBuild?: string | undefined;
  _genomeBuild?: Element | undefined;
  /**
   * Reference identifier of reference sequence submitted to NCBI. It must match the type in the Sequence.type field. For example, the prefix, “NG_” identifies reference sequence for genes, “NM_” for messenger RNA transcripts, and “NP_” for amino acid sequences.
   */
  referenceSeqId?: CodeableConcept | undefined;
  /**
   * A Pointer to another Sequence entity as reference sequence.
   */
  referenceSeqPointer?: Reference | undefined;
  /**
   * A string like "ACGT".
   */
  referenceSeqString?: string | undefined;
  _referenceSeqString?: Element | undefined;
  /**
   * Directionality of DNA sequence. Available values are "1" for the plus strand (5' to 3')/Watson/Sense/positive  and "-1" for the minus strand(3' to 5')/Crick/Antisense/negative.
   */
  strand?: number | undefined;
  /**
   * End position of the window on the reference sequence. If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
   */
  windowEnd: number;
  /**
   * Start position of the window on the reference sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
   */
  windowStart: number;
}
/**
 * External repository which contains detailed report related with observedSeq in this resource
 */
export interface SequenceRepository extends BackboneElement {
  /**
   * Id of the variant in this external repository. The server will understand how to use this id to call for more info about datasets in external repository.
   */
  datasetId?: string | undefined;
  _datasetId?: Element | undefined;
  /**
   * URI of an external repository which contains further details about the genetics data.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * Id of the read in this external repository.
   */
  readsetId?: string | undefined;
  _readsetId?: Element | undefined;
  /**
   * Click and see / RESTful API / Need login to see / RESTful API with authentication / Other ways to see resource.
   */
  type: ('directlink'|'openapi'|'login'|'oauth'|'other');
  _type?: Element | undefined;
  /**
   * URI of an external repository which contains further details about the genetics data.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * Id of the variantset in this external repository. The server will understand how to use this id to call for more info about variantsets in external repository.
   */
  variantsetId?: string | undefined;
  _variantsetId?: Element | undefined;
}
/**
 * Variant in sequence
 */
export interface SequenceVariant extends BackboneElement {
  /**
   * Extended CIGAR string for aligning the sequence with reference bases. See detailed documentation [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm).
   */
  cigar?: string | undefined;
  _cigar?: Element | undefined;
  /**
   * End position of the variant on the reference sequence.If the coordinate system is 0-based then end is is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
   */
  end?: number | undefined;
  /**
   * An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).  Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed  sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
   */
  observedAllele?: string | undefined;
  _observedAllele?: Element | undefined;
  /**
   * An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)). Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the reference sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
   */
  referenceAllele?: string | undefined;
  _referenceAllele?: Element | undefined;
  /**
   * Start position of the variant on the  reference sequence.If the coordinate system is either 0-based or 1-based, then start position is inclusive.
   */
  start?: number | undefined;
  /**
   * A pointer to an Observation containing variant information.
   */
  variantPointer?: Reference | undefined;
}
export interface Sequence extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Sequence';
  /**
   * Whether the sequence is numbered starting at 0 (0-based numbering or coordinates, inclusive start, exclusive end) or starting at 1 (1-based numbering, inclusive start and inclusive end).
   */
  coordinateSystem: number;
  /**
   * The method for sequencing, for example, chip information.
   */
  device?: Reference | undefined;
  /**
   * A unique identifier for this particular sequence instance. This is a FHIR-defined id.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Sequence that was observed. It is the result marked by referenceSeq along with variant records on referenceSeq. This shall starts from referenceSeq.windowStart and end by referenceSeq.windowEnd.
   */
  observedSeq?: string | undefined;
  _observedSeq?: Element | undefined;
  /**
   * The patient whose sequencing results are described by this resource.
   */
  patient?: Reference | undefined;
  /**
   * The organization or lab that should be responsible for this result.
   */
  performer?: Reference | undefined;
  /**
   * Pointer to next atomic sequence which at most contains one variant.
   */
  pointer?: Reference[] | undefined;
  /**
   * An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
   */
  quality?: SequenceQuality[] | undefined;
  /**
   * The number of copies of the seqeunce of interest. (RNASeq).
   */
  quantity?: Quantity | undefined;
  /**
   * Coverage (read depth or depth) is the average number of reads representing a given nucleotide in the reconstructed sequence.
   */
  readCoverage?: number | undefined;
  /**
   * A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
   */
  referenceSeq?: SequenceReferenceSeq | undefined;
  /**
   * Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
   */
  repository?: SequenceRepository[] | undefined;
  /**
   * Specimen used for sequencing.
   */
  specimen?: Reference | undefined;
  /**
   * Amino Acid Sequence/ DNA Sequence / RNA Sequence.
   */
  type?: string | undefined;
  _type?: Element | undefined;
  /**
   * The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
   */
  variant?: SequenceVariant[] | undefined;
}
export interface ServiceDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ServiceDefinition';
  /**
   * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
   * The 'date' element may be more recent than the approval date because of minor changes / editorial corrections.
   */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A contributor to the content of the module, including authors, editors, reviewers, and endorsers.
   */
  contributor?: Contributor[] | undefined;
  /**
   * A copyright statement relating to the service definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the service definition.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * Data requirements are a machine processable description of the data required by the module in order to perform a successful evaluation.
   */
  dataRequirement?: DataRequirement[] | undefined;
  /**
   * The date  (and optionally time) when the service definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the service definition changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the service definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the service definition from a consumer's perspective.
   * This description can be used to capture details such as why the service definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the service definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The period during which the service definition content was or is planned to be in active use.
   * The effective period for a service definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
   */
  effectivePeriod?: Period | undefined;
  /**
   * A boolean value to indicate that this service definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of service definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental service definition in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * A formal identifier that is used to identify this service definition when it is represented in other formats, or referenced in a specification, model, design or an instance. This is used for CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this service definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the service definition is intended to be used.
   * It may be possible for the service definition to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The date on which the resource content was last reviewed. Review happens periodically after approval, but doesn't change the original approval date.
   * If specified, this is usually after the approval date.
   */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;
  /**
   * A natural language name identifying the service definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A reference to the operation that is used to invoke this service.
   */
  operationDefinition?: Reference | undefined;
  /**
   * The name of the individual or organization that published the service definition.
   * Usually an organization, but may be an individual. The publisher (or steward) of the service definition is the organization or individual primarily responsible for the maintenance and upkeep of the service definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the service definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this service definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the service definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this service definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Related resources such as additional documentation, justification, or bibliographic references.
   * Each related resource is either an attachment, or a reference to another resource, but not both.
   */
  relatedArtifact?: RelatedArtifact[] | undefined;
  /**
   * The status of this service definition. Enables tracking the life-cycle of the content.
   * Allows filtering of service definitions that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired service definition without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the service definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * Descriptive topics related to the module. Topics provide a high-level categorization of the module that can be useful for filtering and searching.
   */
  topic?: CodeableConcept[] | undefined;
  /**
   * The trigger element defines when the rule should be invoked. This information is used by consumers of the rule to determine how to integrate the rule into a specific workflow.
   */
  trigger?: TriggerDefinition[] | undefined;
  /**
   * An absolute URI that is used to identify this service definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this service definition is (or will be) published. The URL SHOULD include the major version of the service definition. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * A detailed description of how the module is used from a clinical perspective.
   */
  usage?: string | undefined;
  _usage?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate service definition instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the service definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the service definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different service definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the service definition with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
export interface Slot extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Slot';
  /**
   * The style of appointment or patient that may be booked in the slot (not service type).
   */
  appointmentType?: CodeableConcept | undefined;
  /**
   * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * Date/Time that the slot is to conclude.
   */
  end: string;
  _end?: Element | undefined;
  /**
   * External Ids for this item.
   */
  identifier?: Identifier[] | undefined;
  /**
   * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
   */
  overbooked?: boolean | undefined;
  _overbooked?: Element | undefined;
  /**
   * The schedule resource that this slot defines an interval of status information.
   */
  schedule: Reference;
  /**
   * A broad categorisation of the service that is to be performed during this appointment.
   */
  serviceCategory?: CodeableConcept | undefined;
  /**
   * The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
   */
  serviceType?: CodeableConcept[] | undefined;
  /**
   * The specialty of a practitioner that would be required to perform the service requested in this appointment.
   */
  specialty?: CodeableConcept[] | undefined;
  /**
   * Date/Time that the slot is to begin.
   */
  start: string;
  _start?: Element | undefined;
  /**
   * busy | free | busy-unavailable | busy-tentative | entered-in-error.
   */
  status: ('busy'|'free'|'busy-unavailable'|'busy-tentative'|'entered-in-error');
  _status?: Element | undefined;
}
/**
 * Collection details
 */
export interface SpecimenCollection extends BackboneElement {
  /**
   * Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.
   * If the use case requires  BodySite to be handled as a separate resource instead of an inline coded element (e.g. to identify and track separately)  then use the standard extension [body-site-instance](extension-body-site-instance.html).
   */
  bodySite?: CodeableConcept | undefined;
  /**
   * Time when specimen was collected from subject - the physiologically relevant time.
   */
  collectedString?: string | undefined;
  _collectedString?: Element | undefined;
  /**
   * Time when specimen was collected from subject - the physiologically relevant time.
   */
  collectedPeriod?: Period | undefined;
  /**
   * Person who collected the specimen.
   */
  collector?: Reference | undefined;
  /**
   * A coded value specifying the technique that is used to perform the procedure.
   */
  method?: CodeableConcept | undefined;
  /**
   * The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
   */
  quantity?: Quantity | undefined;
}
/**
 * Direct container of specimen (tube/slide, etc.)
 */
export interface SpecimenContainer extends BackboneElement {
  /**
   * Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  additiveCodeableConcept?: CodeableConcept | undefined;
  /**
   * Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
   */
  additiveReference?: Reference | undefined;
  /**
   * The capacity (volume or other measure) the container may contain.
   */
  capacity?: Quantity | undefined;
  /**
   * Textual description of the container.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Id for container. There may be multiple; a manufacturer's bar code, lab assigned identifier, etc. The container ID may differ from the specimen id in some circumstances.
   */
  identifier?: Identifier[] | undefined;
  /**
   * The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
   */
  specimenQuantity?: Quantity | undefined;
  /**
   * The type of container associated with the specimen (e.g. slide, aliquot, etc.).
   */
  type?: CodeableConcept | undefined;
}
/**
 * Processing and processing step details
 */
export interface SpecimenProcessing extends BackboneElement {
  /**
   * Material used in the processing step.
   */
  additive?: Reference[] | undefined;
  /**
   * Textual description of procedure.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A coded value specifying the procedure used to process the specimen.
   */
  procedure?: CodeableConcept | undefined;
  /**
   * A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
   */
  timeString?: string | undefined;
  _timeString?: Element | undefined;
  /**
   * A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
   */
  timePeriod?: Period | undefined;
}
export interface Specimen extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Specimen';
  /**
   * The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
   */
  accessionIdentifier?: Identifier | undefined;
  /**
   * Details concerning the specimen collection.
   */
  collection?: SpecimenCollection | undefined;
  /**
   * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
   */
  container?: SpecimenContainer[] | undefined;
  /**
   * Id for specimen.
   */
  identifier?: Identifier[] | undefined;
  /**
   * To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen).
   */
  note?: Annotation[] | undefined;
  /**
   * Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.
   * The parent specimen could be the source from which the current specimen is derived by some processing step (e.g. an aliquot or isolate or extracted nucleic acids from clinical samples) or one of many specimens that were combined to create a pooled sample.
   */
  parent?: Reference[] | undefined;
  /**
   * Details concerning processing and processing steps for the specimen.
   */
  processing?: SpecimenProcessing[] | undefined;
  /**
   * Time when specimen was received for processing or testing.
   */
  receivedTime?: string | undefined;
  _receivedTime?: Element | undefined;
  /**
   * Details concerning a test or procedure request that required a specimen to be collected.
   * The request may be explicit or implied such with a ProcedureRequest that requires a blood draw.
   */
  request?: Reference[] | undefined;
  /**
   * The availability of the specimen.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('available'|'unavailable'|'unsatisfactory'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * Where the specimen came from. This may be from the patient(s) or from the environment or a device.
   */
  subject: Reference;
  /**
   * The kind of material that forms the specimen.
   * The type can change the way that a specimen is handled, and drives what kind of analyses can properly be performed on the specimen. It is frequently used in diagnostic work flow decision making systems.
   */
  type?: CodeableConcept | undefined;
}
/**
 * Differential view of the structure
 */
export interface StructureDefinitionDifferential extends BackboneElement {
  /**
   * Captures constraints on each element within the resource.
   */
  element: ElementDefinition[];
}
/**
 * External specification that the content is mapped to
 */
export interface StructureDefinitionMapping extends BackboneElement {
  /**
   * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
   */
  comment?: string | undefined;
  _comment?: Element | undefined;
  /**
   * An Internal id that is used to identify this mapping set when specific mappings are made.
   * The specification is described once, with general comments, and then specific mappings are made that reference this declaration.
   */
  identity: string;
  _identity?: Element | undefined;
  /**
   * A name for the specification that is being mapped to.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * An absolute URI that identifies the specification that this mapping is expressed to.
   * A formal identity for the specification being mapped to helps with identifying maps consistently.
   */
  uri?: string | undefined;
  _uri?: Element | undefined;
}
/**
 * Snapshot view of the structure
 */
export interface StructureDefinitionSnapshot extends BackboneElement {
  /**
   * Captures constraints on each element within the resource.
   */
  element: ElementDefinition[];
}
export interface StructureDefinition extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'StructureDefinition';
  /**
   * Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems.
   * Abstract Resources cannot be instantiated - a concrete sub-type must be used. Abstract datatypes and extensions cannot be used in an instance. For logical models, the exact implication of "abstract" will rest with the author, depending how the logical model is used. Flagging a constraint structure as abstract conveys design intent but makes no difference to how the structure definition is handled. Note that inline declared elements that are given the type "Element" in the profile, but have children described, are anonymous concrete types that specialise Element.
   */
  abstract: boolean;
  _abstract?: Element | undefined;
  /**
   * An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.
   * If differential constraints are specified in this structure, they are applied to the base in a "differential" fashion. If there is no base, then the differential constraints cannot be provided (snapshot only). Differential structures are useful for the editing perspective, and snapshot structures are suitable for operational use. The FHIR Project provides a number of tools/services to populate snapshots from differential constraints. Logical Models have a base of "Element" or another logical model.
   */
  baseDefinition?: string | undefined;
  _baseDefinition?: Element | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * Identifies the types of resource or data type elements to which the extension can be applied.
   * If the context is an element that can have multiple types, then use (e.g.) value[x] if the extension works on all choice types, or otherwise an enumeration of explicitly named elements if not. Note that a context of "string" doesn't mean that the extension can be used with one of the string patterns such as "id" etc.
   */
  context?: string[] | undefined;
  _context?: Element[] | undefined;
  /**
   * A set of rules as Fluent Invariants about when the extension can be used (e.g. co-occurrence variants for the extension).
   * All the rules must be true. When evaluating the invariant, the fluentpath focus is the element that holds the extension, and %extension refers to the extension itself.
   */
  contextInvariant?: string[] | undefined;
  _contextInvariant?: Element[] | undefined;
  /**
   * If this is an extension, Identifies the context within FHIR resources where the extension can be used.
   */
  contextType?: ('resource'|'datatype'|'extension') | undefined;
  _contextType?: Element | undefined;
  /**
   * A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the structure definition was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * How the type relates to the baseDefinition.
   * If the definition is a specialization, then it adds new elements in the differential, and the snapshot includes the inherited elements.
   * If the definition is a constraint, then it can not define new elements, it can only make new rules about existing content (see [Profiling Resources](profiling.html#resources)).
   */
  derivation?: ('specialization'|'constraint') | undefined;
  _derivation?: Element | undefined;
  /**
   * A free text natural language description of the structure definition from a consumer's perspective.
   * This description can be used to capture details such as why the structure definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
   */
  differential?: StructureDefinitionDifferential | undefined;
  /**
   * A boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of structure definition that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental structure definition in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 3.0.2 for this version.
   * A StructureDefinition does not need to specify the target it applies to,as StructureDefinitions will often be valid across multiple versions of FHIR. FHIR tooling can determine whether a StructureDefinition is consistent with a particular StructureDefinition if desired.
   */
  fhirVersion?: string | undefined;
  _fhirVersion?: Element | undefined;
  /**
   * A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this structure definition outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A legal or geographic region in which the structure definition is intended to be used.
   * It may be possible for the structure definition to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates.
   */
  keyword?: Coding[] | undefined;
  /**
   * Defines the kind of structure that this definition is describing.
   */
  kind: ('primitive-type'|'complex-type'|'resource'|'logical');
  _kind?: Element | undefined;
  /**
   * An external specification that the content is mapped to.
   */
  mapping?: StructureDefinitionMapping[] | undefined;
  /**
   * A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the structure definition.
   * Usually an organization, but may be an individual. The publisher (or steward) of the structure definition is the organization or individual primarily responsible for the maintenance and upkeep of the structure definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure definition. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this structure definition is needed and why it has been designed as it has.
   * This element does not describe the usage of the structure definition Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure definition.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.
   */
  snapshot?: StructureDefinitionSnapshot | undefined;
  /**
   * The status of this structure definition. Enables tracking the life-cycle of the content.
   * Allows filtering of structure definitions that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired structure definition without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the structure definition.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc. Applications don't have to use this name, but can always fall back to it. The title also corresponds to the label for the root element.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * The type this structure describes. If the derivation kind is 'specialization' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type).
   * Note that in the case of constraints, the type could be determined by chasing through the baseDefinition references until a concrete structure (derivation = specialization) is reached, or by looking at the path of the first element in the snapshot - if present - but providing the type directly makes for simpler tooling and indexing.
   */
  type: string;
  _type?: Element | undefined;
  /**
   * An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this structure definition is (or will be) published. The URL SHOULD include the major version of the structure definition. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate structure definition instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different structure definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the structure definition with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Named instance provided when invoking the map
 * If no inputs are named, then the entry mappings are type based.
 */
export interface StructureMapGroupInput extends BackboneElement {
  /**
   * Documentation for this instance of data.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * Mode for this instance of data.
   */
  mode: ('source'|'target');
  _mode?: Element | undefined;
  /**
   * Name for this instance of data.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Type for this instance of data.
   */
  type?: string | undefined;
  _type?: Element | undefined;
}
/**
 * Which other rules to apply in the context of this rule
 */
export interface StructureMapGroupRuleDependent extends BackboneElement {
  /**
   * Name of a rule or group to apply.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Variable to pass to the rule or group.
   */
  variable: string[];
  _variable?: Element[] | undefined;
}
/**
 * Source inputs to the mapping
 */
export interface StructureMapGroupRuleSource extends BackboneElement {
  /**
   * FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
   */
  check?: string | undefined;
  _check?: Element | undefined;
  /**
   * FHIRPath expression  - must be true or the rule does not apply.
   */
  condition?: string | undefined;
  _condition?: Element | undefined;
  /**
   * Type or variable this rule applies to.
   */
  context: string;
  _context?: Element | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueAddress?: Address | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueAge?: Age | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueAnnotation?: Annotation | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueAttachment?: Attachment | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueString?: string | undefined;
  _defaultValueString?: Element | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueBoolean?: boolean | undefined;
  _defaultValueBoolean?: Element | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueCodeableConcept?: CodeableConcept | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueCoding?: Coding | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueContactPoint?: ContactPoint | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueCount?: Count | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueNumber?: number | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDistance?: Distance | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueDuration?: Duration | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueHumanName?: HumanName | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueIdentifier?: Identifier | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueMeta?: Meta | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueMoney?: Money | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValuePeriod?: Period | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueQuantity?: Quantity | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueRange?: Range | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueRatio?: Ratio | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueReference?: Reference | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueSampledData?: SampledData | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueSignature?: Signature | undefined;
  /**
   * A value to use if there is no existing value in the source object.
   * If there's a default value on an item that can repeat, it will only be used once.
   */
  defaultValueTiming?: Timing | undefined;
  /**
   * Optional field for this source.
   */
  element?: string | undefined;
  _element?: Element | undefined;
  /**
   * How to handle the list mode for this element.
   */
  listMode?: ('first'|'not_first'|'last'|'not_last'|'only_one') | undefined;
  _listMode?: Element | undefined;
  /**
   * Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
   */
  max?: string | undefined;
  _max?: Element | undefined;
  /**
   * Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
   */
  min?: number | undefined;
  /**
   * Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
   */
  type?: string | undefined;
  _type?: Element | undefined;
  /**
   * Named context for field, if a field is specified.
   */
  variable?: string | undefined;
  _variable?: Element | undefined;
}
/**
 * Parameters to the transform
 */
export interface StructureMapGroupRuleTargetParameter extends BackboneElement {
  /**
   * Parameter value - variable or literal.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * Parameter value - variable or literal.
   */
  valueNumber?: number | undefined;
  /**
   * Parameter value - variable or literal.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
}
/**
 * Content to create because of this mapping rule
 */
export interface StructureMapGroupRuleTarget extends BackboneElement {
  /**
   * Type or variable this rule applies to.
   */
  context?: string | undefined;
  _context?: Element | undefined;
  /**
   * How to interpret the context.
   */
  contextType?: ('type'|'variable') | undefined;
  _contextType?: Element | undefined;
  /**
   * Field to create in the context.
   */
  element?: string | undefined;
  _element?: Element | undefined;
  /**
   * If field is a list, how to manage the list.
   */
  listMode?: ('first'|'share'|'last'|'collate')[] | undefined;
  _listMode?: Element[] | undefined;
  /**
   * Internal rule reference for shared list items.
   */
  listRuleId?: string | undefined;
  _listRuleId?: Element | undefined;
  /**
   * Parameters to the transform.
   */
  parameter?: StructureMapGroupRuleTargetParameter[] | undefined;
  /**
   * How the data is copied / created.
   */
  transform?: ('create'|'copy'|'truncate'|'escape'|'cast'|'append'|'translate'|'reference'|'dateOp'|'uuid'|'pointer'|'evaluate'|'cc'|'c'|'qty'|'id'|'cp') | undefined;
  _transform?: Element | undefined;
  /**
   * Named context for field, if desired, and a field is specified.
   */
  variable?: string | undefined;
  _variable?: Element | undefined;
}
/**
 * Transform Rule from source to target
 */
export interface StructureMapGroupRule extends BackboneElement {
  /**
   * Which other rules to apply in the context of this rule.
   */
  dependent?: StructureMapGroupRuleDependent[] | undefined;
  /**
   * Documentation for this instance of data.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * Name of the rule for internal references.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Rules contained in this rule.
   */
  rule?: StructureMapGroupRule[] | undefined;
  /**
   * Source inputs to the mapping.
   */
  source: StructureMapGroupRuleSource[];
  /**
   * Content to create because of this mapping rule.
   */
  target?: StructureMapGroupRuleTarget[] | undefined;
}
/**
 * Named sections for reader convenience
 */
export interface StructureMapGroup extends BackboneElement {
  /**
   * Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * Another group that this group adds rules to.
   */
  extends?: string | undefined;
  _extends?: Element | undefined;
  /**
   * A name assigned to an instance of data. The instance must be provided when the mapping is invoked.
   * If no inputs are named, then the entry mappings are type based.
   */
  input: StructureMapGroupInput[];
  /**
   * A unique name for the group for the convenience of human readers.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * Transform Rule from source to target.
   */
  rule: StructureMapGroupRule[];
  /**
   * If this is the default rule set to apply for thie source type, or this combination of types.
   * Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.
   */
  typeMode: ('none'|'types'|'type-and-types');
  _typeMode?: Element | undefined;
}
/**
 * Structure Definition used by this map
 * It is not necessary for a structure map to identify any dependent structures, though not losting them may restrict its usefulness.
 */
export interface StructureMapStructure extends BackboneElement {
  /**
   * The name used for this type in the map.
   * This is needed if both types have the same name (e.g. version conversion).
   */
  alias?: string | undefined;
  _alias?: Element | undefined;
  /**
   * Documentation that describes how the structure is used in the mapping.
   */
  documentation?: string | undefined;
  _documentation?: Element | undefined;
  /**
   * How the referenced structure is used in this mapping.
   */
  mode: ('source'|'queried'|'target'|'produced');
  _mode?: Element | undefined;
  /**
   * The canonical URL that identifies the structure.
   */
  url: string;
  _url?: Element | undefined;
}
export interface StructureMap extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'StructureMap';
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the structure map was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the structure map from a consumer's perspective.
   * This description can be used to capture details such as why the structure map was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure map as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A boolean value to indicate that this structure map is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of structure map that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental structure map in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Organizes the mapping into managable chunks for human review/ease of maintenance.
   */
  group: StructureMapGroup[];
  /**
   * A formal identifier that is used to identify this structure map when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this structure map outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Other maps used by this map (canonical URLs).
   */
  import?: string[] | undefined;
  _import?: Element[] | undefined;
  /**
   * A legal or geographic region in which the structure map is intended to be used.
   * It may be possible for the structure map to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A natural language name identifying the structure map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the structure map.
   * Usually an organization, but may be an individual. The publisher (or steward) of the structure map is the organization or individual primarily responsible for the maintenance and upkeep of the structure map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure map. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this structure map is needed and why it has been designed as it has.
   * This element does not describe the usage of the structure map Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure map.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The status of this structure map. Enables tracking the life-cycle of the content.
   * Allows filtering of structure maps that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired structure map without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.
   * It is not necessary for a structure map to identify any dependent structures, though not losting them may restrict its usefulness.
   */
  structure?: StructureMapStructure[] | undefined;
  /**
   * A short, descriptive, user-friendly title for the structure map.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this structure map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this structure map is (or will be) published. The URL SHOULD include the major version of the structure map. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate structure map instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the structure map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different structure map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the structure map with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * The channel on which to report matches to the criteria
 */
export interface SubscriptionChannel extends BackboneElement {
  /**
   * The uri that describes the actual end-point to send messages to.
   * For rest-hook, and websocket, the end-point must be an http: or https: URL; for email, a mailto: url, for sms, a tel: url, and for message the endpoint can be in any form of url the server understands (usually, http: or mllp:). The URI is allowed to be relative; in which case, it is relative to the server end-point (since their may be more than one, clients should avoid using relative URIs).
   */
  endpoint?: string | undefined;
  _endpoint?: Element | undefined;
  /**
   * Additional headers / information to send as part of the notification.
   * Exactly what these mean depend on the channel type. They can convey additional information to the recipient and/or meet security requirements; for example, support of multiple headers in the outgoing notifications for rest-hook type subscriptions.
   */
  header?: string[] | undefined;
  _header?: Element[] | undefined;
  /**
   * The mime type to send the payload in - either application/fhir+xml, or application/fhir+json. If the payload is not present, then there is no payload in the notification, just a notification.
   * Sending the payload has obvious security implications. The server is responsible for ensuring that the content is appropriately secured.
   */
  payload?: string | undefined;
  _payload?: Element | undefined;
  /**
   * The type of channel to send notifications on.
   */
  type: ('rest-hook'|'websocket'|'email'|'sms'|'message');
  _type?: Element | undefined;
}
export interface Subscription extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Subscription';
  /**
   * Details where to send notifications when resources are received that meet the criteria.
   */
  channel: SubscriptionChannel;
  /**
   * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
   */
  contact?: ContactPoint[] | undefined;
  /**
   * The rules that the server should use to determine when to generate notifications for this subscription.
   * The rules are a search criteria (without the [base] part). Like Bundle.entry.request.url, it has no leading "/".
   */
  criteria: string;
  _criteria?: Element | undefined;
  /**
   * The time for the server to turn the subscription off.
   * The server is permitted to deviate from this time, but should observe it.
   */
  end?: string | undefined;
  _end?: Element | undefined;
  /**
   * A record of the last error that occurred when the server processed a notification.
   */
  error?: string | undefined;
  _error?: Element | undefined;
  /**
   * A description of why this subscription is defined.
   */
  reason: string;
  _reason?: Element | undefined;
  /**
   * The status of the subscription, which marks the server state for managing the subscription.
   * A client can only submit subscription resources in the requested or off state. Only the server can  move a subscription from requested to active, and then to error. Either the server or the client can turn a subscription off.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('requested'|'active'|'error'|'off');
  _status?: Element | undefined;
  /**
   * A tag to add to any resource that matches the criteria, after the subscription is processed.
   * So that other systems can tell which resources have been the subject of a notification.
   */
  tag?: Coding[] | undefined;
}
/**
 * Composition information about the substance
 */
export interface SubstanceIngredient extends BackboneElement {
  /**
   * The amount of the ingredient in the substance - a concentration ratio.
   */
  quantity?: Ratio | undefined;
  /**
   * Another substance that is a component of this substance.
   */
  substanceCodeableConcept?: CodeableConcept | undefined;
  /**
   * Another substance that is a component of this substance.
   */
  substanceReference?: Reference | undefined;
}
/**
 * If this describes a specific package/container of the substance
 */
export interface SubstanceInstance extends BackboneElement {
  /**
   * When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
   */
  expiry?: string | undefined;
  _expiry?: Element | undefined;
  /**
   * Identifier associated with the package/container (usually a label affixed directly).
   */
  identifier?: Identifier | undefined;
  /**
   * The amount of the substance.
   */
  quantity?: Quantity | undefined;
}
export interface Substance extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Substance';
  /**
   * A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.
   * The level of granularity is defined by the category concepts in the value set.   More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in Substance.code.
   */
  category?: CodeableConcept[] | undefined;
  /**
   * A code (or set of codes) that identify this substance.
   * This could be a reference to an externally defined code.  It could also be a locally assigned code (e.g. a formulary),  optionally with translations to the standard drug codes.
   */
  code: CodeableConcept;
  /**
   * A description of the substance - its appearance, handling requirements, and other usage notes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Unique identifier for the substance.
   * This identifier is associated with the kind of substance in contrast to the  Substance.instance.identifier which is associated with the package/container.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A substance can be composed of other substances.
   */
  ingredient?: SubstanceIngredient[] | undefined;
  /**
   * Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
   */
  instance?: SubstanceInstance[] | undefined;
  /**
   * A code to indicate if the substance is actively used.
   */
  status?: ('active'|'inactive'|'entered-in-error') | undefined;
  _status?: Element | undefined;
}
/**
 * The item that is delivered or supplied
 */
export interface SupplyDeliverySuppliedItem extends BackboneElement {
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  itemCodeableConcept?: CodeableConcept | undefined;
  /**
   * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   */
  itemReference?: Reference | undefined;
  /**
   * The amount of supply that has been dispensed. Includes unit of measure.
   */
  quantity?: Quantity | undefined;
}
export interface SupplyDelivery extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SupplyDelivery';
  /**
   * A plan, proposal or order that is fulfilled in whole or in part by this event.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
   */
  destination?: Reference | undefined;
  /**
   * Identifier assigned by the dispensing facility when the item(s) is dispensed.
   * This is assigned by the dispenser, and used to refer to this order in other external standards.
   */
  identifier?: Identifier | undefined;
  /**
   * The date or time(s) the activity occurred.
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrenceString?: string | undefined;
  _occurrenceString?: Element | undefined;
  /**
   * The date or time(s) the activity occurred.
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrencePeriod?: Period | undefined;
  /**
   * The date or time(s) the activity occurred.
   * [The list of types may be constrained as appropriate for the type of event].
   */
  occurrenceTiming?: Timing | undefined;
  /**
   * A larger event of which this particular event is a component or step.
   * Not to be used to link an event to an Encounter - use Event.context for that.
   * [The allowed reference resources may be adjusted as appropriate for the event resource].
   */
  partOf?: Reference[] | undefined;
  /**
   * A link to a resource representing the person whom the delivered item is for.
   */
  patient?: Reference | undefined;
  /**
   * Identifies the person who picked up the Supply.
   */
  receiver?: Reference[] | undefined;
  /**
   * A code specifying the state of the dispense event.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('in-progress'|'completed'|'abandoned'|'entered-in-error') | undefined;
  _status?: Element | undefined;
  /**
   * The item that is being delivered or has been supplied.
   */
  suppliedItem?: SupplyDeliverySuppliedItem | undefined;
  /**
   * The individual responsible for dispensing the medication, supplier or device.
   */
  supplier?: Reference | undefined;
  /**
   * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
   */
  type?: CodeableConcept | undefined;
}
/**
 * The item being requested
 */
export interface SupplyRequestOrderedItem extends BackboneElement {
  /**
   * The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
   */
  itemCodeableConcept?: CodeableConcept | undefined;
  /**
   * The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
   * Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
   */
  itemReference?: Reference | undefined;
  /**
   * The amount that is being ordered of the indicated item.
   */
  quantity: Quantity;
}
/**
 * Who/what is requesting service
 */
export interface SupplyRequestRequester extends BackboneElement {
  /**
   * The device, practitioner, etc. who initiated the request.
   */
  agent: Reference;
  /**
   * The organization the device or practitioner was acting on behalf of.
   */
  onBehalfOf?: Reference | undefined;
}
export interface SupplyRequest extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'SupplyRequest';
  /**
   * When the request was made.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
   */
  category?: CodeableConcept | undefined;
  /**
   * Where the supply is expected to come from.
   */
  deliverFrom?: Reference | undefined;
  /**
   * Where the supply is destined to go.
   */
  deliverTo?: Reference | undefined;
  /**
   * Unique identifier for this supply request.
   * This is assigned by the requester, and used to refer to this order in other external standards.
   */
  identifier?: Identifier | undefined;
  /**
   * When the request should be fulfilled.
   */
  occurrenceString?: string | undefined;
  _occurrenceString?: Element | undefined;
  /**
   * When the request should be fulfilled.
   */
  occurrencePeriod?: Period | undefined;
  /**
   * When the request should be fulfilled.
   */
  occurrenceTiming?: Timing | undefined;
  /**
   * The item being requested.
   */
  orderedItem?: SupplyRequestOrderedItem | undefined;
  /**
   * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * Why the supply item was requested.
   */
  reasonCodeableConcept?: CodeableConcept | undefined;
  /**
   * Why the supply item was requested.
   */
  reasonReference?: Reference | undefined;
  /**
   * The individual who initiated the request and has responsibility for its activation.
   */
  requester?: SupplyRequestRequester | undefined;
  /**
   * Status of the supply request.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status?: ('draft'|'active'|'suspended'|'cancelled'|'completed'|'entered-in-error'|'unknown') | undefined;
  _status?: Element | undefined;
  /**
   * Who is intended to fulfill the request.
   */
  supplier?: Reference[] | undefined;
}
/**
 * Information used to perform task
 */
export interface TaskInput extends BackboneElement {
  /**
   * A code or description indicating how the input is intended to be used as part of the task execution.
   * If referencing a BPMN workflow or Protocol, the "system" is the URL for the workflow definition and the code is the "name" of the required input.
   */
  type: CodeableConcept;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAddress?: Address | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAge?: Age | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCoding?: Coding | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueCount?: Count | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueNumber?: number | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDistance?: Distance | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueDuration?: Duration | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueHumanName?: HumanName | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueMeta?: Meta | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueMoney?: Money | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valuePeriod?: Period | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueRange?: Range | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueRatio?: Ratio | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueReference?: Reference | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueSampledData?: SampledData | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueSignature?: Signature | undefined;
  /**
   * The value of the input parameter as a basic type.
   */
  valueTiming?: Timing | undefined;
}
/**
 * Information produced as part of task
 */
export interface TaskOutput extends BackboneElement {
  /**
   * The name of the Output parameter.
   */
  type: CodeableConcept;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAddress?: Address | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAge?: Age | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAnnotation?: Annotation | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueAttachment?: Attachment | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCodeableConcept?: CodeableConcept | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCoding?: Coding | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueContactPoint?: ContactPoint | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueCount?: Count | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueNumber?: number | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDistance?: Distance | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueDuration?: Duration | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueHumanName?: HumanName | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueIdentifier?: Identifier | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueMeta?: Meta | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueMoney?: Money | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valuePeriod?: Period | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueQuantity?: Quantity | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueRange?: Range | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueRatio?: Ratio | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueReference?: Reference | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueSampledData?: SampledData | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueSignature?: Signature | undefined;
  /**
   * The value of the Output parameter as a basic type.
   */
  valueTiming?: Timing | undefined;
}
/**
 * Who is asking for task to be done
 */
export interface TaskRequester extends BackboneElement {
  /**
   * The device, practitioner, etc. who initiated the task.
   */
  agent: Reference;
  /**
   * The organization the device or practitioner was acting on behalf of when they initiated the task.
   */
  onBehalfOf?: Reference | undefined;
}
/**
 * Constraints on fulfillment tasks
 */
export interface TaskRestriction extends BackboneElement {
  /**
   * Over what time-period is fulfillment sought.
   * Note that period.high is the due date representing the time by which the task should be completed.
   */
  period?: Period | undefined;
  /**
   * For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?
   */
  recipient?: Reference[] | undefined;
  /**
   * Indicates the number of times the requested action should occur.
   */
  repetitions?: number | undefined;
}
export interface Task extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'Task';
  /**
   * The date and time this task was created.
   */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;
  /**
   * BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ProcedureRequest, MedicationRequest, ProcedureRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfil.  This latter resource is referenced by FocusOn.  For example, based on a ProcedureRequest (= BasedOn), a task is created to fulfil a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
   */
  basedOn?: Reference[] | undefined;
  /**
   * Contains business-specific nuances of the business state.
   */
  businessStatus?: CodeableConcept | undefined;
  /**
   * A name or code (or both) briefly describing what the task involves.
   * The title (eg "My Tasks", "Outstanding Tasks for Patient X") should go into the code.
   */
  code?: CodeableConcept | undefined;
  /**
   * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
   */
  context?: Reference | undefined;
  /**
   * A reference to a formal or informal definition of the task.  For example, a protocol, a step within a defined workflow definition, etc.
   */
  definitionReference?: Reference | undefined;
  /**
   * A reference to a formal or informal definition of the task.  For example, a protocol, a step within a defined workflow definition, etc.
   */
  definitionString?: string | undefined;
  _definitionString?: Element | undefined;
  /**
   * A free-text description of what is to be performed.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
   */
  executionPeriod?: Period | undefined;
  /**
   * The request being actioned or the resource being manipulated by this task.
   * If multiple resources need to be manipulated, use sub-tasks.  (This ensures that status can be tracked independently for each referenced resource.).
   */
  focus?: Reference | undefined;
  /**
   * The entity who benefits from the performance of the service specified in the task (e.g., the patient).
   */
  for?: Reference | undefined;
  /**
   * An identifier that links together multiple tasks and other requests that were created in the same context.
   */
  groupIdentifier?: Identifier | undefined;
  /**
   * The business identifier for this task.
   */
  identifier?: Identifier[] | undefined;
  /**
   * Additional information that may be needed in the execution of the task.
   */
  input?: TaskInput[] | undefined;
  /**
   * Indicates the "level" of actionability associated with the Task.  I.e. Is this a proposed task, a planned task, an actionable task, etc.
   * This element is immutable.  Proposed tasks, planned tasks, etc. must be distinct instances.
   * In most cases, Tasks will have an intent of "order".
   */
  intent: ('proposal'|'plan'|'order'|'original-order'|'reflex-order'|'filler-order'|'instance-order'|'option');
  _intent?: Element | undefined;
  /**
   * The date and time of last modification to this task.
   */
  lastModified?: string | undefined;
  _lastModified?: Element | undefined;
  /**
   * Free-text information captured about the task as it progresses.
   */
  note?: Annotation[] | undefined;
  /**
   * Outputs produced by the Task.
   */
  output?: TaskOutput[] | undefined;
  /**
   * Individual organization or Device currently responsible for task execution.
   * Tasks may be created with an owner not yet identified.
   */
  owner?: Reference | undefined;
  /**
   * Task that this particular task is part of.
   * This should usually be 0..1.
   */
  partOf?: Reference[] | undefined;
  /**
   * The type of participant that can execute the task.
   */
  performerType?: CodeableConcept[] | undefined;
  /**
   * Indicates how quickly the Task should be addressed with respect to other requests.
   */
  priority?: ('routine'|'urgent'|'asap'|'stat') | undefined;
  _priority?: Element | undefined;
  /**
   * A description or code indicating why this task needs to be performed.
   * This should only be included if there is no focus or if it differs from the reason indicated on the focus.
   */
  reason?: CodeableConcept | undefined;
  /**
   * Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.
   * This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
   */
  relevantHistory?: Reference[] | undefined;
  /**
   * The creator of the task.
   */
  requester?: TaskRequester | undefined;
  /**
   * If the Task.focus is a request resource and the task is seeking fulfillment (i.e is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
   */
  restriction?: TaskRestriction | undefined;
  /**
   * The current status of the task.
   */
  status: ('draft'|'requested'|'received'|'accepted'|'rejected'|'ready'|'cancelled'|'in-progress'|'on-hold'|'failed'|'completed'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * An explanation as to why this task is held, failed, was refused, etc.
   * This applies to the current status.  Look at the history of the task to see reasons for past statuses.
   */
  statusReason?: CodeableConcept | undefined;
}
/**
 * A participant in the test execution, either the execution engine, a client, or a server
 */
export interface TestReportParticipant extends BackboneElement {
  /**
   * The display name of the participant.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * The type of participant.
   */
  type: ('test-engine'|'client'|'server');
  _type?: Element | undefined;
  /**
   * The uri of the participant. An absolute URL is preferred.
   */
  uri: string;
  _uri?: Element | undefined;
}
/**
 * The assertion to perform
 */
export interface TestReportSetupActionAssert extends BackboneElement {
  /**
   * A link to further details on the result.
   */
  detail?: string | undefined;
  _detail?: Element | undefined;
  /**
   * An explanatory message associated with the result.
   */
  message?: string | undefined;
  _message?: Element | undefined;
  /**
   * The result of this assertion.
   */
  result: ('pass'|'skip'|'fail'|'warning'|'error');
  _result?: Element | undefined;
}
/**
 * The operation to perform
 */
export interface TestReportSetupActionOperation extends BackboneElement {
  /**
   * A link to further details on the result.
   */
  detail?: string | undefined;
  _detail?: Element | undefined;
  /**
   * An explanatory message associated with the result.
   */
  message?: string | undefined;
  _message?: Element | undefined;
  /**
   * The result of this operation.
   */
  result: ('pass'|'skip'|'fail'|'warning'|'error');
  _result?: Element | undefined;
}
/**
 * A setup operation or assert that was executed
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestReportSetupAction extends BackboneElement {
  /**
   * The results of the assertion performed on the previous operations.
   */
  assert?: TestReportSetupActionAssert | undefined;
  /**
   * The operation performed.
   */
  operation?: TestReportSetupActionOperation | undefined;
}
/**
 * The results of the series of required setup operations before the tests were executed
 */
export interface TestReportSetup extends BackboneElement {
  /**
   * Action would contain either an operation or an assertion.
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  action: TestReportSetupAction[];
}
/**
 * One or more teardown operations performed
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestReportTeardownAction extends BackboneElement {
  /**
   * An operation would involve a REST request to a server.
   */
  operation: TestReportSetupActionOperation;
}
/**
 * The results of running the series of required clean up steps
 */
export interface TestReportTeardown extends BackboneElement {
  /**
   * The teardown action will only contain an operation.
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  action: TestReportTeardownAction[];
}
/**
 * A test operation or assert that was performed
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestReportTestAction extends BackboneElement {
  /**
   * The results of the assertion performed on the previous operations.
   */
  assert?: TestReportSetupActionAssert | undefined;
  /**
   * An operation would involve a REST request to a server.
   */
  operation?: TestReportSetupActionOperation | undefined;
}
/**
 * A test executed from the test script
 */
export interface TestReportTest extends BackboneElement {
  /**
   * Action would contain either an operation or an assertion.
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  action: TestReportTestAction[];
  /**
   * A short description of the test used by test engines for tracking and reporting purposes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The name of this test used for tracking/logging purposes by test engines.
   */
  name?: string | undefined;
  _name?: Element | undefined;
}
export interface TestReport extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'TestReport';
  /**
   * Identifier for the TestScript assigned for external purposes outside the context of FHIR.
   */
  identifier?: Identifier | undefined;
  /**
   * When the TestScript was executed and this TestReport was generated.
   * Additional specific dates may be added as extensions.
   */
  issued?: string | undefined;
  _issued?: Element | undefined;
  /**
   * A free text natural language name identifying the executed TestScript.
   * Not expected to be globally unique.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * A participant in the test execution, either the execution engine, a client, or a server.
   */
  participant?: TestReportParticipant[] | undefined;
  /**
   * The overall result from the execution of the TestScript.
   * The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.
   */
  result: ('pass'|'fail'|'pending');
  _result?: Element | undefined;
  /**
   * The final score (percentage of tests passed) resulting from the execution of the TestScript.
   */
  score?: number | undefined;
  /**
   * The results of the series of required setup operations before the tests were executed.
   */
  setup?: TestReportSetup | undefined;
  /**
   * The current state of this test report.
   * The status represents where the execution is currently within the test script execution life cycle.
   * This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
   */
  status: ('completed'|'in-progress'|'waiting'|'stopped'|'entered-in-error');
  _status?: Element | undefined;
  /**
   * The results of the series of operations required to clean up after the all the tests were executed (successfully or otherwise).
   */
  teardown?: TestReportTeardown | undefined;
  /**
   * A test executed from the test script.
   */
  test?: TestReportTest[] | undefined;
  /**
   * Name of the tester producing this report (Organization or individual).
   * Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.
   */
  tester?: string | undefined;
  _tester?: Element | undefined;
  /**
   * Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.
   */
  testScript: Reference;
}
/**
 * An abstract server representing a destination or receiver in a message exchange
 * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
 */
export interface TestScriptDestination extends BackboneElement {
  /**
   * Abstract name given to a destination server in this test script.  The name is provided as a number starting at 1.
   * A given destination index (e.g. 1) can appear only once in the list (e.g. Destination 1 cannot be specified twice ... once as Form-Manager and again as Form-Processor within the same script as that could get confusing during test configuration). 
   * Different destination indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Manager).
   * The destination indices provided elsewhere in the test script must be one of these destination indices.
   */
  index: number;
  /**
   * The type of destination profile the test system supports.
   * Must be a "receiver"/"server" profile.
   */
  profile: Coding;
}
/**
 * Fixture in the test script - by reference (uri)
 */
export interface TestScriptFixture extends BackboneElement {
  /**
   * Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
   */
  autocreate?: boolean | undefined;
  _autocreate?: Element | undefined;
  /**
   * Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
   */
  autodelete?: boolean | undefined;
  _autodelete?: Element | undefined;
  /**
   * Reference to the resource (containing the contents of the resource needed for operations).
   * See http://hl7.org/fhir/STU3/resourcelist.html for complete list of resource types.
   */
  resource?: Reference | undefined;
}
/**
 * Capabilities  that are assumed to function correctly on the FHIR server being tested
 * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
 */
export interface TestScriptMetadataCapability extends BackboneElement {
  /**
   * Minimum capabilities required of server for test script to execute successfully.   If server does not meet at a minimum the referenced capability statement, then all tests in this script are skipped.
   * The conformance statement of the server has to contain at a minimum the contents of the reference pointed to by this element.
   */
  capabilities: Reference;
  /**
   * Description of the capabilities that this test script is requiring the server to support.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * Which server these requirements apply to.
   */
  destination?: number | undefined;
  /**
   * Links to the FHIR specification that describes this interaction and the resources involved in more detail.
   */
  link?: string[] | undefined;
  _link?: Element[] | undefined;
  /**
   * Which origin server these requirements apply to.
   */
  origin?: number[] | undefined;
  /**
   * Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
   */
  required?: boolean | undefined;
  _required?: Element | undefined;
  /**
   * Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
   */
  validated?: boolean | undefined;
  _validated?: Element | undefined;
}
/**
 * Links to the FHIR specification
 */
export interface TestScriptMetadataLink extends BackboneElement {
  /**
   * Short description of the link.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * URL to a particular requirement or feature within the FHIR specification.
   */
  url: string;
  _url?: Element | undefined;
}
/**
 * Required capability that is assumed to function correctly on the FHIR server being tested
 */
export interface TestScriptMetadata extends BackboneElement {
  /**
   * Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
   * When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
   */
  capability: TestScriptMetadataCapability[];
  /**
   * A link to the FHIR specification that this test is covering.
   */
  link?: TestScriptMetadataLink[] | undefined;
}
/**
 * An abstract server representing a client or sender in a message exchange
 * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
 */
export interface TestScriptOrigin extends BackboneElement {
  /**
   * Abstract name given to an origin server in this test script.  The name is provided as a number starting at 1.
   * A given origin index (e.g. 1) can appear only once in the list (e.g. Origin 1 cannot be specified twice ... once as FormFiller and and again as FormProcessor within the same script as that could get confusing during test configuration). 
   * Different origin indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Filler).
   * The origin indices provided elsewhere in the test script must be one of these origin indices.
   */
  index: number;
  /**
   * The type of origin profile the test system supports.
   * Must be a "sender"/"client" profile.
   */
  profile: Coding;
}
/**
 * Rule parameter template
 * The parameter value can be dynamic at runtime.
 */
export interface TestScriptRuleParam extends BackboneElement {
  /**
   * Descriptive name for this parameter that matches the external assert rule parameter name.
   * The external rule template would be looking for the parameter by this name.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The explicit or dynamic value for the parameter that will be passed on to the external rule template.
   * This value can be overwritten by the assert.rule.param.value i.e. TestScript.rule.param.value will be used if assert.rule.param.value is not specified.  The param value can be a string-representation of a number, string, or boolean that is expected. Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before supplying this value to the external rule template.
   */
  value?: string | undefined;
  _value?: Element | undefined;
}
/**
 * Assert rule used within the test script
 * Each rule should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.
 */
export interface TestScriptRule extends BackboneElement {
  /**
   * Each rule template can take one or more parameters for rule evaluation.
   * The parameter value can be dynamic at runtime.
   */
  param?: TestScriptRuleParam[] | undefined;
  /**
   * Reference to the resource (containing the contents of the rule needed for assertions).
   */
  resource: Reference;
}
/**
 * Ruleset rule parameter template
 * The parameter value can be dynamic at runtime.
 */
export interface TestScriptRulesetRuleParam extends BackboneElement {
  /**
   * Descriptive name for this parameter that matches the external assert ruleset rule parameter name.
   * The external rule template would be looking for the parameter by this name.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The value for the parameter that will be passed on to the external ruleset rule template.
   * This value can be overwritten by the assert.ruleset.rule.param.value i.e. TestScript.ruleset.rule.param.value will be used if assert.ruleset.rule.param.value is not specified.  The param value can be a string-representation of a number, string, or boolean that is expected. Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before supplying this value to the external rule template.
   */
  value?: string | undefined;
  _value?: Element | undefined;
}
/**
 * The referenced rule within the ruleset
 * This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.
 */
export interface TestScriptRulesetRule extends BackboneElement {
  /**
   * Each rule template can take one or more parameters for rule evaluation.
   * The parameter value can be dynamic at runtime.
   */
  param?: TestScriptRulesetRuleParam[] | undefined;
  /**
   * Id of the referenced rule within the external ruleset template.
   */
  ruleId: string;
  _ruleId?: Element | undefined;
}
/**
 * Assert ruleset used within the test script
 * Each rule within a ruleset should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.
 */
export interface TestScriptRuleset extends BackboneElement {
  /**
   * Reference to the resource (containing the contents of the ruleset needed for assertions).
   */
  resource: Reference;
  /**
   * The referenced rule within the external ruleset template.
   * This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.
   */
  rule: TestScriptRulesetRule[];
}
/**
 * Rule parameter template
 * The parameter value can be dynamic at runtime.
 */
export interface TestScriptSetupActionAssertRuleParam extends BackboneElement {
  /**
   * Descriptive name for this parameter that matches the external assert rule parameter name.
   * The external rule template would be looking for the parameter by this name.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The value for the parameter that will be passed on to the external rule template.
   * This value overwrites the value (if any) specified in TestScript.rule.param.value.  The param value can be a string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before supplying this value to the external rule template.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * The reference to a TestScript.rule
 * Each rule should get evaluated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.
 */
export interface TestScriptSetupActionAssertRule extends BackboneElement {
  /**
   * Each rule template can take one or more parameters for rule evaluation.
   * The parameter value can be dynamic at runtime.
   */
  param?: TestScriptSetupActionAssertRuleParam[] | undefined;
  /**
   * The TestScript.rule id value this assert will evaluate.
   */
  ruleId: string;
  _ruleId?: Element | undefined;
}
/**
 * Rule parameter template
 * The parameter value can be dynamic at runtime.
 */
export interface TestScriptSetupActionAssertRulesetRuleParam extends BackboneElement {
  /**
   * Descriptive name for this parameter that matches the external assert ruleset rule parameter name.
   * The external rule template would be looking for the parameter by this name.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The value for the parameter that will be passed on to the external ruleset rule template.
   * This value overwrites the value (if any) specified in TestScript.ruleset.rule.param.value.  The param value can be a string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before supplying this value to the external rule template.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * The referenced rule within the ruleset
 * This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.
 */
export interface TestScriptSetupActionAssertRulesetRule extends BackboneElement {
  /**
   * Each rule template can take one or more parameters for rule evaluation.
   * The parameter value can be dynamic at runtime.
   */
  param?: TestScriptSetupActionAssertRulesetRuleParam[] | undefined;
  /**
   * Id of the referenced rule within the external ruleset template.
   */
  ruleId: string;
  _ruleId?: Element | undefined;
}
/**
 * The reference to a TestScript.ruleset
 * Each rule within a ruleset should get evaluated by test engines as a separate assertion.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.  If the first rule within the ruleset results in a failed assertion, then test engines do not have to evaluate the rest of the rules within the ruleset.
 */
export interface TestScriptSetupActionAssertRuleset extends BackboneElement {
  /**
   * The referenced rule within the external ruleset template.
   * This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.
   */
  rule?: TestScriptSetupActionAssertRulesetRule[] | undefined;
  /**
   * The TestScript.ruleset id value this assert will evaluate.
   */
  rulesetId: string;
  _rulesetId?: Element | undefined;
}
/**
 * The assertion to perform
 * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
 */
export interface TestScriptSetupActionAssert extends BackboneElement {
  /**
   * The fluentpath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
   * Thefhirpath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.
   */
  compareToSourceExpression?: string | undefined;
  _compareToSourceExpression?: Element | undefined;
  /**
   * Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition.
   */
  compareToSourceId?: string | undefined;
  _compareToSourceId?: Element | undefined;
  /**
   * XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
   * The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.
   */
  compareToSourcePath?: string | undefined;
  _compareToSourcePath?: Element | undefined;
  /**
   * The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.
   * If this is specified, then test engine shall confirm that the content-type of the last operation's headers is set to this value.  If "assert.sourceId" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation's headers).    If 'xml' is specified, then 'Content-Type' header of 'application/fhir+xml' will be confirmed. If 'json' is specified, then 'application/fhir+json' will be used. If you'd like to have more control over the string, then use 'assert.headerField' instead.
   */
  contentType?: ('xml'|'json'|'ttl'|'none') | undefined;
  _contentType?: Element | undefined;
  /**
   * The description would be used by test engines for tracking and reporting purposes.
   * This has no impact on the verification itself.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The direction to use for the assertion.
   * If the direction is specified as "response" (the default), then the processing of this assert is against the received response message. If the direction is specified as "request", then the processing of this assert is against the sent request message.
   */
  direction?: ('response'|'request') | undefined;
  _direction?: Element | undefined;
  /**
   * The fluentpath expression to be evaluated against the request or response message contents - HTTP headers and payload.
   * If both "expression" and a "fixtureId" are specified, then the expression will be evaluated against the request or response body mapped to the fixtureId.  If "expression" is specified and a "fixtureId" is not, then the expression will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * The HTTP header field name e.g. 'Location'.
   * If "headerField" is specified then "value" must be specified.  If "sourceId" is not specified, then "headerField" will be evaluated against the last operation's response headers.  Test engines are to keep track of the last operation's response body and response headers.
   */
  headerField?: string | undefined;
  _headerField?: Element | undefined;
  /**
   * The label would be used for tracking/logging purposes by test engines.
   * This has no impact on the verification itself.
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * The ID of a fixture.  Asserts that the response contains at a minimum the fixture specified by minimumId.
   * Asserts that the response contains all the element/content in another fixture pointed to by minimumId.  This can be a statically defined fixture or one that is dynamically set via responseId.
   */
  minimumId?: string | undefined;
  _minimumId?: Element | undefined;
  /**
   * Whether or not the test execution performs validation on the bundle navigation links.
   * Asserts that the Bundle contains first, last, and next links.
   */
  navigationLinks?: boolean | undefined;
  _navigationLinks?: Element | undefined;
  /**
   * The operator type defines the conditional behavior of the assert. If not defined, the default is equals.
   * Operators are useful especially for negative testing.  If operator is not specified, then the "equals" operator is assumed; e.g. <code>   <assert>  <operator value="in" />  <responseCode value="200,201,204" />    </assert>    <assert>  <operator value="notEquals" />  <response value="okay"/>   </assert>    <assert>  <operator value="greaterThan" />    <responseHeader>     <field value="Content-Length" />     <value value="0" />    <responseHeader/>   </assert> </code>.
   */
  operator?: ('equals'|'notEquals'|'in'|'notIn'|'greaterThan'|'lessThan'|'empty'|'notEmpty'|'contains'|'notContains'|'eval') | undefined;
  _operator?: Element | undefined;
  /**
   * The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
   * If both "path" and a "fixtureId" are specified, then the path will be evaluated against the request or response body mapped to the fixtureId.  If "path" is specified and a "fixtureId" is not, then the path will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.
   */
  path?: string | undefined;
  _path?: Element | undefined;
  /**
   * The request method or HTTP operation code to compare against that used by the client system under test.
   * If "requestMethod" is specified then it will be used in place of "value". The "requestMethod" will evaluate against the last operation's request HTTP operation.
   */
  requestMethod?: ('delete'|'get'|'options'|'patch'|'post'|'put') | undefined;
  _requestMethod?: Element | undefined;
  /**
   * The value to use in a comparison against the request URL path string.
   * If "requestURL" is specified then it will be used in place of "value". The "requestURL" will evaluate against the last operation's full request URL path string.
   */
  requestURL?: string | undefined;
  _requestURL?: Element | undefined;
  /**
   * The type of the resource.  See http://hl7.org/fhir/STU3/resourcelist.html.
   * This will be expected resource type in response body e.g. in read, vread, search, etc.  See http://hl7.org/fhir/STU3/resourcelist.html for complete list of resource types; e.g. <assert > <resourceType value="Patient" </assert>.
   */
  resource?: ('Address'|'Age'|'Annotation'|'Attachment'|'BackboneElement'|'CodeableConcept'|'Coding'|'ContactDetail'|'ContactPoint'|'Contributor'|'Count'|'DataRequirement'|'Distance'|'Dosage'|'Duration'|'Element'|'ElementDefinition'|'Extension'|'HumanName'|'Identifier'|'Meta'|'Money'|'Narrative'|'ParameterDefinition'|'Period'|'Quantity'|'Range'|'Ratio'|'Reference'|'RelatedArtifact'|'SampledData'|'Signature'|'SimpleQuantity'|'Timing'|'TriggerDefinition'|'UsageContext'|'base64Binary'|'boolean'|'code'|'date'|'dateTime'|'decimal'|'id'|'instant'|'integer'|'markdown'|'oid'|'positiveInt'|'string'|'time'|'unsignedInt'|'uri'|'uuid'|'xhtml'|'Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription') | undefined;
  _resource?: Element | undefined;
  /**
   * okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
   * This is a shorter way of achieving similar verifications via "assert.responseCode".  If you need more control, then use "assert.responseCode"  e.g. <assert>  <contentType value="json" />  <response value="okay"/> </assert>.
   */
  response?: ('okay'|'created'|'noContent'|'notModified'|'bad'|'forbidden'|'notFound'|'methodNotAllowed'|'conflict'|'gone'|'preconditionFailed'|'unprocessable') | undefined;
  _response?: Element | undefined;
  /**
   * The value of the HTTP response code to be tested.
   * To be used with "operator" attribute value. Asserts that the response code equals this value if "operator" is not specified.   If the operator is "in" or "notIn" then the responseCode would be a comma-separated list of values e.g. "200,201". Otherwise, it's expected to be a numeric value.   If "fixture" is not specified, then the "responseBodyId" value of the last operation is assumed.
   */
  responseCode?: string | undefined;
  _responseCode?: Element | undefined;
  /**
   * The TestScript.rule this assert will evaluate.
   * Each rule should get evaluated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.
   */
  rule?: TestScriptSetupActionAssertRule | undefined;
  /**
   * The TestScript.ruleset this assert will evaluate.
   * Each rule within a ruleset should get evaluated by test engines as a separate assertion.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.  If the first rule within the ruleset results in a failed assertion, then test engines do not have to evaluate the rest of the rules within the ruleset.
   */
  ruleset?: TestScriptSetupActionAssertRuleset | undefined;
  /**
   * Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
   * This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.
   */
  sourceId?: string | undefined;
  _sourceId?: Element | undefined;
  /**
   * The ID of the Profile to validate against.
   * The ID of a Profile fixture. Asserts that the response is valid according to the Profile specified by validateProfileId.
   */
  validateProfileId?: string | undefined;
  _validateProfileId?: Element | undefined;
  /**
   * The value to compare to.
   * The string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.
   */
  value?: string | undefined;
  _value?: Element | undefined;
  /**
   * Whether or not the test execution will produce a warning only on error for this assert.
   * If this element is specified and it is true, then assertion failures can be logged by test engine but should not stop the test script execution from proceeding.  There are likely cases where the spec is not clear on what should happen. If the spec says something is optional (maybe a response header for example), but a server doesn’t do it, we could choose to issue a warning.
   */
  warningOnly?: boolean | undefined;
  _warningOnly?: Element | undefined;
}
/**
 * Each operation can have one or more header elements
 * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://hl7.org/fhir/STU3/http.html#2.1.0.5.1 - "If-Match" header.  See http://hl7.org/fhir/STU3/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://hl7.org/fhir/STU3/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
 */
export interface TestScriptSetupActionOperationRequestHeader extends BackboneElement {
  /**
   * The HTTP header field e.g. "Accept".
   * If header element is specified, then field is required.
   */
  field: string;
  _field?: Element | undefined;
  /**
   * The value of the header e.g. "application/fhir+xml".
   * If header element is specified, then value is required.  No conversions will be done by the test engine e.g. "xml" to "application/fhir+xml".  The values will be set in HTTP headers "as-is".  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * The setup operation to perform
 */
export interface TestScriptSetupActionOperation extends BackboneElement {
  /**
   * The content-type or mime-type to use for RESTful operation in the 'Accept' header.
   * If this is specified, then test engine shall set the 'Accept' header to the corresponding value.    If 'xml' is specified, then 'Accept' header of 'application/fhir+xml' will be set.  If 'json' is specified, then 'application/fhir+json' will be used.    If you'd like to explicitly set the 'Accept' to some other value then use the 'requestHeader' element.
   */
  accept?: ('xml'|'json'|'ttl'|'none') | undefined;
  _accept?: Element | undefined;
  /**
   * The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.
   * If this is specified, then test engine shall set the 'Content-Type' header to the corresponding value.    If 'xml' is specified, then 'Content-Type' header of 'application/fhir+xml' will be set.    If 'json' is specified, then 'application/fhir+json' will be used.    If you'd like to explicitly set the 'Content-Type' to some other value then use the 'requestHeader' element.
   */
  contentType?: ('xml'|'json'|'ttl'|'none') | undefined;
  _contentType?: Element | undefined;
  /**
   * The description would be used by test engines for tracking and reporting purposes.
   * This has no impact on the verification itself.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section.
   * If multiple TestScript.destination elements are defined and operation.destination is undefined, test engine will report an error as it cannot determine what destination to use for the exchange.
   */
  destination?: number | undefined;
  /**
   * Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
   */
  encodeRequestUrl?: boolean | undefined;
  _encodeRequestUrl?: Element | undefined;
  /**
   * The label would be used for tracking/logging purposes by test engines.
   * This has no impact on the verification itself.
   */
  label?: string | undefined;
  _label?: Element | undefined;
  /**
   * The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section.
   * If absent, test engine will send the message.  When present, test engine will not send the request message but will wait for the request message to be sent from this origin server.
   */
  origin?: number | undefined;
  /**
   * Path plus parameters after [type].  Used to set parts of the request URL explicitly.
   * If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored.  For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present.  For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url.  For "vread" and "history" operations, the versionId value will also be used.   Test engines would append whatever is specified for "params" to the URL after the resource type without tampering with the string (beyond encoding the URL for HTTP).  The "params" element does not correspond exactly to "search parameters".  Nor is it the "path".  It corresponds to the part of the URL that comes after the [type] (when "resource" element is specified); e.g. It corresponds to "/[id]/_history/[vid] {?_format=[mime-type]}" in the following operation: GET [base]/[type]/[id]/_history/[vid] {?_format=[mime-type]}  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
   */
  params?: string | undefined;
  _params?: Element | undefined;
  /**
   * Header elements would be used to set HTTP headers.
   * This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://hl7.org/fhir/STU3/http.html#2.1.0.5.1 - "If-Match" header.  See http://hl7.org/fhir/STU3/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://hl7.org/fhir/STU3/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
   */
  requestHeader?: TestScriptSetupActionOperationRequestHeader[] | undefined;
  /**
   * The fixture id (maybe new) to map to the request.
   * If a requestId is supplied, then the resulting request (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by "requestId".  If requestId is not specified, it is the test engine's responsibility to store the request and use it as the requestId in subsequent assertions when assertion path and/or headerField is specified, direction is equal to request, and the requestId in not specified.
   */
  requestId?: string | undefined;
  _requestId?: Element | undefined;
  /**
   * The type of the resource.  See http://hl7.org/fhir/STU3/resourcelist.html.
   * If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored. For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present. For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url. For "vread" and "history" operations, the versionId value will also be used.
   */
  resource?: ('Address'|'Age'|'Annotation'|'Attachment'|'BackboneElement'|'CodeableConcept'|'Coding'|'ContactDetail'|'ContactPoint'|'Contributor'|'Count'|'DataRequirement'|'Distance'|'Dosage'|'Duration'|'Element'|'ElementDefinition'|'Extension'|'HumanName'|'Identifier'|'Meta'|'Money'|'Narrative'|'ParameterDefinition'|'Period'|'Quantity'|'Range'|'Ratio'|'Reference'|'RelatedArtifact'|'SampledData'|'Signature'|'SimpleQuantity'|'Timing'|'TriggerDefinition'|'UsageContext'|'base64Binary'|'boolean'|'code'|'date'|'dateTime'|'decimal'|'id'|'instant'|'integer'|'markdown'|'oid'|'positiveInt'|'string'|'time'|'unsignedInt'|'uri'|'uuid'|'xhtml'|'Account'|'ActivityDefinition'|'AdverseEvent'|'AllergyIntolerance'|'Appointment'|'AppointmentResponse'|'AuditEvent'|'Basic'|'Binary'|'BodySite'|'Bundle'|'CapabilityStatement'|'CarePlan'|'CareTeam'|'ChargeItem'|'Claim'|'ClaimResponse'|'ClinicalImpression'|'CodeSystem'|'Communication'|'CommunicationRequest'|'CompartmentDefinition'|'Composition'|'ConceptMap'|'Condition'|'Consent'|'Contract'|'Coverage'|'DataElement'|'DetectedIssue'|'Device'|'DeviceComponent'|'DeviceMetric'|'DeviceRequest'|'DeviceUseStatement'|'DiagnosticReport'|'DocumentManifest'|'DocumentReference'|'DomainResource'|'EligibilityRequest'|'EligibilityResponse'|'Encounter'|'Endpoint'|'EnrollmentRequest'|'EnrollmentResponse'|'EpisodeOfCare'|'ExpansionProfile'|'ExplanationOfBenefit'|'FamilyMemberHistory'|'Flag'|'Goal'|'GraphDefinition'|'Group'|'GuidanceResponse'|'HealthcareService'|'ImagingManifest'|'ImagingStudy'|'Immunization'|'ImmunizationRecommendation'|'ImplementationGuide'|'Library'|'Linkage'|'List'|'Location'|'Measure'|'MeasureReport'|'Media'|'Medication'|'MedicationAdministration'|'MedicationDispense'|'MedicationRequest'|'MedicationStatement'|'MessageDefinition'|'MessageHeader'|'NamingSystem'|'NutritionOrder'|'Observation'|'OperationDefinition'|'OperationOutcome'|'Organization'|'Parameters'|'Patient'|'PaymentNotice'|'PaymentReconciliation'|'Person'|'PlanDefinition'|'Practitioner'|'PractitionerRole'|'Procedure'|'ProcedureRequest'|'ProcessRequest'|'ProcessResponse'|'Provenance'|'Questionnaire'|'QuestionnaireResponse'|'ReferralRequest'|'RelatedPerson'|'RequestGroup'|'ResearchStudy'|'ResearchSubject'|'Resource'|'RiskAssessment'|'Schedule'|'SearchParameter'|'Sequence'|'ServiceDefinition'|'Slot'|'Specimen'|'StructureDefinition'|'StructureMap'|'Subscription'|'Substance'|'SupplyDelivery'|'SupplyRequest'|'Task'|'TestReport'|'TestScript'|'ValueSet'|'VisionPrescription') | undefined;
  _resource?: Element | undefined;
  /**
   * The fixture id (maybe new) to map to the response.
   * If a responseId is supplied, and the server responds, then the resulting response (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by "responseId".  If responseId is not specified, it is the test engine's responsibility to store the response and use it as the responseId in subsequent assertions when assertion path and/or headerField is specified and the responseId is not specified.
   */
  responseId?: string | undefined;
  _responseId?: Element | undefined;
  /**
   * The id of the fixture used as the body of a PUT or POST request.
   */
  sourceId?: string | undefined;
  _sourceId?: Element | undefined;
  /**
   * Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
   * If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored.  For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present.  For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url.  For "vread" and "history" operations, the versionId value will also be used.
   */
  targetId?: string | undefined;
  _targetId?: Element | undefined;
  /**
   * Server interaction or operation type.
   * See http://hl7.org/fhir/STU3/http.html for list of server interactions.
   */
  type?: Coding | undefined;
  /**
   * Complete request URL.
   * Used to set the request URL explicitly.  If "url" element is defined, then "targetId", "resource", and "params" elements will be ignored.  Test engines would use whatever is specified in "url" without tampering with the string (beyond encoding the URL for HTTP).  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
   */
  url?: string | undefined;
  _url?: Element | undefined;
}
/**
 * A setup operation or assert to perform
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestScriptSetupAction extends BackboneElement {
  /**
   * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
   * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
   */
  assert?: TestScriptSetupActionAssert | undefined;
  /**
   * The operation to perform.
   */
  operation?: TestScriptSetupActionOperation | undefined;
}
/**
 * A series of required setup operations before tests are executed
 */
export interface TestScriptSetup extends BackboneElement {
  /**
   * Action would contain either an operation or an assertion.
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  action: TestScriptSetupAction[];
}
/**
 * One or more teardown operations to perform
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestScriptTeardownAction extends BackboneElement {
  /**
   * An operation would involve a REST request to a server.
   */
  operation: TestScriptSetupActionOperation;
}
/**
 * A series of required clean up steps
 */
export interface TestScriptTeardown extends BackboneElement {
  /**
   * The teardown action will only contain an operation.
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  action: TestScriptTeardownAction[];
}
/**
 * A test operation or assert to perform
 * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
 */
export interface TestScriptTestAction extends BackboneElement {
  /**
   * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
   * In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
   */
  assert?: TestScriptSetupActionAssert | undefined;
  /**
   * An operation would involve a REST request to a server.
   */
  operation?: TestScriptSetupActionOperation | undefined;
}
/**
 * A test in this script
 */
export interface TestScriptTest extends BackboneElement {
  /**
   * Action would contain either an operation or an assertion.
   * An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
   */
  action: TestScriptTestAction[];
  /**
   * A short description of the test used by test engines for tracking and reporting purposes.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The name of this test used for tracking/logging purposes by test engines.
   */
  name?: string | undefined;
  _name?: Element | undefined;
}
/**
 * Placeholder for evaluated elements
 * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
 */
export interface TestScriptVariable extends BackboneElement {
  /**
   * A default, hard-coded, or user-defined value for this variable.
   * The purpose of this element is to allow for a pre-defined value that can be used as a default or as an override value. Test engines can optionally use this as a placeholder for user-defined execution time values.
   */
  defaultValue?: string | undefined;
  _defaultValue?: Element | undefined;
  /**
   * A free text natural language description of the variable and its purpose.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * The fluentpath expression to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.
   * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.
   */
  expression?: string | undefined;
  _expression?: Element | undefined;
  /**
   * Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
   * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.
   */
  headerField?: string | undefined;
  _headerField?: Element | undefined;
  /**
   * Displayable text string with hint help information to the user when entering a default value.
   */
  hint?: string | undefined;
  _hint?: Element | undefined;
  /**
   * Descriptive name for this variable.
   * Placeholders would contain the variable name wrapped in ${} in "operation.params", "operation.requestHeader.value", and "operation.url" elements.  These placeholders would need to be replaced by the variable value before the operation is executed.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified.
   * If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.
   */
  path?: string | undefined;
  _path?: Element | undefined;
  /**
   * Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
   * This can be a statically defined fixture (at the top of the TestScript) or a dynamically set fixture created by responseId of the `action.operation` element.
   */
  sourceId?: string | undefined;
  _sourceId?: Element | undefined;
}
export interface TestScript extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'TestScript';
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the test script was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test script changes.
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the test script. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the test script from a consumer's perspective.
   * This description can be used to capture details such as why the test script was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the test script as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created).
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * An abstract server used in operations within this test script in the destination element.
   * The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
   */
  destination?: TestScriptDestination[] | undefined;
  /**
   * A boolean value to indicate that this test script is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of test script that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental test script in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
   */
  fixture?: TestScriptFixture[] | undefined;
  /**
   * A formal identifier that is used to identify this test script when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this test script outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier | undefined;
  /**
   * A legal or geographic region in which the test script is intended to be used.
   * It may be possible for the test script to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
   */
  metadata?: TestScriptMetadata | undefined;
  /**
   * A natural language name identifying the test script. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * An abstract server used in operations within this test script in the origin element.
   * The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
   */
  origin?: TestScriptOrigin[] | undefined;
  /**
   * Reference to the profile to be used for validation.
   * See http://hl7.org/fhir/STU3/resourcelist.html for complete list of resource types.
   */
  profile?: Reference[] | undefined;
  /**
   * The name of the individual or organization that published the test script.
   * Usually an organization, but may be an individual. The publisher (or steward) of the test script is the organization or individual primarily responsible for the maintenance and upkeep of the test script. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the test script. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this test script is needed and why it has been designed as it has.
   * This element does not describe the usage of the test script Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this test script.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * Assert rule to be used in one or more asserts within the test script.
   * Each rule should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.
   */
  rule?: TestScriptRule[] | undefined;
  /**
   * Contains one or more rules.  Offers a way to group rules so assertions could reference the group of rules and have them all applied.
   * Each rule within a ruleset should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.
   */
  ruleset?: TestScriptRuleset[] | undefined;
  /**
   * A series of required setup operations before tests are executed.
   */
  setup?: TestScriptSetup | undefined;
  /**
   * The status of this test script. Enables tracking the life-cycle of the content.
   * Allows filtering of test scripts that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired test script without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A series of operations required to clean up after the all the tests are executed (successfully or otherwise).
   */
  teardown?: TestScriptTeardown | undefined;
  /**
   * A test in this script.
   */
  test?: TestScriptTest[] | undefined;
  /**
   * A short, descriptive, user-friendly title for the test script.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this test script when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this test script is (or will be) published. The URL SHOULD include the major version of the test script. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url: string;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate test script instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * Variable is set based either on element value in response body or on header field value in the response headers.
   * Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
   */
  variable?: TestScriptVariable[] | undefined;
  /**
   * The identifier that is used to identify this version of the test script when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the test script author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different test script instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the test script with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Additional representations for this concept
 */
export interface ValueSetComposeIncludeConceptDesignation extends BackboneElement {
  /**
   * The language this designation is defined for.
   * In the absence of a language, the resource language applies.
   */
  language?: string | undefined;
  _language?: Element | undefined;
  /**
   * A code that details how this designation would be used.
   * If no use is provided, the designation can be assumed to be suitable for general display to a human user.
   */
  use?: Coding | undefined;
  /**
   * The text value for this designation.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * A concept defined in the system
 * The list of concepts is considered ordered, though the order may not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.
 */
export interface ValueSetComposeIncludeConcept extends BackboneElement {
  /**
   * Specifies a code for the concept to be included or excluded.
   * Expressions are allowed if defined by the underlying code system.
   */
  code: string;
  _code?: Element | undefined;
  /**
   * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
   */
  designation?: ValueSetComposeIncludeConceptDesignation[] | undefined;
  /**
   * The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.
   * The value set resource allows for an alternative display to be specified for when this concept is used in this particular value set. See notes in the value set narrative about the correct use of this element.
   */
  display?: string | undefined;
  _display?: Element | undefined;
}
/**
 * Select codes/concepts by their properties (including relationships)
 * Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.
 */
export interface ValueSetComposeIncludeFilter extends BackboneElement {
  /**
   * The kind of operation to perform as a part of the filter criteria.
   */
  op: ('='|'is-a'|'descendent-of'|'is-not-a'|'regex'|'in'|'not-in'|'generalizes'|'exists');
  _op?: Element | undefined;
  /**
   * A code that identifies a property defined in the code system.
   */
  property: string;
  _property?: Element | undefined;
  /**
   * The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value when the operation is 'regex', or one of the values (true and false), when the operation is 'exists'.
   * Use regex matching with care - full regex matching on every SNOMED CT term is prohibitive, for example.
   */
  value: string;
  _value?: Element | undefined;
}
/**
 * Include one or more codes from a code system or other value set(s)
 * All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.
 */
export interface ValueSetComposeInclude extends BackboneElement {
  /**
   * Specifies a concept to be included or excluded.
   * The list of concepts is considered ordered, though the order may not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.
   */
  concept?: ValueSetComposeIncludeConcept[] | undefined;
  /**
   * Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
   * Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.
   */
  filter?: ValueSetComposeIncludeFilter[] | undefined;
  /**
   * An absolute URI which is the code system from which the selected codes come from.
   * If there are no codes or filters, the entire code system is included. Note that the set of codes that are included may contain abstract codes. See ''Coding.system'' for further documentation about the correct value for the system element.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * Selects concepts found in this value set. This is an absolute URI that is a reference to ValueSet.url.
   * The value set URI is either a logical reference to a defined value set such as a [SNOMED CT reference set]{snomedct.html#implicit}, or a direct reference to a value set definition using ValueSet.url. The reference may not refer to an actual FHIR ValueSet resource; in this case, whatever is referred to is an implicit definition of a value set that needs to be clear about how versions are resolved.
   */
  valueSet?: string[] | undefined;
  _valueSet?: Element[] | undefined;
  /**
   * The version of the code system that the codes are selected from.
   * This is used when selecting the descendants of a concept - they may change between versions. If no version is specified, then the exact contents of the value set may not be known until a context of use binds it to a particular version.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Definition of the content of the value set (CLD)
 */
export interface ValueSetCompose extends BackboneElement {
  /**
   * Exclude one or more codes from the value set based on code system filters and/or other value sets.
   * Usually this is used to selectively exclude codes that were included by subsumption in the inclusions. Any display names specified for the codes are ignored.
   */
  exclude?: ValueSetComposeInclude[] | undefined;
  /**
   * Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable ExpansionProfile (but generally, inactive codes would be expected to be included).
   * Note that in the FHIR terminology framework, "deprecated" does not mean inactive, but in some code systems (e.g. LOINC, deprecated means inactive). Code systems should define what codes are considered to be inactive. If this is not clearly defined (including in the FHIR code system resource), then all codes are assumed to be active.
   */
  inactive?: boolean | undefined;
  _inactive?: Element | undefined;
  /**
   * Include one or more codes from a code system or other value set(s).
   * All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.
   */
  include: ValueSetComposeInclude[];
  /**
   * If a locked date is defined, then the Content Logical Definition must be evaluated using the current version as of the locked date for referenced code system(s) and value set instances where ValueSet.compose.include.version is not defined.
   * With a defined lockedDate the value set is considered "Locked". Otherwise, the value set may have different expansions as underlying code systems and/or value sets evolve.  The interpretation of lockedDate is often dependent on the context - e.g. a SNOMED CT derived value set with a lockedDate will have a different expansion in USA than in UK.  If a value set specifies a version for include and exclude statements, and also specifies a locked date, the specified versions need to be available that date, or the value set will not be usable.
   */
  lockedDate?: string | undefined;
  _lockedDate?: Element | undefined;
}
/**
 * Codes in the value set
 */
export interface ValueSetExpansionContains extends BackboneElement {
  /**
   * If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.
   * This should not be understood to exclude its use for searching (e.g. by subsumption testing). The client should know whether it is appropriate for the user to select an abstract code or not.
   */
  abstract?: boolean | undefined;
  _abstract?: Element | undefined;
  /**
   * The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
   */
  code?: string | undefined;
  _code?: Element | undefined;
  /**
   * Other codes and entries contained under this entry in the hierarchy.
   * If the expansion uses this element, there is  no implication about the logical relationship between them, and the  structure cannot be used for logical inferencing. The structure  exists to provide navigational assistance for helping human users to  locate codes in the expansion.
   */
  contains?: ValueSetExpansionContains[] | undefined;
  /**
   * Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.
   * The designations provided must be based on the value set and code system definitions.
   */
  designation?: ValueSetComposeIncludeConceptDesignation[] | undefined;
  /**
   * The recommended display for this item in the expansion.
   */
  display?: string | undefined;
  _display?: Element | undefined;
  /**
   * If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data.
   * This should only have a value if the concept is inactive.
   */
  inactive?: boolean | undefined;
  _inactive?: Element | undefined;
  /**
   * An absolute URI which is the code system in which the code for this item in the expansion is defined.
   */
  system?: string | undefined;
  _system?: Element | undefined;
  /**
   * The version of this code system that defined this code and/or display. This should only be used with code systems that do not enforce concept permanence.
   * The exact value of the version string is specified by the system from which the code is derived.
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Parameter that controlled the expansion process
 * The server decides which parameters to include here, but at a minimum, the list SHOULD include the date, filter, and profile parameters passed to the $expand operation (if any).
 */
export interface ValueSetExpansionParameter extends BackboneElement {
  /**
   * The name of the parameter.
   * The names are assigned at the discretion of the server.
   */
  name: string;
  _name?: Element | undefined;
  /**
   * The value of the parameter.
   */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;
  /**
   * The value of the parameter.
   */
  valueString?: string | undefined;
  _valueString?: Element | undefined;
  /**
   * The value of the parameter.
   */
  valueNumber?: number | undefined;
}
/**
 * Used when the value set is "expanded"
 * Expansion is performed to produce a collection of codes that are ready to use for data entry or validation.
 */
export interface ValueSetExpansion extends BackboneElement {
  /**
   * The codes that are contained in the value set expansion.
   */
  contains?: ValueSetExpansionContains[] | undefined;
  /**
   * An identifier that uniquely identifies this expansion of the valueset. Systems may re-use the same identifier as long as the expansion and the definition remain the same, but are not required to do so.
   * Typically, this uri is a UUID (e.g. urn:uuid:8230ff20-c97a-4167-a59d-dc2cb9df16dd).
   */
  identifier: string;
  _identifier?: Element | undefined;
  /**
   * If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL not be present.
   * Paging only applies to flat expansions. If a filter is applied, the count is the number of concepts that matched the filter, not the number of concepts in an unfiltered view of the expansion.
   */
  offset?: number | undefined;
  /**
   * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
   * The server decides which parameters to include here, but at a minimum, the list SHOULD include the date, filter, and profile parameters passed to the $expand operation (if any).
   */
  parameter?: ValueSetExpansionParameter[] | undefined;
  /**
   * The time at which the expansion was produced by the expanding system.
   * This SHOULD be a fully populated instant, but in some circumstances, value sets are expanded by hand, and the expansion is published without that precision.
   */
  timestamp: string;
  _timestamp?: Element | undefined;
  /**
   * The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.
   * Paging only applies to flat expansions.
   */
  total?: number | undefined;
}
export interface ValueSet extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'ValueSet';
  /**
   * A set of criteria that define the content logical definition of the value set by including or excluding codes from outside this value set. This I also known as the "Content Logical Definition" (CLD).
   */
  compose?: ValueSetCompose | undefined;
  /**
   * Contact details to assist a user in finding and communicating with the publisher.
   * May be a web site, an email address, a telephone number, etc.
   */
  contact?: ContactDetail[] | undefined;
  /**
   * A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
   * null Frequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required.
   */
  copyright?: string | undefined;
  _copyright?: Element | undefined;
  /**
   * The date  (and optionally time) when the value set was published. The date must change if and when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the value set changes. (e.g. the 'content logical definition').
   * Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the value set. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
   */
  date?: string | undefined;
  _date?: Element | undefined;
  /**
   * A free text natural language description of the value set from a consumer's perspective.
   * This description can be used to capture details such as why the value set was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the value set as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the profile is presumed to be the predominant language in the place the profile was created). The description is not intended to describe the semantics of the Value Set - there are no intrinsic semantics separate from the codes contained in its expansion. The description should capture its intended use, which is needed for ensuring integrity for its use in models across future changes. A description should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a description.
   */
  description?: string | undefined;
  _description?: Element | undefined;
  /**
   * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
   * Expansion is performed to produce a collection of codes that are ready to use for data entry or validation.
   */
  expansion?: ValueSetExpansion | undefined;
  /**
   * A boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
   * Allows filtering of value set that are appropriate for use vs. not. This is labeled as "Is Modifier" because applications should not use an experimental value set in production.
   */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;
  /**
   * Whether this is intended to be used with an extensible binding or not.
   */
  extensible?: boolean | undefined;
  _extensible?: Element | undefined;
  /**
   * A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
   * Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, e.g., to identify this value set outside of FHIR, where it is not possible to use the logical URI.
   */
  identifier?: Identifier[] | undefined;
  /**
   * If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
   * Normally immutability is set to 'false', which is the default assumption if it is not populated.  Note that the implication is that if this is set to 'true', there may be only one ValueSet version for this definition. Immutability tends to be set to 'true' in one of two cases: - Where the value set, by the nature of its usage, cannot change.  For example "All specializations of ACT in ActClassCode" - Where there's no safe way to express the "Purpose" such that someone else could safely make changes to the value set definition. Source workflow control must guarantee that the same URI always yields the same definition.
   */
  immutable?: boolean | undefined;
  _immutable?: Element | undefined;
  /**
   * A legal or geographic region in which the value set is intended to be used.
   * It may be possible for the value set to be used in jurisdictions other than those for which it was originally designed or intended.
   */
  jurisdiction?: CodeableConcept[] | undefined;
  /**
   * A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation.
   * The name is not expected to be globally unique. The name should be a simple alpha-numeric type name to ensure that it is computable friendly. A name should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a name.
   */
  name?: string | undefined;
  _name?: Element | undefined;
  /**
   * The name of the individual or organization that published the value set.
   * Usually an organization, but may be an individual. The publisher (or steward) of the value set is the organization or individual primarily responsible for the maintenance and upkeep of the value set. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the value set. This item SHOULD be populated unless the information is available from context.
   */
  publisher?: string | undefined;
  _publisher?: Element | undefined;
  /**
   * Explaination of why this value set is needed and why it has been designed as it has.
   * This element does not describe the usage of the value set Instead  it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this value set.
   */
  purpose?: string | undefined;
  _purpose?: Element | undefined;
  /**
   * The status of this value set. Enables tracking the life-cycle of the content.
   * Allows filtering of value sets that are appropriate for use vs. not.  
   * This is labeled as "Is Modifier" because applications should not use a retired value set without due consideration.
   */
  status: ('draft'|'active'|'retired'|'unknown');
  _status?: Element | undefined;
  /**
   * A short, descriptive, user-friendly title for the value set.
   * This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
   */
  title?: string | undefined;
  _title?: Element | undefined;
  /**
   * An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this value set is (or will be) published. The URL SHOULD include the major version of the value set. For more information see [Technical and Business Versions](resource.html#versions).
   * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  Multiple instances may share the same url if they have a distinct version.
   */
  url?: string | undefined;
  _url?: Element | undefined;
  /**
   * The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching for appropriate value set instances.
   * When multiple useContexts are specified, there is no expectation whether all or any of the contexts apply.
   */
  useContext?: UsageContext[] | undefined;
  /**
   * The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
   * There may be different value set instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a refrence to a particular business version of the value set with the format [url]|[version].
   */
  version?: string | undefined;
  _version?: Element | undefined;
}
/**
 * Vision supply authorization
 */
export interface VisionPrescriptionDispense extends BackboneElement {
  /**
   * Power adjustment for multifocal lenses measured in diopters (0.25 units).
   */
  add?: number | undefined;
  /**
   * Adjustment for astigmatism measured in integer degrees.
   */
  axis?: number | undefined;
  /**
   * Back curvature measured in millimeters.
   */
  backCurve?: number | undefined;
  /**
   * The relative base, or reference lens edge, for the prism.
   */
  base?: ('up'|'down'|'in'|'out') | undefined;
  _base?: Element | undefined;
  /**
   * Brand recommendations or restrictions.
   */
  brand?: string | undefined;
  _brand?: Element | undefined;
  /**
   * Special color or pattern.
   */
  color?: string | undefined;
  _color?: Element | undefined;
  /**
   * Power adjustment for astigmatism measured in diopters (0.25 units).
   */
  cylinder?: number | undefined;
  /**
   * Contact lens diameter measured in millimeters.
   */
  diameter?: number | undefined;
  /**
   * The recommended maximum wear period for the lens.
   */
  duration?: Quantity | undefined;
  /**
   * The eye for which the lens applies.
   */
  eye?: ('right'|'left') | undefined;
  _eye?: Element | undefined;
  /**
   * Notes for special requirements such as coatings and lens materials.
   */
  note?: Annotation[] | undefined;
  /**
   * Contact lens power measured in diopters (0.25 units).
   */
  power?: number | undefined;
  /**
   * Amount of prism to compensate for eye alignment in fractional units.
   */
  prism?: number | undefined;
  /**
   * Identifies the type of vision correction product which is required for the patient.
   */
  product?: CodeableConcept | undefined;
  /**
   * Lens power measured in diopters (0.25 units).
   */
  sphere?: number | undefined;
}
export interface VisionPrescription extends DomainResource {
  /** Resource Type Name (for serialization) */
  readonly resourceType: 'VisionPrescription';
  /**
   * The date (and perhaps time) when the prescription was written.
   */
  dateWritten?: string | undefined;
  _dateWritten?: Element | undefined;
  /**
   * Deals with details of the dispense part of the supply specification.
   */
  dispense?: VisionPrescriptionDispense[] | undefined;
  /**
   * A link to a resource that identifies the particular occurrence of contact between patient and health care provider.
   */
  encounter?: Reference | undefined;
  /**
   * Business identifier which may be used by other parties to reference or identify the prescription.
   */
  identifier?: Identifier[] | undefined;
  /**
   * A link to a resource representing the person to whom the vision products will be supplied.
   */
  patient?: Reference | undefined;
  /**
   * The healthcare professional responsible for authorizing the prescription.
   */
  prescriber?: Reference | undefined;
  /**
   * Can be the reason or the indication for writing the prescription.
   */
  reasonCodeableConcept?: CodeableConcept | undefined;
  /**
   * Can be the reason or the indication for writing the prescription.
   */
  reasonReference?: Reference | undefined;
  /**
   * The status of the resource instance.
   */
  status?: ('active'|'cancelled'|'draft'|'entered-in-error') | undefined;
  _status?: Element | undefined;
}
/**
 * Resource binding for generic use.
 */
export type FhirResource = 
  Account
  |ActivityDefinition
  |AdverseEvent
  |AllergyIntolerance
  |Appointment
  |AppointmentResponse
  |AuditEvent
  |Basic
  |Binary
  |BodySite
  |Bundle
  |CapabilityStatement
  |CarePlan
  |CareTeam
  |ChargeItem
  |Claim
  |ClaimResponse
  |ClinicalImpression
  |CodeSystem
  |Communication
  |CommunicationRequest
  |CompartmentDefinition
  |Composition
  |ConceptMap
  |Condition
  |Consent
  |Contract
  |Coverage
  |DataElement
  |DetectedIssue
  |Device
  |DeviceComponent
  |DeviceMetric
  |DeviceRequest
  |DeviceUseStatement
  |DiagnosticReport
  |DocumentManifest
  |DocumentReference
  |EligibilityRequest
  |EligibilityResponse
  |Encounter
  |Endpoint
  |EnrollmentRequest
  |EnrollmentResponse
  |EpisodeOfCare
  |ExpansionProfile
  |ExplanationOfBenefit
  |FamilyMemberHistory
  |Flag
  |Goal
  |GraphDefinition
  |Group
  |GuidanceResponse
  |HealthcareService
  |ImagingManifest
  |ImagingStudy
  |Immunization
  |ImmunizationRecommendation
  |ImplementationGuide
  |Library
  |Linkage
  |List
  |Location
  |Measure
  |MeasureReport
  |Media
  |Medication
  |MedicationAdministration
  |MedicationDispense
  |MedicationRequest
  |MedicationStatement
  |MessageDefinition
  |MessageHeader
  |NamingSystem
  |NutritionOrder
  |Observation
  |OperationDefinition
  |OperationOutcome
  |Organization
  |Parameters
  |Patient
  |PaymentNotice
  |PaymentReconciliation
  |Person
  |PlanDefinition
  |Practitioner
  |PractitionerRole
  |Procedure
  |ProcedureRequest
  |ProcessRequest
  |ProcessResponse
  |Provenance
  |Questionnaire
  |QuestionnaireResponse
  |ReferralRequest
  |RelatedPerson
  |RequestGroup
  |ResearchStudy
  |ResearchSubject
  |RiskAssessment
  |Schedule
  |SearchParameter
  |Sequence
  |ServiceDefinition
  |Slot
  |Specimen
  |StructureDefinition
  |StructureMap
  |Subscription
  |Substance
  |SupplyDelivery
  |SupplyRequest
  |Task
  |TestReport
  |TestScript
  |ValueSet
  |VisionPrescription;
