// <copyright file="FhirResourceBase.cs" company="Microsoft Corporation">
//     Copyright (c) Microsoft Corporation. All rights reserved.
//     Licensed under the MIT License (MIT). See LICENSE in the repo root for license information.
// </copyright>

using System.Diagnostics.CodeAnalysis;
using Microsoft.Health.Fhir.CodeGenCommon.Extensions;
using Microsoft.Health.Fhir.CodeGenCommon.Structural;
using static Microsoft.Health.Fhir.CodeGenCommon.Extensions.FhirNameConventionExtensions;

namespace Microsoft.Health.Fhir.CodeGenCommon.Resource;

/// <summary>A FHIR resource base.</summary>
public abstract record class FhirResourceBase : ICloneable
{
    internal string _name = string.Empty;
    internal string _baseTypeCanonical = string.Empty;

    /// <summary>
    /// Initializes a new instance of the <see cref="FhirResourceBase"/> class.
    /// </summary>
    public FhirResourceBase()
    {
    }

    /// <summary>Initializes a new instance of the FhirDefinitionBase class.</summary>
    /// <param name="other">The other.</param>
    [SetsRequiredMembers]
    protected FhirResourceBase(FhirResourceBase other)
    {
        Id = other.Id;
        Meta = other.Meta == null ? null : other.Meta with { };
        Name = other.Name;
        Url = other.Url;
        BaseTypeCanonical = other.BaseTypeCanonical;
        ShortDescription = other.ShortDescription;
        Purpose = other.Purpose;
        Comment = other.Comment;
        ValidationRegEx = other.ValidationRegEx;
    }

    /// <summary>Gets or initializes the logical id of this artifact.</summary>
    public required string Id { get; init; }

    /// <summary>Gets or initializes the FHIR metadata about this resource.</summary>
    public FhirResourceMeta? Meta { get; init; } = null;

    /// <summary>Gets or initializes the language of the resource content.</summary>
    public string Language { get; init; } = string.Empty;

    /// <summary>
    /// Gets a natural language name identifying the structure definition. This name should be usable as an
    /// identifier for the module by machine processing applications such as code generation.
    /// </summary>
    /// <value>The name.</value>
    public required string Name { get; init; }

    /// <summary>Gets URL of the document.</summary>
    public required string Url { get; init; }

    /// <summary>Gets or sets the Canonical of the type this type inherits from (null if none).</summary>
    /// <value>The name of the base type.</value>
    public string BaseTypeCanonical { get => _baseTypeCanonical; init => _baseTypeCanonical = value; }

    /// <summary>
    /// Gets a concise description of what this element means (e.g. for use in autogenerated summaries).
    /// </summary>
    /// <value>The description.</value>
    public string ShortDescription { get; init; } = string.Empty;

    /// <summary>
    /// Gets a complete explanation of the meaning of the data element for human readability.  For
    /// the case of elements derived from existing elements (e.g. constraints), the definition SHALL be
    /// consistent with the base definition, but convey the meaning of the element in the particular
    /// context of use of the resource. (Note: The text you are reading is specified in
    /// ElementDefinition.definition).
    /// </summary>
    /// <value>The definition.</value>
    public string Purpose { get; init; } = string.Empty;

    /// <summary>
    /// Gets explanatory notes and implementation guidance about the data element, including notes about how
    /// to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is
    /// specified in ElementDefinition.comment).
    /// </summary>
    /// <value>The comment.</value>
    public string Comment { get; init; } = string.Empty;

    /// <summary>
    /// Gets a RegEx string used to validate values in this property.
    /// </summary>
    /// <value>The validation RegEx.</value>
    public string ValidationRegEx { get; init; } = string.Empty;

    /// <summary>Makes a deep copy of this object.</summary>
    /// <returns>A copy of this object.</returns>
    object ICloneable.Clone() => this with { };
}
