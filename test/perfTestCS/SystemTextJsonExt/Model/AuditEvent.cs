// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for AuditEvent
  /// </summary>
  public static class AuditEventJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR AuditEvent into JSON
    /// </summary>
    public static void SerializeJson(this AuditEvent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","AuditEvent");
      // Complex: AuditEvent, Export: AuditEvent, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if ((current.Subtype != null) && (current.Subtype.Count != 0))
      {
        writer.WritePropertyName("subtype");
        writer.WriteStartArray();
        foreach (Coding val in current.Subtype)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.ActionElement != null)
      {
        writer.WriteString("action",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ActionElement.Value));
      }

      if (current.Period != null)
      {
        writer.WritePropertyName("period");
        current.Period.SerializeJson(writer, options);
      }

      writer.WriteString("recorded",((DateTimeOffset)current.RecordedElement.Value).ToString("yyyy-MM-dd'T'HH:mm:ss.FFFFFFFK", System.Globalization.CultureInfo.InvariantCulture));

      if (current.OutcomeElement != null)
      {
        writer.WriteString("outcome",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.OutcomeElement.Value));
      }

      if ((current.OutcomeDescElement != null) && (current.OutcomeDescElement.Value != null))
      {
        writer.WriteString("outcomeDesc",current.OutcomeDescElement.Value);
      }

      if ((current.PurposeOfEvent != null) && (current.PurposeOfEvent.Count != 0))
      {
        writer.WritePropertyName("purposeOfEvent");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.PurposeOfEvent)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Agent != null) && (current.Agent.Count != 0))
      {
        writer.WritePropertyName("agent");
        writer.WriteStartArray();
        foreach (AuditEvent.AgentComponent val in current.Agent)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      writer.WritePropertyName("source");
      current.Source.SerializeJson(writer, options);

      if ((current.Entity != null) && (current.Entity.Count != 0))
      {
        writer.WritePropertyName("entity");
        writer.WriteStartArray();
        foreach (AuditEvent.EntityComponent val in current.Entity)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent
    /// </summary>
    public static void DeserializeJson(this AuditEvent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent
    /// </summary>
    public static void DeserializeJsonProperty(this AuditEvent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.Coding();
          current.Type.DeserializeJson(ref reader, options);
          break;

        case "subtype":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Subtype = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Coding v_Subtype = new Hl7.Fhir.Model.Coding();
            v_Subtype.DeserializeJson(ref reader, options);
            current.Subtype.Add(v_Subtype);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Subtype.Count == 0)
          {
            current.Subtype = null;
          }
          break;

        case "action":
          current.ActionElement =new Code<Hl7.Fhir.Model.AuditEvent.AuditEventAction>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.AuditEvent.AuditEventAction>(reader.GetString()));
          break;

        case "period":
          current.Period = new Hl7.Fhir.Model.Period();
          current.Period.DeserializeJson(ref reader, options);
          break;

        case "recorded":
          current.RecordedElement = new Instant(DateTimeOffset.Parse(reader.GetString()));
          break;

        case "_recorded":
          ((Hl7.Fhir.Model.Element)current.RecordedElement).DeserializeJson(ref reader, options);
          break;

        case "outcome":
          current.OutcomeElement =new Code<Hl7.Fhir.Model.AuditEvent.AuditEventOutcome>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.AuditEvent.AuditEventOutcome>(reader.GetString()));
          break;

        case "outcomeDesc":
          current.OutcomeDescElement = new FhirString(reader.GetString());
          break;

        case "purposeOfEvent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PurposeOfEvent = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_PurposeOfEvent = new Hl7.Fhir.Model.CodeableConcept();
            v_PurposeOfEvent.DeserializeJson(ref reader, options);
            current.PurposeOfEvent.Add(v_PurposeOfEvent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PurposeOfEvent.Count == 0)
          {
            current.PurposeOfEvent = null;
          }
          break;

        case "agent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Agent = new List<AuditEvent.AgentComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.AuditEvent.AgentComponent v_Agent = new Hl7.Fhir.Model.AuditEvent.AgentComponent();
            v_Agent.DeserializeJson(ref reader, options);
            current.Agent.Add(v_Agent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Agent.Count == 0)
          {
            current.Agent = null;
          }
          break;

        case "source":
          current.Source = new Hl7.Fhir.Model.AuditEvent.SourceComponent();
          current.Source.DeserializeJson(ref reader, options);
          break;

        case "entity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Entity = new List<AuditEvent.EntityComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.AuditEvent.EntityComponent v_Entity = new Hl7.Fhir.Model.AuditEvent.EntityComponent();
            v_Entity.DeserializeJson(ref reader, options);
            current.Entity.Add(v_Entity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Entity.Count == 0)
          {
            current.Entity = null;
          }
          break;

        // Complex: AuditEvent, Export: AuditEvent, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR AuditEvent#Agent into JSON
    /// </summary>
    public static void SerializeJson(this AuditEvent.AgentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: AuditEvent#Agent, Export: AgentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.Role != null) && (current.Role.Count != 0))
      {
        writer.WritePropertyName("role");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Role)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Who != null)
      {
        writer.WritePropertyName("who");
        current.Who.SerializeJson(writer, options);
      }

      if ((current.AltIdElement != null) && (current.AltIdElement.Value != null))
      {
        writer.WriteString("altId",current.AltIdElement.Value);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      writer.WriteBoolean("requestor",(bool)current.RequestorElement.Value);

      if (current.Location != null)
      {
        writer.WritePropertyName("location");
        current.Location.SerializeJson(writer, options);
      }

      if ((current.PolicyElement != null) && (current.PolicyElement.Count != 0))
      {
        writer.WritePropertyName("policy");
        writer.WriteStartArray();
        foreach (FhirUri val in current.PolicyElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (current.Media != null)
      {
        writer.WritePropertyName("media");
        current.Media.SerializeJson(writer, options);
      }

      if (current.Network != null)
      {
        writer.WritePropertyName("network");
        current.Network.SerializeJson(writer, options);
      }

      if ((current.PurposeOfUse != null) && (current.PurposeOfUse.Count != 0))
      {
        writer.WritePropertyName("purposeOfUse");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.PurposeOfUse)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Agent
    /// </summary>
    public static void DeserializeJson(this AuditEvent.AgentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Agent
    /// </summary>
    public static void DeserializeJsonProperty(this AuditEvent.AgentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          current.Type.DeserializeJson(ref reader, options);
          break;

        case "role":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Role = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Role = new Hl7.Fhir.Model.CodeableConcept();
            v_Role.DeserializeJson(ref reader, options);
            current.Role.Add(v_Role);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Role.Count == 0)
          {
            current.Role = null;
          }
          break;

        case "who":
          current.Who = new Hl7.Fhir.Model.ResourceReference();
          current.Who.DeserializeJson(ref reader, options);
          break;

        case "altId":
          current.AltIdElement = new FhirString(reader.GetString());
          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "requestor":
          current.RequestorElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "location":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          current.Location.DeserializeJson(ref reader, options);
          break;

        case "policy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PolicyElement = new List<FhirUri>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.PolicyElement.Add(new FhirUri(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PolicyElement.Count == 0)
          {
            current.PolicyElement = null;
          }
          break;

        case "media":
          current.Media = new Hl7.Fhir.Model.Coding();
          current.Media.DeserializeJson(ref reader, options);
          break;

        case "network":
          current.Network = new Hl7.Fhir.Model.AuditEvent.NetworkComponent();
          current.Network.DeserializeJson(ref reader, options);
          break;

        case "purposeOfUse":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PurposeOfUse = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_PurposeOfUse = new Hl7.Fhir.Model.CodeableConcept();
            v_PurposeOfUse.DeserializeJson(ref reader, options);
            current.PurposeOfUse.Add(v_PurposeOfUse);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PurposeOfUse.Count == 0)
          {
            current.PurposeOfUse = null;
          }
          break;

        // Complex: agent, Export: AgentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR AuditEvent#Network into JSON
    /// </summary>
    public static void SerializeJson(this AuditEvent.NetworkComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: AuditEvent#Network, Export: NetworkComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.AddressElement != null) && (current.AddressElement.Value != null))
      {
        writer.WriteString("address",current.AddressElement.Value);
      }

      if (current.TypeElement != null)
      {
        writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Network
    /// </summary>
    public static void DeserializeJson(this AuditEvent.NetworkComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Network
    /// </summary>
    public static void DeserializeJsonProperty(this AuditEvent.NetworkComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "address":
          current.AddressElement = new FhirString(reader.GetString());
          break;

        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.AuditEvent.AuditEventAgentNetworkType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.AuditEvent.AuditEventAgentNetworkType>(reader.GetString()));
          break;

        // Complex: network, Export: NetworkComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR AuditEvent#Source into JSON
    /// </summary>
    public static void SerializeJson(this AuditEvent.SourceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: AuditEvent#Source, Export: SourceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.SiteElement != null) && (current.SiteElement.Value != null))
      {
        writer.WriteString("site",current.SiteElement.Value);
      }

      writer.WritePropertyName("observer");
      current.Observer.SerializeJson(writer, options);

      if ((current.Type != null) && (current.Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();
        foreach (Coding val in current.Type)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Source
    /// </summary>
    public static void DeserializeJson(this AuditEvent.SourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Source
    /// </summary>
    public static void DeserializeJsonProperty(this AuditEvent.SourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "site":
          current.SiteElement = new FhirString(reader.GetString());
          break;

        case "observer":
          current.Observer = new Hl7.Fhir.Model.ResourceReference();
          current.Observer.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Type = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Coding v_Type = new Hl7.Fhir.Model.Coding();
            v_Type.DeserializeJson(ref reader, options);
            current.Type.Add(v_Type);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }
          break;

        // Complex: source, Export: SourceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR AuditEvent#Entity into JSON
    /// </summary>
    public static void SerializeJson(this AuditEvent.EntityComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: AuditEvent#Entity, Export: EntityComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.What != null)
      {
        writer.WritePropertyName("what");
        current.What.SerializeJson(writer, options);
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Role != null)
      {
        writer.WritePropertyName("role");
        current.Role.SerializeJson(writer, options);
      }

      if (current.Lifecycle != null)
      {
        writer.WritePropertyName("lifecycle");
        current.Lifecycle.SerializeJson(writer, options);
      }

      if ((current.SecurityLabel != null) && (current.SecurityLabel.Count != 0))
      {
        writer.WritePropertyName("securityLabel");
        writer.WriteStartArray();
        foreach (Coding val in current.SecurityLabel)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.DescriptionElement != null) && (current.DescriptionElement.Value != null))
      {
        writer.WriteString("description",current.DescriptionElement.Value);
      }

      if ((current.QueryElement != null) && (current.QueryElement.Value != null))
      {
        writer.WriteString("query",System.Convert.ToBase64String(current.QueryElement.Value));
      }

      if ((current.Detail != null) && (current.Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();
        foreach (AuditEvent.DetailComponent val in current.Detail)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Entity
    /// </summary>
    public static void DeserializeJson(this AuditEvent.EntityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Entity
    /// </summary>
    public static void DeserializeJsonProperty(this AuditEvent.EntityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "what":
          current.What = new Hl7.Fhir.Model.ResourceReference();
          current.What.DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.Coding();
          current.Type.DeserializeJson(ref reader, options);
          break;

        case "role":
          current.Role = new Hl7.Fhir.Model.Coding();
          current.Role.DeserializeJson(ref reader, options);
          break;

        case "lifecycle":
          current.Lifecycle = new Hl7.Fhir.Model.Coding();
          current.Lifecycle.DeserializeJson(ref reader, options);
          break;

        case "securityLabel":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SecurityLabel = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Coding v_SecurityLabel = new Hl7.Fhir.Model.Coding();
            v_SecurityLabel.DeserializeJson(ref reader, options);
            current.SecurityLabel.Add(v_SecurityLabel);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SecurityLabel.Count == 0)
          {
            current.SecurityLabel = null;
          }
          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());
          break;

        case "query":
          current.QueryElement = new Base64Binary(System.Convert.FromBase64String(reader.GetString()));
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Detail = new List<AuditEvent.DetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.AuditEvent.DetailComponent v_Detail = new Hl7.Fhir.Model.AuditEvent.DetailComponent();
            v_Detail.DeserializeJson(ref reader, options);
            current.Detail.Add(v_Detail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Detail.Count == 0)
          {
            current.Detail = null;
          }
          break;

        // Complex: entity, Export: EntityComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR AuditEvent#Detail into JSON
    /// </summary>
    public static void SerializeJson(this AuditEvent.DetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: AuditEvent#Detail, Export: DetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("type",current.TypeElement.Value);

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case FhirString v_FhirString:
            writer.WriteString("valueString",v_FhirString.Value);
            break;
          case Base64Binary v_Base64Binary:
            writer.WriteString("valueBase64Binary", System.Convert.ToBase64String((byte[])v_Base64Binary.Value));
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Detail
    /// </summary>
    public static void DeserializeJson(this AuditEvent.DetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Detail
    /// </summary>
    public static void DeserializeJsonProperty(this AuditEvent.DetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.TypeElement = new FhirString(reader.GetString());
          break;

        case "valueString":
          current.Value = new FhirString(reader.GetString());
          break;

        case "valueBase64Binary":
          current.Value = new Base64Binary(System.Convert.FromBase64String(reader.GetString()));
          break;

        // Complex: detail, Export: DetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class AuditEventJsonConverter : JsonConverter<AuditEvent>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(AuditEvent).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, AuditEvent value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override AuditEvent Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        AuditEvent target = new AuditEvent();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
