// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for Questionnaire
  /// </summary>
  public static class QuestionnaireJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR Questionnaire into JSON
    /// </summary>
    public static void SerializeJson(this Questionnaire current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","Questionnaire");
      // Complex: Questionnaire, Export: Questionnaire, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.TitleElement != null) && (current.TitleElement.Value != null))
      {
        writer.WriteString("title",current.TitleElement.Value);
      }

      if ((current.DerivedFromElement != null) && (current.DerivedFromElement.Count != 0))
      {
        writer.WritePropertyName("derivedFrom");
        writer.WriteStartArray();
        foreach (Canonical val in current.DerivedFromElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if ((current.ExperimentalElement != null) && (current.ExperimentalElement.Value != null))
      {
        writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
      }

      if ((current.SubjectTypeElement != null) && (current.SubjectTypeElement.Count != 0))
      {
        writer.WritePropertyName("subjectType");
        writer.WriteStartArray();
        foreach (Code<Hl7.Fhir.Model.ResourceType> val in current.SubjectTypeElement)
        {
          writer.WriteStringValue(Hl7.Fhir.Utility.EnumUtility.GetLiteral(val.Value));
        }
        writer.WriteEndArray();
      }

      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if ((current.PublisherElement != null) && (current.PublisherElement.Value != null))
      {
        writer.WriteString("publisher",current.PublisherElement.Value);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Purpose != null) && (current.Purpose.Value != null))
      {
        writer.WriteString("purpose",current.Purpose.Value);
      }

      if ((current.Copyright != null) && (current.Copyright.Value != null))
      {
        writer.WriteString("copyright",current.Copyright.Value);
      }

      if ((current.ApprovalDateElement != null) && (current.ApprovalDateElement.Value != null))
      {
        writer.WriteString("approvalDate",current.ApprovalDateElement.Value);
      }

      if ((current.LastReviewDateElement != null) && (current.LastReviewDateElement.Value != null))
      {
        writer.WriteString("lastReviewDate",current.LastReviewDateElement.Value);
      }

      if (current.EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        current.EffectivePeriod.SerializeJson(writer, options);
      }

      if ((current.Code != null) && (current.Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();
        foreach (Coding val in current.Code)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Item != null) && (current.Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();
        foreach (Questionnaire.ItemComponent val in current.Item)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire
    /// </summary>
    public static void DeserializeJson(this Questionnaire current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire
    /// </summary>
    public static void DeserializeJsonProperty(this Questionnaire current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Identifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }

          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());

          break;

        case "derivedFrom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.DerivedFromElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.DerivedFromElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.DerivedFromElement.Count == 0)
          {
            current.DerivedFromElement = null;
          }

          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));

          break;

        case "experimental":
          current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "subjectType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubjectTypeElement = new List<Code<Hl7.Fhir.Model.ResourceType>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SubjectTypeElement.Add(new Code<Hl7.Fhir.Model.ResourceType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ResourceType>(reader.GetString())));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SubjectTypeElement.Count == 0)
          {
            current.SubjectTypeElement = null;
          }

          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());

          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Contact.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }

          break;

        case "description":
          current.Description = new Markdown(reader.GetString());

          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.UseContext.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.UsageContext>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Jurisdiction.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }

          break;

        case "purpose":
          current.Purpose = new Markdown(reader.GetString());

          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());

          break;

        case "approvalDate":
          current.ApprovalDateElement = new Date(reader.GetString());

          break;

        case "lastReviewDate":
          current.LastReviewDateElement = new Date(reader.GetString());

          break;

        case "effectivePeriod":
          current.EffectivePeriod = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);

          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Code = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Code.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Coding>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Code.Count == 0)
          {
            current.Code = null;
          }

          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Item = new List<Questionnaire.ItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Item.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Questionnaire.ItemComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Item.Count == 0)
          {
            current.Item = null;
          }

          break;

        // Complex: Questionnaire, Export: Questionnaire, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Questionnaire#Item into JSON
    /// </summary>
    public static void SerializeJson(this Questionnaire.ItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Questionnaire#Item, Export: ItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("linkId",current.LinkIdElement.Value);

      if ((current.DefinitionElement != null) && (current.DefinitionElement.Value != null))
      {
        writer.WriteString("definition",current.DefinitionElement.Value);
      }

      if ((current.Code != null) && (current.Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();
        foreach (Coding val in current.Code)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.PrefixElement != null) && (current.PrefixElement.Value != null))
      {
        writer.WriteString("prefix",current.PrefixElement.Value);
      }

      if ((current.TextElement != null) && (current.TextElement.Value != null))
      {
        writer.WriteString("text",current.TextElement.Value);
      }

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      if ((current.EnableWhen != null) && (current.EnableWhen.Count != 0))
      {
        writer.WritePropertyName("enableWhen");
        writer.WriteStartArray();
        foreach (Questionnaire.EnableWhenComponent val in current.EnableWhen)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.EnableBehaviorElement != null)
      {
        writer.WriteString("enableBehavior",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.EnableBehaviorElement.Value));
      }

      if ((current.RequiredElement != null) && (current.RequiredElement.Value != null))
      {
        writer.WriteBoolean("required",(bool)current.RequiredElement.Value);
      }

      if ((current.RepeatsElement != null) && (current.RepeatsElement.Value != null))
      {
        writer.WriteBoolean("repeats",(bool)current.RepeatsElement.Value);
      }

      if ((current.ReadOnlyElement != null) && (current.ReadOnlyElement.Value != null))
      {
        writer.WriteBoolean("readOnly",(bool)current.ReadOnlyElement.Value);
      }

      if ((current.MaxLengthElement != null) && (current.MaxLengthElement.Value != null))
      {
        writer.WriteNumber("maxLength",(int)current.MaxLengthElement.Value);
      }

      if ((current.AnswerValueSetElement != null) && (current.AnswerValueSetElement.Value != null))
      {
        writer.WriteString("answerValueSet",current.AnswerValueSetElement.Value);
      }

      if ((current.AnswerOption != null) && (current.AnswerOption.Count != 0))
      {
        writer.WritePropertyName("answerOption");
        writer.WriteStartArray();
        foreach (Questionnaire.AnswerOptionComponent val in current.AnswerOption)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Initial != null) && (current.Initial.Count != 0))
      {
        writer.WritePropertyName("initial");
        writer.WriteStartArray();
        foreach (Questionnaire.InitialComponent val in current.Initial)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Item != null) && (current.Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();
        foreach (Questionnaire.ItemComponent val in current.Item)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#Item
    /// </summary>
    public static void DeserializeJson(this Questionnaire.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#Item
    /// </summary>
    public static void DeserializeJsonProperty(this Questionnaire.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "linkId":
          current.LinkIdElement = new FhirString(reader.GetString());

          break;

        case "definition":
          current.DefinitionElement = new FhirUri(reader.GetString());

          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Code = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Code.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Coding>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Code.Count == 0)
          {
            current.Code = null;
          }

          break;

        case "prefix":
          current.PrefixElement = new FhirString(reader.GetString());

          break;

        case "text":
          current.TextElement = new FhirString(reader.GetString());

          break;

        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemType>(reader.GetString()));

          break;

        case "enableWhen":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.EnableWhen = new List<Questionnaire.EnableWhenComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.EnableWhen.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Questionnaire.EnableWhenComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.EnableWhen.Count == 0)
          {
            current.EnableWhen = null;
          }

          break;

        case "enableBehavior":
          current.EnableBehaviorElement =new Code<Hl7.Fhir.Model.Questionnaire.EnableWhenBehavior>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Questionnaire.EnableWhenBehavior>(reader.GetString()));

          break;

        case "required":
          current.RequiredElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "repeats":
          current.RepeatsElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "readOnly":
          current.ReadOnlyElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "maxLength":
          current.MaxLengthElement = new Integer(reader.GetInt32());

          break;

        case "answerValueSet":
          current.AnswerValueSetElement = new Canonical(reader.GetString());

          break;

        case "answerOption":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.AnswerOption = new List<Questionnaire.AnswerOptionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.AnswerOption.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Questionnaire.AnswerOptionComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.AnswerOption.Count == 0)
          {
            current.AnswerOption = null;
          }

          break;

        case "initial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Initial = new List<Questionnaire.InitialComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Initial.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Questionnaire.InitialComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Initial.Count == 0)
          {
            current.Initial = null;
          }

          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Item = new List<Questionnaire.ItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Item.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Questionnaire.ItemComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Item.Count == 0)
          {
            current.Item = null;
          }

          break;

        // Complex: item, Export: ItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Questionnaire#EnableWhen into JSON
    /// </summary>
    public static void SerializeJson(this Questionnaire.EnableWhenComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Questionnaire#EnableWhen, Export: EnableWhenComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("question",current.QuestionElement.Value);

      writer.WriteString("operator",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.OperatorElement.Value));

      if (current.Answer != null)
      {
        switch (current.Answer)
        {
          case FhirBoolean v_FhirBoolean:
            writer.WriteBoolean("answerBoolean", (bool)v_FhirBoolean.Value);
            break;
          case FhirDecimal v_FhirDecimal:
            writer.WriteNumber("answerDecimal",(decimal)v_FhirDecimal.Value);
            break;
          case Integer v_Integer:
            writer.WriteNumber("answerInteger",(int)v_Integer.Value);
            break;
          case Date v_Date:
            writer.WriteString("answerDate",v_Date.Value);
            break;
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("answerDateTime",v_FhirDateTime.Value);
            break;
          case Time v_Time:
            writer.WritePropertyName("answerTime");
            v_Time.SerializeJson(writer, options);
            break;
          case FhirString v_FhirString:
            writer.WriteString("answerString",v_FhirString.Value);
            break;
          case Coding v_Coding:
            writer.WritePropertyName("answerCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("answerQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("answerReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#EnableWhen
    /// </summary>
    public static void DeserializeJson(this Questionnaire.EnableWhenComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#EnableWhen
    /// </summary>
    public static void DeserializeJsonProperty(this Questionnaire.EnableWhenComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "question":
          current.QuestionElement = new FhirString(reader.GetString());

          break;

        case "operator":
          current.OperatorElement =new Code<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemOperator>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemOperator>(reader.GetString()));

          break;

        case "answerBoolean":
          current.Answer = new FhirBoolean(reader.GetBoolean());
          break;

        case "answerDecimal":
          current.Answer = new FhirDecimal(reader.GetDecimal());
          break;

        case "answerInteger":
          current.Answer = new Integer(reader.GetInt32());
          break;

        case "answerDate":
          current.Answer = new Date(reader.GetString());
          break;

        case "answerDateTime":
          current.Answer = new FhirDateTime(reader.GetString());
          break;

        case "answerTime":
          current.Answer = JsonSerializer.Deserialize<Hl7.Fhir.Model.Time>(ref reader, options);
          break;

        case "answerString":
          current.Answer = new FhirString(reader.GetString());
          break;

        case "answerCoding":
          current.Answer = JsonSerializer.Deserialize<Hl7.Fhir.Model.Coding>(ref reader, options);
          break;

        case "answerQuantity":
          current.Answer = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "answerReference":
          current.Answer = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        // Complex: enableWhen, Export: EnableWhenComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Questionnaire#AnswerOption into JSON
    /// </summary>
    public static void SerializeJson(this Questionnaire.AnswerOptionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Questionnaire#AnswerOption, Export: AnswerOptionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case Integer v_Integer:
            writer.WriteNumber("valueInteger",(int)v_Integer.Value);
            break;
          case Date v_Date:
            writer.WriteString("valueDate",v_Date.Value);
            break;
          case Time v_Time:
            writer.WritePropertyName("valueTime");
            v_Time.SerializeJson(writer, options);
            break;
          case FhirString v_FhirString:
            writer.WriteString("valueString",v_FhirString.Value);
            break;
          case Coding v_Coding:
            writer.WritePropertyName("valueCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("valueReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.InitialSelectedElement != null) && (current.InitialSelectedElement.Value != null))
      {
        writer.WriteBoolean("initialSelected",(bool)current.InitialSelectedElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#AnswerOption
    /// </summary>
    public static void DeserializeJson(this Questionnaire.AnswerOptionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#AnswerOption
    /// </summary>
    public static void DeserializeJsonProperty(this Questionnaire.AnswerOptionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "valueInteger":
          current.Value = new Integer(reader.GetInt32());
          break;

        case "valueDate":
          current.Value = new Date(reader.GetString());
          break;

        case "valueTime":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Time>(ref reader, options);
          break;

        case "valueString":
          current.Value = new FhirString(reader.GetString());
          break;

        case "valueCoding":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Coding>(ref reader, options);
          break;

        case "valueReference":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "initialSelected":
          current.InitialSelectedElement = new FhirBoolean(reader.GetBoolean());

          break;

        // Complex: answerOption, Export: AnswerOptionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Questionnaire#Initial into JSON
    /// </summary>
    public static void SerializeJson(this Questionnaire.InitialComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Questionnaire#Initial, Export: InitialComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case FhirBoolean v_FhirBoolean:
            writer.WriteBoolean("valueBoolean", (bool)v_FhirBoolean.Value);
            break;
          case FhirDecimal v_FhirDecimal:
            writer.WriteNumber("valueDecimal",(decimal)v_FhirDecimal.Value);
            break;
          case Integer v_Integer:
            writer.WriteNumber("valueInteger",(int)v_Integer.Value);
            break;
          case Date v_Date:
            writer.WriteString("valueDate",v_Date.Value);
            break;
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("valueDateTime",v_FhirDateTime.Value);
            break;
          case Time v_Time:
            writer.WritePropertyName("valueTime");
            v_Time.SerializeJson(writer, options);
            break;
          case FhirString v_FhirString:
            writer.WriteString("valueString",v_FhirString.Value);
            break;
          case FhirUri v_FhirUri:
            writer.WriteString("valueUri",v_FhirUri.Value);
            break;
          case Attachment v_Attachment:
            writer.WritePropertyName("valueAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case Coding v_Coding:
            writer.WritePropertyName("valueCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("valueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("valueReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#Initial
    /// </summary>
    public static void DeserializeJson(this Questionnaire.InitialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#Initial
    /// </summary>
    public static void DeserializeJsonProperty(this Questionnaire.InitialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "valueBoolean":
          current.Value = new FhirBoolean(reader.GetBoolean());
          break;

        case "valueDecimal":
          current.Value = new FhirDecimal(reader.GetDecimal());
          break;

        case "valueInteger":
          current.Value = new Integer(reader.GetInt32());
          break;

        case "valueDate":
          current.Value = new Date(reader.GetString());
          break;

        case "valueDateTime":
          current.Value = new FhirDateTime(reader.GetString());
          break;

        case "valueTime":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Time>(ref reader, options);
          break;

        case "valueString":
          current.Value = new FhirString(reader.GetString());
          break;

        case "valueUri":
          current.Value = new FhirUri(reader.GetString());
          break;

        case "valueAttachment":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Attachment>(ref reader, options);
          break;

        case "valueCoding":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Coding>(ref reader, options);
          break;

        case "valueQuantity":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "valueReference":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        // Complex: initial, Export: InitialComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class QuestionnaireJsonConverter : JsonConverter<Questionnaire>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(Questionnaire).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Questionnaire value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Questionnaire Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        Questionnaire target = new Questionnaire();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
