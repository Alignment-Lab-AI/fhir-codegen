// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for ValueSet
  /// </summary>
  public static class ValueSetJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR ValueSet into JSON
    /// </summary>
    public static void SerializeJson(this ValueSet current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ValueSet");
      // Complex: ValueSet, Export: ValueSet, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.TitleElement != null) && (current.TitleElement.Value != null))
      {
        writer.WriteString("title",current.TitleElement.Value);
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if ((current.ExperimentalElement != null) && (current.ExperimentalElement.Value != null))
      {
        writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
      }

      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if ((current.PublisherElement != null) && (current.PublisherElement.Value != null))
      {
        writer.WriteString("publisher",current.PublisherElement.Value);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ImmutableElement != null) && (current.ImmutableElement.Value != null))
      {
        writer.WriteBoolean("immutable",(bool)current.ImmutableElement.Value);
      }

      if ((current.Purpose != null) && (current.Purpose.Value != null))
      {
        writer.WriteString("purpose",current.Purpose.Value);
      }

      if ((current.Copyright != null) && (current.Copyright.Value != null))
      {
        writer.WriteString("copyright",current.Copyright.Value);
      }

      if (current.Compose != null)
      {
        writer.WritePropertyName("compose");
        current.Compose.SerializeJson(writer, options);
      }

      if (current.Expansion != null)
      {
        writer.WritePropertyName("expansion");
        current.Expansion.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet
    /// </summary>
    public static void DeserializeJson(this ValueSet current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet
    /// </summary>
    public static void DeserializeJsonProperty(this ValueSet current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());
          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          break;

        case "experimental":
          current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());
          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          current.Description = new Markdown(reader.GetString());
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "immutable":
          current.ImmutableElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "purpose":
          current.Purpose = new Markdown(reader.GetString());
          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());
          break;

        case "compose":
          current.Compose = new Hl7.Fhir.Model.ValueSet.ComposeComponent();
          current.Compose.DeserializeJson(ref reader, options);
          break;

        case "expansion":
          current.Expansion = new Hl7.Fhir.Model.ValueSet.ExpansionComponent();
          current.Expansion.DeserializeJson(ref reader, options);
          break;

        // Complex: ValueSet, Export: ValueSet, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#Compose into JSON
    /// </summary>
    public static void SerializeJson(this ValueSet.ComposeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#Compose, Export: ComposeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.LockedDateElement != null) && (current.LockedDateElement.Value != null))
      {
        writer.WriteString("lockedDate",current.LockedDateElement.Value);
      }

      if ((current.InactiveElement != null) && (current.InactiveElement.Value != null))
      {
        writer.WriteBoolean("inactive",(bool)current.InactiveElement.Value);
      }

      if ((current.Include != null) && (current.Include.Count != 0))
      {
        writer.WritePropertyName("include");
        writer.WriteStartArray();
        foreach (ValueSet.ConceptSetComponent val in current.Include)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Exclude != null) && (current.Exclude.Count != 0))
      {
        writer.WritePropertyName("exclude");
        writer.WriteStartArray();
        foreach (ValueSet.ConceptSetComponent val in current.Exclude)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Compose
    /// </summary>
    public static void DeserializeJson(this ValueSet.ComposeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Compose
    /// </summary>
    public static void DeserializeJsonProperty(this ValueSet.ComposeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "lockedDate":
          current.LockedDateElement = new Date(reader.GetString());
          break;

        case "_lockedDate":
          ((Hl7.Fhir.Model.Element)current.LockedDateElement).DeserializeJson(ref reader, options);
          break;

        case "inactive":
          current.InactiveElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "include":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Include = new List<ValueSet.ConceptSetComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.ConceptSetComponent v_Include = new Hl7.Fhir.Model.ValueSet.ConceptSetComponent();
            v_Include.DeserializeJson(ref reader, options);
            current.Include.Add(v_Include);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Include.Count == 0)
          {
            current.Include = null;
          }
          break;

        case "exclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Exclude = new List<ValueSet.ConceptSetComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.ConceptSetComponent v_Exclude = new Hl7.Fhir.Model.ValueSet.ConceptSetComponent();
            v_Exclude.DeserializeJson(ref reader, options);
            current.Exclude.Add(v_Exclude);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Exclude.Count == 0)
          {
            current.Exclude = null;
          }
          break;

        // Complex: compose, Export: ComposeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#ConceptSet into JSON
    /// </summary>
    public static void SerializeJson(this ValueSet.ConceptSetComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#ConceptSet, Export: ConceptSetComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.SystemElement != null) && (current.SystemElement.Value != null))
      {
        writer.WriteString("system",current.SystemElement.Value);
      }

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if ((current.Concept != null) && (current.Concept.Count != 0))
      {
        writer.WritePropertyName("concept");
        writer.WriteStartArray();
        foreach (ValueSet.ConceptReferenceComponent val in current.Concept)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Filter != null) && (current.Filter.Count != 0))
      {
        writer.WritePropertyName("filter");
        writer.WriteStartArray();
        foreach (ValueSet.FilterComponent val in current.Filter)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ValueSetElement != null) && (current.ValueSetElement.Count != 0))
      {
        writer.WritePropertyName("valueSet");
        writer.WriteStartArray();
        foreach (Canonical val in current.ValueSetElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#ConceptSet
    /// </summary>
    public static void DeserializeJson(this ValueSet.ConceptSetComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#ConceptSet
    /// </summary>
    public static void DeserializeJsonProperty(this ValueSet.ConceptSetComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "system":
          current.SystemElement = new FhirUri(reader.GetString());
          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());
          break;

        case "concept":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Concept = new List<ValueSet.ConceptReferenceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent v_Concept = new Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent();
            v_Concept.DeserializeJson(ref reader, options);
            current.Concept.Add(v_Concept);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Concept.Count == 0)
          {
            current.Concept = null;
          }
          break;

        case "filter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Filter = new List<ValueSet.FilterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.FilterComponent v_Filter = new Hl7.Fhir.Model.ValueSet.FilterComponent();
            v_Filter.DeserializeJson(ref reader, options);
            current.Filter.Add(v_Filter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Filter.Count == 0)
          {
            current.Filter = null;
          }
          break;

        case "valueSet":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ValueSetElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ValueSetElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ValueSetElement.Count == 0)
          {
            current.ValueSetElement = null;
          }
          break;

        case "_valueSet":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_valueSet = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ((Hl7.Fhir.Model.Element)current.ValueSetElement[i_valueSet++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: include, Export: ConceptSetComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#ConceptReference into JSON
    /// </summary>
    public static void SerializeJson(this ValueSet.ConceptReferenceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#ConceptReference, Export: ConceptReferenceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("code",current.CodeElement.Value);

      if ((current.DisplayElement != null) && (current.DisplayElement.Value != null))
      {
        writer.WriteString("display",current.DisplayElement.Value);
      }

      if ((current.Designation != null) && (current.Designation.Count != 0))
      {
        writer.WritePropertyName("designation");
        writer.WriteStartArray();
        foreach (ValueSet.DesignationComponent val in current.Designation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#ConceptReference
    /// </summary>
    public static void DeserializeJson(this ValueSet.ConceptReferenceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#ConceptReference
    /// </summary>
    public static void DeserializeJsonProperty(this ValueSet.ConceptReferenceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.CodeElement = new Code(reader.GetString());
          break;

        case "_code":
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "display":
          current.DisplayElement = new FhirString(reader.GetString());
          break;

        case "designation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Designation = new List<ValueSet.DesignationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.DesignationComponent v_Designation = new Hl7.Fhir.Model.ValueSet.DesignationComponent();
            v_Designation.DeserializeJson(ref reader, options);
            current.Designation.Add(v_Designation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Designation.Count == 0)
          {
            current.Designation = null;
          }
          break;

        // Complex: concept, Export: ConceptReferenceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#Designation into JSON
    /// </summary>
    public static void SerializeJson(this ValueSet.DesignationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#Designation, Export: DesignationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.LanguageElement != null) && (current.LanguageElement.Value != null))
      {
        writer.WriteString("language",current.LanguageElement.Value);
      }

      if (current.Use != null)
      {
        writer.WritePropertyName("use");
        current.Use.SerializeJson(writer, options);
      }

      writer.WriteString("value",current.ValueElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Designation
    /// </summary>
    public static void DeserializeJson(this ValueSet.DesignationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Designation
    /// </summary>
    public static void DeserializeJsonProperty(this ValueSet.DesignationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "language":
          current.LanguageElement = new Code(reader.GetString());
          break;

        case "_language":
          ((Hl7.Fhir.Model.Element)current.LanguageElement).DeserializeJson(ref reader, options);
          break;

        case "use":
          current.Use = new Hl7.Fhir.Model.Coding();
          current.Use.DeserializeJson(ref reader, options);
          break;

        case "value":
          current.ValueElement = new FhirString(reader.GetString());
          break;

        // Complex: designation, Export: DesignationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#Filter into JSON
    /// </summary>
    public static void SerializeJson(this ValueSet.FilterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#Filter, Export: FilterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("property",current.PropertyElement.Value);

      writer.WriteString("op",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.OpElement.Value));

      writer.WriteString("value",current.ValueElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Filter
    /// </summary>
    public static void DeserializeJson(this ValueSet.FilterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Filter
    /// </summary>
    public static void DeserializeJsonProperty(this ValueSet.FilterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "property":
          current.PropertyElement = new Code(reader.GetString());
          break;

        case "_property":
          ((Hl7.Fhir.Model.Element)current.PropertyElement).DeserializeJson(ref reader, options);
          break;

        case "op":
          current.OpElement =new Code<Hl7.Fhir.Model.FilterOperator>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FilterOperator>(reader.GetString()));
          break;

        case "value":
          current.ValueElement = new FhirString(reader.GetString());
          break;

        // Complex: filter, Export: FilterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#Expansion into JSON
    /// </summary>
    public static void SerializeJson(this ValueSet.ExpansionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#Expansion, Export: ExpansionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.IdentifierElement != null) && (current.IdentifierElement.Value != null))
      {
        writer.WriteString("identifier",current.IdentifierElement.Value);
      }

      writer.WriteString("timestamp",current.TimestampElement.Value);

      if ((current.TotalElement != null) && (current.TotalElement.Value != null))
      {
        writer.WriteNumber("total",(int)current.TotalElement.Value);
      }

      if ((current.OffsetElement != null) && (current.OffsetElement.Value != null))
      {
        writer.WriteNumber("offset",(int)current.OffsetElement.Value);
      }

      if ((current.Parameter != null) && (current.Parameter.Count != 0))
      {
        writer.WritePropertyName("parameter");
        writer.WriteStartArray();
        foreach (ValueSet.ParameterComponent val in current.Parameter)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Contains != null) && (current.Contains.Count != 0))
      {
        writer.WritePropertyName("contains");
        writer.WriteStartArray();
        foreach (ValueSet.ContainsComponent val in current.Contains)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Expansion
    /// </summary>
    public static void DeserializeJson(this ValueSet.ExpansionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Expansion
    /// </summary>
    public static void DeserializeJsonProperty(this ValueSet.ExpansionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          current.IdentifierElement = new FhirUri(reader.GetString());
          break;

        case "timestamp":
          current.TimestampElement = new FhirDateTime(reader.GetString());
          break;

        case "total":
          current.TotalElement = new Integer(reader.GetInt32());
          break;

        case "_total":
          ((Hl7.Fhir.Model.Element)current.TotalElement).DeserializeJson(ref reader, options);
          break;

        case "offset":
          current.OffsetElement = new Integer(reader.GetInt32());
          break;

        case "_offset":
          ((Hl7.Fhir.Model.Element)current.OffsetElement).DeserializeJson(ref reader, options);
          break;

        case "parameter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Parameter = new List<ValueSet.ParameterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.ParameterComponent v_Parameter = new Hl7.Fhir.Model.ValueSet.ParameterComponent();
            v_Parameter.DeserializeJson(ref reader, options);
            current.Parameter.Add(v_Parameter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Parameter.Count == 0)
          {
            current.Parameter = null;
          }
          break;

        case "contains":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contains = new List<ValueSet.ContainsComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.ContainsComponent v_Contains = new Hl7.Fhir.Model.ValueSet.ContainsComponent();
            v_Contains.DeserializeJson(ref reader, options);
            current.Contains.Add(v_Contains);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contains.Count == 0)
          {
            current.Contains = null;
          }
          break;

        // Complex: expansion, Export: ExpansionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#Parameter into JSON
    /// </summary>
    public static void SerializeJson(this ValueSet.ParameterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#Parameter, Export: ParameterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case FhirString v_FhirString:
            writer.WriteString("valueString",v_FhirString.Value);
            break;
          case FhirBoolean v_FhirBoolean:
            writer.WriteBoolean("valueBoolean", (bool)v_FhirBoolean.Value);
            break;
          case Integer v_Integer:
            writer.WriteNumber("valueInteger",(int)v_Integer.Value);
            break;
          case FhirDecimal v_FhirDecimal:
            writer.WriteNumber("valueDecimal",(decimal)v_FhirDecimal.Value);
            break;
          case FhirUri v_FhirUri:
            writer.WriteString("valueUri",v_FhirUri.Value);
            break;
          case Code v_Code:
            writer.WriteString("valueCode",v_Code.Value);
            break;
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("valueDateTime",v_FhirDateTime.Value);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Parameter
    /// </summary>
    public static void DeserializeJson(this ValueSet.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Parameter
    /// </summary>
    public static void DeserializeJsonProperty(this ValueSet.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "valueString":
          current.Value = new FhirString(reader.GetString());
          break;

        case "valueBoolean":
          current.Value = new FhirBoolean(reader.GetBoolean());
          break;

        case "valueInteger":
          current.Value = new Integer(reader.GetInt32());
          break;

        case "valueDecimal":
          current.Value = new FhirDecimal(reader.GetDecimal());
          break;

        case "valueUri":
          current.Value = new FhirUri(reader.GetString());
          break;

        case "valueCode":
          current.Value = new Code(reader.GetString());
          break;

        case "valueDateTime":
          current.Value = new FhirDateTime(reader.GetString());
          break;

        // Complex: parameter, Export: ParameterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#Contains into JSON
    /// </summary>
    public static void SerializeJson(this ValueSet.ContainsComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#Contains, Export: ContainsComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.SystemElement != null) && (current.SystemElement.Value != null))
      {
        writer.WriteString("system",current.SystemElement.Value);
      }

      if ((current.AbstractElement != null) && (current.AbstractElement.Value != null))
      {
        writer.WriteBoolean("abstract",(bool)current.AbstractElement.Value);
      }

      if ((current.InactiveElement != null) && (current.InactiveElement.Value != null))
      {
        writer.WriteBoolean("inactive",(bool)current.InactiveElement.Value);
      }

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if ((current.CodeElement != null) && (current.CodeElement.Value != null))
      {
        writer.WriteString("code",current.CodeElement.Value);
      }

      if ((current.DisplayElement != null) && (current.DisplayElement.Value != null))
      {
        writer.WriteString("display",current.DisplayElement.Value);
      }

      if ((current.Designation != null) && (current.Designation.Count != 0))
      {
        writer.WritePropertyName("designation");
        writer.WriteStartArray();
        foreach (ValueSet.DesignationComponent val in current.Designation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Contains != null) && (current.Contains.Count != 0))
      {
        writer.WritePropertyName("contains");
        writer.WriteStartArray();
        foreach (ValueSet.ContainsComponent val in current.Contains)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Contains
    /// </summary>
    public static void DeserializeJson(this ValueSet.ContainsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Contains
    /// </summary>
    public static void DeserializeJsonProperty(this ValueSet.ContainsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "system":
          current.SystemElement = new FhirUri(reader.GetString());
          break;

        case "abstract":
          current.AbstractElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "inactive":
          current.InactiveElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());
          break;

        case "code":
          current.CodeElement = new Code(reader.GetString());
          break;

        case "_code":
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "display":
          current.DisplayElement = new FhirString(reader.GetString());
          break;

        case "designation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Designation = new List<ValueSet.DesignationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.DesignationComponent v_Designation = new Hl7.Fhir.Model.ValueSet.DesignationComponent();
            v_Designation.DeserializeJson(ref reader, options);
            current.Designation.Add(v_Designation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Designation.Count == 0)
          {
            current.Designation = null;
          }
          break;

        case "contains":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contains = new List<ValueSet.ContainsComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.ContainsComponent v_Contains = new Hl7.Fhir.Model.ValueSet.ContainsComponent();
            v_Contains.DeserializeJson(ref reader, options);
            current.Contains.Add(v_Contains);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contains.Count == 0)
          {
            current.Contains = null;
          }
          break;

        // Complex: contains, Export: ContainsComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ValueSetJsonConverter : JsonConverter<ValueSet>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(ValueSet).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, ValueSet value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override ValueSet Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        ValueSet target = new ValueSet();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
