// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for ExampleScenario
  /// </summary>
  public static class ExampleScenarioJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR ExampleScenario into JSON
    /// </summary>
    public static void SerializeJson(this ExampleScenario current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ExampleScenario");
      // Complex: ExampleScenario, Export: ExampleScenario, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if ((current.ExperimentalElement != null) && (current.ExperimentalElement.Value != null))
      {
        writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
      }

      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if ((current.PublisherElement != null) && (current.PublisherElement.Value != null))
      {
        writer.WriteString("publisher",current.PublisherElement.Value);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Copyright != null) && (current.Copyright.Value != null))
      {
        writer.WriteString("copyright",current.Copyright.Value);
      }

      if ((current.Purpose != null) && (current.Purpose.Value != null))
      {
        writer.WriteString("purpose",current.Purpose.Value);
      }

      if ((current.Actor != null) && (current.Actor.Count != 0))
      {
        writer.WritePropertyName("actor");
        writer.WriteStartArray();
        foreach (ExampleScenario.ActorComponent val in current.Actor)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Instance != null) && (current.Instance.Count != 0))
      {
        writer.WritePropertyName("instance");
        writer.WriteStartArray();
        foreach (ExampleScenario.InstanceComponent val in current.Instance)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Process != null) && (current.Process.Count != 0))
      {
        writer.WritePropertyName("process");
        writer.WriteStartArray();
        foreach (ExampleScenario.ProcessComponent val in current.Process)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.WorkflowElement != null) && (current.WorkflowElement.Count != 0))
      {
        writer.WritePropertyName("workflow");
        writer.WriteStartArray();
        foreach (Canonical val in current.WorkflowElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario
    /// </summary>
    public static void DeserializeJson(this ExampleScenario current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario
    /// </summary>
    public static void DeserializeJsonProperty(this ExampleScenario current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Identifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }

          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));

          break;

        case "experimental":
          current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());

          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Contact.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }

          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.UseContext.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.UsageContext>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Jurisdiction.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }

          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());

          break;

        case "purpose":
          current.Purpose = new Markdown(reader.GetString());

          break;

        case "actor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Actor = new List<ExampleScenario.ActorComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Actor.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExampleScenario.ActorComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Actor.Count == 0)
          {
            current.Actor = null;
          }

          break;

        case "instance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Instance = new List<ExampleScenario.InstanceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Instance.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExampleScenario.InstanceComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Instance.Count == 0)
          {
            current.Instance = null;
          }

          break;

        case "process":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Process = new List<ExampleScenario.ProcessComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Process.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExampleScenario.ProcessComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Process.Count == 0)
          {
            current.Process = null;
          }

          break;

        case "workflow":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.WorkflowElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.WorkflowElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.WorkflowElement.Count == 0)
          {
            current.WorkflowElement = null;
          }

          break;

        // Complex: ExampleScenario, Export: ExampleScenario, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExampleScenario#Actor into JSON
    /// </summary>
    public static void SerializeJson(this ExampleScenario.ActorComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExampleScenario#Actor, Export: ActorComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("actorId",current.ActorIdElement.Value);

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Actor
    /// </summary>
    public static void DeserializeJson(this ExampleScenario.ActorComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Actor
    /// </summary>
    public static void DeserializeJsonProperty(this ExampleScenario.ActorComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actorId":
          current.ActorIdElement = new FhirString(reader.GetString());

          break;

        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.ExampleScenario.ExampleScenarioActorType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ExampleScenario.ExampleScenarioActorType>(reader.GetString()));

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "description":
          current.Description = new Markdown(reader.GetString());

          break;

        // Complex: actor, Export: ActorComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExampleScenario#Instance into JSON
    /// </summary>
    public static void SerializeJson(this ExampleScenario.InstanceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExampleScenario#Instance, Export: InstanceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("resourceId",current.ResourceIdElement.Value);

      writer.WriteString("resourceType",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ResourceTypeElement.Value));

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.Version != null) && (current.Version.Count != 0))
      {
        writer.WritePropertyName("version");
        writer.WriteStartArray();
        foreach (ExampleScenario.VersionComponent val in current.Version)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ContainedInstance != null) && (current.ContainedInstance.Count != 0))
      {
        writer.WritePropertyName("containedInstance");
        writer.WriteStartArray();
        foreach (ExampleScenario.ContainedInstanceComponent val in current.ContainedInstance)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Instance
    /// </summary>
    public static void DeserializeJson(this ExampleScenario.InstanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Instance
    /// </summary>
    public static void DeserializeJsonProperty(this ExampleScenario.InstanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "resourceId":
          current.ResourceIdElement = new FhirString(reader.GetString());

          break;

        case "resourceType":
          current.ResourceTypeElement =new Code<Hl7.Fhir.Model.ResourceType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ResourceType>(reader.GetString()));

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "description":
          current.Description = new Markdown(reader.GetString());

          break;

        case "version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Version = new List<ExampleScenario.VersionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Version.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExampleScenario.VersionComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Version.Count == 0)
          {
            current.Version = null;
          }

          break;

        case "containedInstance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ContainedInstance = new List<ExampleScenario.ContainedInstanceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ContainedInstance.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ContainedInstance.Count == 0)
          {
            current.ContainedInstance = null;
          }

          break;

        // Complex: instance, Export: InstanceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExampleScenario#Version into JSON
    /// </summary>
    public static void SerializeJson(this ExampleScenario.VersionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExampleScenario#Version, Export: VersionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("versionId",current.VersionIdElement.Value);

      writer.WriteString("description",current.Description.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Version
    /// </summary>
    public static void DeserializeJson(this ExampleScenario.VersionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Version
    /// </summary>
    public static void DeserializeJsonProperty(this ExampleScenario.VersionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "versionId":
          current.VersionIdElement = new FhirString(reader.GetString());

          break;

        case "description":
          current.Description = new Markdown(reader.GetString());

          break;

        // Complex: version, Export: VersionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExampleScenario#ContainedInstance into JSON
    /// </summary>
    public static void SerializeJson(this ExampleScenario.ContainedInstanceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExampleScenario#ContainedInstance, Export: ContainedInstanceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("resourceId",current.ResourceIdElement.Value);

      if ((current.VersionIdElement != null) && (current.VersionIdElement.Value != null))
      {
        writer.WriteString("versionId",current.VersionIdElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#ContainedInstance
    /// </summary>
    public static void DeserializeJson(this ExampleScenario.ContainedInstanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#ContainedInstance
    /// </summary>
    public static void DeserializeJsonProperty(this ExampleScenario.ContainedInstanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "resourceId":
          current.ResourceIdElement = new FhirString(reader.GetString());

          break;

        case "versionId":
          current.VersionIdElement = new FhirString(reader.GetString());

          break;

        // Complex: containedInstance, Export: ContainedInstanceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExampleScenario#Process into JSON
    /// </summary>
    public static void SerializeJson(this ExampleScenario.ProcessComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExampleScenario#Process, Export: ProcessComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("title",current.TitleElement.Value);

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.PreConditions != null) && (current.PreConditions.Value != null))
      {
        writer.WriteString("preConditions",current.PreConditions.Value);
      }

      if ((current.PostConditions != null) && (current.PostConditions.Value != null))
      {
        writer.WriteString("postConditions",current.PostConditions.Value);
      }

      if ((current.Step != null) && (current.Step.Count != 0))
      {
        writer.WritePropertyName("step");
        writer.WriteStartArray();
        foreach (ExampleScenario.StepComponent val in current.Step)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Process
    /// </summary>
    public static void DeserializeJson(this ExampleScenario.ProcessComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Process
    /// </summary>
    public static void DeserializeJsonProperty(this ExampleScenario.ProcessComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "title":
          current.TitleElement = new FhirString(reader.GetString());

          break;

        case "description":
          current.Description = new Markdown(reader.GetString());

          break;

        case "preConditions":
          current.PreConditions = new Markdown(reader.GetString());

          break;

        case "postConditions":
          current.PostConditions = new Markdown(reader.GetString());

          break;

        case "step":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Step = new List<ExampleScenario.StepComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Step.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExampleScenario.StepComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Step.Count == 0)
          {
            current.Step = null;
          }

          break;

        // Complex: process, Export: ProcessComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExampleScenario#Step into JSON
    /// </summary>
    public static void SerializeJson(this ExampleScenario.StepComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExampleScenario#Step, Export: StepComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Process != null) && (current.Process.Count != 0))
      {
        writer.WritePropertyName("process");
        writer.WriteStartArray();
        foreach (ExampleScenario.ProcessComponent val in current.Process)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.PauseElement != null) && (current.PauseElement.Value != null))
      {
        writer.WriteBoolean("pause",(bool)current.PauseElement.Value);
      }

      if (current.Operation != null)
      {
        writer.WritePropertyName("operation");
        current.Operation.SerializeJson(writer, options);
      }

      if ((current.Alternative != null) && (current.Alternative.Count != 0))
      {
        writer.WritePropertyName("alternative");
        writer.WriteStartArray();
        foreach (ExampleScenario.AlternativeComponent val in current.Alternative)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Step
    /// </summary>
    public static void DeserializeJson(this ExampleScenario.StepComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Step
    /// </summary>
    public static void DeserializeJsonProperty(this ExampleScenario.StepComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "process":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Process = new List<ExampleScenario.ProcessComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Process.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExampleScenario.ProcessComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Process.Count == 0)
          {
            current.Process = null;
          }

          break;

        case "pause":
          current.PauseElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "operation":
          current.Operation = JsonSerializer.Deserialize<Hl7.Fhir.Model.ExampleScenario.OperationComponent>(ref reader, options);

          break;

        case "alternative":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Alternative = new List<ExampleScenario.AlternativeComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Alternative.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExampleScenario.AlternativeComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Alternative.Count == 0)
          {
            current.Alternative = null;
          }

          break;

        // Complex: step, Export: StepComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExampleScenario#Operation into JSON
    /// </summary>
    public static void SerializeJson(this ExampleScenario.OperationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExampleScenario#Operation, Export: OperationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("number",current.NumberElement.Value);

      if ((current.TypeElement != null) && (current.TypeElement.Value != null))
      {
        writer.WriteString("type",current.TypeElement.Value);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.InitiatorElement != null) && (current.InitiatorElement.Value != null))
      {
        writer.WriteString("initiator",current.InitiatorElement.Value);
      }

      if ((current.ReceiverElement != null) && (current.ReceiverElement.Value != null))
      {
        writer.WriteString("receiver",current.ReceiverElement.Value);
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.InitiatorActiveElement != null) && (current.InitiatorActiveElement.Value != null))
      {
        writer.WriteBoolean("initiatorActive",(bool)current.InitiatorActiveElement.Value);
      }

      if ((current.ReceiverActiveElement != null) && (current.ReceiverActiveElement.Value != null))
      {
        writer.WriteBoolean("receiverActive",(bool)current.ReceiverActiveElement.Value);
      }

      if (current.Request != null)
      {
        writer.WritePropertyName("request");
        current.Request.SerializeJson(writer, options);
      }

      if (current.Response != null)
      {
        writer.WritePropertyName("response");
        current.Response.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Operation
    /// </summary>
    public static void DeserializeJson(this ExampleScenario.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Operation
    /// </summary>
    public static void DeserializeJsonProperty(this ExampleScenario.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "number":
          current.NumberElement = new FhirString(reader.GetString());

          break;

        case "type":
          current.TypeElement = new FhirString(reader.GetString());

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "initiator":
          current.InitiatorElement = new FhirString(reader.GetString());

          break;

        case "receiver":
          current.ReceiverElement = new FhirString(reader.GetString());

          break;

        case "description":
          current.Description = new Markdown(reader.GetString());

          break;

        case "initiatorActive":
          current.InitiatorActiveElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "receiverActive":
          current.ReceiverActiveElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "request":
          current.Request = JsonSerializer.Deserialize<Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent>(ref reader, options);

          break;

        case "response":
          current.Response = JsonSerializer.Deserialize<Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent>(ref reader, options);

          break;

        // Complex: operation, Export: OperationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExampleScenario#Alternative into JSON
    /// </summary>
    public static void SerializeJson(this ExampleScenario.AlternativeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExampleScenario#Alternative, Export: AlternativeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("title",current.TitleElement.Value);

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.Step != null) && (current.Step.Count != 0))
      {
        writer.WritePropertyName("step");
        writer.WriteStartArray();
        foreach (ExampleScenario.StepComponent val in current.Step)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Alternative
    /// </summary>
    public static void DeserializeJson(this ExampleScenario.AlternativeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExampleScenario#Alternative
    /// </summary>
    public static void DeserializeJsonProperty(this ExampleScenario.AlternativeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "title":
          current.TitleElement = new FhirString(reader.GetString());

          break;

        case "description":
          current.Description = new Markdown(reader.GetString());

          break;

        case "step":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Step = new List<ExampleScenario.StepComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Step.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExampleScenario.StepComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Step.Count == 0)
          {
            current.Step = null;
          }

          break;

        // Complex: alternative, Export: AlternativeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ExampleScenarioJsonConverter : JsonConverter<ExampleScenario>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(ExampleScenario).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, ExampleScenario value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override ExampleScenario Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        ExampleScenario target = new ExampleScenario();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
