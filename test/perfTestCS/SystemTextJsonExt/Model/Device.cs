// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for Device
  /// </summary>
  public static class DeviceJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR Device into JSON
    /// </summary>
    public static void SerializeJson(this Device current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","Device");
      // Complex: Device, Export: Device, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Definition != null)
      {
        writer.WritePropertyName("definition");
        current.Definition.SerializeJson(writer, options);
      }

      if ((current.UdiCarrier != null) && (current.UdiCarrier.Count != 0))
      {
        writer.WritePropertyName("udiCarrier");
        writer.WriteStartArray();
        foreach (Device.UdiCarrierComponent val in current.UdiCarrier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.StatusElement != null)
      {
        writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
      }

      if ((current.StatusReason != null) && (current.StatusReason.Count != 0))
      {
        writer.WritePropertyName("statusReason");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.StatusReason)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.DistinctIdentifierElement != null) && (current.DistinctIdentifierElement.Value != null))
      {
        writer.WriteString("distinctIdentifier",current.DistinctIdentifierElement.Value);
      }

      if ((current.ManufacturerElement != null) && (current.ManufacturerElement.Value != null))
      {
        writer.WriteString("manufacturer",current.ManufacturerElement.Value);
      }

      if ((current.ManufactureDateElement != null) && (current.ManufactureDateElement.Value != null))
      {
        writer.WriteString("manufactureDate",current.ManufactureDateElement.Value);
      }

      if ((current.ExpirationDateElement != null) && (current.ExpirationDateElement.Value != null))
      {
        writer.WriteString("expirationDate",current.ExpirationDateElement.Value);
      }

      if ((current.LotNumberElement != null) && (current.LotNumberElement.Value != null))
      {
        writer.WriteString("lotNumber",current.LotNumberElement.Value);
      }

      if ((current.SerialNumberElement != null) && (current.SerialNumberElement.Value != null))
      {
        writer.WriteString("serialNumber",current.SerialNumberElement.Value);
      }

      if ((current.DeviceName != null) && (current.DeviceName.Count != 0))
      {
        writer.WritePropertyName("deviceName");
        writer.WriteStartArray();
        foreach (Device.DeviceNameComponent val in current.DeviceName)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ModelNumberElement != null) && (current.ModelNumberElement.Value != null))
      {
        writer.WriteString("modelNumber",current.ModelNumberElement.Value);
      }

      if ((current.PartNumberElement != null) && (current.PartNumberElement.Value != null))
      {
        writer.WriteString("partNumber",current.PartNumberElement.Value);
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.Specialization != null) && (current.Specialization.Count != 0))
      {
        writer.WritePropertyName("specialization");
        writer.WriteStartArray();
        foreach (Device.SpecializationComponent val in current.Specialization)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Version != null) && (current.Version.Count != 0))
      {
        writer.WritePropertyName("version");
        writer.WriteStartArray();
        foreach (Device.VersionComponent val in current.Version)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Property != null) && (current.Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();
        foreach (Device.PropertyComponent val in current.Property)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Patient != null)
      {
        writer.WritePropertyName("patient");
        current.Patient.SerializeJson(writer, options);
      }

      if (current.Owner != null)
      {
        writer.WritePropertyName("owner");
        current.Owner.SerializeJson(writer, options);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactPoint val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Location != null)
      {
        writer.WritePropertyName("location");
        current.Location.SerializeJson(writer, options);
      }

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if ((current.Note != null) && (current.Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();
        foreach (Annotation val in current.Note)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Safety != null) && (current.Safety.Count != 0))
      {
        writer.WritePropertyName("safety");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Safety)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Parent != null)
      {
        writer.WritePropertyName("parent");
        current.Parent.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Device
    /// </summary>
    public static void DeserializeJson(this Device current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Device
    /// </summary>
    public static void DeserializeJsonProperty(this Device current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "definition":
          current.Definition = new Hl7.Fhir.Model.ResourceReference();
          current.Definition.DeserializeJson(ref reader, options);
          break;

        case "udiCarrier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UdiCarrier = new List<Device.UdiCarrierComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Device.UdiCarrierComponent v_UdiCarrier = new Hl7.Fhir.Model.Device.UdiCarrierComponent();
            v_UdiCarrier.DeserializeJson(ref reader, options);
            current.UdiCarrier.Add(v_UdiCarrier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UdiCarrier.Count == 0)
          {
            current.UdiCarrier = null;
          }
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.Device.FHIRDeviceStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Device.FHIRDeviceStatus>(reader.GetString()));
          break;

        case "statusReason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.StatusReason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_StatusReason = new Hl7.Fhir.Model.CodeableConcept();
            v_StatusReason.DeserializeJson(ref reader, options);
            current.StatusReason.Add(v_StatusReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.StatusReason.Count == 0)
          {
            current.StatusReason = null;
          }
          break;

        case "distinctIdentifier":
          current.DistinctIdentifierElement = new FhirString(reader.GetString());
          break;

        case "manufacturer":
          current.ManufacturerElement = new FhirString(reader.GetString());
          break;

        case "manufactureDate":
          current.ManufactureDateElement = new FhirDateTime(reader.GetString());
          break;

        case "expirationDate":
          current.ExpirationDateElement = new FhirDateTime(reader.GetString());
          break;

        case "lotNumber":
          current.LotNumberElement = new FhirString(reader.GetString());
          break;

        case "serialNumber":
          current.SerialNumberElement = new FhirString(reader.GetString());
          break;

        case "deviceName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.DeviceName = new List<Device.DeviceNameComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Device.DeviceNameComponent v_DeviceName = new Hl7.Fhir.Model.Device.DeviceNameComponent();
            v_DeviceName.DeserializeJson(ref reader, options);
            current.DeviceName.Add(v_DeviceName);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DeviceName.Count == 0)
          {
            current.DeviceName = null;
          }
          break;

        case "modelNumber":
          current.ModelNumberElement = new FhirString(reader.GetString());
          break;

        case "partNumber":
          current.PartNumberElement = new FhirString(reader.GetString());
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          current.Type.DeserializeJson(ref reader, options);
          break;

        case "specialization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Specialization = new List<Device.SpecializationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Device.SpecializationComponent v_Specialization = new Hl7.Fhir.Model.Device.SpecializationComponent();
            v_Specialization.DeserializeJson(ref reader, options);
            current.Specialization.Add(v_Specialization);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Specialization.Count == 0)
          {
            current.Specialization = null;
          }
          break;

        case "version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Version = new List<Device.VersionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Device.VersionComponent v_Version = new Hl7.Fhir.Model.Device.VersionComponent();
            v_Version.DeserializeJson(ref reader, options);
            current.Version.Add(v_Version);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Version.Count == 0)
          {
            current.Version = null;
          }
          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Property = new List<Device.PropertyComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Device.PropertyComponent v_Property = new Hl7.Fhir.Model.Device.PropertyComponent();
            v_Property.DeserializeJson(ref reader, options);
            current.Property.Add(v_Property);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Property.Count == 0)
          {
            current.Property = null;
          }
          break;

        case "patient":
          current.Patient = new Hl7.Fhir.Model.ResourceReference();
          current.Patient.DeserializeJson(ref reader, options);
          break;

        case "owner":
          current.Owner = new Hl7.Fhir.Model.ResourceReference();
          current.Owner.DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactPoint v_Contact = new Hl7.Fhir.Model.ContactPoint();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "location":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          current.Location.DeserializeJson(ref reader, options);
          break;

        case "url":
          current.UrlElement = new FhirUri(reader.GetString());
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Annotation v_Note = new Hl7.Fhir.Model.Annotation();
            v_Note.DeserializeJson(ref reader, options);
            current.Note.Add(v_Note);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }
          break;

        case "safety":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Safety = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Safety = new Hl7.Fhir.Model.CodeableConcept();
            v_Safety.DeserializeJson(ref reader, options);
            current.Safety.Add(v_Safety);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Safety.Count == 0)
          {
            current.Safety = null;
          }
          break;

        case "parent":
          current.Parent = new Hl7.Fhir.Model.ResourceReference();
          current.Parent.DeserializeJson(ref reader, options);
          break;

        // Complex: Device, Export: Device, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Device#UdiCarrier into JSON
    /// </summary>
    public static void SerializeJson(this Device.UdiCarrierComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Device#UdiCarrier, Export: UdiCarrierComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.DeviceIdentifierElement != null) && (current.DeviceIdentifierElement.Value != null))
      {
        writer.WriteString("deviceIdentifier",current.DeviceIdentifierElement.Value);
      }

      if ((current.IssuerElement != null) && (current.IssuerElement.Value != null))
      {
        writer.WriteString("issuer",current.IssuerElement.Value);
      }

      if ((current.JurisdictionElement != null) && (current.JurisdictionElement.Value != null))
      {
        writer.WriteString("jurisdiction",current.JurisdictionElement.Value);
      }

      if ((current.CarrierAIDCElement != null) && (current.CarrierAIDCElement.Value != null))
      {
        writer.WriteBase64String("carrierAIDC",current.CarrierAIDCElement.Value);
      }

      if ((current.CarrierHRFElement != null) && (current.CarrierHRFElement.Value != null))
      {
        writer.WriteString("carrierHRF",current.CarrierHRFElement.Value);
      }

      if (current.EntryTypeElement != null)
      {
        writer.WriteString("entryType",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.EntryTypeElement.Value));
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Device#UdiCarrier
    /// </summary>
    public static void DeserializeJson(this Device.UdiCarrierComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Device#UdiCarrier
    /// </summary>
    public static void DeserializeJsonProperty(this Device.UdiCarrierComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "deviceIdentifier":
          current.DeviceIdentifierElement = new FhirString(reader.GetString());
          break;

        case "issuer":
          current.IssuerElement = new FhirUri(reader.GetString());
          break;

        case "jurisdiction":
          current.JurisdictionElement = new FhirUri(reader.GetString());
          break;

        case "carrierAIDC":
          current.CarrierAIDCElement = new Base64Binary(reader.GetBytesFromBase64());
          break;

        case "carrierHRF":
          current.CarrierHRFElement = new FhirString(reader.GetString());
          break;

        case "entryType":
          current.EntryTypeElement =new Code<Hl7.Fhir.Model.Device.UDIEntryType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Device.UDIEntryType>(reader.GetString()));
          break;

        // Complex: udiCarrier, Export: UdiCarrierComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Device#DeviceName into JSON
    /// </summary>
    public static void SerializeJson(this Device.DeviceNameComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Device#DeviceName, Export: DeviceNameComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Device#DeviceName
    /// </summary>
    public static void DeserializeJson(this Device.DeviceNameComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Device#DeviceName
    /// </summary>
    public static void DeserializeJsonProperty(this Device.DeviceNameComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.DeviceNameType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.DeviceNameType>(reader.GetString()));
          break;

        // Complex: deviceName, Export: DeviceNameComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Device#Specialization into JSON
    /// </summary>
    public static void SerializeJson(this Device.SpecializationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Device#Specialization, Export: SpecializationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("systemType");
      current.SystemType.SerializeJson(writer, options);

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Device#Specialization
    /// </summary>
    public static void DeserializeJson(this Device.SpecializationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Device#Specialization
    /// </summary>
    public static void DeserializeJsonProperty(this Device.SpecializationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "systemType":
          current.SystemType = new Hl7.Fhir.Model.CodeableConcept();
          current.SystemType.DeserializeJson(ref reader, options);
          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());
          break;

        // Complex: specialization, Export: SpecializationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Device#Version into JSON
    /// </summary>
    public static void SerializeJson(this Device.VersionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Device#Version, Export: VersionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Component != null)
      {
        writer.WritePropertyName("component");
        current.Component.SerializeJson(writer, options);
      }

      writer.WriteString("value",current.ValueElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Device#Version
    /// </summary>
    public static void DeserializeJson(this Device.VersionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Device#Version
    /// </summary>
    public static void DeserializeJsonProperty(this Device.VersionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          current.Type.DeserializeJson(ref reader, options);
          break;

        case "component":
          current.Component = new Hl7.Fhir.Model.Identifier();
          current.Component.DeserializeJson(ref reader, options);
          break;

        case "value":
          current.ValueElement = new FhirString(reader.GetString());
          break;

        // Complex: version, Export: VersionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Device#Property into JSON
    /// </summary>
    public static void SerializeJson(this Device.PropertyComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Device#Property, Export: PropertyComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if ((current.ValueQuantity != null) && (current.ValueQuantity.Count != 0))
      {
        writer.WritePropertyName("valueQuantity");
        writer.WriteStartArray();
        foreach (Quantity val in current.ValueQuantity)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ValueCode != null) && (current.ValueCode.Count != 0))
      {
        writer.WritePropertyName("valueCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ValueCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Device#Property
    /// </summary>
    public static void DeserializeJson(this Device.PropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Device#Property
    /// </summary>
    public static void DeserializeJsonProperty(this Device.PropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          current.Type.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ValueQuantity = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Quantity v_ValueQuantity = new Hl7.Fhir.Model.Quantity();
            v_ValueQuantity.DeserializeJson(ref reader, options);
            current.ValueQuantity.Add(v_ValueQuantity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ValueQuantity.Count == 0)
          {
            current.ValueQuantity = null;
          }
          break;

        case "valueCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ValueCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ValueCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ValueCode.DeserializeJson(ref reader, options);
            current.ValueCode.Add(v_ValueCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ValueCode.Count == 0)
          {
            current.ValueCode = null;
          }
          break;

        // Complex: property, Export: PropertyComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class DeviceJsonConverter : JsonConverter<Device>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(Device).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Device value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Device Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        Device target = new Device();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
