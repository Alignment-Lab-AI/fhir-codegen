// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for Contract
  /// </summary>
  public static class ContractJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR Contract into JSON
    /// </summary>
    public static void SerializeJson(this Contract current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","Contract");
      // Complex: Contract, Export: Contract, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if (current.StatusElement != null)
      {
        writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
      }

      if (current.LegalState != null)
      {
        writer.WritePropertyName("legalState");
        current.LegalState.SerializeJson(writer, options);
      }

      if (current.InstantiatesCanonical != null)
      {
        writer.WritePropertyName("instantiatesCanonical");
        current.InstantiatesCanonical.SerializeJson(writer, options);
      }

      if (current.InstantiatesUriElement != null)
      {
        if (!string.IsNullOrEmpty(current.InstantiatesUriElement.Value))
        {
          writer.WriteString("instantiatesUri",current.InstantiatesUriElement.Value);
        }
        if (current.InstantiatesUriElement.HasExtensions() || (!string.IsNullOrEmpty(current.InstantiatesUriElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_instantiatesUri",false,current.InstantiatesUriElement.Extension,current.InstantiatesUriElement.ElementId);
        }
      }

      if (current.ContentDerivative != null)
      {
        writer.WritePropertyName("contentDerivative");
        current.ContentDerivative.SerializeJson(writer, options);
      }

      if (current.IssuedElement != null)
      {
        if (!string.IsNullOrEmpty(current.IssuedElement.Value))
        {
          writer.WriteString("issued",current.IssuedElement.Value);
        }
        if (current.IssuedElement.HasExtensions() || (!string.IsNullOrEmpty(current.IssuedElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_issued",false,current.IssuedElement.Extension,current.IssuedElement.ElementId);
        }
      }

      if (current.Applies != null)
      {
        writer.WritePropertyName("applies");
        current.Applies.SerializeJson(writer, options);
      }

      if (current.ExpirationType != null)
      {
        writer.WritePropertyName("expirationType");
        current.ExpirationType.SerializeJson(writer, options);
      }

      if ((current.Subject != null) && (current.Subject.Count != 0))
      {
        writer.WritePropertyName("subject");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Subject)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Authority != null) && (current.Authority.Count != 0))
      {
        writer.WritePropertyName("authority");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Authority)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Domain != null) && (current.Domain.Count != 0))
      {
        writer.WritePropertyName("domain");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Domain)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Site != null) && (current.Site.Count != 0))
      {
        writer.WritePropertyName("site");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Site)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.TitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.TitleElement.Value))
        {
          writer.WriteString("title",current.TitleElement.Value);
        }
        if (current.TitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.TitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_title",false,current.TitleElement.Extension,current.TitleElement.ElementId);
        }
      }

      if (current.SubtitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.SubtitleElement.Value))
        {
          writer.WriteString("subtitle",current.SubtitleElement.Value);
        }
        if (current.SubtitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.SubtitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_subtitle",false,current.SubtitleElement.Extension,current.SubtitleElement.ElementId);
        }
      }

      if ((current.AliasElement != null) && (current.AliasElement.Count != 0))
      {
        writer.WritePropertyName("alias");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirString val in current.AliasElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirString val in current.AliasElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_alias");
          writer.WriteStartArray();
          foreach (FhirString val in current.AliasElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if (current.Author != null)
      {
        writer.WritePropertyName("author");
        current.Author.SerializeJson(writer, options);
      }

      if (current.Scope != null)
      {
        writer.WritePropertyName("scope");
        current.Scope.SerializeJson(writer, options);
      }

      if (current.Topic != null)
      {
        switch (current.Topic)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("topicCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("topicReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.SubType != null) && (current.SubType.Count != 0))
      {
        writer.WritePropertyName("subType");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.SubType)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.ContentDefinition != null)
      {
        writer.WritePropertyName("contentDefinition");
        current.ContentDefinition.SerializeJson(writer, options);
      }

      if ((current.Term != null) && (current.Term.Count != 0))
      {
        writer.WritePropertyName("term");
        writer.WriteStartArray();
        foreach (Contract.TermComponent val in current.Term)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SupportingInfo != null) && (current.SupportingInfo.Count != 0))
      {
        writer.WritePropertyName("supportingInfo");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.SupportingInfo)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.RelevantHistory != null) && (current.RelevantHistory.Count != 0))
      {
        writer.WritePropertyName("relevantHistory");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.RelevantHistory)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Signer != null) && (current.Signer.Count != 0))
      {
        writer.WritePropertyName("signer");
        writer.WriteStartArray();
        foreach (Contract.SignatoryComponent val in current.Signer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Friendly != null) && (current.Friendly.Count != 0))
      {
        writer.WritePropertyName("friendly");
        writer.WriteStartArray();
        foreach (Contract.FriendlyLanguageComponent val in current.Friendly)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Legal != null) && (current.Legal.Count != 0))
      {
        writer.WritePropertyName("legal");
        writer.WriteStartArray();
        foreach (Contract.LegalLanguageComponent val in current.Legal)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Rule != null) && (current.Rule.Count != 0))
      {
        writer.WritePropertyName("rule");
        writer.WriteStartArray();
        foreach (Contract.ComputableLanguageComponent val in current.Rule)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.LegallyBinding != null)
      {
        switch (current.LegallyBinding)
        {
          case Attachment v_Attachment:
            writer.WritePropertyName("legallyBindingAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("legallyBindingReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract
    /// </summary>
    public static void DeserializeJson(this Contract current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract
    /// </summary>
    public static void DeserializeJsonProperty(this Contract current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "url":
          current.UrlElement = new FhirUri(reader.GetString());
          break;

        case "_url":
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());
          break;

        case "_version":
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.Contract.ContractResourceStatusCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Contract.ContractResourceStatusCodes>(reader.GetString()));
          break;

        case "_status":
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "legalState":
          current.LegalState = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.LegalState).DeserializeJson(ref reader, options);
          break;

        case "instantiatesCanonical":
          current.InstantiatesCanonical = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.InstantiatesCanonical).DeserializeJson(ref reader, options);
          break;

        case "instantiatesUri":
          current.InstantiatesUriElement = new FhirUri(reader.GetString());
          break;

        case "_instantiatesUri":
          ((Hl7.Fhir.Model.Element)current.InstantiatesUriElement).DeserializeJson(ref reader, options);
          break;

        case "contentDerivative":
          current.ContentDerivative = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ContentDerivative).DeserializeJson(ref reader, options);
          break;

        case "issued":
          current.IssuedElement = new FhirDateTime(reader.GetString());
          break;

        case "_issued":
          ((Hl7.Fhir.Model.Element)current.IssuedElement).DeserializeJson(ref reader, options);
          break;

        case "applies":
          current.Applies = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Applies).DeserializeJson(ref reader, options);
          break;

        case "expirationType":
          current.ExpirationType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ExpirationType).DeserializeJson(ref reader, options);
          break;

        case "subject":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Subject = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Subject = new Hl7.Fhir.Model.ResourceReference();
            v_Subject.DeserializeJson(ref reader, options);
            current.Subject.Add(v_Subject);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Subject.Count == 0)
          {
            current.Subject = null;
          }
          break;

        case "authority":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Authority = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Authority = new Hl7.Fhir.Model.ResourceReference();
            v_Authority.DeserializeJson(ref reader, options);
            current.Authority.Add(v_Authority);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Authority.Count == 0)
          {
            current.Authority = null;
          }
          break;

        case "domain":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Domain = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Domain = new Hl7.Fhir.Model.ResourceReference();
            v_Domain.DeserializeJson(ref reader, options);
            current.Domain.Add(v_Domain);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Domain.Count == 0)
          {
            current.Domain = null;
          }
          break;

        case "site":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Site = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Site = new Hl7.Fhir.Model.ResourceReference();
            v_Site.DeserializeJson(ref reader, options);
            current.Site.Add(v_Site);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Site.Count == 0)
          {
            current.Site = null;
          }
          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "_name":
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());
          break;

        case "_title":
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "subtitle":
          current.SubtitleElement = new FhirString(reader.GetString());
          break;

        case "_subtitle":
          ((Hl7.Fhir.Model.Element)current.SubtitleElement).DeserializeJson(ref reader, options);
          break;

        case "alias":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.AliasElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.AliasElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AliasElement.Count == 0)
          {
            current.AliasElement = null;
          }
          break;

        case "_alias":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_alias = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_alias >= current.AliasElement.Count)
            {
              current.AliasElement.Add(new FhirString());
            }
            ((Hl7.Fhir.Model.Element)current.AliasElement[i_alias++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "author":
          current.Author = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Author).DeserializeJson(ref reader, options);
          break;

        case "scope":
          current.Scope = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Scope).DeserializeJson(ref reader, options);
          break;

        case "topicCodeableConcept":
          current.Topic = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Topic).DeserializeJson(ref reader, options);
          break;

        case "topicReference":
          current.Topic = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Topic).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "subType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_SubType = new Hl7.Fhir.Model.CodeableConcept();
            v_SubType.DeserializeJson(ref reader, options);
            current.SubType.Add(v_SubType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubType.Count == 0)
          {
            current.SubType = null;
          }
          break;

        case "contentDefinition":
          current.ContentDefinition = new Hl7.Fhir.Model.Contract.ContentDefinitionComponent();
          ((Hl7.Fhir.Model.Contract.ContentDefinitionComponent)current.ContentDefinition).DeserializeJson(ref reader, options);
          break;

        case "term":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Term = new List<Contract.TermComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.TermComponent v_Term = new Hl7.Fhir.Model.Contract.TermComponent();
            v_Term.DeserializeJson(ref reader, options);
            current.Term.Add(v_Term);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Term.Count == 0)
          {
            current.Term = null;
          }
          break;

        case "supportingInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SupportingInfo = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_SupportingInfo = new Hl7.Fhir.Model.ResourceReference();
            v_SupportingInfo.DeserializeJson(ref reader, options);
            current.SupportingInfo.Add(v_SupportingInfo);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SupportingInfo.Count == 0)
          {
            current.SupportingInfo = null;
          }
          break;

        case "relevantHistory":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.RelevantHistory = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_RelevantHistory = new Hl7.Fhir.Model.ResourceReference();
            v_RelevantHistory.DeserializeJson(ref reader, options);
            current.RelevantHistory.Add(v_RelevantHistory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.RelevantHistory.Count == 0)
          {
            current.RelevantHistory = null;
          }
          break;

        case "signer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Signer = new List<Contract.SignatoryComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.SignatoryComponent v_Signer = new Hl7.Fhir.Model.Contract.SignatoryComponent();
            v_Signer.DeserializeJson(ref reader, options);
            current.Signer.Add(v_Signer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Signer.Count == 0)
          {
            current.Signer = null;
          }
          break;

        case "friendly":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Friendly = new List<Contract.FriendlyLanguageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.FriendlyLanguageComponent v_Friendly = new Hl7.Fhir.Model.Contract.FriendlyLanguageComponent();
            v_Friendly.DeserializeJson(ref reader, options);
            current.Friendly.Add(v_Friendly);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Friendly.Count == 0)
          {
            current.Friendly = null;
          }
          break;

        case "legal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Legal = new List<Contract.LegalLanguageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.LegalLanguageComponent v_Legal = new Hl7.Fhir.Model.Contract.LegalLanguageComponent();
            v_Legal.DeserializeJson(ref reader, options);
            current.Legal.Add(v_Legal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Legal.Count == 0)
          {
            current.Legal = null;
          }
          break;

        case "rule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Rule = new List<Contract.ComputableLanguageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.ComputableLanguageComponent v_Rule = new Hl7.Fhir.Model.Contract.ComputableLanguageComponent();
            v_Rule.DeserializeJson(ref reader, options);
            current.Rule.Add(v_Rule);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Rule.Count == 0)
          {
            current.Rule = null;
          }
          break;

        case "legallyBindingAttachment":
          current.LegallyBinding = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.LegallyBinding).DeserializeJson(ref reader, options);
          break;

        case "legallyBindingReference":
          current.LegallyBinding = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.LegallyBinding).DeserializeJson(ref reader, options);
          break;

        // Complex: Contract, Export: Contract, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ContentDefinition into JSON
    /// </summary>
    public static void SerializeJson(this Contract.ContentDefinitionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ContentDefinition, Export: ContentDefinitionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if (current.SubType != null)
      {
        writer.WritePropertyName("subType");
        current.SubType.SerializeJson(writer, options);
      }

      if (current.Publisher != null)
      {
        writer.WritePropertyName("publisher");
        current.Publisher.SerializeJson(writer, options);
      }

      if (current.PublicationDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.PublicationDateElement.Value))
        {
          writer.WriteString("publicationDate",current.PublicationDateElement.Value);
        }
        if (current.PublicationDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.PublicationDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_publicationDate",false,current.PublicationDateElement.Extension,current.PublicationDateElement.ElementId);
        }
      }

      writer.WriteString("publicationStatus",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.PublicationStatusElement.Value));

      if (current.Copyright != null)
      {
        if (!string.IsNullOrEmpty(current.Copyright.Value))
        {
          writer.WriteString("copyright",current.Copyright.Value);
        }
        if (current.Copyright.HasExtensions() || (!string.IsNullOrEmpty(current.Copyright.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_copyright",false,current.Copyright.Extension,current.Copyright.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContentDefinition
    /// </summary>
    public static void DeserializeJson(this Contract.ContentDefinitionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContentDefinition
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.ContentDefinitionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "subType":
          current.SubType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.SubType).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          current.Publisher = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Publisher).DeserializeJson(ref reader, options);
          break;

        case "publicationDate":
          current.PublicationDateElement = new FhirDateTime(reader.GetString());
          break;

        case "_publicationDate":
          ((Hl7.Fhir.Model.Element)current.PublicationDateElement).DeserializeJson(ref reader, options);
          break;

        case "publicationStatus":
          current.PublicationStatusElement =new Code<Hl7.Fhir.Model.Contract.ContractResourcePublicationStatusCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Contract.ContractResourcePublicationStatusCodes>(reader.GetString()));
          break;

        case "_publicationStatus":
          ((Hl7.Fhir.Model.Element)current.PublicationStatusElement).DeserializeJson(ref reader, options);
          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());
          break;

        // Complex: contentDefinition, Export: ContentDefinitionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#Term into JSON
    /// </summary>
    public static void SerializeJson(this Contract.TermComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#Term, Export: TermComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (current.IssuedElement != null)
      {
        if (!string.IsNullOrEmpty(current.IssuedElement.Value))
        {
          writer.WriteString("issued",current.IssuedElement.Value);
        }
        if (current.IssuedElement.HasExtensions() || (!string.IsNullOrEmpty(current.IssuedElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_issued",false,current.IssuedElement.Extension,current.IssuedElement.ElementId);
        }
      }

      if (current.Applies != null)
      {
        writer.WritePropertyName("applies");
        current.Applies.SerializeJson(writer, options);
      }

      if (current.Topic != null)
      {
        switch (current.Topic)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("topicCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("topicReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.SubType != null)
      {
        writer.WritePropertyName("subType");
        current.SubType.SerializeJson(writer, options);
      }

      if (current.TextElement != null)
      {
        if (!string.IsNullOrEmpty(current.TextElement.Value))
        {
          writer.WriteString("text",current.TextElement.Value);
        }
        if (current.TextElement.HasExtensions() || (!string.IsNullOrEmpty(current.TextElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_text",false,current.TextElement.Extension,current.TextElement.ElementId);
        }
      }

      if ((current.SecurityLabel != null) && (current.SecurityLabel.Count != 0))
      {
        writer.WritePropertyName("securityLabel");
        writer.WriteStartArray();
        foreach (Contract.SecurityLabelComponent val in current.SecurityLabel)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      writer.WritePropertyName("offer");
      current.Offer.SerializeJson(writer, options);

      if ((current.Asset != null) && (current.Asset.Count != 0))
      {
        writer.WritePropertyName("asset");
        writer.WriteStartArray();
        foreach (Contract.ContractAssetComponent val in current.Asset)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Action != null) && (current.Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();
        foreach (Contract.ActionComponent val in current.Action)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Group != null) && (current.Group.Count != 0))
      {
        writer.WritePropertyName("group");
        writer.WriteStartArray();
        foreach (Contract.TermComponent val in current.Group)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Term
    /// </summary>
    public static void DeserializeJson(this Contract.TermComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Term
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.TermComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "issued":
          current.IssuedElement = new FhirDateTime(reader.GetString());
          break;

        case "_issued":
          ((Hl7.Fhir.Model.Element)current.IssuedElement).DeserializeJson(ref reader, options);
          break;

        case "applies":
          current.Applies = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Applies).DeserializeJson(ref reader, options);
          break;

        case "topicCodeableConcept":
          current.Topic = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Topic).DeserializeJson(ref reader, options);
          break;

        case "topicReference":
          current.Topic = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Topic).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "subType":
          current.SubType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.SubType).DeserializeJson(ref reader, options);
          break;

        case "text":
          current.TextElement = new FhirString(reader.GetString());
          break;

        case "_text":
          ((Hl7.Fhir.Model.Element)current.TextElement).DeserializeJson(ref reader, options);
          break;

        case "securityLabel":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SecurityLabel = new List<Contract.SecurityLabelComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.SecurityLabelComponent v_SecurityLabel = new Hl7.Fhir.Model.Contract.SecurityLabelComponent();
            v_SecurityLabel.DeserializeJson(ref reader, options);
            current.SecurityLabel.Add(v_SecurityLabel);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SecurityLabel.Count == 0)
          {
            current.SecurityLabel = null;
          }
          break;

        case "offer":
          current.Offer = new Hl7.Fhir.Model.Contract.ContractOfferComponent();
          ((Hl7.Fhir.Model.Contract.ContractOfferComponent)current.Offer).DeserializeJson(ref reader, options);
          break;

        case "asset":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Asset = new List<Contract.ContractAssetComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.ContractAssetComponent v_Asset = new Hl7.Fhir.Model.Contract.ContractAssetComponent();
            v_Asset.DeserializeJson(ref reader, options);
            current.Asset.Add(v_Asset);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Asset.Count == 0)
          {
            current.Asset = null;
          }
          break;

        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Action = new List<Contract.ActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.ActionComponent v_Action = new Hl7.Fhir.Model.Contract.ActionComponent();
            v_Action.DeserializeJson(ref reader, options);
            current.Action.Add(v_Action);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Action.Count == 0)
          {
            current.Action = null;
          }
          break;

        case "group":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Group = new List<Contract.TermComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.TermComponent v_Group = new Hl7.Fhir.Model.Contract.TermComponent();
            v_Group.DeserializeJson(ref reader, options);
            current.Group.Add(v_Group);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Group.Count == 0)
          {
            current.Group = null;
          }
          break;

        // Complex: term, Export: TermComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#SecurityLabel into JSON
    /// </summary>
    public static void SerializeJson(this Contract.SecurityLabelComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#SecurityLabel, Export: SecurityLabelComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.NumberElement != null) && (current.NumberElement.Count != 0))
      {
        writer.WritePropertyName("number");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (UnsignedInt val in current.NumberElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (UnsignedInt val in current.NumberElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_number");
          writer.WriteStartArray();
          foreach (UnsignedInt val in current.NumberElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      writer.WritePropertyName("classification");
      current.Classification.SerializeJson(writer, options);

      if ((current.Category != null) && (current.Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();
        foreach (Coding val in current.Category)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Control != null) && (current.Control.Count != 0))
      {
        writer.WritePropertyName("control");
        writer.WriteStartArray();
        foreach (Coding val in current.Control)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#SecurityLabel
    /// </summary>
    public static void DeserializeJson(this Contract.SecurityLabelComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#SecurityLabel
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.SecurityLabelComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "number":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NumberElement = new List<UnsignedInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NumberElement.Add(new UnsignedInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NumberElement.Count == 0)
          {
            current.NumberElement = null;
          }
          break;

        case "_number":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_number = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_number >= current.NumberElement.Count)
            {
              current.NumberElement.Add(new UnsignedInt());
            }
            ((Hl7.Fhir.Model.Element)current.NumberElement[i_number++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "classification":
          current.Classification = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Classification).DeserializeJson(ref reader, options);
          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Category = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Coding v_Category = new Hl7.Fhir.Model.Coding();
            v_Category.DeserializeJson(ref reader, options);
            current.Category.Add(v_Category);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Category.Count == 0)
          {
            current.Category = null;
          }
          break;

        case "control":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Control = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Coding v_Control = new Hl7.Fhir.Model.Coding();
            v_Control.DeserializeJson(ref reader, options);
            current.Control.Add(v_Control);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Control.Count == 0)
          {
            current.Control = null;
          }
          break;

        // Complex: securityLabel, Export: SecurityLabelComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ContractOffer into JSON
    /// </summary>
    public static void SerializeJson(this Contract.ContractOfferComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ContractOffer, Export: ContractOfferComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Party != null) && (current.Party.Count != 0))
      {
        writer.WritePropertyName("party");
        writer.WriteStartArray();
        foreach (Contract.ContractPartyComponent val in current.Party)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Topic != null)
      {
        writer.WritePropertyName("topic");
        current.Topic.SerializeJson(writer, options);
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Decision != null)
      {
        writer.WritePropertyName("decision");
        current.Decision.SerializeJson(writer, options);
      }

      if ((current.DecisionMode != null) && (current.DecisionMode.Count != 0))
      {
        writer.WritePropertyName("decisionMode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.DecisionMode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Answer != null) && (current.Answer.Count != 0))
      {
        writer.WritePropertyName("answer");
        writer.WriteStartArray();
        foreach (Contract.AnswerComponent val in current.Answer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.TextElement != null)
      {
        if (!string.IsNullOrEmpty(current.TextElement.Value))
        {
          writer.WriteString("text",current.TextElement.Value);
        }
        if (current.TextElement.HasExtensions() || (!string.IsNullOrEmpty(current.TextElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_text",false,current.TextElement.Extension,current.TextElement.ElementId);
        }
      }

      if ((current.LinkIdElement != null) && (current.LinkIdElement.Count != 0))
      {
        writer.WritePropertyName("linkId");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirString val in current.LinkIdElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirString val in current.LinkIdElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_linkId");
          writer.WriteStartArray();
          foreach (FhirString val in current.LinkIdElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.SecurityLabelNumberElement != null) && (current.SecurityLabelNumberElement.Count != 0))
      {
        writer.WritePropertyName("securityLabelNumber");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (UnsignedInt val in current.SecurityLabelNumberElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (UnsignedInt val in current.SecurityLabelNumberElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_securityLabelNumber");
          writer.WriteStartArray();
          foreach (UnsignedInt val in current.SecurityLabelNumberElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContractOffer
    /// </summary>
    public static void DeserializeJson(this Contract.ContractOfferComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContractOffer
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.ContractOfferComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "party":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Party = new List<Contract.ContractPartyComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.ContractPartyComponent v_Party = new Hl7.Fhir.Model.Contract.ContractPartyComponent();
            v_Party.DeserializeJson(ref reader, options);
            current.Party.Add(v_Party);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Party.Count == 0)
          {
            current.Party = null;
          }
          break;

        case "topic":
          current.Topic = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Topic).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "decision":
          current.Decision = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Decision).DeserializeJson(ref reader, options);
          break;

        case "decisionMode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.DecisionMode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_DecisionMode = new Hl7.Fhir.Model.CodeableConcept();
            v_DecisionMode.DeserializeJson(ref reader, options);
            current.DecisionMode.Add(v_DecisionMode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DecisionMode.Count == 0)
          {
            current.DecisionMode = null;
          }
          break;

        case "answer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Answer = new List<Contract.AnswerComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.AnswerComponent v_Answer = new Hl7.Fhir.Model.Contract.AnswerComponent();
            v_Answer.DeserializeJson(ref reader, options);
            current.Answer.Add(v_Answer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Answer.Count == 0)
          {
            current.Answer = null;
          }
          break;

        case "text":
          current.TextElement = new FhirString(reader.GetString());
          break;

        case "_text":
          ((Hl7.Fhir.Model.Element)current.TextElement).DeserializeJson(ref reader, options);
          break;

        case "linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.LinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.LinkIdElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LinkIdElement.Count == 0)
          {
            current.LinkIdElement = null;
          }
          break;

        case "_linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_linkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_linkId >= current.LinkIdElement.Count)
            {
              current.LinkIdElement.Add(new FhirString());
            }
            ((Hl7.Fhir.Model.Element)current.LinkIdElement[i_linkId++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SecurityLabelNumberElement = new List<UnsignedInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SecurityLabelNumberElement.Add(new UnsignedInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SecurityLabelNumberElement.Count == 0)
          {
            current.SecurityLabelNumberElement = null;
          }
          break;

        case "_securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_securityLabelNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_securityLabelNumber >= current.SecurityLabelNumberElement.Count)
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt());
            }
            ((Hl7.Fhir.Model.Element)current.SecurityLabelNumberElement[i_securityLabelNumber++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: offer, Export: ContractOfferComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ContractParty into JSON
    /// </summary>
    public static void SerializeJson(this Contract.ContractPartyComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ContractParty, Export: ContractPartyComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Reference != null) && (current.Reference.Count != 0))
      {
        writer.WritePropertyName("reference");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Reference)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      writer.WritePropertyName("role");
      current.Role.SerializeJson(writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContractParty
    /// </summary>
    public static void DeserializeJson(this Contract.ContractPartyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContractParty
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.ContractPartyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Reference = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Reference = new Hl7.Fhir.Model.ResourceReference();
            v_Reference.DeserializeJson(ref reader, options);
            current.Reference.Add(v_Reference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Reference.Count == 0)
          {
            current.Reference = null;
          }
          break;

        case "role":
          current.Role = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Role).DeserializeJson(ref reader, options);
          break;

        // Complex: party, Export: ContractPartyComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#Answer into JSON
    /// </summary>
    public static void SerializeJson(this Contract.AnswerComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#Answer, Export: AnswerComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case FhirBoolean v_FhirBoolean:
            writer.WriteBoolean("valueBoolean", (bool)v_FhirBoolean.Value);
            break;
          case FhirDecimal v_FhirDecimal:
            writer.WriteNumber("valueDecimal",(decimal)v_FhirDecimal.Value);
            break;
          case Integer v_Integer:
            writer.WriteNumber("valueInteger",(int)v_Integer.Value);
            break;
          case Date v_Date:
            writer.WriteString("valueDate",v_Date.Value);
            break;
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("valueDateTime",v_FhirDateTime.Value);
            break;
          case Time v_Time:
            writer.WritePropertyName("valueTime");
            v_Time.SerializeJson(writer, options);
            break;
          case FhirString v_FhirString:
            writer.WriteString("valueString",v_FhirString.Value);
            break;
          case FhirUri v_FhirUri:
            writer.WriteString("valueUri",v_FhirUri.Value);
            break;
          case Attachment v_Attachment:
            writer.WritePropertyName("valueAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case Coding v_Coding:
            writer.WritePropertyName("valueCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("valueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("valueReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Answer
    /// </summary>
    public static void DeserializeJson(this Contract.AnswerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Answer
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.AnswerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "valueBoolean":
          current.Value = new FhirBoolean(reader.GetBoolean());
          break;

        case "valueDecimal":
          current.Value = new FhirDecimal(reader.GetDecimal());
          break;

        case "valueInteger":
          current.Value = new Integer(reader.GetInt32());
          break;

        case "valueDate":
          current.Value = new Date(reader.GetString());
          break;

        case "valueDateTime":
          current.Value = new FhirDateTime(reader.GetString());
          break;

        case "valueTime":
          current.Value = new Hl7.Fhir.Model.Time();
          ((Hl7.Fhir.Model.Time)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueString":
          current.Value = new FhirString(reader.GetString());
          break;

        case "valueUri":
          current.Value = new FhirUri(reader.GetString());
          break;

        case "valueAttachment":
          current.Value = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueCoding":
          current.Value = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          current.Value = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          current.Value = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Value).DeserializeJson(ref reader, options);
          break;

        // Complex: answer, Export: AnswerComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ContractAsset into JSON
    /// </summary>
    public static void SerializeJson(this Contract.ContractAssetComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ContractAsset, Export: ContractAssetComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Scope != null)
      {
        writer.WritePropertyName("scope");
        current.Scope.SerializeJson(writer, options);
      }

      if ((current.Type != null) && (current.Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Type)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.TypeReference != null) && (current.TypeReference.Count != 0))
      {
        writer.WritePropertyName("typeReference");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.TypeReference)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Subtype != null) && (current.Subtype.Count != 0))
      {
        writer.WritePropertyName("subtype");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Subtype)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Relationship != null)
      {
        writer.WritePropertyName("relationship");
        current.Relationship.SerializeJson(writer, options);
      }

      if ((current.Context != null) && (current.Context.Count != 0))
      {
        writer.WritePropertyName("context");
        writer.WriteStartArray();
        foreach (Contract.AssetContextComponent val in current.Context)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.ConditionElement != null)
      {
        if (!string.IsNullOrEmpty(current.ConditionElement.Value))
        {
          writer.WriteString("condition",current.ConditionElement.Value);
        }
        if (current.ConditionElement.HasExtensions() || (!string.IsNullOrEmpty(current.ConditionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_condition",false,current.ConditionElement.Extension,current.ConditionElement.ElementId);
        }
      }

      if ((current.PeriodType != null) && (current.PeriodType.Count != 0))
      {
        writer.WritePropertyName("periodType");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.PeriodType)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Period != null) && (current.Period.Count != 0))
      {
        writer.WritePropertyName("period");
        writer.WriteStartArray();
        foreach (Period val in current.Period)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.UsePeriod != null) && (current.UsePeriod.Count != 0))
      {
        writer.WritePropertyName("usePeriod");
        writer.WriteStartArray();
        foreach (Period val in current.UsePeriod)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.TextElement != null)
      {
        if (!string.IsNullOrEmpty(current.TextElement.Value))
        {
          writer.WriteString("text",current.TextElement.Value);
        }
        if (current.TextElement.HasExtensions() || (!string.IsNullOrEmpty(current.TextElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_text",false,current.TextElement.Extension,current.TextElement.ElementId);
        }
      }

      if ((current.LinkIdElement != null) && (current.LinkIdElement.Count != 0))
      {
        writer.WritePropertyName("linkId");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirString val in current.LinkIdElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirString val in current.LinkIdElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_linkId");
          writer.WriteStartArray();
          foreach (FhirString val in current.LinkIdElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.Answer != null) && (current.Answer.Count != 0))
      {
        writer.WritePropertyName("answer");
        writer.WriteStartArray();
        foreach (Contract.AnswerComponent val in current.Answer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SecurityLabelNumberElement != null) && (current.SecurityLabelNumberElement.Count != 0))
      {
        writer.WritePropertyName("securityLabelNumber");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (UnsignedInt val in current.SecurityLabelNumberElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (UnsignedInt val in current.SecurityLabelNumberElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_securityLabelNumber");
          writer.WriteStartArray();
          foreach (UnsignedInt val in current.SecurityLabelNumberElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.ValuedItem != null) && (current.ValuedItem.Count != 0))
      {
        writer.WritePropertyName("valuedItem");
        writer.WriteStartArray();
        foreach (Contract.ValuedItemComponent val in current.ValuedItem)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContractAsset
    /// </summary>
    public static void DeserializeJson(this Contract.ContractAssetComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContractAsset
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.ContractAssetComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "scope":
          current.Scope = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Scope).DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Type = new Hl7.Fhir.Model.CodeableConcept();
            v_Type.DeserializeJson(ref reader, options);
            current.Type.Add(v_Type);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }
          break;

        case "typeReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.TypeReference = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_TypeReference = new Hl7.Fhir.Model.ResourceReference();
            v_TypeReference.DeserializeJson(ref reader, options);
            current.TypeReference.Add(v_TypeReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.TypeReference.Count == 0)
          {
            current.TypeReference = null;
          }
          break;

        case "subtype":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Subtype = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Subtype = new Hl7.Fhir.Model.CodeableConcept();
            v_Subtype.DeserializeJson(ref reader, options);
            current.Subtype.Add(v_Subtype);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Subtype.Count == 0)
          {
            current.Subtype = null;
          }
          break;

        case "relationship":
          current.Relationship = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Relationship).DeserializeJson(ref reader, options);
          break;

        case "context":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Context = new List<Contract.AssetContextComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.AssetContextComponent v_Context = new Hl7.Fhir.Model.Contract.AssetContextComponent();
            v_Context.DeserializeJson(ref reader, options);
            current.Context.Add(v_Context);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Context.Count == 0)
          {
            current.Context = null;
          }
          break;

        case "condition":
          current.ConditionElement = new FhirString(reader.GetString());
          break;

        case "_condition":
          ((Hl7.Fhir.Model.Element)current.ConditionElement).DeserializeJson(ref reader, options);
          break;

        case "periodType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PeriodType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_PeriodType = new Hl7.Fhir.Model.CodeableConcept();
            v_PeriodType.DeserializeJson(ref reader, options);
            current.PeriodType.Add(v_PeriodType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PeriodType.Count == 0)
          {
            current.PeriodType = null;
          }
          break;

        case "period":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Period = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Period v_Period = new Hl7.Fhir.Model.Period();
            v_Period.DeserializeJson(ref reader, options);
            current.Period.Add(v_Period);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Period.Count == 0)
          {
            current.Period = null;
          }
          break;

        case "usePeriod":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UsePeriod = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Period v_UsePeriod = new Hl7.Fhir.Model.Period();
            v_UsePeriod.DeserializeJson(ref reader, options);
            current.UsePeriod.Add(v_UsePeriod);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UsePeriod.Count == 0)
          {
            current.UsePeriod = null;
          }
          break;

        case "text":
          current.TextElement = new FhirString(reader.GetString());
          break;

        case "_text":
          ((Hl7.Fhir.Model.Element)current.TextElement).DeserializeJson(ref reader, options);
          break;

        case "linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.LinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.LinkIdElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LinkIdElement.Count == 0)
          {
            current.LinkIdElement = null;
          }
          break;

        case "_linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_linkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_linkId >= current.LinkIdElement.Count)
            {
              current.LinkIdElement.Add(new FhirString());
            }
            ((Hl7.Fhir.Model.Element)current.LinkIdElement[i_linkId++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "answer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Answer = new List<Contract.AnswerComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.AnswerComponent v_Answer = new Hl7.Fhir.Model.Contract.AnswerComponent();
            v_Answer.DeserializeJson(ref reader, options);
            current.Answer.Add(v_Answer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Answer.Count == 0)
          {
            current.Answer = null;
          }
          break;

        case "securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SecurityLabelNumberElement = new List<UnsignedInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SecurityLabelNumberElement.Add(new UnsignedInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SecurityLabelNumberElement.Count == 0)
          {
            current.SecurityLabelNumberElement = null;
          }
          break;

        case "_securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_securityLabelNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_securityLabelNumber >= current.SecurityLabelNumberElement.Count)
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt());
            }
            ((Hl7.Fhir.Model.Element)current.SecurityLabelNumberElement[i_securityLabelNumber++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "valuedItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ValuedItem = new List<Contract.ValuedItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.ValuedItemComponent v_ValuedItem = new Hl7.Fhir.Model.Contract.ValuedItemComponent();
            v_ValuedItem.DeserializeJson(ref reader, options);
            current.ValuedItem.Add(v_ValuedItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ValuedItem.Count == 0)
          {
            current.ValuedItem = null;
          }
          break;

        // Complex: asset, Export: ContractAssetComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#AssetContext into JSON
    /// </summary>
    public static void SerializeJson(this Contract.AssetContextComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#AssetContext, Export: AssetContextComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Reference != null)
      {
        writer.WritePropertyName("reference");
        current.Reference.SerializeJson(writer, options);
      }

      if ((current.Code != null) && (current.Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Code)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.TextElement != null)
      {
        if (!string.IsNullOrEmpty(current.TextElement.Value))
        {
          writer.WriteString("text",current.TextElement.Value);
        }
        if (current.TextElement.HasExtensions() || (!string.IsNullOrEmpty(current.TextElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_text",false,current.TextElement.Extension,current.TextElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#AssetContext
    /// </summary>
    public static void DeserializeJson(this Contract.AssetContextComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#AssetContext
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.AssetContextComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          current.Reference = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Reference).DeserializeJson(ref reader, options);
          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Code = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Code = new Hl7.Fhir.Model.CodeableConcept();
            v_Code.DeserializeJson(ref reader, options);
            current.Code.Add(v_Code);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Code.Count == 0)
          {
            current.Code = null;
          }
          break;

        case "text":
          current.TextElement = new FhirString(reader.GetString());
          break;

        case "_text":
          ((Hl7.Fhir.Model.Element)current.TextElement).DeserializeJson(ref reader, options);
          break;

        // Complex: context, Export: AssetContextComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ValuedItem into JSON
    /// </summary>
    public static void SerializeJson(this Contract.ValuedItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ValuedItem, Export: ValuedItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Entity != null)
      {
        switch (current.Entity)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("entityCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("entityReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (current.EffectiveTimeElement != null)
      {
        if (!string.IsNullOrEmpty(current.EffectiveTimeElement.Value))
        {
          writer.WriteString("effectiveTime",current.EffectiveTimeElement.Value);
        }
        if (current.EffectiveTimeElement.HasExtensions() || (!string.IsNullOrEmpty(current.EffectiveTimeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_effectiveTime",false,current.EffectiveTimeElement.Extension,current.EffectiveTimeElement.ElementId);
        }
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        current.UnitPrice.SerializeJson(writer, options);
      }

      if (current.FactorElement != null)
      {
        if (current.FactorElement.Value != null)
        {
          writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
        }
        if (current.FactorElement.HasExtensions() || (!string.IsNullOrEmpty(current.FactorElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_factor",false,current.FactorElement.Extension,current.FactorElement.ElementId);
        }
      }

      if (current.PointsElement != null)
      {
        if (current.PointsElement.Value != null)
        {
          writer.WriteNumber("points",(decimal)current.PointsElement.Value);
        }
        if (current.PointsElement.HasExtensions() || (!string.IsNullOrEmpty(current.PointsElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_points",false,current.PointsElement.Extension,current.PointsElement.ElementId);
        }
      }

      if (current.Net != null)
      {
        writer.WritePropertyName("net");
        current.Net.SerializeJson(writer, options);
      }

      if (current.PaymentElement != null)
      {
        if (!string.IsNullOrEmpty(current.PaymentElement.Value))
        {
          writer.WriteString("payment",current.PaymentElement.Value);
        }
        if (current.PaymentElement.HasExtensions() || (!string.IsNullOrEmpty(current.PaymentElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_payment",false,current.PaymentElement.Extension,current.PaymentElement.ElementId);
        }
      }

      if (current.PaymentDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.PaymentDateElement.Value))
        {
          writer.WriteString("paymentDate",current.PaymentDateElement.Value);
        }
        if (current.PaymentDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.PaymentDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_paymentDate",false,current.PaymentDateElement.Extension,current.PaymentDateElement.ElementId);
        }
      }

      if (current.Responsible != null)
      {
        writer.WritePropertyName("responsible");
        current.Responsible.SerializeJson(writer, options);
      }

      if (current.Recipient != null)
      {
        writer.WritePropertyName("recipient");
        current.Recipient.SerializeJson(writer, options);
      }

      if ((current.LinkIdElement != null) && (current.LinkIdElement.Count != 0))
      {
        writer.WritePropertyName("linkId");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirString val in current.LinkIdElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirString val in current.LinkIdElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_linkId");
          writer.WriteStartArray();
          foreach (FhirString val in current.LinkIdElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.SecurityLabelNumberElement != null) && (current.SecurityLabelNumberElement.Count != 0))
      {
        writer.WritePropertyName("securityLabelNumber");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (UnsignedInt val in current.SecurityLabelNumberElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (UnsignedInt val in current.SecurityLabelNumberElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_securityLabelNumber");
          writer.WriteStartArray();
          foreach (UnsignedInt val in current.SecurityLabelNumberElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ValuedItem
    /// </summary>
    public static void DeserializeJson(this Contract.ValuedItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ValuedItem
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.ValuedItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "entityCodeableConcept":
          current.Entity = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Entity).DeserializeJson(ref reader, options);
          break;

        case "entityReference":
          current.Entity = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Entity).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "effectiveTime":
          current.EffectiveTimeElement = new FhirDateTime(reader.GetString());
          break;

        case "_effectiveTime":
          ((Hl7.Fhir.Model.Element)current.EffectiveTimeElement).DeserializeJson(ref reader, options);
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          current.FactorElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "_factor":
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "points":
          current.PointsElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "_points":
          ((Hl7.Fhir.Model.Element)current.PointsElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "payment":
          current.PaymentElement = new FhirString(reader.GetString());
          break;

        case "_payment":
          ((Hl7.Fhir.Model.Element)current.PaymentElement).DeserializeJson(ref reader, options);
          break;

        case "paymentDate":
          current.PaymentDateElement = new FhirDateTime(reader.GetString());
          break;

        case "_paymentDate":
          ((Hl7.Fhir.Model.Element)current.PaymentDateElement).DeserializeJson(ref reader, options);
          break;

        case "responsible":
          current.Responsible = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Responsible).DeserializeJson(ref reader, options);
          break;

        case "recipient":
          current.Recipient = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Recipient).DeserializeJson(ref reader, options);
          break;

        case "linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.LinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.LinkIdElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LinkIdElement.Count == 0)
          {
            current.LinkIdElement = null;
          }
          break;

        case "_linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_linkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_linkId >= current.LinkIdElement.Count)
            {
              current.LinkIdElement.Add(new FhirString());
            }
            ((Hl7.Fhir.Model.Element)current.LinkIdElement[i_linkId++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SecurityLabelNumberElement = new List<UnsignedInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SecurityLabelNumberElement.Add(new UnsignedInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SecurityLabelNumberElement.Count == 0)
          {
            current.SecurityLabelNumberElement = null;
          }
          break;

        case "_securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_securityLabelNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_securityLabelNumber >= current.SecurityLabelNumberElement.Count)
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt());
            }
            ((Hl7.Fhir.Model.Element)current.SecurityLabelNumberElement[i_securityLabelNumber++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: valuedItem, Export: ValuedItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#Action into JSON
    /// </summary>
    public static void SerializeJson(this Contract.ActionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#Action, Export: ActionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.DoNotPerformElement != null)
      {
        if (current.DoNotPerformElement.Value != null)
        {
          writer.WriteBoolean("doNotPerform",(bool)current.DoNotPerformElement.Value);
        }
        if (current.DoNotPerformElement.HasExtensions() || (!string.IsNullOrEmpty(current.DoNotPerformElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_doNotPerform",false,current.DoNotPerformElement.Extension,current.DoNotPerformElement.ElementId);
        }
      }

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if ((current.Subject != null) && (current.Subject.Count != 0))
      {
        writer.WritePropertyName("subject");
        writer.WriteStartArray();
        foreach (Contract.ActionSubjectComponent val in current.Subject)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      writer.WritePropertyName("intent");
      current.Intent.SerializeJson(writer, options);

      if ((current.LinkIdElement != null) && (current.LinkIdElement.Count != 0))
      {
        writer.WritePropertyName("linkId");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirString val in current.LinkIdElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirString val in current.LinkIdElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_linkId");
          writer.WriteStartArray();
          foreach (FhirString val in current.LinkIdElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      writer.WritePropertyName("status");
      current.Status.SerializeJson(writer, options);

      if (current.Context != null)
      {
        writer.WritePropertyName("context");
        current.Context.SerializeJson(writer, options);
      }

      if ((current.ContextLinkIdElement != null) && (current.ContextLinkIdElement.Count != 0))
      {
        writer.WritePropertyName("contextLinkId");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirString val in current.ContextLinkIdElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirString val in current.ContextLinkIdElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_contextLinkId");
          writer.WriteStartArray();
          foreach (FhirString val in current.ContextLinkIdElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if (current.Occurrence != null)
      {
        switch (current.Occurrence)
        {
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("occurrenceDateTime",v_FhirDateTime.Value);
            break;
          case Period v_Period:
            writer.WritePropertyName("occurrencePeriod");
            v_Period.SerializeJson(writer, options);
            break;
          case Timing v_Timing:
            writer.WritePropertyName("occurrenceTiming");
            v_Timing.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.Requester != null) && (current.Requester.Count != 0))
      {
        writer.WritePropertyName("requester");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Requester)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.RequesterLinkIdElement != null) && (current.RequesterLinkIdElement.Count != 0))
      {
        writer.WritePropertyName("requesterLinkId");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirString val in current.RequesterLinkIdElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirString val in current.RequesterLinkIdElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_requesterLinkId");
          writer.WriteStartArray();
          foreach (FhirString val in current.RequesterLinkIdElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.PerformerType != null) && (current.PerformerType.Count != 0))
      {
        writer.WritePropertyName("performerType");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.PerformerType)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.PerformerRole != null)
      {
        writer.WritePropertyName("performerRole");
        current.PerformerRole.SerializeJson(writer, options);
      }

      if (current.Performer != null)
      {
        writer.WritePropertyName("performer");
        current.Performer.SerializeJson(writer, options);
      }

      if ((current.PerformerLinkIdElement != null) && (current.PerformerLinkIdElement.Count != 0))
      {
        writer.WritePropertyName("performerLinkId");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirString val in current.PerformerLinkIdElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirString val in current.PerformerLinkIdElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_performerLinkId");
          writer.WriteStartArray();
          foreach (FhirString val in current.PerformerLinkIdElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.ReasonCode != null) && (current.ReasonCode.Count != 0))
      {
        writer.WritePropertyName("reasonCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ReasonCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ReasonReference != null) && (current.ReasonReference.Count != 0))
      {
        writer.WritePropertyName("reasonReference");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.ReasonReference)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ReasonElement != null) && (current.ReasonElement.Count != 0))
      {
        writer.WritePropertyName("reason");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirString val in current.ReasonElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirString val in current.ReasonElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_reason");
          writer.WriteStartArray();
          foreach (FhirString val in current.ReasonElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.ReasonLinkIdElement != null) && (current.ReasonLinkIdElement.Count != 0))
      {
        writer.WritePropertyName("reasonLinkId");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirString val in current.ReasonLinkIdElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirString val in current.ReasonLinkIdElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_reasonLinkId");
          writer.WriteStartArray();
          foreach (FhirString val in current.ReasonLinkIdElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.Note != null) && (current.Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();
        foreach (Annotation val in current.Note)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SecurityLabelNumberElement != null) && (current.SecurityLabelNumberElement.Count != 0))
      {
        writer.WritePropertyName("securityLabelNumber");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (UnsignedInt val in current.SecurityLabelNumberElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (UnsignedInt val in current.SecurityLabelNumberElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_securityLabelNumber");
          writer.WriteStartArray();
          foreach (UnsignedInt val in current.SecurityLabelNumberElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Action
    /// </summary>
    public static void DeserializeJson(this Contract.ActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Action
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.ActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "doNotPerform":
          current.DoNotPerformElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_doNotPerform":
          ((Hl7.Fhir.Model.Element)current.DoNotPerformElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "subject":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Subject = new List<Contract.ActionSubjectComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.ActionSubjectComponent v_Subject = new Hl7.Fhir.Model.Contract.ActionSubjectComponent();
            v_Subject.DeserializeJson(ref reader, options);
            current.Subject.Add(v_Subject);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Subject.Count == 0)
          {
            current.Subject = null;
          }
          break;

        case "intent":
          current.Intent = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Intent).DeserializeJson(ref reader, options);
          break;

        case "linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.LinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.LinkIdElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LinkIdElement.Count == 0)
          {
            current.LinkIdElement = null;
          }
          break;

        case "_linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_linkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_linkId >= current.LinkIdElement.Count)
            {
              current.LinkIdElement.Add(new FhirString());
            }
            ((Hl7.Fhir.Model.Element)current.LinkIdElement[i_linkId++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "status":
          current.Status = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Status).DeserializeJson(ref reader, options);
          break;

        case "context":
          current.Context = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Context).DeserializeJson(ref reader, options);
          break;

        case "contextLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ContextLinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ContextLinkIdElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ContextLinkIdElement.Count == 0)
          {
            current.ContextLinkIdElement = null;
          }
          break;

        case "_contextLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_contextLinkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_contextLinkId >= current.ContextLinkIdElement.Count)
            {
              current.ContextLinkIdElement.Add(new FhirString());
            }
            ((Hl7.Fhir.Model.Element)current.ContextLinkIdElement[i_contextLinkId++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "occurrenceDateTime":
          current.Occurrence = new FhirDateTime(reader.GetString());
          break;

        case "occurrencePeriod":
          current.Occurrence = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Occurrence).DeserializeJson(ref reader, options);
          break;

        case "occurrenceTiming":
          current.Occurrence = new Hl7.Fhir.Model.Timing();
          ((Hl7.Fhir.Model.Timing)current.Occurrence).DeserializeJson(ref reader, options);
          break;

        case "requester":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Requester = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Requester = new Hl7.Fhir.Model.ResourceReference();
            v_Requester.DeserializeJson(ref reader, options);
            current.Requester.Add(v_Requester);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Requester.Count == 0)
          {
            current.Requester = null;
          }
          break;

        case "requesterLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.RequesterLinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.RequesterLinkIdElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.RequesterLinkIdElement.Count == 0)
          {
            current.RequesterLinkIdElement = null;
          }
          break;

        case "_requesterLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_requesterLinkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_requesterLinkId >= current.RequesterLinkIdElement.Count)
            {
              current.RequesterLinkIdElement.Add(new FhirString());
            }
            ((Hl7.Fhir.Model.Element)current.RequesterLinkIdElement[i_requesterLinkId++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "performerType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PerformerType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_PerformerType = new Hl7.Fhir.Model.CodeableConcept();
            v_PerformerType.DeserializeJson(ref reader, options);
            current.PerformerType.Add(v_PerformerType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PerformerType.Count == 0)
          {
            current.PerformerType = null;
          }
          break;

        case "performerRole":
          current.PerformerRole = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.PerformerRole).DeserializeJson(ref reader, options);
          break;

        case "performer":
          current.Performer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Performer).DeserializeJson(ref reader, options);
          break;

        case "performerLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PerformerLinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.PerformerLinkIdElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PerformerLinkIdElement.Count == 0)
          {
            current.PerformerLinkIdElement = null;
          }
          break;

        case "_performerLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_performerLinkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_performerLinkId >= current.PerformerLinkIdElement.Count)
            {
              current.PerformerLinkIdElement.Add(new FhirString());
            }
            ((Hl7.Fhir.Model.Element)current.PerformerLinkIdElement[i_performerLinkId++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "reasonCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ReasonCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ReasonCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ReasonCode.DeserializeJson(ref reader, options);
            current.ReasonCode.Add(v_ReasonCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonCode.Count == 0)
          {
            current.ReasonCode = null;
          }
          break;

        case "reasonReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ReasonReference = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_ReasonReference = new Hl7.Fhir.Model.ResourceReference();
            v_ReasonReference.DeserializeJson(ref reader, options);
            current.ReasonReference.Add(v_ReasonReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonReference.Count == 0)
          {
            current.ReasonReference = null;
          }
          break;

        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ReasonElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ReasonElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonElement.Count == 0)
          {
            current.ReasonElement = null;
          }
          break;

        case "_reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_reason = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_reason >= current.ReasonElement.Count)
            {
              current.ReasonElement.Add(new FhirString());
            }
            ((Hl7.Fhir.Model.Element)current.ReasonElement[i_reason++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "reasonLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ReasonLinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ReasonLinkIdElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonLinkIdElement.Count == 0)
          {
            current.ReasonLinkIdElement = null;
          }
          break;

        case "_reasonLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_reasonLinkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_reasonLinkId >= current.ReasonLinkIdElement.Count)
            {
              current.ReasonLinkIdElement.Add(new FhirString());
            }
            ((Hl7.Fhir.Model.Element)current.ReasonLinkIdElement[i_reasonLinkId++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Annotation v_Note = new Hl7.Fhir.Model.Annotation();
            v_Note.DeserializeJson(ref reader, options);
            current.Note.Add(v_Note);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }
          break;

        case "securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SecurityLabelNumberElement = new List<UnsignedInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SecurityLabelNumberElement.Add(new UnsignedInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SecurityLabelNumberElement.Count == 0)
          {
            current.SecurityLabelNumberElement = null;
          }
          break;

        case "_securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_securityLabelNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_securityLabelNumber >= current.SecurityLabelNumberElement.Count)
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt());
            }
            ((Hl7.Fhir.Model.Element)current.SecurityLabelNumberElement[i_securityLabelNumber++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: action, Export: ActionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ActionSubject into JSON
    /// </summary>
    public static void SerializeJson(this Contract.ActionSubjectComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ActionSubject, Export: ActionSubjectComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Reference != null) && (current.Reference.Count != 0))
      {
        writer.WritePropertyName("reference");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Reference)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Role != null)
      {
        writer.WritePropertyName("role");
        current.Role.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ActionSubject
    /// </summary>
    public static void DeserializeJson(this Contract.ActionSubjectComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ActionSubject
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.ActionSubjectComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Reference = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Reference = new Hl7.Fhir.Model.ResourceReference();
            v_Reference.DeserializeJson(ref reader, options);
            current.Reference.Add(v_Reference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Reference.Count == 0)
          {
            current.Reference = null;
          }
          break;

        case "role":
          current.Role = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Role).DeserializeJson(ref reader, options);
          break;

        // Complex: subject, Export: ActionSubjectComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#Signatory into JSON
    /// </summary>
    public static void SerializeJson(this Contract.SignatoryComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#Signatory, Export: SignatoryComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      writer.WritePropertyName("party");
      current.Party.SerializeJson(writer, options);

      if ((current.Signature != null) && (current.Signature.Count != 0))
      {
        writer.WritePropertyName("signature");
        writer.WriteStartArray();
        foreach (Signature val in current.Signature)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Signatory
    /// </summary>
    public static void DeserializeJson(this Contract.SignatoryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Signatory
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.SignatoryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Type).DeserializeJson(ref reader, options);
          break;

        case "party":
          current.Party = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Party).DeserializeJson(ref reader, options);
          break;

        case "signature":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Signature = new List<Signature>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Signature v_Signature = new Hl7.Fhir.Model.Signature();
            v_Signature.DeserializeJson(ref reader, options);
            current.Signature.Add(v_Signature);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Signature.Count == 0)
          {
            current.Signature = null;
          }
          break;

        // Complex: signer, Export: SignatoryComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#FriendlyLanguage into JSON
    /// </summary>
    public static void SerializeJson(this Contract.FriendlyLanguageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#FriendlyLanguage, Export: FriendlyLanguageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Content != null)
      {
        switch (current.Content)
        {
          case Attachment v_Attachment:
            writer.WritePropertyName("contentAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("contentReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#FriendlyLanguage
    /// </summary>
    public static void DeserializeJson(this Contract.FriendlyLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#FriendlyLanguage
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.FriendlyLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          current.Content = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Content).DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          current.Content = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Content).DeserializeJson(ref reader, options);
          break;

        // Complex: friendly, Export: FriendlyLanguageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#LegalLanguage into JSON
    /// </summary>
    public static void SerializeJson(this Contract.LegalLanguageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#LegalLanguage, Export: LegalLanguageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Content != null)
      {
        switch (current.Content)
        {
          case Attachment v_Attachment:
            writer.WritePropertyName("contentAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("contentReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#LegalLanguage
    /// </summary>
    public static void DeserializeJson(this Contract.LegalLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#LegalLanguage
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.LegalLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          current.Content = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Content).DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          current.Content = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Content).DeserializeJson(ref reader, options);
          break;

        // Complex: legal, Export: LegalLanguageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ComputableLanguage into JSON
    /// </summary>
    public static void SerializeJson(this Contract.ComputableLanguageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ComputableLanguage, Export: ComputableLanguageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Content != null)
      {
        switch (current.Content)
        {
          case Attachment v_Attachment:
            writer.WritePropertyName("contentAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("contentReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ComputableLanguage
    /// </summary>
    public static void DeserializeJson(this Contract.ComputableLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ComputableLanguage
    /// </summary>
    public static void DeserializeJsonProperty(this Contract.ComputableLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          current.Content = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Content).DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          current.Content = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Content).DeserializeJson(ref reader, options);
          break;

        // Complex: rule, Export: ComputableLanguageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ContractJsonConverter : JsonConverter<Contract>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(Contract).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Contract value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Contract Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        Contract target = new Contract();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
