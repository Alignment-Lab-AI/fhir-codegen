// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for ElementDefinition
  /// </summary>
  public static class ElementDefinitionJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR ElementDefinition into JSON
    /// </summary>
    public static void SerializeJson(this ElementDefinition current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Complex: ElementDefinition, Export: ElementDefinition, Base: BackboneElement (BackboneType)
      ((Hl7.Fhir.Model.BackboneType)current).SerializeJson(writer, options, false);

      writer.WriteString("path",current.PathElement.Value);

      if ((current.RepresentationElement != null) && (current.RepresentationElement.Count != 0))
      {
        writer.WritePropertyName("representation");
        writer.WriteStartArray();
        foreach (Code<Hl7.Fhir.Model.ElementDefinition.PropertyRepresentation> val in current.RepresentationElement)
        {
          writer.WriteStringValue(Hl7.Fhir.Utility.EnumUtility.GetLiteral(val.Value));
        }
        writer.WriteEndArray();
      }

      if ((current.SliceNameElement != null) && (current.SliceNameElement.Value != null))
      {
        writer.WriteString("sliceName",current.SliceNameElement.Value);
      }

      if ((current.SliceIsConstrainingElement != null) && (current.SliceIsConstrainingElement.Value != null))
      {
        writer.WriteBoolean("sliceIsConstraining",(bool)current.SliceIsConstrainingElement.Value);
      }

      if ((current.LabelElement != null) && (current.LabelElement.Value != null))
      {
        writer.WriteString("label",current.LabelElement.Value);
      }

      if ((current.Code != null) && (current.Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();
        foreach (Coding val in current.Code)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Slicing != null)
      {
        writer.WritePropertyName("slicing");
        current.Slicing.SerializeJson(writer, options);
      }

      if ((current.ShortElement != null) && (current.ShortElement.Value != null))
      {
        writer.WriteString("short",current.ShortElement.Value);
      }

      if ((current.Definition != null) && (current.Definition.Value != null))
      {
        writer.WriteString("definition",current.Definition.Value);
      }

      if ((current.Comment != null) && (current.Comment.Value != null))
      {
        writer.WriteString("comment",current.Comment.Value);
      }

      if ((current.Requirements != null) && (current.Requirements.Value != null))
      {
        writer.WriteString("requirements",current.Requirements.Value);
      }

      if ((current.AliasElement != null) && (current.AliasElement.Count != 0))
      {
        writer.WritePropertyName("alias");
        writer.WriteStartArray();
        foreach (FhirString val in current.AliasElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.MinElement != null) && (current.MinElement.Value != null))
      {
        writer.WriteNumber("min",(int)current.MinElement.Value);
      }

      if ((current.MaxElement != null) && (current.MaxElement.Value != null))
      {
        writer.WriteString("max",current.MaxElement.Value);
      }

      if (current.Base != null)
      {
        writer.WritePropertyName("base");
        current.Base.SerializeJson(writer, options);
      }

      if ((current.ContentReferenceElement != null) && (current.ContentReferenceElement.Value != null))
      {
        writer.WriteString("contentReference",current.ContentReferenceElement.Value);
      }

      if ((current.Type != null) && (current.Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();
        foreach (ElementDefinition.TypeRefComponent val in current.Type)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.DefaultValue != null)
      {
        switch (current.DefaultValue)
        {
          case Base64Binary v_Base64Binary:
            writer.WriteBase64String("defaultValueBase64Binary", (byte[])v_Base64Binary.Value);
            break;
          case FhirBoolean v_FhirBoolean:
            writer.WriteBoolean("defaultValueBoolean", (bool)v_FhirBoolean.Value);
            break;
          case Canonical v_Canonical:
            writer.WriteString("defaultValueCanonical",v_Canonical.Value);
            break;
          case Code v_Code:
            writer.WriteString("defaultValueCode",v_Code.Value);
            break;
          case Date v_Date:
            writer.WriteString("defaultValueDate",v_Date.Value);
            break;
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("defaultValueDateTime",v_FhirDateTime.Value);
            break;
          case FhirDecimal v_FhirDecimal:
            writer.WriteNumber("defaultValueDecimal",(decimal)v_FhirDecimal.Value);
            break;
          case Id v_Id:
            writer.WriteString("defaultValueId",v_Id.Value);
            break;
          case Instant v_Instant:
            writer.WriteString("defaultValueInstant",((DateTimeOffset)v_Instant.Value).ToString("yyyy-MM-dd'T'HH:mm:ss.FFFFFFFK", System.Globalization.CultureInfo.InvariantCulture));
            break;
          case Integer v_Integer:
            writer.WriteNumber("defaultValueInteger",(int)v_Integer.Value);
            break;
          case Markdown v_Markdown:
            writer.WriteString("defaultValueMarkdown",v_Markdown.Value);
            break;
          case Oid v_Oid:
            writer.WriteString("defaultValueOid",v_Oid.Value);
            break;
          case PositiveInt v_PositiveInt:
            writer.WriteNumber("defaultValuePositiveInt",(int)v_PositiveInt.Value);
            break;
          case FhirString v_FhirString:
            writer.WriteString("defaultValueString",v_FhirString.Value);
            break;
          case Time v_Time:
            writer.WritePropertyName("defaultValueTime");
            v_Time.SerializeJson(writer, options);
            break;
          case UnsignedInt v_UnsignedInt:
            writer.WriteNumber("defaultValueUnsignedInt",(int)v_UnsignedInt.Value);
            break;
          case FhirUri v_FhirUri:
            writer.WriteString("defaultValueUri",v_FhirUri.Value);
            break;
          case FhirUrl v_FhirUrl:
            writer.WriteString("defaultValueUrl",v_FhirUrl.Value);
            break;
          case Uuid v_Uuid:
            writer.WriteString("defaultValueUuid",v_Uuid.Value);
            break;
          case Address v_Address:
            writer.WritePropertyName("defaultValueAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case Age v_Age:
            writer.WritePropertyName("defaultValueAge");
            v_Age.SerializeJson(writer, options);
            break;
          case Annotation v_Annotation:
            writer.WritePropertyName("defaultValueAnnotation");
            v_Annotation.SerializeJson(writer, options);
            break;
          case Attachment v_Attachment:
            writer.WritePropertyName("defaultValueAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("defaultValueCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Coding v_Coding:
            writer.WritePropertyName("defaultValueCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case ContactPoint v_ContactPoint:
            writer.WritePropertyName("defaultValueContactPoint");
            v_ContactPoint.SerializeJson(writer, options);
            break;
          case Count v_Count:
            writer.WritePropertyName("defaultValueCount");
            v_Count.SerializeJson(writer, options);
            break;
          case Distance v_Distance:
            writer.WritePropertyName("defaultValueDistance");
            v_Distance.SerializeJson(writer, options);
            break;
          case Duration v_Duration:
            writer.WritePropertyName("defaultValueDuration");
            v_Duration.SerializeJson(writer, options);
            break;
          case HumanName v_HumanName:
            writer.WritePropertyName("defaultValueHumanName");
            v_HumanName.SerializeJson(writer, options);
            break;
          case Identifier v_Identifier:
            writer.WritePropertyName("defaultValueIdentifier");
            v_Identifier.SerializeJson(writer, options);
            break;
          case Money v_Money:
            writer.WritePropertyName("defaultValueMoney");
            v_Money.SerializeJson(writer, options);
            break;
          case Period v_Period:
            writer.WritePropertyName("defaultValuePeriod");
            v_Period.SerializeJson(writer, options);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("defaultValueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Range v_Range:
            writer.WritePropertyName("defaultValueRange");
            v_Range.SerializeJson(writer, options);
            break;
          case Ratio v_Ratio:
            writer.WritePropertyName("defaultValueRatio");
            v_Ratio.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("defaultValueReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
          case SampledData v_SampledData:
            writer.WritePropertyName("defaultValueSampledData");
            v_SampledData.SerializeJson(writer, options);
            break;
          case Signature v_Signature:
            writer.WritePropertyName("defaultValueSignature");
            v_Signature.SerializeJson(writer, options);
            break;
          case Timing v_Timing:
            writer.WritePropertyName("defaultValueTiming");
            v_Timing.SerializeJson(writer, options);
            break;
          case ContactDetail v_ContactDetail:
            writer.WritePropertyName("defaultValueContactDetail");
            v_ContactDetail.SerializeJson(writer, options);
            break;
          case Contributor v_Contributor:
            writer.WritePropertyName("defaultValueContributor");
            v_Contributor.SerializeJson(writer, options);
            break;
          case DataRequirement v_DataRequirement:
            writer.WritePropertyName("defaultValueDataRequirement");
            v_DataRequirement.SerializeJson(writer, options);
            break;
          case Expression v_Expression:
            writer.WritePropertyName("defaultValueExpression");
            v_Expression.SerializeJson(writer, options);
            break;
          case ParameterDefinition v_ParameterDefinition:
            writer.WritePropertyName("defaultValueParameterDefinition");
            v_ParameterDefinition.SerializeJson(writer, options);
            break;
          case RelatedArtifact v_RelatedArtifact:
            writer.WritePropertyName("defaultValueRelatedArtifact");
            v_RelatedArtifact.SerializeJson(writer, options);
            break;
          case TriggerDefinition v_TriggerDefinition:
            writer.WritePropertyName("defaultValueTriggerDefinition");
            v_TriggerDefinition.SerializeJson(writer, options);
            break;
          case UsageContext v_UsageContext:
            writer.WritePropertyName("defaultValueUsageContext");
            v_UsageContext.SerializeJson(writer, options);
            break;
          case Dosage v_Dosage:
            writer.WritePropertyName("defaultValueDosage");
            v_Dosage.SerializeJson(writer, options);
            break;
          case Meta v_Meta:
            writer.WritePropertyName("defaultValueMeta");
            v_Meta.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.MeaningWhenMissing != null) && (current.MeaningWhenMissing.Value != null))
      {
        writer.WriteString("meaningWhenMissing",current.MeaningWhenMissing.Value);
      }

      if ((current.OrderMeaningElement != null) && (current.OrderMeaningElement.Value != null))
      {
        writer.WriteString("orderMeaning",current.OrderMeaningElement.Value);
      }

      if (current.Fixed != null)
      {
        switch (current.Fixed)
        {
          case Base64Binary v_Base64Binary:
            writer.WriteBase64String("fixedBase64Binary", (byte[])v_Base64Binary.Value);
            break;
          case FhirBoolean v_FhirBoolean:
            writer.WriteBoolean("fixedBoolean", (bool)v_FhirBoolean.Value);
            break;
          case Canonical v_Canonical:
            writer.WriteString("fixedCanonical",v_Canonical.Value);
            break;
          case Code v_Code:
            writer.WriteString("fixedCode",v_Code.Value);
            break;
          case Date v_Date:
            writer.WriteString("fixedDate",v_Date.Value);
            break;
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("fixedDateTime",v_FhirDateTime.Value);
            break;
          case FhirDecimal v_FhirDecimal:
            writer.WriteNumber("fixedDecimal",(decimal)v_FhirDecimal.Value);
            break;
          case Id v_Id:
            writer.WriteString("fixedId",v_Id.Value);
            break;
          case Instant v_Instant:
            writer.WriteString("fixedInstant",((DateTimeOffset)v_Instant.Value).ToString("yyyy-MM-dd'T'HH:mm:ss.FFFFFFFK", System.Globalization.CultureInfo.InvariantCulture));
            break;
          case Integer v_Integer:
            writer.WriteNumber("fixedInteger",(int)v_Integer.Value);
            break;
          case Markdown v_Markdown:
            writer.WriteString("fixedMarkdown",v_Markdown.Value);
            break;
          case Oid v_Oid:
            writer.WriteString("fixedOid",v_Oid.Value);
            break;
          case PositiveInt v_PositiveInt:
            writer.WriteNumber("fixedPositiveInt",(int)v_PositiveInt.Value);
            break;
          case FhirString v_FhirString:
            writer.WriteString("fixedString",v_FhirString.Value);
            break;
          case Time v_Time:
            writer.WritePropertyName("fixedTime");
            v_Time.SerializeJson(writer, options);
            break;
          case UnsignedInt v_UnsignedInt:
            writer.WriteNumber("fixedUnsignedInt",(int)v_UnsignedInt.Value);
            break;
          case FhirUri v_FhirUri:
            writer.WriteString("fixedUri",v_FhirUri.Value);
            break;
          case FhirUrl v_FhirUrl:
            writer.WriteString("fixedUrl",v_FhirUrl.Value);
            break;
          case Uuid v_Uuid:
            writer.WriteString("fixedUuid",v_Uuid.Value);
            break;
          case Address v_Address:
            writer.WritePropertyName("fixedAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case Age v_Age:
            writer.WritePropertyName("fixedAge");
            v_Age.SerializeJson(writer, options);
            break;
          case Annotation v_Annotation:
            writer.WritePropertyName("fixedAnnotation");
            v_Annotation.SerializeJson(writer, options);
            break;
          case Attachment v_Attachment:
            writer.WritePropertyName("fixedAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("fixedCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Coding v_Coding:
            writer.WritePropertyName("fixedCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case ContactPoint v_ContactPoint:
            writer.WritePropertyName("fixedContactPoint");
            v_ContactPoint.SerializeJson(writer, options);
            break;
          case Count v_Count:
            writer.WritePropertyName("fixedCount");
            v_Count.SerializeJson(writer, options);
            break;
          case Distance v_Distance:
            writer.WritePropertyName("fixedDistance");
            v_Distance.SerializeJson(writer, options);
            break;
          case Duration v_Duration:
            writer.WritePropertyName("fixedDuration");
            v_Duration.SerializeJson(writer, options);
            break;
          case HumanName v_HumanName:
            writer.WritePropertyName("fixedHumanName");
            v_HumanName.SerializeJson(writer, options);
            break;
          case Identifier v_Identifier:
            writer.WritePropertyName("fixedIdentifier");
            v_Identifier.SerializeJson(writer, options);
            break;
          case Money v_Money:
            writer.WritePropertyName("fixedMoney");
            v_Money.SerializeJson(writer, options);
            break;
          case Period v_Period:
            writer.WritePropertyName("fixedPeriod");
            v_Period.SerializeJson(writer, options);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("fixedQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Range v_Range:
            writer.WritePropertyName("fixedRange");
            v_Range.SerializeJson(writer, options);
            break;
          case Ratio v_Ratio:
            writer.WritePropertyName("fixedRatio");
            v_Ratio.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("fixedReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
          case SampledData v_SampledData:
            writer.WritePropertyName("fixedSampledData");
            v_SampledData.SerializeJson(writer, options);
            break;
          case Signature v_Signature:
            writer.WritePropertyName("fixedSignature");
            v_Signature.SerializeJson(writer, options);
            break;
          case Timing v_Timing:
            writer.WritePropertyName("fixedTiming");
            v_Timing.SerializeJson(writer, options);
            break;
          case ContactDetail v_ContactDetail:
            writer.WritePropertyName("fixedContactDetail");
            v_ContactDetail.SerializeJson(writer, options);
            break;
          case Contributor v_Contributor:
            writer.WritePropertyName("fixedContributor");
            v_Contributor.SerializeJson(writer, options);
            break;
          case DataRequirement v_DataRequirement:
            writer.WritePropertyName("fixedDataRequirement");
            v_DataRequirement.SerializeJson(writer, options);
            break;
          case Expression v_Expression:
            writer.WritePropertyName("fixedExpression");
            v_Expression.SerializeJson(writer, options);
            break;
          case ParameterDefinition v_ParameterDefinition:
            writer.WritePropertyName("fixedParameterDefinition");
            v_ParameterDefinition.SerializeJson(writer, options);
            break;
          case RelatedArtifact v_RelatedArtifact:
            writer.WritePropertyName("fixedRelatedArtifact");
            v_RelatedArtifact.SerializeJson(writer, options);
            break;
          case TriggerDefinition v_TriggerDefinition:
            writer.WritePropertyName("fixedTriggerDefinition");
            v_TriggerDefinition.SerializeJson(writer, options);
            break;
          case UsageContext v_UsageContext:
            writer.WritePropertyName("fixedUsageContext");
            v_UsageContext.SerializeJson(writer, options);
            break;
          case Dosage v_Dosage:
            writer.WritePropertyName("fixedDosage");
            v_Dosage.SerializeJson(writer, options);
            break;
          case Meta v_Meta:
            writer.WritePropertyName("fixedMeta");
            v_Meta.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Pattern != null)
      {
        switch (current.Pattern)
        {
          case Base64Binary v_Base64Binary:
            writer.WriteBase64String("patternBase64Binary", (byte[])v_Base64Binary.Value);
            break;
          case FhirBoolean v_FhirBoolean:
            writer.WriteBoolean("patternBoolean", (bool)v_FhirBoolean.Value);
            break;
          case Canonical v_Canonical:
            writer.WriteString("patternCanonical",v_Canonical.Value);
            break;
          case Code v_Code:
            writer.WriteString("patternCode",v_Code.Value);
            break;
          case Date v_Date:
            writer.WriteString("patternDate",v_Date.Value);
            break;
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("patternDateTime",v_FhirDateTime.Value);
            break;
          case FhirDecimal v_FhirDecimal:
            writer.WriteNumber("patternDecimal",(decimal)v_FhirDecimal.Value);
            break;
          case Id v_Id:
            writer.WriteString("patternId",v_Id.Value);
            break;
          case Instant v_Instant:
            writer.WriteString("patternInstant",((DateTimeOffset)v_Instant.Value).ToString("yyyy-MM-dd'T'HH:mm:ss.FFFFFFFK", System.Globalization.CultureInfo.InvariantCulture));
            break;
          case Integer v_Integer:
            writer.WriteNumber("patternInteger",(int)v_Integer.Value);
            break;
          case Markdown v_Markdown:
            writer.WriteString("patternMarkdown",v_Markdown.Value);
            break;
          case Oid v_Oid:
            writer.WriteString("patternOid",v_Oid.Value);
            break;
          case PositiveInt v_PositiveInt:
            writer.WriteNumber("patternPositiveInt",(int)v_PositiveInt.Value);
            break;
          case FhirString v_FhirString:
            writer.WriteString("patternString",v_FhirString.Value);
            break;
          case Time v_Time:
            writer.WritePropertyName("patternTime");
            v_Time.SerializeJson(writer, options);
            break;
          case UnsignedInt v_UnsignedInt:
            writer.WriteNumber("patternUnsignedInt",(int)v_UnsignedInt.Value);
            break;
          case FhirUri v_FhirUri:
            writer.WriteString("patternUri",v_FhirUri.Value);
            break;
          case FhirUrl v_FhirUrl:
            writer.WriteString("patternUrl",v_FhirUrl.Value);
            break;
          case Uuid v_Uuid:
            writer.WriteString("patternUuid",v_Uuid.Value);
            break;
          case Address v_Address:
            writer.WritePropertyName("patternAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case Age v_Age:
            writer.WritePropertyName("patternAge");
            v_Age.SerializeJson(writer, options);
            break;
          case Annotation v_Annotation:
            writer.WritePropertyName("patternAnnotation");
            v_Annotation.SerializeJson(writer, options);
            break;
          case Attachment v_Attachment:
            writer.WritePropertyName("patternAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("patternCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Coding v_Coding:
            writer.WritePropertyName("patternCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case ContactPoint v_ContactPoint:
            writer.WritePropertyName("patternContactPoint");
            v_ContactPoint.SerializeJson(writer, options);
            break;
          case Count v_Count:
            writer.WritePropertyName("patternCount");
            v_Count.SerializeJson(writer, options);
            break;
          case Distance v_Distance:
            writer.WritePropertyName("patternDistance");
            v_Distance.SerializeJson(writer, options);
            break;
          case Duration v_Duration:
            writer.WritePropertyName("patternDuration");
            v_Duration.SerializeJson(writer, options);
            break;
          case HumanName v_HumanName:
            writer.WritePropertyName("patternHumanName");
            v_HumanName.SerializeJson(writer, options);
            break;
          case Identifier v_Identifier:
            writer.WritePropertyName("patternIdentifier");
            v_Identifier.SerializeJson(writer, options);
            break;
          case Money v_Money:
            writer.WritePropertyName("patternMoney");
            v_Money.SerializeJson(writer, options);
            break;
          case Period v_Period:
            writer.WritePropertyName("patternPeriod");
            v_Period.SerializeJson(writer, options);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("patternQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Range v_Range:
            writer.WritePropertyName("patternRange");
            v_Range.SerializeJson(writer, options);
            break;
          case Ratio v_Ratio:
            writer.WritePropertyName("patternRatio");
            v_Ratio.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("patternReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
          case SampledData v_SampledData:
            writer.WritePropertyName("patternSampledData");
            v_SampledData.SerializeJson(writer, options);
            break;
          case Signature v_Signature:
            writer.WritePropertyName("patternSignature");
            v_Signature.SerializeJson(writer, options);
            break;
          case Timing v_Timing:
            writer.WritePropertyName("patternTiming");
            v_Timing.SerializeJson(writer, options);
            break;
          case ContactDetail v_ContactDetail:
            writer.WritePropertyName("patternContactDetail");
            v_ContactDetail.SerializeJson(writer, options);
            break;
          case Contributor v_Contributor:
            writer.WritePropertyName("patternContributor");
            v_Contributor.SerializeJson(writer, options);
            break;
          case DataRequirement v_DataRequirement:
            writer.WritePropertyName("patternDataRequirement");
            v_DataRequirement.SerializeJson(writer, options);
            break;
          case Expression v_Expression:
            writer.WritePropertyName("patternExpression");
            v_Expression.SerializeJson(writer, options);
            break;
          case ParameterDefinition v_ParameterDefinition:
            writer.WritePropertyName("patternParameterDefinition");
            v_ParameterDefinition.SerializeJson(writer, options);
            break;
          case RelatedArtifact v_RelatedArtifact:
            writer.WritePropertyName("patternRelatedArtifact");
            v_RelatedArtifact.SerializeJson(writer, options);
            break;
          case TriggerDefinition v_TriggerDefinition:
            writer.WritePropertyName("patternTriggerDefinition");
            v_TriggerDefinition.SerializeJson(writer, options);
            break;
          case UsageContext v_UsageContext:
            writer.WritePropertyName("patternUsageContext");
            v_UsageContext.SerializeJson(writer, options);
            break;
          case Dosage v_Dosage:
            writer.WritePropertyName("patternDosage");
            v_Dosage.SerializeJson(writer, options);
            break;
          case Meta v_Meta:
            writer.WritePropertyName("patternMeta");
            v_Meta.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.Example != null) && (current.Example.Count != 0))
      {
        writer.WritePropertyName("example");
        writer.WriteStartArray();
        foreach (ElementDefinition.ExampleComponent val in current.Example)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.MinValue != null)
      {
        switch (current.MinValue)
        {
          case Date v_Date:
            writer.WriteString("minValueDate",v_Date.Value);
            break;
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("minValueDateTime",v_FhirDateTime.Value);
            break;
          case Instant v_Instant:
            writer.WriteString("minValueInstant",((DateTimeOffset)v_Instant.Value).ToString("yyyy-MM-dd'T'HH:mm:ss.FFFFFFFK", System.Globalization.CultureInfo.InvariantCulture));
            break;
          case Time v_Time:
            writer.WritePropertyName("minValueTime");
            v_Time.SerializeJson(writer, options);
            break;
          case FhirDecimal v_FhirDecimal:
            writer.WriteNumber("minValueDecimal",(decimal)v_FhirDecimal.Value);
            break;
          case Integer v_Integer:
            writer.WriteNumber("minValueInteger",(int)v_Integer.Value);
            break;
          case PositiveInt v_PositiveInt:
            writer.WriteNumber("minValuePositiveInt",(int)v_PositiveInt.Value);
            break;
          case UnsignedInt v_UnsignedInt:
            writer.WriteNumber("minValueUnsignedInt",(int)v_UnsignedInt.Value);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("minValueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
        }
      }
      if (current.MaxValue != null)
      {
        switch (current.MaxValue)
        {
          case Date v_Date:
            writer.WriteString("maxValueDate",v_Date.Value);
            break;
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("maxValueDateTime",v_FhirDateTime.Value);
            break;
          case Instant v_Instant:
            writer.WriteString("maxValueInstant",((DateTimeOffset)v_Instant.Value).ToString("yyyy-MM-dd'T'HH:mm:ss.FFFFFFFK", System.Globalization.CultureInfo.InvariantCulture));
            break;
          case Time v_Time:
            writer.WritePropertyName("maxValueTime");
            v_Time.SerializeJson(writer, options);
            break;
          case FhirDecimal v_FhirDecimal:
            writer.WriteNumber("maxValueDecimal",(decimal)v_FhirDecimal.Value);
            break;
          case Integer v_Integer:
            writer.WriteNumber("maxValueInteger",(int)v_Integer.Value);
            break;
          case PositiveInt v_PositiveInt:
            writer.WriteNumber("maxValuePositiveInt",(int)v_PositiveInt.Value);
            break;
          case UnsignedInt v_UnsignedInt:
            writer.WriteNumber("maxValueUnsignedInt",(int)v_UnsignedInt.Value);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("maxValueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.MaxLengthElement != null) && (current.MaxLengthElement.Value != null))
      {
        writer.WriteNumber("maxLength",(int)current.MaxLengthElement.Value);
      }

      if ((current.ConditionElement != null) && (current.ConditionElement.Count != 0))
      {
        writer.WritePropertyName("condition");
        writer.WriteStartArray();
        foreach (Id val in current.ConditionElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.Constraint != null) && (current.Constraint.Count != 0))
      {
        writer.WritePropertyName("constraint");
        writer.WriteStartArray();
        foreach (ElementDefinition.ConstraintComponent val in current.Constraint)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.MustSupportElement != null) && (current.MustSupportElement.Value != null))
      {
        writer.WriteBoolean("mustSupport",(bool)current.MustSupportElement.Value);
      }

      if ((current.IsModifierElement != null) && (current.IsModifierElement.Value != null))
      {
        writer.WriteBoolean("isModifier",(bool)current.IsModifierElement.Value);
      }

      if ((current.IsModifierReasonElement != null) && (current.IsModifierReasonElement.Value != null))
      {
        writer.WriteString("isModifierReason",current.IsModifierReasonElement.Value);
      }

      if ((current.IsSummaryElement != null) && (current.IsSummaryElement.Value != null))
      {
        writer.WriteBoolean("isSummary",(bool)current.IsSummaryElement.Value);
      }

      if (current.Binding != null)
      {
        writer.WritePropertyName("binding");
        current.Binding.SerializeJson(writer, options);
      }

      if ((current.Mapping != null) && (current.Mapping.Count != 0))
      {
        writer.WritePropertyName("mapping");
        writer.WriteStartArray();
        foreach (ElementDefinition.MappingComponent val in current.Mapping)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition
    /// </summary>
    public static void DeserializeJson(this ElementDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition
    /// </summary>
    public static void DeserializeJsonProperty(this ElementDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "path":
          current.PathElement = new FhirString(reader.GetString());

          break;

        case "representation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.RepresentationElement = new List<Code<Hl7.Fhir.Model.ElementDefinition.PropertyRepresentation>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.RepresentationElement.Add(new Code<Hl7.Fhir.Model.ElementDefinition.PropertyRepresentation>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ElementDefinition.PropertyRepresentation>(reader.GetString())));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.RepresentationElement.Count == 0)
          {
            current.RepresentationElement = null;
          }

          break;

        case "sliceName":
          current.SliceNameElement = new FhirString(reader.GetString());

          break;

        case "sliceIsConstraining":
          current.SliceIsConstrainingElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "label":
          current.LabelElement = new FhirString(reader.GetString());

          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Code = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Code.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Coding>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Code.Count == 0)
          {
            current.Code = null;
          }

          break;

        case "slicing":
          current.Slicing = JsonSerializer.Deserialize<Hl7.Fhir.Model.ElementDefinition.SlicingComponent>(ref reader, options);

          break;

        case "short":
          current.ShortElement = new FhirString(reader.GetString());

          break;

        case "definition":
          current.Definition = new Markdown(reader.GetString());

          break;

        case "comment":
          current.Comment = new Markdown(reader.GetString());

          break;

        case "requirements":
          current.Requirements = new Markdown(reader.GetString());

          break;

        case "alias":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.AliasElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.AliasElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.AliasElement.Count == 0)
          {
            current.AliasElement = null;
          }

          break;

        case "min":
          current.MinElement = new UnsignedInt(reader.GetInt32());

          break;

        case "max":
          current.MaxElement = new FhirString(reader.GetString());

          break;

        case "base":
          current.Base = JsonSerializer.Deserialize<Hl7.Fhir.Model.ElementDefinition.BaseComponent>(ref reader, options);

          break;

        case "contentReference":
          current.ContentReferenceElement = new FhirUri(reader.GetString());

          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Type = new List<ElementDefinition.TypeRefComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Type.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ElementDefinition.TypeRefComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }

          break;

        case "defaultValueBase64Binary":
          current.DefaultValue = new Base64Binary(reader.GetBytesFromBase64());
          break;

        case "defaultValueBoolean":
          current.DefaultValue = new FhirBoolean(reader.GetBoolean());
          break;

        case "defaultValueCanonical":
          current.DefaultValue = new Canonical(reader.GetString());
          break;

        case "defaultValueCode":
          current.DefaultValue = new Code(reader.GetString());
          break;

        case "defaultValueDate":
          current.DefaultValue = new Date(reader.GetString());
          break;

        case "defaultValueDateTime":
          current.DefaultValue = new FhirDateTime(reader.GetString());
          break;

        case "defaultValueDecimal":
          current.DefaultValue = new FhirDecimal(reader.GetDecimal());
          break;

        case "defaultValueId":
          current.DefaultValue = new Id(reader.GetString());
          break;

        case "defaultValueInstant":
          current.DefaultValue = new Instant(DateTimeOffset.Parse(reader.GetString()));
          break;

        case "defaultValueInteger":
          current.DefaultValue = new Integer(reader.GetInt32());
          break;

        case "defaultValueMarkdown":
          current.DefaultValue = new Markdown(reader.GetString());
          break;

        case "defaultValueOid":
          current.DefaultValue = new Oid(reader.GetString());
          break;

        case "defaultValuePositiveInt":
          current.DefaultValue = new PositiveInt(reader.GetInt32());
          break;

        case "defaultValueString":
          current.DefaultValue = new FhirString(reader.GetString());
          break;

        case "defaultValueTime":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Time>(ref reader, options);
          break;

        case "defaultValueUnsignedInt":
          current.DefaultValue = new UnsignedInt(reader.GetInt32());
          break;

        case "defaultValueUri":
          current.DefaultValue = new FhirUri(reader.GetString());
          break;

        case "defaultValueUrl":
          current.DefaultValue = new FhirUrl(reader.GetString());
          break;

        case "defaultValueUuid":
          current.DefaultValue = new Uuid(reader.GetString());
          break;

        case "defaultValueAddress":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Address>(ref reader, options);
          break;

        case "defaultValueAge":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Age>(ref reader, options);
          break;

        case "defaultValueAnnotation":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Annotation>(ref reader, options);
          break;

        case "defaultValueAttachment":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Attachment>(ref reader, options);
          break;

        case "defaultValueCodeableConcept":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "defaultValueCoding":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Coding>(ref reader, options);
          break;

        case "defaultValueContactPoint":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactPoint>(ref reader, options);
          break;

        case "defaultValueCount":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Count>(ref reader, options);
          break;

        case "defaultValueDistance":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Distance>(ref reader, options);
          break;

        case "defaultValueDuration":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Duration>(ref reader, options);
          break;

        case "defaultValueHumanName":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.HumanName>(ref reader, options);
          break;

        case "defaultValueIdentifier":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options);
          break;

        case "defaultValueMoney":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);
          break;

        case "defaultValuePeriod":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);
          break;

        case "defaultValueQuantity":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "defaultValueRange":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Range>(ref reader, options);
          break;

        case "defaultValueRatio":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Ratio>(ref reader, options);
          break;

        case "defaultValueReference":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "defaultValueSampledData":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.SampledData>(ref reader, options);
          break;

        case "defaultValueSignature":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Signature>(ref reader, options);
          break;

        case "defaultValueTiming":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Timing>(ref reader, options);
          break;

        case "defaultValueContactDetail":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options);
          break;

        case "defaultValueContributor":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Contributor>(ref reader, options);
          break;

        case "defaultValueDataRequirement":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.DataRequirement>(ref reader, options);
          break;

        case "defaultValueExpression":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Expression>(ref reader, options);
          break;

        case "defaultValueParameterDefinition":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.ParameterDefinition>(ref reader, options);
          break;

        case "defaultValueRelatedArtifact":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.RelatedArtifact>(ref reader, options);
          break;

        case "defaultValueTriggerDefinition":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.TriggerDefinition>(ref reader, options);
          break;

        case "defaultValueUsageContext":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.UsageContext>(ref reader, options);
          break;

        case "defaultValueDosage":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Dosage>(ref reader, options);
          break;

        case "defaultValueMeta":
          current.DefaultValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Meta>(ref reader, options);
          break;

        case "meaningWhenMissing":
          current.MeaningWhenMissing = new Markdown(reader.GetString());

          break;

        case "orderMeaning":
          current.OrderMeaningElement = new FhirString(reader.GetString());

          break;

        case "fixedBase64Binary":
          current.Fixed = new Base64Binary(reader.GetBytesFromBase64());
          break;

        case "fixedBoolean":
          current.Fixed = new FhirBoolean(reader.GetBoolean());
          break;

        case "fixedCanonical":
          current.Fixed = new Canonical(reader.GetString());
          break;

        case "fixedCode":
          current.Fixed = new Code(reader.GetString());
          break;

        case "fixedDate":
          current.Fixed = new Date(reader.GetString());
          break;

        case "fixedDateTime":
          current.Fixed = new FhirDateTime(reader.GetString());
          break;

        case "fixedDecimal":
          current.Fixed = new FhirDecimal(reader.GetDecimal());
          break;

        case "fixedId":
          current.Fixed = new Id(reader.GetString());
          break;

        case "fixedInstant":
          current.Fixed = new Instant(DateTimeOffset.Parse(reader.GetString()));
          break;

        case "fixedInteger":
          current.Fixed = new Integer(reader.GetInt32());
          break;

        case "fixedMarkdown":
          current.Fixed = new Markdown(reader.GetString());
          break;

        case "fixedOid":
          current.Fixed = new Oid(reader.GetString());
          break;

        case "fixedPositiveInt":
          current.Fixed = new PositiveInt(reader.GetInt32());
          break;

        case "fixedString":
          current.Fixed = new FhirString(reader.GetString());
          break;

        case "fixedTime":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Time>(ref reader, options);
          break;

        case "fixedUnsignedInt":
          current.Fixed = new UnsignedInt(reader.GetInt32());
          break;

        case "fixedUri":
          current.Fixed = new FhirUri(reader.GetString());
          break;

        case "fixedUrl":
          current.Fixed = new FhirUrl(reader.GetString());
          break;

        case "fixedUuid":
          current.Fixed = new Uuid(reader.GetString());
          break;

        case "fixedAddress":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Address>(ref reader, options);
          break;

        case "fixedAge":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Age>(ref reader, options);
          break;

        case "fixedAnnotation":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Annotation>(ref reader, options);
          break;

        case "fixedAttachment":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Attachment>(ref reader, options);
          break;

        case "fixedCodeableConcept":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "fixedCoding":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Coding>(ref reader, options);
          break;

        case "fixedContactPoint":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactPoint>(ref reader, options);
          break;

        case "fixedCount":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Count>(ref reader, options);
          break;

        case "fixedDistance":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Distance>(ref reader, options);
          break;

        case "fixedDuration":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Duration>(ref reader, options);
          break;

        case "fixedHumanName":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.HumanName>(ref reader, options);
          break;

        case "fixedIdentifier":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options);
          break;

        case "fixedMoney":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);
          break;

        case "fixedPeriod":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);
          break;

        case "fixedQuantity":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "fixedRange":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Range>(ref reader, options);
          break;

        case "fixedRatio":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Ratio>(ref reader, options);
          break;

        case "fixedReference":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "fixedSampledData":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.SampledData>(ref reader, options);
          break;

        case "fixedSignature":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Signature>(ref reader, options);
          break;

        case "fixedTiming":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Timing>(ref reader, options);
          break;

        case "fixedContactDetail":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options);
          break;

        case "fixedContributor":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Contributor>(ref reader, options);
          break;

        case "fixedDataRequirement":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.DataRequirement>(ref reader, options);
          break;

        case "fixedExpression":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Expression>(ref reader, options);
          break;

        case "fixedParameterDefinition":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.ParameterDefinition>(ref reader, options);
          break;

        case "fixedRelatedArtifact":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.RelatedArtifact>(ref reader, options);
          break;

        case "fixedTriggerDefinition":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.TriggerDefinition>(ref reader, options);
          break;

        case "fixedUsageContext":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.UsageContext>(ref reader, options);
          break;

        case "fixedDosage":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Dosage>(ref reader, options);
          break;

        case "fixedMeta":
          current.Fixed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Meta>(ref reader, options);
          break;

        case "patternBase64Binary":
          current.Pattern = new Base64Binary(reader.GetBytesFromBase64());
          break;

        case "patternBoolean":
          current.Pattern = new FhirBoolean(reader.GetBoolean());
          break;

        case "patternCanonical":
          current.Pattern = new Canonical(reader.GetString());
          break;

        case "patternCode":
          current.Pattern = new Code(reader.GetString());
          break;

        case "patternDate":
          current.Pattern = new Date(reader.GetString());
          break;

        case "patternDateTime":
          current.Pattern = new FhirDateTime(reader.GetString());
          break;

        case "patternDecimal":
          current.Pattern = new FhirDecimal(reader.GetDecimal());
          break;

        case "patternId":
          current.Pattern = new Id(reader.GetString());
          break;

        case "patternInstant":
          current.Pattern = new Instant(DateTimeOffset.Parse(reader.GetString()));
          break;

        case "patternInteger":
          current.Pattern = new Integer(reader.GetInt32());
          break;

        case "patternMarkdown":
          current.Pattern = new Markdown(reader.GetString());
          break;

        case "patternOid":
          current.Pattern = new Oid(reader.GetString());
          break;

        case "patternPositiveInt":
          current.Pattern = new PositiveInt(reader.GetInt32());
          break;

        case "patternString":
          current.Pattern = new FhirString(reader.GetString());
          break;

        case "patternTime":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Time>(ref reader, options);
          break;

        case "patternUnsignedInt":
          current.Pattern = new UnsignedInt(reader.GetInt32());
          break;

        case "patternUri":
          current.Pattern = new FhirUri(reader.GetString());
          break;

        case "patternUrl":
          current.Pattern = new FhirUrl(reader.GetString());
          break;

        case "patternUuid":
          current.Pattern = new Uuid(reader.GetString());
          break;

        case "patternAddress":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Address>(ref reader, options);
          break;

        case "patternAge":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Age>(ref reader, options);
          break;

        case "patternAnnotation":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Annotation>(ref reader, options);
          break;

        case "patternAttachment":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Attachment>(ref reader, options);
          break;

        case "patternCodeableConcept":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "patternCoding":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Coding>(ref reader, options);
          break;

        case "patternContactPoint":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactPoint>(ref reader, options);
          break;

        case "patternCount":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Count>(ref reader, options);
          break;

        case "patternDistance":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Distance>(ref reader, options);
          break;

        case "patternDuration":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Duration>(ref reader, options);
          break;

        case "patternHumanName":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.HumanName>(ref reader, options);
          break;

        case "patternIdentifier":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options);
          break;

        case "patternMoney":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);
          break;

        case "patternPeriod":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);
          break;

        case "patternQuantity":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "patternRange":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Range>(ref reader, options);
          break;

        case "patternRatio":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Ratio>(ref reader, options);
          break;

        case "patternReference":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "patternSampledData":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.SampledData>(ref reader, options);
          break;

        case "patternSignature":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Signature>(ref reader, options);
          break;

        case "patternTiming":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Timing>(ref reader, options);
          break;

        case "patternContactDetail":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options);
          break;

        case "patternContributor":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Contributor>(ref reader, options);
          break;

        case "patternDataRequirement":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.DataRequirement>(ref reader, options);
          break;

        case "patternExpression":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Expression>(ref reader, options);
          break;

        case "patternParameterDefinition":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.ParameterDefinition>(ref reader, options);
          break;

        case "patternRelatedArtifact":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.RelatedArtifact>(ref reader, options);
          break;

        case "patternTriggerDefinition":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.TriggerDefinition>(ref reader, options);
          break;

        case "patternUsageContext":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.UsageContext>(ref reader, options);
          break;

        case "patternDosage":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Dosage>(ref reader, options);
          break;

        case "patternMeta":
          current.Pattern = JsonSerializer.Deserialize<Hl7.Fhir.Model.Meta>(ref reader, options);
          break;

        case "example":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Example = new List<ElementDefinition.ExampleComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Example.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ElementDefinition.ExampleComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Example.Count == 0)
          {
            current.Example = null;
          }

          break;

        case "minValueDate":
          current.MinValue = new Date(reader.GetString());
          break;

        case "minValueDateTime":
          current.MinValue = new FhirDateTime(reader.GetString());
          break;

        case "minValueInstant":
          current.MinValue = new Instant(DateTimeOffset.Parse(reader.GetString()));
          break;

        case "minValueTime":
          current.MinValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Time>(ref reader, options);
          break;

        case "minValueDecimal":
          current.MinValue = new FhirDecimal(reader.GetDecimal());
          break;

        case "minValueInteger":
          current.MinValue = new Integer(reader.GetInt32());
          break;

        case "minValuePositiveInt":
          current.MinValue = new PositiveInt(reader.GetInt32());
          break;

        case "minValueUnsignedInt":
          current.MinValue = new UnsignedInt(reader.GetInt32());
          break;

        case "minValueQuantity":
          current.MinValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "maxValueDate":
          current.MaxValue = new Date(reader.GetString());
          break;

        case "maxValueDateTime":
          current.MaxValue = new FhirDateTime(reader.GetString());
          break;

        case "maxValueInstant":
          current.MaxValue = new Instant(DateTimeOffset.Parse(reader.GetString()));
          break;

        case "maxValueTime":
          current.MaxValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Time>(ref reader, options);
          break;

        case "maxValueDecimal":
          current.MaxValue = new FhirDecimal(reader.GetDecimal());
          break;

        case "maxValueInteger":
          current.MaxValue = new Integer(reader.GetInt32());
          break;

        case "maxValuePositiveInt":
          current.MaxValue = new PositiveInt(reader.GetInt32());
          break;

        case "maxValueUnsignedInt":
          current.MaxValue = new UnsignedInt(reader.GetInt32());
          break;

        case "maxValueQuantity":
          current.MaxValue = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "maxLength":
          current.MaxLengthElement = new Integer(reader.GetInt32());

          break;

        case "condition":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ConditionElement = new List<Id>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ConditionElement.Add(new Id(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ConditionElement.Count == 0)
          {
            current.ConditionElement = null;
          }

          break;

        case "constraint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Constraint = new List<ElementDefinition.ConstraintComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Constraint.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ElementDefinition.ConstraintComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Constraint.Count == 0)
          {
            current.Constraint = null;
          }

          break;

        case "mustSupport":
          current.MustSupportElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "isModifier":
          current.IsModifierElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "isModifierReason":
          current.IsModifierReasonElement = new FhirString(reader.GetString());

          break;

        case "isSummary":
          current.IsSummaryElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "binding":
          current.Binding = JsonSerializer.Deserialize<Hl7.Fhir.Model.ElementDefinition.ElementDefinitionBindingComponent>(ref reader, options);

          break;

        case "mapping":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Mapping = new List<ElementDefinition.MappingComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Mapping.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ElementDefinition.MappingComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Mapping.Count == 0)
          {
            current.Mapping = null;
          }

          break;

        // Complex: ElementDefinition, Export: ElementDefinition, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneType)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ElementDefinition#Slicing into JSON
    /// </summary>
    public static void SerializeJson(this ElementDefinition.SlicingComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      if ((current.Discriminator != null) && (current.Discriminator.Count != 0))
      {
        writer.WritePropertyName("discriminator");
        writer.WriteStartArray();
        foreach (ElementDefinition.DiscriminatorComponent val in current.Discriminator)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.DescriptionElement != null) && (current.DescriptionElement.Value != null))
      {
        writer.WriteString("description",current.DescriptionElement.Value);
      }

      if ((current.OrderedElement != null) && (current.OrderedElement.Value != null))
      {
        writer.WriteBoolean("ordered",(bool)current.OrderedElement.Value);
      }

      writer.WriteString("rules",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.RulesElement.Value));

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#Slicing
    /// </summary>
    public static void DeserializeJson(this ElementDefinition.SlicingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#Slicing
    /// </summary>
    public static void DeserializeJsonProperty(this ElementDefinition.SlicingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "discriminator":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Discriminator = new List<ElementDefinition.DiscriminatorComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Discriminator.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ElementDefinition.DiscriminatorComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Discriminator.Count == 0)
          {
            current.Discriminator = null;
          }

          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());

          break;

        case "ordered":
          current.OrderedElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "rules":
          current.RulesElement =new Code<Hl7.Fhir.Model.ElementDefinition.SlicingRules>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ElementDefinition.SlicingRules>(reader.GetString()));

          break;

      }
    }

    /// <summary>
    /// Serialize a FHIR ElementDefinition#Discriminator into JSON
    /// </summary>
    public static void SerializeJson(this ElementDefinition.DiscriminatorComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      writer.WriteString("path",current.PathElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#Discriminator
    /// </summary>
    public static void DeserializeJson(this ElementDefinition.DiscriminatorComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#Discriminator
    /// </summary>
    public static void DeserializeJsonProperty(this ElementDefinition.DiscriminatorComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.ElementDefinition.DiscriminatorType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ElementDefinition.DiscriminatorType>(reader.GetString()));

          break;

        case "path":
          current.PathElement = new FhirString(reader.GetString());

          break;

      }
    }

    /// <summary>
    /// Serialize a FHIR ElementDefinition#Base into JSON
    /// </summary>
    public static void SerializeJson(this ElementDefinition.BaseComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("path",current.PathElement.Value);

      writer.WriteNumber("min",(int)current.MinElement.Value);

      writer.WriteString("max",current.MaxElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#Base
    /// </summary>
    public static void DeserializeJson(this ElementDefinition.BaseComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#Base
    /// </summary>
    public static void DeserializeJsonProperty(this ElementDefinition.BaseComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "path":
          current.PathElement = new FhirString(reader.GetString());

          break;

        case "min":
          current.MinElement = new UnsignedInt(reader.GetInt32());

          break;

        case "max":
          current.MaxElement = new FhirString(reader.GetString());

          break;

      }
    }

    /// <summary>
    /// Serialize a FHIR ElementDefinition#TypeRef into JSON
    /// </summary>
    public static void SerializeJson(this ElementDefinition.TypeRefComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("code",current.CodeElement.Value);

      if ((current.ProfileElement != null) && (current.ProfileElement.Count != 0))
      {
        writer.WritePropertyName("profile");
        writer.WriteStartArray();
        foreach (Canonical val in current.ProfileElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.TargetProfileElement != null) && (current.TargetProfileElement.Count != 0))
      {
        writer.WritePropertyName("targetProfile");
        writer.WriteStartArray();
        foreach (Canonical val in current.TargetProfileElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.AggregationElement != null) && (current.AggregationElement.Count != 0))
      {
        writer.WritePropertyName("aggregation");
        writer.WriteStartArray();
        foreach (Code<Hl7.Fhir.Model.ElementDefinition.AggregationMode> val in current.AggregationElement)
        {
          writer.WriteStringValue(Hl7.Fhir.Utility.EnumUtility.GetLiteral(val.Value));
        }
        writer.WriteEndArray();
      }

      if (current.VersioningElement != null)
      {
        writer.WriteString("versioning",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.VersioningElement.Value));
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#TypeRef
    /// </summary>
    public static void DeserializeJson(this ElementDefinition.TypeRefComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#TypeRef
    /// </summary>
    public static void DeserializeJsonProperty(this ElementDefinition.TypeRefComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.CodeElement = new FhirUri(reader.GetString());

          break;

        case "profile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProfileElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ProfileElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ProfileElement.Count == 0)
          {
            current.ProfileElement = null;
          }

          break;

        case "targetProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.TargetProfileElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.TargetProfileElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.TargetProfileElement.Count == 0)
          {
            current.TargetProfileElement = null;
          }

          break;

        case "aggregation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.AggregationElement = new List<Code<Hl7.Fhir.Model.ElementDefinition.AggregationMode>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.AggregationElement.Add(new Code<Hl7.Fhir.Model.ElementDefinition.AggregationMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ElementDefinition.AggregationMode>(reader.GetString())));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.AggregationElement.Count == 0)
          {
            current.AggregationElement = null;
          }

          break;

        case "versioning":
          current.VersioningElement =new Code<Hl7.Fhir.Model.ElementDefinition.ReferenceVersionRules>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ElementDefinition.ReferenceVersionRules>(reader.GetString()));

          break;

      }
    }

    /// <summary>
    /// Serialize a FHIR ElementDefinition#Example into JSON
    /// </summary>
    public static void SerializeJson(this ElementDefinition.ExampleComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("label",current.LabelElement.Value);

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case Base64Binary v_Base64Binary:
            writer.WriteBase64String("valueBase64Binary", (byte[])v_Base64Binary.Value);
            break;
          case FhirBoolean v_FhirBoolean:
            writer.WriteBoolean("valueBoolean", (bool)v_FhirBoolean.Value);
            break;
          case Canonical v_Canonical:
            writer.WriteString("valueCanonical",v_Canonical.Value);
            break;
          case Code v_Code:
            writer.WriteString("valueCode",v_Code.Value);
            break;
          case Date v_Date:
            writer.WriteString("valueDate",v_Date.Value);
            break;
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("valueDateTime",v_FhirDateTime.Value);
            break;
          case FhirDecimal v_FhirDecimal:
            writer.WriteNumber("valueDecimal",(decimal)v_FhirDecimal.Value);
            break;
          case Id v_Id:
            writer.WriteString("valueId",v_Id.Value);
            break;
          case Instant v_Instant:
            writer.WriteString("valueInstant",((DateTimeOffset)v_Instant.Value).ToString("yyyy-MM-dd'T'HH:mm:ss.FFFFFFFK", System.Globalization.CultureInfo.InvariantCulture));
            break;
          case Integer v_Integer:
            writer.WriteNumber("valueInteger",(int)v_Integer.Value);
            break;
          case Markdown v_Markdown:
            writer.WriteString("valueMarkdown",v_Markdown.Value);
            break;
          case Oid v_Oid:
            writer.WriteString("valueOid",v_Oid.Value);
            break;
          case PositiveInt v_PositiveInt:
            writer.WriteNumber("valuePositiveInt",(int)v_PositiveInt.Value);
            break;
          case FhirString v_FhirString:
            writer.WriteString("valueString",v_FhirString.Value);
            break;
          case Time v_Time:
            writer.WritePropertyName("valueTime");
            v_Time.SerializeJson(writer, options);
            break;
          case UnsignedInt v_UnsignedInt:
            writer.WriteNumber("valueUnsignedInt",(int)v_UnsignedInt.Value);
            break;
          case FhirUri v_FhirUri:
            writer.WriteString("valueUri",v_FhirUri.Value);
            break;
          case FhirUrl v_FhirUrl:
            writer.WriteString("valueUrl",v_FhirUrl.Value);
            break;
          case Uuid v_Uuid:
            writer.WriteString("valueUuid",v_Uuid.Value);
            break;
          case Address v_Address:
            writer.WritePropertyName("valueAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case Age v_Age:
            writer.WritePropertyName("valueAge");
            v_Age.SerializeJson(writer, options);
            break;
          case Annotation v_Annotation:
            writer.WritePropertyName("valueAnnotation");
            v_Annotation.SerializeJson(writer, options);
            break;
          case Attachment v_Attachment:
            writer.WritePropertyName("valueAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("valueCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Coding v_Coding:
            writer.WritePropertyName("valueCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case ContactPoint v_ContactPoint:
            writer.WritePropertyName("valueContactPoint");
            v_ContactPoint.SerializeJson(writer, options);
            break;
          case Count v_Count:
            writer.WritePropertyName("valueCount");
            v_Count.SerializeJson(writer, options);
            break;
          case Distance v_Distance:
            writer.WritePropertyName("valueDistance");
            v_Distance.SerializeJson(writer, options);
            break;
          case Duration v_Duration:
            writer.WritePropertyName("valueDuration");
            v_Duration.SerializeJson(writer, options);
            break;
          case HumanName v_HumanName:
            writer.WritePropertyName("valueHumanName");
            v_HumanName.SerializeJson(writer, options);
            break;
          case Identifier v_Identifier:
            writer.WritePropertyName("valueIdentifier");
            v_Identifier.SerializeJson(writer, options);
            break;
          case Money v_Money:
            writer.WritePropertyName("valueMoney");
            v_Money.SerializeJson(writer, options);
            break;
          case Period v_Period:
            writer.WritePropertyName("valuePeriod");
            v_Period.SerializeJson(writer, options);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("valueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Range v_Range:
            writer.WritePropertyName("valueRange");
            v_Range.SerializeJson(writer, options);
            break;
          case Ratio v_Ratio:
            writer.WritePropertyName("valueRatio");
            v_Ratio.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("valueReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
          case SampledData v_SampledData:
            writer.WritePropertyName("valueSampledData");
            v_SampledData.SerializeJson(writer, options);
            break;
          case Signature v_Signature:
            writer.WritePropertyName("valueSignature");
            v_Signature.SerializeJson(writer, options);
            break;
          case Timing v_Timing:
            writer.WritePropertyName("valueTiming");
            v_Timing.SerializeJson(writer, options);
            break;
          case ContactDetail v_ContactDetail:
            writer.WritePropertyName("valueContactDetail");
            v_ContactDetail.SerializeJson(writer, options);
            break;
          case Contributor v_Contributor:
            writer.WritePropertyName("valueContributor");
            v_Contributor.SerializeJson(writer, options);
            break;
          case DataRequirement v_DataRequirement:
            writer.WritePropertyName("valueDataRequirement");
            v_DataRequirement.SerializeJson(writer, options);
            break;
          case Expression v_Expression:
            writer.WritePropertyName("valueExpression");
            v_Expression.SerializeJson(writer, options);
            break;
          case ParameterDefinition v_ParameterDefinition:
            writer.WritePropertyName("valueParameterDefinition");
            v_ParameterDefinition.SerializeJson(writer, options);
            break;
          case RelatedArtifact v_RelatedArtifact:
            writer.WritePropertyName("valueRelatedArtifact");
            v_RelatedArtifact.SerializeJson(writer, options);
            break;
          case TriggerDefinition v_TriggerDefinition:
            writer.WritePropertyName("valueTriggerDefinition");
            v_TriggerDefinition.SerializeJson(writer, options);
            break;
          case UsageContext v_UsageContext:
            writer.WritePropertyName("valueUsageContext");
            v_UsageContext.SerializeJson(writer, options);
            break;
          case Dosage v_Dosage:
            writer.WritePropertyName("valueDosage");
            v_Dosage.SerializeJson(writer, options);
            break;
          case Meta v_Meta:
            writer.WritePropertyName("valueMeta");
            v_Meta.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#Example
    /// </summary>
    public static void DeserializeJson(this ElementDefinition.ExampleComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#Example
    /// </summary>
    public static void DeserializeJsonProperty(this ElementDefinition.ExampleComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "label":
          current.LabelElement = new FhirString(reader.GetString());

          break;

        case "valueBase64Binary":
          current.Value = new Base64Binary(reader.GetBytesFromBase64());
          break;

        case "valueBoolean":
          current.Value = new FhirBoolean(reader.GetBoolean());
          break;

        case "valueCanonical":
          current.Value = new Canonical(reader.GetString());
          break;

        case "valueCode":
          current.Value = new Code(reader.GetString());
          break;

        case "valueDate":
          current.Value = new Date(reader.GetString());
          break;

        case "valueDateTime":
          current.Value = new FhirDateTime(reader.GetString());
          break;

        case "valueDecimal":
          current.Value = new FhirDecimal(reader.GetDecimal());
          break;

        case "valueId":
          current.Value = new Id(reader.GetString());
          break;

        case "valueInstant":
          current.Value = new Instant(DateTimeOffset.Parse(reader.GetString()));
          break;

        case "valueInteger":
          current.Value = new Integer(reader.GetInt32());
          break;

        case "valueMarkdown":
          current.Value = new Markdown(reader.GetString());
          break;

        case "valueOid":
          current.Value = new Oid(reader.GetString());
          break;

        case "valuePositiveInt":
          current.Value = new PositiveInt(reader.GetInt32());
          break;

        case "valueString":
          current.Value = new FhirString(reader.GetString());
          break;

        case "valueTime":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Time>(ref reader, options);
          break;

        case "valueUnsignedInt":
          current.Value = new UnsignedInt(reader.GetInt32());
          break;

        case "valueUri":
          current.Value = new FhirUri(reader.GetString());
          break;

        case "valueUrl":
          current.Value = new FhirUrl(reader.GetString());
          break;

        case "valueUuid":
          current.Value = new Uuid(reader.GetString());
          break;

        case "valueAddress":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Address>(ref reader, options);
          break;

        case "valueAge":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Age>(ref reader, options);
          break;

        case "valueAnnotation":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Annotation>(ref reader, options);
          break;

        case "valueAttachment":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Attachment>(ref reader, options);
          break;

        case "valueCodeableConcept":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "valueCoding":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Coding>(ref reader, options);
          break;

        case "valueContactPoint":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactPoint>(ref reader, options);
          break;

        case "valueCount":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Count>(ref reader, options);
          break;

        case "valueDistance":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Distance>(ref reader, options);
          break;

        case "valueDuration":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Duration>(ref reader, options);
          break;

        case "valueHumanName":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.HumanName>(ref reader, options);
          break;

        case "valueIdentifier":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options);
          break;

        case "valueMoney":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);
          break;

        case "valuePeriod":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);
          break;

        case "valueQuantity":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "valueRange":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Range>(ref reader, options);
          break;

        case "valueRatio":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Ratio>(ref reader, options);
          break;

        case "valueReference":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "valueSampledData":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.SampledData>(ref reader, options);
          break;

        case "valueSignature":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Signature>(ref reader, options);
          break;

        case "valueTiming":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Timing>(ref reader, options);
          break;

        case "valueContactDetail":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options);
          break;

        case "valueContributor":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Contributor>(ref reader, options);
          break;

        case "valueDataRequirement":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.DataRequirement>(ref reader, options);
          break;

        case "valueExpression":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Expression>(ref reader, options);
          break;

        case "valueParameterDefinition":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.ParameterDefinition>(ref reader, options);
          break;

        case "valueRelatedArtifact":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.RelatedArtifact>(ref reader, options);
          break;

        case "valueTriggerDefinition":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.TriggerDefinition>(ref reader, options);
          break;

        case "valueUsageContext":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.UsageContext>(ref reader, options);
          break;

        case "valueDosage":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Dosage>(ref reader, options);
          break;

        case "valueMeta":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Meta>(ref reader, options);
          break;

      }
    }

    /// <summary>
    /// Serialize a FHIR ElementDefinition#Constraint into JSON
    /// </summary>
    public static void SerializeJson(this ElementDefinition.ConstraintComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("key",current.KeyElement.Value);

      if ((current.RequirementsElement != null) && (current.RequirementsElement.Value != null))
      {
        writer.WriteString("requirements",current.RequirementsElement.Value);
      }

      writer.WriteString("severity",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.SeverityElement.Value));

      writer.WriteString("human",current.HumanElement.Value);

      if ((current.ExpressionElement != null) && (current.ExpressionElement.Value != null))
      {
        writer.WriteString("expression",current.ExpressionElement.Value);
      }

      if ((current.XpathElement != null) && (current.XpathElement.Value != null))
      {
        writer.WriteString("xpath",current.XpathElement.Value);
      }

      if ((current.SourceElement != null) && (current.SourceElement.Value != null))
      {
        writer.WriteString("source",current.SourceElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#Constraint
    /// </summary>
    public static void DeserializeJson(this ElementDefinition.ConstraintComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#Constraint
    /// </summary>
    public static void DeserializeJsonProperty(this ElementDefinition.ConstraintComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "key":
          current.KeyElement = new Id(reader.GetString());

          break;

        case "requirements":
          current.RequirementsElement = new FhirString(reader.GetString());

          break;

        case "severity":
          current.SeverityElement =new Code<Hl7.Fhir.Model.ElementDefinition.ConstraintSeverity>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ElementDefinition.ConstraintSeverity>(reader.GetString()));

          break;

        case "human":
          current.HumanElement = new FhirString(reader.GetString());

          break;

        case "expression":
          current.ExpressionElement = new FhirString(reader.GetString());

          break;

        case "xpath":
          current.XpathElement = new FhirString(reader.GetString());

          break;

        case "source":
          current.SourceElement = new Canonical(reader.GetString());

          break;

      }
    }

    /// <summary>
    /// Serialize a FHIR ElementDefinition#ElementDefinitionBinding into JSON
    /// </summary>
    public static void SerializeJson(this ElementDefinition.ElementDefinitionBindingComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("strength",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StrengthElement.Value));

      if ((current.DescriptionElement != null) && (current.DescriptionElement.Value != null))
      {
        writer.WriteString("description",current.DescriptionElement.Value);
      }

      if ((current.ValueSetElement != null) && (current.ValueSetElement.Value != null))
      {
        writer.WriteString("valueSet",current.ValueSetElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#ElementDefinitionBinding
    /// </summary>
    public static void DeserializeJson(this ElementDefinition.ElementDefinitionBindingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#ElementDefinitionBinding
    /// </summary>
    public static void DeserializeJsonProperty(this ElementDefinition.ElementDefinitionBindingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "strength":
          current.StrengthElement =new Code<Hl7.Fhir.Model.BindingStrength>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.BindingStrength>(reader.GetString()));

          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());

          break;

        case "valueSet":
          current.ValueSetElement = new Canonical(reader.GetString());

          break;

      }
    }

    /// <summary>
    /// Serialize a FHIR ElementDefinition#Mapping into JSON
    /// </summary>
    public static void SerializeJson(this ElementDefinition.MappingComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("identity",current.IdentityElement.Value);

      if ((current.LanguageElement != null) && (current.LanguageElement.Value != null))
      {
        writer.WriteString("language",current.LanguageElement.Value);
      }

      writer.WriteString("map",current.MapElement.Value);

      if ((current.CommentElement != null) && (current.CommentElement.Value != null))
      {
        writer.WriteString("comment",current.CommentElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#Mapping
    /// </summary>
    public static void DeserializeJson(this ElementDefinition.MappingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ElementDefinition#Mapping
    /// </summary>
    public static void DeserializeJsonProperty(this ElementDefinition.MappingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identity":
          current.IdentityElement = new Id(reader.GetString());

          break;

        case "language":
          current.LanguageElement = new Code(reader.GetString());

          break;

        case "map":
          current.MapElement = new FhirString(reader.GetString());

          break;

        case "comment":
          current.CommentElement = new FhirString(reader.GetString());

          break;

      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ElementDefinitionJsonConverter : JsonConverter<ElementDefinition>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(ElementDefinition).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, ElementDefinition value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override ElementDefinition Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        ElementDefinition target = new ElementDefinition();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
