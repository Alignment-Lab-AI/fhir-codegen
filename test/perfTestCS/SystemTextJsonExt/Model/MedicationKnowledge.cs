// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for MedicationKnowledge
  /// </summary>
  public static class MedicationKnowledgeJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR MedicationKnowledge into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","MedicationKnowledge");
      // Complex: MedicationKnowledge, Export: MedicationKnowledge, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (current.StatusElement != null)
      {
        writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
      }

      if (current.Manufacturer != null)
      {
        writer.WritePropertyName("manufacturer");
        current.Manufacturer.SerializeJson(writer, options);
      }

      if (current.DoseForm != null)
      {
        writer.WritePropertyName("doseForm");
        current.DoseForm.SerializeJson(writer, options);
      }

      if (current.Amount != null)
      {
        writer.WritePropertyName("amount");
        current.Amount.SerializeJson(writer, options);
      }

      if ((current.SynonymElement != null) && (current.SynonymElement.Count != 0))
      {
        writer.WritePropertyName("synonym");
        writer.WriteStartArray();
        foreach (FhirString val in current.SynonymElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.RelatedMedicationKnowledge != null) && (current.RelatedMedicationKnowledge.Count != 0))
      {
        writer.WritePropertyName("relatedMedicationKnowledge");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.RelatedMedicationKnowledgeComponent val in current.RelatedMedicationKnowledge)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.AssociatedMedication != null) && (current.AssociatedMedication.Count != 0))
      {
        writer.WritePropertyName("associatedMedication");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.AssociatedMedication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProductType != null) && (current.ProductType.Count != 0))
      {
        writer.WritePropertyName("productType");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProductType)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Monograph != null) && (current.Monograph.Count != 0))
      {
        writer.WritePropertyName("monograph");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.MonographComponent val in current.Monograph)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Ingredient != null) && (current.Ingredient.Count != 0))
      {
        writer.WritePropertyName("ingredient");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.IngredientComponent val in current.Ingredient)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.PreparationInstruction != null) && (current.PreparationInstruction.Value != null))
      {
        writer.WriteString("preparationInstruction",current.PreparationInstruction.Value);
      }

      if ((current.IntendedRoute != null) && (current.IntendedRoute.Count != 0))
      {
        writer.WritePropertyName("intendedRoute");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.IntendedRoute)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Cost != null) && (current.Cost.Count != 0))
      {
        writer.WritePropertyName("cost");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.CostComponent val in current.Cost)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.MonitoringProgram != null) && (current.MonitoringProgram.Count != 0))
      {
        writer.WritePropertyName("monitoringProgram");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.MonitoringProgramComponent val in current.MonitoringProgram)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.AdministrationGuidelines != null) && (current.AdministrationGuidelines.Count != 0))
      {
        writer.WritePropertyName("administrationGuidelines");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.AdministrationGuidelinesComponent val in current.AdministrationGuidelines)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.MedicineClassification != null) && (current.MedicineClassification.Count != 0))
      {
        writer.WritePropertyName("medicineClassification");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.MedicineClassificationComponent val in current.MedicineClassification)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Packaging != null)
      {
        writer.WritePropertyName("packaging");
        current.Packaging.SerializeJson(writer, options);
      }

      if ((current.DrugCharacteristic != null) && (current.DrugCharacteristic.Count != 0))
      {
        writer.WritePropertyName("drugCharacteristic");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.DrugCharacteristicComponent val in current.DrugCharacteristic)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Contraindication != null) && (current.Contraindication.Count != 0))
      {
        writer.WritePropertyName("contraindication");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Contraindication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Regulatory != null) && (current.Regulatory.Count != 0))
      {
        writer.WritePropertyName("regulatory");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.RegulatoryComponent val in current.Regulatory)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Kinetics != null) && (current.Kinetics.Count != 0))
      {
        writer.WritePropertyName("kinetics");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.KineticsComponent val in current.Kinetics)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.Code = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes>(reader.GetString()));

          break;

        case "manufacturer":
          current.Manufacturer = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "doseForm":
          current.DoseForm = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "amount":
          current.Amount = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);

          break;

        case "synonym":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SynonymElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SynonymElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SynonymElement.Count == 0)
          {
            current.SynonymElement = null;
          }

          break;

        case "relatedMedicationKnowledge":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.RelatedMedicationKnowledge = new List<MedicationKnowledge.RelatedMedicationKnowledgeComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.RelatedMedicationKnowledge.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.RelatedMedicationKnowledgeComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.RelatedMedicationKnowledge.Count == 0)
          {
            current.RelatedMedicationKnowledge = null;
          }

          break;

        case "associatedMedication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.AssociatedMedication = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.AssociatedMedication.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.AssociatedMedication.Count == 0)
          {
            current.AssociatedMedication = null;
          }

          break;

        case "productType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProductType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ProductType.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ProductType.Count == 0)
          {
            current.ProductType = null;
          }

          break;

        case "monograph":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Monograph = new List<MedicationKnowledge.MonographComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Monograph.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.MonographComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Monograph.Count == 0)
          {
            current.Monograph = null;
          }

          break;

        case "ingredient":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Ingredient = new List<MedicationKnowledge.IngredientComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Ingredient.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.IngredientComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Ingredient.Count == 0)
          {
            current.Ingredient = null;
          }

          break;

        case "preparationInstruction":
          current.PreparationInstruction = new Markdown(reader.GetString());

          break;

        case "intendedRoute":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.IntendedRoute = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.IntendedRoute.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.IntendedRoute.Count == 0)
          {
            current.IntendedRoute = null;
          }

          break;

        case "cost":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Cost = new List<MedicationKnowledge.CostComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Cost.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.CostComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Cost.Count == 0)
          {
            current.Cost = null;
          }

          break;

        case "monitoringProgram":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.MonitoringProgram = new List<MedicationKnowledge.MonitoringProgramComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.MonitoringProgram.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.MonitoringProgramComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.MonitoringProgram.Count == 0)
          {
            current.MonitoringProgram = null;
          }

          break;

        case "administrationGuidelines":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.AdministrationGuidelines = new List<MedicationKnowledge.AdministrationGuidelinesComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.AdministrationGuidelines.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.AdministrationGuidelinesComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.AdministrationGuidelines.Count == 0)
          {
            current.AdministrationGuidelines = null;
          }

          break;

        case "medicineClassification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.MedicineClassification = new List<MedicationKnowledge.MedicineClassificationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.MedicineClassification.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.MedicineClassificationComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.MedicineClassification.Count == 0)
          {
            current.MedicineClassification = null;
          }

          break;

        case "packaging":
          current.Packaging = JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent>(ref reader, options);

          break;

        case "drugCharacteristic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.DrugCharacteristic = new List<MedicationKnowledge.DrugCharacteristicComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.DrugCharacteristic.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.DrugCharacteristicComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.DrugCharacteristic.Count == 0)
          {
            current.DrugCharacteristic = null;
          }

          break;

        case "contraindication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contraindication = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Contraindication.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Contraindication.Count == 0)
          {
            current.Contraindication = null;
          }

          break;

        case "regulatory":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Regulatory = new List<MedicationKnowledge.RegulatoryComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Regulatory.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.RegulatoryComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Regulatory.Count == 0)
          {
            current.Regulatory = null;
          }

          break;

        case "kinetics":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Kinetics = new List<MedicationKnowledge.KineticsComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Kinetics.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.KineticsComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Kinetics.Count == 0)
          {
            current.Kinetics = null;
          }

          break;

        // Complex: MedicationKnowledge, Export: MedicationKnowledge, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#RelatedMedicationKnowledge into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.RelatedMedicationKnowledgeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#RelatedMedicationKnowledge, Export: RelatedMedicationKnowledgeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if ((current.Reference != null) && (current.Reference.Count != 0))
      {
        writer.WritePropertyName("reference");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Reference)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#RelatedMedicationKnowledge
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.RelatedMedicationKnowledgeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#RelatedMedicationKnowledge
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.RelatedMedicationKnowledgeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "reference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Reference = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Reference.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Reference.Count == 0)
          {
            current.Reference = null;
          }

          break;

        // Complex: relatedMedicationKnowledge, Export: RelatedMedicationKnowledgeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Monograph into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.MonographComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Monograph, Export: MonographComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Source != null)
      {
        writer.WritePropertyName("source");
        current.Source.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Monograph
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.MonographComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Monograph
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.MonographComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "source":
          current.Source = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        // Complex: monograph, Export: MonographComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Ingredient into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.IngredientComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Ingredient, Export: IngredientComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Item != null)
      {
        switch (current.Item)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("itemCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("itemReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.IsActiveElement != null) && (current.IsActiveElement.Value != null))
      {
        writer.WriteBoolean("isActive",(bool)current.IsActiveElement.Value);
      }

      if (current.Strength != null)
      {
        writer.WritePropertyName("strength");
        current.Strength.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Ingredient
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.IngredientComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Ingredient
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.IngredientComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemCodeableConcept":
          current.Item = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "itemReference":
          current.Item = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "isActive":
          current.IsActiveElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "strength":
          current.Strength = JsonSerializer.Deserialize<Hl7.Fhir.Model.Ratio>(ref reader, options);

          break;

        // Complex: ingredient, Export: IngredientComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Cost into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.CostComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Cost, Export: CostComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if ((current.SourceElement != null) && (current.SourceElement.Value != null))
      {
        writer.WriteString("source",current.SourceElement.Value);
      }

      writer.WritePropertyName("cost");
      current.Cost.SerializeJson(writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Cost
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.CostComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Cost
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.CostComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "source":
          current.SourceElement = new FhirString(reader.GetString());

          break;

        case "cost":
          current.Cost = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        // Complex: cost, Export: CostComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#MonitoringProgram into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.MonitoringProgramComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#MonitoringProgram, Export: MonitoringProgramComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#MonitoringProgram
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.MonitoringProgramComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#MonitoringProgram
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.MonitoringProgramComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        // Complex: monitoringProgram, Export: MonitoringProgramComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#AdministrationGuidelines into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.AdministrationGuidelinesComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#AdministrationGuidelines, Export: AdministrationGuidelinesComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Dosage != null) && (current.Dosage.Count != 0))
      {
        writer.WritePropertyName("dosage");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.DosageComponent val in current.Dosage)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Indication != null)
      {
        switch (current.Indication)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("indicationCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("indicationReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.PatientCharacteristics != null) && (current.PatientCharacteristics.Count != 0))
      {
        writer.WritePropertyName("patientCharacteristics");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.PatientCharacteristicsComponent val in current.PatientCharacteristics)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#AdministrationGuidelines
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.AdministrationGuidelinesComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#AdministrationGuidelines
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.AdministrationGuidelinesComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dosage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Dosage = new List<MedicationKnowledge.DosageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Dosage.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.DosageComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Dosage.Count == 0)
          {
            current.Dosage = null;
          }

          break;

        case "indicationCodeableConcept":
          current.Indication = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "indicationReference":
          current.Indication = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "patientCharacteristics":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PatientCharacteristics = new List<MedicationKnowledge.PatientCharacteristicsComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.PatientCharacteristics.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.PatientCharacteristicsComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.PatientCharacteristics.Count == 0)
          {
            current.PatientCharacteristics = null;
          }

          break;

        // Complex: administrationGuidelines, Export: AdministrationGuidelinesComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Dosage into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.DosageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Dosage, Export: DosageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if ((current.Dosage != null) && (current.Dosage.Count != 0))
      {
        writer.WritePropertyName("dosage");
        writer.WriteStartArray();
        foreach (Dosage val in current.Dosage)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Dosage
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.DosageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Dosage
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.DosageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "dosage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Dosage = new List<Dosage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Dosage.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Dosage>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Dosage.Count == 0)
          {
            current.Dosage = null;
          }

          break;

        // Complex: dosage, Export: DosageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#PatientCharacteristics into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.PatientCharacteristicsComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#PatientCharacteristics, Export: PatientCharacteristicsComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Characteristic != null)
      {
        switch (current.Characteristic)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("characteristicCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("characteristicQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.ValueElement != null) && (current.ValueElement.Count != 0))
      {
        writer.WritePropertyName("value");
        writer.WriteStartArray();
        foreach (FhirString val in current.ValueElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#PatientCharacteristics
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.PatientCharacteristicsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#PatientCharacteristics
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.PatientCharacteristicsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "characteristicCodeableConcept":
          current.Characteristic = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "characteristicQuantity":
          current.Characteristic = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "value":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ValueElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ValueElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ValueElement.Count == 0)
          {
            current.ValueElement = null;
          }

          break;

        // Complex: patientCharacteristics, Export: PatientCharacteristicsComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#MedicineClassification into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.MedicineClassificationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#MedicineClassification, Export: MedicineClassificationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if ((current.Classification != null) && (current.Classification.Count != 0))
      {
        writer.WritePropertyName("classification");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Classification)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#MedicineClassification
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.MedicineClassificationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#MedicineClassification
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.MedicineClassificationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "classification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Classification = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Classification.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Classification.Count == 0)
          {
            current.Classification = null;
          }

          break;

        // Complex: medicineClassification, Export: MedicineClassificationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Packaging into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.PackagingComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Packaging, Export: PackagingComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Packaging
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.PackagingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Packaging
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.PackagingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "quantity":
          current.Quantity = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);

          break;

        // Complex: packaging, Export: PackagingComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#DrugCharacteristic into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.DrugCharacteristicComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#DrugCharacteristic, Export: DrugCharacteristicComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("valueCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case FhirString v_FhirString:
            writer.WriteString("valueString",v_FhirString.Value);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("valueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Base64Binary v_Base64Binary:
            writer.WriteBase64String("valueBase64Binary", (byte[])v_Base64Binary.Value);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#DrugCharacteristic
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.DrugCharacteristicComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#DrugCharacteristic
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.DrugCharacteristicComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "valueCodeableConcept":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "valueString":
          current.Value = new FhirString(reader.GetString());
          break;

        case "valueQuantity":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "valueBase64Binary":
          current.Value = new Base64Binary(reader.GetBytesFromBase64());
          break;

        // Complex: drugCharacteristic, Export: DrugCharacteristicComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Regulatory into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.RegulatoryComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Regulatory, Export: RegulatoryComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("regulatoryAuthority");
      current.RegulatoryAuthority.SerializeJson(writer, options);

      if ((current.Substitution != null) && (current.Substitution.Count != 0))
      {
        writer.WritePropertyName("substitution");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.SubstitutionComponent val in current.Substitution)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Schedule != null) && (current.Schedule.Count != 0))
      {
        writer.WritePropertyName("schedule");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.ScheduleComponent val in current.Schedule)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.MaxDispense != null)
      {
        writer.WritePropertyName("maxDispense");
        current.MaxDispense.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Regulatory
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.RegulatoryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Regulatory
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.RegulatoryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "regulatoryAuthority":
          current.RegulatoryAuthority = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "substitution":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Substitution = new List<MedicationKnowledge.SubstitutionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Substitution.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.SubstitutionComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Substitution.Count == 0)
          {
            current.Substitution = null;
          }

          break;

        case "schedule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Schedule = new List<MedicationKnowledge.ScheduleComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Schedule.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.ScheduleComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Schedule.Count == 0)
          {
            current.Schedule = null;
          }

          break;

        case "maxDispense":
          current.MaxDispense = JsonSerializer.Deserialize<Hl7.Fhir.Model.MedicationKnowledge.MaxDispenseComponent>(ref reader, options);

          break;

        // Complex: regulatory, Export: RegulatoryComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Substitution into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.SubstitutionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Substitution, Export: SubstitutionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      writer.WriteBoolean("allowed",(bool)current.AllowedElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Substitution
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.SubstitutionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Substitution
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.SubstitutionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "allowed":
          current.AllowedElement = new FhirBoolean(reader.GetBoolean());

          break;

        // Complex: substitution, Export: SubstitutionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Schedule into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.ScheduleComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Schedule, Export: ScheduleComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("schedule");
      current.Schedule.SerializeJson(writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Schedule
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.ScheduleComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Schedule
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.ScheduleComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "schedule":
          current.Schedule = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        // Complex: schedule, Export: ScheduleComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#MaxDispense into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.MaxDispenseComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#MaxDispense, Export: MaxDispenseComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("quantity");
      current.Quantity.SerializeJson(writer, options);

      if (current.Period != null)
      {
        writer.WritePropertyName("period");
        current.Period.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#MaxDispense
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.MaxDispenseComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#MaxDispense
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.MaxDispenseComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "quantity":
          current.Quantity = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);

          break;

        case "period":
          current.Period = JsonSerializer.Deserialize<Hl7.Fhir.Model.Duration>(ref reader, options);

          break;

        // Complex: maxDispense, Export: MaxDispenseComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Kinetics into JSON
    /// </summary>
    public static void SerializeJson(this MedicationKnowledge.KineticsComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Kinetics, Export: KineticsComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.AreaUnderCurve != null) && (current.AreaUnderCurve.Count != 0))
      {
        writer.WritePropertyName("areaUnderCurve");
        writer.WriteStartArray();
        foreach (Quantity val in current.AreaUnderCurve)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.LethalDose50 != null) && (current.LethalDose50.Count != 0))
      {
        writer.WritePropertyName("lethalDose50");
        writer.WriteStartArray();
        foreach (Quantity val in current.LethalDose50)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.HalfLifePeriod != null)
      {
        writer.WritePropertyName("halfLifePeriod");
        current.HalfLifePeriod.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Kinetics
    /// </summary>
    public static void DeserializeJson(this MedicationKnowledge.KineticsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Kinetics
    /// </summary>
    public static void DeserializeJsonProperty(this MedicationKnowledge.KineticsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "areaUnderCurve":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.AreaUnderCurve = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.AreaUnderCurve.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.AreaUnderCurve.Count == 0)
          {
            current.AreaUnderCurve = null;
          }

          break;

        case "lethalDose50":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.LethalDose50 = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.LethalDose50.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.LethalDose50.Count == 0)
          {
            current.LethalDose50 = null;
          }

          break;

        case "halfLifePeriod":
          current.HalfLifePeriod = JsonSerializer.Deserialize<Hl7.Fhir.Model.Duration>(ref reader, options);

          break;

        // Complex: kinetics, Export: KineticsComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class MedicationKnowledgeJsonConverter : JsonConverter<MedicationKnowledge>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(MedicationKnowledge).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, MedicationKnowledge value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override MedicationKnowledge Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        MedicationKnowledge target = new MedicationKnowledge();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
