// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for ClaimResponse
  /// </summary>
  public static class ClaimResponseJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR ClaimResponse into JSON
    /// </summary>
    public static void SerializeJson(this ClaimResponse current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ClaimResponse");
      // Complex: ClaimResponse, Export: ClaimResponse, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if (current.SubType != null)
      {
        writer.WritePropertyName("subType");
        current.SubType.SerializeJson(writer, options);
      }

      writer.WriteString("use",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.UseElement.Value));

      writer.WritePropertyName("patient");
      current.Patient.SerializeJson(writer, options);

      writer.WriteString("created",current.CreatedElement.Value);

      writer.WritePropertyName("insurer");
      current.Insurer.SerializeJson(writer, options);

      if (current.Requestor != null)
      {
        writer.WritePropertyName("requestor");
        current.Requestor.SerializeJson(writer, options);
      }

      if (current.Request != null)
      {
        writer.WritePropertyName("request");
        current.Request.SerializeJson(writer, options);
      }

      writer.WriteString("outcome",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.OutcomeElement.Value));

      if (current.DispositionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DispositionElement.Value))
        {
          writer.WriteString("disposition",current.DispositionElement.Value);
        }
        if (current.DispositionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DispositionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_disposition",false,current.DispositionElement.Extension,current.DispositionElement.ElementId);
        }
      }

      if (current.PreAuthRefElement != null)
      {
        if (!string.IsNullOrEmpty(current.PreAuthRefElement.Value))
        {
          writer.WriteString("preAuthRef",current.PreAuthRefElement.Value);
        }
        if (current.PreAuthRefElement.HasExtensions() || (!string.IsNullOrEmpty(current.PreAuthRefElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_preAuthRef",false,current.PreAuthRefElement.Extension,current.PreAuthRefElement.ElementId);
        }
      }

      if (current.PreAuthPeriod != null)
      {
        writer.WritePropertyName("preAuthPeriod");
        current.PreAuthPeriod.SerializeJson(writer, options);
      }

      if (current.PayeeType != null)
      {
        writer.WritePropertyName("payeeType");
        current.PayeeType.SerializeJson(writer, options);
      }

      if ((current.Item != null) && (current.Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();
        foreach (ClaimResponse.ItemComponent val in current.Item)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.AddItem != null) && (current.AddItem.Count != 0))
      {
        writer.WritePropertyName("addItem");
        writer.WriteStartArray();
        foreach (ClaimResponse.AddedItemComponent val in current.AddItem)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ClaimResponse.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Total != null) && (current.Total.Count != 0))
      {
        writer.WritePropertyName("total");
        writer.WriteStartArray();
        foreach (ClaimResponse.TotalComponent val in current.Total)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Payment != null)
      {
        writer.WritePropertyName("payment");
        current.Payment.SerializeJson(writer, options);
      }

      if (current.FundsReserve != null)
      {
        writer.WritePropertyName("fundsReserve");
        current.FundsReserve.SerializeJson(writer, options);
      }

      if (current.FormCode != null)
      {
        writer.WritePropertyName("formCode");
        current.FormCode.SerializeJson(writer, options);
      }

      if (current.Form != null)
      {
        writer.WritePropertyName("form");
        current.Form.SerializeJson(writer, options);
      }

      if ((current.ProcessNote != null) && (current.ProcessNote.Count != 0))
      {
        writer.WritePropertyName("processNote");
        writer.WriteStartArray();
        foreach (ClaimResponse.NoteComponent val in current.ProcessNote)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.CommunicationRequest != null) && (current.CommunicationRequest.Count != 0))
      {
        writer.WritePropertyName("communicationRequest");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.CommunicationRequest)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Insurance != null) && (current.Insurance.Count != 0))
      {
        writer.WritePropertyName("insurance");
        writer.WriteStartArray();
        foreach (ClaimResponse.InsuranceComponent val in current.Insurance)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Error != null) && (current.Error.Count != 0))
      {
        writer.WritePropertyName("error");
        writer.WriteStartArray();
        foreach (ClaimResponse.ErrorComponent val in current.Error)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse
    /// </summary>
    public static void DeserializeJson(this ClaimResponse current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse
    /// </summary>
    public static void DeserializeJsonProperty(this ClaimResponse current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FinancialResourceStatusCodes>(reader.GetString()));
          break;

        case "_status":
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "subType":
          current.SubType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.SubType).DeserializeJson(ref reader, options);
          break;

        case "use":
          current.UseElement =new Code<Hl7.Fhir.Model.Use>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Use>(reader.GetString()));
          break;

        case "_use":
          ((Hl7.Fhir.Model.Element)current.UseElement).DeserializeJson(ref reader, options);
          break;

        case "patient":
          current.Patient = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Patient).DeserializeJson(ref reader, options);
          break;

        case "created":
          current.CreatedElement = new FhirDateTime(reader.GetString());
          break;

        case "_created":
          ((Hl7.Fhir.Model.Element)current.CreatedElement).DeserializeJson(ref reader, options);
          break;

        case "insurer":
          current.Insurer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Insurer).DeserializeJson(ref reader, options);
          break;

        case "requestor":
          current.Requestor = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Requestor).DeserializeJson(ref reader, options);
          break;

        case "request":
          current.Request = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Request).DeserializeJson(ref reader, options);
          break;

        case "outcome":
          current.OutcomeElement =new Code<Hl7.Fhir.Model.ClaimProcessingCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ClaimProcessingCodes>(reader.GetString()));
          break;

        case "_outcome":
          ((Hl7.Fhir.Model.Element)current.OutcomeElement).DeserializeJson(ref reader, options);
          break;

        case "disposition":
          current.DispositionElement = new FhirString(reader.GetString());
          break;

        case "_disposition":
          ((Hl7.Fhir.Model.Element)current.DispositionElement).DeserializeJson(ref reader, options);
          break;

        case "preAuthRef":
          current.PreAuthRefElement = new FhirString(reader.GetString());
          break;

        case "_preAuthRef":
          ((Hl7.Fhir.Model.Element)current.PreAuthRefElement).DeserializeJson(ref reader, options);
          break;

        case "preAuthPeriod":
          current.PreAuthPeriod = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.PreAuthPeriod).DeserializeJson(ref reader, options);
          break;

        case "payeeType":
          current.PayeeType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.PayeeType).DeserializeJson(ref reader, options);
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Item = new List<ClaimResponse.ItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.ItemComponent v_Item = new Hl7.Fhir.Model.ClaimResponse.ItemComponent();
            v_Item.DeserializeJson(ref reader, options);
            current.Item.Add(v_Item);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Item.Count == 0)
          {
            current.Item = null;
          }
          break;

        case "addItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.AddItem = new List<ClaimResponse.AddedItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AddedItemComponent v_AddItem = new Hl7.Fhir.Model.ClaimResponse.AddedItemComponent();
            v_AddItem.DeserializeJson(ref reader, options);
            current.AddItem.Add(v_AddItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AddItem.Count == 0)
          {
            current.AddItem = null;
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "total":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Total = new List<ClaimResponse.TotalComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.TotalComponent v_Total = new Hl7.Fhir.Model.ClaimResponse.TotalComponent();
            v_Total.DeserializeJson(ref reader, options);
            current.Total.Add(v_Total);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Total.Count == 0)
          {
            current.Total = null;
          }
          break;

        case "payment":
          current.Payment = new Hl7.Fhir.Model.ClaimResponse.PaymentComponent();
          ((Hl7.Fhir.Model.ClaimResponse.PaymentComponent)current.Payment).DeserializeJson(ref reader, options);
          break;

        case "fundsReserve":
          current.FundsReserve = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.FundsReserve).DeserializeJson(ref reader, options);
          break;

        case "formCode":
          current.FormCode = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.FormCode).DeserializeJson(ref reader, options);
          break;

        case "form":
          current.Form = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Form).DeserializeJson(ref reader, options);
          break;

        case "processNote":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProcessNote = new List<ClaimResponse.NoteComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.NoteComponent v_ProcessNote = new Hl7.Fhir.Model.ClaimResponse.NoteComponent();
            v_ProcessNote.DeserializeJson(ref reader, options);
            current.ProcessNote.Add(v_ProcessNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProcessNote.Count == 0)
          {
            current.ProcessNote = null;
          }
          break;

        case "communicationRequest":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.CommunicationRequest = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_CommunicationRequest = new Hl7.Fhir.Model.ResourceReference();
            v_CommunicationRequest.DeserializeJson(ref reader, options);
            current.CommunicationRequest.Add(v_CommunicationRequest);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CommunicationRequest.Count == 0)
          {
            current.CommunicationRequest = null;
          }
          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Insurance = new List<ClaimResponse.InsuranceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.InsuranceComponent v_Insurance = new Hl7.Fhir.Model.ClaimResponse.InsuranceComponent();
            v_Insurance.DeserializeJson(ref reader, options);
            current.Insurance.Add(v_Insurance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Insurance.Count == 0)
          {
            current.Insurance = null;
          }
          break;

        case "error":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Error = new List<ClaimResponse.ErrorComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.ErrorComponent v_Error = new Hl7.Fhir.Model.ClaimResponse.ErrorComponent();
            v_Error.DeserializeJson(ref reader, options);
            current.Error.Add(v_Error);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Error.Count == 0)
          {
            current.Error = null;
          }
          break;

        // Complex: ClaimResponse, Export: ClaimResponse, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Item into JSON
    /// </summary>
    public static void SerializeJson(this ClaimResponse.ItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Item, Export: ItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("itemSequence",(int)current.ItemSequenceElement.Value);

      if ((current.NoteNumberElement != null) && (current.NoteNumberElement.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (PositiveInt val in current.NoteNumberElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (PositiveInt val in current.NoteNumberElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_noteNumber");
          writer.WriteStartArray();
          foreach (PositiveInt val in current.NoteNumberElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ClaimResponse.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Detail != null) && (current.Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();
        foreach (ClaimResponse.ItemDetailComponent val in current.Detail)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Item
    /// </summary>
    public static void DeserializeJson(this ClaimResponse.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Item
    /// </summary>
    public static void DeserializeJsonProperty(this ClaimResponse.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemSequence":
          current.ItemSequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "_itemSequence":
          ((Hl7.Fhir.Model.Element)current.ItemSequenceElement).DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Detail = new List<ClaimResponse.ItemDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.ItemDetailComponent v_Detail = new Hl7.Fhir.Model.ClaimResponse.ItemDetailComponent();
            v_Detail.DeserializeJson(ref reader, options);
            current.Detail.Add(v_Detail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Detail.Count == 0)
          {
            current.Detail = null;
          }
          break;

        // Complex: item, Export: ItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Adjudication into JSON
    /// </summary>
    public static void SerializeJson(this ClaimResponse.AdjudicationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Adjudication, Export: AdjudicationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("category");
      current.Category.SerializeJson(writer, options);

      if (current.Reason != null)
      {
        writer.WritePropertyName("reason");
        current.Reason.SerializeJson(writer, options);
      }

      if (current.Amount != null)
      {
        writer.WritePropertyName("amount");
        current.Amount.SerializeJson(writer, options);
      }

      if (current.ValueElement != null)
      {
        if (current.ValueElement.Value != null)
        {
          writer.WriteNumber("value",(decimal)current.ValueElement.Value);
        }
        if (current.ValueElement.HasExtensions() || (!string.IsNullOrEmpty(current.ValueElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_value",false,current.ValueElement.Extension,current.ValueElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Adjudication
    /// </summary>
    public static void DeserializeJson(this ClaimResponse.AdjudicationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Adjudication
    /// </summary>
    public static void DeserializeJsonProperty(this ClaimResponse.AdjudicationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "reason":
          current.Reason = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Reason).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "value":
          current.ValueElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "_value":
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        // Complex: adjudication, Export: AdjudicationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#ItemDetail into JSON
    /// </summary>
    public static void SerializeJson(this ClaimResponse.ItemDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#ItemDetail, Export: ItemDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("detailSequence",(int)current.DetailSequenceElement.Value);

      if ((current.NoteNumberElement != null) && (current.NoteNumberElement.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (PositiveInt val in current.NoteNumberElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (PositiveInt val in current.NoteNumberElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_noteNumber");
          writer.WriteStartArray();
          foreach (PositiveInt val in current.NoteNumberElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ClaimResponse.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SubDetail != null) && (current.SubDetail.Count != 0))
      {
        writer.WritePropertyName("subDetail");
        writer.WriteStartArray();
        foreach (ClaimResponse.SubDetailComponent val in current.SubDetail)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#ItemDetail
    /// </summary>
    public static void DeserializeJson(this ClaimResponse.ItemDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#ItemDetail
    /// </summary>
    public static void DeserializeJsonProperty(this ClaimResponse.ItemDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "detailSequence":
          current.DetailSequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "_detailSequence":
          ((Hl7.Fhir.Model.Element)current.DetailSequenceElement).DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubDetail = new List<ClaimResponse.SubDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.SubDetailComponent v_SubDetail = new Hl7.Fhir.Model.ClaimResponse.SubDetailComponent();
            v_SubDetail.DeserializeJson(ref reader, options);
            current.SubDetail.Add(v_SubDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubDetail.Count == 0)
          {
            current.SubDetail = null;
          }
          break;

        // Complex: detail, Export: ItemDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#SubDetail into JSON
    /// </summary>
    public static void SerializeJson(this ClaimResponse.SubDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#SubDetail, Export: SubDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("subDetailSequence",(int)current.SubDetailSequenceElement.Value);

      if ((current.NoteNumberElement != null) && (current.NoteNumberElement.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (PositiveInt val in current.NoteNumberElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (PositiveInt val in current.NoteNumberElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_noteNumber");
          writer.WriteStartArray();
          foreach (PositiveInt val in current.NoteNumberElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ClaimResponse.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#SubDetail
    /// </summary>
    public static void DeserializeJson(this ClaimResponse.SubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#SubDetail
    /// </summary>
    public static void DeserializeJsonProperty(this ClaimResponse.SubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "subDetailSequence":
          current.SubDetailSequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "_subDetailSequence":
          ((Hl7.Fhir.Model.Element)current.SubDetailSequenceElement).DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        // Complex: subDetail, Export: SubDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#AddedItem into JSON
    /// </summary>
    public static void SerializeJson(this ClaimResponse.AddedItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#AddedItem, Export: AddedItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.ItemSequenceElement != null) && (current.ItemSequenceElement.Count != 0))
      {
        writer.WritePropertyName("itemSequence");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (PositiveInt val in current.ItemSequenceElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (PositiveInt val in current.ItemSequenceElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_itemSequence");
          writer.WriteStartArray();
          foreach (PositiveInt val in current.ItemSequenceElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.DetailSequenceElement != null) && (current.DetailSequenceElement.Count != 0))
      {
        writer.WritePropertyName("detailSequence");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (PositiveInt val in current.DetailSequenceElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (PositiveInt val in current.DetailSequenceElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_detailSequence");
          writer.WriteStartArray();
          foreach (PositiveInt val in current.DetailSequenceElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.SubdetailSequenceElement != null) && (current.SubdetailSequenceElement.Count != 0))
      {
        writer.WritePropertyName("subdetailSequence");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (PositiveInt val in current.SubdetailSequenceElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (PositiveInt val in current.SubdetailSequenceElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_subdetailSequence");
          writer.WriteStartArray();
          foreach (PositiveInt val in current.SubdetailSequenceElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.Provider != null) && (current.Provider.Count != 0))
      {
        writer.WritePropertyName("provider");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Provider)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      writer.WritePropertyName("productOrService");
      current.ProductOrService.SerializeJson(writer, options);

      if ((current.Modifier != null) && (current.Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Modifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProgramCode != null) && (current.ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProgramCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Serviced != null)
      {
        switch (current.Serviced)
        {
          case Date v_Date:
            writer.WriteString("servicedDate",v_Date.Value);
            break;
          case Period v_Period:
            writer.WritePropertyName("servicedPeriod");
            v_Period.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Location != null)
      {
        switch (current.Location)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("locationCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Address v_Address:
            writer.WritePropertyName("locationAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("locationReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        current.UnitPrice.SerializeJson(writer, options);
      }

      if (current.FactorElement != null)
      {
        if (current.FactorElement.Value != null)
        {
          writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
        }
        if (current.FactorElement.HasExtensions() || (!string.IsNullOrEmpty(current.FactorElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_factor",false,current.FactorElement.Extension,current.FactorElement.ElementId);
        }
      }

      if (current.Net != null)
      {
        writer.WritePropertyName("net");
        current.Net.SerializeJson(writer, options);
      }

      if (current.BodySite != null)
      {
        writer.WritePropertyName("bodySite");
        current.BodySite.SerializeJson(writer, options);
      }

      if ((current.SubSite != null) && (current.SubSite.Count != 0))
      {
        writer.WritePropertyName("subSite");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.SubSite)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.NoteNumberElement != null) && (current.NoteNumberElement.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (PositiveInt val in current.NoteNumberElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (PositiveInt val in current.NoteNumberElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_noteNumber");
          writer.WriteStartArray();
          foreach (PositiveInt val in current.NoteNumberElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ClaimResponse.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Detail != null) && (current.Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();
        foreach (ClaimResponse.AddedItemDetailComponent val in current.Detail)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#AddedItem
    /// </summary>
    public static void DeserializeJson(this ClaimResponse.AddedItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#AddedItem
    /// </summary>
    public static void DeserializeJsonProperty(this ClaimResponse.AddedItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ItemSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ItemSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ItemSequenceElement.Count == 0)
          {
            current.ItemSequenceElement = null;
          }
          break;

        case "_itemSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_itemSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_itemSequence >= current.ItemSequenceElement.Count)
            {
              current.ItemSequenceElement.Add(new PositiveInt());
            }
            ((Hl7.Fhir.Model.Element)current.ItemSequenceElement[i_itemSequence++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "detailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.DetailSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.DetailSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DetailSequenceElement.Count == 0)
          {
            current.DetailSequenceElement = null;
          }
          break;

        case "_detailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_detailSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_detailSequence >= current.DetailSequenceElement.Count)
            {
              current.DetailSequenceElement.Add(new PositiveInt());
            }
            ((Hl7.Fhir.Model.Element)current.DetailSequenceElement[i_detailSequence++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "subdetailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubdetailSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SubdetailSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubdetailSequenceElement.Count == 0)
          {
            current.SubdetailSequenceElement = null;
          }
          break;

        case "_subdetailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_subdetailSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_subdetailSequence >= current.SubdetailSequenceElement.Count)
            {
              current.SubdetailSequenceElement.Add(new PositiveInt());
            }
            ((Hl7.Fhir.Model.Element)current.SubdetailSequenceElement[i_subdetailSequence++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "provider":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Provider = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Provider = new Hl7.Fhir.Model.ResourceReference();
            v_Provider.DeserializeJson(ref reader, options);
            current.Provider.Add(v_Provider);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Provider.Count == 0)
          {
            current.Provider = null;
          }
          break;

        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramCode.DeserializeJson(ref reader, options);
            current.ProgramCode.Add(v_ProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }
          break;

        case "servicedDate":
          current.Serviced = new Date(reader.GetString());
          break;

        case "servicedPeriod":
          current.Serviced = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Serviced).DeserializeJson(ref reader, options);
          break;

        case "locationCodeableConcept":
          current.Location = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Location).DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          current.Location = new Hl7.Fhir.Model.Address();
          ((Hl7.Fhir.Model.Address)current.Location).DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Location).DeserializeJson(ref reader, options);
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          current.FactorElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "_factor":
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "bodySite":
          current.BodySite = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.BodySite).DeserializeJson(ref reader, options);
          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubSite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_SubSite = new Hl7.Fhir.Model.CodeableConcept();
            v_SubSite.DeserializeJson(ref reader, options);
            current.SubSite.Add(v_SubSite);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubSite.Count == 0)
          {
            current.SubSite = null;
          }
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Detail = new List<ClaimResponse.AddedItemDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AddedItemDetailComponent v_Detail = new Hl7.Fhir.Model.ClaimResponse.AddedItemDetailComponent();
            v_Detail.DeserializeJson(ref reader, options);
            current.Detail.Add(v_Detail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Detail.Count == 0)
          {
            current.Detail = null;
          }
          break;

        // Complex: addItem, Export: AddedItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#AddedItemDetail into JSON
    /// </summary>
    public static void SerializeJson(this ClaimResponse.AddedItemDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#AddedItemDetail, Export: AddedItemDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("productOrService");
      current.ProductOrService.SerializeJson(writer, options);

      if ((current.Modifier != null) && (current.Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Modifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        current.UnitPrice.SerializeJson(writer, options);
      }

      if (current.FactorElement != null)
      {
        if (current.FactorElement.Value != null)
        {
          writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
        }
        if (current.FactorElement.HasExtensions() || (!string.IsNullOrEmpty(current.FactorElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_factor",false,current.FactorElement.Extension,current.FactorElement.ElementId);
        }
      }

      if (current.Net != null)
      {
        writer.WritePropertyName("net");
        current.Net.SerializeJson(writer, options);
      }

      if ((current.NoteNumberElement != null) && (current.NoteNumberElement.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (PositiveInt val in current.NoteNumberElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (PositiveInt val in current.NoteNumberElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_noteNumber");
          writer.WriteStartArray();
          foreach (PositiveInt val in current.NoteNumberElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ClaimResponse.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SubDetail != null) && (current.SubDetail.Count != 0))
      {
        writer.WritePropertyName("subDetail");
        writer.WriteStartArray();
        foreach (ClaimResponse.AddedItemSubDetailComponent val in current.SubDetail)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#AddedItemDetail
    /// </summary>
    public static void DeserializeJson(this ClaimResponse.AddedItemDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#AddedItemDetail
    /// </summary>
    public static void DeserializeJsonProperty(this ClaimResponse.AddedItemDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          current.FactorElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "_factor":
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubDetail = new List<ClaimResponse.AddedItemSubDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AddedItemSubDetailComponent v_SubDetail = new Hl7.Fhir.Model.ClaimResponse.AddedItemSubDetailComponent();
            v_SubDetail.DeserializeJson(ref reader, options);
            current.SubDetail.Add(v_SubDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubDetail.Count == 0)
          {
            current.SubDetail = null;
          }
          break;

        // Complex: detail, Export: AddedItemDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#AddedItemSubDetail into JSON
    /// </summary>
    public static void SerializeJson(this ClaimResponse.AddedItemSubDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#AddedItemSubDetail, Export: AddedItemSubDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("productOrService");
      current.ProductOrService.SerializeJson(writer, options);

      if ((current.Modifier != null) && (current.Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Modifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        current.UnitPrice.SerializeJson(writer, options);
      }

      if (current.FactorElement != null)
      {
        if (current.FactorElement.Value != null)
        {
          writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
        }
        if (current.FactorElement.HasExtensions() || (!string.IsNullOrEmpty(current.FactorElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_factor",false,current.FactorElement.Extension,current.FactorElement.ElementId);
        }
      }

      if (current.Net != null)
      {
        writer.WritePropertyName("net");
        current.Net.SerializeJson(writer, options);
      }

      if ((current.NoteNumberElement != null) && (current.NoteNumberElement.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (PositiveInt val in current.NoteNumberElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (PositiveInt val in current.NoteNumberElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_noteNumber");
          writer.WriteStartArray();
          foreach (PositiveInt val in current.NoteNumberElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ClaimResponse.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#AddedItemSubDetail
    /// </summary>
    public static void DeserializeJson(this ClaimResponse.AddedItemSubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#AddedItemSubDetail
    /// </summary>
    public static void DeserializeJsonProperty(this ClaimResponse.AddedItemSubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          current.FactorElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "_factor":
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        // Complex: subDetail, Export: AddedItemSubDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Total into JSON
    /// </summary>
    public static void SerializeJson(this ClaimResponse.TotalComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Total, Export: TotalComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("category");
      current.Category.SerializeJson(writer, options);

      writer.WritePropertyName("amount");
      current.Amount.SerializeJson(writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Total
    /// </summary>
    public static void DeserializeJson(this ClaimResponse.TotalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Total
    /// </summary>
    public static void DeserializeJsonProperty(this ClaimResponse.TotalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Amount).DeserializeJson(ref reader, options);
          break;

        // Complex: total, Export: TotalComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Payment into JSON
    /// </summary>
    public static void SerializeJson(this ClaimResponse.PaymentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Payment, Export: PaymentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if (current.Adjustment != null)
      {
        writer.WritePropertyName("adjustment");
        current.Adjustment.SerializeJson(writer, options);
      }

      if (current.AdjustmentReason != null)
      {
        writer.WritePropertyName("adjustmentReason");
        current.AdjustmentReason.SerializeJson(writer, options);
      }

      if (current.DateElement != null)
      {
        if (!string.IsNullOrEmpty(current.DateElement.Value))
        {
          writer.WriteString("date",current.DateElement.Value);
        }
        if (current.DateElement.HasExtensions() || (!string.IsNullOrEmpty(current.DateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_date",false,current.DateElement.Extension,current.DateElement.ElementId);
        }
      }

      writer.WritePropertyName("amount");
      current.Amount.SerializeJson(writer, options);

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Payment
    /// </summary>
    public static void DeserializeJson(this ClaimResponse.PaymentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Payment
    /// </summary>
    public static void DeserializeJsonProperty(this ClaimResponse.PaymentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "adjustment":
          current.Adjustment = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Adjustment).DeserializeJson(ref reader, options);
          break;

        case "adjustmentReason":
          current.AdjustmentReason = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.AdjustmentReason).DeserializeJson(ref reader, options);
          break;

        case "date":
          current.DateElement = new Date(reader.GetString());
          break;

        case "_date":
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        // Complex: payment, Export: PaymentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Note into JSON
    /// </summary>
    public static void SerializeJson(this ClaimResponse.NoteComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Note, Export: NoteComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.NumberElement != null)
      {
        if (current.NumberElement.Value != null)
        {
          writer.WriteNumber("number",(int)current.NumberElement.Value);
        }
        if (current.NumberElement.HasExtensions() || (!string.IsNullOrEmpty(current.NumberElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_number",false,current.NumberElement.Extension,current.NumberElement.ElementId);
        }
      }

      if (current.TypeElement != null)
      {
        writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));
      }

      writer.WriteString("text",current.TextElement.Value);

      if (current.Language != null)
      {
        writer.WritePropertyName("language");
        current.Language.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Note
    /// </summary>
    public static void DeserializeJson(this ClaimResponse.NoteComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Note
    /// </summary>
    public static void DeserializeJsonProperty(this ClaimResponse.NoteComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "number":
          current.NumberElement = new PositiveInt(reader.GetInt32());
          break;

        case "_number":
          ((Hl7.Fhir.Model.Element)current.NumberElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.NoteType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.NoteType>(reader.GetString()));
          break;

        case "_type":
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "text":
          current.TextElement = new FhirString(reader.GetString());
          break;

        case "_text":
          ((Hl7.Fhir.Model.Element)current.TextElement).DeserializeJson(ref reader, options);
          break;

        case "language":
          current.Language = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Language).DeserializeJson(ref reader, options);
          break;

        // Complex: processNote, Export: NoteComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Insurance into JSON
    /// </summary>
    public static void SerializeJson(this ClaimResponse.InsuranceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Insurance, Export: InsuranceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      writer.WriteBoolean("focal",(bool)current.FocalElement.Value);

      writer.WritePropertyName("coverage");
      current.Coverage.SerializeJson(writer, options);

      if (current.BusinessArrangementElement != null)
      {
        if (!string.IsNullOrEmpty(current.BusinessArrangementElement.Value))
        {
          writer.WriteString("businessArrangement",current.BusinessArrangementElement.Value);
        }
        if (current.BusinessArrangementElement.HasExtensions() || (!string.IsNullOrEmpty(current.BusinessArrangementElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_businessArrangement",false,current.BusinessArrangementElement.Extension,current.BusinessArrangementElement.ElementId);
        }
      }

      if (current.ClaimResponse != null)
      {
        writer.WritePropertyName("claimResponse");
        current.ClaimResponse.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Insurance
    /// </summary>
    public static void DeserializeJson(this ClaimResponse.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Insurance
    /// </summary>
    public static void DeserializeJsonProperty(this ClaimResponse.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "_sequence":
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "focal":
          current.FocalElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_focal":
          ((Hl7.Fhir.Model.Element)current.FocalElement).DeserializeJson(ref reader, options);
          break;

        case "coverage":
          current.Coverage = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Coverage).DeserializeJson(ref reader, options);
          break;

        case "businessArrangement":
          current.BusinessArrangementElement = new FhirString(reader.GetString());
          break;

        case "_businessArrangement":
          ((Hl7.Fhir.Model.Element)current.BusinessArrangementElement).DeserializeJson(ref reader, options);
          break;

        case "claimResponse":
          current.ClaimResponse = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.ClaimResponse).DeserializeJson(ref reader, options);
          break;

        // Complex: insurance, Export: InsuranceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Error into JSON
    /// </summary>
    public static void SerializeJson(this ClaimResponse.ErrorComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Error, Export: ErrorComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.ItemSequenceElement != null)
      {
        if (current.ItemSequenceElement.Value != null)
        {
          writer.WriteNumber("itemSequence",(int)current.ItemSequenceElement.Value);
        }
        if (current.ItemSequenceElement.HasExtensions() || (!string.IsNullOrEmpty(current.ItemSequenceElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_itemSequence",false,current.ItemSequenceElement.Extension,current.ItemSequenceElement.ElementId);
        }
      }

      if (current.DetailSequenceElement != null)
      {
        if (current.DetailSequenceElement.Value != null)
        {
          writer.WriteNumber("detailSequence",(int)current.DetailSequenceElement.Value);
        }
        if (current.DetailSequenceElement.HasExtensions() || (!string.IsNullOrEmpty(current.DetailSequenceElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_detailSequence",false,current.DetailSequenceElement.Extension,current.DetailSequenceElement.ElementId);
        }
      }

      if (current.SubDetailSequenceElement != null)
      {
        if (current.SubDetailSequenceElement.Value != null)
        {
          writer.WriteNumber("subDetailSequence",(int)current.SubDetailSequenceElement.Value);
        }
        if (current.SubDetailSequenceElement.HasExtensions() || (!string.IsNullOrEmpty(current.SubDetailSequenceElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_subDetailSequence",false,current.SubDetailSequenceElement.Extension,current.SubDetailSequenceElement.ElementId);
        }
      }

      writer.WritePropertyName("code");
      current.Code.SerializeJson(writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Error
    /// </summary>
    public static void DeserializeJson(this ClaimResponse.ErrorComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Error
    /// </summary>
    public static void DeserializeJsonProperty(this ClaimResponse.ErrorComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemSequence":
          current.ItemSequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "_itemSequence":
          ((Hl7.Fhir.Model.Element)current.ItemSequenceElement).DeserializeJson(ref reader, options);
          break;

        case "detailSequence":
          current.DetailSequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "_detailSequence":
          ((Hl7.Fhir.Model.Element)current.DetailSequenceElement).DeserializeJson(ref reader, options);
          break;

        case "subDetailSequence":
          current.SubDetailSequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "_subDetailSequence":
          ((Hl7.Fhir.Model.Element)current.SubDetailSequenceElement).DeserializeJson(ref reader, options);
          break;

        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        // Complex: error, Export: ErrorComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ClaimResponseJsonConverter : JsonConverter<ClaimResponse>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(ClaimResponse).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, ClaimResponse value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override ClaimResponse Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        ClaimResponse target = new ClaimResponse();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
