// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for EffectEvidenceSynthesis
  /// </summary>
  public static class EffectEvidenceSynthesisJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR EffectEvidenceSynthesis into JSON
    /// </summary>
    public static void SerializeJson(this EffectEvidenceSynthesis current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","EffectEvidenceSynthesis");
      // Complex: EffectEvidenceSynthesis, Export: EffectEvidenceSynthesis, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.TitleElement != null) && (current.TitleElement.Value != null))
      {
        writer.WriteString("title",current.TitleElement.Value);
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if ((current.PublisherElement != null) && (current.PublisherElement.Value != null))
      {
        writer.WriteString("publisher",current.PublisherElement.Value);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.Note != null) && (current.Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();
        foreach (Annotation val in current.Note)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Copyright != null) && (current.Copyright.Value != null))
      {
        writer.WriteString("copyright",current.Copyright.Value);
      }

      if ((current.ApprovalDateElement != null) && (current.ApprovalDateElement.Value != null))
      {
        writer.WriteString("approvalDate",current.ApprovalDateElement.Value);
      }

      if ((current.LastReviewDateElement != null) && (current.LastReviewDateElement.Value != null))
      {
        writer.WriteString("lastReviewDate",current.LastReviewDateElement.Value);
      }

      if (current.EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        current.EffectivePeriod.SerializeJson(writer, options);
      }

      if ((current.Topic != null) && (current.Topic.Count != 0))
      {
        writer.WritePropertyName("topic");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Topic)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Author != null) && (current.Author.Count != 0))
      {
        writer.WritePropertyName("author");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Author)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Editor != null) && (current.Editor.Count != 0))
      {
        writer.WritePropertyName("editor");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Editor)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Reviewer != null) && (current.Reviewer.Count != 0))
      {
        writer.WritePropertyName("reviewer");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Reviewer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Endorser != null) && (current.Endorser.Count != 0))
      {
        writer.WritePropertyName("endorser");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Endorser)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.RelatedArtifact != null) && (current.RelatedArtifact.Count != 0))
      {
        writer.WritePropertyName("relatedArtifact");
        writer.WriteStartArray();
        foreach (RelatedArtifact val in current.RelatedArtifact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.SynthesisType != null)
      {
        writer.WritePropertyName("synthesisType");
        current.SynthesisType.SerializeJson(writer, options);
      }

      if (current.StudyType != null)
      {
        writer.WritePropertyName("studyType");
        current.StudyType.SerializeJson(writer, options);
      }

      writer.WritePropertyName("population");
      current.Population.SerializeJson(writer, options);

      writer.WritePropertyName("exposure");
      current.Exposure.SerializeJson(writer, options);

      writer.WritePropertyName("exposureAlternative");
      current.ExposureAlternative.SerializeJson(writer, options);

      writer.WritePropertyName("outcome");
      current.Outcome.SerializeJson(writer, options);

      if (current.SampleSize != null)
      {
        writer.WritePropertyName("sampleSize");
        current.SampleSize.SerializeJson(writer, options);
      }

      if ((current.ResultsByExposure != null) && (current.ResultsByExposure.Count != 0))
      {
        writer.WritePropertyName("resultsByExposure");
        writer.WriteStartArray();
        foreach (EffectEvidenceSynthesis.ResultsByExposureComponent val in current.ResultsByExposure)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.EffectEstimate != null) && (current.EffectEstimate.Count != 0))
      {
        writer.WritePropertyName("effectEstimate");
        writer.WriteStartArray();
        foreach (EffectEvidenceSynthesis.EffectEstimateComponent val in current.EffectEstimate)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Certainty != null) && (current.Certainty.Count != 0))
      {
        writer.WritePropertyName("certainty");
        writer.WriteStartArray();
        foreach (EffectEvidenceSynthesis.CertaintyComponent val in current.Certainty)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis
    /// </summary>
    public static void DeserializeJson(this EffectEvidenceSynthesis current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis
    /// </summary>
    public static void DeserializeJsonProperty(this EffectEvidenceSynthesis current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Identifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }

          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());

          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));

          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());

          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Contact.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }

          break;

        case "description":
          current.Description = new Markdown(reader.GetString());

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Note.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Annotation>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }

          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.UseContext.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.UsageContext>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Jurisdiction.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }

          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());

          break;

        case "approvalDate":
          current.ApprovalDateElement = new Date(reader.GetString());

          break;

        case "lastReviewDate":
          current.LastReviewDateElement = new Date(reader.GetString());

          break;

        case "effectivePeriod":
          current.EffectivePeriod = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);

          break;

        case "topic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Topic = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Topic.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Topic.Count == 0)
          {
            current.Topic = null;
          }

          break;

        case "author":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Author = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Author.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Author.Count == 0)
          {
            current.Author = null;
          }

          break;

        case "editor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Editor = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Editor.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Editor.Count == 0)
          {
            current.Editor = null;
          }

          break;

        case "reviewer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Reviewer = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Reviewer.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Reviewer.Count == 0)
          {
            current.Reviewer = null;
          }

          break;

        case "endorser":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Endorser = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Endorser.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Endorser.Count == 0)
          {
            current.Endorser = null;
          }

          break;

        case "relatedArtifact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.RelatedArtifact = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.RelatedArtifact.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.RelatedArtifact>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.RelatedArtifact.Count == 0)
          {
            current.RelatedArtifact = null;
          }

          break;

        case "synthesisType":
          current.SynthesisType = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "studyType":
          current.StudyType = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "population":
          current.Population = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "exposure":
          current.Exposure = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "exposureAlternative":
          current.ExposureAlternative = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "outcome":
          current.Outcome = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "sampleSize":
          current.SampleSize = JsonSerializer.Deserialize<Hl7.Fhir.Model.EffectEvidenceSynthesis.SampleSizeComponent>(ref reader, options);

          break;

        case "resultsByExposure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ResultsByExposure = new List<EffectEvidenceSynthesis.ResultsByExposureComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ResultsByExposure.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.EffectEvidenceSynthesis.ResultsByExposureComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ResultsByExposure.Count == 0)
          {
            current.ResultsByExposure = null;
          }

          break;

        case "effectEstimate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.EffectEstimate = new List<EffectEvidenceSynthesis.EffectEstimateComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.EffectEstimate.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.EffectEvidenceSynthesis.EffectEstimateComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.EffectEstimate.Count == 0)
          {
            current.EffectEstimate = null;
          }

          break;

        case "certainty":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Certainty = new List<EffectEvidenceSynthesis.CertaintyComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Certainty.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.EffectEvidenceSynthesis.CertaintyComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Certainty.Count == 0)
          {
            current.Certainty = null;
          }

          break;

        // Complex: EffectEvidenceSynthesis, Export: EffectEvidenceSynthesis, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR EffectEvidenceSynthesis#SampleSize into JSON
    /// </summary>
    public static void SerializeJson(this EffectEvidenceSynthesis.SampleSizeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: EffectEvidenceSynthesis#SampleSize, Export: SampleSizeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.DescriptionElement != null) && (current.DescriptionElement.Value != null))
      {
        writer.WriteString("description",current.DescriptionElement.Value);
      }

      if ((current.NumberOfStudiesElement != null) && (current.NumberOfStudiesElement.Value != null))
      {
        writer.WriteNumber("numberOfStudies",(int)current.NumberOfStudiesElement.Value);
      }

      if ((current.NumberOfParticipantsElement != null) && (current.NumberOfParticipantsElement.Value != null))
      {
        writer.WriteNumber("numberOfParticipants",(int)current.NumberOfParticipantsElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis#SampleSize
    /// </summary>
    public static void DeserializeJson(this EffectEvidenceSynthesis.SampleSizeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis#SampleSize
    /// </summary>
    public static void DeserializeJsonProperty(this EffectEvidenceSynthesis.SampleSizeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());

          break;

        case "numberOfStudies":
          current.NumberOfStudiesElement = new Integer(reader.GetInt32());

          break;

        case "numberOfParticipants":
          current.NumberOfParticipantsElement = new Integer(reader.GetInt32());

          break;

        // Complex: sampleSize, Export: SampleSizeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR EffectEvidenceSynthesis#ResultsByExposure into JSON
    /// </summary>
    public static void SerializeJson(this EffectEvidenceSynthesis.ResultsByExposureComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: EffectEvidenceSynthesis#ResultsByExposure, Export: ResultsByExposureComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.DescriptionElement != null) && (current.DescriptionElement.Value != null))
      {
        writer.WriteString("description",current.DescriptionElement.Value);
      }

      if (current.ExposureState_Element != null)
      {
        writer.WriteString("exposureState",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ExposureState_Element.Value));
      }

      if (current.VariantState != null)
      {
        writer.WritePropertyName("variantState");
        current.VariantState.SerializeJson(writer, options);
      }

      writer.WritePropertyName("riskEvidenceSynthesis");
      current.RiskEvidenceSynthesis.SerializeJson(writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis#ResultsByExposure
    /// </summary>
    public static void DeserializeJson(this EffectEvidenceSynthesis.ResultsByExposureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis#ResultsByExposure
    /// </summary>
    public static void DeserializeJsonProperty(this EffectEvidenceSynthesis.ResultsByExposureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());

          break;

        case "exposureState":
          current.ExposureState_Element =new Code<Hl7.Fhir.Model.EffectEvidenceSynthesis.ExposureState>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.EffectEvidenceSynthesis.ExposureState>(reader.GetString()));

          break;

        case "variantState":
          current.VariantState = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "riskEvidenceSynthesis":
          current.RiskEvidenceSynthesis = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        // Complex: resultsByExposure, Export: ResultsByExposureComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR EffectEvidenceSynthesis#EffectEstimate into JSON
    /// </summary>
    public static void SerializeJson(this EffectEvidenceSynthesis.EffectEstimateComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: EffectEvidenceSynthesis#EffectEstimate, Export: EffectEstimateComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.DescriptionElement != null) && (current.DescriptionElement.Value != null))
      {
        writer.WriteString("description",current.DescriptionElement.Value);
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.VariantState != null)
      {
        writer.WritePropertyName("variantState");
        current.VariantState.SerializeJson(writer, options);
      }

      if ((current.ValueElement != null) && (current.ValueElement.Value != null))
      {
        writer.WriteNumber("value",(decimal)current.ValueElement.Value);
      }

      if (current.UnitOfMeasure != null)
      {
        writer.WritePropertyName("unitOfMeasure");
        current.UnitOfMeasure.SerializeJson(writer, options);
      }

      if ((current.PrecisionEstimate != null) && (current.PrecisionEstimate.Count != 0))
      {
        writer.WritePropertyName("precisionEstimate");
        writer.WriteStartArray();
        foreach (EffectEvidenceSynthesis.PrecisionEstimateComponent val in current.PrecisionEstimate)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis#EffectEstimate
    /// </summary>
    public static void DeserializeJson(this EffectEvidenceSynthesis.EffectEstimateComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis#EffectEstimate
    /// </summary>
    public static void DeserializeJsonProperty(this EffectEvidenceSynthesis.EffectEstimateComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());

          break;

        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "variantState":
          current.VariantState = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "value":
          current.ValueElement = new FhirDecimal(reader.GetDecimal());

          break;

        case "unitOfMeasure":
          current.UnitOfMeasure = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "precisionEstimate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PrecisionEstimate = new List<EffectEvidenceSynthesis.PrecisionEstimateComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.PrecisionEstimate.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.EffectEvidenceSynthesis.PrecisionEstimateComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.PrecisionEstimate.Count == 0)
          {
            current.PrecisionEstimate = null;
          }

          break;

        // Complex: effectEstimate, Export: EffectEstimateComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR EffectEvidenceSynthesis#PrecisionEstimate into JSON
    /// </summary>
    public static void SerializeJson(this EffectEvidenceSynthesis.PrecisionEstimateComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: EffectEvidenceSynthesis#PrecisionEstimate, Export: PrecisionEstimateComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.LevelElement != null) && (current.LevelElement.Value != null))
      {
        writer.WriteNumber("level",(decimal)current.LevelElement.Value);
      }

      if ((current.FromElement != null) && (current.FromElement.Value != null))
      {
        writer.WriteNumber("from",(decimal)current.FromElement.Value);
      }

      if ((current.ToElement != null) && (current.ToElement.Value != null))
      {
        writer.WriteNumber("to",(decimal)current.ToElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis#PrecisionEstimate
    /// </summary>
    public static void DeserializeJson(this EffectEvidenceSynthesis.PrecisionEstimateComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis#PrecisionEstimate
    /// </summary>
    public static void DeserializeJsonProperty(this EffectEvidenceSynthesis.PrecisionEstimateComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "level":
          current.LevelElement = new FhirDecimal(reader.GetDecimal());

          break;

        case "from":
          current.FromElement = new FhirDecimal(reader.GetDecimal());

          break;

        case "to":
          current.ToElement = new FhirDecimal(reader.GetDecimal());

          break;

        // Complex: precisionEstimate, Export: PrecisionEstimateComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR EffectEvidenceSynthesis#Certainty into JSON
    /// </summary>
    public static void SerializeJson(this EffectEvidenceSynthesis.CertaintyComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: EffectEvidenceSynthesis#Certainty, Export: CertaintyComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Rating != null) && (current.Rating.Count != 0))
      {
        writer.WritePropertyName("rating");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Rating)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Note != null) && (current.Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();
        foreach (Annotation val in current.Note)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.CertaintySubcomponent != null) && (current.CertaintySubcomponent.Count != 0))
      {
        writer.WritePropertyName("certaintySubcomponent");
        writer.WriteStartArray();
        foreach (EffectEvidenceSynthesis.CertaintySubcomponentComponent val in current.CertaintySubcomponent)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis#Certainty
    /// </summary>
    public static void DeserializeJson(this EffectEvidenceSynthesis.CertaintyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis#Certainty
    /// </summary>
    public static void DeserializeJsonProperty(this EffectEvidenceSynthesis.CertaintyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "rating":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Rating = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Rating.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Rating.Count == 0)
          {
            current.Rating = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Note.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Annotation>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }

          break;

        case "certaintySubcomponent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.CertaintySubcomponent = new List<EffectEvidenceSynthesis.CertaintySubcomponentComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.CertaintySubcomponent.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.EffectEvidenceSynthesis.CertaintySubcomponentComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.CertaintySubcomponent.Count == 0)
          {
            current.CertaintySubcomponent = null;
          }

          break;

        // Complex: certainty, Export: CertaintyComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR EffectEvidenceSynthesis#CertaintySubcomponent into JSON
    /// </summary>
    public static void SerializeJson(this EffectEvidenceSynthesis.CertaintySubcomponentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: EffectEvidenceSynthesis#CertaintySubcomponent, Export: CertaintySubcomponentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.Rating != null) && (current.Rating.Count != 0))
      {
        writer.WritePropertyName("rating");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Rating)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Note != null) && (current.Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();
        foreach (Annotation val in current.Note)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis#CertaintySubcomponent
    /// </summary>
    public static void DeserializeJson(this EffectEvidenceSynthesis.CertaintySubcomponentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR EffectEvidenceSynthesis#CertaintySubcomponent
    /// </summary>
    public static void DeserializeJsonProperty(this EffectEvidenceSynthesis.CertaintySubcomponentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "rating":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Rating = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Rating.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Rating.Count == 0)
          {
            current.Rating = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Note.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Annotation>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }

          break;

        // Complex: certaintySubcomponent, Export: CertaintySubcomponentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class EffectEvidenceSynthesisJsonConverter : JsonConverter<EffectEvidenceSynthesis>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(EffectEvidenceSynthesis).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, EffectEvidenceSynthesis value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override EffectEvidenceSynthesis Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        EffectEvidenceSynthesis target = new EffectEvidenceSynthesis();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
