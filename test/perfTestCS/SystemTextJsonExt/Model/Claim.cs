// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for Claim
  /// </summary>
  public static class ClaimJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR Claim into JSON
    /// </summary>
    public static void SerializeJson(this Claim current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","Claim");
      // Complex: Claim, Export: Claim, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if (current.SubType != null)
      {
        writer.WritePropertyName("subType");
        current.SubType.SerializeJson(writer, options);
      }

      writer.WriteString("use",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.UseElement.Value));

      writer.WritePropertyName("patient");
      current.Patient.SerializeJson(writer, options);

      if (current.BillablePeriod != null)
      {
        writer.WritePropertyName("billablePeriod");
        current.BillablePeriod.SerializeJson(writer, options);
      }

      writer.WriteString("created",current.CreatedElement.Value);

      if (current.Enterer != null)
      {
        writer.WritePropertyName("enterer");
        current.Enterer.SerializeJson(writer, options);
      }

      if (current.Insurer != null)
      {
        writer.WritePropertyName("insurer");
        current.Insurer.SerializeJson(writer, options);
      }

      writer.WritePropertyName("provider");
      current.Provider.SerializeJson(writer, options);

      writer.WritePropertyName("priority");
      current.Priority.SerializeJson(writer, options);

      if (current.FundsReserve != null)
      {
        writer.WritePropertyName("fundsReserve");
        current.FundsReserve.SerializeJson(writer, options);
      }

      if ((current.Related != null) && (current.Related.Count != 0))
      {
        writer.WritePropertyName("related");
        writer.WriteStartArray();
        foreach (Claim.RelatedClaimComponent val in current.Related)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Prescription != null)
      {
        writer.WritePropertyName("prescription");
        current.Prescription.SerializeJson(writer, options);
      }

      if (current.OriginalPrescription != null)
      {
        writer.WritePropertyName("originalPrescription");
        current.OriginalPrescription.SerializeJson(writer, options);
      }

      if (current.Payee != null)
      {
        writer.WritePropertyName("payee");
        current.Payee.SerializeJson(writer, options);
      }

      if (current.Referral != null)
      {
        writer.WritePropertyName("referral");
        current.Referral.SerializeJson(writer, options);
      }

      if (current.Facility != null)
      {
        writer.WritePropertyName("facility");
        current.Facility.SerializeJson(writer, options);
      }

      if ((current.CareTeam != null) && (current.CareTeam.Count != 0))
      {
        writer.WritePropertyName("careTeam");
        writer.WriteStartArray();
        foreach (Claim.CareTeamComponent val in current.CareTeam)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SupportingInfo != null) && (current.SupportingInfo.Count != 0))
      {
        writer.WritePropertyName("supportingInfo");
        writer.WriteStartArray();
        foreach (Claim.SupportingInformationComponent val in current.SupportingInfo)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Diagnosis != null) && (current.Diagnosis.Count != 0))
      {
        writer.WritePropertyName("diagnosis");
        writer.WriteStartArray();
        foreach (Claim.DiagnosisComponent val in current.Diagnosis)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Procedure != null) && (current.Procedure.Count != 0))
      {
        writer.WritePropertyName("procedure");
        writer.WriteStartArray();
        foreach (Claim.ProcedureComponent val in current.Procedure)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Insurance != null) && (current.Insurance.Count != 0))
      {
        writer.WritePropertyName("insurance");
        writer.WriteStartArray();
        foreach (Claim.InsuranceComponent val in current.Insurance)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Accident != null)
      {
        writer.WritePropertyName("accident");
        current.Accident.SerializeJson(writer, options);
      }

      if ((current.Item != null) && (current.Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();
        foreach (Claim.ItemComponent val in current.Item)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Total != null)
      {
        writer.WritePropertyName("total");
        current.Total.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim
    /// </summary>
    public static void DeserializeJson(this Claim current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim
    /// </summary>
    public static void DeserializeJsonProperty(this Claim current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FinancialResourceStatusCodes>(reader.GetString()));
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          current.Type.DeserializeJson(ref reader, options);
          break;

        case "subType":
          current.SubType = new Hl7.Fhir.Model.CodeableConcept();
          current.SubType.DeserializeJson(ref reader, options);
          break;

        case "use":
          current.UseElement =new Code<Hl7.Fhir.Model.Use>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Use>(reader.GetString()));
          break;

        case "patient":
          current.Patient = new Hl7.Fhir.Model.ResourceReference();
          current.Patient.DeserializeJson(ref reader, options);
          break;

        case "billablePeriod":
          current.BillablePeriod = new Hl7.Fhir.Model.Period();
          current.BillablePeriod.DeserializeJson(ref reader, options);
          break;

        case "created":
          current.CreatedElement = new FhirDateTime(reader.GetString());
          break;

        case "enterer":
          current.Enterer = new Hl7.Fhir.Model.ResourceReference();
          current.Enterer.DeserializeJson(ref reader, options);
          break;

        case "insurer":
          current.Insurer = new Hl7.Fhir.Model.ResourceReference();
          current.Insurer.DeserializeJson(ref reader, options);
          break;

        case "provider":
          current.Provider = new Hl7.Fhir.Model.ResourceReference();
          current.Provider.DeserializeJson(ref reader, options);
          break;

        case "priority":
          current.Priority = new Hl7.Fhir.Model.CodeableConcept();
          current.Priority.DeserializeJson(ref reader, options);
          break;

        case "fundsReserve":
          current.FundsReserve = new Hl7.Fhir.Model.CodeableConcept();
          current.FundsReserve.DeserializeJson(ref reader, options);
          break;

        case "related":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Related = new List<Claim.RelatedClaimComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.RelatedClaimComponent v_Related = new Hl7.Fhir.Model.Claim.RelatedClaimComponent();
            v_Related.DeserializeJson(ref reader, options);
            current.Related.Add(v_Related);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Related.Count == 0)
          {
            current.Related = null;
          }
          break;

        case "prescription":
          current.Prescription = new Hl7.Fhir.Model.ResourceReference();
          current.Prescription.DeserializeJson(ref reader, options);
          break;

        case "originalPrescription":
          current.OriginalPrescription = new Hl7.Fhir.Model.ResourceReference();
          current.OriginalPrescription.DeserializeJson(ref reader, options);
          break;

        case "payee":
          current.Payee = new Hl7.Fhir.Model.Claim.PayeeComponent();
          current.Payee.DeserializeJson(ref reader, options);
          break;

        case "referral":
          current.Referral = new Hl7.Fhir.Model.ResourceReference();
          current.Referral.DeserializeJson(ref reader, options);
          break;

        case "facility":
          current.Facility = new Hl7.Fhir.Model.ResourceReference();
          current.Facility.DeserializeJson(ref reader, options);
          break;

        case "careTeam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.CareTeam = new List<Claim.CareTeamComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.CareTeamComponent v_CareTeam = new Hl7.Fhir.Model.Claim.CareTeamComponent();
            v_CareTeam.DeserializeJson(ref reader, options);
            current.CareTeam.Add(v_CareTeam);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CareTeam.Count == 0)
          {
            current.CareTeam = null;
          }
          break;

        case "supportingInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SupportingInfo = new List<Claim.SupportingInformationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.SupportingInformationComponent v_SupportingInfo = new Hl7.Fhir.Model.Claim.SupportingInformationComponent();
            v_SupportingInfo.DeserializeJson(ref reader, options);
            current.SupportingInfo.Add(v_SupportingInfo);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SupportingInfo.Count == 0)
          {
            current.SupportingInfo = null;
          }
          break;

        case "diagnosis":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Diagnosis = new List<Claim.DiagnosisComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.DiagnosisComponent v_Diagnosis = new Hl7.Fhir.Model.Claim.DiagnosisComponent();
            v_Diagnosis.DeserializeJson(ref reader, options);
            current.Diagnosis.Add(v_Diagnosis);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Diagnosis.Count == 0)
          {
            current.Diagnosis = null;
          }
          break;

        case "procedure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Procedure = new List<Claim.ProcedureComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.ProcedureComponent v_Procedure = new Hl7.Fhir.Model.Claim.ProcedureComponent();
            v_Procedure.DeserializeJson(ref reader, options);
            current.Procedure.Add(v_Procedure);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Procedure.Count == 0)
          {
            current.Procedure = null;
          }
          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Insurance = new List<Claim.InsuranceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.InsuranceComponent v_Insurance = new Hl7.Fhir.Model.Claim.InsuranceComponent();
            v_Insurance.DeserializeJson(ref reader, options);
            current.Insurance.Add(v_Insurance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Insurance.Count == 0)
          {
            current.Insurance = null;
          }
          break;

        case "accident":
          current.Accident = new Hl7.Fhir.Model.Claim.AccidentComponent();
          current.Accident.DeserializeJson(ref reader, options);
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Item = new List<Claim.ItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.ItemComponent v_Item = new Hl7.Fhir.Model.Claim.ItemComponent();
            v_Item.DeserializeJson(ref reader, options);
            current.Item.Add(v_Item);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Item.Count == 0)
          {
            current.Item = null;
          }
          break;

        case "total":
          current.Total = new Hl7.Fhir.Model.Money();
          current.Total.DeserializeJson(ref reader, options);
          break;

        // Complex: Claim, Export: Claim, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#RelatedClaim into JSON
    /// </summary>
    public static void SerializeJson(this Claim.RelatedClaimComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#RelatedClaim, Export: RelatedClaimComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Claim != null)
      {
        writer.WritePropertyName("claim");
        current.Claim.SerializeJson(writer, options);
      }

      if (current.Relationship != null)
      {
        writer.WritePropertyName("relationship");
        current.Relationship.SerializeJson(writer, options);
      }

      if (current.Reference != null)
      {
        writer.WritePropertyName("reference");
        current.Reference.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#RelatedClaim
    /// </summary>
    public static void DeserializeJson(this Claim.RelatedClaimComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#RelatedClaim
    /// </summary>
    public static void DeserializeJsonProperty(this Claim.RelatedClaimComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "claim":
          current.Claim = new Hl7.Fhir.Model.ResourceReference();
          current.Claim.DeserializeJson(ref reader, options);
          break;

        case "relationship":
          current.Relationship = new Hl7.Fhir.Model.CodeableConcept();
          current.Relationship.DeserializeJson(ref reader, options);
          break;

        case "reference":
          current.Reference = new Hl7.Fhir.Model.Identifier();
          current.Reference.DeserializeJson(ref reader, options);
          break;

        // Complex: related, Export: RelatedClaimComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Payee into JSON
    /// </summary>
    public static void SerializeJson(this Claim.PayeeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Payee, Export: PayeeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if (current.Party != null)
      {
        writer.WritePropertyName("party");
        current.Party.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Payee
    /// </summary>
    public static void DeserializeJson(this Claim.PayeeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Payee
    /// </summary>
    public static void DeserializeJsonProperty(this Claim.PayeeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          current.Type.DeserializeJson(ref reader, options);
          break;

        case "party":
          current.Party = new Hl7.Fhir.Model.ResourceReference();
          current.Party.DeserializeJson(ref reader, options);
          break;

        // Complex: payee, Export: PayeeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#CareTeam into JSON
    /// </summary>
    public static void SerializeJson(this Claim.CareTeamComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#CareTeam, Export: CareTeamComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      writer.WritePropertyName("provider");
      current.Provider.SerializeJson(writer, options);

      if ((current.ResponsibleElement != null) && (current.ResponsibleElement.Value != null))
      {
        writer.WriteBoolean("responsible",(bool)current.ResponsibleElement.Value);
      }

      if (current.Role != null)
      {
        writer.WritePropertyName("role");
        current.Role.SerializeJson(writer, options);
      }

      if (current.Qualification != null)
      {
        writer.WritePropertyName("qualification");
        current.Qualification.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#CareTeam
    /// </summary>
    public static void DeserializeJson(this Claim.CareTeamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#CareTeam
    /// </summary>
    public static void DeserializeJsonProperty(this Claim.CareTeamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "provider":
          current.Provider = new Hl7.Fhir.Model.ResourceReference();
          current.Provider.DeserializeJson(ref reader, options);
          break;

        case "responsible":
          current.ResponsibleElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "role":
          current.Role = new Hl7.Fhir.Model.CodeableConcept();
          current.Role.DeserializeJson(ref reader, options);
          break;

        case "qualification":
          current.Qualification = new Hl7.Fhir.Model.CodeableConcept();
          current.Qualification.DeserializeJson(ref reader, options);
          break;

        // Complex: careTeam, Export: CareTeamComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#SupportingInformation into JSON
    /// </summary>
    public static void SerializeJson(this Claim.SupportingInformationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#SupportingInformation, Export: SupportingInformationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      writer.WritePropertyName("category");
      current.Category.SerializeJson(writer, options);

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (current.Timing != null)
      {
        switch (current.Timing)
        {
          case Date v_Date:
            writer.WriteString("timingDate",v_Date.Value);
            break;
          case Period v_Period:
            writer.WritePropertyName("timingPeriod");
            v_Period.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Value != null)
      {
        switch (current.Value)
        {
          case FhirBoolean v_FhirBoolean:
            writer.WriteBoolean("valueBoolean", (bool)v_FhirBoolean.Value);
            break;
          case FhirString v_FhirString:
            writer.WriteString("valueString",v_FhirString.Value);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("valueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Attachment v_Attachment:
            writer.WritePropertyName("valueAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("valueReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Reason != null)
      {
        writer.WritePropertyName("reason");
        current.Reason.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#SupportingInformation
    /// </summary>
    public static void DeserializeJson(this Claim.SupportingInformationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#SupportingInformation
    /// </summary>
    public static void DeserializeJsonProperty(this Claim.SupportingInformationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          current.Category.DeserializeJson(ref reader, options);
          break;

        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          current.Code.DeserializeJson(ref reader, options);
          break;

        case "timingDate":
          current.Timing = new Date(reader.GetString());
          break;

        case "timingPeriod":
          current.Timing = new Hl7.Fhir.Model.Period();
          current.Timing.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          current.Value = new FhirBoolean(reader.GetBoolean());
          break;

        case "valueString":
          current.Value = new FhirString(reader.GetString());
          break;

        case "valueQuantity":
          current.Value = new Hl7.Fhir.Model.Quantity();
          current.Value.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          current.Value = new Hl7.Fhir.Model.Attachment();
          current.Value.DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          current.Value = new Hl7.Fhir.Model.ResourceReference();
          current.Value.DeserializeJson(ref reader, options);
          break;

        case "reason":
          current.Reason = new Hl7.Fhir.Model.CodeableConcept();
          current.Reason.DeserializeJson(ref reader, options);
          break;

        // Complex: supportingInfo, Export: SupportingInformationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Diagnosis into JSON
    /// </summary>
    public static void SerializeJson(this Claim.DiagnosisComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Diagnosis, Export: DiagnosisComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      if (current.Diagnosis != null)
      {
        switch (current.Diagnosis)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("diagnosisCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("diagnosisReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.Type != null) && (current.Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Type)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.OnAdmission != null)
      {
        writer.WritePropertyName("onAdmission");
        current.OnAdmission.SerializeJson(writer, options);
      }

      if (current.PackageCode != null)
      {
        writer.WritePropertyName("packageCode");
        current.PackageCode.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Diagnosis
    /// </summary>
    public static void DeserializeJson(this Claim.DiagnosisComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Diagnosis
    /// </summary>
    public static void DeserializeJsonProperty(this Claim.DiagnosisComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "diagnosisCodeableConcept":
          current.Diagnosis = new Hl7.Fhir.Model.CodeableConcept();
          current.Diagnosis.DeserializeJson(ref reader, options);
          break;

        case "diagnosisReference":
          current.Diagnosis = new Hl7.Fhir.Model.ResourceReference();
          current.Diagnosis.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Type = new Hl7.Fhir.Model.CodeableConcept();
            v_Type.DeserializeJson(ref reader, options);
            current.Type.Add(v_Type);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }
          break;

        case "onAdmission":
          current.OnAdmission = new Hl7.Fhir.Model.CodeableConcept();
          current.OnAdmission.DeserializeJson(ref reader, options);
          break;

        case "packageCode":
          current.PackageCode = new Hl7.Fhir.Model.CodeableConcept();
          current.PackageCode.DeserializeJson(ref reader, options);
          break;

        // Complex: diagnosis, Export: DiagnosisComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Procedure into JSON
    /// </summary>
    public static void SerializeJson(this Claim.ProcedureComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Procedure, Export: ProcedureComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      if ((current.Type != null) && (current.Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Type)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if (current.Procedure != null)
      {
        switch (current.Procedure)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("procedureCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("procedureReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.Udi != null) && (current.Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Udi)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Procedure
    /// </summary>
    public static void DeserializeJson(this Claim.ProcedureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Procedure
    /// </summary>
    public static void DeserializeJsonProperty(this Claim.ProcedureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Type = new Hl7.Fhir.Model.CodeableConcept();
            v_Type.DeserializeJson(ref reader, options);
            current.Type.Add(v_Type);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }
          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());
          break;

        case "procedureCodeableConcept":
          current.Procedure = new Hl7.Fhir.Model.CodeableConcept();
          current.Procedure.DeserializeJson(ref reader, options);
          break;

        case "procedureReference":
          current.Procedure = new Hl7.Fhir.Model.ResourceReference();
          current.Procedure.DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Udi = new Hl7.Fhir.Model.ResourceReference();
            v_Udi.DeserializeJson(ref reader, options);
            current.Udi.Add(v_Udi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }
          break;

        // Complex: procedure, Export: ProcedureComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Insurance into JSON
    /// </summary>
    public static void SerializeJson(this Claim.InsuranceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Insurance, Export: InsuranceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      writer.WriteBoolean("focal",(bool)current.FocalElement.Value);

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      writer.WritePropertyName("coverage");
      current.Coverage.SerializeJson(writer, options);

      if ((current.BusinessArrangementElement != null) && (current.BusinessArrangementElement.Value != null))
      {
        writer.WriteString("businessArrangement",current.BusinessArrangementElement.Value);
      }

      if ((current.PreAuthRefElement != null) && (current.PreAuthRefElement.Count != 0))
      {
        writer.WritePropertyName("preAuthRef");
        writer.WriteStartArray();
        foreach (FhirString val in current.PreAuthRefElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (current.ClaimResponse != null)
      {
        writer.WritePropertyName("claimResponse");
        current.ClaimResponse.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Insurance
    /// </summary>
    public static void DeserializeJson(this Claim.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Insurance
    /// </summary>
    public static void DeserializeJsonProperty(this Claim.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "focal":
          current.FocalElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          current.Identifier.DeserializeJson(ref reader, options);
          break;

        case "coverage":
          current.Coverage = new Hl7.Fhir.Model.ResourceReference();
          current.Coverage.DeserializeJson(ref reader, options);
          break;

        case "businessArrangement":
          current.BusinessArrangementElement = new FhirString(reader.GetString());
          break;

        case "preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PreAuthRefElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.PreAuthRefElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PreAuthRefElement.Count == 0)
          {
            current.PreAuthRefElement = null;
          }
          break;

        case "claimResponse":
          current.ClaimResponse = new Hl7.Fhir.Model.ResourceReference();
          current.ClaimResponse.DeserializeJson(ref reader, options);
          break;

        // Complex: insurance, Export: InsuranceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Accident into JSON
    /// </summary>
    public static void SerializeJson(this Claim.AccidentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Accident, Export: AccidentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("date",current.DateElement.Value);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Location != null)
      {
        switch (current.Location)
        {
          case Address v_Address:
            writer.WritePropertyName("locationAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("locationReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Accident
    /// </summary>
    public static void DeserializeJson(this Claim.AccidentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Accident
    /// </summary>
    public static void DeserializeJsonProperty(this Claim.AccidentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          current.DateElement = new Date(reader.GetString());
          break;

        case "_date":
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          current.Type.DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          current.Location = new Hl7.Fhir.Model.Address();
          current.Location.DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          current.Location.DeserializeJson(ref reader, options);
          break;

        // Complex: accident, Export: AccidentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Item into JSON
    /// </summary>
    public static void SerializeJson(this Claim.ItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Item, Export: ItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      if ((current.CareTeamSequenceElement != null) && (current.CareTeamSequenceElement.Count != 0))
      {
        writer.WritePropertyName("careTeamSequence");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.CareTeamSequenceElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.DiagnosisSequenceElement != null) && (current.DiagnosisSequenceElement.Count != 0))
      {
        writer.WritePropertyName("diagnosisSequence");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.DiagnosisSequenceElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.ProcedureSequenceElement != null) && (current.ProcedureSequenceElement.Count != 0))
      {
        writer.WritePropertyName("procedureSequence");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.ProcedureSequenceElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.InformationSequenceElement != null) && (current.InformationSequenceElement.Count != 0))
      {
        writer.WritePropertyName("informationSequence");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.InformationSequenceElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if (current.Revenue != null)
      {
        writer.WritePropertyName("revenue");
        current.Revenue.SerializeJson(writer, options);
      }

      if (current.Category != null)
      {
        writer.WritePropertyName("category");
        current.Category.SerializeJson(writer, options);
      }

      writer.WritePropertyName("productOrService");
      current.ProductOrService.SerializeJson(writer, options);

      if ((current.Modifier != null) && (current.Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Modifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProgramCode != null) && (current.ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProgramCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Serviced != null)
      {
        switch (current.Serviced)
        {
          case Date v_Date:
            writer.WriteString("servicedDate",v_Date.Value);
            break;
          case Period v_Period:
            writer.WritePropertyName("servicedPeriod");
            v_Period.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Location != null)
      {
        switch (current.Location)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("locationCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Address v_Address:
            writer.WritePropertyName("locationAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("locationReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        current.UnitPrice.SerializeJson(writer, options);
      }

      if ((current.FactorElement != null) && (current.FactorElement.Value != null))
      {
        writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
      }

      if (current.Net != null)
      {
        writer.WritePropertyName("net");
        current.Net.SerializeJson(writer, options);
      }

      if ((current.Udi != null) && (current.Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Udi)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.BodySite != null)
      {
        writer.WritePropertyName("bodySite");
        current.BodySite.SerializeJson(writer, options);
      }

      if ((current.SubSite != null) && (current.SubSite.Count != 0))
      {
        writer.WritePropertyName("subSite");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.SubSite)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Encounter != null) && (current.Encounter.Count != 0))
      {
        writer.WritePropertyName("encounter");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Encounter)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Detail != null) && (current.Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();
        foreach (Claim.DetailComponent val in current.Detail)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Item
    /// </summary>
    public static void DeserializeJson(this Claim.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Item
    /// </summary>
    public static void DeserializeJsonProperty(this Claim.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "careTeamSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.CareTeamSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.CareTeamSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CareTeamSequenceElement.Count == 0)
          {
            current.CareTeamSequenceElement = null;
          }
          break;

        case "diagnosisSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.DiagnosisSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.DiagnosisSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DiagnosisSequenceElement.Count == 0)
          {
            current.DiagnosisSequenceElement = null;
          }
          break;

        case "procedureSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProcedureSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ProcedureSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProcedureSequenceElement.Count == 0)
          {
            current.ProcedureSequenceElement = null;
          }
          break;

        case "informationSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.InformationSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.InformationSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.InformationSequenceElement.Count == 0)
          {
            current.InformationSequenceElement = null;
          }
          break;

        case "revenue":
          current.Revenue = new Hl7.Fhir.Model.CodeableConcept();
          current.Revenue.DeserializeJson(ref reader, options);
          break;

        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          current.Category.DeserializeJson(ref reader, options);
          break;

        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          current.ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramCode.DeserializeJson(ref reader, options);
            current.ProgramCode.Add(v_ProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }
          break;

        case "servicedDate":
          current.Serviced = new Date(reader.GetString());
          break;

        case "servicedPeriod":
          current.Serviced = new Hl7.Fhir.Model.Period();
          current.Serviced.DeserializeJson(ref reader, options);
          break;

        case "locationCodeableConcept":
          current.Location = new Hl7.Fhir.Model.CodeableConcept();
          current.Location.DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          current.Location = new Hl7.Fhir.Model.Address();
          current.Location.DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          current.Location.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          current.Quantity.DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          current.UnitPrice.DeserializeJson(ref reader, options);
          break;

        case "factor":
          current.FactorElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          current.Net.DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Udi = new Hl7.Fhir.Model.ResourceReference();
            v_Udi.DeserializeJson(ref reader, options);
            current.Udi.Add(v_Udi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }
          break;

        case "bodySite":
          current.BodySite = new Hl7.Fhir.Model.CodeableConcept();
          current.BodySite.DeserializeJson(ref reader, options);
          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubSite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_SubSite = new Hl7.Fhir.Model.CodeableConcept();
            v_SubSite.DeserializeJson(ref reader, options);
            current.SubSite.Add(v_SubSite);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubSite.Count == 0)
          {
            current.SubSite = null;
          }
          break;

        case "encounter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Encounter = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Encounter = new Hl7.Fhir.Model.ResourceReference();
            v_Encounter.DeserializeJson(ref reader, options);
            current.Encounter.Add(v_Encounter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Encounter.Count == 0)
          {
            current.Encounter = null;
          }
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Detail = new List<Claim.DetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.DetailComponent v_Detail = new Hl7.Fhir.Model.Claim.DetailComponent();
            v_Detail.DeserializeJson(ref reader, options);
            current.Detail.Add(v_Detail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Detail.Count == 0)
          {
            current.Detail = null;
          }
          break;

        // Complex: item, Export: ItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Detail into JSON
    /// </summary>
    public static void SerializeJson(this Claim.DetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Detail, Export: DetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      if (current.Revenue != null)
      {
        writer.WritePropertyName("revenue");
        current.Revenue.SerializeJson(writer, options);
      }

      if (current.Category != null)
      {
        writer.WritePropertyName("category");
        current.Category.SerializeJson(writer, options);
      }

      writer.WritePropertyName("productOrService");
      current.ProductOrService.SerializeJson(writer, options);

      if ((current.Modifier != null) && (current.Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Modifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProgramCode != null) && (current.ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProgramCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        current.UnitPrice.SerializeJson(writer, options);
      }

      if ((current.FactorElement != null) && (current.FactorElement.Value != null))
      {
        writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
      }

      if (current.Net != null)
      {
        writer.WritePropertyName("net");
        current.Net.SerializeJson(writer, options);
      }

      if ((current.Udi != null) && (current.Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Udi)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SubDetail != null) && (current.SubDetail.Count != 0))
      {
        writer.WritePropertyName("subDetail");
        writer.WriteStartArray();
        foreach (Claim.SubDetailComponent val in current.SubDetail)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Detail
    /// </summary>
    public static void DeserializeJson(this Claim.DetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Detail
    /// </summary>
    public static void DeserializeJsonProperty(this Claim.DetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "revenue":
          current.Revenue = new Hl7.Fhir.Model.CodeableConcept();
          current.Revenue.DeserializeJson(ref reader, options);
          break;

        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          current.Category.DeserializeJson(ref reader, options);
          break;

        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          current.ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramCode.DeserializeJson(ref reader, options);
            current.ProgramCode.Add(v_ProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          current.Quantity.DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          current.UnitPrice.DeserializeJson(ref reader, options);
          break;

        case "factor":
          current.FactorElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          current.Net.DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Udi = new Hl7.Fhir.Model.ResourceReference();
            v_Udi.DeserializeJson(ref reader, options);
            current.Udi.Add(v_Udi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubDetail = new List<Claim.SubDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.SubDetailComponent v_SubDetail = new Hl7.Fhir.Model.Claim.SubDetailComponent();
            v_SubDetail.DeserializeJson(ref reader, options);
            current.SubDetail.Add(v_SubDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubDetail.Count == 0)
          {
            current.SubDetail = null;
          }
          break;

        // Complex: detail, Export: DetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#SubDetail into JSON
    /// </summary>
    public static void SerializeJson(this Claim.SubDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#SubDetail, Export: SubDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      if (current.Revenue != null)
      {
        writer.WritePropertyName("revenue");
        current.Revenue.SerializeJson(writer, options);
      }

      if (current.Category != null)
      {
        writer.WritePropertyName("category");
        current.Category.SerializeJson(writer, options);
      }

      writer.WritePropertyName("productOrService");
      current.ProductOrService.SerializeJson(writer, options);

      if ((current.Modifier != null) && (current.Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Modifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProgramCode != null) && (current.ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProgramCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        current.UnitPrice.SerializeJson(writer, options);
      }

      if ((current.FactorElement != null) && (current.FactorElement.Value != null))
      {
        writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
      }

      if (current.Net != null)
      {
        writer.WritePropertyName("net");
        current.Net.SerializeJson(writer, options);
      }

      if ((current.Udi != null) && (current.Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Udi)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#SubDetail
    /// </summary>
    public static void DeserializeJson(this Claim.SubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#SubDetail
    /// </summary>
    public static void DeserializeJsonProperty(this Claim.SubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());
          break;

        case "revenue":
          current.Revenue = new Hl7.Fhir.Model.CodeableConcept();
          current.Revenue.DeserializeJson(ref reader, options);
          break;

        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          current.Category.DeserializeJson(ref reader, options);
          break;

        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          current.ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramCode.DeserializeJson(ref reader, options);
            current.ProgramCode.Add(v_ProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          current.Quantity.DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          current.UnitPrice.DeserializeJson(ref reader, options);
          break;

        case "factor":
          current.FactorElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          current.Net.DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Udi = new Hl7.Fhir.Model.ResourceReference();
            v_Udi.DeserializeJson(ref reader, options);
            current.Udi.Add(v_Udi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }
          break;

        // Complex: subDetail, Export: SubDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ClaimJsonConverter : JsonConverter<Claim>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(Claim).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Claim value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Claim Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        Claim target = new Claim();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
