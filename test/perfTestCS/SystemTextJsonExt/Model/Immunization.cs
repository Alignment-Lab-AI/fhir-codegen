// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for Immunization
  /// </summary>
  public static class ImmunizationJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR Immunization into JSON
    /// </summary>
    public static void SerializeJson(this Immunization current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","Immunization");
      // Complex: Immunization, Export: Immunization, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if (current.StatusReason != null)
      {
        writer.WritePropertyName("statusReason");
        current.StatusReason.SerializeJson(writer, options);
      }

      writer.WritePropertyName("vaccineCode");
      current.VaccineCode.SerializeJson(writer, options);

      writer.WritePropertyName("patient");
      current.Patient.SerializeJson(writer, options);

      if (current.Encounter != null)
      {
        writer.WritePropertyName("encounter");
        current.Encounter.SerializeJson(writer, options);
      }

      if (current.Occurrence != null)
      {
        switch (current.Occurrence)
        {
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("occurrenceDateTime",v_FhirDateTime.Value);
            break;
          case FhirString v_FhirString:
            writer.WriteString("occurrenceString",v_FhirString.Value);
            break;
        }
      }
      if ((current.RecordedElement != null) && (current.RecordedElement.Value != null))
      {
        writer.WriteString("recorded",current.RecordedElement.Value);
      }

      if ((current.PrimarySourceElement != null) && (current.PrimarySourceElement.Value != null))
      {
        writer.WriteBoolean("primarySource",(bool)current.PrimarySourceElement.Value);
      }

      if (current.ReportOrigin != null)
      {
        writer.WritePropertyName("reportOrigin");
        current.ReportOrigin.SerializeJson(writer, options);
      }

      if (current.Location != null)
      {
        writer.WritePropertyName("location");
        current.Location.SerializeJson(writer, options);
      }

      if (current.Manufacturer != null)
      {
        writer.WritePropertyName("manufacturer");
        current.Manufacturer.SerializeJson(writer, options);
      }

      if ((current.LotNumberElement != null) && (current.LotNumberElement.Value != null))
      {
        writer.WriteString("lotNumber",current.LotNumberElement.Value);
      }

      if ((current.ExpirationDateElement != null) && (current.ExpirationDateElement.Value != null))
      {
        writer.WriteString("expirationDate",current.ExpirationDateElement.Value);
      }

      if (current.Site != null)
      {
        writer.WritePropertyName("site");
        current.Site.SerializeJson(writer, options);
      }

      if (current.Route != null)
      {
        writer.WritePropertyName("route");
        current.Route.SerializeJson(writer, options);
      }

      if (current.DoseQuantity != null)
      {
        writer.WritePropertyName("doseQuantity");
        current.DoseQuantity.SerializeJson(writer, options);
      }

      if ((current.Performer != null) && (current.Performer.Count != 0))
      {
        writer.WritePropertyName("performer");
        writer.WriteStartArray();
        foreach (Immunization.PerformerComponent val in current.Performer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Note != null) && (current.Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();
        foreach (Annotation val in current.Note)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ReasonCode != null) && (current.ReasonCode.Count != 0))
      {
        writer.WritePropertyName("reasonCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ReasonCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ReasonReference != null) && (current.ReasonReference.Count != 0))
      {
        writer.WritePropertyName("reasonReference");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.ReasonReference)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.IsSubpotentElement != null) && (current.IsSubpotentElement.Value != null))
      {
        writer.WriteBoolean("isSubpotent",(bool)current.IsSubpotentElement.Value);
      }

      if ((current.SubpotentReason != null) && (current.SubpotentReason.Count != 0))
      {
        writer.WritePropertyName("subpotentReason");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.SubpotentReason)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Education != null) && (current.Education.Count != 0))
      {
        writer.WritePropertyName("education");
        writer.WriteStartArray();
        foreach (Immunization.EducationComponent val in current.Education)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProgramEligibility != null) && (current.ProgramEligibility.Count != 0))
      {
        writer.WritePropertyName("programEligibility");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProgramEligibility)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.FundingSource != null)
      {
        writer.WritePropertyName("fundingSource");
        current.FundingSource.SerializeJson(writer, options);
      }

      if ((current.Reaction != null) && (current.Reaction.Count != 0))
      {
        writer.WritePropertyName("reaction");
        writer.WriteStartArray();
        foreach (Immunization.ReactionComponent val in current.Reaction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProtocolApplied != null) && (current.ProtocolApplied.Count != 0))
      {
        writer.WritePropertyName("protocolApplied");
        writer.WriteStartArray();
        foreach (Immunization.ProtocolAppliedComponent val in current.ProtocolApplied)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization
    /// </summary>
    public static void DeserializeJson(this Immunization current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization
    /// </summary>
    public static void DeserializeJsonProperty(this Immunization current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes>(reader.GetString()));
          break;

        case "statusReason":
          current.StatusReason = new Hl7.Fhir.Model.CodeableConcept();
          current.StatusReason.DeserializeJson(ref reader, options);
          break;

        case "vaccineCode":
          current.VaccineCode = new Hl7.Fhir.Model.CodeableConcept();
          current.VaccineCode.DeserializeJson(ref reader, options);
          break;

        case "patient":
          current.Patient = new Hl7.Fhir.Model.ResourceReference();
          current.Patient.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          current.Encounter = new Hl7.Fhir.Model.ResourceReference();
          current.Encounter.DeserializeJson(ref reader, options);
          break;

        case "occurrenceDateTime":
          current.Occurrence = new FhirDateTime(reader.GetString());
          break;

        case "occurrenceString":
          current.Occurrence = new FhirString(reader.GetString());
          break;

        case "recorded":
          current.RecordedElement = new FhirDateTime(reader.GetString());
          break;

        case "primarySource":
          current.PrimarySourceElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "reportOrigin":
          current.ReportOrigin = new Hl7.Fhir.Model.CodeableConcept();
          current.ReportOrigin.DeserializeJson(ref reader, options);
          break;

        case "location":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          current.Location.DeserializeJson(ref reader, options);
          break;

        case "manufacturer":
          current.Manufacturer = new Hl7.Fhir.Model.ResourceReference();
          current.Manufacturer.DeserializeJson(ref reader, options);
          break;

        case "lotNumber":
          current.LotNumberElement = new FhirString(reader.GetString());
          break;

        case "expirationDate":
          current.ExpirationDateElement = new Date(reader.GetString());
          break;

        case "_expirationDate":
          ((Hl7.Fhir.Model.Element)current.ExpirationDateElement).DeserializeJson(ref reader, options);
          break;

        case "site":
          current.Site = new Hl7.Fhir.Model.CodeableConcept();
          current.Site.DeserializeJson(ref reader, options);
          break;

        case "route":
          current.Route = new Hl7.Fhir.Model.CodeableConcept();
          current.Route.DeserializeJson(ref reader, options);
          break;

        case "doseQuantity":
          current.DoseQuantity = new Hl7.Fhir.Model.Quantity();
          current.DoseQuantity.DeserializeJson(ref reader, options);
          break;

        case "performer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Performer = new List<Immunization.PerformerComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Immunization.PerformerComponent v_Performer = new Hl7.Fhir.Model.Immunization.PerformerComponent();
            v_Performer.DeserializeJson(ref reader, options);
            current.Performer.Add(v_Performer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Performer.Count == 0)
          {
            current.Performer = null;
          }
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Annotation v_Note = new Hl7.Fhir.Model.Annotation();
            v_Note.DeserializeJson(ref reader, options);
            current.Note.Add(v_Note);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }
          break;

        case "reasonCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ReasonCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ReasonCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ReasonCode.DeserializeJson(ref reader, options);
            current.ReasonCode.Add(v_ReasonCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonCode.Count == 0)
          {
            current.ReasonCode = null;
          }
          break;

        case "reasonReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ReasonReference = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_ReasonReference = new Hl7.Fhir.Model.ResourceReference();
            v_ReasonReference.DeserializeJson(ref reader, options);
            current.ReasonReference.Add(v_ReasonReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonReference.Count == 0)
          {
            current.ReasonReference = null;
          }
          break;

        case "isSubpotent":
          current.IsSubpotentElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "subpotentReason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubpotentReason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_SubpotentReason = new Hl7.Fhir.Model.CodeableConcept();
            v_SubpotentReason.DeserializeJson(ref reader, options);
            current.SubpotentReason.Add(v_SubpotentReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubpotentReason.Count == 0)
          {
            current.SubpotentReason = null;
          }
          break;

        case "education":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Education = new List<Immunization.EducationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Immunization.EducationComponent v_Education = new Hl7.Fhir.Model.Immunization.EducationComponent();
            v_Education.DeserializeJson(ref reader, options);
            current.Education.Add(v_Education);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Education.Count == 0)
          {
            current.Education = null;
          }
          break;

        case "programEligibility":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProgramEligibility = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramEligibility = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramEligibility.DeserializeJson(ref reader, options);
            current.ProgramEligibility.Add(v_ProgramEligibility);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramEligibility.Count == 0)
          {
            current.ProgramEligibility = null;
          }
          break;

        case "fundingSource":
          current.FundingSource = new Hl7.Fhir.Model.CodeableConcept();
          current.FundingSource.DeserializeJson(ref reader, options);
          break;

        case "reaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Reaction = new List<Immunization.ReactionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Immunization.ReactionComponent v_Reaction = new Hl7.Fhir.Model.Immunization.ReactionComponent();
            v_Reaction.DeserializeJson(ref reader, options);
            current.Reaction.Add(v_Reaction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Reaction.Count == 0)
          {
            current.Reaction = null;
          }
          break;

        case "protocolApplied":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProtocolApplied = new List<Immunization.ProtocolAppliedComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent v_ProtocolApplied = new Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent();
            v_ProtocolApplied.DeserializeJson(ref reader, options);
            current.ProtocolApplied.Add(v_ProtocolApplied);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProtocolApplied.Count == 0)
          {
            current.ProtocolApplied = null;
          }
          break;

        // Complex: Immunization, Export: Immunization, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Immunization#Performer into JSON
    /// </summary>
    public static void SerializeJson(this Immunization.PerformerComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Immunization#Performer, Export: PerformerComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Function != null)
      {
        writer.WritePropertyName("function");
        current.Function.SerializeJson(writer, options);
      }

      writer.WritePropertyName("actor");
      current.Actor.SerializeJson(writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#Performer
    /// </summary>
    public static void DeserializeJson(this Immunization.PerformerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#Performer
    /// </summary>
    public static void DeserializeJsonProperty(this Immunization.PerformerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "function":
          current.Function = new Hl7.Fhir.Model.CodeableConcept();
          current.Function.DeserializeJson(ref reader, options);
          break;

        case "actor":
          current.Actor = new Hl7.Fhir.Model.ResourceReference();
          current.Actor.DeserializeJson(ref reader, options);
          break;

        // Complex: performer, Export: PerformerComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Immunization#Education into JSON
    /// </summary>
    public static void SerializeJson(this Immunization.EducationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Immunization#Education, Export: EducationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.DocumentTypeElement != null) && (current.DocumentTypeElement.Value != null))
      {
        writer.WriteString("documentType",current.DocumentTypeElement.Value);
      }

      if ((current.ReferenceElement != null) && (current.ReferenceElement.Value != null))
      {
        writer.WriteString("reference",current.ReferenceElement.Value);
      }

      if ((current.PublicationDateElement != null) && (current.PublicationDateElement.Value != null))
      {
        writer.WriteString("publicationDate",current.PublicationDateElement.Value);
      }

      if ((current.PresentationDateElement != null) && (current.PresentationDateElement.Value != null))
      {
        writer.WriteString("presentationDate",current.PresentationDateElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#Education
    /// </summary>
    public static void DeserializeJson(this Immunization.EducationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#Education
    /// </summary>
    public static void DeserializeJsonProperty(this Immunization.EducationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "documentType":
          current.DocumentTypeElement = new FhirString(reader.GetString());
          break;

        case "reference":
          current.ReferenceElement = new FhirUri(reader.GetString());
          break;

        case "publicationDate":
          current.PublicationDateElement = new FhirDateTime(reader.GetString());
          break;

        case "presentationDate":
          current.PresentationDateElement = new FhirDateTime(reader.GetString());
          break;

        // Complex: education, Export: EducationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Immunization#Reaction into JSON
    /// </summary>
    public static void SerializeJson(this Immunization.ReactionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Immunization#Reaction, Export: ReactionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if (current.Detail != null)
      {
        writer.WritePropertyName("detail");
        current.Detail.SerializeJson(writer, options);
      }

      if ((current.ReportedElement != null) && (current.ReportedElement.Value != null))
      {
        writer.WriteBoolean("reported",(bool)current.ReportedElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#Reaction
    /// </summary>
    public static void DeserializeJson(this Immunization.ReactionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#Reaction
    /// </summary>
    public static void DeserializeJsonProperty(this Immunization.ReactionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());
          break;

        case "detail":
          current.Detail = new Hl7.Fhir.Model.ResourceReference();
          current.Detail.DeserializeJson(ref reader, options);
          break;

        case "reported":
          current.ReportedElement = new FhirBoolean(reader.GetBoolean());
          break;

        // Complex: reaction, Export: ReactionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Immunization#ProtocolApplied into JSON
    /// </summary>
    public static void SerializeJson(this Immunization.ProtocolAppliedComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Immunization#ProtocolApplied, Export: ProtocolAppliedComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.SeriesElement != null) && (current.SeriesElement.Value != null))
      {
        writer.WriteString("series",current.SeriesElement.Value);
      }

      if (current.Authority != null)
      {
        writer.WritePropertyName("authority");
        current.Authority.SerializeJson(writer, options);
      }

      if ((current.TargetDisease != null) && (current.TargetDisease.Count != 0))
      {
        writer.WritePropertyName("targetDisease");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.TargetDisease)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.DoseNumber != null)
      {
        switch (current.DoseNumber)
        {
          case PositiveInt v_PositiveInt:
            writer.WriteNumber("doseNumberPositiveInt",(int)v_PositiveInt.Value);
            break;
          case FhirString v_FhirString:
            writer.WriteString("doseNumberString",v_FhirString.Value);
            break;
        }
      }
      if (current.SeriesDoses != null)
      {
        switch (current.SeriesDoses)
        {
          case PositiveInt v_PositiveInt:
            writer.WriteNumber("seriesDosesPositiveInt",(int)v_PositiveInt.Value);
            break;
          case FhirString v_FhirString:
            writer.WriteString("seriesDosesString",v_FhirString.Value);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#ProtocolApplied
    /// </summary>
    public static void DeserializeJson(this Immunization.ProtocolAppliedComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#ProtocolApplied
    /// </summary>
    public static void DeserializeJsonProperty(this Immunization.ProtocolAppliedComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "series":
          current.SeriesElement = new FhirString(reader.GetString());
          break;

        case "authority":
          current.Authority = new Hl7.Fhir.Model.ResourceReference();
          current.Authority.DeserializeJson(ref reader, options);
          break;

        case "targetDisease":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.TargetDisease = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_TargetDisease = new Hl7.Fhir.Model.CodeableConcept();
            v_TargetDisease.DeserializeJson(ref reader, options);
            current.TargetDisease.Add(v_TargetDisease);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.TargetDisease.Count == 0)
          {
            current.TargetDisease = null;
          }
          break;

        case "doseNumberPositiveInt":
          current.DoseNumber = new PositiveInt(reader.GetInt32());
          break;

        case "doseNumberString":
          current.DoseNumber = new FhirString(reader.GetString());
          break;

        case "seriesDosesPositiveInt":
          current.SeriesDoses = new PositiveInt(reader.GetInt32());
          break;

        case "seriesDosesString":
          current.SeriesDoses = new FhirString(reader.GetString());
          break;

        // Complex: protocolApplied, Export: ProtocolAppliedComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ImmunizationJsonConverter : JsonConverter<Immunization>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(Immunization).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Immunization value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Immunization Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        Immunization target = new Immunization();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
