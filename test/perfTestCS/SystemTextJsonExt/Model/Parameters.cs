// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for Parameters
  /// </summary>
  public static class ParametersJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR Parameters into JSON
    /// </summary>
    public static void SerializeJson(this Parameters current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","Parameters");
      // Complex: Parameters, Export: Parameters, Base: Resource (Resource)
      ((Hl7.Fhir.Model.Resource)current).SerializeJson(writer, options, false);

      if ((current.Parameter != null) && (current.Parameter.Count != 0))
      {
        writer.WritePropertyName("parameter");
        writer.WriteStartArray();
        foreach (Parameters.ParameterComponent val in current.Parameter)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Parameters
    /// </summary>
    public static void DeserializeJson(this Parameters current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Parameters
    /// </summary>
    public static void DeserializeJsonProperty(this Parameters current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "parameter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Parameter = new List<Parameters.ParameterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Parameter.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Parameters.ParameterComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Parameter.Count == 0)
          {
            current.Parameter = null;
          }

          break;

        // Complex: Parameters, Export: Parameters, Base: Resource
        default:
          ((Hl7.Fhir.Model.Resource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Parameters#Parameter into JSON
    /// </summary>
    public static void SerializeJson(this Parameters.ParameterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Parameters#Parameter, Export: ParameterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case Base64Binary v_Base64Binary:
            writer.WriteBase64String("valueBase64Binary", (byte[])v_Base64Binary.Value);
            break;
          case FhirBoolean v_FhirBoolean:
            writer.WriteBoolean("valueBoolean", (bool)v_FhirBoolean.Value);
            break;
          case Canonical v_Canonical:
            writer.WriteString("valueCanonical",v_Canonical.Value);
            break;
          case Code v_Code:
            writer.WriteString("valueCode",v_Code.Value);
            break;
          case Date v_Date:
            writer.WriteString("valueDate",v_Date.Value);
            break;
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("valueDateTime",v_FhirDateTime.Value);
            break;
          case FhirDecimal v_FhirDecimal:
            writer.WriteNumber("valueDecimal",(decimal)v_FhirDecimal.Value);
            break;
          case Id v_Id:
            writer.WriteString("valueId",v_Id.Value);
            break;
          case Instant v_Instant:
            writer.WriteString("valueInstant",((DateTimeOffset)v_Instant.Value).ToString("yyyy-MM-dd'T'HH:mm:ss.FFFFFFFK", System.Globalization.CultureInfo.InvariantCulture));
            break;
          case Integer v_Integer:
            writer.WriteNumber("valueInteger",(int)v_Integer.Value);
            break;
          case Markdown v_Markdown:
            writer.WriteString("valueMarkdown",v_Markdown.Value);
            break;
          case Oid v_Oid:
            writer.WriteString("valueOid",v_Oid.Value);
            break;
          case PositiveInt v_PositiveInt:
            writer.WriteNumber("valuePositiveInt",(int)v_PositiveInt.Value);
            break;
          case FhirString v_FhirString:
            writer.WriteString("valueString",v_FhirString.Value);
            break;
          case Time v_Time:
            writer.WritePropertyName("valueTime");
            v_Time.SerializeJson(writer, options);
            break;
          case UnsignedInt v_UnsignedInt:
            writer.WriteNumber("valueUnsignedInt",(int)v_UnsignedInt.Value);
            break;
          case FhirUri v_FhirUri:
            writer.WriteString("valueUri",v_FhirUri.Value);
            break;
          case FhirUrl v_FhirUrl:
            writer.WriteString("valueUrl",v_FhirUrl.Value);
            break;
          case Uuid v_Uuid:
            writer.WriteString("valueUuid",v_Uuid.Value);
            break;
          case Address v_Address:
            writer.WritePropertyName("valueAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case Age v_Age:
            writer.WritePropertyName("valueAge");
            v_Age.SerializeJson(writer, options);
            break;
          case Annotation v_Annotation:
            writer.WritePropertyName("valueAnnotation");
            v_Annotation.SerializeJson(writer, options);
            break;
          case Attachment v_Attachment:
            writer.WritePropertyName("valueAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("valueCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Coding v_Coding:
            writer.WritePropertyName("valueCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case ContactPoint v_ContactPoint:
            writer.WritePropertyName("valueContactPoint");
            v_ContactPoint.SerializeJson(writer, options);
            break;
          case Count v_Count:
            writer.WritePropertyName("valueCount");
            v_Count.SerializeJson(writer, options);
            break;
          case Distance v_Distance:
            writer.WritePropertyName("valueDistance");
            v_Distance.SerializeJson(writer, options);
            break;
          case Duration v_Duration:
            writer.WritePropertyName("valueDuration");
            v_Duration.SerializeJson(writer, options);
            break;
          case HumanName v_HumanName:
            writer.WritePropertyName("valueHumanName");
            v_HumanName.SerializeJson(writer, options);
            break;
          case Identifier v_Identifier:
            writer.WritePropertyName("valueIdentifier");
            v_Identifier.SerializeJson(writer, options);
            break;
          case Money v_Money:
            writer.WritePropertyName("valueMoney");
            v_Money.SerializeJson(writer, options);
            break;
          case Period v_Period:
            writer.WritePropertyName("valuePeriod");
            v_Period.SerializeJson(writer, options);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("valueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Range v_Range:
            writer.WritePropertyName("valueRange");
            v_Range.SerializeJson(writer, options);
            break;
          case Ratio v_Ratio:
            writer.WritePropertyName("valueRatio");
            v_Ratio.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("valueReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
          case SampledData v_SampledData:
            writer.WritePropertyName("valueSampledData");
            v_SampledData.SerializeJson(writer, options);
            break;
          case Signature v_Signature:
            writer.WritePropertyName("valueSignature");
            v_Signature.SerializeJson(writer, options);
            break;
          case Timing v_Timing:
            writer.WritePropertyName("valueTiming");
            v_Timing.SerializeJson(writer, options);
            break;
          case ContactDetail v_ContactDetail:
            writer.WritePropertyName("valueContactDetail");
            v_ContactDetail.SerializeJson(writer, options);
            break;
          case Contributor v_Contributor:
            writer.WritePropertyName("valueContributor");
            v_Contributor.SerializeJson(writer, options);
            break;
          case DataRequirement v_DataRequirement:
            writer.WritePropertyName("valueDataRequirement");
            v_DataRequirement.SerializeJson(writer, options);
            break;
          case Expression v_Expression:
            writer.WritePropertyName("valueExpression");
            v_Expression.SerializeJson(writer, options);
            break;
          case ParameterDefinition v_ParameterDefinition:
            writer.WritePropertyName("valueParameterDefinition");
            v_ParameterDefinition.SerializeJson(writer, options);
            break;
          case RelatedArtifact v_RelatedArtifact:
            writer.WritePropertyName("valueRelatedArtifact");
            v_RelatedArtifact.SerializeJson(writer, options);
            break;
          case TriggerDefinition v_TriggerDefinition:
            writer.WritePropertyName("valueTriggerDefinition");
            v_TriggerDefinition.SerializeJson(writer, options);
            break;
          case UsageContext v_UsageContext:
            writer.WritePropertyName("valueUsageContext");
            v_UsageContext.SerializeJson(writer, options);
            break;
          case Dosage v_Dosage:
            writer.WritePropertyName("valueDosage");
            v_Dosage.SerializeJson(writer, options);
            break;
          case Meta v_Meta:
            writer.WritePropertyName("valueMeta");
            v_Meta.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Resource != null)
      {
        writer.WritePropertyName("resource");
        JsonSerializer.Serialize<Hl7.Fhir.Model.Resource>(writer, (Hl7.Fhir.Model.Resource)current.Resource, options);
      }

      if ((current.Part != null) && (current.Part.Count != 0))
      {
        writer.WritePropertyName("part");
        writer.WriteStartArray();
        foreach (Parameters.ParameterComponent val in current.Part)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Parameters#Parameter
    /// </summary>
    public static void DeserializeJson(this Parameters.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Parameters#Parameter
    /// </summary>
    public static void DeserializeJsonProperty(this Parameters.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "valueBase64Binary":
          current.Value = new Base64Binary(reader.GetBytesFromBase64());
          break;

        case "valueBoolean":
          current.Value = new FhirBoolean(reader.GetBoolean());
          break;

        case "valueCanonical":
          current.Value = new Canonical(reader.GetString());
          break;

        case "valueCode":
          current.Value = new Code(reader.GetString());
          break;

        case "valueDate":
          current.Value = new Date(reader.GetString());
          break;

        case "valueDateTime":
          current.Value = new FhirDateTime(reader.GetString());
          break;

        case "valueDecimal":
          current.Value = new FhirDecimal(reader.GetDecimal());
          break;

        case "valueId":
          current.Value = new Id(reader.GetString());
          break;

        case "valueInstant":
          current.Value = new Instant(DateTimeOffset.Parse(reader.GetString()));
          break;

        case "valueInteger":
          current.Value = new Integer(reader.GetInt32());
          break;

        case "valueMarkdown":
          current.Value = new Markdown(reader.GetString());
          break;

        case "valueOid":
          current.Value = new Oid(reader.GetString());
          break;

        case "valuePositiveInt":
          current.Value = new PositiveInt(reader.GetInt32());
          break;

        case "valueString":
          current.Value = new FhirString(reader.GetString());
          break;

        case "valueTime":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Time>(ref reader, options);
          break;

        case "valueUnsignedInt":
          current.Value = new UnsignedInt(reader.GetInt32());
          break;

        case "valueUri":
          current.Value = new FhirUri(reader.GetString());
          break;

        case "valueUrl":
          current.Value = new FhirUrl(reader.GetString());
          break;

        case "valueUuid":
          current.Value = new Uuid(reader.GetString());
          break;

        case "valueAddress":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Address>(ref reader, options);
          break;

        case "valueAge":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Age>(ref reader, options);
          break;

        case "valueAnnotation":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Annotation>(ref reader, options);
          break;

        case "valueAttachment":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Attachment>(ref reader, options);
          break;

        case "valueCodeableConcept":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "valueCoding":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Coding>(ref reader, options);
          break;

        case "valueContactPoint":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactPoint>(ref reader, options);
          break;

        case "valueCount":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Count>(ref reader, options);
          break;

        case "valueDistance":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Distance>(ref reader, options);
          break;

        case "valueDuration":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Duration>(ref reader, options);
          break;

        case "valueHumanName":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.HumanName>(ref reader, options);
          break;

        case "valueIdentifier":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options);
          break;

        case "valueMoney":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);
          break;

        case "valuePeriod":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);
          break;

        case "valueQuantity":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "valueRange":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Range>(ref reader, options);
          break;

        case "valueRatio":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Ratio>(ref reader, options);
          break;

        case "valueReference":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "valueSampledData":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.SampledData>(ref reader, options);
          break;

        case "valueSignature":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Signature>(ref reader, options);
          break;

        case "valueTiming":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Timing>(ref reader, options);
          break;

        case "valueContactDetail":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options);
          break;

        case "valueContributor":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Contributor>(ref reader, options);
          break;

        case "valueDataRequirement":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.DataRequirement>(ref reader, options);
          break;

        case "valueExpression":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Expression>(ref reader, options);
          break;

        case "valueParameterDefinition":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.ParameterDefinition>(ref reader, options);
          break;

        case "valueRelatedArtifact":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.RelatedArtifact>(ref reader, options);
          break;

        case "valueTriggerDefinition":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.TriggerDefinition>(ref reader, options);
          break;

        case "valueUsageContext":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.UsageContext>(ref reader, options);
          break;

        case "valueDosage":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Dosage>(ref reader, options);
          break;

        case "valueMeta":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Meta>(ref reader, options);
          break;

        case "resource":
          current.Resource = JsonSerializer.Deserialize<Hl7.Fhir.Model.Resource>(ref reader, options);

          break;

        case "part":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Part = new List<Parameters.ParameterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Part.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Parameters.ParameterComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Part.Count == 0)
          {
            current.Part = null;
          }

          break;

        // Complex: parameter, Export: ParameterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ParametersJsonConverter : JsonConverter<Parameters>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(Parameters).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Parameters value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Parameters Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        Parameters target = new Parameters();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
