// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for ExplanationOfBenefit
  /// </summary>
  public static class ExplanationOfBenefitJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ExplanationOfBenefit");
      // Complex: ExplanationOfBenefit, Export: ExplanationOfBenefit, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if (current.SubType != null)
      {
        writer.WritePropertyName("subType");
        current.SubType.SerializeJson(writer, options);
      }

      writer.WriteString("use",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.UseElement.Value));

      writer.WritePropertyName("patient");
      current.Patient.SerializeJson(writer, options);

      if (current.BillablePeriod != null)
      {
        writer.WritePropertyName("billablePeriod");
        current.BillablePeriod.SerializeJson(writer, options);
      }

      writer.WriteString("created",current.CreatedElement.Value);

      if (current.Enterer != null)
      {
        writer.WritePropertyName("enterer");
        current.Enterer.SerializeJson(writer, options);
      }

      writer.WritePropertyName("insurer");
      current.Insurer.SerializeJson(writer, options);

      writer.WritePropertyName("provider");
      current.Provider.SerializeJson(writer, options);

      if (current.Priority != null)
      {
        writer.WritePropertyName("priority");
        current.Priority.SerializeJson(writer, options);
      }

      if (current.FundsReserveRequested != null)
      {
        writer.WritePropertyName("fundsReserveRequested");
        current.FundsReserveRequested.SerializeJson(writer, options);
      }

      if (current.FundsReserve != null)
      {
        writer.WritePropertyName("fundsReserve");
        current.FundsReserve.SerializeJson(writer, options);
      }

      if ((current.Related != null) && (current.Related.Count != 0))
      {
        writer.WritePropertyName("related");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.RelatedClaimComponent val in current.Related)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Prescription != null)
      {
        writer.WritePropertyName("prescription");
        current.Prescription.SerializeJson(writer, options);
      }

      if (current.OriginalPrescription != null)
      {
        writer.WritePropertyName("originalPrescription");
        current.OriginalPrescription.SerializeJson(writer, options);
      }

      if (current.Payee != null)
      {
        writer.WritePropertyName("payee");
        current.Payee.SerializeJson(writer, options);
      }

      if (current.Referral != null)
      {
        writer.WritePropertyName("referral");
        current.Referral.SerializeJson(writer, options);
      }

      if (current.Facility != null)
      {
        writer.WritePropertyName("facility");
        current.Facility.SerializeJson(writer, options);
      }

      if (current.Claim != null)
      {
        writer.WritePropertyName("claim");
        current.Claim.SerializeJson(writer, options);
      }

      if (current.ClaimResponse != null)
      {
        writer.WritePropertyName("claimResponse");
        current.ClaimResponse.SerializeJson(writer, options);
      }

      writer.WriteString("outcome",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.OutcomeElement.Value));

      if ((current.DispositionElement != null) && (current.DispositionElement.Value != null))
      {
        writer.WriteString("disposition",current.DispositionElement.Value);
      }

      if ((current.PreAuthRefElement != null) && (current.PreAuthRefElement.Count != 0))
      {
        writer.WritePropertyName("preAuthRef");
        writer.WriteStartArray();
        foreach (FhirString val in current.PreAuthRefElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.PreAuthRefPeriod != null) && (current.PreAuthRefPeriod.Count != 0))
      {
        writer.WritePropertyName("preAuthRefPeriod");
        writer.WriteStartArray();
        foreach (Period val in current.PreAuthRefPeriod)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.CareTeam != null) && (current.CareTeam.Count != 0))
      {
        writer.WritePropertyName("careTeam");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.CareTeamComponent val in current.CareTeam)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SupportingInfo != null) && (current.SupportingInfo.Count != 0))
      {
        writer.WritePropertyName("supportingInfo");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.SupportingInformationComponent val in current.SupportingInfo)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Diagnosis != null) && (current.Diagnosis.Count != 0))
      {
        writer.WritePropertyName("diagnosis");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.DiagnosisComponent val in current.Diagnosis)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Procedure != null) && (current.Procedure.Count != 0))
      {
        writer.WritePropertyName("procedure");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.ProcedureComponent val in current.Procedure)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.PrecedenceElement != null) && (current.PrecedenceElement.Value != null))
      {
        writer.WriteNumber("precedence",(int)current.PrecedenceElement.Value);
      }

      if ((current.Insurance != null) && (current.Insurance.Count != 0))
      {
        writer.WritePropertyName("insurance");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.InsuranceComponent val in current.Insurance)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Accident != null)
      {
        writer.WritePropertyName("accident");
        current.Accident.SerializeJson(writer, options);
      }

      if ((current.Item != null) && (current.Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.ItemComponent val in current.Item)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.AddItem != null) && (current.AddItem.Count != 0))
      {
        writer.WritePropertyName("addItem");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.AddedItemComponent val in current.AddItem)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Total != null) && (current.Total.Count != 0))
      {
        writer.WritePropertyName("total");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.TotalComponent val in current.Total)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Payment != null)
      {
        writer.WritePropertyName("payment");
        current.Payment.SerializeJson(writer, options);
      }

      if (current.FormCode != null)
      {
        writer.WritePropertyName("formCode");
        current.FormCode.SerializeJson(writer, options);
      }

      if (current.Form != null)
      {
        writer.WritePropertyName("form");
        current.Form.SerializeJson(writer, options);
      }

      if ((current.ProcessNote != null) && (current.ProcessNote.Count != 0))
      {
        writer.WritePropertyName("processNote");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.NoteComponent val in current.ProcessNote)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.BenefitPeriod != null)
      {
        writer.WritePropertyName("benefitPeriod");
        current.BenefitPeriod.SerializeJson(writer, options);
      }

      if ((current.BenefitBalance != null) && (current.BenefitBalance.Count != 0))
      {
        writer.WritePropertyName("benefitBalance");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.BenefitBalanceComponent val in current.BenefitBalance)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Identifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }

          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus>(reader.GetString()));

          break;

        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "subType":
          current.SubType = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "use":
          current.UseElement =new Code<Hl7.Fhir.Model.Use>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Use>(reader.GetString()));

          break;

        case "patient":
          current.Patient = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "billablePeriod":
          current.BillablePeriod = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);

          break;

        case "created":
          current.CreatedElement = new FhirDateTime(reader.GetString());

          break;

        case "enterer":
          current.Enterer = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "insurer":
          current.Insurer = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "provider":
          current.Provider = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "priority":
          current.Priority = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "fundsReserveRequested":
          current.FundsReserveRequested = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "fundsReserve":
          current.FundsReserve = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "related":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Related = new List<ExplanationOfBenefit.RelatedClaimComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Related.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.RelatedClaimComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Related.Count == 0)
          {
            current.Related = null;
          }

          break;

        case "prescription":
          current.Prescription = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "originalPrescription":
          current.OriginalPrescription = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "payee":
          current.Payee = JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.PayeeComponent>(ref reader, options);

          break;

        case "referral":
          current.Referral = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "facility":
          current.Facility = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "claim":
          current.Claim = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "claimResponse":
          current.ClaimResponse = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "outcome":
          current.OutcomeElement =new Code<Hl7.Fhir.Model.ClaimProcessingCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ClaimProcessingCodes>(reader.GetString()));

          break;

        case "disposition":
          current.DispositionElement = new FhirString(reader.GetString());

          break;

        case "preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PreAuthRefElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.PreAuthRefElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.PreAuthRefElement.Count == 0)
          {
            current.PreAuthRefElement = null;
          }

          break;

        case "preAuthRefPeriod":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PreAuthRefPeriod = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.PreAuthRefPeriod.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.PreAuthRefPeriod.Count == 0)
          {
            current.PreAuthRefPeriod = null;
          }

          break;

        case "careTeam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.CareTeam = new List<ExplanationOfBenefit.CareTeamComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.CareTeam.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.CareTeamComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.CareTeam.Count == 0)
          {
            current.CareTeam = null;
          }

          break;

        case "supportingInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SupportingInfo = new List<ExplanationOfBenefit.SupportingInformationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SupportingInfo.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.SupportingInformationComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SupportingInfo.Count == 0)
          {
            current.SupportingInfo = null;
          }

          break;

        case "diagnosis":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Diagnosis = new List<ExplanationOfBenefit.DiagnosisComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Diagnosis.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.DiagnosisComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Diagnosis.Count == 0)
          {
            current.Diagnosis = null;
          }

          break;

        case "procedure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Procedure = new List<ExplanationOfBenefit.ProcedureComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Procedure.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.ProcedureComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Procedure.Count == 0)
          {
            current.Procedure = null;
          }

          break;

        case "precedence":
          current.PrecedenceElement = new PositiveInt(reader.GetInt32());

          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Insurance = new List<ExplanationOfBenefit.InsuranceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Insurance.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.InsuranceComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Insurance.Count == 0)
          {
            current.Insurance = null;
          }

          break;

        case "accident":
          current.Accident = JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.AccidentComponent>(ref reader, options);

          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Item = new List<ExplanationOfBenefit.ItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Item.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.ItemComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Item.Count == 0)
          {
            current.Item = null;
          }

          break;

        case "addItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.AddItem = new List<ExplanationOfBenefit.AddedItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.AddItem.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.AddItem.Count == 0)
          {
            current.AddItem = null;
          }

          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Adjudication.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }

          break;

        case "total":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Total = new List<ExplanationOfBenefit.TotalComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Total.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.TotalComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Total.Count == 0)
          {
            current.Total = null;
          }

          break;

        case "payment":
          current.Payment = JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.PaymentComponent>(ref reader, options);

          break;

        case "formCode":
          current.FormCode = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "form":
          current.Form = JsonSerializer.Deserialize<Hl7.Fhir.Model.Attachment>(ref reader, options);

          break;

        case "processNote":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProcessNote = new List<ExplanationOfBenefit.NoteComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ProcessNote.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.NoteComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ProcessNote.Count == 0)
          {
            current.ProcessNote = null;
          }

          break;

        case "benefitPeriod":
          current.BenefitPeriod = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);

          break;

        case "benefitBalance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.BenefitBalance = new List<ExplanationOfBenefit.BenefitBalanceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.BenefitBalance.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.BenefitBalanceComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.BenefitBalance.Count == 0)
          {
            current.BenefitBalance = null;
          }

          break;

        // Complex: ExplanationOfBenefit, Export: ExplanationOfBenefit, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#RelatedClaim into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.RelatedClaimComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#RelatedClaim, Export: RelatedClaimComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Claim != null)
      {
        writer.WritePropertyName("claim");
        current.Claim.SerializeJson(writer, options);
      }

      if (current.Relationship != null)
      {
        writer.WritePropertyName("relationship");
        current.Relationship.SerializeJson(writer, options);
      }

      if (current.Reference != null)
      {
        writer.WritePropertyName("reference");
        current.Reference.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#RelatedClaim
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.RelatedClaimComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#RelatedClaim
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.RelatedClaimComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "claim":
          current.Claim = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "relationship":
          current.Relationship = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "reference":
          current.Reference = JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options);

          break;

        // Complex: related, Export: RelatedClaimComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Payee into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.PayeeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Payee, Export: PayeeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Party != null)
      {
        writer.WritePropertyName("party");
        current.Party.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Payee
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.PayeeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Payee
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.PayeeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "party":
          current.Party = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        // Complex: payee, Export: PayeeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#CareTeam into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.CareTeamComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#CareTeam, Export: CareTeamComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      writer.WritePropertyName("provider");
      current.Provider.SerializeJson(writer, options);

      if ((current.ResponsibleElement != null) && (current.ResponsibleElement.Value != null))
      {
        writer.WriteBoolean("responsible",(bool)current.ResponsibleElement.Value);
      }

      if (current.Role != null)
      {
        writer.WritePropertyName("role");
        current.Role.SerializeJson(writer, options);
      }

      if (current.Qualification != null)
      {
        writer.WritePropertyName("qualification");
        current.Qualification.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#CareTeam
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.CareTeamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#CareTeam
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.CareTeamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());

          break;

        case "provider":
          current.Provider = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "responsible":
          current.ResponsibleElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "role":
          current.Role = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "qualification":
          current.Qualification = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        // Complex: careTeam, Export: CareTeamComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#SupportingInformation into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.SupportingInformationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#SupportingInformation, Export: SupportingInformationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      writer.WritePropertyName("category");
      current.Category.SerializeJson(writer, options);

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (current.Timing != null)
      {
        switch (current.Timing)
        {
          case Date v_Date:
            writer.WriteString("timingDate",v_Date.Value);
            break;
          case Period v_Period:
            writer.WritePropertyName("timingPeriod");
            v_Period.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Value != null)
      {
        switch (current.Value)
        {
          case FhirBoolean v_FhirBoolean:
            writer.WriteBoolean("valueBoolean", (bool)v_FhirBoolean.Value);
            break;
          case FhirString v_FhirString:
            writer.WriteString("valueString",v_FhirString.Value);
            break;
          case Quantity v_Quantity:
            writer.WritePropertyName("valueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Attachment v_Attachment:
            writer.WritePropertyName("valueAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("valueReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Reason != null)
      {
        writer.WritePropertyName("reason");
        current.Reason.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#SupportingInformation
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.SupportingInformationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#SupportingInformation
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.SupportingInformationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());

          break;

        case "category":
          current.Category = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "code":
          current.Code = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "timingDate":
          current.Timing = new Date(reader.GetString());
          break;

        case "timingPeriod":
          current.Timing = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);
          break;

        case "valueBoolean":
          current.Value = new FhirBoolean(reader.GetBoolean());
          break;

        case "valueString":
          current.Value = new FhirString(reader.GetString());
          break;

        case "valueQuantity":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "valueAttachment":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.Attachment>(ref reader, options);
          break;

        case "valueReference":
          current.Value = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "reason":
          current.Reason = JsonSerializer.Deserialize<Hl7.Fhir.Model.Coding>(ref reader, options);

          break;

        // Complex: supportingInfo, Export: SupportingInformationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Diagnosis into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.DiagnosisComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Diagnosis, Export: DiagnosisComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      if (current.Diagnosis != null)
      {
        switch (current.Diagnosis)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("diagnosisCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("diagnosisReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.Type != null) && (current.Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Type)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.OnAdmission != null)
      {
        writer.WritePropertyName("onAdmission");
        current.OnAdmission.SerializeJson(writer, options);
      }

      if (current.PackageCode != null)
      {
        writer.WritePropertyName("packageCode");
        current.PackageCode.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Diagnosis
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.DiagnosisComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Diagnosis
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.DiagnosisComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());

          break;

        case "diagnosisCodeableConcept":
          current.Diagnosis = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "diagnosisReference":
          current.Diagnosis = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Type.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }

          break;

        case "onAdmission":
          current.OnAdmission = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "packageCode":
          current.PackageCode = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        // Complex: diagnosis, Export: DiagnosisComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Procedure into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.ProcedureComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Procedure, Export: ProcedureComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      if ((current.Type != null) && (current.Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Type)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if (current.Procedure != null)
      {
        switch (current.Procedure)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("procedureCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("procedureReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.Udi != null) && (current.Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Udi)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Procedure
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.ProcedureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Procedure
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.ProcedureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());

          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Type.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }

          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());

          break;

        case "procedureCodeableConcept":
          current.Procedure = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "procedureReference":
          current.Procedure = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Udi.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }

          break;

        // Complex: procedure, Export: ProcedureComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Insurance into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.InsuranceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Insurance, Export: InsuranceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteBoolean("focal",(bool)current.FocalElement.Value);

      writer.WritePropertyName("coverage");
      current.Coverage.SerializeJson(writer, options);

      if ((current.PreAuthRefElement != null) && (current.PreAuthRefElement.Count != 0))
      {
        writer.WritePropertyName("preAuthRef");
        writer.WriteStartArray();
        foreach (FhirString val in current.PreAuthRefElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Insurance
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Insurance
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "focal":
          current.FocalElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "coverage":
          current.Coverage = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PreAuthRefElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.PreAuthRefElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.PreAuthRefElement.Count == 0)
          {
            current.PreAuthRefElement = null;
          }

          break;

        // Complex: insurance, Export: InsuranceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Accident into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.AccidentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Accident, Export: AccidentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Location != null)
      {
        switch (current.Location)
        {
          case Address v_Address:
            writer.WritePropertyName("locationAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("locationReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Accident
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.AccidentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Accident
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.AccidentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          current.DateElement = new Date(reader.GetString());

          break;

        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "locationAddress":
          current.Location = JsonSerializer.Deserialize<Hl7.Fhir.Model.Address>(ref reader, options);
          break;

        case "locationReference":
          current.Location = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        // Complex: accident, Export: AccidentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Item into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.ItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Item, Export: ItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      if ((current.CareTeamSequenceElement != null) && (current.CareTeamSequenceElement.Count != 0))
      {
        writer.WritePropertyName("careTeamSequence");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.CareTeamSequenceElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.DiagnosisSequenceElement != null) && (current.DiagnosisSequenceElement.Count != 0))
      {
        writer.WritePropertyName("diagnosisSequence");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.DiagnosisSequenceElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.ProcedureSequenceElement != null) && (current.ProcedureSequenceElement.Count != 0))
      {
        writer.WritePropertyName("procedureSequence");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.ProcedureSequenceElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.InformationSequenceElement != null) && (current.InformationSequenceElement.Count != 0))
      {
        writer.WritePropertyName("informationSequence");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.InformationSequenceElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if (current.Revenue != null)
      {
        writer.WritePropertyName("revenue");
        current.Revenue.SerializeJson(writer, options);
      }

      if (current.Category != null)
      {
        writer.WritePropertyName("category");
        current.Category.SerializeJson(writer, options);
      }

      writer.WritePropertyName("productOrService");
      current.ProductOrService.SerializeJson(writer, options);

      if ((current.Modifier != null) && (current.Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Modifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProgramCode != null) && (current.ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProgramCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Serviced != null)
      {
        switch (current.Serviced)
        {
          case Date v_Date:
            writer.WriteString("servicedDate",v_Date.Value);
            break;
          case Period v_Period:
            writer.WritePropertyName("servicedPeriod");
            v_Period.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Location != null)
      {
        switch (current.Location)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("locationCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Address v_Address:
            writer.WritePropertyName("locationAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("locationReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        current.UnitPrice.SerializeJson(writer, options);
      }

      if ((current.FactorElement != null) && (current.FactorElement.Value != null))
      {
        writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
      }

      if (current.Net != null)
      {
        writer.WritePropertyName("net");
        current.Net.SerializeJson(writer, options);
      }

      if ((current.Udi != null) && (current.Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Udi)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.BodySite != null)
      {
        writer.WritePropertyName("bodySite");
        current.BodySite.SerializeJson(writer, options);
      }

      if ((current.SubSite != null) && (current.SubSite.Count != 0))
      {
        writer.WritePropertyName("subSite");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.SubSite)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Encounter != null) && (current.Encounter.Count != 0))
      {
        writer.WritePropertyName("encounter");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Encounter)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.NoteNumberElement != null) && (current.NoteNumberElement.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.NoteNumberElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Detail != null) && (current.Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.DetailComponent val in current.Detail)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Item
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Item
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());

          break;

        case "careTeamSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.CareTeamSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.CareTeamSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.CareTeamSequenceElement.Count == 0)
          {
            current.CareTeamSequenceElement = null;
          }

          break;

        case "diagnosisSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.DiagnosisSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.DiagnosisSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.DiagnosisSequenceElement.Count == 0)
          {
            current.DiagnosisSequenceElement = null;
          }

          break;

        case "procedureSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProcedureSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ProcedureSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ProcedureSequenceElement.Count == 0)
          {
            current.ProcedureSequenceElement = null;
          }

          break;

        case "informationSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.InformationSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.InformationSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.InformationSequenceElement.Count == 0)
          {
            current.InformationSequenceElement = null;
          }

          break;

        case "revenue":
          current.Revenue = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "category":
          current.Category = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "productOrService":
          current.ProductOrService = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Modifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }

          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ProgramCode.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }

          break;

        case "servicedDate":
          current.Serviced = new Date(reader.GetString());
          break;

        case "servicedPeriod":
          current.Serviced = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);
          break;

        case "locationCodeableConcept":
          current.Location = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "locationAddress":
          current.Location = JsonSerializer.Deserialize<Hl7.Fhir.Model.Address>(ref reader, options);
          break;

        case "locationReference":
          current.Location = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "quantity":
          current.Quantity = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);

          break;

        case "unitPrice":
          current.UnitPrice = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "factor":
          current.FactorElement = new FhirDecimal(reader.GetDecimal());

          break;

        case "net":
          current.Net = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Udi.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }

          break;

        case "bodySite":
          current.BodySite = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubSite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SubSite.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SubSite.Count == 0)
          {
            current.SubSite = null;
          }

          break;

        case "encounter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Encounter = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Encounter.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Encounter.Count == 0)
          {
            current.Encounter = null;
          }

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }

          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Adjudication.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }

          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Detail = new List<ExplanationOfBenefit.DetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Detail.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.DetailComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Detail.Count == 0)
          {
            current.Detail = null;
          }

          break;

        // Complex: item, Export: ItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Adjudication into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.AdjudicationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Adjudication, Export: AdjudicationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("category");
      current.Category.SerializeJson(writer, options);

      if (current.Reason != null)
      {
        writer.WritePropertyName("reason");
        current.Reason.SerializeJson(writer, options);
      }

      if (current.Amount != null)
      {
        writer.WritePropertyName("amount");
        current.Amount.SerializeJson(writer, options);
      }

      if ((current.ValueElement != null) && (current.ValueElement.Value != null))
      {
        writer.WriteNumber("value",(decimal)current.ValueElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Adjudication
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.AdjudicationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Adjudication
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.AdjudicationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "reason":
          current.Reason = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "amount":
          current.Amount = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "value":
          current.ValueElement = new FhirDecimal(reader.GetDecimal());

          break;

        // Complex: adjudication, Export: AdjudicationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Detail into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.DetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Detail, Export: DetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      if (current.Revenue != null)
      {
        writer.WritePropertyName("revenue");
        current.Revenue.SerializeJson(writer, options);
      }

      if (current.Category != null)
      {
        writer.WritePropertyName("category");
        current.Category.SerializeJson(writer, options);
      }

      writer.WritePropertyName("productOrService");
      current.ProductOrService.SerializeJson(writer, options);

      if ((current.Modifier != null) && (current.Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Modifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProgramCode != null) && (current.ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProgramCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        current.UnitPrice.SerializeJson(writer, options);
      }

      if ((current.FactorElement != null) && (current.FactorElement.Value != null))
      {
        writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
      }

      if (current.Net != null)
      {
        writer.WritePropertyName("net");
        current.Net.SerializeJson(writer, options);
      }

      if ((current.Udi != null) && (current.Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Udi)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.NoteNumberElement != null) && (current.NoteNumberElement.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.NoteNumberElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SubDetail != null) && (current.SubDetail.Count != 0))
      {
        writer.WritePropertyName("subDetail");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.SubDetailComponent val in current.SubDetail)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Detail
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.DetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Detail
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.DetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());

          break;

        case "revenue":
          current.Revenue = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "category":
          current.Category = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "productOrService":
          current.ProductOrService = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Modifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }

          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ProgramCode.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }

          break;

        case "quantity":
          current.Quantity = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);

          break;

        case "unitPrice":
          current.UnitPrice = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "factor":
          current.FactorElement = new FhirDecimal(reader.GetDecimal());

          break;

        case "net":
          current.Net = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Udi.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }

          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Adjudication.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }

          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubDetail = new List<ExplanationOfBenefit.SubDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SubDetail.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.SubDetailComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SubDetail.Count == 0)
          {
            current.SubDetail = null;
          }

          break;

        // Complex: detail, Export: DetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#SubDetail into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.SubDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#SubDetail, Export: SubDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence",(int)current.SequenceElement.Value);

      if (current.Revenue != null)
      {
        writer.WritePropertyName("revenue");
        current.Revenue.SerializeJson(writer, options);
      }

      if (current.Category != null)
      {
        writer.WritePropertyName("category");
        current.Category.SerializeJson(writer, options);
      }

      writer.WritePropertyName("productOrService");
      current.ProductOrService.SerializeJson(writer, options);

      if ((current.Modifier != null) && (current.Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Modifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProgramCode != null) && (current.ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProgramCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        current.UnitPrice.SerializeJson(writer, options);
      }

      if ((current.FactorElement != null) && (current.FactorElement.Value != null))
      {
        writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
      }

      if (current.Net != null)
      {
        writer.WritePropertyName("net");
        current.Net.SerializeJson(writer, options);
      }

      if ((current.Udi != null) && (current.Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Udi)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.NoteNumberElement != null) && (current.NoteNumberElement.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.NoteNumberElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#SubDetail
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.SubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#SubDetail
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.SubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          current.SequenceElement = new PositiveInt(reader.GetInt32());

          break;

        case "revenue":
          current.Revenue = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "category":
          current.Category = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "productOrService":
          current.ProductOrService = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Modifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }

          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ProgramCode.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }

          break;

        case "quantity":
          current.Quantity = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);

          break;

        case "unitPrice":
          current.UnitPrice = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "factor":
          current.FactorElement = new FhirDecimal(reader.GetDecimal());

          break;

        case "net":
          current.Net = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Udi.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }

          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Adjudication.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }

          break;

        // Complex: subDetail, Export: SubDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#AddedItem into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.AddedItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#AddedItem, Export: AddedItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.ItemSequenceElement != null) && (current.ItemSequenceElement.Count != 0))
      {
        writer.WritePropertyName("itemSequence");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.ItemSequenceElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.DetailSequenceElement != null) && (current.DetailSequenceElement.Count != 0))
      {
        writer.WritePropertyName("detailSequence");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.DetailSequenceElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.SubDetailSequenceElement != null) && (current.SubDetailSequenceElement.Count != 0))
      {
        writer.WritePropertyName("subDetailSequence");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.SubDetailSequenceElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.Provider != null) && (current.Provider.Count != 0))
      {
        writer.WritePropertyName("provider");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Provider)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      writer.WritePropertyName("productOrService");
      current.ProductOrService.SerializeJson(writer, options);

      if ((current.Modifier != null) && (current.Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Modifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProgramCode != null) && (current.ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProgramCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Serviced != null)
      {
        switch (current.Serviced)
        {
          case Date v_Date:
            writer.WriteString("servicedDate",v_Date.Value);
            break;
          case Period v_Period:
            writer.WritePropertyName("servicedPeriod");
            v_Period.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Location != null)
      {
        switch (current.Location)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("locationCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Address v_Address:
            writer.WritePropertyName("locationAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("locationReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        current.UnitPrice.SerializeJson(writer, options);
      }

      if ((current.FactorElement != null) && (current.FactorElement.Value != null))
      {
        writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
      }

      if (current.Net != null)
      {
        writer.WritePropertyName("net");
        current.Net.SerializeJson(writer, options);
      }

      if (current.BodySite != null)
      {
        writer.WritePropertyName("bodySite");
        current.BodySite.SerializeJson(writer, options);
      }

      if ((current.SubSite != null) && (current.SubSite.Count != 0))
      {
        writer.WritePropertyName("subSite");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.SubSite)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.NoteNumberElement != null) && (current.NoteNumberElement.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.NoteNumberElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Detail != null) && (current.Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.AddedItemDetailComponent val in current.Detail)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#AddedItem
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.AddedItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#AddedItem
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.AddedItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ItemSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ItemSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ItemSequenceElement.Count == 0)
          {
            current.ItemSequenceElement = null;
          }

          break;

        case "detailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.DetailSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.DetailSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.DetailSequenceElement.Count == 0)
          {
            current.DetailSequenceElement = null;
          }

          break;

        case "subDetailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubDetailSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SubDetailSequenceElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SubDetailSequenceElement.Count == 0)
          {
            current.SubDetailSequenceElement = null;
          }

          break;

        case "provider":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Provider = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Provider.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Provider.Count == 0)
          {
            current.Provider = null;
          }

          break;

        case "productOrService":
          current.ProductOrService = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Modifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }

          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ProgramCode.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }

          break;

        case "servicedDate":
          current.Serviced = new Date(reader.GetString());
          break;

        case "servicedPeriod":
          current.Serviced = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);
          break;

        case "locationCodeableConcept":
          current.Location = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "locationAddress":
          current.Location = JsonSerializer.Deserialize<Hl7.Fhir.Model.Address>(ref reader, options);
          break;

        case "locationReference":
          current.Location = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "quantity":
          current.Quantity = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);

          break;

        case "unitPrice":
          current.UnitPrice = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "factor":
          current.FactorElement = new FhirDecimal(reader.GetDecimal());

          break;

        case "net":
          current.Net = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "bodySite":
          current.BodySite = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubSite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SubSite.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SubSite.Count == 0)
          {
            current.SubSite = null;
          }

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }

          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Adjudication.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }

          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Detail = new List<ExplanationOfBenefit.AddedItemDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Detail.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Detail.Count == 0)
          {
            current.Detail = null;
          }

          break;

        // Complex: addItem, Export: AddedItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#AddedItemDetail into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.AddedItemDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#AddedItemDetail, Export: AddedItemDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("productOrService");
      current.ProductOrService.SerializeJson(writer, options);

      if ((current.Modifier != null) && (current.Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Modifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        current.UnitPrice.SerializeJson(writer, options);
      }

      if ((current.FactorElement != null) && (current.FactorElement.Value != null))
      {
        writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
      }

      if (current.Net != null)
      {
        writer.WritePropertyName("net");
        current.Net.SerializeJson(writer, options);
      }

      if ((current.NoteNumberElement != null) && (current.NoteNumberElement.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.NoteNumberElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SubDetail != null) && (current.SubDetail.Count != 0))
      {
        writer.WritePropertyName("subDetail");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.AddedItemDetailSubDetailComponent val in current.SubDetail)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#AddedItemDetail
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.AddedItemDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#AddedItemDetail
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.AddedItemDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "productOrService":
          current.ProductOrService = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Modifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }

          break;

        case "quantity":
          current.Quantity = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);

          break;

        case "unitPrice":
          current.UnitPrice = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "factor":
          current.FactorElement = new FhirDecimal(reader.GetDecimal());

          break;

        case "net":
          current.Net = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }

          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Adjudication.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }

          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SubDetail = new List<ExplanationOfBenefit.AddedItemDetailSubDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SubDetail.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailSubDetailComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SubDetail.Count == 0)
          {
            current.SubDetail = null;
          }

          break;

        // Complex: detail, Export: AddedItemDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#AddedItemDetailSubDetail into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.AddedItemDetailSubDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#AddedItemDetailSubDetail, Export: AddedItemDetailSubDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("productOrService");
      current.ProductOrService.SerializeJson(writer, options);

      if ((current.Modifier != null) && (current.Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Modifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        current.UnitPrice.SerializeJson(writer, options);
      }

      if ((current.FactorElement != null) && (current.FactorElement.Value != null))
      {
        writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
      }

      if (current.Net != null)
      {
        writer.WritePropertyName("net");
        current.Net.SerializeJson(writer, options);
      }

      if ((current.NoteNumberElement != null) && (current.NoteNumberElement.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();
        foreach (PositiveInt val in current.NoteNumberElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.Adjudication != null) && (current.Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.AdjudicationComponent val in current.Adjudication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#AddedItemDetailSubDetail
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.AddedItemDetailSubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#AddedItemDetailSubDetail
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.AddedItemDetailSubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "productOrService":
          current.ProductOrService = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Modifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }

          break;

        case "quantity":
          current.Quantity = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);

          break;

        case "unitPrice":
          current.UnitPrice = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "factor":
          current.FactorElement = new FhirDecimal(reader.GetDecimal());

          break;

        case "net":
          current.Net = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }

          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Adjudication.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }

          break;

        // Complex: subDetail, Export: AddedItemDetailSubDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Total into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.TotalComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Total, Export: TotalComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("category");
      current.Category.SerializeJson(writer, options);

      writer.WritePropertyName("amount");
      current.Amount.SerializeJson(writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Total
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.TotalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Total
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.TotalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "amount":
          current.Amount = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        // Complex: total, Export: TotalComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Payment into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.PaymentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Payment, Export: PaymentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Adjustment != null)
      {
        writer.WritePropertyName("adjustment");
        current.Adjustment.SerializeJson(writer, options);
      }

      if (current.AdjustmentReason != null)
      {
        writer.WritePropertyName("adjustmentReason");
        current.AdjustmentReason.SerializeJson(writer, options);
      }

      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if (current.Amount != null)
      {
        writer.WritePropertyName("amount");
        current.Amount.SerializeJson(writer, options);
      }

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Payment
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.PaymentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Payment
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.PaymentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "adjustment":
          current.Adjustment = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "adjustmentReason":
          current.AdjustmentReason = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "date":
          current.DateElement = new Date(reader.GetString());

          break;

        case "amount":
          current.Amount = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);

          break;

        case "identifier":
          current.Identifier = JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options);

          break;

        // Complex: payment, Export: PaymentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Note into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.NoteComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Note, Export: NoteComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.NumberElement != null) && (current.NumberElement.Value != null))
      {
        writer.WriteNumber("number",(int)current.NumberElement.Value);
      }

      if (current.TypeElement != null)
      {
        writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));
      }

      if ((current.TextElement != null) && (current.TextElement.Value != null))
      {
        writer.WriteString("text",current.TextElement.Value);
      }

      if (current.Language != null)
      {
        writer.WritePropertyName("language");
        current.Language.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Note
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.NoteComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Note
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.NoteComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "number":
          current.NumberElement = new PositiveInt(reader.GetInt32());

          break;

        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.NoteType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.NoteType>(reader.GetString()));

          break;

        case "text":
          current.TextElement = new FhirString(reader.GetString());

          break;

        case "language":
          current.Language = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        // Complex: processNote, Export: NoteComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#BenefitBalance into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.BenefitBalanceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#BenefitBalance, Export: BenefitBalanceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("category");
      current.Category.SerializeJson(writer, options);

      if ((current.ExcludedElement != null) && (current.ExcludedElement.Value != null))
      {
        writer.WriteBoolean("excluded",(bool)current.ExcludedElement.Value);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.DescriptionElement != null) && (current.DescriptionElement.Value != null))
      {
        writer.WriteString("description",current.DescriptionElement.Value);
      }

      if (current.Network != null)
      {
        writer.WritePropertyName("network");
        current.Network.SerializeJson(writer, options);
      }

      if (current.Unit != null)
      {
        writer.WritePropertyName("unit");
        current.Unit.SerializeJson(writer, options);
      }

      if (current.Term != null)
      {
        writer.WritePropertyName("term");
        current.Term.SerializeJson(writer, options);
      }

      if ((current.Financial != null) && (current.Financial.Count != 0))
      {
        writer.WritePropertyName("financial");
        writer.WriteStartArray();
        foreach (ExplanationOfBenefit.BenefitComponent val in current.Financial)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#BenefitBalance
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.BenefitBalanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#BenefitBalance
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.BenefitBalanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "excluded":
          current.ExcludedElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());

          break;

        case "network":
          current.Network = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "unit":
          current.Unit = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "term":
          current.Term = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "financial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Financial = new List<ExplanationOfBenefit.BenefitComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Financial.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ExplanationOfBenefit.BenefitComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Financial.Count == 0)
          {
            current.Financial = null;
          }

          break;

        // Complex: benefitBalance, Export: BenefitBalanceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Benefit into JSON
    /// </summary>
    public static void SerializeJson(this ExplanationOfBenefit.BenefitComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Benefit, Export: BenefitComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if (current.Allowed != null)
      {
        switch (current.Allowed)
        {
          case UnsignedInt v_UnsignedInt:
            writer.WriteNumber("allowedUnsignedInt",(int)v_UnsignedInt.Value);
            break;
          case FhirString v_FhirString:
            writer.WriteString("allowedString",v_FhirString.Value);
            break;
          case Money v_Money:
            writer.WritePropertyName("allowedMoney");
            v_Money.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Used != null)
      {
        switch (current.Used)
        {
          case UnsignedInt v_UnsignedInt:
            writer.WriteNumber("usedUnsignedInt",(int)v_UnsignedInt.Value);
            break;
          case Money v_Money:
            writer.WritePropertyName("usedMoney");
            v_Money.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Benefit
    /// </summary>
    public static void DeserializeJson(this ExplanationOfBenefit.BenefitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Benefit
    /// </summary>
    public static void DeserializeJsonProperty(this ExplanationOfBenefit.BenefitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "allowedUnsignedInt":
          current.Allowed = new UnsignedInt(reader.GetInt32());
          break;

        case "allowedString":
          current.Allowed = new FhirString(reader.GetString());
          break;

        case "allowedMoney":
          current.Allowed = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);
          break;

        case "usedUnsignedInt":
          current.Used = new UnsignedInt(reader.GetInt32());
          break;

        case "usedMoney":
          current.Used = JsonSerializer.Deserialize<Hl7.Fhir.Model.Money>(ref reader, options);
          break;

        // Complex: financial, Export: BenefitComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ExplanationOfBenefitJsonConverter : JsonConverter<ExplanationOfBenefit>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(ExplanationOfBenefit).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, ExplanationOfBenefit value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override ExplanationOfBenefit Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        ExplanationOfBenefit target = new ExplanationOfBenefit();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
