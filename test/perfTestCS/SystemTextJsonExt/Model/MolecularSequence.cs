// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for MolecularSequence
  /// </summary>
  public static class MolecularSequenceJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR MolecularSequence into JSON
    /// </summary>
    public static void SerializeJson(this MolecularSequence current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","MolecularSequence");
      // Complex: MolecularSequence, Export: MolecularSequence, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.TypeElement != null)
      {
        writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));
      }

      writer.WriteNumber("coordinateSystem",(int)current.CoordinateSystemElement.Value);

      if (current.Patient != null)
      {
        writer.WritePropertyName("patient");
        current.Patient.SerializeJson(writer, options);
      }

      if (current.Specimen != null)
      {
        writer.WritePropertyName("specimen");
        current.Specimen.SerializeJson(writer, options);
      }

      if (current.Device != null)
      {
        writer.WritePropertyName("device");
        current.Device.SerializeJson(writer, options);
      }

      if (current.Performer != null)
      {
        writer.WritePropertyName("performer");
        current.Performer.SerializeJson(writer, options);
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.ReferenceSeq != null)
      {
        writer.WritePropertyName("referenceSeq");
        current.ReferenceSeq.SerializeJson(writer, options);
      }

      if ((current.Variant != null) && (current.Variant.Count != 0))
      {
        writer.WritePropertyName("variant");
        writer.WriteStartArray();
        foreach (MolecularSequence.VariantComponent val in current.Variant)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ObservedSeqElement != null) && (current.ObservedSeqElement.Value != null))
      {
        writer.WriteString("observedSeq",current.ObservedSeqElement.Value);
      }

      if ((current.Quality != null) && (current.Quality.Count != 0))
      {
        writer.WritePropertyName("quality");
        writer.WriteStartArray();
        foreach (MolecularSequence.QualityComponent val in current.Quality)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ReadCoverageElement != null) && (current.ReadCoverageElement.Value != null))
      {
        writer.WriteNumber("readCoverage",(int)current.ReadCoverageElement.Value);
      }

      if ((current.Repository != null) && (current.Repository.Count != 0))
      {
        writer.WritePropertyName("repository");
        writer.WriteStartArray();
        foreach (MolecularSequence.RepositoryComponent val in current.Repository)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Pointer != null) && (current.Pointer.Count != 0))
      {
        writer.WritePropertyName("pointer");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Pointer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.StructureVariant != null) && (current.StructureVariant.Count != 0))
      {
        writer.WritePropertyName("structureVariant");
        writer.WriteStartArray();
        foreach (MolecularSequence.StructureVariantComponent val in current.StructureVariant)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence
    /// </summary>
    public static void DeserializeJson(this MolecularSequence current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence
    /// </summary>
    public static void DeserializeJsonProperty(this MolecularSequence current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.MolecularSequence.sequenceType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.MolecularSequence.sequenceType>(reader.GetString()));
          break;

        case "coordinateSystem":
          current.CoordinateSystemElement = new Integer(reader.GetInt32());
          break;

        case "_coordinateSystem":
          ((Hl7.Fhir.Model.Element)current.CoordinateSystemElement).DeserializeJson(ref reader, options);
          break;

        case "patient":
          current.Patient = new Hl7.Fhir.Model.ResourceReference();
          current.Patient.DeserializeJson(ref reader, options);
          break;

        case "specimen":
          current.Specimen = new Hl7.Fhir.Model.ResourceReference();
          current.Specimen.DeserializeJson(ref reader, options);
          break;

        case "device":
          current.Device = new Hl7.Fhir.Model.ResourceReference();
          current.Device.DeserializeJson(ref reader, options);
          break;

        case "performer":
          current.Performer = new Hl7.Fhir.Model.ResourceReference();
          current.Performer.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          current.Quantity.DeserializeJson(ref reader, options);
          break;

        case "referenceSeq":
          current.ReferenceSeq = new Hl7.Fhir.Model.MolecularSequence.ReferenceSeqComponent();
          current.ReferenceSeq.DeserializeJson(ref reader, options);
          break;

        case "variant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Variant = new List<MolecularSequence.VariantComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MolecularSequence.VariantComponent v_Variant = new Hl7.Fhir.Model.MolecularSequence.VariantComponent();
            v_Variant.DeserializeJson(ref reader, options);
            current.Variant.Add(v_Variant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Variant.Count == 0)
          {
            current.Variant = null;
          }
          break;

        case "observedSeq":
          current.ObservedSeqElement = new FhirString(reader.GetString());
          break;

        case "quality":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Quality = new List<MolecularSequence.QualityComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MolecularSequence.QualityComponent v_Quality = new Hl7.Fhir.Model.MolecularSequence.QualityComponent();
            v_Quality.DeserializeJson(ref reader, options);
            current.Quality.Add(v_Quality);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Quality.Count == 0)
          {
            current.Quality = null;
          }
          break;

        case "readCoverage":
          current.ReadCoverageElement = new Integer(reader.GetInt32());
          break;

        case "_readCoverage":
          ((Hl7.Fhir.Model.Element)current.ReadCoverageElement).DeserializeJson(ref reader, options);
          break;

        case "repository":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Repository = new List<MolecularSequence.RepositoryComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MolecularSequence.RepositoryComponent v_Repository = new Hl7.Fhir.Model.MolecularSequence.RepositoryComponent();
            v_Repository.DeserializeJson(ref reader, options);
            current.Repository.Add(v_Repository);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Repository.Count == 0)
          {
            current.Repository = null;
          }
          break;

        case "pointer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Pointer = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Pointer = new Hl7.Fhir.Model.ResourceReference();
            v_Pointer.DeserializeJson(ref reader, options);
            current.Pointer.Add(v_Pointer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Pointer.Count == 0)
          {
            current.Pointer = null;
          }
          break;

        case "structureVariant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.StructureVariant = new List<MolecularSequence.StructureVariantComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MolecularSequence.StructureVariantComponent v_StructureVariant = new Hl7.Fhir.Model.MolecularSequence.StructureVariantComponent();
            v_StructureVariant.DeserializeJson(ref reader, options);
            current.StructureVariant.Add(v_StructureVariant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.StructureVariant.Count == 0)
          {
            current.StructureVariant = null;
          }
          break;

        // Complex: MolecularSequence, Export: MolecularSequence, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#ReferenceSeq into JSON
    /// </summary>
    public static void SerializeJson(this MolecularSequence.ReferenceSeqComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#ReferenceSeq, Export: ReferenceSeqComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Chromosome != null)
      {
        writer.WritePropertyName("chromosome");
        current.Chromosome.SerializeJson(writer, options);
      }

      if ((current.GenomeBuildElement != null) && (current.GenomeBuildElement.Value != null))
      {
        writer.WriteString("genomeBuild",current.GenomeBuildElement.Value);
      }

      if (current.OrientationElement != null)
      {
        writer.WriteString("orientation",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.OrientationElement.Value));
      }

      if (current.ReferenceSeqId != null)
      {
        writer.WritePropertyName("referenceSeqId");
        current.ReferenceSeqId.SerializeJson(writer, options);
      }

      if (current.ReferenceSeqPointer != null)
      {
        writer.WritePropertyName("referenceSeqPointer");
        current.ReferenceSeqPointer.SerializeJson(writer, options);
      }

      if ((current.ReferenceSeqStringElement != null) && (current.ReferenceSeqStringElement.Value != null))
      {
        writer.WriteString("referenceSeqString",current.ReferenceSeqStringElement.Value);
      }

      if (current.StrandElement != null)
      {
        writer.WriteString("strand",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StrandElement.Value));
      }

      if ((current.WindowStartElement != null) && (current.WindowStartElement.Value != null))
      {
        writer.WriteNumber("windowStart",(int)current.WindowStartElement.Value);
      }

      if ((current.WindowEndElement != null) && (current.WindowEndElement.Value != null))
      {
        writer.WriteNumber("windowEnd",(int)current.WindowEndElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#ReferenceSeq
    /// </summary>
    public static void DeserializeJson(this MolecularSequence.ReferenceSeqComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#ReferenceSeq
    /// </summary>
    public static void DeserializeJsonProperty(this MolecularSequence.ReferenceSeqComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "chromosome":
          current.Chromosome = new Hl7.Fhir.Model.CodeableConcept();
          current.Chromosome.DeserializeJson(ref reader, options);
          break;

        case "genomeBuild":
          current.GenomeBuildElement = new FhirString(reader.GetString());
          break;

        case "orientation":
          current.OrientationElement =new Code<Hl7.Fhir.Model.MolecularSequence.orientationType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.MolecularSequence.orientationType>(reader.GetString()));
          break;

        case "referenceSeqId":
          current.ReferenceSeqId = new Hl7.Fhir.Model.CodeableConcept();
          current.ReferenceSeqId.DeserializeJson(ref reader, options);
          break;

        case "referenceSeqPointer":
          current.ReferenceSeqPointer = new Hl7.Fhir.Model.ResourceReference();
          current.ReferenceSeqPointer.DeserializeJson(ref reader, options);
          break;

        case "referenceSeqString":
          current.ReferenceSeqStringElement = new FhirString(reader.GetString());
          break;

        case "strand":
          current.StrandElement =new Code<Hl7.Fhir.Model.MolecularSequence.strandType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.MolecularSequence.strandType>(reader.GetString()));
          break;

        case "windowStart":
          current.WindowStartElement = new Integer(reader.GetInt32());
          break;

        case "_windowStart":
          ((Hl7.Fhir.Model.Element)current.WindowStartElement).DeserializeJson(ref reader, options);
          break;

        case "windowEnd":
          current.WindowEndElement = new Integer(reader.GetInt32());
          break;

        case "_windowEnd":
          ((Hl7.Fhir.Model.Element)current.WindowEndElement).DeserializeJson(ref reader, options);
          break;

        // Complex: referenceSeq, Export: ReferenceSeqComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#Variant into JSON
    /// </summary>
    public static void SerializeJson(this MolecularSequence.VariantComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#Variant, Export: VariantComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.StartElement != null) && (current.StartElement.Value != null))
      {
        writer.WriteNumber("start",(int)current.StartElement.Value);
      }

      if ((current.EndElement != null) && (current.EndElement.Value != null))
      {
        writer.WriteNumber("end",(int)current.EndElement.Value);
      }

      if ((current.ObservedAlleleElement != null) && (current.ObservedAlleleElement.Value != null))
      {
        writer.WriteString("observedAllele",current.ObservedAlleleElement.Value);
      }

      if ((current.ReferenceAlleleElement != null) && (current.ReferenceAlleleElement.Value != null))
      {
        writer.WriteString("referenceAllele",current.ReferenceAlleleElement.Value);
      }

      if ((current.CigarElement != null) && (current.CigarElement.Value != null))
      {
        writer.WriteString("cigar",current.CigarElement.Value);
      }

      if (current.VariantPointer != null)
      {
        writer.WritePropertyName("variantPointer");
        current.VariantPointer.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Variant
    /// </summary>
    public static void DeserializeJson(this MolecularSequence.VariantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Variant
    /// </summary>
    public static void DeserializeJsonProperty(this MolecularSequence.VariantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "start":
          current.StartElement = new Integer(reader.GetInt32());
          break;

        case "_start":
          ((Hl7.Fhir.Model.Element)current.StartElement).DeserializeJson(ref reader, options);
          break;

        case "end":
          current.EndElement = new Integer(reader.GetInt32());
          break;

        case "_end":
          ((Hl7.Fhir.Model.Element)current.EndElement).DeserializeJson(ref reader, options);
          break;

        case "observedAllele":
          current.ObservedAlleleElement = new FhirString(reader.GetString());
          break;

        case "referenceAllele":
          current.ReferenceAlleleElement = new FhirString(reader.GetString());
          break;

        case "cigar":
          current.CigarElement = new FhirString(reader.GetString());
          break;

        case "variantPointer":
          current.VariantPointer = new Hl7.Fhir.Model.ResourceReference();
          current.VariantPointer.DeserializeJson(ref reader, options);
          break;

        // Complex: variant, Export: VariantComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#Quality into JSON
    /// </summary>
    public static void SerializeJson(this MolecularSequence.QualityComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#Quality, Export: QualityComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      if (current.StandardSequence != null)
      {
        writer.WritePropertyName("standardSequence");
        current.StandardSequence.SerializeJson(writer, options);
      }

      if ((current.StartElement != null) && (current.StartElement.Value != null))
      {
        writer.WriteNumber("start",(int)current.StartElement.Value);
      }

      if ((current.EndElement != null) && (current.EndElement.Value != null))
      {
        writer.WriteNumber("end",(int)current.EndElement.Value);
      }

      if (current.Score != null)
      {
        writer.WritePropertyName("score");
        current.Score.SerializeJson(writer, options);
      }

      if (current.Method != null)
      {
        writer.WritePropertyName("method");
        current.Method.SerializeJson(writer, options);
      }

      if ((current.TruthTPElement != null) && (current.TruthTPElement.Value != null))
      {
        writer.WriteNumber("truthTP",(decimal)current.TruthTPElement.Value);
      }

      if ((current.QueryTPElement != null) && (current.QueryTPElement.Value != null))
      {
        writer.WriteNumber("queryTP",(decimal)current.QueryTPElement.Value);
      }

      if ((current.TruthFNElement != null) && (current.TruthFNElement.Value != null))
      {
        writer.WriteNumber("truthFN",(decimal)current.TruthFNElement.Value);
      }

      if ((current.QueryFPElement != null) && (current.QueryFPElement.Value != null))
      {
        writer.WriteNumber("queryFP",(decimal)current.QueryFPElement.Value);
      }

      if ((current.GtFPElement != null) && (current.GtFPElement.Value != null))
      {
        writer.WriteNumber("gtFP",(decimal)current.GtFPElement.Value);
      }

      if ((current.PrecisionElement != null) && (current.PrecisionElement.Value != null))
      {
        writer.WriteNumber("precision",(decimal)current.PrecisionElement.Value);
      }

      if ((current.RecallElement != null) && (current.RecallElement.Value != null))
      {
        writer.WriteNumber("recall",(decimal)current.RecallElement.Value);
      }

      if ((current.FScoreElement != null) && (current.FScoreElement.Value != null))
      {
        writer.WriteNumber("fScore",(decimal)current.FScoreElement.Value);
      }

      if (current.Roc != null)
      {
        writer.WritePropertyName("roc");
        current.Roc.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Quality
    /// </summary>
    public static void DeserializeJson(this MolecularSequence.QualityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Quality
    /// </summary>
    public static void DeserializeJsonProperty(this MolecularSequence.QualityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.MolecularSequence.qualityType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.MolecularSequence.qualityType>(reader.GetString()));
          break;

        case "standardSequence":
          current.StandardSequence = new Hl7.Fhir.Model.CodeableConcept();
          current.StandardSequence.DeserializeJson(ref reader, options);
          break;

        case "start":
          current.StartElement = new Integer(reader.GetInt32());
          break;

        case "_start":
          ((Hl7.Fhir.Model.Element)current.StartElement).DeserializeJson(ref reader, options);
          break;

        case "end":
          current.EndElement = new Integer(reader.GetInt32());
          break;

        case "_end":
          ((Hl7.Fhir.Model.Element)current.EndElement).DeserializeJson(ref reader, options);
          break;

        case "score":
          current.Score = new Hl7.Fhir.Model.Quantity();
          current.Score.DeserializeJson(ref reader, options);
          break;

        case "method":
          current.Method = new Hl7.Fhir.Model.CodeableConcept();
          current.Method.DeserializeJson(ref reader, options);
          break;

        case "truthTP":
          current.TruthTPElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "queryTP":
          current.QueryTPElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "truthFN":
          current.TruthFNElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "queryFP":
          current.QueryFPElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "gtFP":
          current.GtFPElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "precision":
          current.PrecisionElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "recall":
          current.RecallElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "fScore":
          current.FScoreElement = new FhirDecimal(reader.GetDecimal());
          break;

        case "roc":
          current.Roc = new Hl7.Fhir.Model.MolecularSequence.RocComponent();
          current.Roc.DeserializeJson(ref reader, options);
          break;

        // Complex: quality, Export: QualityComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#Roc into JSON
    /// </summary>
    public static void SerializeJson(this MolecularSequence.RocComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#Roc, Export: RocComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.ScoreElement != null) && (current.ScoreElement.Count != 0))
      {
        writer.WritePropertyName("score");
        writer.WriteStartArray();
        foreach (Integer val in current.ScoreElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.NumTPElement != null) && (current.NumTPElement.Count != 0))
      {
        writer.WritePropertyName("numTP");
        writer.WriteStartArray();
        foreach (Integer val in current.NumTPElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.NumFPElement != null) && (current.NumFPElement.Count != 0))
      {
        writer.WritePropertyName("numFP");
        writer.WriteStartArray();
        foreach (Integer val in current.NumFPElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.NumFNElement != null) && (current.NumFNElement.Count != 0))
      {
        writer.WritePropertyName("numFN");
        writer.WriteStartArray();
        foreach (Integer val in current.NumFNElement)
        {
          writer.WriteNumberValue((int)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.PrecisionElement != null) && (current.PrecisionElement.Count != 0))
      {
        writer.WritePropertyName("precision");
        writer.WriteStartArray();
        foreach (FhirDecimal val in current.PrecisionElement)
        {
          writer.WriteNumberValue((decimal)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.SensitivityElement != null) && (current.SensitivityElement.Count != 0))
      {
        writer.WritePropertyName("sensitivity");
        writer.WriteStartArray();
        foreach (FhirDecimal val in current.SensitivityElement)
        {
          writer.WriteNumberValue((decimal)val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.FMeasureElement != null) && (current.FMeasureElement.Count != 0))
      {
        writer.WritePropertyName("fMeasure");
        writer.WriteStartArray();
        foreach (FhirDecimal val in current.FMeasureElement)
        {
          writer.WriteNumberValue((decimal)val.Value);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Roc
    /// </summary>
    public static void DeserializeJson(this MolecularSequence.RocComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Roc
    /// </summary>
    public static void DeserializeJsonProperty(this MolecularSequence.RocComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "score":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ScoreElement = new List<Integer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ScoreElement.Add(new Integer(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ScoreElement.Count == 0)
          {
            current.ScoreElement = null;
          }
          break;

        case "_score":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_score = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ((Hl7.Fhir.Model.Element)current.ScoreElement[i_score++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "numTP":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NumTPElement = new List<Integer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NumTPElement.Add(new Integer(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NumTPElement.Count == 0)
          {
            current.NumTPElement = null;
          }
          break;

        case "_numTP":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_numTP = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ((Hl7.Fhir.Model.Element)current.NumTPElement[i_numTP++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "numFP":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NumFPElement = new List<Integer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NumFPElement.Add(new Integer(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NumFPElement.Count == 0)
          {
            current.NumFPElement = null;
          }
          break;

        case "_numFP":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_numFP = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ((Hl7.Fhir.Model.Element)current.NumFPElement[i_numFP++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "numFN":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.NumFNElement = new List<Integer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.NumFNElement.Add(new Integer(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NumFNElement.Count == 0)
          {
            current.NumFNElement = null;
          }
          break;

        case "_numFN":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_numFN = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ((Hl7.Fhir.Model.Element)current.NumFNElement[i_numFN++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "precision":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PrecisionElement = new List<FhirDecimal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.PrecisionElement.Add(new FhirDecimal(reader.GetDecimal()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PrecisionElement.Count == 0)
          {
            current.PrecisionElement = null;
          }
          break;

        case "sensitivity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SensitivityElement = new List<FhirDecimal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SensitivityElement.Add(new FhirDecimal(reader.GetDecimal()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SensitivityElement.Count == 0)
          {
            current.SensitivityElement = null;
          }
          break;

        case "fMeasure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.FMeasureElement = new List<FhirDecimal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.FMeasureElement.Add(new FhirDecimal(reader.GetDecimal()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.FMeasureElement.Count == 0)
          {
            current.FMeasureElement = null;
          }
          break;

        // Complex: roc, Export: RocComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#Repository into JSON
    /// </summary>
    public static void SerializeJson(this MolecularSequence.RepositoryComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#Repository, Export: RepositoryComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.DatasetIdElement != null) && (current.DatasetIdElement.Value != null))
      {
        writer.WriteString("datasetId",current.DatasetIdElement.Value);
      }

      if ((current.VariantsetIdElement != null) && (current.VariantsetIdElement.Value != null))
      {
        writer.WriteString("variantsetId",current.VariantsetIdElement.Value);
      }

      if ((current.ReadsetIdElement != null) && (current.ReadsetIdElement.Value != null))
      {
        writer.WriteString("readsetId",current.ReadsetIdElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Repository
    /// </summary>
    public static void DeserializeJson(this MolecularSequence.RepositoryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Repository
    /// </summary>
    public static void DeserializeJsonProperty(this MolecularSequence.RepositoryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.MolecularSequence.repositoryType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.MolecularSequence.repositoryType>(reader.GetString()));
          break;

        case "url":
          current.UrlElement = new FhirUri(reader.GetString());
          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "datasetId":
          current.DatasetIdElement = new FhirString(reader.GetString());
          break;

        case "variantsetId":
          current.VariantsetIdElement = new FhirString(reader.GetString());
          break;

        case "readsetId":
          current.ReadsetIdElement = new FhirString(reader.GetString());
          break;

        // Complex: repository, Export: RepositoryComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#StructureVariant into JSON
    /// </summary>
    public static void SerializeJson(this MolecularSequence.StructureVariantComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#StructureVariant, Export: StructureVariantComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.VariantType != null)
      {
        writer.WritePropertyName("variantType");
        current.VariantType.SerializeJson(writer, options);
      }

      if ((current.ExactElement != null) && (current.ExactElement.Value != null))
      {
        writer.WriteBoolean("exact",(bool)current.ExactElement.Value);
      }

      if ((current.LengthElement != null) && (current.LengthElement.Value != null))
      {
        writer.WriteNumber("length",(int)current.LengthElement.Value);
      }

      if (current.Outer != null)
      {
        writer.WritePropertyName("outer");
        current.Outer.SerializeJson(writer, options);
      }

      if (current.Inner != null)
      {
        writer.WritePropertyName("inner");
        current.Inner.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#StructureVariant
    /// </summary>
    public static void DeserializeJson(this MolecularSequence.StructureVariantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#StructureVariant
    /// </summary>
    public static void DeserializeJsonProperty(this MolecularSequence.StructureVariantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "variantType":
          current.VariantType = new Hl7.Fhir.Model.CodeableConcept();
          current.VariantType.DeserializeJson(ref reader, options);
          break;

        case "exact":
          current.ExactElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "length":
          current.LengthElement = new Integer(reader.GetInt32());
          break;

        case "_length":
          ((Hl7.Fhir.Model.Element)current.LengthElement).DeserializeJson(ref reader, options);
          break;

        case "outer":
          current.Outer = new Hl7.Fhir.Model.MolecularSequence.OuterComponent();
          current.Outer.DeserializeJson(ref reader, options);
          break;

        case "inner":
          current.Inner = new Hl7.Fhir.Model.MolecularSequence.InnerComponent();
          current.Inner.DeserializeJson(ref reader, options);
          break;

        // Complex: structureVariant, Export: StructureVariantComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#Outer into JSON
    /// </summary>
    public static void SerializeJson(this MolecularSequence.OuterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#Outer, Export: OuterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.StartElement != null) && (current.StartElement.Value != null))
      {
        writer.WriteNumber("start",(int)current.StartElement.Value);
      }

      if ((current.EndElement != null) && (current.EndElement.Value != null))
      {
        writer.WriteNumber("end",(int)current.EndElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Outer
    /// </summary>
    public static void DeserializeJson(this MolecularSequence.OuterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Outer
    /// </summary>
    public static void DeserializeJsonProperty(this MolecularSequence.OuterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "start":
          current.StartElement = new Integer(reader.GetInt32());
          break;

        case "_start":
          ((Hl7.Fhir.Model.Element)current.StartElement).DeserializeJson(ref reader, options);
          break;

        case "end":
          current.EndElement = new Integer(reader.GetInt32());
          break;

        case "_end":
          ((Hl7.Fhir.Model.Element)current.EndElement).DeserializeJson(ref reader, options);
          break;

        // Complex: outer, Export: OuterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#Inner into JSON
    /// </summary>
    public static void SerializeJson(this MolecularSequence.InnerComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#Inner, Export: InnerComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.StartElement != null) && (current.StartElement.Value != null))
      {
        writer.WriteNumber("start",(int)current.StartElement.Value);
      }

      if ((current.EndElement != null) && (current.EndElement.Value != null))
      {
        writer.WriteNumber("end",(int)current.EndElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Inner
    /// </summary>
    public static void DeserializeJson(this MolecularSequence.InnerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Inner
    /// </summary>
    public static void DeserializeJsonProperty(this MolecularSequence.InnerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "start":
          current.StartElement = new Integer(reader.GetInt32());
          break;

        case "_start":
          ((Hl7.Fhir.Model.Element)current.StartElement).DeserializeJson(ref reader, options);
          break;

        case "end":
          current.EndElement = new Integer(reader.GetInt32());
          break;

        case "_end":
          ((Hl7.Fhir.Model.Element)current.EndElement).DeserializeJson(ref reader, options);
          break;

        // Complex: inner, Export: InnerComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class MolecularSequenceJsonConverter : JsonConverter<MolecularSequence>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(MolecularSequence).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, MolecularSequence value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override MolecularSequence Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        MolecularSequence target = new MolecularSequence();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
