// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for TerminologyCapabilities
  /// </summary>
  public static class TerminologyCapabilitiesJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities into JSON
    /// </summary>
    public static void SerializeJson(this TerminologyCapabilities current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","TerminologyCapabilities");
      // Complex: TerminologyCapabilities, Export: TerminologyCapabilities, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.TitleElement != null) && (current.TitleElement.Value != null))
      {
        writer.WriteString("title",current.TitleElement.Value);
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if ((current.ExperimentalElement != null) && (current.ExperimentalElement.Value != null))
      {
        writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
      }

      writer.WriteString("date",current.DateElement.Value);

      if ((current.PublisherElement != null) && (current.PublisherElement.Value != null))
      {
        writer.WriteString("publisher",current.PublisherElement.Value);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Purpose != null) && (current.Purpose.Value != null))
      {
        writer.WriteString("purpose",current.Purpose.Value);
      }

      if ((current.Copyright != null) && (current.Copyright.Value != null))
      {
        writer.WriteString("copyright",current.Copyright.Value);
      }

      writer.WriteString("kind",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.KindElement.Value));

      if (current.Software != null)
      {
        writer.WritePropertyName("software");
        current.Software.SerializeJson(writer, options);
      }

      if (current.Implementation != null)
      {
        writer.WritePropertyName("implementation");
        current.Implementation.SerializeJson(writer, options);
      }

      if ((current.LockedDateElement != null) && (current.LockedDateElement.Value != null))
      {
        writer.WriteBoolean("lockedDate",(bool)current.LockedDateElement.Value);
      }

      if ((current.CodeSystem != null) && (current.CodeSystem.Count != 0))
      {
        writer.WritePropertyName("codeSystem");
        writer.WriteStartArray();
        foreach (TerminologyCapabilities.CodeSystemComponent val in current.CodeSystem)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Expansion != null)
      {
        writer.WritePropertyName("expansion");
        current.Expansion.SerializeJson(writer, options);
      }

      if (current.CodeSearchElement != null)
      {
        writer.WriteString("codeSearch",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.CodeSearchElement.Value));
      }

      if (current.ValidateCode != null)
      {
        writer.WritePropertyName("validateCode");
        current.ValidateCode.SerializeJson(writer, options);
      }

      if (current.Translation != null)
      {
        writer.WritePropertyName("translation");
        current.Translation.SerializeJson(writer, options);
      }

      if (current.Closure != null)
      {
        writer.WritePropertyName("closure");
        current.Closure.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities
    /// </summary>
    public static void DeserializeJson(this TerminologyCapabilities current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities
    /// </summary>
    public static void DeserializeJsonProperty(this TerminologyCapabilities current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());
          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());
          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          break;

        case "experimental":
          current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());
          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          current.Description = new Markdown(reader.GetString());
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "purpose":
          current.Purpose = new Markdown(reader.GetString());
          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());
          break;

        case "kind":
          current.KindElement =new Code<Hl7.Fhir.Model.CapabilityStatementKind>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatementKind>(reader.GetString()));
          break;

        case "software":
          current.Software = new Hl7.Fhir.Model.TerminologyCapabilities.SoftwareComponent();
          current.Software.DeserializeJson(ref reader, options);
          break;

        case "implementation":
          current.Implementation = new Hl7.Fhir.Model.TerminologyCapabilities.ImplementationComponent();
          current.Implementation.DeserializeJson(ref reader, options);
          break;

        case "lockedDate":
          current.LockedDateElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "codeSystem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.CodeSystem = new List<TerminologyCapabilities.CodeSystemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TerminologyCapabilities.CodeSystemComponent v_CodeSystem = new Hl7.Fhir.Model.TerminologyCapabilities.CodeSystemComponent();
            v_CodeSystem.DeserializeJson(ref reader, options);
            current.CodeSystem.Add(v_CodeSystem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CodeSystem.Count == 0)
          {
            current.CodeSystem = null;
          }
          break;

        case "expansion":
          current.Expansion = new Hl7.Fhir.Model.TerminologyCapabilities.ExpansionComponent();
          current.Expansion.DeserializeJson(ref reader, options);
          break;

        case "codeSearch":
          current.CodeSearchElement =new Code<Hl7.Fhir.Model.TerminologyCapabilities.CodeSearchSupport>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TerminologyCapabilities.CodeSearchSupport>(reader.GetString()));
          break;

        case "validateCode":
          current.ValidateCode = new Hl7.Fhir.Model.TerminologyCapabilities.ValidateCodeComponent();
          current.ValidateCode.DeserializeJson(ref reader, options);
          break;

        case "translation":
          current.Translation = new Hl7.Fhir.Model.TerminologyCapabilities.TranslationComponent();
          current.Translation.DeserializeJson(ref reader, options);
          break;

        case "closure":
          current.Closure = new Hl7.Fhir.Model.TerminologyCapabilities.ClosureComponent();
          current.Closure.DeserializeJson(ref reader, options);
          break;

        // Complex: TerminologyCapabilities, Export: TerminologyCapabilities, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Software into JSON
    /// </summary>
    public static void SerializeJson(this TerminologyCapabilities.SoftwareComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Software, Export: SoftwareComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Software
    /// </summary>
    public static void DeserializeJson(this TerminologyCapabilities.SoftwareComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Software
    /// </summary>
    public static void DeserializeJsonProperty(this TerminologyCapabilities.SoftwareComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());
          break;

        // Complex: software, Export: SoftwareComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Implementation into JSON
    /// </summary>
    public static void SerializeJson(this TerminologyCapabilities.ImplementationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Implementation, Export: ImplementationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("description",current.DescriptionElement.Value);

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Implementation
    /// </summary>
    public static void DeserializeJson(this TerminologyCapabilities.ImplementationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Implementation
    /// </summary>
    public static void DeserializeJsonProperty(this TerminologyCapabilities.ImplementationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());
          break;

        case "url":
          current.UrlElement = new FhirUrl(reader.GetString());
          break;

        // Complex: implementation, Export: ImplementationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#CodeSystem into JSON
    /// </summary>
    public static void SerializeJson(this TerminologyCapabilities.CodeSystemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#CodeSystem, Export: CodeSystemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.UriElement != null) && (current.UriElement.Value != null))
      {
        writer.WriteString("uri",current.UriElement.Value);
      }

      if ((current.Version != null) && (current.Version.Count != 0))
      {
        writer.WritePropertyName("version");
        writer.WriteStartArray();
        foreach (TerminologyCapabilities.VersionComponent val in current.Version)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SubsumptionElement != null) && (current.SubsumptionElement.Value != null))
      {
        writer.WriteBoolean("subsumption",(bool)current.SubsumptionElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#CodeSystem
    /// </summary>
    public static void DeserializeJson(this TerminologyCapabilities.CodeSystemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#CodeSystem
    /// </summary>
    public static void DeserializeJsonProperty(this TerminologyCapabilities.CodeSystemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "uri":
          current.UriElement = new Canonical(reader.GetString());
          break;

        case "_uri":
          ((Hl7.Fhir.Model.Element)current.UriElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Version = new List<TerminologyCapabilities.VersionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TerminologyCapabilities.VersionComponent v_Version = new Hl7.Fhir.Model.TerminologyCapabilities.VersionComponent();
            v_Version.DeserializeJson(ref reader, options);
            current.Version.Add(v_Version);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Version.Count == 0)
          {
            current.Version = null;
          }
          break;

        case "subsumption":
          current.SubsumptionElement = new FhirBoolean(reader.GetBoolean());
          break;

        // Complex: codeSystem, Export: CodeSystemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Version into JSON
    /// </summary>
    public static void SerializeJson(this TerminologyCapabilities.VersionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Version, Export: VersionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.CodeElement != null) && (current.CodeElement.Value != null))
      {
        writer.WriteString("code",current.CodeElement.Value);
      }

      if ((current.IsDefaultElement != null) && (current.IsDefaultElement.Value != null))
      {
        writer.WriteBoolean("isDefault",(bool)current.IsDefaultElement.Value);
      }

      if ((current.CompositionalElement != null) && (current.CompositionalElement.Value != null))
      {
        writer.WriteBoolean("compositional",(bool)current.CompositionalElement.Value);
      }

      if ((current.LanguageElement != null) && (current.LanguageElement.Count != 0))
      {
        writer.WritePropertyName("language");
        writer.WriteStartArray();
        foreach (Code val in current.LanguageElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.Filter != null) && (current.Filter.Count != 0))
      {
        writer.WritePropertyName("filter");
        writer.WriteStartArray();
        foreach (TerminologyCapabilities.FilterComponent val in current.Filter)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.PropertyElement != null) && (current.PropertyElement.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();
        foreach (Code val in current.PropertyElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Version
    /// </summary>
    public static void DeserializeJson(this TerminologyCapabilities.VersionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Version
    /// </summary>
    public static void DeserializeJsonProperty(this TerminologyCapabilities.VersionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.CodeElement = new FhirString(reader.GetString());
          break;

        case "isDefault":
          current.IsDefaultElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "compositional":
          current.CompositionalElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "language":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.LanguageElement = new List<Code>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.LanguageElement.Add(new Code(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LanguageElement.Count == 0)
          {
            current.LanguageElement = null;
          }
          break;

        case "_language":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_language = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ((Hl7.Fhir.Model.Element)current.LanguageElement[i_language++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "filter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Filter = new List<TerminologyCapabilities.FilterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TerminologyCapabilities.FilterComponent v_Filter = new Hl7.Fhir.Model.TerminologyCapabilities.FilterComponent();
            v_Filter.DeserializeJson(ref reader, options);
            current.Filter.Add(v_Filter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Filter.Count == 0)
          {
            current.Filter = null;
          }
          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PropertyElement = new List<Code>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.PropertyElement.Add(new Code(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PropertyElement.Count == 0)
          {
            current.PropertyElement = null;
          }
          break;

        case "_property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_property = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ((Hl7.Fhir.Model.Element)current.PropertyElement[i_property++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: version, Export: VersionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Filter into JSON
    /// </summary>
    public static void SerializeJson(this TerminologyCapabilities.FilterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Filter, Export: FilterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("code",current.CodeElement.Value);

      if ((current.OpElement != null) && (current.OpElement.Count != 0))
      {
        writer.WritePropertyName("op");
        writer.WriteStartArray();
        foreach (Code val in current.OpElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Filter
    /// </summary>
    public static void DeserializeJson(this TerminologyCapabilities.FilterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Filter
    /// </summary>
    public static void DeserializeJsonProperty(this TerminologyCapabilities.FilterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.CodeElement = new Code(reader.GetString());
          break;

        case "_code":
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "op":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.OpElement = new List<Code>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.OpElement.Add(new Code(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.OpElement.Count == 0)
          {
            current.OpElement = null;
          }
          break;

        case "_op":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_op = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ((Hl7.Fhir.Model.Element)current.OpElement[i_op++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: filter, Export: FilterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Expansion into JSON
    /// </summary>
    public static void SerializeJson(this TerminologyCapabilities.ExpansionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Expansion, Export: ExpansionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.HierarchicalElement != null) && (current.HierarchicalElement.Value != null))
      {
        writer.WriteBoolean("hierarchical",(bool)current.HierarchicalElement.Value);
      }

      if ((current.PagingElement != null) && (current.PagingElement.Value != null))
      {
        writer.WriteBoolean("paging",(bool)current.PagingElement.Value);
      }

      if ((current.IncompleteElement != null) && (current.IncompleteElement.Value != null))
      {
        writer.WriteBoolean("incomplete",(bool)current.IncompleteElement.Value);
      }

      if ((current.Parameter != null) && (current.Parameter.Count != 0))
      {
        writer.WritePropertyName("parameter");
        writer.WriteStartArray();
        foreach (TerminologyCapabilities.ParameterComponent val in current.Parameter)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.TextFilter != null) && (current.TextFilter.Value != null))
      {
        writer.WriteString("textFilter",current.TextFilter.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Expansion
    /// </summary>
    public static void DeserializeJson(this TerminologyCapabilities.ExpansionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Expansion
    /// </summary>
    public static void DeserializeJsonProperty(this TerminologyCapabilities.ExpansionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "hierarchical":
          current.HierarchicalElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "paging":
          current.PagingElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "incomplete":
          current.IncompleteElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "parameter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Parameter = new List<TerminologyCapabilities.ParameterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TerminologyCapabilities.ParameterComponent v_Parameter = new Hl7.Fhir.Model.TerminologyCapabilities.ParameterComponent();
            v_Parameter.DeserializeJson(ref reader, options);
            current.Parameter.Add(v_Parameter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Parameter.Count == 0)
          {
            current.Parameter = null;
          }
          break;

        case "textFilter":
          current.TextFilter = new Markdown(reader.GetString());
          break;

        // Complex: expansion, Export: ExpansionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Parameter into JSON
    /// </summary>
    public static void SerializeJson(this TerminologyCapabilities.ParameterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Parameter, Export: ParameterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      if ((current.DocumentationElement != null) && (current.DocumentationElement.Value != null))
      {
        writer.WriteString("documentation",current.DocumentationElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Parameter
    /// </summary>
    public static void DeserializeJson(this TerminologyCapabilities.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Parameter
    /// </summary>
    public static void DeserializeJsonProperty(this TerminologyCapabilities.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new Code(reader.GetString());
          break;

        case "_name":
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          current.DocumentationElement = new FhirString(reader.GetString());
          break;

        // Complex: parameter, Export: ParameterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#ValidateCode into JSON
    /// </summary>
    public static void SerializeJson(this TerminologyCapabilities.ValidateCodeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#ValidateCode, Export: ValidateCodeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteBoolean("translations",(bool)current.TranslationsElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#ValidateCode
    /// </summary>
    public static void DeserializeJson(this TerminologyCapabilities.ValidateCodeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#ValidateCode
    /// </summary>
    public static void DeserializeJsonProperty(this TerminologyCapabilities.ValidateCodeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "translations":
          current.TranslationsElement = new FhirBoolean(reader.GetBoolean());
          break;

        // Complex: validateCode, Export: ValidateCodeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Translation into JSON
    /// </summary>
    public static void SerializeJson(this TerminologyCapabilities.TranslationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Translation, Export: TranslationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteBoolean("needsMap",(bool)current.NeedsMapElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Translation
    /// </summary>
    public static void DeserializeJson(this TerminologyCapabilities.TranslationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Translation
    /// </summary>
    public static void DeserializeJsonProperty(this TerminologyCapabilities.TranslationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "needsMap":
          current.NeedsMapElement = new FhirBoolean(reader.GetBoolean());
          break;

        // Complex: translation, Export: TranslationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Closure into JSON
    /// </summary>
    public static void SerializeJson(this TerminologyCapabilities.ClosureComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Closure, Export: ClosureComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.TranslationElement != null) && (current.TranslationElement.Value != null))
      {
        writer.WriteBoolean("translation",(bool)current.TranslationElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Closure
    /// </summary>
    public static void DeserializeJson(this TerminologyCapabilities.ClosureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Closure
    /// </summary>
    public static void DeserializeJsonProperty(this TerminologyCapabilities.ClosureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "translation":
          current.TranslationElement = new FhirBoolean(reader.GetBoolean());
          break;

        // Complex: closure, Export: ClosureComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class TerminologyCapabilitiesJsonConverter : JsonConverter<TerminologyCapabilities>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(TerminologyCapabilities).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, TerminologyCapabilities value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override TerminologyCapabilities Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        TerminologyCapabilities target = new TerminologyCapabilities();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
