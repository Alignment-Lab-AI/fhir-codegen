// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for TestScript
  /// </summary>
  public static class TestScriptJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR TestScript into JSON
    /// </summary>
    public static void SerializeJson(this TestScript current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","TestScript");
      // Complex: TestScript, Export: TestScript, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      writer.WriteString("url",current.UrlElement.Value);

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      writer.WriteString("name",current.NameElement.Value);

      if (current.TitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.TitleElement.Value))
        {
          writer.WriteString("title",current.TitleElement.Value);
        }
        if (current.TitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.TitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_title",false,current.TitleElement.Extension,current.TitleElement.ElementId);
        }
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if (current.ExperimentalElement != null)
      {
        if (current.ExperimentalElement.Value != null)
        {
          writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
        }
        if (current.ExperimentalElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExperimentalElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_experimental",false,current.ExperimentalElement.Extension,current.ExperimentalElement.ElementId);
        }
      }

      if (current.DateElement != null)
      {
        if (!string.IsNullOrEmpty(current.DateElement.Value))
        {
          writer.WriteString("date",current.DateElement.Value);
        }
        if (current.DateElement.HasExtensions() || (!string.IsNullOrEmpty(current.DateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_date",false,current.DateElement.Extension,current.DateElement.ElementId);
        }
      }

      if (current.PublisherElement != null)
      {
        if (!string.IsNullOrEmpty(current.PublisherElement.Value))
        {
          writer.WriteString("publisher",current.PublisherElement.Value);
        }
        if (current.PublisherElement.HasExtensions() || (!string.IsNullOrEmpty(current.PublisherElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_publisher",false,current.PublisherElement.Extension,current.PublisherElement.ElementId);
        }
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Description != null)
      {
        if (!string.IsNullOrEmpty(current.Description.Value))
        {
          writer.WriteString("description",current.Description.Value);
        }
        if (current.Description.HasExtensions() || (!string.IsNullOrEmpty(current.Description.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.Description.Extension,current.Description.ElementId);
        }
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Purpose != null)
      {
        if (!string.IsNullOrEmpty(current.Purpose.Value))
        {
          writer.WriteString("purpose",current.Purpose.Value);
        }
        if (current.Purpose.HasExtensions() || (!string.IsNullOrEmpty(current.Purpose.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_purpose",false,current.Purpose.Extension,current.Purpose.ElementId);
        }
      }

      if (current.Copyright != null)
      {
        if (!string.IsNullOrEmpty(current.Copyright.Value))
        {
          writer.WriteString("copyright",current.Copyright.Value);
        }
        if (current.Copyright.HasExtensions() || (!string.IsNullOrEmpty(current.Copyright.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_copyright",false,current.Copyright.Extension,current.Copyright.ElementId);
        }
      }

      if ((current.Origin != null) && (current.Origin.Count != 0))
      {
        writer.WritePropertyName("origin");
        writer.WriteStartArray();
        foreach (TestScript.OriginComponent val in current.Origin)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Destination != null) && (current.Destination.Count != 0))
      {
        writer.WritePropertyName("destination");
        writer.WriteStartArray();
        foreach (TestScript.DestinationComponent val in current.Destination)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Metadata != null)
      {
        writer.WritePropertyName("metadata");
        current.Metadata.SerializeJson(writer, options);
      }

      if ((current.Fixture != null) && (current.Fixture.Count != 0))
      {
        writer.WritePropertyName("fixture");
        writer.WriteStartArray();
        foreach (TestScript.FixtureComponent val in current.Fixture)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Profile != null) && (current.Profile.Count != 0))
      {
        writer.WritePropertyName("profile");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Profile)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Variable != null) && (current.Variable.Count != 0))
      {
        writer.WritePropertyName("variable");
        writer.WriteStartArray();
        foreach (TestScript.VariableComponent val in current.Variable)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Setup != null)
      {
        writer.WritePropertyName("setup");
        current.Setup.SerializeJson(writer, options);
      }

      if ((current.Test != null) && (current.Test.Count != 0))
      {
        writer.WritePropertyName("test");
        writer.WriteStartArray();
        foreach (TestScript.TestComponent val in current.Test)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Teardown != null)
      {
        writer.WritePropertyName("teardown");
        current.Teardown.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript
    /// </summary>
    public static void DeserializeJson(this TestScript current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());
          break;

        case "_url":
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());
          break;

        case "_version":
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "_name":
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());
          break;

        case "_title":
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          break;

        case "_status":
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "experimental":
          current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_experimental":
          ((Hl7.Fhir.Model.Element)current.ExperimentalElement).DeserializeJson(ref reader, options);
          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());
          break;

        case "_date":
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());
          break;

        case "_publisher":
          ((Hl7.Fhir.Model.Element)current.PublisherElement).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          current.Description = new Markdown(reader.GetString());
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "purpose":
          current.Purpose = new Markdown(reader.GetString());
          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());
          break;

        case "origin":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Origin = new List<TestScript.OriginComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.OriginComponent v_Origin = new Hl7.Fhir.Model.TestScript.OriginComponent();
            v_Origin.DeserializeJson(ref reader, options);
            current.Origin.Add(v_Origin);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Origin.Count == 0)
          {
            current.Origin = null;
          }
          break;

        case "destination":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Destination = new List<TestScript.DestinationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.DestinationComponent v_Destination = new Hl7.Fhir.Model.TestScript.DestinationComponent();
            v_Destination.DeserializeJson(ref reader, options);
            current.Destination.Add(v_Destination);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Destination.Count == 0)
          {
            current.Destination = null;
          }
          break;

        case "metadata":
          current.Metadata = new Hl7.Fhir.Model.TestScript.MetadataComponent();
          ((Hl7.Fhir.Model.TestScript.MetadataComponent)current.Metadata).DeserializeJson(ref reader, options);
          break;

        case "fixture":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Fixture = new List<TestScript.FixtureComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.FixtureComponent v_Fixture = new Hl7.Fhir.Model.TestScript.FixtureComponent();
            v_Fixture.DeserializeJson(ref reader, options);
            current.Fixture.Add(v_Fixture);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Fixture.Count == 0)
          {
            current.Fixture = null;
          }
          break;

        case "profile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Profile = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Profile = new Hl7.Fhir.Model.ResourceReference();
            v_Profile.DeserializeJson(ref reader, options);
            current.Profile.Add(v_Profile);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Profile.Count == 0)
          {
            current.Profile = null;
          }
          break;

        case "variable":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Variable = new List<TestScript.VariableComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.VariableComponent v_Variable = new Hl7.Fhir.Model.TestScript.VariableComponent();
            v_Variable.DeserializeJson(ref reader, options);
            current.Variable.Add(v_Variable);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Variable.Count == 0)
          {
            current.Variable = null;
          }
          break;

        case "setup":
          current.Setup = new Hl7.Fhir.Model.TestScript.SetupComponent();
          ((Hl7.Fhir.Model.TestScript.SetupComponent)current.Setup).DeserializeJson(ref reader, options);
          break;

        case "test":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Test = new List<TestScript.TestComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.TestComponent v_Test = new Hl7.Fhir.Model.TestScript.TestComponent();
            v_Test.DeserializeJson(ref reader, options);
            current.Test.Add(v_Test);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Test.Count == 0)
          {
            current.Test = null;
          }
          break;

        case "teardown":
          current.Teardown = new Hl7.Fhir.Model.TestScript.TeardownComponent();
          ((Hl7.Fhir.Model.TestScript.TeardownComponent)current.Teardown).DeserializeJson(ref reader, options);
          break;

        // Complex: TestScript, Export: TestScript, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Origin into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.OriginComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Origin, Export: OriginComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("index",(int)current.IndexElement.Value);

      writer.WritePropertyName("profile");
      current.Profile.SerializeJson(writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Origin
    /// </summary>
    public static void DeserializeJson(this TestScript.OriginComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Origin
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.OriginComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "index":
          current.IndexElement = new Integer(reader.GetInt32());
          break;

        case "_index":
          ((Hl7.Fhir.Model.Element)current.IndexElement).DeserializeJson(ref reader, options);
          break;

        case "profile":
          current.Profile = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Profile).DeserializeJson(ref reader, options);
          break;

        // Complex: origin, Export: OriginComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Destination into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.DestinationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Destination, Export: DestinationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteNumber("index",(int)current.IndexElement.Value);

      writer.WritePropertyName("profile");
      current.Profile.SerializeJson(writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Destination
    /// </summary>
    public static void DeserializeJson(this TestScript.DestinationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Destination
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.DestinationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "index":
          current.IndexElement = new Integer(reader.GetInt32());
          break;

        case "_index":
          ((Hl7.Fhir.Model.Element)current.IndexElement).DeserializeJson(ref reader, options);
          break;

        case "profile":
          current.Profile = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Profile).DeserializeJson(ref reader, options);
          break;

        // Complex: destination, Export: DestinationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Metadata into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.MetadataComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Metadata, Export: MetadataComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Link != null) && (current.Link.Count != 0))
      {
        writer.WritePropertyName("link");
        writer.WriteStartArray();
        foreach (TestScript.LinkComponent val in current.Link)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Capability != null) && (current.Capability.Count != 0))
      {
        writer.WritePropertyName("capability");
        writer.WriteStartArray();
        foreach (TestScript.CapabilityComponent val in current.Capability)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Metadata
    /// </summary>
    public static void DeserializeJson(this TestScript.MetadataComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Metadata
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.MetadataComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Link = new List<TestScript.LinkComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.LinkComponent v_Link = new Hl7.Fhir.Model.TestScript.LinkComponent();
            v_Link.DeserializeJson(ref reader, options);
            current.Link.Add(v_Link);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Link.Count == 0)
          {
            current.Link = null;
          }
          break;

        case "capability":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Capability = new List<TestScript.CapabilityComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.CapabilityComponent v_Capability = new Hl7.Fhir.Model.TestScript.CapabilityComponent();
            v_Capability.DeserializeJson(ref reader, options);
            current.Capability.Add(v_Capability);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Capability.Count == 0)
          {
            current.Capability = null;
          }
          break;

        // Complex: metadata, Export: MetadataComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Link into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.LinkComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Link, Export: LinkComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("url",current.UrlElement.Value);

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Link
    /// </summary>
    public static void DeserializeJson(this TestScript.LinkComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Link
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.LinkComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());
          break;

        case "_url":
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());
          break;

        case "_description":
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        // Complex: link, Export: LinkComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Capability into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.CapabilityComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Capability, Export: CapabilityComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteBoolean("required",(bool)current.RequiredElement.Value);

      writer.WriteBoolean("validated",(bool)current.ValidatedElement.Value);

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if ((current.OriginElement != null) && (current.OriginElement.Count != 0))
      {
        writer.WritePropertyName("origin");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (Integer val in current.OriginElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (Integer val in current.OriginElement)
        {
          if (val.Value == null)
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteNumberValue((int)val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_origin");
          writer.WriteStartArray();
          foreach (Integer val in current.OriginElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if (current.DestinationElement != null)
      {
        if (current.DestinationElement.Value != null)
        {
          writer.WriteNumber("destination",(int)current.DestinationElement.Value);
        }
        if (current.DestinationElement.HasExtensions() || (!string.IsNullOrEmpty(current.DestinationElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_destination",false,current.DestinationElement.Extension,current.DestinationElement.ElementId);
        }
      }

      if ((current.LinkElement != null) && (current.LinkElement.Count != 0))
      {
        writer.WritePropertyName("link");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirUri val in current.LinkElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirUri val in current.LinkElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_link");
          writer.WriteStartArray();
          foreach (FhirUri val in current.LinkElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      writer.WriteString("capabilities",current.CapabilitiesElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Capability
    /// </summary>
    public static void DeserializeJson(this TestScript.CapabilityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Capability
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.CapabilityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "required":
          current.RequiredElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_required":
          ((Hl7.Fhir.Model.Element)current.RequiredElement).DeserializeJson(ref reader, options);
          break;

        case "validated":
          current.ValidatedElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_validated":
          ((Hl7.Fhir.Model.Element)current.ValidatedElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());
          break;

        case "_description":
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "origin":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.OriginElement = new List<Integer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.OriginElement.Add(new Integer(reader.GetInt32()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.OriginElement.Count == 0)
          {
            current.OriginElement = null;
          }
          break;

        case "_origin":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_origin = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_origin >= current.OriginElement.Count)
            {
              current.OriginElement.Add(new Integer());
            }
            ((Hl7.Fhir.Model.Element)current.OriginElement[i_origin++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "destination":
          current.DestinationElement = new Integer(reader.GetInt32());
          break;

        case "_destination":
          ((Hl7.Fhir.Model.Element)current.DestinationElement).DeserializeJson(ref reader, options);
          break;

        case "link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.LinkElement = new List<FhirUri>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.LinkElement.Add(new FhirUri(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LinkElement.Count == 0)
          {
            current.LinkElement = null;
          }
          break;

        case "_link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_link = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_link >= current.LinkElement.Count)
            {
              current.LinkElement.Add(new FhirUri());
            }
            ((Hl7.Fhir.Model.Element)current.LinkElement[i_link++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "capabilities":
          current.CapabilitiesElement = new Canonical(reader.GetString());
          break;

        case "_capabilities":
          ((Hl7.Fhir.Model.Element)current.CapabilitiesElement).DeserializeJson(ref reader, options);
          break;

        // Complex: capability, Export: CapabilityComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Fixture into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.FixtureComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Fixture, Export: FixtureComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteBoolean("autocreate",(bool)current.AutocreateElement.Value);

      writer.WriteBoolean("autodelete",(bool)current.AutodeleteElement.Value);

      if (current.Resource != null)
      {
        writer.WritePropertyName("resource");
        current.Resource.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Fixture
    /// </summary>
    public static void DeserializeJson(this TestScript.FixtureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Fixture
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.FixtureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "autocreate":
          current.AutocreateElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_autocreate":
          ((Hl7.Fhir.Model.Element)current.AutocreateElement).DeserializeJson(ref reader, options);
          break;

        case "autodelete":
          current.AutodeleteElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_autodelete":
          ((Hl7.Fhir.Model.Element)current.AutodeleteElement).DeserializeJson(ref reader, options);
          break;

        case "resource":
          current.Resource = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Resource).DeserializeJson(ref reader, options);
          break;

        // Complex: fixture, Export: FixtureComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Variable into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.VariableComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Variable, Export: VariableComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      if (current.DefaultValueElement != null)
      {
        if (!string.IsNullOrEmpty(current.DefaultValueElement.Value))
        {
          writer.WriteString("defaultValue",current.DefaultValueElement.Value);
        }
        if (current.DefaultValueElement.HasExtensions() || (!string.IsNullOrEmpty(current.DefaultValueElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_defaultValue",false,current.DefaultValueElement.Extension,current.DefaultValueElement.ElementId);
        }
      }

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if (current.ExpressionElement != null)
      {
        if (!string.IsNullOrEmpty(current.ExpressionElement.Value))
        {
          writer.WriteString("expression",current.ExpressionElement.Value);
        }
        if (current.ExpressionElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExpressionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_expression",false,current.ExpressionElement.Extension,current.ExpressionElement.ElementId);
        }
      }

      if (current.HeaderFieldElement != null)
      {
        if (!string.IsNullOrEmpty(current.HeaderFieldElement.Value))
        {
          writer.WriteString("headerField",current.HeaderFieldElement.Value);
        }
        if (current.HeaderFieldElement.HasExtensions() || (!string.IsNullOrEmpty(current.HeaderFieldElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_headerField",false,current.HeaderFieldElement.Extension,current.HeaderFieldElement.ElementId);
        }
      }

      if (current.HintElement != null)
      {
        if (!string.IsNullOrEmpty(current.HintElement.Value))
        {
          writer.WriteString("hint",current.HintElement.Value);
        }
        if (current.HintElement.HasExtensions() || (!string.IsNullOrEmpty(current.HintElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_hint",false,current.HintElement.Extension,current.HintElement.ElementId);
        }
      }

      if (current.PathElement != null)
      {
        if (!string.IsNullOrEmpty(current.PathElement.Value))
        {
          writer.WriteString("path",current.PathElement.Value);
        }
        if (current.PathElement.HasExtensions() || (!string.IsNullOrEmpty(current.PathElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_path",false,current.PathElement.Extension,current.PathElement.ElementId);
        }
      }

      if (current.SourceIdElement != null)
      {
        if (!string.IsNullOrEmpty(current.SourceIdElement.Value))
        {
          writer.WriteString("sourceId",current.SourceIdElement.Value);
        }
        if (current.SourceIdElement.HasExtensions() || (!string.IsNullOrEmpty(current.SourceIdElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_sourceId",false,current.SourceIdElement.Extension,current.SourceIdElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Variable
    /// </summary>
    public static void DeserializeJson(this TestScript.VariableComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Variable
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.VariableComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "_name":
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "defaultValue":
          current.DefaultValueElement = new FhirString(reader.GetString());
          break;

        case "_defaultValue":
          ((Hl7.Fhir.Model.Element)current.DefaultValueElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());
          break;

        case "_description":
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "expression":
          current.ExpressionElement = new FhirString(reader.GetString());
          break;

        case "_expression":
          ((Hl7.Fhir.Model.Element)current.ExpressionElement).DeserializeJson(ref reader, options);
          break;

        case "headerField":
          current.HeaderFieldElement = new FhirString(reader.GetString());
          break;

        case "_headerField":
          ((Hl7.Fhir.Model.Element)current.HeaderFieldElement).DeserializeJson(ref reader, options);
          break;

        case "hint":
          current.HintElement = new FhirString(reader.GetString());
          break;

        case "_hint":
          ((Hl7.Fhir.Model.Element)current.HintElement).DeserializeJson(ref reader, options);
          break;

        case "path":
          current.PathElement = new FhirString(reader.GetString());
          break;

        case "_path":
          ((Hl7.Fhir.Model.Element)current.PathElement).DeserializeJson(ref reader, options);
          break;

        case "sourceId":
          current.SourceIdElement = new Id(reader.GetString());
          break;

        case "_sourceId":
          ((Hl7.Fhir.Model.Element)current.SourceIdElement).DeserializeJson(ref reader, options);
          break;

        // Complex: variable, Export: VariableComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Setup into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.SetupComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Setup, Export: SetupComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Action != null) && (current.Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();
        foreach (TestScript.SetupActionComponent val in current.Action)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Setup
    /// </summary>
    public static void DeserializeJson(this TestScript.SetupComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Setup
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.SetupComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Action = new List<TestScript.SetupActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.SetupActionComponent v_Action = new Hl7.Fhir.Model.TestScript.SetupActionComponent();
            v_Action.DeserializeJson(ref reader, options);
            current.Action.Add(v_Action);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Action.Count == 0)
          {
            current.Action = null;
          }
          break;

        // Complex: setup, Export: SetupComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#SetupAction into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.SetupActionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#SetupAction, Export: SetupActionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Operation != null)
      {
        writer.WritePropertyName("operation");
        current.Operation.SerializeJson(writer, options);
      }

      if (current.Assert != null)
      {
        writer.WritePropertyName("assert");
        current.Assert.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#SetupAction
    /// </summary>
    public static void DeserializeJson(this TestScript.SetupActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#SetupAction
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.SetupActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "operation":
          current.Operation = new Hl7.Fhir.Model.TestScript.OperationComponent();
          ((Hl7.Fhir.Model.TestScript.OperationComponent)current.Operation).DeserializeJson(ref reader, options);
          break;

        case "assert":
          current.Assert = new Hl7.Fhir.Model.TestScript.AssertComponent();
          ((Hl7.Fhir.Model.TestScript.AssertComponent)current.Assert).DeserializeJson(ref reader, options);
          break;

        // Complex: action, Export: SetupActionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Operation into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.OperationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Operation, Export: OperationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.ResourceElement != null)
      {
        writer.WriteString("resource",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ResourceElement.Value));
      }

      if (current.LabelElement != null)
      {
        if (!string.IsNullOrEmpty(current.LabelElement.Value))
        {
          writer.WriteString("label",current.LabelElement.Value);
        }
        if (current.LabelElement.HasExtensions() || (!string.IsNullOrEmpty(current.LabelElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_label",false,current.LabelElement.Extension,current.LabelElement.ElementId);
        }
      }

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if (current.AcceptElement != null)
      {
        if (!string.IsNullOrEmpty(current.AcceptElement.Value))
        {
          writer.WriteString("accept",current.AcceptElement.Value);
        }
        if (current.AcceptElement.HasExtensions() || (!string.IsNullOrEmpty(current.AcceptElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_accept",false,current.AcceptElement.Extension,current.AcceptElement.ElementId);
        }
      }

      if (current.ContentTypeElement != null)
      {
        if (!string.IsNullOrEmpty(current.ContentTypeElement.Value))
        {
          writer.WriteString("contentType",current.ContentTypeElement.Value);
        }
        if (current.ContentTypeElement.HasExtensions() || (!string.IsNullOrEmpty(current.ContentTypeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_contentType",false,current.ContentTypeElement.Extension,current.ContentTypeElement.ElementId);
        }
      }

      if (current.DestinationElement != null)
      {
        if (current.DestinationElement.Value != null)
        {
          writer.WriteNumber("destination",(int)current.DestinationElement.Value);
        }
        if (current.DestinationElement.HasExtensions() || (!string.IsNullOrEmpty(current.DestinationElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_destination",false,current.DestinationElement.Extension,current.DestinationElement.ElementId);
        }
      }

      writer.WriteBoolean("encodeRequestUrl",(bool)current.EncodeRequestUrlElement.Value);

      if (current.MethodElement != null)
      {
        writer.WriteString("method",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.MethodElement.Value));
      }

      if (current.OriginElement != null)
      {
        if (current.OriginElement.Value != null)
        {
          writer.WriteNumber("origin",(int)current.OriginElement.Value);
        }
        if (current.OriginElement.HasExtensions() || (!string.IsNullOrEmpty(current.OriginElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_origin",false,current.OriginElement.Extension,current.OriginElement.ElementId);
        }
      }

      if (current.ParamsElement != null)
      {
        if (!string.IsNullOrEmpty(current.ParamsElement.Value))
        {
          writer.WriteString("params",current.ParamsElement.Value);
        }
        if (current.ParamsElement.HasExtensions() || (!string.IsNullOrEmpty(current.ParamsElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_params",false,current.ParamsElement.Extension,current.ParamsElement.ElementId);
        }
      }

      if ((current.RequestHeader != null) && (current.RequestHeader.Count != 0))
      {
        writer.WritePropertyName("requestHeader");
        writer.WriteStartArray();
        foreach (TestScript.RequestHeaderComponent val in current.RequestHeader)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.RequestIdElement != null)
      {
        if (!string.IsNullOrEmpty(current.RequestIdElement.Value))
        {
          writer.WriteString("requestId",current.RequestIdElement.Value);
        }
        if (current.RequestIdElement.HasExtensions() || (!string.IsNullOrEmpty(current.RequestIdElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_requestId",false,current.RequestIdElement.Extension,current.RequestIdElement.ElementId);
        }
      }

      if (current.ResponseIdElement != null)
      {
        if (!string.IsNullOrEmpty(current.ResponseIdElement.Value))
        {
          writer.WriteString("responseId",current.ResponseIdElement.Value);
        }
        if (current.ResponseIdElement.HasExtensions() || (!string.IsNullOrEmpty(current.ResponseIdElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_responseId",false,current.ResponseIdElement.Extension,current.ResponseIdElement.ElementId);
        }
      }

      if (current.SourceIdElement != null)
      {
        if (!string.IsNullOrEmpty(current.SourceIdElement.Value))
        {
          writer.WriteString("sourceId",current.SourceIdElement.Value);
        }
        if (current.SourceIdElement.HasExtensions() || (!string.IsNullOrEmpty(current.SourceIdElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_sourceId",false,current.SourceIdElement.Extension,current.SourceIdElement.ElementId);
        }
      }

      if (current.TargetIdElement != null)
      {
        if (!string.IsNullOrEmpty(current.TargetIdElement.Value))
        {
          writer.WriteString("targetId",current.TargetIdElement.Value);
        }
        if (current.TargetIdElement.HasExtensions() || (!string.IsNullOrEmpty(current.TargetIdElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_targetId",false,current.TargetIdElement.Extension,current.TargetIdElement.ElementId);
        }
      }

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Operation
    /// </summary>
    public static void DeserializeJson(this TestScript.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Operation
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Type).DeserializeJson(ref reader, options);
          break;

        case "resource":
          current.ResourceElement =new Code<Hl7.Fhir.Model.FHIRDefinedType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FHIRDefinedType>(reader.GetString()));
          break;

        case "_resource":
          ((Hl7.Fhir.Model.Element)current.ResourceElement).DeserializeJson(ref reader, options);
          break;

        case "label":
          current.LabelElement = new FhirString(reader.GetString());
          break;

        case "_label":
          ((Hl7.Fhir.Model.Element)current.LabelElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());
          break;

        case "_description":
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "accept":
          current.AcceptElement = new Code(reader.GetString());
          break;

        case "_accept":
          ((Hl7.Fhir.Model.Element)current.AcceptElement).DeserializeJson(ref reader, options);
          break;

        case "contentType":
          current.ContentTypeElement = new Code(reader.GetString());
          break;

        case "_contentType":
          ((Hl7.Fhir.Model.Element)current.ContentTypeElement).DeserializeJson(ref reader, options);
          break;

        case "destination":
          current.DestinationElement = new Integer(reader.GetInt32());
          break;

        case "_destination":
          ((Hl7.Fhir.Model.Element)current.DestinationElement).DeserializeJson(ref reader, options);
          break;

        case "encodeRequestUrl":
          current.EncodeRequestUrlElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_encodeRequestUrl":
          ((Hl7.Fhir.Model.Element)current.EncodeRequestUrlElement).DeserializeJson(ref reader, options);
          break;

        case "method":
          current.MethodElement =new Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>(reader.GetString()));
          break;

        case "_method":
          ((Hl7.Fhir.Model.Element)current.MethodElement).DeserializeJson(ref reader, options);
          break;

        case "origin":
          current.OriginElement = new Integer(reader.GetInt32());
          break;

        case "_origin":
          ((Hl7.Fhir.Model.Element)current.OriginElement).DeserializeJson(ref reader, options);
          break;

        case "params":
          current.ParamsElement = new FhirString(reader.GetString());
          break;

        case "_params":
          ((Hl7.Fhir.Model.Element)current.ParamsElement).DeserializeJson(ref reader, options);
          break;

        case "requestHeader":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.RequestHeader = new List<TestScript.RequestHeaderComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.RequestHeaderComponent v_RequestHeader = new Hl7.Fhir.Model.TestScript.RequestHeaderComponent();
            v_RequestHeader.DeserializeJson(ref reader, options);
            current.RequestHeader.Add(v_RequestHeader);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.RequestHeader.Count == 0)
          {
            current.RequestHeader = null;
          }
          break;

        case "requestId":
          current.RequestIdElement = new Id(reader.GetString());
          break;

        case "_requestId":
          ((Hl7.Fhir.Model.Element)current.RequestIdElement).DeserializeJson(ref reader, options);
          break;

        case "responseId":
          current.ResponseIdElement = new Id(reader.GetString());
          break;

        case "_responseId":
          ((Hl7.Fhir.Model.Element)current.ResponseIdElement).DeserializeJson(ref reader, options);
          break;

        case "sourceId":
          current.SourceIdElement = new Id(reader.GetString());
          break;

        case "_sourceId":
          ((Hl7.Fhir.Model.Element)current.SourceIdElement).DeserializeJson(ref reader, options);
          break;

        case "targetId":
          current.TargetIdElement = new Id(reader.GetString());
          break;

        case "_targetId":
          ((Hl7.Fhir.Model.Element)current.TargetIdElement).DeserializeJson(ref reader, options);
          break;

        case "url":
          current.UrlElement = new FhirString(reader.GetString());
          break;

        case "_url":
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        // Complex: operation, Export: OperationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#RequestHeader into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.RequestHeaderComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#RequestHeader, Export: RequestHeaderComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("field",current.FieldElement.Value);

      writer.WriteString("value",current.ValueElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#RequestHeader
    /// </summary>
    public static void DeserializeJson(this TestScript.RequestHeaderComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#RequestHeader
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.RequestHeaderComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "field":
          current.FieldElement = new FhirString(reader.GetString());
          break;

        case "_field":
          ((Hl7.Fhir.Model.Element)current.FieldElement).DeserializeJson(ref reader, options);
          break;

        case "value":
          current.ValueElement = new FhirString(reader.GetString());
          break;

        case "_value":
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        // Complex: requestHeader, Export: RequestHeaderComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Assert into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.AssertComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Assert, Export: AssertComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.LabelElement != null)
      {
        if (!string.IsNullOrEmpty(current.LabelElement.Value))
        {
          writer.WriteString("label",current.LabelElement.Value);
        }
        if (current.LabelElement.HasExtensions() || (!string.IsNullOrEmpty(current.LabelElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_label",false,current.LabelElement.Extension,current.LabelElement.ElementId);
        }
      }

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if (current.DirectionElement != null)
      {
        writer.WriteString("direction",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.DirectionElement.Value));
      }

      if (current.CompareToSourceIdElement != null)
      {
        if (!string.IsNullOrEmpty(current.CompareToSourceIdElement.Value))
        {
          writer.WriteString("compareToSourceId",current.CompareToSourceIdElement.Value);
        }
        if (current.CompareToSourceIdElement.HasExtensions() || (!string.IsNullOrEmpty(current.CompareToSourceIdElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_compareToSourceId",false,current.CompareToSourceIdElement.Extension,current.CompareToSourceIdElement.ElementId);
        }
      }

      if (current.CompareToSourceExpressionElement != null)
      {
        if (!string.IsNullOrEmpty(current.CompareToSourceExpressionElement.Value))
        {
          writer.WriteString("compareToSourceExpression",current.CompareToSourceExpressionElement.Value);
        }
        if (current.CompareToSourceExpressionElement.HasExtensions() || (!string.IsNullOrEmpty(current.CompareToSourceExpressionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_compareToSourceExpression",false,current.CompareToSourceExpressionElement.Extension,current.CompareToSourceExpressionElement.ElementId);
        }
      }

      if (current.CompareToSourcePathElement != null)
      {
        if (!string.IsNullOrEmpty(current.CompareToSourcePathElement.Value))
        {
          writer.WriteString("compareToSourcePath",current.CompareToSourcePathElement.Value);
        }
        if (current.CompareToSourcePathElement.HasExtensions() || (!string.IsNullOrEmpty(current.CompareToSourcePathElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_compareToSourcePath",false,current.CompareToSourcePathElement.Extension,current.CompareToSourcePathElement.ElementId);
        }
      }

      if (current.ContentTypeElement != null)
      {
        if (!string.IsNullOrEmpty(current.ContentTypeElement.Value))
        {
          writer.WriteString("contentType",current.ContentTypeElement.Value);
        }
        if (current.ContentTypeElement.HasExtensions() || (!string.IsNullOrEmpty(current.ContentTypeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_contentType",false,current.ContentTypeElement.Extension,current.ContentTypeElement.ElementId);
        }
      }

      if (current.ExpressionElement != null)
      {
        if (!string.IsNullOrEmpty(current.ExpressionElement.Value))
        {
          writer.WriteString("expression",current.ExpressionElement.Value);
        }
        if (current.ExpressionElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExpressionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_expression",false,current.ExpressionElement.Extension,current.ExpressionElement.ElementId);
        }
      }

      if (current.HeaderFieldElement != null)
      {
        if (!string.IsNullOrEmpty(current.HeaderFieldElement.Value))
        {
          writer.WriteString("headerField",current.HeaderFieldElement.Value);
        }
        if (current.HeaderFieldElement.HasExtensions() || (!string.IsNullOrEmpty(current.HeaderFieldElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_headerField",false,current.HeaderFieldElement.Extension,current.HeaderFieldElement.ElementId);
        }
      }

      if (current.MinimumIdElement != null)
      {
        if (!string.IsNullOrEmpty(current.MinimumIdElement.Value))
        {
          writer.WriteString("minimumId",current.MinimumIdElement.Value);
        }
        if (current.MinimumIdElement.HasExtensions() || (!string.IsNullOrEmpty(current.MinimumIdElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_minimumId",false,current.MinimumIdElement.Extension,current.MinimumIdElement.ElementId);
        }
      }

      if (current.NavigationLinksElement != null)
      {
        if (current.NavigationLinksElement.Value != null)
        {
          writer.WriteBoolean("navigationLinks",(bool)current.NavigationLinksElement.Value);
        }
        if (current.NavigationLinksElement.HasExtensions() || (!string.IsNullOrEmpty(current.NavigationLinksElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_navigationLinks",false,current.NavigationLinksElement.Extension,current.NavigationLinksElement.ElementId);
        }
      }

      if (current.OperatorElement != null)
      {
        writer.WriteString("operator",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.OperatorElement.Value));
      }

      if (current.PathElement != null)
      {
        if (!string.IsNullOrEmpty(current.PathElement.Value))
        {
          writer.WriteString("path",current.PathElement.Value);
        }
        if (current.PathElement.HasExtensions() || (!string.IsNullOrEmpty(current.PathElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_path",false,current.PathElement.Extension,current.PathElement.ElementId);
        }
      }

      if (current.RequestMethodElement != null)
      {
        writer.WriteString("requestMethod",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.RequestMethodElement.Value));
      }

      if (current.RequestURLElement != null)
      {
        if (!string.IsNullOrEmpty(current.RequestURLElement.Value))
        {
          writer.WriteString("requestURL",current.RequestURLElement.Value);
        }
        if (current.RequestURLElement.HasExtensions() || (!string.IsNullOrEmpty(current.RequestURLElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_requestURL",false,current.RequestURLElement.Extension,current.RequestURLElement.ElementId);
        }
      }

      if (current.ResourceElement != null)
      {
        writer.WriteString("resource",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ResourceElement.Value));
      }

      if (current.ResponseElement != null)
      {
        writer.WriteString("response",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ResponseElement.Value));
      }

      if (current.ResponseCodeElement != null)
      {
        if (!string.IsNullOrEmpty(current.ResponseCodeElement.Value))
        {
          writer.WriteString("responseCode",current.ResponseCodeElement.Value);
        }
        if (current.ResponseCodeElement.HasExtensions() || (!string.IsNullOrEmpty(current.ResponseCodeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_responseCode",false,current.ResponseCodeElement.Extension,current.ResponseCodeElement.ElementId);
        }
      }

      if (current.SourceIdElement != null)
      {
        if (!string.IsNullOrEmpty(current.SourceIdElement.Value))
        {
          writer.WriteString("sourceId",current.SourceIdElement.Value);
        }
        if (current.SourceIdElement.HasExtensions() || (!string.IsNullOrEmpty(current.SourceIdElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_sourceId",false,current.SourceIdElement.Extension,current.SourceIdElement.ElementId);
        }
      }

      if (current.ValidateProfileIdElement != null)
      {
        if (!string.IsNullOrEmpty(current.ValidateProfileIdElement.Value))
        {
          writer.WriteString("validateProfileId",current.ValidateProfileIdElement.Value);
        }
        if (current.ValidateProfileIdElement.HasExtensions() || (!string.IsNullOrEmpty(current.ValidateProfileIdElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_validateProfileId",false,current.ValidateProfileIdElement.Extension,current.ValidateProfileIdElement.ElementId);
        }
      }

      if (current.ValueElement != null)
      {
        if (!string.IsNullOrEmpty(current.ValueElement.Value))
        {
          writer.WriteString("value",current.ValueElement.Value);
        }
        if (current.ValueElement.HasExtensions() || (!string.IsNullOrEmpty(current.ValueElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_value",false,current.ValueElement.Extension,current.ValueElement.ElementId);
        }
      }

      writer.WriteBoolean("warningOnly",(bool)current.WarningOnlyElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Assert
    /// </summary>
    public static void DeserializeJson(this TestScript.AssertComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Assert
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.AssertComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "label":
          current.LabelElement = new FhirString(reader.GetString());
          break;

        case "_label":
          ((Hl7.Fhir.Model.Element)current.LabelElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());
          break;

        case "_description":
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "direction":
          current.DirectionElement =new Code<Hl7.Fhir.Model.TestScript.AssertionDirectionType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestScript.AssertionDirectionType>(reader.GetString()));
          break;

        case "_direction":
          ((Hl7.Fhir.Model.Element)current.DirectionElement).DeserializeJson(ref reader, options);
          break;

        case "compareToSourceId":
          current.CompareToSourceIdElement = new FhirString(reader.GetString());
          break;

        case "_compareToSourceId":
          ((Hl7.Fhir.Model.Element)current.CompareToSourceIdElement).DeserializeJson(ref reader, options);
          break;

        case "compareToSourceExpression":
          current.CompareToSourceExpressionElement = new FhirString(reader.GetString());
          break;

        case "_compareToSourceExpression":
          ((Hl7.Fhir.Model.Element)current.CompareToSourceExpressionElement).DeserializeJson(ref reader, options);
          break;

        case "compareToSourcePath":
          current.CompareToSourcePathElement = new FhirString(reader.GetString());
          break;

        case "_compareToSourcePath":
          ((Hl7.Fhir.Model.Element)current.CompareToSourcePathElement).DeserializeJson(ref reader, options);
          break;

        case "contentType":
          current.ContentTypeElement = new Code(reader.GetString());
          break;

        case "_contentType":
          ((Hl7.Fhir.Model.Element)current.ContentTypeElement).DeserializeJson(ref reader, options);
          break;

        case "expression":
          current.ExpressionElement = new FhirString(reader.GetString());
          break;

        case "_expression":
          ((Hl7.Fhir.Model.Element)current.ExpressionElement).DeserializeJson(ref reader, options);
          break;

        case "headerField":
          current.HeaderFieldElement = new FhirString(reader.GetString());
          break;

        case "_headerField":
          ((Hl7.Fhir.Model.Element)current.HeaderFieldElement).DeserializeJson(ref reader, options);
          break;

        case "minimumId":
          current.MinimumIdElement = new FhirString(reader.GetString());
          break;

        case "_minimumId":
          ((Hl7.Fhir.Model.Element)current.MinimumIdElement).DeserializeJson(ref reader, options);
          break;

        case "navigationLinks":
          current.NavigationLinksElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_navigationLinks":
          ((Hl7.Fhir.Model.Element)current.NavigationLinksElement).DeserializeJson(ref reader, options);
          break;

        case "operator":
          current.OperatorElement =new Code<Hl7.Fhir.Model.TestScript.AssertionOperatorType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestScript.AssertionOperatorType>(reader.GetString()));
          break;

        case "_operator":
          ((Hl7.Fhir.Model.Element)current.OperatorElement).DeserializeJson(ref reader, options);
          break;

        case "path":
          current.PathElement = new FhirString(reader.GetString());
          break;

        case "_path":
          ((Hl7.Fhir.Model.Element)current.PathElement).DeserializeJson(ref reader, options);
          break;

        case "requestMethod":
          current.RequestMethodElement =new Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>(reader.GetString()));
          break;

        case "_requestMethod":
          ((Hl7.Fhir.Model.Element)current.RequestMethodElement).DeserializeJson(ref reader, options);
          break;

        case "requestURL":
          current.RequestURLElement = new FhirString(reader.GetString());
          break;

        case "_requestURL":
          ((Hl7.Fhir.Model.Element)current.RequestURLElement).DeserializeJson(ref reader, options);
          break;

        case "resource":
          current.ResourceElement =new Code<Hl7.Fhir.Model.FHIRDefinedType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FHIRDefinedType>(reader.GetString()));
          break;

        case "_resource":
          ((Hl7.Fhir.Model.Element)current.ResourceElement).DeserializeJson(ref reader, options);
          break;

        case "response":
          current.ResponseElement =new Code<Hl7.Fhir.Model.TestScript.AssertionResponseTypes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestScript.AssertionResponseTypes>(reader.GetString()));
          break;

        case "_response":
          ((Hl7.Fhir.Model.Element)current.ResponseElement).DeserializeJson(ref reader, options);
          break;

        case "responseCode":
          current.ResponseCodeElement = new FhirString(reader.GetString());
          break;

        case "_responseCode":
          ((Hl7.Fhir.Model.Element)current.ResponseCodeElement).DeserializeJson(ref reader, options);
          break;

        case "sourceId":
          current.SourceIdElement = new Id(reader.GetString());
          break;

        case "_sourceId":
          ((Hl7.Fhir.Model.Element)current.SourceIdElement).DeserializeJson(ref reader, options);
          break;

        case "validateProfileId":
          current.ValidateProfileIdElement = new Id(reader.GetString());
          break;

        case "_validateProfileId":
          ((Hl7.Fhir.Model.Element)current.ValidateProfileIdElement).DeserializeJson(ref reader, options);
          break;

        case "value":
          current.ValueElement = new FhirString(reader.GetString());
          break;

        case "_value":
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        case "warningOnly":
          current.WarningOnlyElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_warningOnly":
          ((Hl7.Fhir.Model.Element)current.WarningOnlyElement).DeserializeJson(ref reader, options);
          break;

        // Complex: assert, Export: AssertComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Test into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.TestComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Test, Export: TestComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if ((current.Action != null) && (current.Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();
        foreach (TestScript.TestActionComponent val in current.Action)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Test
    /// </summary>
    public static void DeserializeJson(this TestScript.TestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Test
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.TestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "_name":
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());
          break;

        case "_description":
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Action = new List<TestScript.TestActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.TestActionComponent v_Action = new Hl7.Fhir.Model.TestScript.TestActionComponent();
            v_Action.DeserializeJson(ref reader, options);
            current.Action.Add(v_Action);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Action.Count == 0)
          {
            current.Action = null;
          }
          break;

        // Complex: test, Export: TestComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#TestAction into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.TestActionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#TestAction, Export: TestActionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Operation != null)
      {
        writer.WritePropertyName("operation");
        current.Operation.SerializeJson(writer, options);
      }

      if (current.Assert != null)
      {
        writer.WritePropertyName("assert");
        current.Assert.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#TestAction
    /// </summary>
    public static void DeserializeJson(this TestScript.TestActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#TestAction
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.TestActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "operation":
          current.Operation = new Hl7.Fhir.Model.TestScript.OperationComponent();
          ((Hl7.Fhir.Model.TestScript.OperationComponent)current.Operation).DeserializeJson(ref reader, options);
          break;

        case "assert":
          current.Assert = new Hl7.Fhir.Model.TestScript.AssertComponent();
          ((Hl7.Fhir.Model.TestScript.AssertComponent)current.Assert).DeserializeJson(ref reader, options);
          break;

        // Complex: action, Export: TestActionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Teardown into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.TeardownComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Teardown, Export: TeardownComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Action != null) && (current.Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();
        foreach (TestScript.TeardownActionComponent val in current.Action)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Teardown
    /// </summary>
    public static void DeserializeJson(this TestScript.TeardownComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Teardown
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.TeardownComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Action = new List<TestScript.TeardownActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.TeardownActionComponent v_Action = new Hl7.Fhir.Model.TestScript.TeardownActionComponent();
            v_Action.DeserializeJson(ref reader, options);
            current.Action.Add(v_Action);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Action.Count == 0)
          {
            current.Action = null;
          }
          break;

        // Complex: teardown, Export: TeardownComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#TeardownAction into JSON
    /// </summary>
    public static void SerializeJson(this TestScript.TeardownActionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#TeardownAction, Export: TeardownActionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("operation");
      current.Operation.SerializeJson(writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#TeardownAction
    /// </summary>
    public static void DeserializeJson(this TestScript.TeardownActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#TeardownAction
    /// </summary>
    public static void DeserializeJsonProperty(this TestScript.TeardownActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "operation":
          current.Operation = new Hl7.Fhir.Model.TestScript.OperationComponent();
          ((Hl7.Fhir.Model.TestScript.OperationComponent)current.Operation).DeserializeJson(ref reader, options);
          break;

        // Complex: action, Export: TeardownActionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class TestScriptJsonConverter : JsonConverter<TestScript>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(TestScript).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, TestScript value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override TestScript Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        TestScript target = new TestScript();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
