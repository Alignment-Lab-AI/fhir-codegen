// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for ActivityDefinition
  /// </summary>
  public static class ActivityDefinitionJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR ActivityDefinition into JSON
    /// </summary>
    public static void SerializeJson(this ActivityDefinition current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ActivityDefinition");
      // Complex: ActivityDefinition, Export: ActivityDefinition, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.TitleElement != null) && (current.TitleElement.Value != null))
      {
        writer.WriteString("title",current.TitleElement.Value);
      }

      if ((current.SubtitleElement != null) && (current.SubtitleElement.Value != null))
      {
        writer.WriteString("subtitle",current.SubtitleElement.Value);
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if ((current.ExperimentalElement != null) && (current.ExperimentalElement.Value != null))
      {
        writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
      }

      if (current.Subject != null)
      {
        switch (current.Subject)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("subjectCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("subjectReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if ((current.PublisherElement != null) && (current.PublisherElement.Value != null))
      {
        writer.WriteString("publisher",current.PublisherElement.Value);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Purpose != null) && (current.Purpose.Value != null))
      {
        writer.WriteString("purpose",current.Purpose.Value);
      }

      if ((current.UsageElement != null) && (current.UsageElement.Value != null))
      {
        writer.WriteString("usage",current.UsageElement.Value);
      }

      if ((current.Copyright != null) && (current.Copyright.Value != null))
      {
        writer.WriteString("copyright",current.Copyright.Value);
      }

      if ((current.ApprovalDateElement != null) && (current.ApprovalDateElement.Value != null))
      {
        writer.WriteString("approvalDate",current.ApprovalDateElement.Value);
      }

      if ((current.LastReviewDateElement != null) && (current.LastReviewDateElement.Value != null))
      {
        writer.WriteString("lastReviewDate",current.LastReviewDateElement.Value);
      }

      if (current.EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        current.EffectivePeriod.SerializeJson(writer, options);
      }

      if ((current.Topic != null) && (current.Topic.Count != 0))
      {
        writer.WritePropertyName("topic");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Topic)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Author != null) && (current.Author.Count != 0))
      {
        writer.WritePropertyName("author");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Author)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Editor != null) && (current.Editor.Count != 0))
      {
        writer.WritePropertyName("editor");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Editor)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Reviewer != null) && (current.Reviewer.Count != 0))
      {
        writer.WritePropertyName("reviewer");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Reviewer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Endorser != null) && (current.Endorser.Count != 0))
      {
        writer.WritePropertyName("endorser");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Endorser)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.RelatedArtifact != null) && (current.RelatedArtifact.Count != 0))
      {
        writer.WritePropertyName("relatedArtifact");
        writer.WriteStartArray();
        foreach (RelatedArtifact val in current.RelatedArtifact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.LibraryElement != null) && (current.LibraryElement.Count != 0))
      {
        writer.WritePropertyName("library");
        writer.WriteStartArray();
        foreach (Canonical val in current.LibraryElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (current.KindElement != null)
      {
        writer.WriteString("kind",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.KindElement.Value));
      }

      if ((current.ProfileElement != null) && (current.ProfileElement.Value != null))
      {
        writer.WriteString("profile",current.ProfileElement.Value);
      }

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (current.IntentElement != null)
      {
        writer.WriteString("intent",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.IntentElement.Value));
      }

      if (current.PriorityElement != null)
      {
        writer.WriteString("priority",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.PriorityElement.Value));
      }

      if ((current.DoNotPerformElement != null) && (current.DoNotPerformElement.Value != null))
      {
        writer.WriteBoolean("doNotPerform",(bool)current.DoNotPerformElement.Value);
      }

      if (current.Timing != null)
      {
        switch (current.Timing)
        {
          case Timing v_Timing:
            writer.WritePropertyName("timingTiming");
            v_Timing.SerializeJson(writer, options);
            break;
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("timingDateTime",v_FhirDateTime.Value);
            break;
          case Age v_Age:
            writer.WritePropertyName("timingAge");
            v_Age.SerializeJson(writer, options);
            break;
          case Period v_Period:
            writer.WritePropertyName("timingPeriod");
            v_Period.SerializeJson(writer, options);
            break;
          case Range v_Range:
            writer.WritePropertyName("timingRange");
            v_Range.SerializeJson(writer, options);
            break;
          case Duration v_Duration:
            writer.WritePropertyName("timingDuration");
            v_Duration.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Location != null)
      {
        writer.WritePropertyName("location");
        current.Location.SerializeJson(writer, options);
      }

      if ((current.Participant != null) && (current.Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();
        foreach (ActivityDefinition.ParticipantComponent val in current.Participant)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Product != null)
      {
        switch (current.Product)
        {
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("productReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("productCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if ((current.Dosage != null) && (current.Dosage.Count != 0))
      {
        writer.WritePropertyName("dosage");
        writer.WriteStartArray();
        foreach (Dosage val in current.Dosage)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.BodySite != null) && (current.BodySite.Count != 0))
      {
        writer.WritePropertyName("bodySite");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.BodySite)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SpecimenRequirement != null) && (current.SpecimenRequirement.Count != 0))
      {
        writer.WritePropertyName("specimenRequirement");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.SpecimenRequirement)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ObservationRequirement != null) && (current.ObservationRequirement.Count != 0))
      {
        writer.WritePropertyName("observationRequirement");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.ObservationRequirement)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ObservationResultRequirement != null) && (current.ObservationResultRequirement.Count != 0))
      {
        writer.WritePropertyName("observationResultRequirement");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.ObservationResultRequirement)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.TransformElement != null) && (current.TransformElement.Value != null))
      {
        writer.WriteString("transform",current.TransformElement.Value);
      }

      if ((current.DynamicValue != null) && (current.DynamicValue.Count != 0))
      {
        writer.WritePropertyName("dynamicValue");
        writer.WriteStartArray();
        foreach (ActivityDefinition.DynamicValueComponent val in current.DynamicValue)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ActivityDefinition
    /// </summary>
    public static void DeserializeJson(this ActivityDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ActivityDefinition
    /// </summary>
    public static void DeserializeJsonProperty(this ActivityDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Identifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }

          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());

          break;

        case "subtitle":
          current.SubtitleElement = new FhirString(reader.GetString());

          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));

          break;

        case "experimental":
          current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "subjectCodeableConcept":
          current.Subject = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "subjectReference":
          current.Subject = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());

          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Contact.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }

          break;

        case "description":
          current.Description = new Markdown(reader.GetString());

          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.UseContext.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.UsageContext>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Jurisdiction.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }

          break;

        case "purpose":
          current.Purpose = new Markdown(reader.GetString());

          break;

        case "usage":
          current.UsageElement = new FhirString(reader.GetString());

          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());

          break;

        case "approvalDate":
          current.ApprovalDateElement = new Date(reader.GetString());

          break;

        case "lastReviewDate":
          current.LastReviewDateElement = new Date(reader.GetString());

          break;

        case "effectivePeriod":
          current.EffectivePeriod = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);

          break;

        case "topic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Topic = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Topic.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Topic.Count == 0)
          {
            current.Topic = null;
          }

          break;

        case "author":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Author = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Author.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Author.Count == 0)
          {
            current.Author = null;
          }

          break;

        case "editor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Editor = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Editor.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Editor.Count == 0)
          {
            current.Editor = null;
          }

          break;

        case "reviewer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Reviewer = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Reviewer.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Reviewer.Count == 0)
          {
            current.Reviewer = null;
          }

          break;

        case "endorser":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Endorser = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Endorser.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Endorser.Count == 0)
          {
            current.Endorser = null;
          }

          break;

        case "relatedArtifact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.RelatedArtifact = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.RelatedArtifact.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.RelatedArtifact>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.RelatedArtifact.Count == 0)
          {
            current.RelatedArtifact = null;
          }

          break;

        case "library":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.LibraryElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.LibraryElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.LibraryElement.Count == 0)
          {
            current.LibraryElement = null;
          }

          break;

        case "kind":
          current.KindElement =new Code<Hl7.Fhir.Model.ActivityDefinition.RequestResourceType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ActivityDefinition.RequestResourceType>(reader.GetString()));

          break;

        case "profile":
          current.ProfileElement = new Canonical(reader.GetString());

          break;

        case "code":
          current.Code = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "intent":
          current.IntentElement =new Code<Hl7.Fhir.Model.RequestIntent>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.RequestIntent>(reader.GetString()));

          break;

        case "priority":
          current.PriorityElement =new Code<Hl7.Fhir.Model.RequestPriority>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.RequestPriority>(reader.GetString()));

          break;

        case "doNotPerform":
          current.DoNotPerformElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "timingTiming":
          current.Timing = JsonSerializer.Deserialize<Hl7.Fhir.Model.Timing>(ref reader, options);
          break;

        case "timingDateTime":
          current.Timing = new FhirDateTime(reader.GetString());
          break;

        case "timingAge":
          current.Timing = JsonSerializer.Deserialize<Hl7.Fhir.Model.Age>(ref reader, options);
          break;

        case "timingPeriod":
          current.Timing = JsonSerializer.Deserialize<Hl7.Fhir.Model.Period>(ref reader, options);
          break;

        case "timingRange":
          current.Timing = JsonSerializer.Deserialize<Hl7.Fhir.Model.Range>(ref reader, options);
          break;

        case "timingDuration":
          current.Timing = JsonSerializer.Deserialize<Hl7.Fhir.Model.Duration>(ref reader, options);
          break;

        case "location":
          current.Location = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Participant = new List<ActivityDefinition.ParticipantComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Participant.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ActivityDefinition.ParticipantComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Participant.Count == 0)
          {
            current.Participant = null;
          }

          break;

        case "productReference":
          current.Product = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "productCodeableConcept":
          current.Product = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "quantity":
          current.Quantity = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);

          break;

        case "dosage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Dosage = new List<Dosage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Dosage.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Dosage>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Dosage.Count == 0)
          {
            current.Dosage = null;
          }

          break;

        case "bodySite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.BodySite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.BodySite.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.BodySite.Count == 0)
          {
            current.BodySite = null;
          }

          break;

        case "specimenRequirement":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SpecimenRequirement = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SpecimenRequirement.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SpecimenRequirement.Count == 0)
          {
            current.SpecimenRequirement = null;
          }

          break;

        case "observationRequirement":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ObservationRequirement = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ObservationRequirement.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ObservationRequirement.Count == 0)
          {
            current.ObservationRequirement = null;
          }

          break;

        case "observationResultRequirement":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ObservationResultRequirement = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ObservationResultRequirement.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ObservationResultRequirement.Count == 0)
          {
            current.ObservationResultRequirement = null;
          }

          break;

        case "transform":
          current.TransformElement = new Canonical(reader.GetString());

          break;

        case "dynamicValue":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.DynamicValue = new List<ActivityDefinition.DynamicValueComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.DynamicValue.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ActivityDefinition.DynamicValueComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.DynamicValue.Count == 0)
          {
            current.DynamicValue = null;
          }

          break;

        // Complex: ActivityDefinition, Export: ActivityDefinition, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ActivityDefinition#Participant into JSON
    /// </summary>
    public static void SerializeJson(this ActivityDefinition.ParticipantComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ActivityDefinition#Participant, Export: ParticipantComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      if (current.Role != null)
      {
        writer.WritePropertyName("role");
        current.Role.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ActivityDefinition#Participant
    /// </summary>
    public static void DeserializeJson(this ActivityDefinition.ParticipantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ActivityDefinition#Participant
    /// </summary>
    public static void DeserializeJsonProperty(this ActivityDefinition.ParticipantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.ActionParticipantType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ActionParticipantType>(reader.GetString()));

          break;

        case "role":
          current.Role = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        // Complex: participant, Export: ParticipantComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ActivityDefinition#DynamicValue into JSON
    /// </summary>
    public static void SerializeJson(this ActivityDefinition.DynamicValueComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ActivityDefinition#DynamicValue, Export: DynamicValueComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("path",current.PathElement.Value);

      writer.WritePropertyName("expression");
      current.Expression.SerializeJson(writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ActivityDefinition#DynamicValue
    /// </summary>
    public static void DeserializeJson(this ActivityDefinition.DynamicValueComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ActivityDefinition#DynamicValue
    /// </summary>
    public static void DeserializeJsonProperty(this ActivityDefinition.DynamicValueComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "path":
          current.PathElement = new FhirString(reader.GetString());

          break;

        case "expression":
          current.Expression = JsonSerializer.Deserialize<Hl7.Fhir.Model.Expression>(ref reader, options);

          break;

        // Complex: dynamicValue, Export: DynamicValueComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ActivityDefinitionJsonConverter : JsonConverter<ActivityDefinition>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(ActivityDefinition).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, ActivityDefinition value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override ActivityDefinition Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        ActivityDefinition target = new ActivityDefinition();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
