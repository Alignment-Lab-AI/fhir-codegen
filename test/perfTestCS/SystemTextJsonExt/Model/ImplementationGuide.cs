// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for ImplementationGuide
  /// </summary>
  public static class ImplementationGuideJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR ImplementationGuide into JSON
    /// </summary>
    public static void SerializeJson(this ImplementationGuide current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ImplementationGuide");
      // Complex: ImplementationGuide, Export: ImplementationGuide, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      writer.WriteString("url",current.UrlElement.Value);

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      writer.WriteString("name",current.NameElement.Value);

      if ((current.TitleElement != null) && (current.TitleElement.Value != null))
      {
        writer.WriteString("title",current.TitleElement.Value);
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if ((current.ExperimentalElement != null) && (current.ExperimentalElement.Value != null))
      {
        writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
      }

      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if ((current.PublisherElement != null) && (current.PublisherElement.Value != null))
      {
        writer.WriteString("publisher",current.PublisherElement.Value);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Copyright != null) && (current.Copyright.Value != null))
      {
        writer.WriteString("copyright",current.Copyright.Value);
      }

      writer.WriteString("packageId",current.PackageIdElement.Value);

      if (current.LicenseElement != null)
      {
        writer.WriteString("license",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.LicenseElement.Value));
      }

      if ((current.FhirVersionElement != null) && (current.FhirVersionElement.Count != 0))
      {
        writer.WritePropertyName("fhirVersion");
        writer.WriteStartArray();
        foreach (Code<Hl7.Fhir.Model.FHIRVersion> val in current.FhirVersionElement)
        {
          writer.WriteStringValue(Hl7.Fhir.Utility.EnumUtility.GetLiteral(val.Value));
        }
        writer.WriteEndArray();
      }

      if ((current.DependsOn != null) && (current.DependsOn.Count != 0))
      {
        writer.WritePropertyName("dependsOn");
        writer.WriteStartArray();
        foreach (ImplementationGuide.DependsOnComponent val in current.DependsOn)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Global != null) && (current.Global.Count != 0))
      {
        writer.WritePropertyName("global");
        writer.WriteStartArray();
        foreach (ImplementationGuide.GlobalComponent val in current.Global)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Definition != null)
      {
        writer.WritePropertyName("definition");
        current.Definition.SerializeJson(writer, options);
      }

      if (current.Manifest != null)
      {
        writer.WritePropertyName("manifest");
        current.Manifest.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide
    /// </summary>
    public static void DeserializeJson(this ImplementationGuide current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide
    /// </summary>
    public static void DeserializeJsonProperty(this ImplementationGuide current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());

          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());

          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));

          break;

        case "experimental":
          current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());

          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Contact.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }

          break;

        case "description":
          current.Description = new Markdown(reader.GetString());

          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.UseContext.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.UsageContext>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Jurisdiction.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }

          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());

          break;

        case "packageId":
          current.PackageIdElement = new Id(reader.GetString());

          break;

        case "license":
          current.LicenseElement =new Code<Hl7.Fhir.Model.ImplementationGuide.SPDXLicense>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ImplementationGuide.SPDXLicense>(reader.GetString()));

          break;

        case "fhirVersion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.FhirVersionElement = new List<Code<Hl7.Fhir.Model.FHIRVersion>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.FhirVersionElement.Add(new Code<Hl7.Fhir.Model.FHIRVersion>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FHIRVersion>(reader.GetString())));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.FhirVersionElement.Count == 0)
          {
            current.FhirVersionElement = null;
          }

          break;

        case "dependsOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.DependsOn = new List<ImplementationGuide.DependsOnComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.DependsOn.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ImplementationGuide.DependsOnComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.DependsOn.Count == 0)
          {
            current.DependsOn = null;
          }

          break;

        case "global":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Global = new List<ImplementationGuide.GlobalComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Global.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ImplementationGuide.GlobalComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Global.Count == 0)
          {
            current.Global = null;
          }

          break;

        case "definition":
          current.Definition = JsonSerializer.Deserialize<Hl7.Fhir.Model.ImplementationGuide.DefinitionComponent>(ref reader, options);

          break;

        case "manifest":
          current.Manifest = JsonSerializer.Deserialize<Hl7.Fhir.Model.ImplementationGuide.ManifestComponent>(ref reader, options);

          break;

        // Complex: ImplementationGuide, Export: ImplementationGuide, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#DependsOn into JSON
    /// </summary>
    public static void SerializeJson(this ImplementationGuide.DependsOnComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#DependsOn, Export: DependsOnComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("uri",current.UriElement.Value);

      if ((current.PackageIdElement != null) && (current.PackageIdElement.Value != null))
      {
        writer.WriteString("packageId",current.PackageIdElement.Value);
      }

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#DependsOn
    /// </summary>
    public static void DeserializeJson(this ImplementationGuide.DependsOnComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#DependsOn
    /// </summary>
    public static void DeserializeJsonProperty(this ImplementationGuide.DependsOnComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "uri":
          current.UriElement = new Canonical(reader.GetString());

          break;

        case "packageId":
          current.PackageIdElement = new Id(reader.GetString());

          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());

          break;

        // Complex: dependsOn, Export: DependsOnComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Global into JSON
    /// </summary>
    public static void SerializeJson(this ImplementationGuide.GlobalComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Global, Export: GlobalComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      writer.WriteString("profile",current.ProfileElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Global
    /// </summary>
    public static void DeserializeJson(this ImplementationGuide.GlobalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Global
    /// </summary>
    public static void DeserializeJsonProperty(this ImplementationGuide.GlobalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.ResourceType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ResourceType>(reader.GetString()));

          break;

        case "profile":
          current.ProfileElement = new Canonical(reader.GetString());

          break;

        // Complex: global, Export: GlobalComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Definition into JSON
    /// </summary>
    public static void SerializeJson(this ImplementationGuide.DefinitionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Definition, Export: DefinitionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Grouping != null) && (current.Grouping.Count != 0))
      {
        writer.WritePropertyName("grouping");
        writer.WriteStartArray();
        foreach (ImplementationGuide.GroupingComponent val in current.Grouping)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Resource != null) && (current.Resource.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();
        foreach (ImplementationGuide.ResourceComponent val in current.Resource)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Page != null)
      {
        writer.WritePropertyName("page");
        current.Page.SerializeJson(writer, options);
      }

      if ((current.Parameter != null) && (current.Parameter.Count != 0))
      {
        writer.WritePropertyName("parameter");
        writer.WriteStartArray();
        foreach (ImplementationGuide.ParameterComponent val in current.Parameter)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Template != null) && (current.Template.Count != 0))
      {
        writer.WritePropertyName("template");
        writer.WriteStartArray();
        foreach (ImplementationGuide.TemplateComponent val in current.Template)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Definition
    /// </summary>
    public static void DeserializeJson(this ImplementationGuide.DefinitionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Definition
    /// </summary>
    public static void DeserializeJsonProperty(this ImplementationGuide.DefinitionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "grouping":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Grouping = new List<ImplementationGuide.GroupingComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Grouping.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ImplementationGuide.GroupingComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Grouping.Count == 0)
          {
            current.Grouping = null;
          }

          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Resource = new List<ImplementationGuide.ResourceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Resource.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ImplementationGuide.ResourceComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Resource.Count == 0)
          {
            current.Resource = null;
          }

          break;

        case "page":
          current.Page = JsonSerializer.Deserialize<Hl7.Fhir.Model.ImplementationGuide.PageComponent>(ref reader, options);

          break;

        case "parameter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Parameter = new List<ImplementationGuide.ParameterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Parameter.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ImplementationGuide.ParameterComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Parameter.Count == 0)
          {
            current.Parameter = null;
          }

          break;

        case "template":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Template = new List<ImplementationGuide.TemplateComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Template.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ImplementationGuide.TemplateComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Template.Count == 0)
          {
            current.Template = null;
          }

          break;

        // Complex: definition, Export: DefinitionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Grouping into JSON
    /// </summary>
    public static void SerializeJson(this ImplementationGuide.GroupingComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Grouping, Export: GroupingComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      if ((current.DescriptionElement != null) && (current.DescriptionElement.Value != null))
      {
        writer.WriteString("description",current.DescriptionElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Grouping
    /// </summary>
    public static void DeserializeJson(this ImplementationGuide.GroupingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Grouping
    /// </summary>
    public static void DeserializeJsonProperty(this ImplementationGuide.GroupingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());

          break;

        // Complex: grouping, Export: GroupingComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Resource into JSON
    /// </summary>
    public static void SerializeJson(this ImplementationGuide.ResourceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Resource, Export: ResourceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("reference");
      current.Reference.SerializeJson(writer, options);

      if ((current.FhirVersionElement != null) && (current.FhirVersionElement.Count != 0))
      {
        writer.WritePropertyName("fhirVersion");
        writer.WriteStartArray();
        foreach (Code<Hl7.Fhir.Model.FHIRVersion> val in current.FhirVersionElement)
        {
          writer.WriteStringValue(Hl7.Fhir.Utility.EnumUtility.GetLiteral(val.Value));
        }
        writer.WriteEndArray();
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.DescriptionElement != null) && (current.DescriptionElement.Value != null))
      {
        writer.WriteString("description",current.DescriptionElement.Value);
      }

      if (current.Example != null)
      {
        switch (current.Example)
        {
          case FhirBoolean v_FhirBoolean:
            writer.WriteBoolean("exampleBoolean", (bool)v_FhirBoolean.Value);
            break;
          case Canonical v_Canonical:
            writer.WriteString("exampleCanonical",v_Canonical.Value);
            break;
        }
      }
      if ((current.GroupingIdElement != null) && (current.GroupingIdElement.Value != null))
      {
        writer.WriteString("groupingId",current.GroupingIdElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Resource
    /// </summary>
    public static void DeserializeJson(this ImplementationGuide.ResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Resource
    /// </summary>
    public static void DeserializeJsonProperty(this ImplementationGuide.ResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          current.Reference = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "fhirVersion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.FhirVersionElement = new List<Code<Hl7.Fhir.Model.FHIRVersion>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.FhirVersionElement.Add(new Code<Hl7.Fhir.Model.FHIRVersion>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FHIRVersion>(reader.GetString())));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.FhirVersionElement.Count == 0)
          {
            current.FhirVersionElement = null;
          }

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());

          break;

        case "exampleBoolean":
          current.Example = new FhirBoolean(reader.GetBoolean());
          break;

        case "exampleCanonical":
          current.Example = new Canonical(reader.GetString());
          break;

        case "groupingId":
          current.GroupingIdElement = new Id(reader.GetString());

          break;

        // Complex: resource, Export: ResourceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Page into JSON
    /// </summary>
    public static void SerializeJson(this ImplementationGuide.PageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Page, Export: PageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Name != null)
      {
        switch (current.Name)
        {
          case FhirUrl v_FhirUrl:
            writer.WriteString("nameUrl",v_FhirUrl.Value);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("nameReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      writer.WriteString("title",current.TitleElement.Value);

      writer.WriteString("generation",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.GenerationElement.Value));

      if ((current.Page != null) && (current.Page.Count != 0))
      {
        writer.WritePropertyName("page");
        writer.WriteStartArray();
        foreach (ImplementationGuide.PageComponent val in current.Page)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Page
    /// </summary>
    public static void DeserializeJson(this ImplementationGuide.PageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Page
    /// </summary>
    public static void DeserializeJsonProperty(this ImplementationGuide.PageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "nameUrl":
          current.Name = new FhirUrl(reader.GetString());
          break;

        case "nameReference":
          current.Name = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());

          break;

        case "generation":
          current.GenerationElement =new Code<Hl7.Fhir.Model.ImplementationGuide.GuidePageGeneration>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ImplementationGuide.GuidePageGeneration>(reader.GetString()));

          break;

        case "page":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Page = new List<ImplementationGuide.PageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Page.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ImplementationGuide.PageComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Page.Count == 0)
          {
            current.Page = null;
          }

          break;

        // Complex: page, Export: PageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Parameter into JSON
    /// </summary>
    public static void SerializeJson(this ImplementationGuide.ParameterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Parameter, Export: ParameterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("code",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.CodeElement.Value));

      writer.WriteString("value",current.ValueElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Parameter
    /// </summary>
    public static void DeserializeJson(this ImplementationGuide.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Parameter
    /// </summary>
    public static void DeserializeJsonProperty(this ImplementationGuide.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.CodeElement =new Code<Hl7.Fhir.Model.ImplementationGuide.GuideParameterCode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ImplementationGuide.GuideParameterCode>(reader.GetString()));

          break;

        case "value":
          current.ValueElement = new FhirString(reader.GetString());

          break;

        // Complex: parameter, Export: ParameterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Template into JSON
    /// </summary>
    public static void SerializeJson(this ImplementationGuide.TemplateComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Template, Export: TemplateComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("code",current.CodeElement.Value);

      writer.WriteString("source",current.SourceElement.Value);

      if ((current.ScopeElement != null) && (current.ScopeElement.Value != null))
      {
        writer.WriteString("scope",current.ScopeElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Template
    /// </summary>
    public static void DeserializeJson(this ImplementationGuide.TemplateComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Template
    /// </summary>
    public static void DeserializeJsonProperty(this ImplementationGuide.TemplateComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.CodeElement = new Code(reader.GetString());

          break;

        case "source":
          current.SourceElement = new FhirString(reader.GetString());

          break;

        case "scope":
          current.ScopeElement = new FhirString(reader.GetString());

          break;

        // Complex: template, Export: TemplateComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Manifest into JSON
    /// </summary>
    public static void SerializeJson(this ImplementationGuide.ManifestComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Manifest, Export: ManifestComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.RenderingElement != null) && (current.RenderingElement.Value != null))
      {
        writer.WriteString("rendering",current.RenderingElement.Value);
      }

      if ((current.Resource != null) && (current.Resource.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();
        foreach (ImplementationGuide.ManifestResourceComponent val in current.Resource)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Page != null) && (current.Page.Count != 0))
      {
        writer.WritePropertyName("page");
        writer.WriteStartArray();
        foreach (ImplementationGuide.ManifestPageComponent val in current.Page)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ImageElement != null) && (current.ImageElement.Count != 0))
      {
        writer.WritePropertyName("image");
        writer.WriteStartArray();
        foreach (FhirString val in current.ImageElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.OtherElement != null) && (current.OtherElement.Count != 0))
      {
        writer.WritePropertyName("other");
        writer.WriteStartArray();
        foreach (FhirString val in current.OtherElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Manifest
    /// </summary>
    public static void DeserializeJson(this ImplementationGuide.ManifestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Manifest
    /// </summary>
    public static void DeserializeJsonProperty(this ImplementationGuide.ManifestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "rendering":
          current.RenderingElement = new FhirUrl(reader.GetString());

          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Resource = new List<ImplementationGuide.ManifestResourceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Resource.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ImplementationGuide.ManifestResourceComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Resource.Count == 0)
          {
            current.Resource = null;
          }

          break;

        case "page":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Page = new List<ImplementationGuide.ManifestPageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Page.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ImplementationGuide.ManifestPageComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Page.Count == 0)
          {
            current.Page = null;
          }

          break;

        case "image":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ImageElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ImageElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ImageElement.Count == 0)
          {
            current.ImageElement = null;
          }

          break;

        case "other":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.OtherElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.OtherElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.OtherElement.Count == 0)
          {
            current.OtherElement = null;
          }

          break;

        // Complex: manifest, Export: ManifestComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#ManifestResource into JSON
    /// </summary>
    public static void SerializeJson(this ImplementationGuide.ManifestResourceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#ManifestResource, Export: ManifestResourceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("reference");
      current.Reference.SerializeJson(writer, options);

      if (current.Example != null)
      {
        switch (current.Example)
        {
          case FhirBoolean v_FhirBoolean:
            writer.WriteBoolean("exampleBoolean", (bool)v_FhirBoolean.Value);
            break;
          case Canonical v_Canonical:
            writer.WriteString("exampleCanonical",v_Canonical.Value);
            break;
        }
      }
      if ((current.RelativePathElement != null) && (current.RelativePathElement.Value != null))
      {
        writer.WriteString("relativePath",current.RelativePathElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#ManifestResource
    /// </summary>
    public static void DeserializeJson(this ImplementationGuide.ManifestResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#ManifestResource
    /// </summary>
    public static void DeserializeJsonProperty(this ImplementationGuide.ManifestResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          current.Reference = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "exampleBoolean":
          current.Example = new FhirBoolean(reader.GetBoolean());
          break;

        case "exampleCanonical":
          current.Example = new Canonical(reader.GetString());
          break;

        case "relativePath":
          current.RelativePathElement = new FhirUrl(reader.GetString());

          break;

        // Complex: resource, Export: ManifestResourceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#ManifestPage into JSON
    /// </summary>
    public static void SerializeJson(this ImplementationGuide.ManifestPageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#ManifestPage, Export: ManifestPageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      if ((current.TitleElement != null) && (current.TitleElement.Value != null))
      {
        writer.WriteString("title",current.TitleElement.Value);
      }

      if ((current.AnchorElement != null) && (current.AnchorElement.Count != 0))
      {
        writer.WritePropertyName("anchor");
        writer.WriteStartArray();
        foreach (FhirString val in current.AnchorElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#ManifestPage
    /// </summary>
    public static void DeserializeJson(this ImplementationGuide.ManifestPageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#ManifestPage
    /// </summary>
    public static void DeserializeJsonProperty(this ImplementationGuide.ManifestPageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());

          break;

        case "anchor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.AnchorElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.AnchorElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.AnchorElement.Count == 0)
          {
            current.AnchorElement = null;
          }

          break;

        // Complex: page, Export: ManifestPageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ImplementationGuideJsonConverter : JsonConverter<ImplementationGuide>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(ImplementationGuide).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, ImplementationGuide value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override ImplementationGuide Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        ImplementationGuide target = new ImplementationGuide();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
