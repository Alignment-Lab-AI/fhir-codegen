// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for ConceptMap
  /// </summary>
  public static class ConceptMapJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR ConceptMap into JSON
    /// </summary>
    public static void SerializeJson(this ConceptMap current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ConceptMap");
      // Complex: ConceptMap, Export: ConceptMap, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.TitleElement != null) && (current.TitleElement.Value != null))
      {
        writer.WriteString("title",current.TitleElement.Value);
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if ((current.ExperimentalElement != null) && (current.ExperimentalElement.Value != null))
      {
        writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
      }

      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if ((current.PublisherElement != null) && (current.PublisherElement.Value != null))
      {
        writer.WriteString("publisher",current.PublisherElement.Value);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Purpose != null) && (current.Purpose.Value != null))
      {
        writer.WriteString("purpose",current.Purpose.Value);
      }

      if ((current.Copyright != null) && (current.Copyright.Value != null))
      {
        writer.WriteString("copyright",current.Copyright.Value);
      }

      if (current.Source != null)
      {
        switch (current.Source)
        {
          case FhirUri v_FhirUri:
            writer.WriteString("sourceUri",v_FhirUri.Value);
            break;
          case Canonical v_Canonical:
            writer.WriteString("sourceCanonical",v_Canonical.Value);
            break;
        }
      }
      if (current.Target != null)
      {
        switch (current.Target)
        {
          case FhirUri v_FhirUri:
            writer.WriteString("targetUri",v_FhirUri.Value);
            break;
          case Canonical v_Canonical:
            writer.WriteString("targetCanonical",v_Canonical.Value);
            break;
        }
      }
      if ((current.Group != null) && (current.Group.Count != 0))
      {
        writer.WritePropertyName("group");
        writer.WriteStartArray();
        foreach (ConceptMap.GroupComponent val in current.Group)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap
    /// </summary>
    public static void DeserializeJson(this ConceptMap current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap
    /// </summary>
    public static void DeserializeJsonProperty(this ConceptMap current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());
          break;

        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          current.Identifier.DeserializeJson(ref reader, options);
          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());
          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          break;

        case "experimental":
          current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());
          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          current.Description = new Markdown(reader.GetString());
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "purpose":
          current.Purpose = new Markdown(reader.GetString());
          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());
          break;

        case "sourceUri":
          current.Source = new FhirUri(reader.GetString());
          break;

        case "sourceCanonical":
          current.Source = new Canonical(reader.GetString());
          break;

        case "targetUri":
          current.Target = new FhirUri(reader.GetString());
          break;

        case "targetCanonical":
          current.Target = new Canonical(reader.GetString());
          break;

        case "group":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Group = new List<ConceptMap.GroupComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ConceptMap.GroupComponent v_Group = new Hl7.Fhir.Model.ConceptMap.GroupComponent();
            v_Group.DeserializeJson(ref reader, options);
            current.Group.Add(v_Group);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Group.Count == 0)
          {
            current.Group = null;
          }
          break;

        // Complex: ConceptMap, Export: ConceptMap, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ConceptMap#Group into JSON
    /// </summary>
    public static void SerializeJson(this ConceptMap.GroupComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ConceptMap#Group, Export: GroupComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.SourceElement != null) && (current.SourceElement.Value != null))
      {
        writer.WriteString("source",current.SourceElement.Value);
      }

      if ((current.SourceVersionElement != null) && (current.SourceVersionElement.Value != null))
      {
        writer.WriteString("sourceVersion",current.SourceVersionElement.Value);
      }

      if ((current.TargetElement != null) && (current.TargetElement.Value != null))
      {
        writer.WriteString("target",current.TargetElement.Value);
      }

      if ((current.TargetVersionElement != null) && (current.TargetVersionElement.Value != null))
      {
        writer.WriteString("targetVersion",current.TargetVersionElement.Value);
      }

      if ((current.Element != null) && (current.Element.Count != 0))
      {
        writer.WritePropertyName("element");
        writer.WriteStartArray();
        foreach (ConceptMap.SourceElementComponent val in current.Element)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Unmapped != null)
      {
        writer.WritePropertyName("unmapped");
        current.Unmapped.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#Group
    /// </summary>
    public static void DeserializeJson(this ConceptMap.GroupComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#Group
    /// </summary>
    public static void DeserializeJsonProperty(this ConceptMap.GroupComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "source":
          current.SourceElement = new FhirUri(reader.GetString());
          break;

        case "sourceVersion":
          current.SourceVersionElement = new FhirString(reader.GetString());
          break;

        case "target":
          current.TargetElement = new FhirUri(reader.GetString());
          break;

        case "targetVersion":
          current.TargetVersionElement = new FhirString(reader.GetString());
          break;

        case "element":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Element = new List<ConceptMap.SourceElementComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ConceptMap.SourceElementComponent v_Element = new Hl7.Fhir.Model.ConceptMap.SourceElementComponent();
            v_Element.DeserializeJson(ref reader, options);
            current.Element.Add(v_Element);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Element.Count == 0)
          {
            current.Element = null;
          }
          break;

        case "unmapped":
          current.Unmapped = new Hl7.Fhir.Model.ConceptMap.UnmappedComponent();
          current.Unmapped.DeserializeJson(ref reader, options);
          break;

        // Complex: group, Export: GroupComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ConceptMap#SourceElement into JSON
    /// </summary>
    public static void SerializeJson(this ConceptMap.SourceElementComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ConceptMap#SourceElement, Export: SourceElementComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.CodeElement != null) && (current.CodeElement.Value != null))
      {
        writer.WriteString("code",current.CodeElement.Value);
      }

      if ((current.DisplayElement != null) && (current.DisplayElement.Value != null))
      {
        writer.WriteString("display",current.DisplayElement.Value);
      }

      if ((current.Target != null) && (current.Target.Count != 0))
      {
        writer.WritePropertyName("target");
        writer.WriteStartArray();
        foreach (ConceptMap.TargetElementComponent val in current.Target)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#SourceElement
    /// </summary>
    public static void DeserializeJson(this ConceptMap.SourceElementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#SourceElement
    /// </summary>
    public static void DeserializeJsonProperty(this ConceptMap.SourceElementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.CodeElement = new Code(reader.GetString());
          break;

        case "_code":
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "display":
          current.DisplayElement = new FhirString(reader.GetString());
          break;

        case "target":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Target = new List<ConceptMap.TargetElementComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ConceptMap.TargetElementComponent v_Target = new Hl7.Fhir.Model.ConceptMap.TargetElementComponent();
            v_Target.DeserializeJson(ref reader, options);
            current.Target.Add(v_Target);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Target.Count == 0)
          {
            current.Target = null;
          }
          break;

        // Complex: element, Export: SourceElementComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ConceptMap#TargetElement into JSON
    /// </summary>
    public static void SerializeJson(this ConceptMap.TargetElementComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ConceptMap#TargetElement, Export: TargetElementComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.CodeElement != null) && (current.CodeElement.Value != null))
      {
        writer.WriteString("code",current.CodeElement.Value);
      }

      if ((current.DisplayElement != null) && (current.DisplayElement.Value != null))
      {
        writer.WriteString("display",current.DisplayElement.Value);
      }

      writer.WriteString("equivalence",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.EquivalenceElement.Value));

      if ((current.CommentElement != null) && (current.CommentElement.Value != null))
      {
        writer.WriteString("comment",current.CommentElement.Value);
      }

      if ((current.DependsOn != null) && (current.DependsOn.Count != 0))
      {
        writer.WritePropertyName("dependsOn");
        writer.WriteStartArray();
        foreach (ConceptMap.OtherElementComponent val in current.DependsOn)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Product != null) && (current.Product.Count != 0))
      {
        writer.WritePropertyName("product");
        writer.WriteStartArray();
        foreach (ConceptMap.OtherElementComponent val in current.Product)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#TargetElement
    /// </summary>
    public static void DeserializeJson(this ConceptMap.TargetElementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#TargetElement
    /// </summary>
    public static void DeserializeJsonProperty(this ConceptMap.TargetElementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.CodeElement = new Code(reader.GetString());
          break;

        case "_code":
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "display":
          current.DisplayElement = new FhirString(reader.GetString());
          break;

        case "equivalence":
          current.EquivalenceElement =new Code<Hl7.Fhir.Model.ConceptMapEquivalence>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ConceptMapEquivalence>(reader.GetString()));
          break;

        case "comment":
          current.CommentElement = new FhirString(reader.GetString());
          break;

        case "dependsOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.DependsOn = new List<ConceptMap.OtherElementComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ConceptMap.OtherElementComponent v_DependsOn = new Hl7.Fhir.Model.ConceptMap.OtherElementComponent();
            v_DependsOn.DeserializeJson(ref reader, options);
            current.DependsOn.Add(v_DependsOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DependsOn.Count == 0)
          {
            current.DependsOn = null;
          }
          break;

        case "product":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Product = new List<ConceptMap.OtherElementComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ConceptMap.OtherElementComponent v_Product = new Hl7.Fhir.Model.ConceptMap.OtherElementComponent();
            v_Product.DeserializeJson(ref reader, options);
            current.Product.Add(v_Product);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Product.Count == 0)
          {
            current.Product = null;
          }
          break;

        // Complex: target, Export: TargetElementComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ConceptMap#OtherElement into JSON
    /// </summary>
    public static void SerializeJson(this ConceptMap.OtherElementComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ConceptMap#OtherElement, Export: OtherElementComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("property",current.PropertyElement.Value);

      if ((current.SystemElement != null) && (current.SystemElement.Value != null))
      {
        writer.WriteString("system",current.SystemElement.Value);
      }

      writer.WriteString("value",current.ValueElement.Value);

      if ((current.DisplayElement != null) && (current.DisplayElement.Value != null))
      {
        writer.WriteString("display",current.DisplayElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#OtherElement
    /// </summary>
    public static void DeserializeJson(this ConceptMap.OtherElementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#OtherElement
    /// </summary>
    public static void DeserializeJsonProperty(this ConceptMap.OtherElementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "property":
          current.PropertyElement = new FhirUri(reader.GetString());
          break;

        case "system":
          current.SystemElement = new Canonical(reader.GetString());
          break;

        case "_system":
          ((Hl7.Fhir.Model.Element)current.SystemElement).DeserializeJson(ref reader, options);
          break;

        case "value":
          current.ValueElement = new FhirString(reader.GetString());
          break;

        case "display":
          current.DisplayElement = new FhirString(reader.GetString());
          break;

        // Complex: dependsOn, Export: OtherElementComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ConceptMap#Unmapped into JSON
    /// </summary>
    public static void SerializeJson(this ConceptMap.UnmappedComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ConceptMap#Unmapped, Export: UnmappedComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("mode",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ModeElement.Value));

      if ((current.CodeElement != null) && (current.CodeElement.Value != null))
      {
        writer.WriteString("code",current.CodeElement.Value);
      }

      if ((current.DisplayElement != null) && (current.DisplayElement.Value != null))
      {
        writer.WriteString("display",current.DisplayElement.Value);
      }

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#Unmapped
    /// </summary>
    public static void DeserializeJson(this ConceptMap.UnmappedComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#Unmapped
    /// </summary>
    public static void DeserializeJsonProperty(this ConceptMap.UnmappedComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          current.ModeElement =new Code<Hl7.Fhir.Model.ConceptMap.ConceptMapGroupUnmappedMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ConceptMap.ConceptMapGroupUnmappedMode>(reader.GetString()));
          break;

        case "code":
          current.CodeElement = new Code(reader.GetString());
          break;

        case "_code":
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "display":
          current.DisplayElement = new FhirString(reader.GetString());
          break;

        case "url":
          current.UrlElement = new Canonical(reader.GetString());
          break;

        case "_url":
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        // Complex: unmapped, Export: UnmappedComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ConceptMapJsonConverter : JsonConverter<ConceptMap>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(ConceptMap).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, ConceptMap value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override ConceptMap Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        ConceptMap target = new ConceptMap();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
