// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for OperationDefinition
  /// </summary>
  public static class OperationDefinitionJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR OperationDefinition into JSON
    /// </summary>
    public static void SerializeJson(this OperationDefinition current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","OperationDefinition");
      // Complex: OperationDefinition, Export: OperationDefinition, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      writer.WriteString("name",current.NameElement.Value);

      if ((current.TitleElement != null) && (current.TitleElement.Value != null))
      {
        writer.WriteString("title",current.TitleElement.Value);
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      writer.WriteString("kind",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.KindElement.Value));

      if ((current.ExperimentalElement != null) && (current.ExperimentalElement.Value != null))
      {
        writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
      }

      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if ((current.PublisherElement != null) && (current.PublisherElement.Value != null))
      {
        writer.WriteString("publisher",current.PublisherElement.Value);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Purpose != null) && (current.Purpose.Value != null))
      {
        writer.WriteString("purpose",current.Purpose.Value);
      }

      if ((current.AffectsStateElement != null) && (current.AffectsStateElement.Value != null))
      {
        writer.WriteBoolean("affectsState",(bool)current.AffectsStateElement.Value);
      }

      writer.WriteString("code",current.CodeElement.Value);

      if ((current.Comment != null) && (current.Comment.Value != null))
      {
        writer.WriteString("comment",current.Comment.Value);
      }

      if ((current.BaseElement != null) && (current.BaseElement.Value != null))
      {
        writer.WriteString("base",current.BaseElement.Value);
      }

      if ((current.ResourceElement != null) && (current.ResourceElement.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();
        foreach (Code<Hl7.Fhir.Model.ResourceType> val in current.ResourceElement)
        {
          writer.WriteStringValue(Hl7.Fhir.Utility.EnumUtility.GetLiteral(val.Value));
        }
        writer.WriteEndArray();
      }

      writer.WriteBoolean("system",(bool)current.SystemElement.Value);

      writer.WriteBoolean("type",(bool)current.TypeElement.Value);

      writer.WriteBoolean("instance",(bool)current.InstanceElement.Value);

      if ((current.InputProfileElement != null) && (current.InputProfileElement.Value != null))
      {
        writer.WriteString("inputProfile",current.InputProfileElement.Value);
      }

      if ((current.OutputProfileElement != null) && (current.OutputProfileElement.Value != null))
      {
        writer.WriteString("outputProfile",current.OutputProfileElement.Value);
      }

      if ((current.Parameter != null) && (current.Parameter.Count != 0))
      {
        writer.WritePropertyName("parameter");
        writer.WriteStartArray();
        foreach (OperationDefinition.ParameterComponent val in current.Parameter)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Overload != null) && (current.Overload.Count != 0))
      {
        writer.WritePropertyName("overload");
        writer.WriteStartArray();
        foreach (OperationDefinition.OverloadComponent val in current.Overload)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR OperationDefinition
    /// </summary>
    public static void DeserializeJson(this OperationDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR OperationDefinition
    /// </summary>
    public static void DeserializeJsonProperty(this OperationDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());
          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());
          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          break;

        case "kind":
          current.KindElement =new Code<Hl7.Fhir.Model.OperationDefinition.OperationKind>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.OperationDefinition.OperationKind>(reader.GetString()));
          break;

        case "experimental":
          current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());
          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          current.Description = new Markdown(reader.GetString());
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "purpose":
          current.Purpose = new Markdown(reader.GetString());
          break;

        case "affectsState":
          current.AffectsStateElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "code":
          current.CodeElement = new Code(reader.GetString());
          break;

        case "_code":
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "comment":
          current.Comment = new Markdown(reader.GetString());
          break;

        case "base":
          current.BaseElement = new Canonical(reader.GetString());
          break;

        case "_base":
          ((Hl7.Fhir.Model.Element)current.BaseElement).DeserializeJson(ref reader, options);
          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ResourceElement = new List<Code<Hl7.Fhir.Model.ResourceType>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ResourceElement.Add(new Code<Hl7.Fhir.Model.ResourceType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ResourceType>(reader.GetString())));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ResourceElement.Count == 0)
          {
            current.ResourceElement = null;
          }
          break;

        case "system":
          current.SystemElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "type":
          current.TypeElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "instance":
          current.InstanceElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "inputProfile":
          current.InputProfileElement = new Canonical(reader.GetString());
          break;

        case "_inputProfile":
          ((Hl7.Fhir.Model.Element)current.InputProfileElement).DeserializeJson(ref reader, options);
          break;

        case "outputProfile":
          current.OutputProfileElement = new Canonical(reader.GetString());
          break;

        case "_outputProfile":
          ((Hl7.Fhir.Model.Element)current.OutputProfileElement).DeserializeJson(ref reader, options);
          break;

        case "parameter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Parameter = new List<OperationDefinition.ParameterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.OperationDefinition.ParameterComponent v_Parameter = new Hl7.Fhir.Model.OperationDefinition.ParameterComponent();
            v_Parameter.DeserializeJson(ref reader, options);
            current.Parameter.Add(v_Parameter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Parameter.Count == 0)
          {
            current.Parameter = null;
          }
          break;

        case "overload":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Overload = new List<OperationDefinition.OverloadComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.OperationDefinition.OverloadComponent v_Overload = new Hl7.Fhir.Model.OperationDefinition.OverloadComponent();
            v_Overload.DeserializeJson(ref reader, options);
            current.Overload.Add(v_Overload);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Overload.Count == 0)
          {
            current.Overload = null;
          }
          break;

        // Complex: OperationDefinition, Export: OperationDefinition, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR OperationDefinition#Parameter into JSON
    /// </summary>
    public static void SerializeJson(this OperationDefinition.ParameterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: OperationDefinition#Parameter, Export: ParameterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      writer.WriteString("use",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.UseElement.Value));

      writer.WriteNumber("min",(int)current.MinElement.Value);

      writer.WriteString("max",current.MaxElement.Value);

      if ((current.DocumentationElement != null) && (current.DocumentationElement.Value != null))
      {
        writer.WriteString("documentation",current.DocumentationElement.Value);
      }

      if (current.TypeElement != null)
      {
        writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));
      }

      if ((current.TargetProfileElement != null) && (current.TargetProfileElement.Count != 0))
      {
        writer.WritePropertyName("targetProfile");
        writer.WriteStartArray();
        foreach (Canonical val in current.TargetProfileElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (current.SearchTypeElement != null)
      {
        writer.WriteString("searchType",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.SearchTypeElement.Value));
      }

      if (current.Binding != null)
      {
        writer.WritePropertyName("binding");
        current.Binding.SerializeJson(writer, options);
      }

      if ((current.ReferencedFrom != null) && (current.ReferencedFrom.Count != 0))
      {
        writer.WritePropertyName("referencedFrom");
        writer.WriteStartArray();
        foreach (OperationDefinition.ReferencedFromComponent val in current.ReferencedFrom)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Part != null) && (current.Part.Count != 0))
      {
        writer.WritePropertyName("part");
        writer.WriteStartArray();
        foreach (OperationDefinition.ParameterComponent val in current.Part)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR OperationDefinition#Parameter
    /// </summary>
    public static void DeserializeJson(this OperationDefinition.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR OperationDefinition#Parameter
    /// </summary>
    public static void DeserializeJsonProperty(this OperationDefinition.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new Code(reader.GetString());
          break;

        case "_name":
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "use":
          current.UseElement =new Code<Hl7.Fhir.Model.OperationParameterUse>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.OperationParameterUse>(reader.GetString()));
          break;

        case "min":
          current.MinElement = new Integer(reader.GetInt32());
          break;

        case "_min":
          ((Hl7.Fhir.Model.Element)current.MinElement).DeserializeJson(ref reader, options);
          break;

        case "max":
          current.MaxElement = new FhirString(reader.GetString());
          break;

        case "documentation":
          current.DocumentationElement = new FhirString(reader.GetString());
          break;

        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.FHIRAllTypes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FHIRAllTypes>(reader.GetString()));
          break;

        case "targetProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.TargetProfileElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.TargetProfileElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.TargetProfileElement.Count == 0)
          {
            current.TargetProfileElement = null;
          }
          break;

        case "_targetProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_targetProfile = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ((Hl7.Fhir.Model.Element)current.TargetProfileElement[i_targetProfile++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "searchType":
          current.SearchTypeElement =new Code<Hl7.Fhir.Model.SearchParamType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.SearchParamType>(reader.GetString()));
          break;

        case "binding":
          current.Binding = new Hl7.Fhir.Model.OperationDefinition.BindingComponent();
          current.Binding.DeserializeJson(ref reader, options);
          break;

        case "referencedFrom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ReferencedFrom = new List<OperationDefinition.ReferencedFromComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.OperationDefinition.ReferencedFromComponent v_ReferencedFrom = new Hl7.Fhir.Model.OperationDefinition.ReferencedFromComponent();
            v_ReferencedFrom.DeserializeJson(ref reader, options);
            current.ReferencedFrom.Add(v_ReferencedFrom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReferencedFrom.Count == 0)
          {
            current.ReferencedFrom = null;
          }
          break;

        case "part":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Part = new List<OperationDefinition.ParameterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.OperationDefinition.ParameterComponent v_Part = new Hl7.Fhir.Model.OperationDefinition.ParameterComponent();
            v_Part.DeserializeJson(ref reader, options);
            current.Part.Add(v_Part);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Part.Count == 0)
          {
            current.Part = null;
          }
          break;

        // Complex: parameter, Export: ParameterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR OperationDefinition#Binding into JSON
    /// </summary>
    public static void SerializeJson(this OperationDefinition.BindingComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: OperationDefinition#Binding, Export: BindingComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("strength",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StrengthElement.Value));

      writer.WriteString("valueSet",current.ValueSetElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR OperationDefinition#Binding
    /// </summary>
    public static void DeserializeJson(this OperationDefinition.BindingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR OperationDefinition#Binding
    /// </summary>
    public static void DeserializeJsonProperty(this OperationDefinition.BindingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "strength":
          current.StrengthElement =new Code<Hl7.Fhir.Model.BindingStrength>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.BindingStrength>(reader.GetString()));
          break;

        case "valueSet":
          current.ValueSetElement = new Canonical(reader.GetString());
          break;

        case "_valueSet":
          ((Hl7.Fhir.Model.Element)current.ValueSetElement).DeserializeJson(ref reader, options);
          break;

        // Complex: binding, Export: BindingComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR OperationDefinition#ReferencedFrom into JSON
    /// </summary>
    public static void SerializeJson(this OperationDefinition.ReferencedFromComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: OperationDefinition#ReferencedFrom, Export: ReferencedFromComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("source",current.SourceElement.Value);

      if ((current.SourceIdElement != null) && (current.SourceIdElement.Value != null))
      {
        writer.WriteString("sourceId",current.SourceIdElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR OperationDefinition#ReferencedFrom
    /// </summary>
    public static void DeserializeJson(this OperationDefinition.ReferencedFromComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR OperationDefinition#ReferencedFrom
    /// </summary>
    public static void DeserializeJsonProperty(this OperationDefinition.ReferencedFromComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "source":
          current.SourceElement = new FhirString(reader.GetString());
          break;

        case "sourceId":
          current.SourceIdElement = new FhirString(reader.GetString());
          break;

        // Complex: referencedFrom, Export: ReferencedFromComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR OperationDefinition#Overload into JSON
    /// </summary>
    public static void SerializeJson(this OperationDefinition.OverloadComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: OperationDefinition#Overload, Export: OverloadComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.ParameterNameElement != null) && (current.ParameterNameElement.Count != 0))
      {
        writer.WritePropertyName("parameterName");
        writer.WriteStartArray();
        foreach (FhirString val in current.ParameterNameElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.CommentElement != null) && (current.CommentElement.Value != null))
      {
        writer.WriteString("comment",current.CommentElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR OperationDefinition#Overload
    /// </summary>
    public static void DeserializeJson(this OperationDefinition.OverloadComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR OperationDefinition#Overload
    /// </summary>
    public static void DeserializeJsonProperty(this OperationDefinition.OverloadComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "parameterName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ParameterNameElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ParameterNameElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ParameterNameElement.Count == 0)
          {
            current.ParameterNameElement = null;
          }
          break;

        case "comment":
          current.CommentElement = new FhirString(reader.GetString());
          break;

        // Complex: overload, Export: OverloadComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class OperationDefinitionJsonConverter : JsonConverter<OperationDefinition>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(OperationDefinition).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, OperationDefinition value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override OperationDefinition Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        OperationDefinition target = new OperationDefinition();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
