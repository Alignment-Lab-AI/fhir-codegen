// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for ResearchElementDefinition
  /// </summary>
  public static class ResearchElementDefinitionJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR ResearchElementDefinition into JSON
    /// </summary>
    public static void SerializeJson(this ResearchElementDefinition current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ResearchElementDefinition");
      // Complex: ResearchElementDefinition, Export: ResearchElementDefinition, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.TitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.TitleElement.Value))
        {
          writer.WriteString("title",current.TitleElement.Value);
        }
        if (current.TitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.TitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_title",false,current.TitleElement.Extension,current.TitleElement.ElementId);
        }
      }

      if (current.ShortTitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.ShortTitleElement.Value))
        {
          writer.WriteString("shortTitle",current.ShortTitleElement.Value);
        }
        if (current.ShortTitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.ShortTitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_shortTitle",false,current.ShortTitleElement.Extension,current.ShortTitleElement.ElementId);
        }
      }

      if (current.SubtitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.SubtitleElement.Value))
        {
          writer.WriteString("subtitle",current.SubtitleElement.Value);
        }
        if (current.SubtitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.SubtitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_subtitle",false,current.SubtitleElement.Extension,current.SubtitleElement.ElementId);
        }
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if (current.ExperimentalElement != null)
      {
        if (current.ExperimentalElement.Value != null)
        {
          writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
        }
        if (current.ExperimentalElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExperimentalElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_experimental",false,current.ExperimentalElement.Extension,current.ExperimentalElement.ElementId);
        }
      }

      if (current.Subject != null)
      {
        switch (current.Subject)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("subjectCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("subjectReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.DateElement != null)
      {
        if (!string.IsNullOrEmpty(current.DateElement.Value))
        {
          writer.WriteString("date",current.DateElement.Value);
        }
        if (current.DateElement.HasExtensions() || (!string.IsNullOrEmpty(current.DateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_date",false,current.DateElement.Extension,current.DateElement.ElementId);
        }
      }

      if (current.PublisherElement != null)
      {
        if (!string.IsNullOrEmpty(current.PublisherElement.Value))
        {
          writer.WriteString("publisher",current.PublisherElement.Value);
        }
        if (current.PublisherElement.HasExtensions() || (!string.IsNullOrEmpty(current.PublisherElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_publisher",false,current.PublisherElement.Extension,current.PublisherElement.ElementId);
        }
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Description != null)
      {
        if (!string.IsNullOrEmpty(current.Description.Value))
        {
          writer.WriteString("description",current.Description.Value);
        }
        if (current.Description.HasExtensions() || (!string.IsNullOrEmpty(current.Description.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.Description.Extension,current.Description.ElementId);
        }
      }

      if ((current.CommentElement != null) && (current.CommentElement.Count != 0))
      {
        writer.WritePropertyName("comment");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirString val in current.CommentElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirString val in current.CommentElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_comment");
          writer.WriteStartArray();
          foreach (FhirString val in current.CommentElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Purpose != null)
      {
        if (!string.IsNullOrEmpty(current.Purpose.Value))
        {
          writer.WriteString("purpose",current.Purpose.Value);
        }
        if (current.Purpose.HasExtensions() || (!string.IsNullOrEmpty(current.Purpose.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_purpose",false,current.Purpose.Extension,current.Purpose.ElementId);
        }
      }

      if (current.UsageElement != null)
      {
        if (!string.IsNullOrEmpty(current.UsageElement.Value))
        {
          writer.WriteString("usage",current.UsageElement.Value);
        }
        if (current.UsageElement.HasExtensions() || (!string.IsNullOrEmpty(current.UsageElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_usage",false,current.UsageElement.Extension,current.UsageElement.ElementId);
        }
      }

      if (current.Copyright != null)
      {
        if (!string.IsNullOrEmpty(current.Copyright.Value))
        {
          writer.WriteString("copyright",current.Copyright.Value);
        }
        if (current.Copyright.HasExtensions() || (!string.IsNullOrEmpty(current.Copyright.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_copyright",false,current.Copyright.Extension,current.Copyright.ElementId);
        }
      }

      if (current.ApprovalDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.ApprovalDateElement.Value))
        {
          writer.WriteString("approvalDate",current.ApprovalDateElement.Value);
        }
        if (current.ApprovalDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.ApprovalDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_approvalDate",false,current.ApprovalDateElement.Extension,current.ApprovalDateElement.ElementId);
        }
      }

      if (current.LastReviewDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.LastReviewDateElement.Value))
        {
          writer.WriteString("lastReviewDate",current.LastReviewDateElement.Value);
        }
        if (current.LastReviewDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.LastReviewDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_lastReviewDate",false,current.LastReviewDateElement.Extension,current.LastReviewDateElement.ElementId);
        }
      }

      if (current.EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        current.EffectivePeriod.SerializeJson(writer, options);
      }

      if ((current.Topic != null) && (current.Topic.Count != 0))
      {
        writer.WritePropertyName("topic");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Topic)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Author != null) && (current.Author.Count != 0))
      {
        writer.WritePropertyName("author");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Author)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Editor != null) && (current.Editor.Count != 0))
      {
        writer.WritePropertyName("editor");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Editor)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Reviewer != null) && (current.Reviewer.Count != 0))
      {
        writer.WritePropertyName("reviewer");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Reviewer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Endorser != null) && (current.Endorser.Count != 0))
      {
        writer.WritePropertyName("endorser");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Endorser)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.RelatedArtifact != null) && (current.RelatedArtifact.Count != 0))
      {
        writer.WritePropertyName("relatedArtifact");
        writer.WriteStartArray();
        foreach (RelatedArtifact val in current.RelatedArtifact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.LibraryElement != null) && (current.LibraryElement.Count != 0))
      {
        writer.WritePropertyName("library");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (Canonical val in current.LibraryElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (Canonical val in current.LibraryElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_library");
          writer.WriteStartArray();
          foreach (Canonical val in current.LibraryElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      if (current.VariableTypeElement != null)
      {
        writer.WriteString("variableType",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.VariableTypeElement.Value));
      }

      if ((current.Characteristic != null) && (current.Characteristic.Count != 0))
      {
        writer.WritePropertyName("characteristic");
        writer.WriteStartArray();
        foreach (ResearchElementDefinition.CharacteristicComponent val in current.Characteristic)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ResearchElementDefinition
    /// </summary>
    public static void DeserializeJson(this ResearchElementDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ResearchElementDefinition
    /// </summary>
    public static void DeserializeJsonProperty(this ResearchElementDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());
          break;

        case "_url":
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());
          break;

        case "_version":
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "_name":
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());
          break;

        case "_title":
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "shortTitle":
          current.ShortTitleElement = new FhirString(reader.GetString());
          break;

        case "_shortTitle":
          ((Hl7.Fhir.Model.Element)current.ShortTitleElement).DeserializeJson(ref reader, options);
          break;

        case "subtitle":
          current.SubtitleElement = new FhirString(reader.GetString());
          break;

        case "_subtitle":
          ((Hl7.Fhir.Model.Element)current.SubtitleElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          break;

        case "_status":
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "experimental":
          current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_experimental":
          ((Hl7.Fhir.Model.Element)current.ExperimentalElement).DeserializeJson(ref reader, options);
          break;

        case "subjectCodeableConcept":
          current.Subject = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Subject).DeserializeJson(ref reader, options);
          break;

        case "subjectReference":
          current.Subject = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Subject).DeserializeJson(ref reader, options);
          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());
          break;

        case "_date":
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());
          break;

        case "_publisher":
          ((Hl7.Fhir.Model.Element)current.PublisherElement).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          current.Description = new Markdown(reader.GetString());
          break;

        case "comment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.CommentElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.CommentElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CommentElement.Count == 0)
          {
            current.CommentElement = null;
          }
          break;

        case "_comment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_comment = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_comment >= current.CommentElement.Count)
            {
              current.CommentElement.Add(new FhirString());
            }
            ((Hl7.Fhir.Model.Element)current.CommentElement[i_comment++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "purpose":
          current.Purpose = new Markdown(reader.GetString());
          break;

        case "usage":
          current.UsageElement = new FhirString(reader.GetString());
          break;

        case "_usage":
          ((Hl7.Fhir.Model.Element)current.UsageElement).DeserializeJson(ref reader, options);
          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());
          break;

        case "approvalDate":
          current.ApprovalDateElement = new Date(reader.GetString());
          break;

        case "_approvalDate":
          ((Hl7.Fhir.Model.Element)current.ApprovalDateElement).DeserializeJson(ref reader, options);
          break;

        case "lastReviewDate":
          current.LastReviewDateElement = new Date(reader.GetString());
          break;

        case "_lastReviewDate":
          ((Hl7.Fhir.Model.Element)current.LastReviewDateElement).DeserializeJson(ref reader, options);
          break;

        case "effectivePeriod":
          current.EffectivePeriod = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.EffectivePeriod).DeserializeJson(ref reader, options);
          break;

        case "topic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Topic = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Topic = new Hl7.Fhir.Model.CodeableConcept();
            v_Topic.DeserializeJson(ref reader, options);
            current.Topic.Add(v_Topic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Topic.Count == 0)
          {
            current.Topic = null;
          }
          break;

        case "author":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Author = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Author = new Hl7.Fhir.Model.ContactDetail();
            v_Author.DeserializeJson(ref reader, options);
            current.Author.Add(v_Author);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Author.Count == 0)
          {
            current.Author = null;
          }
          break;

        case "editor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Editor = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Editor = new Hl7.Fhir.Model.ContactDetail();
            v_Editor.DeserializeJson(ref reader, options);
            current.Editor.Add(v_Editor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Editor.Count == 0)
          {
            current.Editor = null;
          }
          break;

        case "reviewer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Reviewer = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Reviewer = new Hl7.Fhir.Model.ContactDetail();
            v_Reviewer.DeserializeJson(ref reader, options);
            current.Reviewer.Add(v_Reviewer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Reviewer.Count == 0)
          {
            current.Reviewer = null;
          }
          break;

        case "endorser":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Endorser = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Endorser = new Hl7.Fhir.Model.ContactDetail();
            v_Endorser.DeserializeJson(ref reader, options);
            current.Endorser.Add(v_Endorser);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Endorser.Count == 0)
          {
            current.Endorser = null;
          }
          break;

        case "relatedArtifact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.RelatedArtifact = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.RelatedArtifact v_RelatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
            v_RelatedArtifact.DeserializeJson(ref reader, options);
            current.RelatedArtifact.Add(v_RelatedArtifact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.RelatedArtifact.Count == 0)
          {
            current.RelatedArtifact = null;
          }
          break;

        case "library":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.LibraryElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.LibraryElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LibraryElement.Count == 0)
          {
            current.LibraryElement = null;
          }
          break;

        case "_library":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_library = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_library >= current.LibraryElement.Count)
            {
              current.LibraryElement.Add(new Canonical());
            }
            ((Hl7.Fhir.Model.Element)current.LibraryElement[i_library++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.ResearchElementDefinition.ResearchElementType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ResearchElementDefinition.ResearchElementType>(reader.GetString()));
          break;

        case "_type":
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "variableType":
          current.VariableTypeElement =new Code<Hl7.Fhir.Model.EvidenceVariableType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.EvidenceVariableType>(reader.GetString()));
          break;

        case "_variableType":
          ((Hl7.Fhir.Model.Element)current.VariableTypeElement).DeserializeJson(ref reader, options);
          break;

        case "characteristic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Characteristic = new List<ResearchElementDefinition.CharacteristicComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResearchElementDefinition.CharacteristicComponent v_Characteristic = new Hl7.Fhir.Model.ResearchElementDefinition.CharacteristicComponent();
            v_Characteristic.DeserializeJson(ref reader, options);
            current.Characteristic.Add(v_Characteristic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Characteristic.Count == 0)
          {
            current.Characteristic = null;
          }
          break;

        // Complex: ResearchElementDefinition, Export: ResearchElementDefinition, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ResearchElementDefinition#Characteristic into JSON
    /// </summary>
    public static void SerializeJson(this ResearchElementDefinition.CharacteristicComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ResearchElementDefinition#Characteristic, Export: CharacteristicComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Definition != null)
      {
        switch (current.Definition)
        {
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("definitionCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Canonical v_Canonical:
            writer.WriteString("definitionCanonical",v_Canonical.Value);
            break;
          case Expression v_Expression:
            writer.WritePropertyName("definitionExpression");
            v_Expression.SerializeJson(writer, options);
            break;
          case DataRequirement v_DataRequirement:
            writer.WritePropertyName("definitionDataRequirement");
            v_DataRequirement.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.UsageContext != null) && (current.UsageContext.Count != 0))
      {
        writer.WritePropertyName("usageContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UsageContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.ExcludeElement != null)
      {
        if (current.ExcludeElement.Value != null)
        {
          writer.WriteBoolean("exclude",(bool)current.ExcludeElement.Value);
        }
        if (current.ExcludeElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExcludeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_exclude",false,current.ExcludeElement.Extension,current.ExcludeElement.ElementId);
        }
      }

      if (current.UnitOfMeasure != null)
      {
        writer.WritePropertyName("unitOfMeasure");
        current.UnitOfMeasure.SerializeJson(writer, options);
      }

      if (current.StudyEffectiveDescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.StudyEffectiveDescriptionElement.Value))
        {
          writer.WriteString("studyEffectiveDescription",current.StudyEffectiveDescriptionElement.Value);
        }
        if (current.StudyEffectiveDescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.StudyEffectiveDescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_studyEffectiveDescription",false,current.StudyEffectiveDescriptionElement.Extension,current.StudyEffectiveDescriptionElement.ElementId);
        }
      }

      if (current.StudyEffective != null)
      {
        switch (current.StudyEffective)
        {
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("studyEffectiveDateTime",v_FhirDateTime.Value);
            break;
          case Period v_Period:
            writer.WritePropertyName("studyEffectivePeriod");
            v_Period.SerializeJson(writer, options);
            break;
          case Duration v_Duration:
            writer.WritePropertyName("studyEffectiveDuration");
            v_Duration.SerializeJson(writer, options);
            break;
          case Timing v_Timing:
            writer.WritePropertyName("studyEffectiveTiming");
            v_Timing.SerializeJson(writer, options);
            break;
        }
      }
      if (current.StudyEffectiveTimeFromStart != null)
      {
        writer.WritePropertyName("studyEffectiveTimeFromStart");
        current.StudyEffectiveTimeFromStart.SerializeJson(writer, options);
      }

      if (current.StudyEffectiveGroupMeasureElement != null)
      {
        writer.WriteString("studyEffectiveGroupMeasure",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StudyEffectiveGroupMeasureElement.Value));
      }

      if (current.ParticipantEffectiveDescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.ParticipantEffectiveDescriptionElement.Value))
        {
          writer.WriteString("participantEffectiveDescription",current.ParticipantEffectiveDescriptionElement.Value);
        }
        if (current.ParticipantEffectiveDescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.ParticipantEffectiveDescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_participantEffectiveDescription",false,current.ParticipantEffectiveDescriptionElement.Extension,current.ParticipantEffectiveDescriptionElement.ElementId);
        }
      }

      if (current.ParticipantEffective != null)
      {
        switch (current.ParticipantEffective)
        {
          case FhirDateTime v_FhirDateTime:
            writer.WriteString("participantEffectiveDateTime",v_FhirDateTime.Value);
            break;
          case Period v_Period:
            writer.WritePropertyName("participantEffectivePeriod");
            v_Period.SerializeJson(writer, options);
            break;
          case Duration v_Duration:
            writer.WritePropertyName("participantEffectiveDuration");
            v_Duration.SerializeJson(writer, options);
            break;
          case Timing v_Timing:
            writer.WritePropertyName("participantEffectiveTiming");
            v_Timing.SerializeJson(writer, options);
            break;
        }
      }
      if (current.ParticipantEffectiveTimeFromStart != null)
      {
        writer.WritePropertyName("participantEffectiveTimeFromStart");
        current.ParticipantEffectiveTimeFromStart.SerializeJson(writer, options);
      }

      if (current.ParticipantEffectiveGroupMeasureElement != null)
      {
        writer.WriteString("participantEffectiveGroupMeasure",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ParticipantEffectiveGroupMeasureElement.Value));
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ResearchElementDefinition#Characteristic
    /// </summary>
    public static void DeserializeJson(this ResearchElementDefinition.CharacteristicComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ResearchElementDefinition#Characteristic
    /// </summary>
    public static void DeserializeJsonProperty(this ResearchElementDefinition.CharacteristicComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "definitionCodeableConcept":
          current.Definition = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Definition).DeserializeJson(ref reader, options);
          break;

        case "definitionCanonical":
          current.Definition = new Canonical(reader.GetString());
          break;

        case "definitionExpression":
          current.Definition = new Hl7.Fhir.Model.Expression();
          ((Hl7.Fhir.Model.Expression)current.Definition).DeserializeJson(ref reader, options);
          break;

        case "definitionDataRequirement":
          current.Definition = new Hl7.Fhir.Model.DataRequirement();
          ((Hl7.Fhir.Model.DataRequirement)current.Definition).DeserializeJson(ref reader, options);
          break;

        case "usageContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UsageContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UsageContext = new Hl7.Fhir.Model.UsageContext();
            v_UsageContext.DeserializeJson(ref reader, options);
            current.UsageContext.Add(v_UsageContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UsageContext.Count == 0)
          {
            current.UsageContext = null;
          }
          break;

        case "exclude":
          current.ExcludeElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_exclude":
          ((Hl7.Fhir.Model.Element)current.ExcludeElement).DeserializeJson(ref reader, options);
          break;

        case "unitOfMeasure":
          current.UnitOfMeasure = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.UnitOfMeasure).DeserializeJson(ref reader, options);
          break;

        case "studyEffectiveDescription":
          current.StudyEffectiveDescriptionElement = new FhirString(reader.GetString());
          break;

        case "_studyEffectiveDescription":
          ((Hl7.Fhir.Model.Element)current.StudyEffectiveDescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "studyEffectiveDateTime":
          current.StudyEffective = new FhirDateTime(reader.GetString());
          break;

        case "studyEffectivePeriod":
          current.StudyEffective = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.StudyEffective).DeserializeJson(ref reader, options);
          break;

        case "studyEffectiveDuration":
          current.StudyEffective = new Hl7.Fhir.Model.Duration();
          ((Hl7.Fhir.Model.Duration)current.StudyEffective).DeserializeJson(ref reader, options);
          break;

        case "studyEffectiveTiming":
          current.StudyEffective = new Hl7.Fhir.Model.Timing();
          ((Hl7.Fhir.Model.Timing)current.StudyEffective).DeserializeJson(ref reader, options);
          break;

        case "studyEffectiveTimeFromStart":
          current.StudyEffectiveTimeFromStart = new Hl7.Fhir.Model.Duration();
          ((Hl7.Fhir.Model.Duration)current.StudyEffectiveTimeFromStart).DeserializeJson(ref reader, options);
          break;

        case "studyEffectiveGroupMeasure":
          current.StudyEffectiveGroupMeasureElement =new Code<Hl7.Fhir.Model.GroupMeasure>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.GroupMeasure>(reader.GetString()));
          break;

        case "_studyEffectiveGroupMeasure":
          ((Hl7.Fhir.Model.Element)current.StudyEffectiveGroupMeasureElement).DeserializeJson(ref reader, options);
          break;

        case "participantEffectiveDescription":
          current.ParticipantEffectiveDescriptionElement = new FhirString(reader.GetString());
          break;

        case "_participantEffectiveDescription":
          ((Hl7.Fhir.Model.Element)current.ParticipantEffectiveDescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "participantEffectiveDateTime":
          current.ParticipantEffective = new FhirDateTime(reader.GetString());
          break;

        case "participantEffectivePeriod":
          current.ParticipantEffective = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.ParticipantEffective).DeserializeJson(ref reader, options);
          break;

        case "participantEffectiveDuration":
          current.ParticipantEffective = new Hl7.Fhir.Model.Duration();
          ((Hl7.Fhir.Model.Duration)current.ParticipantEffective).DeserializeJson(ref reader, options);
          break;

        case "participantEffectiveTiming":
          current.ParticipantEffective = new Hl7.Fhir.Model.Timing();
          ((Hl7.Fhir.Model.Timing)current.ParticipantEffective).DeserializeJson(ref reader, options);
          break;

        case "participantEffectiveTimeFromStart":
          current.ParticipantEffectiveTimeFromStart = new Hl7.Fhir.Model.Duration();
          ((Hl7.Fhir.Model.Duration)current.ParticipantEffectiveTimeFromStart).DeserializeJson(ref reader, options);
          break;

        case "participantEffectiveGroupMeasure":
          current.ParticipantEffectiveGroupMeasureElement =new Code<Hl7.Fhir.Model.GroupMeasure>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.GroupMeasure>(reader.GetString()));
          break;

        case "_participantEffectiveGroupMeasure":
          ((Hl7.Fhir.Model.Element)current.ParticipantEffectiveGroupMeasureElement).DeserializeJson(ref reader, options);
          break;

        // Complex: characteristic, Export: CharacteristicComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ResearchElementDefinitionJsonConverter : JsonConverter<ResearchElementDefinition>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(ResearchElementDefinition).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, ResearchElementDefinition value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override ResearchElementDefinition Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        ResearchElementDefinition target = new ResearchElementDefinition();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
