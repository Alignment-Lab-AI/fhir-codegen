// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for CapabilityStatement
  /// </summary>
  public static class CapabilityStatementJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR CapabilityStatement into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","CapabilityStatement");
      // Complex: CapabilityStatement, Export: CapabilityStatement, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.TitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.TitleElement.Value))
        {
          writer.WriteString("title",current.TitleElement.Value);
        }
        if (current.TitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.TitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_title",false,current.TitleElement.Extension,current.TitleElement.ElementId);
        }
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if (current.ExperimentalElement != null)
      {
        if (current.ExperimentalElement.Value != null)
        {
          writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
        }
        if (current.ExperimentalElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExperimentalElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_experimental",false,current.ExperimentalElement.Extension,current.ExperimentalElement.ElementId);
        }
      }

      writer.WriteString("date",current.DateElement.Value);

      if (current.PublisherElement != null)
      {
        if (!string.IsNullOrEmpty(current.PublisherElement.Value))
        {
          writer.WriteString("publisher",current.PublisherElement.Value);
        }
        if (current.PublisherElement.HasExtensions() || (!string.IsNullOrEmpty(current.PublisherElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_publisher",false,current.PublisherElement.Extension,current.PublisherElement.ElementId);
        }
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Description != null)
      {
        if (!string.IsNullOrEmpty(current.Description.Value))
        {
          writer.WriteString("description",current.Description.Value);
        }
        if (current.Description.HasExtensions() || (!string.IsNullOrEmpty(current.Description.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.Description.Extension,current.Description.ElementId);
        }
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Purpose != null)
      {
        if (!string.IsNullOrEmpty(current.Purpose.Value))
        {
          writer.WriteString("purpose",current.Purpose.Value);
        }
        if (current.Purpose.HasExtensions() || (!string.IsNullOrEmpty(current.Purpose.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_purpose",false,current.Purpose.Extension,current.Purpose.ElementId);
        }
      }

      if (current.Copyright != null)
      {
        if (!string.IsNullOrEmpty(current.Copyright.Value))
        {
          writer.WriteString("copyright",current.Copyright.Value);
        }
        if (current.Copyright.HasExtensions() || (!string.IsNullOrEmpty(current.Copyright.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_copyright",false,current.Copyright.Extension,current.Copyright.ElementId);
        }
      }

      writer.WriteString("kind",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.KindElement.Value));

      if ((current.InstantiatesElement != null) && (current.InstantiatesElement.Count != 0))
      {
        writer.WritePropertyName("instantiates");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (Canonical val in current.InstantiatesElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (Canonical val in current.InstantiatesElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_instantiates");
          writer.WriteStartArray();
          foreach (Canonical val in current.InstantiatesElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.ImportsElement != null) && (current.ImportsElement.Count != 0))
      {
        writer.WritePropertyName("imports");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (Canonical val in current.ImportsElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (Canonical val in current.ImportsElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_imports");
          writer.WriteStartArray();
          foreach (Canonical val in current.ImportsElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if (current.Software != null)
      {
        writer.WritePropertyName("software");
        current.Software.SerializeJson(writer, options);
      }

      if (current.Implementation != null)
      {
        writer.WritePropertyName("implementation");
        current.Implementation.SerializeJson(writer, options);
      }

      writer.WriteString("fhirVersion",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.FhirVersionElement.Value));

      if ((current.FormatElement != null) && (current.FormatElement.Count != 0))
      {
        writer.WritePropertyName("format");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (Code val in current.FormatElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (Code val in current.FormatElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_format");
          writer.WriteStartArray();
          foreach (Code val in current.FormatElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.PatchFormatElement != null) && (current.PatchFormatElement.Count != 0))
      {
        writer.WritePropertyName("patchFormat");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (Code val in current.PatchFormatElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (Code val in current.PatchFormatElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_patchFormat");
          writer.WriteStartArray();
          foreach (Code val in current.PatchFormatElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.ImplementationGuideElement != null) && (current.ImplementationGuideElement.Count != 0))
      {
        writer.WritePropertyName("implementationGuide");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (Canonical val in current.ImplementationGuideElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (Canonical val in current.ImplementationGuideElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_implementationGuide");
          writer.WriteStartArray();
          foreach (Canonical val in current.ImplementationGuideElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.Rest != null) && (current.Rest.Count != 0))
      {
        writer.WritePropertyName("rest");
        writer.WriteStartArray();
        foreach (CapabilityStatement.RestComponent val in current.Rest)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Messaging != null) && (current.Messaging.Count != 0))
      {
        writer.WritePropertyName("messaging");
        writer.WriteStartArray();
        foreach (CapabilityStatement.MessagingComponent val in current.Messaging)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Document != null) && (current.Document.Count != 0))
      {
        writer.WritePropertyName("document");
        writer.WriteStartArray();
        foreach (CapabilityStatement.DocumentComponent val in current.Document)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());
          break;

        case "_url":
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());
          break;

        case "_version":
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "_name":
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());
          break;

        case "_title":
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          break;

        case "_status":
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "experimental":
          current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_experimental":
          ((Hl7.Fhir.Model.Element)current.ExperimentalElement).DeserializeJson(ref reader, options);
          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());
          break;

        case "_date":
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());
          break;

        case "_publisher":
          ((Hl7.Fhir.Model.Element)current.PublisherElement).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          current.Description = new Markdown(reader.GetString());
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "purpose":
          current.Purpose = new Markdown(reader.GetString());
          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());
          break;

        case "kind":
          current.KindElement =new Code<Hl7.Fhir.Model.CapabilityStatementKind>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatementKind>(reader.GetString()));
          break;

        case "_kind":
          ((Hl7.Fhir.Model.Element)current.KindElement).DeserializeJson(ref reader, options);
          break;

        case "instantiates":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.InstantiatesElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.InstantiatesElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.InstantiatesElement.Count == 0)
          {
            current.InstantiatesElement = null;
          }
          break;

        case "_instantiates":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_instantiates = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_instantiates >= current.InstantiatesElement.Count)
            {
              current.InstantiatesElement.Add(new Canonical());
            }
            ((Hl7.Fhir.Model.Element)current.InstantiatesElement[i_instantiates++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "imports":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ImportsElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ImportsElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ImportsElement.Count == 0)
          {
            current.ImportsElement = null;
          }
          break;

        case "_imports":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_imports = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_imports >= current.ImportsElement.Count)
            {
              current.ImportsElement.Add(new Canonical());
            }
            ((Hl7.Fhir.Model.Element)current.ImportsElement[i_imports++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "software":
          current.Software = new Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent();
          ((Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent)current.Software).DeserializeJson(ref reader, options);
          break;

        case "implementation":
          current.Implementation = new Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent();
          ((Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent)current.Implementation).DeserializeJson(ref reader, options);
          break;

        case "fhirVersion":
          current.FhirVersionElement =new Code<Hl7.Fhir.Model.FHIRVersion>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FHIRVersion>(reader.GetString()));
          break;

        case "_fhirVersion":
          ((Hl7.Fhir.Model.Element)current.FhirVersionElement).DeserializeJson(ref reader, options);
          break;

        case "format":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.FormatElement = new List<Code>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.FormatElement.Add(new Code(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.FormatElement.Count == 0)
          {
            current.FormatElement = null;
          }
          break;

        case "_format":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_format = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_format >= current.FormatElement.Count)
            {
              current.FormatElement.Add(new Code());
            }
            ((Hl7.Fhir.Model.Element)current.FormatElement[i_format++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "patchFormat":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PatchFormatElement = new List<Code>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.PatchFormatElement.Add(new Code(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PatchFormatElement.Count == 0)
          {
            current.PatchFormatElement = null;
          }
          break;

        case "_patchFormat":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_patchFormat = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_patchFormat >= current.PatchFormatElement.Count)
            {
              current.PatchFormatElement.Add(new Code());
            }
            ((Hl7.Fhir.Model.Element)current.PatchFormatElement[i_patchFormat++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "implementationGuide":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ImplementationGuideElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ImplementationGuideElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ImplementationGuideElement.Count == 0)
          {
            current.ImplementationGuideElement = null;
          }
          break;

        case "_implementationGuide":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_implementationGuide = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_implementationGuide >= current.ImplementationGuideElement.Count)
            {
              current.ImplementationGuideElement.Add(new Canonical());
            }
            ((Hl7.Fhir.Model.Element)current.ImplementationGuideElement[i_implementationGuide++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "rest":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Rest = new List<CapabilityStatement.RestComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.RestComponent v_Rest = new Hl7.Fhir.Model.CapabilityStatement.RestComponent();
            v_Rest.DeserializeJson(ref reader, options);
            current.Rest.Add(v_Rest);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Rest.Count == 0)
          {
            current.Rest = null;
          }
          break;

        case "messaging":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Messaging = new List<CapabilityStatement.MessagingComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.MessagingComponent v_Messaging = new Hl7.Fhir.Model.CapabilityStatement.MessagingComponent();
            v_Messaging.DeserializeJson(ref reader, options);
            current.Messaging.Add(v_Messaging);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Messaging.Count == 0)
          {
            current.Messaging = null;
          }
          break;

        case "document":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Document = new List<CapabilityStatement.DocumentComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.DocumentComponent v_Document = new Hl7.Fhir.Model.CapabilityStatement.DocumentComponent();
            v_Document.DeserializeJson(ref reader, options);
            current.Document.Add(v_Document);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Document.Count == 0)
          {
            current.Document = null;
          }
          break;

        // Complex: CapabilityStatement, Export: CapabilityStatement, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Software into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.SoftwareComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Software, Export: SoftwareComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if (current.ReleaseDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.ReleaseDateElement.Value))
        {
          writer.WriteString("releaseDate",current.ReleaseDateElement.Value);
        }
        if (current.ReleaseDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.ReleaseDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_releaseDate",false,current.ReleaseDateElement.Extension,current.ReleaseDateElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Software
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.SoftwareComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Software
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.SoftwareComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "_name":
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());
          break;

        case "_version":
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "releaseDate":
          current.ReleaseDateElement = new FhirDateTime(reader.GetString());
          break;

        case "_releaseDate":
          ((Hl7.Fhir.Model.Element)current.ReleaseDateElement).DeserializeJson(ref reader, options);
          break;

        // Complex: software, Export: SoftwareComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Implementation into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.ImplementationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Implementation, Export: ImplementationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("description",current.DescriptionElement.Value);

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if (current.Custodian != null)
      {
        writer.WritePropertyName("custodian");
        current.Custodian.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Implementation
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.ImplementationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Implementation
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.ImplementationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());
          break;

        case "_description":
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "url":
          current.UrlElement = new FhirUrl(reader.GetString());
          break;

        case "_url":
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "custodian":
          current.Custodian = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Custodian).DeserializeJson(ref reader, options);
          break;

        // Complex: implementation, Export: ImplementationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Rest into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.RestComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Rest, Export: RestComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("mode",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ModeElement.Value));

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if (current.Security != null)
      {
        writer.WritePropertyName("security");
        current.Security.SerializeJson(writer, options);
      }

      if ((current.Resource != null) && (current.Resource.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();
        foreach (CapabilityStatement.ResourceComponent val in current.Resource)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Interaction != null) && (current.Interaction.Count != 0))
      {
        writer.WritePropertyName("interaction");
        writer.WriteStartArray();
        foreach (CapabilityStatement.SystemInteractionComponent val in current.Interaction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SearchParam != null) && (current.SearchParam.Count != 0))
      {
        writer.WritePropertyName("searchParam");
        writer.WriteStartArray();
        foreach (CapabilityStatement.SearchParamComponent val in current.SearchParam)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Operation != null) && (current.Operation.Count != 0))
      {
        writer.WritePropertyName("operation");
        writer.WriteStartArray();
        foreach (CapabilityStatement.OperationComponent val in current.Operation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.CompartmentElement != null) && (current.CompartmentElement.Count != 0))
      {
        writer.WritePropertyName("compartment");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (Canonical val in current.CompartmentElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (Canonical val in current.CompartmentElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_compartment");
          writer.WriteStartArray();
          foreach (Canonical val in current.CompartmentElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Rest
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.RestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Rest
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.RestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          current.ModeElement =new Code<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode>(reader.GetString()));
          break;

        case "_mode":
          ((Hl7.Fhir.Model.Element)current.ModeElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());
          break;

        case "security":
          current.Security = new Hl7.Fhir.Model.CapabilityStatement.SecurityComponent();
          ((Hl7.Fhir.Model.CapabilityStatement.SecurityComponent)current.Security).DeserializeJson(ref reader, options);
          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Resource = new List<CapabilityStatement.ResourceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.ResourceComponent v_Resource = new Hl7.Fhir.Model.CapabilityStatement.ResourceComponent();
            v_Resource.DeserializeJson(ref reader, options);
            current.Resource.Add(v_Resource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Resource.Count == 0)
          {
            current.Resource = null;
          }
          break;

        case "interaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Interaction = new List<CapabilityStatement.SystemInteractionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent v_Interaction = new Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent();
            v_Interaction.DeserializeJson(ref reader, options);
            current.Interaction.Add(v_Interaction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Interaction.Count == 0)
          {
            current.Interaction = null;
          }
          break;

        case "searchParam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SearchParam = new List<CapabilityStatement.SearchParamComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent v_SearchParam = new Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent();
            v_SearchParam.DeserializeJson(ref reader, options);
            current.SearchParam.Add(v_SearchParam);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SearchParam.Count == 0)
          {
            current.SearchParam = null;
          }
          break;

        case "operation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Operation = new List<CapabilityStatement.OperationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.OperationComponent v_Operation = new Hl7.Fhir.Model.CapabilityStatement.OperationComponent();
            v_Operation.DeserializeJson(ref reader, options);
            current.Operation.Add(v_Operation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Operation.Count == 0)
          {
            current.Operation = null;
          }
          break;

        case "compartment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.CompartmentElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.CompartmentElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CompartmentElement.Count == 0)
          {
            current.CompartmentElement = null;
          }
          break;

        case "_compartment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_compartment = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_compartment >= current.CompartmentElement.Count)
            {
              current.CompartmentElement.Add(new Canonical());
            }
            ((Hl7.Fhir.Model.Element)current.CompartmentElement[i_compartment++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: rest, Export: RestComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Security into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.SecurityComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Security, Export: SecurityComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.CorsElement != null)
      {
        if (current.CorsElement.Value != null)
        {
          writer.WriteBoolean("cors",(bool)current.CorsElement.Value);
        }
        if (current.CorsElement.HasExtensions() || (!string.IsNullOrEmpty(current.CorsElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_cors",false,current.CorsElement.Extension,current.CorsElement.ElementId);
        }
      }

      if ((current.Service != null) && (current.Service.Count != 0))
      {
        writer.WritePropertyName("service");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Service)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Description != null)
      {
        if (!string.IsNullOrEmpty(current.Description.Value))
        {
          writer.WriteString("description",current.Description.Value);
        }
        if (current.Description.HasExtensions() || (!string.IsNullOrEmpty(current.Description.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.Description.Extension,current.Description.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Security
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.SecurityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Security
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.SecurityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "cors":
          current.CorsElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_cors":
          ((Hl7.Fhir.Model.Element)current.CorsElement).DeserializeJson(ref reader, options);
          break;

        case "service":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Service = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Service = new Hl7.Fhir.Model.CodeableConcept();
            v_Service.DeserializeJson(ref reader, options);
            current.Service.Add(v_Service);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Service.Count == 0)
          {
            current.Service = null;
          }
          break;

        case "description":
          current.Description = new Markdown(reader.GetString());
          break;

        // Complex: security, Export: SecurityComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Resource into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.ResourceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Resource, Export: ResourceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      if (current.ProfileElement != null)
      {
        if (!string.IsNullOrEmpty(current.ProfileElement.Value))
        {
          writer.WriteString("profile",current.ProfileElement.Value);
        }
        if (current.ProfileElement.HasExtensions() || (!string.IsNullOrEmpty(current.ProfileElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_profile",false,current.ProfileElement.Extension,current.ProfileElement.ElementId);
        }
      }

      if ((current.SupportedProfileElement != null) && (current.SupportedProfileElement.Count != 0))
      {
        writer.WritePropertyName("supportedProfile");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (Canonical val in current.SupportedProfileElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (Canonical val in current.SupportedProfileElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_supportedProfile");
          writer.WriteStartArray();
          foreach (Canonical val in current.SupportedProfileElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if ((current.Interaction != null) && (current.Interaction.Count != 0))
      {
        writer.WritePropertyName("interaction");
        writer.WriteStartArray();
        foreach (CapabilityStatement.ResourceInteractionComponent val in current.Interaction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.VersioningElement != null)
      {
        writer.WriteString("versioning",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.VersioningElement.Value));
      }

      if (current.ReadHistoryElement != null)
      {
        if (current.ReadHistoryElement.Value != null)
        {
          writer.WriteBoolean("readHistory",(bool)current.ReadHistoryElement.Value);
        }
        if (current.ReadHistoryElement.HasExtensions() || (!string.IsNullOrEmpty(current.ReadHistoryElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_readHistory",false,current.ReadHistoryElement.Extension,current.ReadHistoryElement.ElementId);
        }
      }

      if (current.UpdateCreateElement != null)
      {
        if (current.UpdateCreateElement.Value != null)
        {
          writer.WriteBoolean("updateCreate",(bool)current.UpdateCreateElement.Value);
        }
        if (current.UpdateCreateElement.HasExtensions() || (!string.IsNullOrEmpty(current.UpdateCreateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_updateCreate",false,current.UpdateCreateElement.Extension,current.UpdateCreateElement.ElementId);
        }
      }

      if (current.ConditionalCreateElement != null)
      {
        if (current.ConditionalCreateElement.Value != null)
        {
          writer.WriteBoolean("conditionalCreate",(bool)current.ConditionalCreateElement.Value);
        }
        if (current.ConditionalCreateElement.HasExtensions() || (!string.IsNullOrEmpty(current.ConditionalCreateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_conditionalCreate",false,current.ConditionalCreateElement.Extension,current.ConditionalCreateElement.ElementId);
        }
      }

      if (current.ConditionalReadElement != null)
      {
        writer.WriteString("conditionalRead",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ConditionalReadElement.Value));
      }

      if (current.ConditionalUpdateElement != null)
      {
        if (current.ConditionalUpdateElement.Value != null)
        {
          writer.WriteBoolean("conditionalUpdate",(bool)current.ConditionalUpdateElement.Value);
        }
        if (current.ConditionalUpdateElement.HasExtensions() || (!string.IsNullOrEmpty(current.ConditionalUpdateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_conditionalUpdate",false,current.ConditionalUpdateElement.Extension,current.ConditionalUpdateElement.ElementId);
        }
      }

      if (current.ConditionalDeleteElement != null)
      {
        writer.WriteString("conditionalDelete",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ConditionalDeleteElement.Value));
      }

      if ((current.ReferencePolicyElement != null) && (current.ReferencePolicyElement.Count != 0))
      {
        writer.WritePropertyName("referencePolicy");
        writer.WriteStartArray();
        foreach (Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy> val in current.ReferencePolicyElement)
        {
          writer.WriteStringValue(Hl7.Fhir.Utility.EnumUtility.GetLiteral(val.Value));
        }
        writer.WriteEndArray();
      }

      if ((current.SearchIncludeElement != null) && (current.SearchIncludeElement.Count != 0))
      {
        writer.WritePropertyName("searchInclude");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirString val in current.SearchIncludeElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirString val in current.SearchIncludeElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_searchInclude");
          writer.WriteStartArray();
          foreach (FhirString val in current.SearchIncludeElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.SearchRevIncludeElement != null) && (current.SearchRevIncludeElement.Count != 0))
      {
        writer.WritePropertyName("searchRevInclude");
        writer.WriteStartArray();
        bool foundExtensions = false;
        foreach (FhirString val in current.SearchRevIncludeElement)
        {
          if (val.HasExtensions())
          {
            foundExtensions = true;
            break;
          }
        }

        foreach (FhirString val in current.SearchRevIncludeElement)
        {
          if (string.IsNullOrEmpty(val.Value))
          {
            if (foundExtensions) { writer.WriteNullValue(); }
          }
          else
          {
            writer.WriteStringValue(val.Value);
          }

        }
        if (foundExtensions)
        {
          writer.WriteEndArray();
          writer.WritePropertyName("_searchRevInclude");
          writer.WriteStartArray();
          foreach (FhirString val in current.SearchRevIncludeElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }
        }
        writer.WriteEndArray();
      }

      if ((current.SearchParam != null) && (current.SearchParam.Count != 0))
      {
        writer.WritePropertyName("searchParam");
        writer.WriteStartArray();
        foreach (CapabilityStatement.SearchParamComponent val in current.SearchParam)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Operation != null) && (current.Operation.Count != 0))
      {
        writer.WritePropertyName("operation");
        writer.WriteStartArray();
        foreach (CapabilityStatement.OperationComponent val in current.Operation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Resource
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.ResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Resource
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.ResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.ResourceType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ResourceType>(reader.GetString()));
          break;

        case "_type":
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "profile":
          current.ProfileElement = new Canonical(reader.GetString());
          break;

        case "_profile":
          ((Hl7.Fhir.Model.Element)current.ProfileElement).DeserializeJson(ref reader, options);
          break;

        case "supportedProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SupportedProfileElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SupportedProfileElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SupportedProfileElement.Count == 0)
          {
            current.SupportedProfileElement = null;
          }
          break;

        case "_supportedProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_supportedProfile = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_supportedProfile >= current.SupportedProfileElement.Count)
            {
              current.SupportedProfileElement.Add(new Canonical());
            }
            ((Hl7.Fhir.Model.Element)current.SupportedProfileElement[i_supportedProfile++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());
          break;

        case "interaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Interaction = new List<CapabilityStatement.ResourceInteractionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent v_Interaction = new Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent();
            v_Interaction.DeserializeJson(ref reader, options);
            current.Interaction.Add(v_Interaction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Interaction.Count == 0)
          {
            current.Interaction = null;
          }
          break;

        case "versioning":
          current.VersioningElement =new Code<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy>(reader.GetString()));
          break;

        case "_versioning":
          ((Hl7.Fhir.Model.Element)current.VersioningElement).DeserializeJson(ref reader, options);
          break;

        case "readHistory":
          current.ReadHistoryElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_readHistory":
          ((Hl7.Fhir.Model.Element)current.ReadHistoryElement).DeserializeJson(ref reader, options);
          break;

        case "updateCreate":
          current.UpdateCreateElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_updateCreate":
          ((Hl7.Fhir.Model.Element)current.UpdateCreateElement).DeserializeJson(ref reader, options);
          break;

        case "conditionalCreate":
          current.ConditionalCreateElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_conditionalCreate":
          ((Hl7.Fhir.Model.Element)current.ConditionalCreateElement).DeserializeJson(ref reader, options);
          break;

        case "conditionalRead":
          current.ConditionalReadElement =new Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus>(reader.GetString()));
          break;

        case "_conditionalRead":
          ((Hl7.Fhir.Model.Element)current.ConditionalReadElement).DeserializeJson(ref reader, options);
          break;

        case "conditionalUpdate":
          current.ConditionalUpdateElement = new FhirBoolean(reader.GetBoolean());
          break;

        case "_conditionalUpdate":
          ((Hl7.Fhir.Model.Element)current.ConditionalUpdateElement).DeserializeJson(ref reader, options);
          break;

        case "conditionalDelete":
          current.ConditionalDeleteElement =new Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus>(reader.GetString()));
          break;

        case "_conditionalDelete":
          ((Hl7.Fhir.Model.Element)current.ConditionalDeleteElement).DeserializeJson(ref reader, options);
          break;

        case "referencePolicy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ReferencePolicyElement = new List<Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ReferencePolicyElement.Add(new Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>(reader.GetString())));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReferencePolicyElement.Count == 0)
          {
            current.ReferencePolicyElement = null;
          }
          break;

        case "_referencePolicy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_referencePolicy = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_referencePolicy >= current.ReferencePolicyElement.Count)
            {
              current.ReferencePolicyElement.Add(new Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>());
            }
            ((Hl7.Fhir.Model.Element)current.ReferencePolicyElement[i_referencePolicy++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "searchInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SearchIncludeElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SearchIncludeElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SearchIncludeElement.Count == 0)
          {
            current.SearchIncludeElement = null;
          }
          break;

        case "_searchInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_searchInclude = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_searchInclude >= current.SearchIncludeElement.Count)
            {
              current.SearchIncludeElement.Add(new FhirString());
            }
            ((Hl7.Fhir.Model.Element)current.SearchIncludeElement[i_searchInclude++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "searchRevInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SearchRevIncludeElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SearchRevIncludeElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SearchRevIncludeElement.Count == 0)
          {
            current.SearchRevIncludeElement = null;
          }
          break;

        case "_searchRevInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_searchRevInclude = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_searchRevInclude >= current.SearchRevIncludeElement.Count)
            {
              current.SearchRevIncludeElement.Add(new FhirString());
            }
            ((Hl7.Fhir.Model.Element)current.SearchRevIncludeElement[i_searchRevInclude++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "searchParam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SearchParam = new List<CapabilityStatement.SearchParamComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent v_SearchParam = new Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent();
            v_SearchParam.DeserializeJson(ref reader, options);
            current.SearchParam.Add(v_SearchParam);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SearchParam.Count == 0)
          {
            current.SearchParam = null;
          }
          break;

        case "operation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Operation = new List<CapabilityStatement.OperationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.OperationComponent v_Operation = new Hl7.Fhir.Model.CapabilityStatement.OperationComponent();
            v_Operation.DeserializeJson(ref reader, options);
            current.Operation.Add(v_Operation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Operation.Count == 0)
          {
            current.Operation = null;
          }
          break;

        // Complex: resource, Export: ResourceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#ResourceInteraction into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.ResourceInteractionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#ResourceInteraction, Export: ResourceInteractionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("code",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.CodeElement.Value));

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#ResourceInteraction
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.ResourceInteractionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#ResourceInteraction
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.ResourceInteractionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.CodeElement =new Code<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction>(reader.GetString()));
          break;

        case "_code":
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());
          break;

        // Complex: interaction, Export: ResourceInteractionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#SearchParam into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.SearchParamComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#SearchParam, Export: SearchParamComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      if (current.DefinitionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DefinitionElement.Value))
        {
          writer.WriteString("definition",current.DefinitionElement.Value);
        }
        if (current.DefinitionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DefinitionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_definition",false,current.DefinitionElement.Extension,current.DefinitionElement.ElementId);
        }
      }

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SearchParam
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.SearchParamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SearchParam
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.SearchParamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "_name":
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "definition":
          current.DefinitionElement = new Canonical(reader.GetString());
          break;

        case "_definition":
          ((Hl7.Fhir.Model.Element)current.DefinitionElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.SearchParamType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.SearchParamType>(reader.GetString()));
          break;

        case "_type":
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());
          break;

        // Complex: searchParam, Export: SearchParamComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Operation into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.OperationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Operation, Export: OperationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      writer.WriteString("definition",current.DefinitionElement.Value);

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Operation
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Operation
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());
          break;

        case "_name":
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "definition":
          current.DefinitionElement = new Canonical(reader.GetString());
          break;

        case "_definition":
          ((Hl7.Fhir.Model.Element)current.DefinitionElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());
          break;

        // Complex: operation, Export: OperationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#SystemInteraction into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.SystemInteractionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#SystemInteraction, Export: SystemInteractionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("code",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.CodeElement.Value));

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SystemInteraction
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.SystemInteractionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SystemInteraction
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.SystemInteractionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.CodeElement =new Code<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction>(reader.GetString()));
          break;

        case "_code":
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());
          break;

        // Complex: interaction, Export: SystemInteractionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Messaging into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.MessagingComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Messaging, Export: MessagingComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Endpoint != null) && (current.Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();
        foreach (CapabilityStatement.EndpointComponent val in current.Endpoint)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.ReliableCacheElement != null)
      {
        if (current.ReliableCacheElement.Value != null)
        {
          writer.WriteNumber("reliableCache",(int)current.ReliableCacheElement.Value);
        }
        if (current.ReliableCacheElement.HasExtensions() || (!string.IsNullOrEmpty(current.ReliableCacheElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_reliableCache",false,current.ReliableCacheElement.Extension,current.ReliableCacheElement.ElementId);
        }
      }

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if ((current.SupportedMessage != null) && (current.SupportedMessage.Count != 0))
      {
        writer.WritePropertyName("supportedMessage");
        writer.WriteStartArray();
        foreach (CapabilityStatement.SupportedMessageComponent val in current.SupportedMessage)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Messaging
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.MessagingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Messaging
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.MessagingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Endpoint = new List<CapabilityStatement.EndpointComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.EndpointComponent v_Endpoint = new Hl7.Fhir.Model.CapabilityStatement.EndpointComponent();
            v_Endpoint.DeserializeJson(ref reader, options);
            current.Endpoint.Add(v_Endpoint);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Endpoint.Count == 0)
          {
            current.Endpoint = null;
          }
          break;

        case "reliableCache":
          current.ReliableCacheElement = new UnsignedInt(reader.GetInt32());
          break;

        case "_reliableCache":
          ((Hl7.Fhir.Model.Element)current.ReliableCacheElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());
          break;

        case "supportedMessage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SupportedMessage = new List<CapabilityStatement.SupportedMessageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent v_SupportedMessage = new Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent();
            v_SupportedMessage.DeserializeJson(ref reader, options);
            current.SupportedMessage.Add(v_SupportedMessage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SupportedMessage.Count == 0)
          {
            current.SupportedMessage = null;
          }
          break;

        // Complex: messaging, Export: MessagingComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Endpoint into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.EndpointComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Endpoint, Export: EndpointComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("protocol");
      current.Protocol.SerializeJson(writer, options);

      writer.WriteString("address",current.AddressElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Endpoint
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.EndpointComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Endpoint
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.EndpointComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "protocol":
          current.Protocol = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Protocol).DeserializeJson(ref reader, options);
          break;

        case "address":
          current.AddressElement = new FhirUrl(reader.GetString());
          break;

        case "_address":
          ((Hl7.Fhir.Model.Element)current.AddressElement).DeserializeJson(ref reader, options);
          break;

        // Complex: endpoint, Export: EndpointComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#SupportedMessage into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.SupportedMessageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#SupportedMessage, Export: SupportedMessageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("mode",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ModeElement.Value));

      writer.WriteString("definition",current.DefinitionElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SupportedMessage
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.SupportedMessageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SupportedMessage
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.SupportedMessageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          current.ModeElement =new Code<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode>(reader.GetString()));
          break;

        case "_mode":
          ((Hl7.Fhir.Model.Element)current.ModeElement).DeserializeJson(ref reader, options);
          break;

        case "definition":
          current.DefinitionElement = new Canonical(reader.GetString());
          break;

        case "_definition":
          ((Hl7.Fhir.Model.Element)current.DefinitionElement).DeserializeJson(ref reader, options);
          break;

        // Complex: supportedMessage, Export: SupportedMessageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Document into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.DocumentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Document, Export: DocumentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("mode",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ModeElement.Value));

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      writer.WriteString("profile",current.ProfileElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Document
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.DocumentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Document
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.DocumentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          current.ModeElement =new Code<Hl7.Fhir.Model.CapabilityStatement.DocumentMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.DocumentMode>(reader.GetString()));
          break;

        case "_mode":
          ((Hl7.Fhir.Model.Element)current.ModeElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());
          break;

        case "profile":
          current.ProfileElement = new Canonical(reader.GetString());
          break;

        case "_profile":
          ((Hl7.Fhir.Model.Element)current.ProfileElement).DeserializeJson(ref reader, options);
          break;

        // Complex: document, Export: DocumentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class CapabilityStatementJsonConverter : JsonConverter<CapabilityStatement>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(CapabilityStatement).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, CapabilityStatement value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override CapabilityStatement Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        CapabilityStatement target = new CapabilityStatement();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
