// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for CapabilityStatement
  /// </summary>
  public static class CapabilityStatementJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR CapabilityStatement into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","CapabilityStatement");
      // Complex: CapabilityStatement, Export: CapabilityStatement, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if ((current.TitleElement != null) && (current.TitleElement.Value != null))
      {
        writer.WriteString("title",current.TitleElement.Value);
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      if ((current.ExperimentalElement != null) && (current.ExperimentalElement.Value != null))
      {
        writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
      }

      writer.WriteString("date",current.DateElement.Value);

      if ((current.PublisherElement != null) && (current.PublisherElement.Value != null))
      {
        writer.WriteString("publisher",current.PublisherElement.Value);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Purpose != null) && (current.Purpose.Value != null))
      {
        writer.WriteString("purpose",current.Purpose.Value);
      }

      if ((current.Copyright != null) && (current.Copyright.Value != null))
      {
        writer.WriteString("copyright",current.Copyright.Value);
      }

      writer.WriteString("kind",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.KindElement.Value));

      if ((current.InstantiatesElement != null) && (current.InstantiatesElement.Count != 0))
      {
        writer.WritePropertyName("instantiates");
        writer.WriteStartArray();
        foreach (Canonical val in current.InstantiatesElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.ImportsElement != null) && (current.ImportsElement.Count != 0))
      {
        writer.WritePropertyName("imports");
        writer.WriteStartArray();
        foreach (Canonical val in current.ImportsElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (current.Software != null)
      {
        writer.WritePropertyName("software");
        current.Software.SerializeJson(writer, options);
      }

      if (current.Implementation != null)
      {
        writer.WritePropertyName("implementation");
        current.Implementation.SerializeJson(writer, options);
      }

      writer.WriteString("fhirVersion",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.FhirVersionElement.Value));

      if ((current.FormatElement != null) && (current.FormatElement.Count != 0))
      {
        writer.WritePropertyName("format");
        writer.WriteStartArray();
        foreach (Code val in current.FormatElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.PatchFormatElement != null) && (current.PatchFormatElement.Count != 0))
      {
        writer.WritePropertyName("patchFormat");
        writer.WriteStartArray();
        foreach (Code val in current.PatchFormatElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.ImplementationGuideElement != null) && (current.ImplementationGuideElement.Count != 0))
      {
        writer.WritePropertyName("implementationGuide");
        writer.WriteStartArray();
        foreach (Canonical val in current.ImplementationGuideElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.Rest != null) && (current.Rest.Count != 0))
      {
        writer.WritePropertyName("rest");
        writer.WriteStartArray();
        foreach (CapabilityStatement.RestComponent val in current.Rest)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Messaging != null) && (current.Messaging.Count != 0))
      {
        writer.WritePropertyName("messaging");
        writer.WriteStartArray();
        foreach (CapabilityStatement.MessagingComponent val in current.Messaging)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Document != null) && (current.Document.Count != 0))
      {
        writer.WritePropertyName("document");
        writer.WriteStartArray();
        foreach (CapabilityStatement.DocumentComponent val in current.Document)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          current.UrlElement = new FhirUri(reader.GetString());

          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "title":
          current.TitleElement = new FhirString(reader.GetString());

          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));

          break;

        case "experimental":
          current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());

          break;

        case "publisher":
          current.PublisherElement = new FhirString(reader.GetString());

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Contact.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactDetail>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }

          break;

        case "description":
          current.Description = new Markdown(reader.GetString());

          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.UseContext.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.UsageContext>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Jurisdiction.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }

          break;

        case "purpose":
          current.Purpose = new Markdown(reader.GetString());

          break;

        case "copyright":
          current.Copyright = new Markdown(reader.GetString());

          break;

        case "kind":
          current.KindElement =new Code<Hl7.Fhir.Model.CapabilityStatementKind>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatementKind>(reader.GetString()));

          break;

        case "instantiates":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.InstantiatesElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.InstantiatesElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.InstantiatesElement.Count == 0)
          {
            current.InstantiatesElement = null;
          }

          break;

        case "imports":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ImportsElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ImportsElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ImportsElement.Count == 0)
          {
            current.ImportsElement = null;
          }

          break;

        case "software":
          current.Software = JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent>(ref reader, options);

          break;

        case "implementation":
          current.Implementation = JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent>(ref reader, options);

          break;

        case "fhirVersion":
          current.FhirVersionElement =new Code<Hl7.Fhir.Model.FHIRVersion>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FHIRVersion>(reader.GetString()));

          break;

        case "format":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.FormatElement = new List<Code>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.FormatElement.Add(new Code(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.FormatElement.Count == 0)
          {
            current.FormatElement = null;
          }

          break;

        case "patchFormat":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.PatchFormatElement = new List<Code>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.PatchFormatElement.Add(new Code(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.PatchFormatElement.Count == 0)
          {
            current.PatchFormatElement = null;
          }

          break;

        case "implementationGuide":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ImplementationGuideElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ImplementationGuideElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ImplementationGuideElement.Count == 0)
          {
            current.ImplementationGuideElement = null;
          }

          break;

        case "rest":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Rest = new List<CapabilityStatement.RestComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Rest.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.RestComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Rest.Count == 0)
          {
            current.Rest = null;
          }

          break;

        case "messaging":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Messaging = new List<CapabilityStatement.MessagingComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Messaging.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.MessagingComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Messaging.Count == 0)
          {
            current.Messaging = null;
          }

          break;

        case "document":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Document = new List<CapabilityStatement.DocumentComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Document.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.DocumentComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Document.Count == 0)
          {
            current.Document = null;
          }

          break;

        // Complex: CapabilityStatement, Export: CapabilityStatement, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Software into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.SoftwareComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Software, Export: SoftwareComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if ((current.ReleaseDateElement != null) && (current.ReleaseDateElement.Value != null))
      {
        writer.WriteString("releaseDate",current.ReleaseDateElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Software
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.SoftwareComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Software
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.SoftwareComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());

          break;

        case "releaseDate":
          current.ReleaseDateElement = new FhirDateTime(reader.GetString());

          break;

        // Complex: software, Export: SoftwareComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Implementation into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.ImplementationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Implementation, Export: ImplementationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("description",current.DescriptionElement.Value);

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if (current.Custodian != null)
      {
        writer.WritePropertyName("custodian");
        current.Custodian.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Implementation
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.ImplementationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Implementation
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.ImplementationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());

          break;

        case "url":
          current.UrlElement = new FhirUrl(reader.GetString());

          break;

        case "custodian":
          current.Custodian = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        // Complex: implementation, Export: ImplementationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Rest into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.RestComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Rest, Export: RestComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("mode",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ModeElement.Value));

      if ((current.Documentation != null) && (current.Documentation.Value != null))
      {
        writer.WriteString("documentation",current.Documentation.Value);
      }

      if (current.Security != null)
      {
        writer.WritePropertyName("security");
        current.Security.SerializeJson(writer, options);
      }

      if ((current.Resource != null) && (current.Resource.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();
        foreach (CapabilityStatement.ResourceComponent val in current.Resource)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Interaction != null) && (current.Interaction.Count != 0))
      {
        writer.WritePropertyName("interaction");
        writer.WriteStartArray();
        foreach (CapabilityStatement.SystemInteractionComponent val in current.Interaction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SearchParam != null) && (current.SearchParam.Count != 0))
      {
        writer.WritePropertyName("searchParam");
        writer.WriteStartArray();
        foreach (CapabilityStatement.SearchParamComponent val in current.SearchParam)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Operation != null) && (current.Operation.Count != 0))
      {
        writer.WritePropertyName("operation");
        writer.WriteStartArray();
        foreach (CapabilityStatement.OperationComponent val in current.Operation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.CompartmentElement != null) && (current.CompartmentElement.Count != 0))
      {
        writer.WritePropertyName("compartment");
        writer.WriteStartArray();
        foreach (Canonical val in current.CompartmentElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Rest
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.RestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Rest
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.RestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          current.ModeElement =new Code<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode>(reader.GetString()));

          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());

          break;

        case "security":
          current.Security = JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.SecurityComponent>(ref reader, options);

          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Resource = new List<CapabilityStatement.ResourceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Resource.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.ResourceComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Resource.Count == 0)
          {
            current.Resource = null;
          }

          break;

        case "interaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Interaction = new List<CapabilityStatement.SystemInteractionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Interaction.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Interaction.Count == 0)
          {
            current.Interaction = null;
          }

          break;

        case "searchParam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SearchParam = new List<CapabilityStatement.SearchParamComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SearchParam.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SearchParam.Count == 0)
          {
            current.SearchParam = null;
          }

          break;

        case "operation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Operation = new List<CapabilityStatement.OperationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Operation.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.OperationComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Operation.Count == 0)
          {
            current.Operation = null;
          }

          break;

        case "compartment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.CompartmentElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.CompartmentElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.CompartmentElement.Count == 0)
          {
            current.CompartmentElement = null;
          }

          break;

        // Complex: rest, Export: RestComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Security into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.SecurityComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Security, Export: SecurityComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.CorsElement != null) && (current.CorsElement.Value != null))
      {
        writer.WriteBoolean("cors",(bool)current.CorsElement.Value);
      }

      if ((current.Service != null) && (current.Service.Count != 0))
      {
        writer.WritePropertyName("service");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Service)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Description != null) && (current.Description.Value != null))
      {
        writer.WriteString("description",current.Description.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Security
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.SecurityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Security
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.SecurityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "cors":
          current.CorsElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "service":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Service = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Service.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Service.Count == 0)
          {
            current.Service = null;
          }

          break;

        case "description":
          current.Description = new Markdown(reader.GetString());

          break;

        // Complex: security, Export: SecurityComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Resource into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.ResourceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Resource, Export: ResourceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      if ((current.ProfileElement != null) && (current.ProfileElement.Value != null))
      {
        writer.WriteString("profile",current.ProfileElement.Value);
      }

      if ((current.SupportedProfileElement != null) && (current.SupportedProfileElement.Count != 0))
      {
        writer.WritePropertyName("supportedProfile");
        writer.WriteStartArray();
        foreach (Canonical val in current.SupportedProfileElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.Documentation != null) && (current.Documentation.Value != null))
      {
        writer.WriteString("documentation",current.Documentation.Value);
      }

      if ((current.Interaction != null) && (current.Interaction.Count != 0))
      {
        writer.WritePropertyName("interaction");
        writer.WriteStartArray();
        foreach (CapabilityStatement.ResourceInteractionComponent val in current.Interaction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.VersioningElement != null)
      {
        writer.WriteString("versioning",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.VersioningElement.Value));
      }

      if ((current.ReadHistoryElement != null) && (current.ReadHistoryElement.Value != null))
      {
        writer.WriteBoolean("readHistory",(bool)current.ReadHistoryElement.Value);
      }

      if ((current.UpdateCreateElement != null) && (current.UpdateCreateElement.Value != null))
      {
        writer.WriteBoolean("updateCreate",(bool)current.UpdateCreateElement.Value);
      }

      if ((current.ConditionalCreateElement != null) && (current.ConditionalCreateElement.Value != null))
      {
        writer.WriteBoolean("conditionalCreate",(bool)current.ConditionalCreateElement.Value);
      }

      if (current.ConditionalReadElement != null)
      {
        writer.WriteString("conditionalRead",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ConditionalReadElement.Value));
      }

      if ((current.ConditionalUpdateElement != null) && (current.ConditionalUpdateElement.Value != null))
      {
        writer.WriteBoolean("conditionalUpdate",(bool)current.ConditionalUpdateElement.Value);
      }

      if (current.ConditionalDeleteElement != null)
      {
        writer.WriteString("conditionalDelete",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ConditionalDeleteElement.Value));
      }

      if ((current.ReferencePolicyElement != null) && (current.ReferencePolicyElement.Count != 0))
      {
        writer.WritePropertyName("referencePolicy");
        writer.WriteStartArray();
        foreach (Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy> val in current.ReferencePolicyElement)
        {
          writer.WriteStringValue(Hl7.Fhir.Utility.EnumUtility.GetLiteral(val.Value));
        }
        writer.WriteEndArray();
      }

      if ((current.SearchIncludeElement != null) && (current.SearchIncludeElement.Count != 0))
      {
        writer.WritePropertyName("searchInclude");
        writer.WriteStartArray();
        foreach (FhirString val in current.SearchIncludeElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.SearchRevIncludeElement != null) && (current.SearchRevIncludeElement.Count != 0))
      {
        writer.WritePropertyName("searchRevInclude");
        writer.WriteStartArray();
        foreach (FhirString val in current.SearchRevIncludeElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.SearchParam != null) && (current.SearchParam.Count != 0))
      {
        writer.WritePropertyName("searchParam");
        writer.WriteStartArray();
        foreach (CapabilityStatement.SearchParamComponent val in current.SearchParam)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Operation != null) && (current.Operation.Count != 0))
      {
        writer.WritePropertyName("operation");
        writer.WriteStartArray();
        foreach (CapabilityStatement.OperationComponent val in current.Operation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Resource
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.ResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Resource
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.ResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.ResourceType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ResourceType>(reader.GetString()));

          break;

        case "profile":
          current.ProfileElement = new Canonical(reader.GetString());

          break;

        case "supportedProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SupportedProfileElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SupportedProfileElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SupportedProfileElement.Count == 0)
          {
            current.SupportedProfileElement = null;
          }

          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());

          break;

        case "interaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Interaction = new List<CapabilityStatement.ResourceInteractionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Interaction.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Interaction.Count == 0)
          {
            current.Interaction = null;
          }

          break;

        case "versioning":
          current.VersioningElement =new Code<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy>(reader.GetString()));

          break;

        case "readHistory":
          current.ReadHistoryElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "updateCreate":
          current.UpdateCreateElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "conditionalCreate":
          current.ConditionalCreateElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "conditionalRead":
          current.ConditionalReadElement =new Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus>(reader.GetString()));

          break;

        case "conditionalUpdate":
          current.ConditionalUpdateElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "conditionalDelete":
          current.ConditionalDeleteElement =new Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus>(reader.GetString()));

          break;

        case "referencePolicy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ReferencePolicyElement = new List<Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ReferencePolicyElement.Add(new Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>(reader.GetString())));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ReferencePolicyElement.Count == 0)
          {
            current.ReferencePolicyElement = null;
          }

          break;

        case "searchInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SearchIncludeElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SearchIncludeElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SearchIncludeElement.Count == 0)
          {
            current.SearchIncludeElement = null;
          }

          break;

        case "searchRevInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SearchRevIncludeElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SearchRevIncludeElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SearchRevIncludeElement.Count == 0)
          {
            current.SearchRevIncludeElement = null;
          }

          break;

        case "searchParam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SearchParam = new List<CapabilityStatement.SearchParamComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SearchParam.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SearchParam.Count == 0)
          {
            current.SearchParam = null;
          }

          break;

        case "operation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Operation = new List<CapabilityStatement.OperationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Operation.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.OperationComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Operation.Count == 0)
          {
            current.Operation = null;
          }

          break;

        // Complex: resource, Export: ResourceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#ResourceInteraction into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.ResourceInteractionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#ResourceInteraction, Export: ResourceInteractionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("code",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.CodeElement.Value));

      if ((current.Documentation != null) && (current.Documentation.Value != null))
      {
        writer.WriteString("documentation",current.Documentation.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#ResourceInteraction
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.ResourceInteractionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#ResourceInteraction
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.ResourceInteractionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.CodeElement =new Code<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction>(reader.GetString()));

          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());

          break;

        // Complex: interaction, Export: ResourceInteractionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#SearchParam into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.SearchParamComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#SearchParam, Export: SearchParamComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      if ((current.DefinitionElement != null) && (current.DefinitionElement.Value != null))
      {
        writer.WriteString("definition",current.DefinitionElement.Value);
      }

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      if ((current.Documentation != null) && (current.Documentation.Value != null))
      {
        writer.WriteString("documentation",current.Documentation.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SearchParam
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.SearchParamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SearchParam
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.SearchParamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "definition":
          current.DefinitionElement = new Canonical(reader.GetString());

          break;

        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.SearchParamType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.SearchParamType>(reader.GetString()));

          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());

          break;

        // Complex: searchParam, Export: SearchParamComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Operation into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.OperationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Operation, Export: OperationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      writer.WriteString("definition",current.DefinitionElement.Value);

      if ((current.Documentation != null) && (current.Documentation.Value != null))
      {
        writer.WriteString("documentation",current.Documentation.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Operation
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Operation
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "definition":
          current.DefinitionElement = new Canonical(reader.GetString());

          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());

          break;

        // Complex: operation, Export: OperationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#SystemInteraction into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.SystemInteractionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#SystemInteraction, Export: SystemInteractionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("code",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.CodeElement.Value));

      if ((current.Documentation != null) && (current.Documentation.Value != null))
      {
        writer.WriteString("documentation",current.Documentation.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SystemInteraction
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.SystemInteractionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SystemInteraction
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.SystemInteractionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.CodeElement =new Code<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction>(reader.GetString()));

          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());

          break;

        // Complex: interaction, Export: SystemInteractionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Messaging into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.MessagingComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Messaging, Export: MessagingComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Endpoint != null) && (current.Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();
        foreach (CapabilityStatement.EndpointComponent val in current.Endpoint)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ReliableCacheElement != null) && (current.ReliableCacheElement.Value != null))
      {
        writer.WriteNumber("reliableCache",(int)current.ReliableCacheElement.Value);
      }

      if ((current.Documentation != null) && (current.Documentation.Value != null))
      {
        writer.WriteString("documentation",current.Documentation.Value);
      }

      if ((current.SupportedMessage != null) && (current.SupportedMessage.Count != 0))
      {
        writer.WritePropertyName("supportedMessage");
        writer.WriteStartArray();
        foreach (CapabilityStatement.SupportedMessageComponent val in current.SupportedMessage)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Messaging
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.MessagingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Messaging
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.MessagingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Endpoint = new List<CapabilityStatement.EndpointComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Endpoint.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.EndpointComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Endpoint.Count == 0)
          {
            current.Endpoint = null;
          }

          break;

        case "reliableCache":
          current.ReliableCacheElement = new UnsignedInt(reader.GetInt32());

          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());

          break;

        case "supportedMessage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.SupportedMessage = new List<CapabilityStatement.SupportedMessageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.SupportedMessage.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.SupportedMessage.Count == 0)
          {
            current.SupportedMessage = null;
          }

          break;

        // Complex: messaging, Export: MessagingComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Endpoint into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.EndpointComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Endpoint, Export: EndpointComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("protocol");
      current.Protocol.SerializeJson(writer, options);

      writer.WriteString("address",current.AddressElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Endpoint
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.EndpointComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Endpoint
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.EndpointComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "protocol":
          current.Protocol = JsonSerializer.Deserialize<Hl7.Fhir.Model.Coding>(ref reader, options);

          break;

        case "address":
          current.AddressElement = new FhirUrl(reader.GetString());

          break;

        // Complex: endpoint, Export: EndpointComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#SupportedMessage into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.SupportedMessageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#SupportedMessage, Export: SupportedMessageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("mode",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ModeElement.Value));

      writer.WriteString("definition",current.DefinitionElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SupportedMessage
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.SupportedMessageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SupportedMessage
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.SupportedMessageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          current.ModeElement =new Code<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode>(reader.GetString()));

          break;

        case "definition":
          current.DefinitionElement = new Canonical(reader.GetString());

          break;

        // Complex: supportedMessage, Export: SupportedMessageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Document into JSON
    /// </summary>
    public static void SerializeJson(this CapabilityStatement.DocumentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Document, Export: DocumentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("mode",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ModeElement.Value));

      if ((current.Documentation != null) && (current.Documentation.Value != null))
      {
        writer.WriteString("documentation",current.Documentation.Value);
      }

      writer.WriteString("profile",current.ProfileElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Document
    /// </summary>
    public static void DeserializeJson(this CapabilityStatement.DocumentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Document
    /// </summary>
    public static void DeserializeJsonProperty(this CapabilityStatement.DocumentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          current.ModeElement =new Code<Hl7.Fhir.Model.CapabilityStatement.DocumentMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.DocumentMode>(reader.GetString()));

          break;

        case "documentation":
          current.Documentation = new Markdown(reader.GetString());

          break;

        case "profile":
          current.ProfileElement = new Canonical(reader.GetString());

          break;

        // Complex: document, Export: DocumentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class CapabilityStatementJsonConverter : JsonConverter<CapabilityStatement>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(CapabilityStatement).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, CapabilityStatement value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override CapabilityStatement Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        CapabilityStatement target = new CapabilityStatement();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
