// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for NutritionOrder
  /// </summary>
  public static class NutritionOrderJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR NutritionOrder into JSON
    /// </summary>
    public static void SerializeJson(this NutritionOrder current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","NutritionOrder");
      // Complex: NutritionOrder, Export: NutritionOrder, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.InstantiatesCanonicalElement != null) && (current.InstantiatesCanonicalElement.Count != 0))
      {
        writer.WritePropertyName("instantiatesCanonical");
        writer.WriteStartArray();
        foreach (Canonical val in current.InstantiatesCanonicalElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.InstantiatesUriElement != null) && (current.InstantiatesUriElement.Count != 0))
      {
        writer.WritePropertyName("instantiatesUri");
        writer.WriteStartArray();
        foreach (FhirUri val in current.InstantiatesUriElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.InstantiatesElement != null) && (current.InstantiatesElement.Count != 0))
      {
        writer.WritePropertyName("instantiates");
        writer.WriteStartArray();
        foreach (FhirUri val in current.InstantiatesElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));

      writer.WriteString("intent",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.IntentElement.Value));

      writer.WritePropertyName("patient");
      current.Patient.SerializeJson(writer, options);

      if (current.Encounter != null)
      {
        writer.WritePropertyName("encounter");
        current.Encounter.SerializeJson(writer, options);
      }

      writer.WriteString("dateTime",current.DateTimeElement.Value);

      if (current.Orderer != null)
      {
        writer.WritePropertyName("orderer");
        current.Orderer.SerializeJson(writer, options);
      }

      if ((current.AllergyIntolerance != null) && (current.AllergyIntolerance.Count != 0))
      {
        writer.WritePropertyName("allergyIntolerance");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.AllergyIntolerance)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.FoodPreferenceModifier != null) && (current.FoodPreferenceModifier.Count != 0))
      {
        writer.WritePropertyName("foodPreferenceModifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.FoodPreferenceModifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ExcludeFoodModifier != null) && (current.ExcludeFoodModifier.Count != 0))
      {
        writer.WritePropertyName("excludeFoodModifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ExcludeFoodModifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.OralDiet != null)
      {
        writer.WritePropertyName("oralDiet");
        current.OralDiet.SerializeJson(writer, options);
      }

      if ((current.Supplement != null) && (current.Supplement.Count != 0))
      {
        writer.WritePropertyName("supplement");
        writer.WriteStartArray();
        foreach (NutritionOrder.SupplementComponent val in current.Supplement)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.EnteralFormula != null)
      {
        writer.WritePropertyName("enteralFormula");
        current.EnteralFormula.SerializeJson(writer, options);
      }

      if ((current.Note != null) && (current.Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();
        foreach (Annotation val in current.Note)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder
    /// </summary>
    public static void DeserializeJson(this NutritionOrder current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder
    /// </summary>
    public static void DeserializeJsonProperty(this NutritionOrder current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "instantiatesCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.InstantiatesCanonicalElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.InstantiatesCanonicalElement.Add(new Canonical(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.InstantiatesCanonicalElement.Count == 0)
          {
            current.InstantiatesCanonicalElement = null;
          }
          break;

        case "_instantiatesCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          int i_instantiatesCanonical = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ((Hl7.Fhir.Model.Element)current.InstantiatesCanonicalElement[i_instantiatesCanonical++]).DeserializeJson(ref reader, options);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "instantiatesUri":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.InstantiatesUriElement = new List<FhirUri>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.InstantiatesUriElement.Add(new FhirUri(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.InstantiatesUriElement.Count == 0)
          {
            current.InstantiatesUriElement = null;
          }
          break;

        case "instantiates":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.InstantiatesElement = new List<FhirUri>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.InstantiatesElement.Add(new FhirUri(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.InstantiatesElement.Count == 0)
          {
            current.InstantiatesElement = null;
          }
          break;

        case "status":
          current.StatusElement =new Code<Hl7.Fhir.Model.RequestStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.RequestStatus>(reader.GetString()));
          break;

        case "intent":
          current.IntentElement =new Code<Hl7.Fhir.Model.RequestIntent>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.RequestIntent>(reader.GetString()));
          break;

        case "patient":
          current.Patient = new Hl7.Fhir.Model.ResourceReference();
          current.Patient.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          current.Encounter = new Hl7.Fhir.Model.ResourceReference();
          current.Encounter.DeserializeJson(ref reader, options);
          break;

        case "dateTime":
          current.DateTimeElement = new FhirDateTime(reader.GetString());
          break;

        case "orderer":
          current.Orderer = new Hl7.Fhir.Model.ResourceReference();
          current.Orderer.DeserializeJson(ref reader, options);
          break;

        case "allergyIntolerance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.AllergyIntolerance = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_AllergyIntolerance = new Hl7.Fhir.Model.ResourceReference();
            v_AllergyIntolerance.DeserializeJson(ref reader, options);
            current.AllergyIntolerance.Add(v_AllergyIntolerance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AllergyIntolerance.Count == 0)
          {
            current.AllergyIntolerance = null;
          }
          break;

        case "foodPreferenceModifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.FoodPreferenceModifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_FoodPreferenceModifier = new Hl7.Fhir.Model.CodeableConcept();
            v_FoodPreferenceModifier.DeserializeJson(ref reader, options);
            current.FoodPreferenceModifier.Add(v_FoodPreferenceModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.FoodPreferenceModifier.Count == 0)
          {
            current.FoodPreferenceModifier = null;
          }
          break;

        case "excludeFoodModifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ExcludeFoodModifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ExcludeFoodModifier = new Hl7.Fhir.Model.CodeableConcept();
            v_ExcludeFoodModifier.DeserializeJson(ref reader, options);
            current.ExcludeFoodModifier.Add(v_ExcludeFoodModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ExcludeFoodModifier.Count == 0)
          {
            current.ExcludeFoodModifier = null;
          }
          break;

        case "oralDiet":
          current.OralDiet = new Hl7.Fhir.Model.NutritionOrder.OralDietComponent();
          current.OralDiet.DeserializeJson(ref reader, options);
          break;

        case "supplement":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Supplement = new List<NutritionOrder.SupplementComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.NutritionOrder.SupplementComponent v_Supplement = new Hl7.Fhir.Model.NutritionOrder.SupplementComponent();
            v_Supplement.DeserializeJson(ref reader, options);
            current.Supplement.Add(v_Supplement);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Supplement.Count == 0)
          {
            current.Supplement = null;
          }
          break;

        case "enteralFormula":
          current.EnteralFormula = new Hl7.Fhir.Model.NutritionOrder.EnteralFormulaComponent();
          current.EnteralFormula.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Annotation v_Note = new Hl7.Fhir.Model.Annotation();
            v_Note.DeserializeJson(ref reader, options);
            current.Note.Add(v_Note);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }
          break;

        // Complex: NutritionOrder, Export: NutritionOrder, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR NutritionOrder#OralDiet into JSON
    /// </summary>
    public static void SerializeJson(this NutritionOrder.OralDietComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: NutritionOrder#OralDiet, Export: OralDietComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Type != null) && (current.Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Type)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Schedule != null) && (current.Schedule.Count != 0))
      {
        writer.WritePropertyName("schedule");
        writer.WriteStartArray();
        foreach (Timing val in current.Schedule)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Nutrient != null) && (current.Nutrient.Count != 0))
      {
        writer.WritePropertyName("nutrient");
        writer.WriteStartArray();
        foreach (NutritionOrder.NutrientComponent val in current.Nutrient)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Texture != null) && (current.Texture.Count != 0))
      {
        writer.WritePropertyName("texture");
        writer.WriteStartArray();
        foreach (NutritionOrder.TextureComponent val in current.Texture)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.FluidConsistencyType != null) && (current.FluidConsistencyType.Count != 0))
      {
        writer.WritePropertyName("fluidConsistencyType");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.FluidConsistencyType)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.InstructionElement != null) && (current.InstructionElement.Value != null))
      {
        writer.WriteString("instruction",current.InstructionElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder#OralDiet
    /// </summary>
    public static void DeserializeJson(this NutritionOrder.OralDietComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder#OralDiet
    /// </summary>
    public static void DeserializeJsonProperty(this NutritionOrder.OralDietComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Type = new Hl7.Fhir.Model.CodeableConcept();
            v_Type.DeserializeJson(ref reader, options);
            current.Type.Add(v_Type);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }
          break;

        case "schedule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Schedule = new List<Timing>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Timing v_Schedule = new Hl7.Fhir.Model.Timing();
            v_Schedule.DeserializeJson(ref reader, options);
            current.Schedule.Add(v_Schedule);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Schedule.Count == 0)
          {
            current.Schedule = null;
          }
          break;

        case "nutrient":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Nutrient = new List<NutritionOrder.NutrientComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.NutritionOrder.NutrientComponent v_Nutrient = new Hl7.Fhir.Model.NutritionOrder.NutrientComponent();
            v_Nutrient.DeserializeJson(ref reader, options);
            current.Nutrient.Add(v_Nutrient);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Nutrient.Count == 0)
          {
            current.Nutrient = null;
          }
          break;

        case "texture":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Texture = new List<NutritionOrder.TextureComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.NutritionOrder.TextureComponent v_Texture = new Hl7.Fhir.Model.NutritionOrder.TextureComponent();
            v_Texture.DeserializeJson(ref reader, options);
            current.Texture.Add(v_Texture);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Texture.Count == 0)
          {
            current.Texture = null;
          }
          break;

        case "fluidConsistencyType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.FluidConsistencyType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_FluidConsistencyType = new Hl7.Fhir.Model.CodeableConcept();
            v_FluidConsistencyType.DeserializeJson(ref reader, options);
            current.FluidConsistencyType.Add(v_FluidConsistencyType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.FluidConsistencyType.Count == 0)
          {
            current.FluidConsistencyType = null;
          }
          break;

        case "instruction":
          current.InstructionElement = new FhirString(reader.GetString());
          break;

        // Complex: oralDiet, Export: OralDietComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR NutritionOrder#Nutrient into JSON
    /// </summary>
    public static void SerializeJson(this NutritionOrder.NutrientComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: NutritionOrder#Nutrient, Export: NutrientComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Modifier != null)
      {
        writer.WritePropertyName("modifier");
        current.Modifier.SerializeJson(writer, options);
      }

      if (current.Amount != null)
      {
        writer.WritePropertyName("amount");
        current.Amount.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder#Nutrient
    /// </summary>
    public static void DeserializeJson(this NutritionOrder.NutrientComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder#Nutrient
    /// </summary>
    public static void DeserializeJsonProperty(this NutritionOrder.NutrientComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "modifier":
          current.Modifier = new Hl7.Fhir.Model.CodeableConcept();
          current.Modifier.DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.Quantity();
          current.Amount.DeserializeJson(ref reader, options);
          break;

        // Complex: nutrient, Export: NutrientComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR NutritionOrder#Texture into JSON
    /// </summary>
    public static void SerializeJson(this NutritionOrder.TextureComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: NutritionOrder#Texture, Export: TextureComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Modifier != null)
      {
        writer.WritePropertyName("modifier");
        current.Modifier.SerializeJson(writer, options);
      }

      if (current.FoodType != null)
      {
        writer.WritePropertyName("foodType");
        current.FoodType.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder#Texture
    /// </summary>
    public static void DeserializeJson(this NutritionOrder.TextureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder#Texture
    /// </summary>
    public static void DeserializeJsonProperty(this NutritionOrder.TextureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "modifier":
          current.Modifier = new Hl7.Fhir.Model.CodeableConcept();
          current.Modifier.DeserializeJson(ref reader, options);
          break;

        case "foodType":
          current.FoodType = new Hl7.Fhir.Model.CodeableConcept();
          current.FoodType.DeserializeJson(ref reader, options);
          break;

        // Complex: texture, Export: TextureComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR NutritionOrder#Supplement into JSON
    /// </summary>
    public static void SerializeJson(this NutritionOrder.SupplementComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: NutritionOrder#Supplement, Export: SupplementComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.ProductNameElement != null) && (current.ProductNameElement.Value != null))
      {
        writer.WriteString("productName",current.ProductNameElement.Value);
      }

      if ((current.Schedule != null) && (current.Schedule.Count != 0))
      {
        writer.WritePropertyName("schedule");
        writer.WriteStartArray();
        foreach (Timing val in current.Schedule)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if ((current.InstructionElement != null) && (current.InstructionElement.Value != null))
      {
        writer.WriteString("instruction",current.InstructionElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder#Supplement
    /// </summary>
    public static void DeserializeJson(this NutritionOrder.SupplementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder#Supplement
    /// </summary>
    public static void DeserializeJsonProperty(this NutritionOrder.SupplementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          current.Type.DeserializeJson(ref reader, options);
          break;

        case "productName":
          current.ProductNameElement = new FhirString(reader.GetString());
          break;

        case "schedule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Schedule = new List<Timing>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Timing v_Schedule = new Hl7.Fhir.Model.Timing();
            v_Schedule.DeserializeJson(ref reader, options);
            current.Schedule.Add(v_Schedule);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Schedule.Count == 0)
          {
            current.Schedule = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          current.Quantity.DeserializeJson(ref reader, options);
          break;

        case "instruction":
          current.InstructionElement = new FhirString(reader.GetString());
          break;

        // Complex: supplement, Export: SupplementComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR NutritionOrder#EnteralFormula into JSON
    /// </summary>
    public static void SerializeJson(this NutritionOrder.EnteralFormulaComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: NutritionOrder#EnteralFormula, Export: EnteralFormulaComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.BaseFormulaType != null)
      {
        writer.WritePropertyName("baseFormulaType");
        current.BaseFormulaType.SerializeJson(writer, options);
      }

      if ((current.BaseFormulaProductNameElement != null) && (current.BaseFormulaProductNameElement.Value != null))
      {
        writer.WriteString("baseFormulaProductName",current.BaseFormulaProductNameElement.Value);
      }

      if (current.AdditiveType != null)
      {
        writer.WritePropertyName("additiveType");
        current.AdditiveType.SerializeJson(writer, options);
      }

      if ((current.AdditiveProductNameElement != null) && (current.AdditiveProductNameElement.Value != null))
      {
        writer.WriteString("additiveProductName",current.AdditiveProductNameElement.Value);
      }

      if (current.CaloricDensity != null)
      {
        writer.WritePropertyName("caloricDensity");
        current.CaloricDensity.SerializeJson(writer, options);
      }

      if (current.RouteofAdministration != null)
      {
        writer.WritePropertyName("routeofAdministration");
        current.RouteofAdministration.SerializeJson(writer, options);
      }

      if ((current.Administration != null) && (current.Administration.Count != 0))
      {
        writer.WritePropertyName("administration");
        writer.WriteStartArray();
        foreach (NutritionOrder.AdministrationComponent val in current.Administration)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.MaxVolumeToDeliver != null)
      {
        writer.WritePropertyName("maxVolumeToDeliver");
        current.MaxVolumeToDeliver.SerializeJson(writer, options);
      }

      if ((current.AdministrationInstructionElement != null) && (current.AdministrationInstructionElement.Value != null))
      {
        writer.WriteString("administrationInstruction",current.AdministrationInstructionElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder#EnteralFormula
    /// </summary>
    public static void DeserializeJson(this NutritionOrder.EnteralFormulaComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder#EnteralFormula
    /// </summary>
    public static void DeserializeJsonProperty(this NutritionOrder.EnteralFormulaComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "baseFormulaType":
          current.BaseFormulaType = new Hl7.Fhir.Model.CodeableConcept();
          current.BaseFormulaType.DeserializeJson(ref reader, options);
          break;

        case "baseFormulaProductName":
          current.BaseFormulaProductNameElement = new FhirString(reader.GetString());
          break;

        case "additiveType":
          current.AdditiveType = new Hl7.Fhir.Model.CodeableConcept();
          current.AdditiveType.DeserializeJson(ref reader, options);
          break;

        case "additiveProductName":
          current.AdditiveProductNameElement = new FhirString(reader.GetString());
          break;

        case "caloricDensity":
          current.CaloricDensity = new Hl7.Fhir.Model.Quantity();
          current.CaloricDensity.DeserializeJson(ref reader, options);
          break;

        case "routeofAdministration":
          current.RouteofAdministration = new Hl7.Fhir.Model.CodeableConcept();
          current.RouteofAdministration.DeserializeJson(ref reader, options);
          break;

        case "administration":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Administration = new List<NutritionOrder.AdministrationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.NutritionOrder.AdministrationComponent v_Administration = new Hl7.Fhir.Model.NutritionOrder.AdministrationComponent();
            v_Administration.DeserializeJson(ref reader, options);
            current.Administration.Add(v_Administration);

            if (!reader.Read())
            {
              throw new JsonException();
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Administration.Count == 0)
          {
            current.Administration = null;
          }
          break;

        case "maxVolumeToDeliver":
          current.MaxVolumeToDeliver = new Hl7.Fhir.Model.Quantity();
          current.MaxVolumeToDeliver.DeserializeJson(ref reader, options);
          break;

        case "administrationInstruction":
          current.AdministrationInstructionElement = new FhirString(reader.GetString());
          break;

        // Complex: enteralFormula, Export: EnteralFormulaComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR NutritionOrder#Administration into JSON
    /// </summary>
    public static void SerializeJson(this NutritionOrder.AdministrationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: NutritionOrder#Administration, Export: AdministrationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Schedule != null)
      {
        writer.WritePropertyName("schedule");
        current.Schedule.SerializeJson(writer, options);
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.Rate != null)
      {
        switch (current.Rate)
        {
          case Quantity v_Quantity:
            writer.WritePropertyName("rateQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Ratio v_Ratio:
            writer.WritePropertyName("rateRatio");
            v_Ratio.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder#Administration
    /// </summary>
    public static void DeserializeJson(this NutritionOrder.AdministrationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR NutritionOrder#Administration
    /// </summary>
    public static void DeserializeJsonProperty(this NutritionOrder.AdministrationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "schedule":
          current.Schedule = new Hl7.Fhir.Model.Timing();
          current.Schedule.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          current.Quantity.DeserializeJson(ref reader, options);
          break;

        case "rateQuantity":
          current.Rate = new Hl7.Fhir.Model.Quantity();
          current.Rate.DeserializeJson(ref reader, options);
          break;

        case "rateRatio":
          current.Rate = new Hl7.Fhir.Model.Ratio();
          current.Rate.DeserializeJson(ref reader, options);
          break;

        // Complex: administration, Export: AdministrationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class NutritionOrderJsonConverter : JsonConverter<NutritionOrder>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(NutritionOrder).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, NutritionOrder value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override NutritionOrder Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        NutritionOrder target = new NutritionOrder();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
