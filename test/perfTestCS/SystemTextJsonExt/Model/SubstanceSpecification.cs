// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for SubstanceSpecification
  /// </summary>
  public static class SubstanceSpecificationJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR SubstanceSpecification into JSON
    /// </summary>
    public static void SerializeJson(this SubstanceSpecification current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","SubstanceSpecification");
      // Complex: SubstanceSpecification, Export: SubstanceSpecification, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Status != null)
      {
        writer.WritePropertyName("status");
        current.Status.SerializeJson(writer, options);
      }

      if (current.Domain != null)
      {
        writer.WritePropertyName("domain");
        current.Domain.SerializeJson(writer, options);
      }

      if ((current.DescriptionElement != null) && (current.DescriptionElement.Value != null))
      {
        writer.WriteString("description",current.DescriptionElement.Value);
      }

      if ((current.Source != null) && (current.Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Source)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.CommentElement != null) && (current.CommentElement.Value != null))
      {
        writer.WriteString("comment",current.CommentElement.Value);
      }

      if ((current.Moiety != null) && (current.Moiety.Count != 0))
      {
        writer.WritePropertyName("moiety");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.MoietyComponent val in current.Moiety)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Property != null) && (current.Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.PropertyComponent val in current.Property)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.ReferenceInformation != null)
      {
        writer.WritePropertyName("referenceInformation");
        current.ReferenceInformation.SerializeJson(writer, options);
      }

      if (current.Structure != null)
      {
        writer.WritePropertyName("structure");
        current.Structure.SerializeJson(writer, options);
      }

      if ((current.Code != null) && (current.Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.CodeComponent val in current.Code)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Name != null) && (current.Name.Count != 0))
      {
        writer.WritePropertyName("name");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.NameComponent val in current.Name)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.MolecularWeight != null) && (current.MolecularWeight.Count != 0))
      {
        writer.WritePropertyName("molecularWeight");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.MolecularWeightComponent val in current.MolecularWeight)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Relationship != null) && (current.Relationship.Count != 0))
      {
        writer.WritePropertyName("relationship");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.RelationshipComponent val in current.Relationship)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.NucleicAcid != null)
      {
        writer.WritePropertyName("nucleicAcid");
        current.NucleicAcid.SerializeJson(writer, options);
      }

      if (current.Polymer != null)
      {
        writer.WritePropertyName("polymer");
        current.Polymer.SerializeJson(writer, options);
      }

      if (current.Protein != null)
      {
        writer.WritePropertyName("protein");
        current.Protein.SerializeJson(writer, options);
      }

      if (current.SourceMaterial != null)
      {
        writer.WritePropertyName("sourceMaterial");
        current.SourceMaterial.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification
    /// </summary>
    public static void DeserializeJson(this SubstanceSpecification current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification
    /// </summary>
    public static void DeserializeJsonProperty(this SubstanceSpecification current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          current.Identifier = JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options);

          break;

        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "status":
          current.Status = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "domain":
          current.Domain = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "description":
          current.DescriptionElement = new FhirString(reader.GetString());

          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Source = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Source.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Source.Count == 0)
          {
            current.Source = null;
          }

          break;

        case "comment":
          current.CommentElement = new FhirString(reader.GetString());

          break;

        case "moiety":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Moiety = new List<SubstanceSpecification.MoietyComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Moiety.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.MoietyComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Moiety.Count == 0)
          {
            current.Moiety = null;
          }

          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Property = new List<SubstanceSpecification.PropertyComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Property.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.PropertyComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Property.Count == 0)
          {
            current.Property = null;
          }

          break;

        case "referenceInformation":
          current.ReferenceInformation = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "structure":
          current.Structure = JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.StructureComponent>(ref reader, options);

          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Code = new List<SubstanceSpecification.CodeComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Code.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.CodeComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Code.Count == 0)
          {
            current.Code = null;
          }

          break;

        case "name":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Name = new List<SubstanceSpecification.NameComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Name.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.NameComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Name.Count == 0)
          {
            current.Name = null;
          }

          break;

        case "molecularWeight":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.MolecularWeight = new List<SubstanceSpecification.MolecularWeightComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.MolecularWeight.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.MolecularWeight.Count == 0)
          {
            current.MolecularWeight = null;
          }

          break;

        case "relationship":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Relationship = new List<SubstanceSpecification.RelationshipComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Relationship.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.RelationshipComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Relationship.Count == 0)
          {
            current.Relationship = null;
          }

          break;

        case "nucleicAcid":
          current.NucleicAcid = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "polymer":
          current.Polymer = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "protein":
          current.Protein = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "sourceMaterial":
          current.SourceMaterial = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        // Complex: SubstanceSpecification, Export: SubstanceSpecification, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Moiety into JSON
    /// </summary>
    public static void SerializeJson(this SubstanceSpecification.MoietyComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Moiety, Export: MoietyComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Role != null)
      {
        writer.WritePropertyName("role");
        current.Role.SerializeJson(writer, options);
      }

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if ((current.NameElement != null) && (current.NameElement.Value != null))
      {
        writer.WriteString("name",current.NameElement.Value);
      }

      if (current.Stereochemistry != null)
      {
        writer.WritePropertyName("stereochemistry");
        current.Stereochemistry.SerializeJson(writer, options);
      }

      if (current.OpticalActivity != null)
      {
        writer.WritePropertyName("opticalActivity");
        current.OpticalActivity.SerializeJson(writer, options);
      }

      if ((current.MolecularFormulaElement != null) && (current.MolecularFormulaElement.Value != null))
      {
        writer.WriteString("molecularFormula",current.MolecularFormulaElement.Value);
      }

      if (current.Amount != null)
      {
        switch (current.Amount)
        {
          case Quantity v_Quantity:
            writer.WritePropertyName("amountQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case FhirString v_FhirString:
            writer.WriteString("amountString",v_FhirString.Value);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Moiety
    /// </summary>
    public static void DeserializeJson(this SubstanceSpecification.MoietyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Moiety
    /// </summary>
    public static void DeserializeJsonProperty(this SubstanceSpecification.MoietyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "role":
          current.Role = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "identifier":
          current.Identifier = JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options);

          break;

        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "stereochemistry":
          current.Stereochemistry = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "opticalActivity":
          current.OpticalActivity = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "molecularFormula":
          current.MolecularFormulaElement = new FhirString(reader.GetString());

          break;

        case "amountQuantity":
          current.Amount = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "amountString":
          current.Amount = new FhirString(reader.GetString());
          break;

        // Complex: moiety, Export: MoietyComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Property into JSON
    /// </summary>
    public static void SerializeJson(this SubstanceSpecification.PropertyComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Property, Export: PropertyComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Category != null)
      {
        writer.WritePropertyName("category");
        current.Category.SerializeJson(writer, options);
      }

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if ((current.ParametersElement != null) && (current.ParametersElement.Value != null))
      {
        writer.WriteString("parameters",current.ParametersElement.Value);
      }

      if (current.DefiningSubstance != null)
      {
        switch (current.DefiningSubstance)
        {
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("definingSubstanceReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("definingSubstanceCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Amount != null)
      {
        switch (current.Amount)
        {
          case Quantity v_Quantity:
            writer.WritePropertyName("amountQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case FhirString v_FhirString:
            writer.WriteString("amountString",v_FhirString.Value);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Property
    /// </summary>
    public static void DeserializeJson(this SubstanceSpecification.PropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Property
    /// </summary>
    public static void DeserializeJsonProperty(this SubstanceSpecification.PropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "code":
          current.Code = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "parameters":
          current.ParametersElement = new FhirString(reader.GetString());

          break;

        case "definingSubstanceReference":
          current.DefiningSubstance = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "definingSubstanceCodeableConcept":
          current.DefiningSubstance = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "amountQuantity":
          current.Amount = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "amountString":
          current.Amount = new FhirString(reader.GetString());
          break;

        // Complex: property, Export: PropertyComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Structure into JSON
    /// </summary>
    public static void SerializeJson(this SubstanceSpecification.StructureComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Structure, Export: StructureComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Stereochemistry != null)
      {
        writer.WritePropertyName("stereochemistry");
        current.Stereochemistry.SerializeJson(writer, options);
      }

      if (current.OpticalActivity != null)
      {
        writer.WritePropertyName("opticalActivity");
        current.OpticalActivity.SerializeJson(writer, options);
      }

      if ((current.MolecularFormulaElement != null) && (current.MolecularFormulaElement.Value != null))
      {
        writer.WriteString("molecularFormula",current.MolecularFormulaElement.Value);
      }

      if ((current.MolecularFormulaByMoietyElement != null) && (current.MolecularFormulaByMoietyElement.Value != null))
      {
        writer.WriteString("molecularFormulaByMoiety",current.MolecularFormulaByMoietyElement.Value);
      }

      if ((current.Isotope != null) && (current.Isotope.Count != 0))
      {
        writer.WritePropertyName("isotope");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.IsotopeComponent val in current.Isotope)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.MolecularWeight != null)
      {
        writer.WritePropertyName("molecularWeight");
        current.MolecularWeight.SerializeJson(writer, options);
      }

      if ((current.Source != null) && (current.Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Source)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Representation != null) && (current.Representation.Count != 0))
      {
        writer.WritePropertyName("representation");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.RepresentationComponent val in current.Representation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Structure
    /// </summary>
    public static void DeserializeJson(this SubstanceSpecification.StructureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Structure
    /// </summary>
    public static void DeserializeJsonProperty(this SubstanceSpecification.StructureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "stereochemistry":
          current.Stereochemistry = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "opticalActivity":
          current.OpticalActivity = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "molecularFormula":
          current.MolecularFormulaElement = new FhirString(reader.GetString());

          break;

        case "molecularFormulaByMoiety":
          current.MolecularFormulaByMoietyElement = new FhirString(reader.GetString());

          break;

        case "isotope":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Isotope = new List<SubstanceSpecification.IsotopeComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Isotope.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.IsotopeComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Isotope.Count == 0)
          {
            current.Isotope = null;
          }

          break;

        case "molecularWeight":
          current.MolecularWeight = JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent>(ref reader, options);

          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Source = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Source.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Source.Count == 0)
          {
            current.Source = null;
          }

          break;

        case "representation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Representation = new List<SubstanceSpecification.RepresentationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Representation.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.RepresentationComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Representation.Count == 0)
          {
            current.Representation = null;
          }

          break;

        // Complex: structure, Export: StructureComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Isotope into JSON
    /// </summary>
    public static void SerializeJson(this SubstanceSpecification.IsotopeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Isotope, Export: IsotopeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (current.Name != null)
      {
        writer.WritePropertyName("name");
        current.Name.SerializeJson(writer, options);
      }

      if (current.Substitution != null)
      {
        writer.WritePropertyName("substitution");
        current.Substitution.SerializeJson(writer, options);
      }

      if (current.HalfLife != null)
      {
        writer.WritePropertyName("halfLife");
        current.HalfLife.SerializeJson(writer, options);
      }

      if (current.MolecularWeight != null)
      {
        writer.WritePropertyName("molecularWeight");
        current.MolecularWeight.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Isotope
    /// </summary>
    public static void DeserializeJson(this SubstanceSpecification.IsotopeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Isotope
    /// </summary>
    public static void DeserializeJsonProperty(this SubstanceSpecification.IsotopeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          current.Identifier = JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options);

          break;

        case "name":
          current.Name = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "substitution":
          current.Substitution = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "halfLife":
          current.HalfLife = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);

          break;

        case "molecularWeight":
          current.MolecularWeight = JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent>(ref reader, options);

          break;

        // Complex: isotope, Export: IsotopeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#MolecularWeight into JSON
    /// </summary>
    public static void SerializeJson(this SubstanceSpecification.MolecularWeightComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#MolecularWeight, Export: MolecularWeightComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Method != null)
      {
        writer.WritePropertyName("method");
        current.Method.SerializeJson(writer, options);
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Amount != null)
      {
        writer.WritePropertyName("amount");
        current.Amount.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#MolecularWeight
    /// </summary>
    public static void DeserializeJson(this SubstanceSpecification.MolecularWeightComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#MolecularWeight
    /// </summary>
    public static void DeserializeJsonProperty(this SubstanceSpecification.MolecularWeightComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "method":
          current.Method = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "amount":
          current.Amount = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);

          break;

        // Complex: molecularWeight, Export: MolecularWeightComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Representation into JSON
    /// </summary>
    public static void SerializeJson(this SubstanceSpecification.RepresentationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Representation, Export: RepresentationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.RepresentationElement != null) && (current.RepresentationElement.Value != null))
      {
        writer.WriteString("representation",current.RepresentationElement.Value);
      }

      if (current.Attachment != null)
      {
        writer.WritePropertyName("attachment");
        current.Attachment.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Representation
    /// </summary>
    public static void DeserializeJson(this SubstanceSpecification.RepresentationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Representation
    /// </summary>
    public static void DeserializeJsonProperty(this SubstanceSpecification.RepresentationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "representation":
          current.RepresentationElement = new FhirString(reader.GetString());

          break;

        case "attachment":
          current.Attachment = JsonSerializer.Deserialize<Hl7.Fhir.Model.Attachment>(ref reader, options);

          break;

        // Complex: representation, Export: RepresentationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Code into JSON
    /// </summary>
    public static void SerializeJson(this SubstanceSpecification.CodeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Code, Export: CodeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (current.Status != null)
      {
        writer.WritePropertyName("status");
        current.Status.SerializeJson(writer, options);
      }

      if ((current.StatusDateElement != null) && (current.StatusDateElement.Value != null))
      {
        writer.WriteString("statusDate",current.StatusDateElement.Value);
      }

      if ((current.CommentElement != null) && (current.CommentElement.Value != null))
      {
        writer.WriteString("comment",current.CommentElement.Value);
      }

      if ((current.Source != null) && (current.Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Source)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Code
    /// </summary>
    public static void DeserializeJson(this SubstanceSpecification.CodeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Code
    /// </summary>
    public static void DeserializeJsonProperty(this SubstanceSpecification.CodeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.Code = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "status":
          current.Status = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "statusDate":
          current.StatusDateElement = new FhirDateTime(reader.GetString());

          break;

        case "comment":
          current.CommentElement = new FhirString(reader.GetString());

          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Source = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Source.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Source.Count == 0)
          {
            current.Source = null;
          }

          break;

        // Complex: code, Export: CodeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Name into JSON
    /// </summary>
    public static void SerializeJson(this SubstanceSpecification.NameComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Name, Export: NameComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Status != null)
      {
        writer.WritePropertyName("status");
        current.Status.SerializeJson(writer, options);
      }

      if ((current.PreferredElement != null) && (current.PreferredElement.Value != null))
      {
        writer.WriteBoolean("preferred",(bool)current.PreferredElement.Value);
      }

      if ((current.Language != null) && (current.Language.Count != 0))
      {
        writer.WritePropertyName("language");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Language)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Domain != null) && (current.Domain.Count != 0))
      {
        writer.WritePropertyName("domain");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Domain)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Synonym != null) && (current.Synonym.Count != 0))
      {
        writer.WritePropertyName("synonym");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.NameComponent val in current.Synonym)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Translation != null) && (current.Translation.Count != 0))
      {
        writer.WritePropertyName("translation");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.NameComponent val in current.Translation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Official != null) && (current.Official.Count != 0))
      {
        writer.WritePropertyName("official");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.OfficialComponent val in current.Official)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Source != null) && (current.Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Source)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Name
    /// </summary>
    public static void DeserializeJson(this SubstanceSpecification.NameComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Name
    /// </summary>
    public static void DeserializeJsonProperty(this SubstanceSpecification.NameComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "status":
          current.Status = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "preferred":
          current.PreferredElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "language":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Language = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Language.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Language.Count == 0)
          {
            current.Language = null;
          }

          break;

        case "domain":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Domain = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Domain.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Domain.Count == 0)
          {
            current.Domain = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Jurisdiction.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }

          break;

        case "synonym":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Synonym = new List<SubstanceSpecification.NameComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Synonym.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.NameComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Synonym.Count == 0)
          {
            current.Synonym = null;
          }

          break;

        case "translation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Translation = new List<SubstanceSpecification.NameComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Translation.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.NameComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Translation.Count == 0)
          {
            current.Translation = null;
          }

          break;

        case "official":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Official = new List<SubstanceSpecification.OfficialComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Official.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.SubstanceSpecification.OfficialComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Official.Count == 0)
          {
            current.Official = null;
          }

          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Source = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Source.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Source.Count == 0)
          {
            current.Source = null;
          }

          break;

        // Complex: name, Export: NameComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Official into JSON
    /// </summary>
    public static void SerializeJson(this SubstanceSpecification.OfficialComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Official, Export: OfficialComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Authority != null)
      {
        writer.WritePropertyName("authority");
        current.Authority.SerializeJson(writer, options);
      }

      if (current.Status != null)
      {
        writer.WritePropertyName("status");
        current.Status.SerializeJson(writer, options);
      }

      if ((current.DateElement != null) && (current.DateElement.Value != null))
      {
        writer.WriteString("date",current.DateElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Official
    /// </summary>
    public static void DeserializeJson(this SubstanceSpecification.OfficialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Official
    /// </summary>
    public static void DeserializeJsonProperty(this SubstanceSpecification.OfficialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authority":
          current.Authority = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "status":
          current.Status = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "date":
          current.DateElement = new FhirDateTime(reader.GetString());

          break;

        // Complex: official, Export: OfficialComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Relationship into JSON
    /// </summary>
    public static void SerializeJson(this SubstanceSpecification.RelationshipComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Relationship, Export: RelationshipComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Substance != null)
      {
        switch (current.Substance)
        {
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("substanceReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
          case CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("substanceCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Relationship != null)
      {
        writer.WritePropertyName("relationship");
        current.Relationship.SerializeJson(writer, options);
      }

      if ((current.IsDefiningElement != null) && (current.IsDefiningElement.Value != null))
      {
        writer.WriteBoolean("isDefining",(bool)current.IsDefiningElement.Value);
      }

      if (current.Amount != null)
      {
        switch (current.Amount)
        {
          case Quantity v_Quantity:
            writer.WritePropertyName("amountQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Range v_Range:
            writer.WritePropertyName("amountRange");
            v_Range.SerializeJson(writer, options);
            break;
          case Ratio v_Ratio:
            writer.WritePropertyName("amountRatio");
            v_Ratio.SerializeJson(writer, options);
            break;
          case FhirString v_FhirString:
            writer.WriteString("amountString",v_FhirString.Value);
            break;
        }
      }
      if (current.AmountRatioLowLimit != null)
      {
        writer.WritePropertyName("amountRatioLowLimit");
        current.AmountRatioLowLimit.SerializeJson(writer, options);
      }

      if (current.AmountType != null)
      {
        writer.WritePropertyName("amountType");
        current.AmountType.SerializeJson(writer, options);
      }

      if ((current.Source != null) && (current.Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Source)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Relationship
    /// </summary>
    public static void DeserializeJson(this SubstanceSpecification.RelationshipComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Relationship
    /// </summary>
    public static void DeserializeJsonProperty(this SubstanceSpecification.RelationshipComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "substanceReference":
          current.Substance = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "substanceCodeableConcept":
          current.Substance = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);
          break;

        case "relationship":
          current.Relationship = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "isDefining":
          current.IsDefiningElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "amountQuantity":
          current.Amount = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);
          break;

        case "amountRange":
          current.Amount = JsonSerializer.Deserialize<Hl7.Fhir.Model.Range>(ref reader, options);
          break;

        case "amountRatio":
          current.Amount = JsonSerializer.Deserialize<Hl7.Fhir.Model.Ratio>(ref reader, options);
          break;

        case "amountString":
          current.Amount = new FhirString(reader.GetString());
          break;

        case "amountRatioLowLimit":
          current.AmountRatioLowLimit = JsonSerializer.Deserialize<Hl7.Fhir.Model.Ratio>(ref reader, options);

          break;

        case "amountType":
          current.AmountType = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Source = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Source.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Source.Count == 0)
          {
            current.Source = null;
          }

          break;

        // Complex: relationship, Export: RelationshipComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class SubstanceSpecificationJsonConverter : JsonConverter<SubstanceSpecification>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(SubstanceSpecification).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, SubstanceSpecification value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override SubstanceSpecification Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        SubstanceSpecification target = new SubstanceSpecification();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
