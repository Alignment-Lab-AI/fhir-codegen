// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Model.JsonExtensions;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model.JsonExtensions
{
  /// <summary>
  /// JSON Serialization Extensions for DeviceDefinition
  /// </summary>
  public static class DeviceDefinitionJsonExtensions
  {
    /// <summary>
    /// Serialize a FHIR DeviceDefinition into JSON
    /// </summary>
    public static void SerializeJson(this DeviceDefinition current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","DeviceDefinition");
      // Complex: DeviceDefinition, Export: DeviceDefinition, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.UdiDeviceIdentifier != null) && (current.UdiDeviceIdentifier.Count != 0))
      {
        writer.WritePropertyName("udiDeviceIdentifier");
        writer.WriteStartArray();
        foreach (DeviceDefinition.UdiDeviceIdentifierComponent val in current.UdiDeviceIdentifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Manufacturer != null)
      {
        switch (current.Manufacturer)
        {
          case FhirString v_FhirString:
            writer.WriteString("manufacturerString",v_FhirString.Value);
            break;
          case ResourceReference v_ResourceReference:
            writer.WritePropertyName("manufacturerReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.DeviceName != null) && (current.DeviceName.Count != 0))
      {
        writer.WritePropertyName("deviceName");
        writer.WriteStartArray();
        foreach (DeviceDefinition.DeviceNameComponent val in current.DeviceName)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ModelNumberElement != null) && (current.ModelNumberElement.Value != null))
      {
        writer.WriteString("modelNumber",current.ModelNumberElement.Value);
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.Specialization != null) && (current.Specialization.Count != 0))
      {
        writer.WritePropertyName("specialization");
        writer.WriteStartArray();
        foreach (DeviceDefinition.SpecializationComponent val in current.Specialization)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.VersionElement != null) && (current.VersionElement.Count != 0))
      {
        writer.WritePropertyName("version");
        writer.WriteStartArray();
        foreach (FhirString val in current.VersionElement)
        {
          writer.WriteStringValue(val.Value);
        }
        writer.WriteEndArray();
      }

      if ((current.Safety != null) && (current.Safety.Count != 0))
      {
        writer.WritePropertyName("safety");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Safety)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ShelfLifeStorage != null) && (current.ShelfLifeStorage.Count != 0))
      {
        writer.WritePropertyName("shelfLifeStorage");
        writer.WriteStartArray();
        foreach (ProductShelfLife val in current.ShelfLifeStorage)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.PhysicalCharacteristics != null)
      {
        writer.WritePropertyName("physicalCharacteristics");
        current.PhysicalCharacteristics.SerializeJson(writer, options);
      }

      if ((current.LanguageCode != null) && (current.LanguageCode.Count != 0))
      {
        writer.WritePropertyName("languageCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.LanguageCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Capability != null) && (current.Capability.Count != 0))
      {
        writer.WritePropertyName("capability");
        writer.WriteStartArray();
        foreach (DeviceDefinition.CapabilityComponent val in current.Capability)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Property != null) && (current.Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();
        foreach (DeviceDefinition.PropertyComponent val in current.Property)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Owner != null)
      {
        writer.WritePropertyName("owner");
        current.Owner.SerializeJson(writer, options);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactPoint val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.UrlElement != null) && (current.UrlElement.Value != null))
      {
        writer.WriteString("url",current.UrlElement.Value);
      }

      if ((current.OnlineInformationElement != null) && (current.OnlineInformationElement.Value != null))
      {
        writer.WriteString("onlineInformation",current.OnlineInformationElement.Value);
      }

      if ((current.Note != null) && (current.Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();
        foreach (Annotation val in current.Note)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.ParentDevice != null)
      {
        writer.WritePropertyName("parentDevice");
        current.ParentDevice.SerializeJson(writer, options);
      }

      if ((current.Material != null) && (current.Material.Count != 0))
      {
        writer.WritePropertyName("material");
        writer.WriteStartArray();
        foreach (DeviceDefinition.MaterialComponent val in current.Material)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition
    /// </summary>
    public static void DeserializeJson(this DeviceDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition
    /// </summary>
    public static void DeserializeJsonProperty(this DeviceDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Identifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Identifier>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }

          break;

        case "udiDeviceIdentifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.UdiDeviceIdentifier = new List<DeviceDefinition.UdiDeviceIdentifierComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.UdiDeviceIdentifier.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.UdiDeviceIdentifier.Count == 0)
          {
            current.UdiDeviceIdentifier = null;
          }

          break;

        case "manufacturerString":
          current.Manufacturer = new FhirString(reader.GetString());
          break;

        case "manufacturerReference":
          current.Manufacturer = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);
          break;

        case "deviceName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.DeviceName = new List<DeviceDefinition.DeviceNameComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.DeviceName.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.DeviceName.Count == 0)
          {
            current.DeviceName = null;
          }

          break;

        case "modelNumber":
          current.ModelNumberElement = new FhirString(reader.GetString());

          break;

        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "specialization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Specialization = new List<DeviceDefinition.SpecializationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Specialization.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.DeviceDefinition.SpecializationComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Specialization.Count == 0)
          {
            current.Specialization = null;
          }

          break;

        case "version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.VersionElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.VersionElement.Add(new FhirString(reader.GetString()));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.VersionElement.Count == 0)
          {
            current.VersionElement = null;
          }

          break;

        case "safety":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Safety = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Safety.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Safety.Count == 0)
          {
            current.Safety = null;
          }

          break;

        case "shelfLifeStorage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ShelfLifeStorage = new List<ProductShelfLife>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ShelfLifeStorage.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ProductShelfLife>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ShelfLifeStorage.Count == 0)
          {
            current.ShelfLifeStorage = null;
          }

          break;

        case "physicalCharacteristics":
          current.PhysicalCharacteristics = JsonSerializer.Deserialize<Hl7.Fhir.Model.ProdCharacteristic>(ref reader, options);

          break;

        case "languageCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.LanguageCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.LanguageCode.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.LanguageCode.Count == 0)
          {
            current.LanguageCode = null;
          }

          break;

        case "capability":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Capability = new List<DeviceDefinition.CapabilityComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Capability.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.DeviceDefinition.CapabilityComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Capability.Count == 0)
          {
            current.Capability = null;
          }

          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Property = new List<DeviceDefinition.PropertyComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Property.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.DeviceDefinition.PropertyComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Property.Count == 0)
          {
            current.Property = null;
          }

          break;

        case "owner":
          current.Owner = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Contact = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Contact.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.ContactPoint>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }

          break;

        case "url":
          current.UrlElement = new FhirUri(reader.GetString());

          break;

        case "onlineInformation":
          current.OnlineInformationElement = new FhirUri(reader.GetString());

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Note.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Annotation>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }

          break;

        case "quantity":
          current.Quantity = JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options);

          break;

        case "parentDevice":
          current.ParentDevice = JsonSerializer.Deserialize<Hl7.Fhir.Model.ResourceReference>(ref reader, options);

          break;

        case "material":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Material = new List<DeviceDefinition.MaterialComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Material.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.DeviceDefinition.MaterialComponent>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Material.Count == 0)
          {
            current.Material = null;
          }

          break;

        // Complex: DeviceDefinition, Export: DeviceDefinition, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR DeviceDefinition#UdiDeviceIdentifier into JSON
    /// </summary>
    public static void SerializeJson(this DeviceDefinition.UdiDeviceIdentifierComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: DeviceDefinition#UdiDeviceIdentifier, Export: UdiDeviceIdentifierComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("deviceIdentifier",current.DeviceIdentifierElement.Value);

      writer.WriteString("issuer",current.IssuerElement.Value);

      writer.WriteString("jurisdiction",current.JurisdictionElement.Value);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#UdiDeviceIdentifier
    /// </summary>
    public static void DeserializeJson(this DeviceDefinition.UdiDeviceIdentifierComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#UdiDeviceIdentifier
    /// </summary>
    public static void DeserializeJsonProperty(this DeviceDefinition.UdiDeviceIdentifierComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "deviceIdentifier":
          current.DeviceIdentifierElement = new FhirString(reader.GetString());

          break;

        case "issuer":
          current.IssuerElement = new FhirUri(reader.GetString());

          break;

        case "jurisdiction":
          current.JurisdictionElement = new FhirUri(reader.GetString());

          break;

        // Complex: udiDeviceIdentifier, Export: UdiDeviceIdentifierComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR DeviceDefinition#DeviceName into JSON
    /// </summary>
    public static void SerializeJson(this DeviceDefinition.DeviceNameComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: DeviceDefinition#DeviceName, Export: DeviceNameComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("name",current.NameElement.Value);

      writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#DeviceName
    /// </summary>
    public static void DeserializeJson(this DeviceDefinition.DeviceNameComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#DeviceName
    /// </summary>
    public static void DeserializeJsonProperty(this DeviceDefinition.DeviceNameComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          current.NameElement = new FhirString(reader.GetString());

          break;

        case "type":
          current.TypeElement =new Code<Hl7.Fhir.Model.DeviceNameType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.DeviceNameType>(reader.GetString()));

          break;

        // Complex: deviceName, Export: DeviceNameComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR DeviceDefinition#Specialization into JSON
    /// </summary>
    public static void SerializeJson(this DeviceDefinition.SpecializationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: DeviceDefinition#Specialization, Export: SpecializationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WriteString("systemType",current.SystemTypeElement.Value);

      if ((current.VersionElement != null) && (current.VersionElement.Value != null))
      {
        writer.WriteString("version",current.VersionElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Specialization
    /// </summary>
    public static void DeserializeJson(this DeviceDefinition.SpecializationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Specialization
    /// </summary>
    public static void DeserializeJsonProperty(this DeviceDefinition.SpecializationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "systemType":
          current.SystemTypeElement = new FhirString(reader.GetString());

          break;

        case "version":
          current.VersionElement = new FhirString(reader.GetString());

          break;

        // Complex: specialization, Export: SpecializationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR DeviceDefinition#Capability into JSON
    /// </summary>
    public static void SerializeJson(this DeviceDefinition.CapabilityComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: DeviceDefinition#Capability, Export: CapabilityComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if ((current.Description != null) && (current.Description.Count != 0))
      {
        writer.WritePropertyName("description");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Description)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Capability
    /// </summary>
    public static void DeserializeJson(this DeviceDefinition.CapabilityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Capability
    /// </summary>
    public static void DeserializeJsonProperty(this DeviceDefinition.CapabilityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "description":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.Description = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.Description.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.Description.Count == 0)
          {
            current.Description = null;
          }

          break;

        // Complex: capability, Export: CapabilityComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR DeviceDefinition#Property into JSON
    /// </summary>
    public static void SerializeJson(this DeviceDefinition.PropertyComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: DeviceDefinition#Property, Export: PropertyComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("type");
      current.Type.SerializeJson(writer, options);

      if ((current.ValueQuantity != null) && (current.ValueQuantity.Count != 0))
      {
        writer.WritePropertyName("valueQuantity");
        writer.WriteStartArray();
        foreach (Quantity val in current.ValueQuantity)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ValueCode != null) && (current.ValueCode.Count != 0))
      {
        writer.WritePropertyName("valueCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ValueCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Property
    /// </summary>
    public static void DeserializeJson(this DeviceDefinition.PropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Property
    /// </summary>
    public static void DeserializeJsonProperty(this DeviceDefinition.PropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "valueQuantity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ValueQuantity = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ValueQuantity.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.Quantity>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ValueQuantity.Count == 0)
          {
            current.ValueQuantity = null;
          }

          break;

        case "valueCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          current.ValueCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            current.ValueCode.Add(JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options));

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (current.ValueCode.Count == 0)
          {
            current.ValueCode = null;
          }

          break;

        // Complex: property, Export: PropertyComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR DeviceDefinition#Material into JSON
    /// </summary>
    public static void SerializeJson(this DeviceDefinition.MaterialComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: DeviceDefinition#Material, Export: MaterialComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      writer.WritePropertyName("substance");
      current.Substance.SerializeJson(writer, options);

      if ((current.AlternateElement != null) && (current.AlternateElement.Value != null))
      {
        writer.WriteBoolean("alternate",(bool)current.AlternateElement.Value);
      }

      if ((current.AllergenicIndicatorElement != null) && (current.AllergenicIndicatorElement.Value != null))
      {
        writer.WriteBoolean("allergenicIndicator",(bool)current.AllergenicIndicatorElement.Value);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Material
    /// </summary>
    public static void DeserializeJson(this DeviceDefinition.MaterialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Material
    /// </summary>
    public static void DeserializeJsonProperty(this DeviceDefinition.MaterialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "substance":
          current.Substance = JsonSerializer.Deserialize<Hl7.Fhir.Model.CodeableConcept>(ref reader, options);

          break;

        case "alternate":
          current.AlternateElement = new FhirBoolean(reader.GetBoolean());

          break;

        case "allergenicIndicator":
          current.AllergenicIndicatorElement = new FhirBoolean(reader.GetBoolean());

          break;

        // Complex: material, Export: MaterialComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class DeviceDefinitionJsonConverter : JsonConverter<DeviceDefinition>
    {
      /// <summary>
      /// Determines whether the specified type can be converted.
      /// </summary>
      public override bool CanConvert(Type objectType) =>
        typeof(DeviceDefinition).IsAssignableFrom(objectType);

      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, DeviceDefinition value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override DeviceDefinition Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        DeviceDefinition target = new DeviceDefinition();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
